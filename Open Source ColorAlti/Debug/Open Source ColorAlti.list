
Open Source ColorAlti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005394  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080054a8  080054a8  000154a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a8  080056a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080056a8  080056a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056a8  080056a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  2000000c  080056bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  080056bc  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5cb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e88  00000000  00000000  0002c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0002e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  0002f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179d1  00000000  00000000  0002fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f088  00000000  00000000  000477c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e6b  00000000  00000000  00056851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e06bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b4c  00000000  00000000  000e070c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800548c 	.word	0x0800548c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	0800548c 	.word	0x0800548c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_f2uiz>:
 8000fe8:	0042      	lsls	r2, r0, #1
 8000fea:	d20e      	bcs.n	800100a <__aeabi_f2uiz+0x22>
 8000fec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ff0:	d30b      	bcc.n	800100a <__aeabi_f2uiz+0x22>
 8000ff2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffa:	d409      	bmi.n	8001010 <__aeabi_f2uiz+0x28>
 8000ffc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2uiz+0x32>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d102      	bne.n	8001020 <__aeabi_f2uiz+0x38>
 800101a:	f04f 30ff 	mov.w	r0, #4294967295
 800101e:	4770      	bx	lr
 8001020:	f04f 0000 	mov.w	r0, #0
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f835 	bl	80010a0 <Set_LED_Timer>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	460a      	mov	r2, r1
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	4613      	mov	r3, r2
 800104c:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 800104e:	f000 f9ef 	bl	8001430 <Clear_All_LED>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b0a      	cmp	r3, #10
 8001056:	d901      	bls.n	800105c <Strip_Progress_Bar_Single_Color+0x1e>
 8001058:	230a      	movs	r3, #10
 800105a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e008      	b.n	8001074 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	79ba      	ldrb	r2, [r7, #6]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f9b6 	bl	80013da <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	429a      	cmp	r2, r3
 800107a:	d3f2      	bcc.n	8001062 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <Strip_Clear>:

void Strip_Clear()
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
	Clear_All_LED();
 800108a:	f000 f9d1 	bl	8001430 <Clear_All_LED>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <Strip_Send>:

void Strip_Send()
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
	WS2813_Send();
 8001096:	f000 f8c3 	bl	8001220 <WS2813_Send>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <Set_LED_Timer+0x18>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000028 	.word	0x20000028

080010bc <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <Set_LED+0x58>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	b2d9      	uxtb	r1, r3
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <Set_LED+0x58>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	460a      	mov	r2, r1
 80010e8:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	b2d9      	uxtb	r1, r3
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <Set_LED+0x58>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	460a      	mov	r2, r1
 80010f8:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2d9      	uxtb	r1, r3
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <Set_LED+0x58>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	460a      	mov	r2, r1
 8001108:	71da      	strb	r2, [r3, #7]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000028 	.word	0x20000028

08001118 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b2d      	cmp	r3, #45	; 0x2d
 8001124:	dd01      	ble.n	800112a <Set_Brightness+0x12>
 8001126:	232d      	movs	r3, #45	; 0x2d
 8001128:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e065      	b.n	80011fc <Set_Brightness+0xe4>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 8001130:	4a39      	ldr	r2, [pc, #228]	; (8001218 <Set_Brightness+0x100>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	7919      	ldrb	r1, [r3, #4]
 800113a:	4a37      	ldr	r2, [pc, #220]	; (8001218 <Set_Brightness+0x100>)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	330a      	adds	r3, #10
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	460a      	mov	r2, r1
 8001146:	711a      	strb	r2, [r3, #4]
		for (int j=1; j<4; j++)
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e050      	b.n	80011f0 <Set_Brightness+0xd8>
		{
			float angle = 90-brightness;  // in degrees
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fda3 	bl	8000ca0 <__aeabi_i2f>
 800115a:	4603      	mov	r3, r0
 800115c:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff f95a 	bl	8000418 <__aeabi_f2d>
 8001164:	a32a      	add	r3, pc, #168	; (adr r3, 8001210 <Set_Brightness+0xf8>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff f9ad 	bl	80004c8 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <Set_Brightness+0x104>)
 800117c:	f7ff face 	bl	800071c <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fc80 	bl	8000a8c <__aeabi_d2f>
 800118c:	4603      	mov	r3, r0
 800118e:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 8001190:	4a21      	ldr	r2, [pc, #132]	; (8001218 <Set_Brightness+0x100>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	441a      	add	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4413      	add	r3, r2
 800119c:	3304      	adds	r3, #4
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f927 	bl	80003f4 <__aeabi_i2d>
 80011a6:	4604      	mov	r4, r0
 80011a8:	460d      	mov	r5, r1
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f7ff f934 	bl	8000418 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f003 f902 	bl	80043c0 <tan>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff faaa 	bl	800071c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fc3c 	bl	8000a4c <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b2d9      	uxtb	r1, r3
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <Set_Brightness+0x100>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	441a      	add	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4413      	add	r3, r2
 80011e4:	332c      	adds	r3, #44	; 0x2c
 80011e6:	460a      	mov	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	3301      	adds	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	ddab      	ble.n	800114e <Set_Brightness+0x36>
	for (int i=0; i<MAX_LED; i++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2b09      	cmp	r3, #9
 8001200:	dd96      	ble.n	8001130 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bdb0      	pop	{r4, r5, r7, pc}
 800120c:	f3af 8000 	nop.w
 8001210:	53c8d4f1 	.word	0x53c8d4f1
 8001214:	400921fb 	.word	0x400921fb
 8001218:	20000028 	.word	0x20000028
 800121c:	40668000 	.word	0x40668000

08001220 <WS2813_Send>:

void WS2813_Send ()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	e03d      	b.n	80012ac <WS2813_Send+0x8c>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8001230:	4a34      	ldr	r2, [pc, #208]	; (8001304 <WS2813_Send+0xe4>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	4931      	ldr	r1, [pc, #196]	; (8001304 <WS2813_Send+0xe4>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	431a      	orrs	r2, r3
 800124e:	492d      	ldr	r1, [pc, #180]	; (8001304 <WS2813_Send+0xe4>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800125a:	4313      	orrs	r3, r2
 800125c:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 800125e:	2317      	movs	r3, #23
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e01d      	b.n	80012a0 <WS2813_Send+0x80>
		{
			if (color&(1<<i))
 8001264:	2201      	movs	r2, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	461a      	mov	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <WS2813_Send+0x66>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <WS2813_Send+0xe4>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3328      	adds	r3, #40	; 0x28
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	2230      	movs	r2, #48	; 0x30
 8001282:	809a      	strh	r2, [r3, #4]
 8001284:	e006      	b.n	8001294 <WS2813_Send+0x74>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <WS2813_Send+0xe4>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3328      	adds	r3, #40	; 0x28
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	2214      	movs	r2, #20
 8001292:	809a      	strh	r2, [r3, #4]

			indx++;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3b01      	subs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dade      	bge.n	8001264 <WS2813_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	3301      	adds	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b09      	cmp	r3, #9
 80012b0:	ddbe      	ble.n	8001230 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	e00c      	b.n	80012d2 <WS2813_Send+0xb2>
	{
		ws_config.pwmData[indx] = 0;
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <WS2813_Send+0xe4>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3328      	adds	r3, #40	; 0x28
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	2200      	movs	r2, #0
 80012c4:	809a      	strh	r2, [r3, #4]
		indx++;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b31      	cmp	r3, #49	; 0x31
 80012d6:	ddef      	ble.n	80012b8 <WS2813_Send+0x98>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <WS2813_Send+0xe4>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	4a09      	ldr	r2, [pc, #36]	; (8001308 <WS2813_Send+0xe8>)
 80012e2:	2104      	movs	r1, #4
 80012e4:	f002 f880 	bl	80033e8 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 80012e8:	bf00      	nop
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <WS2813_Send+0xe4>)
 80012ec:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0fa      	beq.n	80012ea <WS2813_Send+0xca>
	ws_config.datasentflag = 0;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <WS2813_Send+0xe4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000028 	.word	0x20000028
 8001308:	2000007c 	.word	0x2000007c

0800130c <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <Color_To_RGB+0x24>
		rgb->r = 0;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	22ff      	movs	r2, #255	; 0xff
 8001328:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2214      	movs	r2, #20
 800132e:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <Color_To_RGB+0x3c>
		rgb->r = 255;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	22ff      	movs	r2, #255	; 0xff
 800133a:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d108      	bne.n	8001360 <Color_To_RGB+0x54>
		rgb->r = 255;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d108      	bne.n	8001378 <Color_To_RGB+0x6c>
		rgb->r = 255;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d108      	bne.n	8001390 <Color_To_RGB+0x84>
		rgb->r = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	22c8      	movs	r2, #200	; 0xc8
 800138e:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d108      	bne.n	80013a8 <Color_To_RGB+0x9c>
		rgb->r = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	709a      	strb	r2, [r3, #2]
	}
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	461a      	mov	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fe75 	bl	80010bc <Set_LED>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff8c 	bl	800130c <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffd9 	bl	80013b2 <Set_LED_From_RGB>
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2104      	movs	r1, #4
 8001416:	4618      	mov	r0, r3
 8001418:	f002 f980 	bl	800371c <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000028 	.word	0x20000028

08001430 <Clear_All_LED>:

void Clear_All_LED()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e007      	b.n	800144c <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2105      	movs	r1, #5
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffca 	bl	80013da <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	3301      	adds	r3, #1
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b09      	cmp	r3, #9
 8001450:	d9f4      	bls.n	800143c <Clear_All_LED+0xc>
	}
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <set_strip>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_strip(uint16_t alt, uint16_t step)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	460a      	mov	r2, r1
 8001466:	80fb      	strh	r3, [r7, #6]
 8001468:	4613      	mov	r3, r2
 800146a:	80bb      	strh	r3, [r7, #4]
	Strip_Clear();
 800146c:	f7ff fe0b 	bl	8001086 <Strip_Clear>
	uint8_t num_led = 10;
 8001470:	230a      	movs	r3, #10
 8001472:	75bb      	strb	r3, [r7, #22]
	uint8_t state = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	75fb      	strb	r3, [r7, #23]
	uint16_t exit = 12500;
 8001478:	f243 03d4 	movw	r3, #12500	; 0x30d4
 800147c:	82bb      	strh	r3, [r7, #20]
	uint16_t breakoff = 5500;
 800147e:	f241 537c 	movw	r3, #5500	; 0x157c
 8001482:	827b      	strh	r3, [r7, #18]
	uint16_t deploy = 4500;
 8001484:	f241 1394 	movw	r3, #4500	; 0x1194
 8001488:	823b      	strh	r3, [r7, #16]
	if(alt > breakoff + 1500) state = 0; //Freefall
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	8a7b      	ldrh	r3, [r7, #18]
 800148e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001492:	429a      	cmp	r2, r3
 8001494:	dd02      	ble.n	800149c <set_strip+0x40>
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	e018      	b.n	80014ce <set_strip+0x72>
	else if(alt > breakoff) state = 1; //Pre breakoff
 800149c:	88fa      	ldrh	r2, [r7, #6]
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d902      	bls.n	80014aa <set_strip+0x4e>
 80014a4:	2301      	movs	r3, #1
 80014a6:	75fb      	strb	r3, [r7, #23]
 80014a8:	e011      	b.n	80014ce <set_strip+0x72>
	else if(alt > breakoff - 500) state = 2; //Breakoff
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	f2a3 12f3 	subw	r2, r3, #499	; 0x1f3
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dc02      	bgt.n	80014bc <set_strip+0x60>
 80014b6:	2302      	movs	r3, #2
 80014b8:	75fb      	strb	r3, [r7, #23]
 80014ba:	e008      	b.n	80014ce <set_strip+0x72>
	else if(alt > deploy) state = 3; //Track
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	8a3b      	ldrh	r3, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d902      	bls.n	80014ca <set_strip+0x6e>
 80014c4:	2303      	movs	r3, #3
 80014c6:	75fb      	strb	r3, [r7, #23]
 80014c8:	e001      	b.n	80014ce <set_strip+0x72>
	else state = 4;
 80014ca:	2304      	movs	r3, #4
 80014cc:	75fb      	strb	r3, [r7, #23]

	if(state == 0)
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d131      	bne.n	8001538 <set_strip+0xdc>
	{
		uint8_t leds = (num_led + 1) * (1-(float)(alt - (breakoff + 1500)) / (exit - (breakoff + 1500)));
 80014d4:	7dbb      	ldrb	r3, [r7, #22]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fbe1 	bl	8000ca0 <__aeabi_i2f>
 80014de:	4604      	mov	r4, r0
 80014e0:	88fa      	ldrh	r2, [r7, #6]
 80014e2:	8a7b      	ldrh	r3, [r7, #18]
 80014e4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fbd8 	bl	8000ca0 <__aeabi_i2f>
 80014f0:	4605      	mov	r5, r0
 80014f2:	8aba      	ldrh	r2, [r7, #20]
 80014f4:	8a7b      	ldrh	r3, [r7, #18]
 80014f6:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fbcf 	bl	8000ca0 <__aeabi_i2f>
 8001502:	4603      	mov	r3, r0
 8001504:	4619      	mov	r1, r3
 8001506:	4628      	mov	r0, r5
 8001508:	f7ff fcd2 	bl	8000eb0 <__aeabi_fdiv>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001514:	f7ff fb0e 	bl	8000b34 <__aeabi_fsub>
 8001518:	4603      	mov	r3, r0
 800151a:	4619      	mov	r1, r3
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff fc13 	bl	8000d48 <__aeabi_fmul>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fd5f 	bl	8000fe8 <__aeabi_f2uiz>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]

		Strip_Progress_Bar_Single_Color(leds, SKYBLUE);
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2104      	movs	r1, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd83 	bl	800103e <Strip_Progress_Bar_Single_Color>
	}

	if(state == 1)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d126      	bne.n	800158c <set_strip+0x130>
	{
		uint8_t leds = (num_led + 1) * (1-(float)(alt - breakoff) / ((breakoff + 1500) - breakoff));
 800153e:	7dbb      	ldrb	r3, [r7, #22]
 8001540:	3301      	adds	r3, #1
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fbac 	bl	8000ca0 <__aeabi_i2f>
 8001548:	4604      	mov	r4, r0
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	8a7b      	ldrh	r3, [r7, #18]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fba5 	bl	8000ca0 <__aeabi_i2f>
 8001556:	4603      	mov	r3, r0
 8001558:	4939      	ldr	r1, [pc, #228]	; (8001640 <set_strip+0x1e4>)
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fca8 	bl	8000eb0 <__aeabi_fdiv>
 8001560:	4603      	mov	r3, r0
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001568:	f7ff fae4 	bl	8000b34 <__aeabi_fsub>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fbe9 	bl	8000d48 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fd35 	bl	8000fe8 <__aeabi_f2uiz>
 800157e:	4603      	mov	r3, r0
 8001580:	73bb      	strb	r3, [r7, #14]

		Strip_Progress_Bar_Single_Color(leds, GREEN);
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fd59 	bl	800103e <Strip_Progress_Bar_Single_Color>
	}

	if(state == 2)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d111      	bne.n	80015b6 <set_strip+0x15a>
	{
		uint8_t on = (step) % 2 == 0;
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	737b      	strb	r3, [r7, #13]
		if(on)
 80015a6:	7b7b      	ldrb	r3, [r7, #13]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <set_strip+0x15a>
		{
			Strip_Progress_Bar_Single_Color(num_led, GREEN);
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fd44 	bl	800103e <Strip_Progress_Bar_Single_Color>
		}
	}

	if(state == 3)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d126      	bne.n	800160a <set_strip+0x1ae>
	{
		uint8_t leds = (num_led + 1) * (1-(float)(alt - deploy) / ((deploy + 500) - deploy));
 80015bc:	7dbb      	ldrb	r3, [r7, #22]
 80015be:	3301      	adds	r3, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fb6d 	bl	8000ca0 <__aeabi_i2f>
 80015c6:	4604      	mov	r4, r0
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	8a3b      	ldrh	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb66 	bl	8000ca0 <__aeabi_i2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	491b      	ldr	r1, [pc, #108]	; (8001644 <set_strip+0x1e8>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc69 	bl	8000eb0 <__aeabi_fdiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015e6:	f7ff faa5 	bl	8000b34 <__aeabi_fsub>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff fbaa 	bl	8000d48 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fcf6 	bl	8000fe8 <__aeabi_f2uiz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	733b      	strb	r3, [r7, #12]

		Strip_Progress_Bar_Single_Color(leds, RED);
 8001600:	7b3b      	ldrb	r3, [r7, #12]
 8001602:	2102      	movs	r1, #2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fd1a 	bl	800103e <Strip_Progress_Bar_Single_Color>
	}

	if(state == 4)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d111      	bne.n	8001634 <set_strip+0x1d8>
	{
		uint8_t on = (step) % 2 == 0;
 8001610:	88bb      	ldrh	r3, [r7, #4]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	72fb      	strb	r3, [r7, #11]
		if(on)
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <set_strip+0x1d8>
		{
			Strip_Progress_Bar_Single_Color(num_led, RED);
 800162a:	7dbb      	ldrb	r3, [r7, #22]
 800162c:	2102      	movs	r1, #2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fd05 	bl	800103e <Strip_Progress_Bar_Single_Color>
		}
	}

	Strip_Send();
 8001634:	f7ff fd2d 	bl	8001092 <Strip_Send>

	//TODO: Detect if under canopy
	//Add blinking on ascent
	//Use actual altitude
}
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bdb0      	pop	{r4, r5, r7, pc}
 8001640:	44bb8000 	.word	0x44bb8000
 8001644:	43fa0000 	.word	0x43fa0000

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f000 fb45 	bl	8001cdc <HAL_Init>

  /* USER CODE BEGIN Init */
  Strip_Set_Timer(&htim2);
 8001652:	481d      	ldr	r0, [pc, #116]	; (80016c8 <main+0x80>)
 8001654:	f7ff fce8 	bl	8001028 <Strip_Set_Timer>
  Strip_Clear();
 8001658:	f7ff fd15 	bl	8001086 <Strip_Clear>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165c:	f000 f836 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001660:	f000 f992 	bl	8001988 <MX_GPIO_Init>
  MX_DMA_Init();
 8001664:	f000 f972 	bl	800194c <MX_DMA_Init>
  MX_I2C1_Init();
 8001668:	f000 f872 	bl	8001750 <MX_I2C1_Init>
  MX_TIM2_Init();
 800166c:	f000 f8ee 	bl	800184c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001670:	f000 f89c 	bl	80017ac <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(10000);
 8001674:	f242 7010 	movw	r0, #10000	; 0x2710
 8001678:	f000 fb92 	bl	8001da0 <HAL_Delay>
  uint16_t j = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	80fb      	strh	r3, [r7, #6]
  uint16_t alt = 12500;//12500;
 8001680:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8001684:	80bb      	strh	r3, [r7, #4]
  while (1)
  {
	Set_Brightness(20);
 8001686:	2014      	movs	r0, #20
 8001688:	f7ff fd46 	bl	8001118 <Set_Brightness>
	set_strip(alt, j);
 800168c:	88fa      	ldrh	r2, [r7, #6]
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fee2 	bl	800145c <set_strip>
	//Standby mode for first 20 secs
	if(HAL_GetTick() > 20000) alt -= 20; //4x speed
 8001698:	f000 fb78 	bl	8001d8c <HAL_GetTick>
 800169c:	4603      	mov	r3, r0
 800169e:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d902      	bls.n	80016ac <main+0x64>
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	3b14      	subs	r3, #20
 80016aa:	80bb      	strh	r3, [r7, #4]
	if(alt <= 0) alt = 12500;
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <main+0x70>
 80016b2:	f243 03d4 	movw	r3, #12500	; 0x30d4
 80016b6:	80bb      	strh	r3, [r7, #4]
	j++;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	3301      	adds	r3, #1
 80016bc:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100); //10hz
 80016be:	2064      	movs	r0, #100	; 0x64
 80016c0:	f000 fb6e 	bl	8001da0 <HAL_Delay>
	Set_Brightness(20);
 80016c4:	e7df      	b.n	8001686 <main+0x3e>
 80016c6:	bf00      	nop
 80016c8:	20000360 	.word	0x20000360

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	; 0x40
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2228      	movs	r2, #40	; 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fe68 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016fe:	2300      	movs	r3, #0
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001702:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	4618      	mov	r0, r3
 800170e:	f001 f9bd 	bl	8002a8c <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001718:	f000 f98a 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2102      	movs	r1, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fc2a 	bl	8002f90 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001742:	f000 f975 	bl	8001a30 <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3740      	adds	r7, #64	; 0x40
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <MX_I2C1_Init+0x54>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_I2C1_Init+0x50>)
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_I2C1_Init+0x58>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_I2C1_Init+0x50>)
 800176e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_I2C1_Init+0x50>)
 800178e:	f001 f839 	bl	8002804 <HAL_I2C_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001798:	f000 f94a 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200002c4 	.word	0x200002c4
 80017a4:	40005400 	.word	0x40005400
 80017a8:	000186a0 	.word	0x000186a0

080017ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_TIM1_Init+0x98>)
 80017ca:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <MX_TIM1_Init+0x9c>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_TIM1_Init+0x98>)
 80017d0:	2203      	movs	r2, #3
 80017d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_TIM1_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_TIM1_Init+0x98>)
 80017dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_TIM1_Init+0x98>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_TIM1_Init+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_TIM1_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f4:	4813      	ldr	r0, [pc, #76]	; (8001844 <MX_TIM1_Init+0x98>)
 80017f6:	f001 fd4f 	bl	8003298 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001800:	f000 f916 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_TIM1_Init+0x98>)
 8001812:	f002 f8ff 	bl	8003a14 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800181c:	f000 f908 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_TIM1_Init+0x98>)
 800182e:	f002 fd3d 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001838:	f000 f8fa 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000318 	.word	0x20000318
 8001848:	40012c00 	.word	0x40012c00

0800184c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <MX_TIM2_Init+0xfc>)
 800187e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <MX_TIM2_Init+0xfc>)
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <MX_TIM2_Init+0xfc>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <MX_TIM2_Init+0xfc>)
 8001892:	223f      	movs	r2, #63	; 0x3f
 8001894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <MX_TIM2_Init+0xfc>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <MX_TIM2_Init+0xfc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a2:	4829      	ldr	r0, [pc, #164]	; (8001948 <MX_TIM2_Init+0xfc>)
 80018a4:	f001 fcf8 	bl	8003298 <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80018ae:	f000 f8bf 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018bc:	4619      	mov	r1, r3
 80018be:	4822      	ldr	r0, [pc, #136]	; (8001948 <MX_TIM2_Init+0xfc>)
 80018c0:	f002 f8a8 	bl	8003a14 <HAL_TIM_ConfigClockSource>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80018ca:	f000 f8b1 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ce:	481e      	ldr	r0, [pc, #120]	; (8001948 <MX_TIM2_Init+0xfc>)
 80018d0:	f001 fd31 	bl	8003336 <HAL_TIM_PWM_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80018da:	f000 f8a9 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	4619      	mov	r1, r3
 80018ec:	4816      	ldr	r0, [pc, #88]	; (8001948 <MX_TIM2_Init+0xfc>)
 80018ee:	f002 fcdd 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80018f8:	f000 f89a 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fc:	2360      	movs	r3, #96	; 0x60
 80018fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_TIM2_Init+0xfc>)
 8001914:	f001 ffc0 	bl	8003898 <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800191e:	f000 f887 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2204      	movs	r2, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM2_Init+0xfc>)
 800192a:	f001 ffb5 	bl	8003898 <HAL_TIM_PWM_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001934:	f000 f87c 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_TIM2_Init+0xfc>)
 800193a:	f000 f941 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 800193e:	bf00      	nop
 8001940:	3738      	adds	r7, #56	; 0x38
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000360 	.word	0x20000360

0800194c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_DMA_Init+0x38>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <MX_DMA_Init+0x38>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6153      	str	r3, [r2, #20]
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_DMA_Init+0x38>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2011      	movs	r0, #17
 8001970:	f000 fb11 	bl	8001f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001974:	2011      	movs	r0, #17
 8001976:	f000 fb2a 	bl	8001fce <HAL_NVIC_EnableIRQ>

}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_GPIO_Init+0x9c>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <MX_GPIO_Init+0x9c>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_GPIO_Init+0x9c>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_GPIO_Init+0x9c>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <MX_GPIO_Init+0x9c>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_GPIO_Init+0x9c>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	213c      	movs	r1, #60	; 0x3c
 80019d0:	4815      	ldr	r0, [pc, #84]	; (8001a28 <MX_GPIO_Init+0xa0>)
 80019d2:	f000 feff 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80019dc:	4813      	ldr	r0, [pc, #76]	; (8001a2c <MX_GPIO_Init+0xa4>)
 80019de:	f000 fef9 	bl	80027d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019e2:	233c      	movs	r3, #60	; 0x3c
 80019e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2302      	movs	r3, #2
 80019f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4619      	mov	r1, r3
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <MX_GPIO_Init+0xa0>)
 80019fa:	f000 fd67 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001a02:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_GPIO_Init+0xa4>)
 8001a18:	f000 fd58 	bl	80024cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	40010c00 	.word	0x40010c00

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <Error_Handler+0x8>
	...

08001a3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_MspInit+0x40>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <HAL_MspInit+0x40>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_MspInit+0x40>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_MspInit+0x40>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_MspInit+0x40>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_MspInit+0x40>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_I2C_MspInit+0x70>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d123      	bne.n	8001ae8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_I2C_MspInit+0x74>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_I2C_MspInit+0x74>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_I2C_MspInit+0x74>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab8:	23c0      	movs	r3, #192	; 0xc0
 8001aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abc:	2312      	movs	r3, #18
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <HAL_I2C_MspInit+0x78>)
 8001acc:	f000 fcfe 	bl	80024cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_I2C_MspInit+0x74>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_I2C_MspInit+0x74>)
 8001ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ada:	61d3      	str	r3, [r2, #28]
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_I2C_MspInit+0x74>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40005400 	.word	0x40005400
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010c00 	.word	0x40010c00

08001afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <HAL_TIM_Base_MspInit+0xb4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10c      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001b14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b26:	e03e      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d139      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <HAL_TIM_Base_MspInit+0xc0>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b52:	2210      	movs	r2, #16
 8001b54:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b70:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b80:	f000 fa40 	bl	8002004 <HAL_DMA_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8001b8a:	f7ff ff51 	bl	8001a30 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	200003a8 	.word	0x200003a8
 8001bbc:	40020080 	.word	0x40020080

08001bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bde:	d117      	bne.n	8001c10 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_TIM_MspPostInit+0x58>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_TIM_MspPostInit+0x58>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_TIM_MspPostInit+0x58>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4804      	ldr	r0, [pc, #16]	; (8001c1c <HAL_TIM_MspPostInit+0x5c>)
 8001c0c:	f000 fc5e 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c66:	f000 f87f 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <DMA1_Channel7_IRQHandler+0x10>)
 8001c76:	f000 faf5 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200003a8 	.word	0x200003a8

08001c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cb6:	f7ff ffe5 	bl	8001c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f002 fb55 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff fcc3 	bl	8001648 <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ccc:	080056b0 	.word	0x080056b0
  ldr r2, =_sbss
 8001cd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cd4:	200003f0 	.word	0x200003f0

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x28>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x28>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 f947 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fea0 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40022000 	.word	0x40022000

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f95f 	bl	8001fea <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 f927 	bl	8001f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_IncTick+0x1c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x20>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_IncTick+0x20>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000008 	.word	0x20000008
 8001d88:	200003ec 	.word	0x200003ec

08001d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_GetTick+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	200003ec 	.word	0x200003ec

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffe0 	bl	8001d8c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4906      	ldr	r1, [pc, #24]	; (8001e80 <__NVIC_EnableIRQ+0x34>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f7ff ff90 	bl	8001e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff2d 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa8:	f7ff ff42 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff90 	bl	8001ed8 <NVIC_EncodePriority>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff5f 	bl	8001e84 <__NVIC_SetPriority>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff35 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ffa2 	bl	8001f3c <SysTick_Config>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e043      	b.n	80020a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_DMA_Init+0xa8>)
 8002022:	4413      	add	r3, r2
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_DMA_Init+0xac>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	009a      	lsls	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_DMA_Init+0xb0>)
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800204e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002052:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800205c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	bffdfff8 	.word	0xbffdfff8
 80020b0:	cccccccd 	.word	0xcccccccd
 80020b4:	40020000 	.word	0x40020000

080020b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_DMA_Start_IT+0x20>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e04a      	b.n	800216e <HAL_DMA_Start_IT+0xb6>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d13a      	bne.n	8002160 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f9ae 	bl	8002470 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 020e 	orr.w	r2, r2, #14
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e00f      	b.n	800214e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0204 	bic.w	r2, r2, #4
 800213c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 020a 	orr.w	r2, r2, #10
 800214c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e005      	b.n	800216c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800216c:	7dfb      	ldrb	r3, [r7, #23]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218a:	2b02      	cmp	r3, #2
 800218c:	d005      	beq.n	800219a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2204      	movs	r2, #4
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e051      	b.n	800223e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 020e 	bic.w	r2, r2, #14
 80021a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_DMA_Abort_IT+0xd0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d029      	beq.n	8002218 <HAL_DMA_Abort_IT+0xa0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_DMA_Abort_IT+0xd4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d022      	beq.n	8002214 <HAL_DMA_Abort_IT+0x9c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_DMA_Abort_IT+0xd8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01a      	beq.n	800220e <HAL_DMA_Abort_IT+0x96>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_DMA_Abort_IT+0xdc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d012      	beq.n	8002208 <HAL_DMA_Abort_IT+0x90>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_DMA_Abort_IT+0xe0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00a      	beq.n	8002202 <HAL_DMA_Abort_IT+0x8a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <HAL_DMA_Abort_IT+0xe4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d102      	bne.n	80021fc <HAL_DMA_Abort_IT+0x84>
 80021f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021fa:	e00e      	b.n	800221a <HAL_DMA_Abort_IT+0xa2>
 80021fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002200:	e00b      	b.n	800221a <HAL_DMA_Abort_IT+0xa2>
 8002202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002206:	e008      	b.n	800221a <HAL_DMA_Abort_IT+0xa2>
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	e005      	b.n	800221a <HAL_DMA_Abort_IT+0xa2>
 800220e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002212:	e002      	b.n	800221a <HAL_DMA_Abort_IT+0xa2>
 8002214:	2310      	movs	r3, #16
 8002216:	e000      	b.n	800221a <HAL_DMA_Abort_IT+0xa2>
 8002218:	2301      	movs	r3, #1
 800221a:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_DMA_Abort_IT+0xe8>)
 800221c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
    } 
  }
  return status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40020008 	.word	0x40020008
 800224c:	4002001c 	.word	0x4002001c
 8002250:	40020030 	.word	0x40020030
 8002254:	40020044 	.word	0x40020044
 8002258:	40020058 	.word	0x40020058
 800225c:	4002006c 	.word	0x4002006c
 8002260:	40020000 	.word	0x40020000

08002264 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	2204      	movs	r2, #4
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d04f      	beq.n	800232c <HAL_DMA_IRQHandler+0xc8>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04a      	beq.n	800232c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a66      	ldr	r2, [pc, #408]	; (8002454 <HAL_DMA_IRQHandler+0x1f0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d029      	beq.n	8002312 <HAL_DMA_IRQHandler+0xae>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a65      	ldr	r2, [pc, #404]	; (8002458 <HAL_DMA_IRQHandler+0x1f4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <HAL_DMA_IRQHandler+0xaa>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a63      	ldr	r2, [pc, #396]	; (800245c <HAL_DMA_IRQHandler+0x1f8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01a      	beq.n	8002308 <HAL_DMA_IRQHandler+0xa4>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a62      	ldr	r2, [pc, #392]	; (8002460 <HAL_DMA_IRQHandler+0x1fc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d012      	beq.n	8002302 <HAL_DMA_IRQHandler+0x9e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a60      	ldr	r2, [pc, #384]	; (8002464 <HAL_DMA_IRQHandler+0x200>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00a      	beq.n	80022fc <HAL_DMA_IRQHandler+0x98>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5f      	ldr	r2, [pc, #380]	; (8002468 <HAL_DMA_IRQHandler+0x204>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d102      	bne.n	80022f6 <HAL_DMA_IRQHandler+0x92>
 80022f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022f4:	e00e      	b.n	8002314 <HAL_DMA_IRQHandler+0xb0>
 80022f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022fa:	e00b      	b.n	8002314 <HAL_DMA_IRQHandler+0xb0>
 80022fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002300:	e008      	b.n	8002314 <HAL_DMA_IRQHandler+0xb0>
 8002302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002306:	e005      	b.n	8002314 <HAL_DMA_IRQHandler+0xb0>
 8002308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230c:	e002      	b.n	8002314 <HAL_DMA_IRQHandler+0xb0>
 800230e:	2340      	movs	r3, #64	; 0x40
 8002310:	e000      	b.n	8002314 <HAL_DMA_IRQHandler+0xb0>
 8002312:	2304      	movs	r3, #4
 8002314:	4a55      	ldr	r2, [pc, #340]	; (800246c <HAL_DMA_IRQHandler+0x208>)
 8002316:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8094 	beq.w	800244a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800232a:	e08e      	b.n	800244a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2202      	movs	r2, #2
 8002332:	409a      	lsls	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d056      	beq.n	80023ea <HAL_DMA_IRQHandler+0x186>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d051      	beq.n	80023ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 020a 	bic.w	r2, r2, #10
 8002362:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a38      	ldr	r2, [pc, #224]	; (8002454 <HAL_DMA_IRQHandler+0x1f0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d029      	beq.n	80023ca <HAL_DMA_IRQHandler+0x166>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <HAL_DMA_IRQHandler+0x1f4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x162>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a35      	ldr	r2, [pc, #212]	; (800245c <HAL_DMA_IRQHandler+0x1f8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x15c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a34      	ldr	r2, [pc, #208]	; (8002460 <HAL_DMA_IRQHandler+0x1fc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d012      	beq.n	80023ba <HAL_DMA_IRQHandler+0x156>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_DMA_IRQHandler+0x200>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x150>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a31      	ldr	r2, [pc, #196]	; (8002468 <HAL_DMA_IRQHandler+0x204>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d102      	bne.n	80023ae <HAL_DMA_IRQHandler+0x14a>
 80023a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023ac:	e00e      	b.n	80023cc <HAL_DMA_IRQHandler+0x168>
 80023ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b2:	e00b      	b.n	80023cc <HAL_DMA_IRQHandler+0x168>
 80023b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b8:	e008      	b.n	80023cc <HAL_DMA_IRQHandler+0x168>
 80023ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023be:	e005      	b.n	80023cc <HAL_DMA_IRQHandler+0x168>
 80023c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c4:	e002      	b.n	80023cc <HAL_DMA_IRQHandler+0x168>
 80023c6:	2320      	movs	r3, #32
 80023c8:	e000      	b.n	80023cc <HAL_DMA_IRQHandler+0x168>
 80023ca:	2302      	movs	r3, #2
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_DMA_IRQHandler+0x208>)
 80023ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d034      	beq.n	800244a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023e8:	e02f      	b.n	800244a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2208      	movs	r2, #8
 80023f0:	409a      	lsls	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d028      	beq.n	800244c <HAL_DMA_IRQHandler+0x1e8>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 020e 	bic.w	r2, r2, #14
 8002412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
    }
  }
  return;
 800244a:	bf00      	nop
 800244c:	bf00      	nop
}
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40020008 	.word	0x40020008
 8002458:	4002001c 	.word	0x4002001c
 800245c:	40020030 	.word	0x40020030
 8002460:	40020044 	.word	0x40020044
 8002464:	40020058 	.word	0x40020058
 8002468:	4002006c 	.word	0x4002006c
 800246c:	40020000 	.word	0x40020000

08002470 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b10      	cmp	r3, #16
 800249c:	d108      	bne.n	80024b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024ae:	e007      	b.n	80024c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	60da      	str	r2, [r3, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b08b      	sub	sp, #44	; 0x2c
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e169      	b.n	80027b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024e0:	2201      	movs	r2, #1
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8158 	bne.w	80027ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a9a      	ldr	r2, [pc, #616]	; (800276c <HAL_GPIO_Init+0x2a0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d05e      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002508:	4a98      	ldr	r2, [pc, #608]	; (800276c <HAL_GPIO_Init+0x2a0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d875      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800250e:	4a98      	ldr	r2, [pc, #608]	; (8002770 <HAL_GPIO_Init+0x2a4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d058      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002514:	4a96      	ldr	r2, [pc, #600]	; (8002770 <HAL_GPIO_Init+0x2a4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d86f      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800251a:	4a96      	ldr	r2, [pc, #600]	; (8002774 <HAL_GPIO_Init+0x2a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d052      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002520:	4a94      	ldr	r2, [pc, #592]	; (8002774 <HAL_GPIO_Init+0x2a8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d869      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002526:	4a94      	ldr	r2, [pc, #592]	; (8002778 <HAL_GPIO_Init+0x2ac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d04c      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 800252c:	4a92      	ldr	r2, [pc, #584]	; (8002778 <HAL_GPIO_Init+0x2ac>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d863      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002532:	4a92      	ldr	r2, [pc, #584]	; (800277c <HAL_GPIO_Init+0x2b0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d046      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002538:	4a90      	ldr	r2, [pc, #576]	; (800277c <HAL_GPIO_Init+0x2b0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d85d      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800253e:	2b12      	cmp	r3, #18
 8002540:	d82a      	bhi.n	8002598 <HAL_GPIO_Init+0xcc>
 8002542:	2b12      	cmp	r3, #18
 8002544:	d859      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_GPIO_Init+0x80>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	080025c7 	.word	0x080025c7
 8002550:	080025a1 	.word	0x080025a1
 8002554:	080025b3 	.word	0x080025b3
 8002558:	080025f5 	.word	0x080025f5
 800255c:	080025fb 	.word	0x080025fb
 8002560:	080025fb 	.word	0x080025fb
 8002564:	080025fb 	.word	0x080025fb
 8002568:	080025fb 	.word	0x080025fb
 800256c:	080025fb 	.word	0x080025fb
 8002570:	080025fb 	.word	0x080025fb
 8002574:	080025fb 	.word	0x080025fb
 8002578:	080025fb 	.word	0x080025fb
 800257c:	080025fb 	.word	0x080025fb
 8002580:	080025fb 	.word	0x080025fb
 8002584:	080025fb 	.word	0x080025fb
 8002588:	080025fb 	.word	0x080025fb
 800258c:	080025fb 	.word	0x080025fb
 8002590:	080025a9 	.word	0x080025a9
 8002594:	080025bd 	.word	0x080025bd
 8002598:	4a79      	ldr	r2, [pc, #484]	; (8002780 <HAL_GPIO_Init+0x2b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800259e:	e02c      	b.n	80025fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e029      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	3304      	adds	r3, #4
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e024      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	3308      	adds	r3, #8
 80025b8:	623b      	str	r3, [r7, #32]
          break;
 80025ba:	e01f      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	330c      	adds	r3, #12
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e01a      	b.n	80025fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ce:	2304      	movs	r3, #4
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e013      	b.n	80025fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025dc:	2308      	movs	r3, #8
 80025de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	611a      	str	r2, [r3, #16]
          break;
 80025e6:	e009      	b.n	80025fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	615a      	str	r2, [r3, #20]
          break;
 80025f2:	e003      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
          break;
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x130>
          break;
 80025fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d801      	bhi.n	8002606 <HAL_GPIO_Init+0x13a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	e001      	b.n	800260a <HAL_GPIO_Init+0x13e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d802      	bhi.n	8002618 <HAL_GPIO_Init+0x14c>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	e002      	b.n	800261e <HAL_GPIO_Init+0x152>
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	3b08      	subs	r3, #8
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	210f      	movs	r1, #15
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	431a      	orrs	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80b1 	beq.w	80027ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a4c      	ldr	r2, [pc, #304]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_GPIO_Init+0x2bc>)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a40      	ldr	r2, [pc, #256]	; (800278c <HAL_GPIO_Init+0x2c0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <HAL_GPIO_Init+0x1ec>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <HAL_GPIO_Init+0x2c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_Init+0x1e8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a3e      	ldr	r2, [pc, #248]	; (8002794 <HAL_GPIO_Init+0x2c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x1e4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3d      	ldr	r2, [pc, #244]	; (8002798 <HAL_GPIO_Init+0x2cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_Init+0x1e0>
 80026a8:	2303      	movs	r3, #3
 80026aa:	e006      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e004      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b8:	2300      	movs	r3, #0
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	f002 0203 	and.w	r2, r2, #3
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	4093      	lsls	r3, r2
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ca:	492f      	ldr	r1, [pc, #188]	; (8002788 <HAL_GPIO_Init+0x2bc>)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	492c      	ldr	r1, [pc, #176]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4928      	ldr	r1, [pc, #160]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4922      	ldr	r1, [pc, #136]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	43db      	mvns	r3, r3
 8002722:	491e      	ldr	r1, [pc, #120]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002724:	4013      	ands	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4918      	ldr	r1, [pc, #96]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	43db      	mvns	r3, r3
 800274a:	4914      	ldr	r1, [pc, #80]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800274c:	4013      	ands	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d021      	beq.n	80027a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	490e      	ldr	r1, [pc, #56]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
 8002768:	e021      	b.n	80027ae <HAL_GPIO_Init+0x2e2>
 800276a:	bf00      	nop
 800276c:	10320000 	.word	0x10320000
 8002770:	10310000 	.word	0x10310000
 8002774:	10220000 	.word	0x10220000
 8002778:	10210000 	.word	0x10210000
 800277c:	10120000 	.word	0x10120000
 8002780:	10110000 	.word	0x10110000
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000
 800278c:	40010800 	.word	0x40010800
 8002790:	40010c00 	.word	0x40010c00
 8002794:	40011000 	.word	0x40011000
 8002798:	40011400 	.word	0x40011400
 800279c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	4909      	ldr	r1, [pc, #36]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	3301      	adds	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f47f ae8e 	bne.w	80024e0 <HAL_GPIO_Init+0x14>
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	372c      	adds	r7, #44	; 0x2c
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40010400 	.word	0x40010400

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e12b      	b.n	8002a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff f928 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002868:	f000 fce4 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 800286c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a81      	ldr	r2, [pc, #516]	; (8002a78 <HAL_I2C_Init+0x274>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d807      	bhi.n	8002888 <HAL_I2C_Init+0x84>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a80      	ldr	r2, [pc, #512]	; (8002a7c <HAL_I2C_Init+0x278>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e006      	b.n	8002896 <HAL_I2C_Init+0x92>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a7d      	ldr	r2, [pc, #500]	; (8002a80 <HAL_I2C_Init+0x27c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0e7      	b.n	8002a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a78      	ldr	r2, [pc, #480]	; (8002a84 <HAL_I2C_Init+0x280>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9b      	lsrs	r3, r3, #18
 80028a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a6a      	ldr	r2, [pc, #424]	; (8002a78 <HAL_I2C_Init+0x274>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d802      	bhi.n	80028d8 <HAL_I2C_Init+0xd4>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3301      	adds	r3, #1
 80028d6:	e009      	b.n	80028ec <HAL_I2C_Init+0xe8>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	4a69      	ldr	r2, [pc, #420]	; (8002a88 <HAL_I2C_Init+0x284>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	3301      	adds	r3, #1
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	495c      	ldr	r1, [pc, #368]	; (8002a78 <HAL_I2C_Init+0x274>)
 8002908:	428b      	cmp	r3, r1
 800290a:	d819      	bhi.n	8002940 <HAL_I2C_Init+0x13c>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e59      	subs	r1, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fbb1 f3f3 	udiv	r3, r1, r3
 800291a:	1c59      	adds	r1, r3, #1
 800291c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002920:	400b      	ands	r3, r1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_I2C_Init+0x138>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1e59      	subs	r1, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fbb1 f3f3 	udiv	r3, r1, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293a:	e051      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 800293c:	2304      	movs	r3, #4
 800293e:	e04f      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d111      	bne.n	800296c <HAL_I2C_Init+0x168>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e012      	b.n	8002992 <HAL_I2C_Init+0x18e>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x196>
 8002996:	2301      	movs	r3, #1
 8002998:	e022      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10e      	bne.n	80029c0 <HAL_I2C_Init+0x1bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e58      	subs	r0, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	440b      	add	r3, r1
 80029b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	0099      	lsls	r1, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	6809      	ldr	r1, [r1, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6911      	ldr	r1, [r2, #16]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68d2      	ldr	r2, [r2, #12]
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	000186a0 	.word	0x000186a0
 8002a7c:	001e847f 	.word	0x001e847f
 8002a80:	003d08ff 	.word	0x003d08ff
 8002a84:	431bde83 	.word	0x431bde83
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e272      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8087 	beq.w	8002bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab8:	4b8f      	ldr	r3, [pc, #572]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d112      	bne.n	8002aea <HAL_RCC_OscConfig+0x5e>
 8002ac4:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d10b      	bne.n	8002aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad2:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d06c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x12c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d168      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e24c      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x76>
 8002af4:	4b80      	ldr	r3, [pc, #512]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a7f      	ldr	r2, [pc, #508]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e02e      	b.n	8002b60 <HAL_RCC_OscConfig+0xd4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x98>
 8002b0a:	4b7b      	ldr	r3, [pc, #492]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7a      	ldr	r2, [pc, #488]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a77      	ldr	r2, [pc, #476]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xd4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0xbc>
 8002b2e:	4b72      	ldr	r3, [pc, #456]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a71      	ldr	r2, [pc, #452]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6e      	ldr	r2, [pc, #440]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xd4>
 8002b48:	4b6b      	ldr	r3, [pc, #428]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a6a      	ldr	r2, [pc, #424]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7ff f910 	bl	8001d8c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7ff f90c 	bl	8001d8c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e200      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b5d      	ldr	r3, [pc, #372]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xe4>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7ff f8fc 	bl	8001d8c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7ff f8f8 	bl	8001d8c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1ec      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x10c>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x18c>
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x176>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1c0      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4939      	ldr	r1, [pc, #228]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7ff f8b1 	bl	8001d8c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7ff f8ad 	bl	8001d8c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1a1      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4927      	ldr	r1, [pc, #156]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f890 	bl	8001d8c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7ff f88c 	bl	8001d8c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e180      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d03a      	beq.n	8002d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d019      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca8:	f7ff f870 	bl	8001d8c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7ff f86c 	bl	8001d8c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e160      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 fac4 	bl	800325c <RCC_Delay>
 8002cd4:	e01c      	b.n	8002d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cdc:	f7ff f856 	bl	8001d8c <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce2:	e00f      	b.n	8002d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f852 	bl	8001d8c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d908      	bls.n	8002d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e146      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	42420000 	.word	0x42420000
 8002d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	4b92      	ldr	r3, [pc, #584]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e9      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80a6 	beq.w	8002e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d22:	4b8b      	ldr	r3, [pc, #556]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4a87      	ldr	r2, [pc, #540]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	61d3      	str	r3, [r2, #28]
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b82      	ldr	r3, [pc, #520]	; (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b7f      	ldr	r3, [pc, #508]	; (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a7e      	ldr	r2, [pc, #504]	; (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7ff f813 	bl	8001d8c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7ff f80f 	bl	8001d8c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	; 0x64
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e103      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	4b75      	ldr	r3, [pc, #468]	; (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x312>
 8002d90:	4b6f      	ldr	r3, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4a6e      	ldr	r2, [pc, #440]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6213      	str	r3, [r2, #32]
 8002d9c:	e02d      	b.n	8002dfa <HAL_RCC_OscConfig+0x36e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x334>
 8002da6:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6213      	str	r3, [r2, #32]
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6213      	str	r3, [r2, #32]
 8002dbe:	e01c      	b.n	8002dfa <HAL_RCC_OscConfig+0x36e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d10c      	bne.n	8002de2 <HAL_RCC_OscConfig+0x356>
 8002dc8:	4b61      	ldr	r3, [pc, #388]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	e00b      	b.n	8002dfa <HAL_RCC_OscConfig+0x36e>
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a5a      	ldr	r2, [pc, #360]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6213      	str	r3, [r2, #32]
 8002dee:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d015      	beq.n	8002e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fe ffc3 	bl	8001d8c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe ffbf 	bl	8001d8c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0b1      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	4b4b      	ldr	r3, [pc, #300]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ee      	beq.n	8002e0a <HAL_RCC_OscConfig+0x37e>
 8002e2c:	e014      	b.n	8002e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe ffad 	bl	8001d8c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe ffa9 	bl	8001d8c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e09b      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4c:	4b40      	ldr	r3, [pc, #256]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ee      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d105      	bne.n	8002e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5e:	4b3c      	ldr	r3, [pc, #240]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4a3b      	ldr	r2, [pc, #236]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8087 	beq.w	8002f82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e74:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d061      	beq.n	8002f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d146      	bne.n	8002f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe ff7d 	bl	8001d8c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe ff79 	bl	8001d8c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e06d      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d108      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4921      	ldr	r1, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a19      	ldr	r1, [r3, #32]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	491b      	ldr	r1, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe ff4d 	bl	8001d8c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe ff49 	bl	8001d8c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03d      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x46a>
 8002f14:	e035      	b.n	8002f82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe ff36 	bl	8001d8c <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe ff32 	bl	8001d8c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e026      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x498>
 8002f42:	e01e      	b.n	8002f82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e019      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_OscConfig+0x500>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000

08002f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0d0      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d910      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b67      	ldr	r3, [pc, #412]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4965      	ldr	r1, [pc, #404]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0b8      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fec:	4b59      	ldr	r3, [pc, #356]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003004:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a52      	ldr	r2, [pc, #328]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800300e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	494d      	ldr	r1, [pc, #308]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d040      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d115      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07f      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e073      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06b      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4936      	ldr	r1, [pc, #216]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003080:	f7fe fe84 	bl	8001d8c <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	e00a      	b.n	800309e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003088:	f7fe fe80 	bl	8001d8c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e053      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 020c 	and.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1eb      	bne.n	8003088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d210      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4922      	ldr	r1, [pc, #136]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e032      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4916      	ldr	r1, [pc, #88]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800311e:	f000 f821 	bl	8003164 <HAL_RCC_GetSysClockFreq>
 8003122:	4602      	mov	r2, r0
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	490a      	ldr	r1, [pc, #40]	; (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_RCC_ClockConfig+0x1cc>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_RCC_ClockConfig+0x1d0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fde2 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
 8003158:	080054b8 	.word	0x080054b8
 800315c:	20000000 	.word	0x20000000
 8003160:	20000004 	.word	0x20000004

08003164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003164:	b490      	push	{r4, r7}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800316a:	4b29      	ldr	r3, [pc, #164]	; (8003210 <HAL_RCC_GetSysClockFreq+0xac>)
 800316c:	1d3c      	adds	r4, r7, #4
 800316e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003174:	f240 2301 	movw	r3, #513	; 0x201
 8003178:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800318e:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b04      	cmp	r3, #4
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x40>
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x46>
 80031a2:	e02b      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a4:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031a6:	623b      	str	r3, [r7, #32]
      break;
 80031a8:	e02b      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	0c9b      	lsrs	r3, r3, #18
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3328      	adds	r3, #40	; 0x28
 80031b4:	443b      	add	r3, r7
 80031b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	0c5b      	lsrs	r3, r3, #17
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	3328      	adds	r3, #40	; 0x28
 80031d2:	443b      	add	r3, r7
 80031d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031de:	fb03 f202 	mul.w	r2, r3, r2
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	e004      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	623b      	str	r3, [r7, #32]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031fe:	623b      	str	r3, [r7, #32]
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	6a3b      	ldr	r3, [r7, #32]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc90      	pop	{r4, r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	080054a8 	.word	0x080054a8
 8003214:	40021000 	.word	0x40021000
 8003218:	007a1200 	.word	0x007a1200
 800321c:	003d0900 	.word	0x003d0900

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b02      	ldr	r3, [pc, #8]	; (8003230 <HAL_RCC_GetHCLKFreq+0x10>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	20000000 	.word	0x20000000

08003234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003238:	f7ff fff2 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4903      	ldr	r1, [pc, #12]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	080054c8 	.word	0x080054c8

0800325c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <RCC_Delay+0x34>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <RCC_Delay+0x38>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0a5b      	lsrs	r3, r3, #9
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003278:	bf00      	nop
  }
  while (Delay --);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	60fa      	str	r2, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f9      	bne.n	8003278 <RCC_Delay+0x1c>
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	20000000 	.word	0x20000000
 8003294:	10624dd3 	.word	0x10624dd3

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e041      	b.n	800332e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fc1c 	bl	8001afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fd44 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e041      	b.n	80033cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f839 	bl	80033d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f000 fcf5 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_TIM_PWM_Start_DMA+0x28>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e022      	b.n	8003456 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d109      	bne.n	800342a <HAL_TIM_PWM_Start_DMA+0x42>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e015      	b.n	8003456 <HAL_TIM_PWM_Start_DMA+0x6e>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d109      	bne.n	8003444 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e008      	b.n	8003456 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e14e      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_TIM_PWM_Start_DMA+0x90>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e022      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0xd6>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d109      	bne.n	8003492 <HAL_TIM_PWM_Start_DMA+0xaa>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e015      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0xd6>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start_DMA+0xc4>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e008      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0xd6>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d024      	beq.n	800350c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <HAL_TIM_PWM_Start_DMA+0xea>
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e114      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_TIM_PWM_Start_DMA+0xfa>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e0:	e016      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x128>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d104      	bne.n	80034f2 <HAL_TIM_PWM_Start_DMA+0x10a>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f0:	e00e      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x128>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_PWM_Start_DMA+0x11a>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003500:	e006      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x128>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800350a:	e001      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0f5      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	f200 80ae 	bhi.w	8003674 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <HAL_TIM_PWM_Start_DMA+0x138>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003555 	.word	0x08003555
 8003524:	08003675 	.word	0x08003675
 8003528:	08003675 	.word	0x08003675
 800352c:	08003675 	.word	0x08003675
 8003530:	0800359d 	.word	0x0800359d
 8003534:	08003675 	.word	0x08003675
 8003538:	08003675 	.word	0x08003675
 800353c:	08003675 	.word	0x08003675
 8003540:	080035e5 	.word	0x080035e5
 8003544:	08003675 	.word	0x08003675
 8003548:	08003675 	.word	0x08003675
 800354c:	08003675 	.word	0x08003675
 8003550:	0800362d 	.word	0x0800362d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	4a6a      	ldr	r2, [pc, #424]	; (8003704 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	4a69      	ldr	r2, [pc, #420]	; (8003708 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	4a68      	ldr	r2, [pc, #416]	; (800370c <HAL_TIM_PWM_Start_DMA+0x324>)
 800356a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3334      	adds	r3, #52	; 0x34
 8003578:	461a      	mov	r2, r3
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	f7fe fd9c 	bl	80020b8 <HAL_DMA_Start_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0b8      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003598:	60da      	str	r2, [r3, #12]
      break;
 800359a:	e06c      	b.n	8003676 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	4a57      	ldr	r2, [pc, #348]	; (8003708 <HAL_TIM_PWM_Start_DMA+0x320>)
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	4a56      	ldr	r2, [pc, #344]	; (800370c <HAL_TIM_PWM_Start_DMA+0x324>)
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3338      	adds	r3, #56	; 0x38
 80035c0:	461a      	mov	r2, r3
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	f7fe fd78 	bl	80020b8 <HAL_DMA_Start_IT>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e094      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e0:	60da      	str	r2, [r3, #12]
      break;
 80035e2:	e048      	b.n	8003676 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	4a46      	ldr	r2, [pc, #280]	; (8003704 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	4a45      	ldr	r2, [pc, #276]	; (8003708 <HAL_TIM_PWM_Start_DMA+0x320>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a44      	ldr	r2, [pc, #272]	; (800370c <HAL_TIM_PWM_Start_DMA+0x324>)
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	333c      	adds	r3, #60	; 0x3c
 8003608:	461a      	mov	r2, r3
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	f7fe fd54 	bl	80020b8 <HAL_DMA_Start_IT>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e070      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003628:	60da      	str	r2, [r3, #12]
      break;
 800362a:	e024      	b.n	8003676 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4a34      	ldr	r2, [pc, #208]	; (8003704 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	4a33      	ldr	r2, [pc, #204]	; (8003708 <HAL_TIM_PWM_Start_DMA+0x320>)
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4a32      	ldr	r2, [pc, #200]	; (800370c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003642:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3340      	adds	r3, #64	; 0x40
 8003650:	461a      	mov	r2, r3
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	f7fe fd30 	bl	80020b8 <HAL_DMA_Start_IT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e04c      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003670:	60da      	str	r2, [r3, #12]
      break;
 8003672:	e000      	b.n	8003676 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003674:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fdf0 	bl	8004264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a21      	ldr	r2, [pc, #132]	; (8003710 <HAL_TIM_PWM_Start_DMA+0x328>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d107      	bne.n	800369e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_TIM_PWM_Start_DMA+0x328>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d009      	beq.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIM_PWM_Start_DMA+0x330>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d111      	bne.n	80036ea <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d010      	beq.n	80036fa <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e8:	e007      	b.n	80036fa <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	08003c53 	.word	0x08003c53
 8003708:	08003cfb 	.word	0x08003cfb
 800370c:	08003bc1 	.word	0x08003bc1
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800

0800371c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d855      	bhi.n	80037d8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003769 	.word	0x08003769
 8003738:	080037d9 	.word	0x080037d9
 800373c:	080037d9 	.word	0x080037d9
 8003740:	080037d9 	.word	0x080037d9
 8003744:	08003785 	.word	0x08003785
 8003748:	080037d9 	.word	0x080037d9
 800374c:	080037d9 	.word	0x080037d9
 8003750:	080037d9 	.word	0x080037d9
 8003754:	080037a1 	.word	0x080037a1
 8003758:	080037d9 	.word	0x080037d9
 800375c:	080037d9 	.word	0x080037d9
 8003760:	080037d9 	.word	0x080037d9
 8003764:	080037bd 	.word	0x080037bd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003776:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fcfb 	bl	8002178 <HAL_DMA_Abort_IT>
      break;
 8003782:	e02a      	b.n	80037da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003792:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fced 	bl	8002178 <HAL_DMA_Abort_IT>
      break;
 800379e:	e01c      	b.n	80037da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fcdf 	bl	8002178 <HAL_DMA_Abort_IT>
      break;
 80037ba:	e00e      	b.n	80037da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fcd1 	bl	8002178 <HAL_DMA_Abort_IT>
      break;
 80037d6:	e000      	b.n	80037da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80037d8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fd3e 	bl	8004264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a29      	ldr	r2, [pc, #164]	; (8003894 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d117      	bne.n	8003822 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	f240 4344 	movw	r3, #1092	; 0x444
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	f241 1311 	movw	r3, #4369	; 0x1111
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	f240 4344 	movw	r3, #1092	; 0x444
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Stop_DMA+0x146>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003860:	e013      	b.n	800388a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Stop_DMA+0x156>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	e00b      	b.n	800388a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Stop_DMA+0x166>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	e003      	b.n	800388a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40012c00 	.word	0x40012c00

08003898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0ac      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x174>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	f200 809f 	bhi.w	8003a00 <HAL_TIM_PWM_ConfigChannel+0x168>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	08003a01 	.word	0x08003a01
 80038d0:	08003a01 	.word	0x08003a01
 80038d4:	08003a01 	.word	0x08003a01
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	08003a01 	.word	0x08003a01
 80038e0:	08003a01 	.word	0x08003a01
 80038e4:	08003a01 	.word	0x08003a01
 80038e8:	0800397f 	.word	0x0800397f
 80038ec:	08003a01 	.word	0x08003a01
 80038f0:	08003a01 	.word	0x08003a01
 80038f4:	08003a01 	.word	0x08003a01
 80038f8:	080039bf 	.word	0x080039bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa90 	bl	8003e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	619a      	str	r2, [r3, #24]
      break;
 800393a:	e062      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fad6 	bl	8003ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6999      	ldr	r1, [r3, #24]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	021a      	lsls	r2, r3, #8
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	619a      	str	r2, [r3, #24]
      break;
 800397c:	e041      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fb1f 	bl	8003fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0208 	orr.w	r2, r2, #8
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0204 	bic.w	r2, r2, #4
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	61da      	str	r2, [r3, #28]
      break;
 80039bc:	e021      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fb69 	bl	800409c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69d9      	ldr	r1, [r3, #28]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	021a      	lsls	r2, r3, #8
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	61da      	str	r2, [r3, #28]
      break;
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIM_ConfigClockSource+0x18>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0b3      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x180>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a64:	d03e      	beq.n	8003ae4 <HAL_TIM_ConfigClockSource+0xd0>
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	f200 8087 	bhi.w	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a72:	f000 8085 	beq.w	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d87f      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a7c:	2b70      	cmp	r3, #112	; 0x70
 8003a7e:	d01a      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0xa2>
 8003a80:	2b70      	cmp	r3, #112	; 0x70
 8003a82:	d87b      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a84:	2b60      	cmp	r3, #96	; 0x60
 8003a86:	d050      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x116>
 8003a88:	2b60      	cmp	r3, #96	; 0x60
 8003a8a:	d877      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a8c:	2b50      	cmp	r3, #80	; 0x50
 8003a8e:	d03c      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xf6>
 8003a90:	2b50      	cmp	r3, #80	; 0x50
 8003a92:	d873      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d058      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x136>
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d86f      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d064      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
 8003aa0:	2b30      	cmp	r3, #48	; 0x30
 8003aa2:	d86b      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d060      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d867      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d05c      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d05a      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ab4:	e062      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f000 fbae 	bl	8004226 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ad8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	609a      	str	r2, [r3, #8]
      break;
 8003ae2:	e04e      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6899      	ldr	r1, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f000 fb97 	bl	8004226 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b06:	609a      	str	r2, [r3, #8]
      break;
 8003b08:	e03b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f000 fb0e 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2150      	movs	r1, #80	; 0x50
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fb65 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003b28:	e02b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f000 fb2c 	bl	8004194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2160      	movs	r1, #96	; 0x60
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fb55 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003b48:	e01b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f000 faee 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2140      	movs	r1, #64	; 0x40
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fb45 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003b68:	e00b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f000 fb3c 	bl	80041f2 <TIM_ITRx_SetConfig>
        break;
 8003b7a:	e002      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b7c:	bf00      	nop
 8003b7e:	e000      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be6:	e02a      	b.n	8003c3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d107      	bne.n	8003c02 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c00:	e01d      	b.n	8003c3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d107      	bne.n	8003c1c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1a:	e010      	b.n	8003c3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d107      	bne.n	8003c36 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c34:	e003      	b.n	8003c3e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff ffb5 	bl	8003bae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	771a      	strb	r2, [r3, #28]
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d10b      	bne.n	8003c82 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d136      	bne.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c80:	e031      	b.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d10b      	bne.n	8003ca4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d125      	bne.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca2:	e020      	b.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d10b      	bne.n	8003cc6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d114      	bne.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc4:	e00f      	b.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d10a      	bne.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fd fb8e 	bl	8001408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	771a      	strb	r2, [r3, #28]
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d103      	bne.n	8003d1a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	771a      	strb	r2, [r3, #28]
 8003d18:	e019      	b.n	8003d4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d103      	bne.n	8003d2c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2202      	movs	r2, #2
 8003d28:	771a      	strb	r2, [r3, #28]
 8003d2a:	e010      	b.n	8003d4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d103      	bne.n	8003d3e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	771a      	strb	r2, [r3, #28]
 8003d3c:	e007      	b.n	8003d4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d102      	bne.n	8003d4e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ff24 	bl	8003b9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	771a      	strb	r2, [r3, #28]
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <TIM_Base_SetConfig+0xb8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d007      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <TIM_Base_SetConfig+0xbc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <TIM_Base_SetConfig+0xc0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <TIM_Base_SetConfig+0xb8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <TIM_Base_SetConfig+0xbc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <TIM_Base_SetConfig+0xc0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <TIM_Base_SetConfig+0xb8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d103      	bne.n	8003e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	615a      	str	r2, [r3, #20]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800

08003e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0201 	bic.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 0302 	bic.w	r3, r3, #2
 8003e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <TIM_OC1_SetConfig+0xc8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10c      	bne.n	8003e9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0308 	bic.w	r3, r3, #8
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <TIM_OC1_SetConfig+0xc8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00

08003ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0210 	bic.w	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0320 	bic.w	r3, r3, #32
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <TIM_OC2_SetConfig+0xd0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10d      	bne.n	8003f70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <TIM_OC2_SetConfig+0xd0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d113      	bne.n	8003fa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00

08003fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <TIM_OC3_SetConfig+0xd0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10d      	bne.n	8004042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <TIM_OC3_SetConfig+0xd0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d113      	bne.n	8004072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40012c00 	.word	0x40012c00

0800409c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	031b      	lsls	r3, r3, #12
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <TIM_OC4_SetConfig+0x98>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d109      	bne.n	8004110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	40012c00 	.word	0x40012c00

08004138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 030a 	bic.w	r3, r3, #10
 8004174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f023 0210 	bic.w	r2, r3, #16
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	031b      	lsls	r3, r3, #12
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	f043 0307 	orr.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	021a      	lsls	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	431a      	orrs	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	609a      	str	r2, [r3, #8]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2201      	movs	r2, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	43db      	mvns	r3, r3
 8004286:	401a      	ands	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	431a      	orrs	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e046      	b.n	8004352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a16      	ldr	r2, [pc, #88]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d009      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a10      	ldr	r2, [pc, #64]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10c      	bne.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800432c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4313      	orrs	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	2600      	movs	r6, #0
 800436c:	4d0c      	ldr	r5, [pc, #48]	; (80043a0 <__libc_init_array+0x38>)
 800436e:	4c0d      	ldr	r4, [pc, #52]	; (80043a4 <__libc_init_array+0x3c>)
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	42a6      	cmp	r6, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	f001 f888 	bl	800548c <_init>
 800437c:	2600      	movs	r6, #0
 800437e:	4d0a      	ldr	r5, [pc, #40]	; (80043a8 <__libc_init_array+0x40>)
 8004380:	4c0a      	ldr	r4, [pc, #40]	; (80043ac <__libc_init_array+0x44>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	42a6      	cmp	r6, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004390:	4798      	blx	r3
 8004392:	3601      	adds	r6, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	f855 3b04 	ldr.w	r3, [r5], #4
 800439a:	4798      	blx	r3
 800439c:	3601      	adds	r6, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	080056a8 	.word	0x080056a8
 80043a4:	080056a8 	.word	0x080056a8
 80043a8:	080056a8 	.word	0x080056a8
 80043ac:	080056ac 	.word	0x080056ac

080043b0 <memset>:
 80043b0:	4603      	mov	r3, r0
 80043b2:	4402      	add	r2, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <tan>:
 80043c0:	b530      	push	{r4, r5, lr}
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <tan+0x4c>)
 80043c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043c8:	4293      	cmp	r3, r2
 80043ca:	b087      	sub	sp, #28
 80043cc:	dc06      	bgt.n	80043dc <tan+0x1c>
 80043ce:	2301      	movs	r3, #1
 80043d0:	2200      	movs	r2, #0
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	f000 fd5b 	bl	8004e90 <__kernel_tan>
 80043da:	e006      	b.n	80043ea <tan+0x2a>
 80043dc:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <tan+0x50>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	dd05      	ble.n	80043ee <tan+0x2e>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	f7fb feb7 	bl	8000158 <__aeabi_dsub>
 80043ea:	b007      	add	sp, #28
 80043ec:	bd30      	pop	{r4, r5, pc}
 80043ee:	aa02      	add	r2, sp, #8
 80043f0:	f000 f812 	bl	8004418 <__ieee754_rem_pio2>
 80043f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043f8:	0040      	lsls	r0, r0, #1
 80043fa:	f000 0002 	and.w	r0, r0, #2
 80043fe:	f1c0 0001 	rsb	r0, r0, #1
 8004402:	9000      	str	r0, [sp, #0]
 8004404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004408:	e7e5      	b.n	80043d6 <tan+0x16>
 800440a:	bf00      	nop
 800440c:	3fe921fb 	.word	0x3fe921fb
 8004410:	7fefffff 	.word	0x7fefffff
 8004414:	00000000 	.word	0x00000000

08004418 <__ieee754_rem_pio2>:
 8004418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441c:	4614      	mov	r4, r2
 800441e:	4ac4      	ldr	r2, [pc, #784]	; (8004730 <__ieee754_rem_pio2+0x318>)
 8004420:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004424:	b08d      	sub	sp, #52	; 0x34
 8004426:	4592      	cmp	sl, r2
 8004428:	9104      	str	r1, [sp, #16]
 800442a:	dc07      	bgt.n	800443c <__ieee754_rem_pio2+0x24>
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	e9c4 0100 	strd	r0, r1, [r4]
 8004434:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004438:	2500      	movs	r5, #0
 800443a:	e024      	b.n	8004486 <__ieee754_rem_pio2+0x6e>
 800443c:	4abd      	ldr	r2, [pc, #756]	; (8004734 <__ieee754_rem_pio2+0x31c>)
 800443e:	4592      	cmp	sl, r2
 8004440:	dc72      	bgt.n	8004528 <__ieee754_rem_pio2+0x110>
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	4dbc      	ldr	r5, [pc, #752]	; (8004738 <__ieee754_rem_pio2+0x320>)
 8004446:	2b00      	cmp	r3, #0
 8004448:	a3ab      	add	r3, pc, #684	; (adr r3, 80046f8 <__ieee754_rem_pio2+0x2e0>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	dd36      	ble.n	80044be <__ieee754_rem_pio2+0xa6>
 8004450:	f7fb fe82 	bl	8000158 <__aeabi_dsub>
 8004454:	45aa      	cmp	sl, r5
 8004456:	4606      	mov	r6, r0
 8004458:	460f      	mov	r7, r1
 800445a:	d018      	beq.n	800448e <__ieee754_rem_pio2+0x76>
 800445c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004700 <__ieee754_rem_pio2+0x2e8>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb fe79 	bl	8000158 <__aeabi_dsub>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4630      	mov	r0, r6
 800446c:	e9c4 2300 	strd	r2, r3, [r4]
 8004470:	4639      	mov	r1, r7
 8004472:	f7fb fe71 	bl	8000158 <__aeabi_dsub>
 8004476:	a3a2      	add	r3, pc, #648	; (adr r3, 8004700 <__ieee754_rem_pio2+0x2e8>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fb fe6c 	bl	8000158 <__aeabi_dsub>
 8004480:	2501      	movs	r5, #1
 8004482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004486:	4628      	mov	r0, r5
 8004488:	b00d      	add	sp, #52	; 0x34
 800448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448e:	a39e      	add	r3, pc, #632	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2f0>)
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f7fb fe60 	bl	8000158 <__aeabi_dsub>
 8004498:	a39d      	add	r3, pc, #628	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f8>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	4606      	mov	r6, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	f7fb fe59 	bl	8000158 <__aeabi_dsub>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4630      	mov	r0, r6
 80044ac:	e9c4 2300 	strd	r2, r3, [r4]
 80044b0:	4639      	mov	r1, r7
 80044b2:	f7fb fe51 	bl	8000158 <__aeabi_dsub>
 80044b6:	a396      	add	r3, pc, #600	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f8>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	e7de      	b.n	800447c <__ieee754_rem_pio2+0x64>
 80044be:	f7fb fe4d 	bl	800015c <__adddf3>
 80044c2:	45aa      	cmp	sl, r5
 80044c4:	4606      	mov	r6, r0
 80044c6:	460f      	mov	r7, r1
 80044c8:	d016      	beq.n	80044f8 <__ieee754_rem_pio2+0xe0>
 80044ca:	a38d      	add	r3, pc, #564	; (adr r3, 8004700 <__ieee754_rem_pio2+0x2e8>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f7fb fe44 	bl	800015c <__adddf3>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4630      	mov	r0, r6
 80044da:	e9c4 2300 	strd	r2, r3, [r4]
 80044de:	4639      	mov	r1, r7
 80044e0:	f7fb fe3a 	bl	8000158 <__aeabi_dsub>
 80044e4:	a386      	add	r3, pc, #536	; (adr r3, 8004700 <__ieee754_rem_pio2+0x2e8>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fb fe37 	bl	800015c <__adddf3>
 80044ee:	f04f 35ff 	mov.w	r5, #4294967295
 80044f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80044f6:	e7c6      	b.n	8004486 <__ieee754_rem_pio2+0x6e>
 80044f8:	a383      	add	r3, pc, #524	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2f0>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f7fb fe2d 	bl	800015c <__adddf3>
 8004502:	a383      	add	r3, pc, #524	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f8>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	4606      	mov	r6, r0
 800450a:	460f      	mov	r7, r1
 800450c:	f7fb fe26 	bl	800015c <__adddf3>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4630      	mov	r0, r6
 8004516:	e9c4 2300 	strd	r2, r3, [r4]
 800451a:	4639      	mov	r1, r7
 800451c:	f7fb fe1c 	bl	8000158 <__aeabi_dsub>
 8004520:	a37b      	add	r3, pc, #492	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f8>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	e7e0      	b.n	80044ea <__ieee754_rem_pio2+0xd2>
 8004528:	4a84      	ldr	r2, [pc, #528]	; (800473c <__ieee754_rem_pio2+0x324>)
 800452a:	4592      	cmp	sl, r2
 800452c:	f300 80d5 	bgt.w	80046da <__ieee754_rem_pio2+0x2c2>
 8004530:	f000 feaa 	bl	8005288 <fabs>
 8004534:	a378      	add	r3, pc, #480	; (adr r3, 8004718 <__ieee754_rem_pio2+0x300>)
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	4606      	mov	r6, r0
 800453c:	460f      	mov	r7, r1
 800453e:	f7fb ffc3 	bl	80004c8 <__aeabi_dmul>
 8004542:	2200      	movs	r2, #0
 8004544:	4b7e      	ldr	r3, [pc, #504]	; (8004740 <__ieee754_rem_pio2+0x328>)
 8004546:	f7fb fe09 	bl	800015c <__adddf3>
 800454a:	f7fc fa57 	bl	80009fc <__aeabi_d2iz>
 800454e:	4605      	mov	r5, r0
 8004550:	f7fb ff50 	bl	80003f4 <__aeabi_i2d>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800455c:	a366      	add	r3, pc, #408	; (adr r3, 80046f8 <__ieee754_rem_pio2+0x2e0>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f7fb ffb1 	bl	80004c8 <__aeabi_dmul>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4630      	mov	r0, r6
 800456c:	4639      	mov	r1, r7
 800456e:	f7fb fdf3 	bl	8000158 <__aeabi_dsub>
 8004572:	a363      	add	r3, pc, #396	; (adr r3, 8004700 <__ieee754_rem_pio2+0x2e8>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	4680      	mov	r8, r0
 800457a:	4689      	mov	r9, r1
 800457c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004580:	f7fb ffa2 	bl	80004c8 <__aeabi_dmul>
 8004584:	2d1f      	cmp	r5, #31
 8004586:	4606      	mov	r6, r0
 8004588:	460f      	mov	r7, r1
 800458a:	dc0e      	bgt.n	80045aa <__ieee754_rem_pio2+0x192>
 800458c:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <__ieee754_rem_pio2+0x32c>)
 800458e:	1e6a      	subs	r2, r5, #1
 8004590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004594:	4553      	cmp	r3, sl
 8004596:	d008      	beq.n	80045aa <__ieee754_rem_pio2+0x192>
 8004598:	4632      	mov	r2, r6
 800459a:	463b      	mov	r3, r7
 800459c:	4640      	mov	r0, r8
 800459e:	4649      	mov	r1, r9
 80045a0:	f7fb fdda 	bl	8000158 <__aeabi_dsub>
 80045a4:	e9c4 0100 	strd	r0, r1, [r4]
 80045a8:	e013      	b.n	80045d2 <__ieee754_rem_pio2+0x1ba>
 80045aa:	463b      	mov	r3, r7
 80045ac:	4632      	mov	r2, r6
 80045ae:	4640      	mov	r0, r8
 80045b0:	4649      	mov	r1, r9
 80045b2:	f7fb fdd1 	bl	8000158 <__aeabi_dsub>
 80045b6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80045ba:	9305      	str	r3, [sp, #20]
 80045bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045c0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80045c4:	f1ba 0f10 	cmp.w	sl, #16
 80045c8:	dc1f      	bgt.n	800460a <__ieee754_rem_pio2+0x1f2>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	e9c4 2300 	strd	r2, r3, [r4]
 80045d2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80045d6:	4640      	mov	r0, r8
 80045d8:	4653      	mov	r3, sl
 80045da:	4649      	mov	r1, r9
 80045dc:	f7fb fdbc 	bl	8000158 <__aeabi_dsub>
 80045e0:	4632      	mov	r2, r6
 80045e2:	463b      	mov	r3, r7
 80045e4:	f7fb fdb8 	bl	8000158 <__aeabi_dsub>
 80045e8:	460b      	mov	r3, r1
 80045ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045ee:	9904      	ldr	r1, [sp, #16]
 80045f0:	4602      	mov	r2, r0
 80045f2:	2900      	cmp	r1, #0
 80045f4:	f6bf af47 	bge.w	8004486 <__ieee754_rem_pio2+0x6e>
 80045f8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80045fc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004600:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004604:	60e3      	str	r3, [r4, #12]
 8004606:	426d      	negs	r5, r5
 8004608:	e73d      	b.n	8004486 <__ieee754_rem_pio2+0x6e>
 800460a:	a33f      	add	r3, pc, #252	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2f0>)
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004614:	f7fb ff58 	bl	80004c8 <__aeabi_dmul>
 8004618:	4606      	mov	r6, r0
 800461a:	460f      	mov	r7, r1
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4640      	mov	r0, r8
 8004622:	4649      	mov	r1, r9
 8004624:	f7fb fd98 	bl	8000158 <__aeabi_dsub>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4682      	mov	sl, r0
 800462e:	468b      	mov	fp, r1
 8004630:	4640      	mov	r0, r8
 8004632:	4649      	mov	r1, r9
 8004634:	f7fb fd90 	bl	8000158 <__aeabi_dsub>
 8004638:	4632      	mov	r2, r6
 800463a:	463b      	mov	r3, r7
 800463c:	f7fb fd8c 	bl	8000158 <__aeabi_dsub>
 8004640:	a333      	add	r3, pc, #204	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f8>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	4606      	mov	r6, r0
 8004648:	460f      	mov	r7, r1
 800464a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800464e:	f7fb ff3b 	bl	80004c8 <__aeabi_dmul>
 8004652:	4632      	mov	r2, r6
 8004654:	463b      	mov	r3, r7
 8004656:	f7fb fd7f 	bl	8000158 <__aeabi_dsub>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4606      	mov	r6, r0
 8004660:	460f      	mov	r7, r1
 8004662:	4650      	mov	r0, sl
 8004664:	4659      	mov	r1, fp
 8004666:	f7fb fd77 	bl	8000158 <__aeabi_dsub>
 800466a:	9a05      	ldr	r2, [sp, #20]
 800466c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b31      	cmp	r3, #49	; 0x31
 8004674:	dc06      	bgt.n	8004684 <__ieee754_rem_pio2+0x26c>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	46d0      	mov	r8, sl
 800467c:	46d9      	mov	r9, fp
 800467e:	e9c4 2300 	strd	r2, r3, [r4]
 8004682:	e7a6      	b.n	80045d2 <__ieee754_rem_pio2+0x1ba>
 8004684:	a326      	add	r3, pc, #152	; (adr r3, 8004720 <__ieee754_rem_pio2+0x308>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800468e:	f7fb ff1b 	bl	80004c8 <__aeabi_dmul>
 8004692:	4606      	mov	r6, r0
 8004694:	460f      	mov	r7, r1
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4650      	mov	r0, sl
 800469c:	4659      	mov	r1, fp
 800469e:	f7fb fd5b 	bl	8000158 <__aeabi_dsub>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4680      	mov	r8, r0
 80046a8:	4689      	mov	r9, r1
 80046aa:	4650      	mov	r0, sl
 80046ac:	4659      	mov	r1, fp
 80046ae:	f7fb fd53 	bl	8000158 <__aeabi_dsub>
 80046b2:	4632      	mov	r2, r6
 80046b4:	463b      	mov	r3, r7
 80046b6:	f7fb fd4f 	bl	8000158 <__aeabi_dsub>
 80046ba:	a31b      	add	r3, pc, #108	; (adr r3, 8004728 <__ieee754_rem_pio2+0x310>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	4606      	mov	r6, r0
 80046c2:	460f      	mov	r7, r1
 80046c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046c8:	f7fb fefe 	bl	80004c8 <__aeabi_dmul>
 80046cc:	4632      	mov	r2, r6
 80046ce:	463b      	mov	r3, r7
 80046d0:	f7fb fd42 	bl	8000158 <__aeabi_dsub>
 80046d4:	4606      	mov	r6, r0
 80046d6:	460f      	mov	r7, r1
 80046d8:	e75e      	b.n	8004598 <__ieee754_rem_pio2+0x180>
 80046da:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <__ieee754_rem_pio2+0x330>)
 80046dc:	4592      	cmp	sl, r2
 80046de:	dd35      	ble.n	800474c <__ieee754_rem_pio2+0x334>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	f7fb fd38 	bl	8000158 <__aeabi_dsub>
 80046e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046ec:	e9c4 0100 	strd	r0, r1, [r4]
 80046f0:	e6a2      	b.n	8004438 <__ieee754_rem_pio2+0x20>
 80046f2:	bf00      	nop
 80046f4:	f3af 8000 	nop.w
 80046f8:	54400000 	.word	0x54400000
 80046fc:	3ff921fb 	.word	0x3ff921fb
 8004700:	1a626331 	.word	0x1a626331
 8004704:	3dd0b461 	.word	0x3dd0b461
 8004708:	1a600000 	.word	0x1a600000
 800470c:	3dd0b461 	.word	0x3dd0b461
 8004710:	2e037073 	.word	0x2e037073
 8004714:	3ba3198a 	.word	0x3ba3198a
 8004718:	6dc9c883 	.word	0x6dc9c883
 800471c:	3fe45f30 	.word	0x3fe45f30
 8004720:	2e000000 	.word	0x2e000000
 8004724:	3ba3198a 	.word	0x3ba3198a
 8004728:	252049c1 	.word	0x252049c1
 800472c:	397b839a 	.word	0x397b839a
 8004730:	3fe921fb 	.word	0x3fe921fb
 8004734:	4002d97b 	.word	0x4002d97b
 8004738:	3ff921fb 	.word	0x3ff921fb
 800473c:	413921fb 	.word	0x413921fb
 8004740:	3fe00000 	.word	0x3fe00000
 8004744:	080054d0 	.word	0x080054d0
 8004748:	7fefffff 	.word	0x7fefffff
 800474c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004750:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004754:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004758:	460f      	mov	r7, r1
 800475a:	4606      	mov	r6, r0
 800475c:	f7fc f94e 	bl	80009fc <__aeabi_d2iz>
 8004760:	f7fb fe48 	bl	80003f4 <__aeabi_i2d>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4630      	mov	r0, r6
 800476a:	4639      	mov	r1, r7
 800476c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004770:	f7fb fcf2 	bl	8000158 <__aeabi_dsub>
 8004774:	2200      	movs	r2, #0
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <__ieee754_rem_pio2+0x3e8>)
 8004778:	f7fb fea6 	bl	80004c8 <__aeabi_dmul>
 800477c:	460f      	mov	r7, r1
 800477e:	4606      	mov	r6, r0
 8004780:	f7fc f93c 	bl	80009fc <__aeabi_d2iz>
 8004784:	f7fb fe36 	bl	80003f4 <__aeabi_i2d>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004794:	f7fb fce0 	bl	8000158 <__aeabi_dsub>
 8004798:	2200      	movs	r2, #0
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <__ieee754_rem_pio2+0x3e8>)
 800479c:	f7fb fe94 	bl	80004c8 <__aeabi_dmul>
 80047a0:	f04f 0803 	mov.w	r8, #3
 80047a4:	2600      	movs	r6, #0
 80047a6:	2700      	movs	r7, #0
 80047a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047ac:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80047b0:	4632      	mov	r2, r6
 80047b2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80047b6:	463b      	mov	r3, r7
 80047b8:	46c2      	mov	sl, r8
 80047ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80047be:	f7fc f8eb 	bl	8000998 <__aeabi_dcmpeq>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d1f4      	bne.n	80047b0 <__ieee754_rem_pio2+0x398>
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <__ieee754_rem_pio2+0x3ec>)
 80047c8:	462a      	mov	r2, r5
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	2302      	movs	r3, #2
 80047ce:	4621      	mov	r1, r4
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	a806      	add	r0, sp, #24
 80047d4:	4653      	mov	r3, sl
 80047d6:	f000 f817 	bl	8004808 <__kernel_rem_pio2>
 80047da:	9b04      	ldr	r3, [sp, #16]
 80047dc:	4605      	mov	r5, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f6bf ae51 	bge.w	8004486 <__ieee754_rem_pio2+0x6e>
 80047e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80047e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047ec:	e9c4 2300 	strd	r2, r3, [r4]
 80047f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80047f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80047fc:	e703      	b.n	8004606 <__ieee754_rem_pio2+0x1ee>
 80047fe:	bf00      	nop
 8004800:	41700000 	.word	0x41700000
 8004804:	08005550 	.word	0x08005550

08004808 <__kernel_rem_pio2>:
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004810:	9308      	str	r3, [sp, #32]
 8004812:	9106      	str	r1, [sp, #24]
 8004814:	4bb6      	ldr	r3, [pc, #728]	; (8004af0 <__kernel_rem_pio2+0x2e8>)
 8004816:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004818:	f112 0f14 	cmn.w	r2, #20
 800481c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004820:	bfa8      	it	ge
 8004822:	1ed4      	subge	r4, r2, #3
 8004824:	9302      	str	r3, [sp, #8]
 8004826:	9b08      	ldr	r3, [sp, #32]
 8004828:	bfb8      	it	lt
 800482a:	2400      	movlt	r4, #0
 800482c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004830:	9307      	str	r3, [sp, #28]
 8004832:	bfa4      	itt	ge
 8004834:	2318      	movge	r3, #24
 8004836:	fb94 f4f3 	sdivge	r4, r4, r3
 800483a:	f06f 0317 	mvn.w	r3, #23
 800483e:	fb04 3303 	mla	r3, r4, r3, r3
 8004842:	eb03 0b02 	add.w	fp, r3, r2
 8004846:	9a07      	ldr	r2, [sp, #28]
 8004848:	9b02      	ldr	r3, [sp, #8]
 800484a:	1aa7      	subs	r7, r4, r2
 800484c:	eb03 0802 	add.w	r8, r3, r2
 8004850:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004852:	2500      	movs	r5, #0
 8004854:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	9009      	str	r0, [sp, #36]	; 0x24
 800485e:	ae20      	add	r6, sp, #128	; 0x80
 8004860:	4545      	cmp	r5, r8
 8004862:	dd14      	ble.n	800488e <__kernel_rem_pio2+0x86>
 8004864:	f04f 0800 	mov.w	r8, #0
 8004868:	9a08      	ldr	r2, [sp, #32]
 800486a:	ab20      	add	r3, sp, #128	; 0x80
 800486c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004870:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8004874:	9b02      	ldr	r3, [sp, #8]
 8004876:	4598      	cmp	r8, r3
 8004878:	dc35      	bgt.n	80048e6 <__kernel_rem_pio2+0xde>
 800487a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487c:	2200      	movs	r2, #0
 800487e:	f1a3 0908 	sub.w	r9, r3, #8
 8004882:	2300      	movs	r3, #0
 8004884:	462f      	mov	r7, r5
 8004886:	2600      	movs	r6, #0
 8004888:	e9cd 2300 	strd	r2, r3, [sp]
 800488c:	e01f      	b.n	80048ce <__kernel_rem_pio2+0xc6>
 800488e:	42ef      	cmn	r7, r5
 8004890:	d40b      	bmi.n	80048aa <__kernel_rem_pio2+0xa2>
 8004892:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004896:	e9cd 2300 	strd	r2, r3, [sp]
 800489a:	f7fb fdab 	bl	80003f4 <__aeabi_i2d>
 800489e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80048a6:	3501      	adds	r5, #1
 80048a8:	e7da      	b.n	8004860 <__kernel_rem_pio2+0x58>
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	e7f8      	b.n	80048a2 <__kernel_rem_pio2+0x9a>
 80048b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80048b8:	f7fb fe06 	bl	80004c8 <__aeabi_dmul>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048c4:	f7fb fc4a 	bl	800015c <__adddf3>
 80048c8:	e9cd 0100 	strd	r0, r1, [sp]
 80048cc:	3601      	adds	r6, #1
 80048ce:	9b07      	ldr	r3, [sp, #28]
 80048d0:	3f08      	subs	r7, #8
 80048d2:	429e      	cmp	r6, r3
 80048d4:	ddec      	ble.n	80048b0 <__kernel_rem_pio2+0xa8>
 80048d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048da:	f108 0801 	add.w	r8, r8, #1
 80048de:	e8ea 2302 	strd	r2, r3, [sl], #8
 80048e2:	3508      	adds	r5, #8
 80048e4:	e7c6      	b.n	8004874 <__kernel_rem_pio2+0x6c>
 80048e6:	9b02      	ldr	r3, [sp, #8]
 80048e8:	aa0c      	add	r2, sp, #48	; 0x30
 80048ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80048ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80048f0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80048f2:	9e02      	ldr	r6, [sp, #8]
 80048f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80048f8:	930a      	str	r3, [sp, #40]	; 0x28
 80048fa:	ab98      	add	r3, sp, #608	; 0x260
 80048fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004900:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004904:	ab70      	add	r3, sp, #448	; 0x1c0
 8004906:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800490a:	46d0      	mov	r8, sl
 800490c:	46b1      	mov	r9, r6
 800490e:	af0c      	add	r7, sp, #48	; 0x30
 8004910:	9700      	str	r7, [sp, #0]
 8004912:	f1b9 0f00 	cmp.w	r9, #0
 8004916:	f1a8 0808 	sub.w	r8, r8, #8
 800491a:	dc71      	bgt.n	8004a00 <__kernel_rem_pio2+0x1f8>
 800491c:	465a      	mov	r2, fp
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f000 fd35 	bl	8005390 <scalbn>
 8004926:	2200      	movs	r2, #0
 8004928:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800492c:	4604      	mov	r4, r0
 800492e:	460d      	mov	r5, r1
 8004930:	f7fb fdca 	bl	80004c8 <__aeabi_dmul>
 8004934:	f000 fcac 	bl	8005290 <floor>
 8004938:	2200      	movs	r2, #0
 800493a:	4b6e      	ldr	r3, [pc, #440]	; (8004af4 <__kernel_rem_pio2+0x2ec>)
 800493c:	f7fb fdc4 	bl	80004c8 <__aeabi_dmul>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	f7fb fc06 	bl	8000158 <__aeabi_dsub>
 800494c:	460d      	mov	r5, r1
 800494e:	4604      	mov	r4, r0
 8004950:	f7fc f854 	bl	80009fc <__aeabi_d2iz>
 8004954:	9004      	str	r0, [sp, #16]
 8004956:	f7fb fd4d 	bl	80003f4 <__aeabi_i2d>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4620      	mov	r0, r4
 8004960:	4629      	mov	r1, r5
 8004962:	f7fb fbf9 	bl	8000158 <__aeabi_dsub>
 8004966:	f1bb 0f00 	cmp.w	fp, #0
 800496a:	4680      	mov	r8, r0
 800496c:	4689      	mov	r9, r1
 800496e:	dd70      	ble.n	8004a52 <__kernel_rem_pio2+0x24a>
 8004970:	1e72      	subs	r2, r6, #1
 8004972:	ab0c      	add	r3, sp, #48	; 0x30
 8004974:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004978:	9c04      	ldr	r4, [sp, #16]
 800497a:	f1cb 0118 	rsb	r1, fp, #24
 800497e:	fa40 f301 	asr.w	r3, r0, r1
 8004982:	441c      	add	r4, r3
 8004984:	408b      	lsls	r3, r1
 8004986:	1ac0      	subs	r0, r0, r3
 8004988:	ab0c      	add	r3, sp, #48	; 0x30
 800498a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800498e:	f1cb 0317 	rsb	r3, fp, #23
 8004992:	9404      	str	r4, [sp, #16]
 8004994:	fa40 f303 	asr.w	r3, r0, r3
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	9b00      	ldr	r3, [sp, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	dd66      	ble.n	8004a6e <__kernel_rem_pio2+0x266>
 80049a0:	2200      	movs	r2, #0
 80049a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80049a6:	4614      	mov	r4, r2
 80049a8:	9b04      	ldr	r3, [sp, #16]
 80049aa:	3301      	adds	r3, #1
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	4296      	cmp	r6, r2
 80049b0:	f300 80ac 	bgt.w	8004b0c <__kernel_rem_pio2+0x304>
 80049b4:	f1bb 0f00 	cmp.w	fp, #0
 80049b8:	dd07      	ble.n	80049ca <__kernel_rem_pio2+0x1c2>
 80049ba:	f1bb 0f01 	cmp.w	fp, #1
 80049be:	f000 80b4 	beq.w	8004b2a <__kernel_rem_pio2+0x322>
 80049c2:	f1bb 0f02 	cmp.w	fp, #2
 80049c6:	f000 80ba 	beq.w	8004b3e <__kernel_rem_pio2+0x336>
 80049ca:	9b00      	ldr	r3, [sp, #0]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d14e      	bne.n	8004a6e <__kernel_rem_pio2+0x266>
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	2000      	movs	r0, #0
 80049d6:	4948      	ldr	r1, [pc, #288]	; (8004af8 <__kernel_rem_pio2+0x2f0>)
 80049d8:	f7fb fbbe 	bl	8000158 <__aeabi_dsub>
 80049dc:	4680      	mov	r8, r0
 80049de:	4689      	mov	r9, r1
 80049e0:	2c00      	cmp	r4, #0
 80049e2:	d044      	beq.n	8004a6e <__kernel_rem_pio2+0x266>
 80049e4:	465a      	mov	r2, fp
 80049e6:	2000      	movs	r0, #0
 80049e8:	4943      	ldr	r1, [pc, #268]	; (8004af8 <__kernel_rem_pio2+0x2f0>)
 80049ea:	f000 fcd1 	bl	8005390 <scalbn>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4640      	mov	r0, r8
 80049f4:	4649      	mov	r1, r9
 80049f6:	f7fb fbaf 	bl	8000158 <__aeabi_dsub>
 80049fa:	4680      	mov	r8, r0
 80049fc:	4689      	mov	r9, r1
 80049fe:	e036      	b.n	8004a6e <__kernel_rem_pio2+0x266>
 8004a00:	2200      	movs	r2, #0
 8004a02:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <__kernel_rem_pio2+0x2f4>)
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fd5e 	bl	80004c8 <__aeabi_dmul>
 8004a0c:	f7fb fff6 	bl	80009fc <__aeabi_d2iz>
 8004a10:	f7fb fcf0 	bl	80003f4 <__aeabi_i2d>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <__kernel_rem_pio2+0x2f8>)
 8004a20:	f7fb fd52 	bl	80004c8 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fb94 	bl	8000158 <__aeabi_dsub>
 8004a30:	f7fb ffe4 	bl	80009fc <__aeabi_d2iz>
 8004a34:	9b00      	ldr	r3, [sp, #0]
 8004a36:	f109 39ff 	add.w	r9, r9, #4294967295
 8004a3a:	f843 0b04 	str.w	r0, [r3], #4
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a44:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004a48:	f7fb fb88 	bl	800015c <__adddf3>
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	460d      	mov	r5, r1
 8004a50:	e75f      	b.n	8004912 <__kernel_rem_pio2+0x10a>
 8004a52:	d105      	bne.n	8004a60 <__kernel_rem_pio2+0x258>
 8004a54:	1e73      	subs	r3, r6, #1
 8004a56:	aa0c      	add	r2, sp, #48	; 0x30
 8004a58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a5c:	15c3      	asrs	r3, r0, #23
 8004a5e:	e79b      	b.n	8004998 <__kernel_rem_pio2+0x190>
 8004a60:	2200      	movs	r2, #0
 8004a62:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <__kernel_rem_pio2+0x2fc>)
 8004a64:	f7fb ffb6 	bl	80009d4 <__aeabi_dcmpge>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d13e      	bne.n	8004aea <__kernel_rem_pio2+0x2e2>
 8004a6c:	9000      	str	r0, [sp, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2300      	movs	r3, #0
 8004a72:	4640      	mov	r0, r8
 8004a74:	4649      	mov	r1, r9
 8004a76:	f7fb ff8f 	bl	8000998 <__aeabi_dcmpeq>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	f000 80b1 	beq.w	8004be2 <__kernel_rem_pio2+0x3da>
 8004a80:	1e74      	subs	r4, r6, #1
 8004a82:	4623      	mov	r3, r4
 8004a84:	2200      	movs	r2, #0
 8004a86:	9902      	ldr	r1, [sp, #8]
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	da5f      	bge.n	8004b4c <__kernel_rem_pio2+0x344>
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	d074      	beq.n	8004b7a <__kernel_rem_pio2+0x372>
 8004a90:	ab0c      	add	r3, sp, #48	; 0x30
 8004a92:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004a96:	f1ab 0b18 	sub.w	fp, fp, #24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 809f 	beq.w	8004bde <__kernel_rem_pio2+0x3d6>
 8004aa0:	465a      	mov	r2, fp
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	4914      	ldr	r1, [pc, #80]	; (8004af8 <__kernel_rem_pio2+0x2f0>)
 8004aa6:	f000 fc73 	bl	8005390 <scalbn>
 8004aaa:	46a2      	mov	sl, r4
 8004aac:	4606      	mov	r6, r0
 8004aae:	460f      	mov	r7, r1
 8004ab0:	f04f 0800 	mov.w	r8, #0
 8004ab4:	ab70      	add	r3, sp, #448	; 0x1c0
 8004ab6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004afc <__kernel_rem_pio2+0x2f4>
 8004aba:	00e5      	lsls	r5, r4, #3
 8004abc:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004ac0:	f1ba 0f00 	cmp.w	sl, #0
 8004ac4:	f280 80c3 	bge.w	8004c4e <__kernel_rem_pio2+0x446>
 8004ac8:	4626      	mov	r6, r4
 8004aca:	2e00      	cmp	r6, #0
 8004acc:	f2c0 80f5 	blt.w	8004cba <__kernel_rem_pio2+0x4b2>
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <__kernel_rem_pio2+0x300>)
 8004ad2:	f04f 0a00 	mov.w	sl, #0
 8004ad6:	9307      	str	r3, [sp, #28]
 8004ad8:	ab70      	add	r3, sp, #448	; 0x1c0
 8004ada:	f04f 0b00 	mov.w	fp, #0
 8004ade:	f04f 0800 	mov.w	r8, #0
 8004ae2:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004ae6:	1ba7      	subs	r7, r4, r6
 8004ae8:	e0db      	b.n	8004ca2 <__kernel_rem_pio2+0x49a>
 8004aea:	2302      	movs	r3, #2
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	e757      	b.n	80049a0 <__kernel_rem_pio2+0x198>
 8004af0:	08005698 	.word	0x08005698
 8004af4:	40200000 	.word	0x40200000
 8004af8:	3ff00000 	.word	0x3ff00000
 8004afc:	3e700000 	.word	0x3e700000
 8004b00:	41700000 	.word	0x41700000
 8004b04:	3fe00000 	.word	0x3fe00000
 8004b08:	08005658 	.word	0x08005658
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	b944      	cbnz	r4, 8004b22 <__kernel_rem_pio2+0x31a>
 8004b10:	b11b      	cbz	r3, 8004b1a <__kernel_rem_pio2+0x312>
 8004b12:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	3201      	adds	r2, #1
 8004b1e:	3704      	adds	r7, #4
 8004b20:	e745      	b.n	80049ae <__kernel_rem_pio2+0x1a6>
 8004b22:	1acb      	subs	r3, r1, r3
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	4623      	mov	r3, r4
 8004b28:	e7f7      	b.n	8004b1a <__kernel_rem_pio2+0x312>
 8004b2a:	1e72      	subs	r2, r6, #1
 8004b2c:	ab0c      	add	r3, sp, #48	; 0x30
 8004b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b32:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004b36:	a90c      	add	r1, sp, #48	; 0x30
 8004b38:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b3c:	e745      	b.n	80049ca <__kernel_rem_pio2+0x1c2>
 8004b3e:	1e72      	subs	r2, r6, #1
 8004b40:	ab0c      	add	r3, sp, #48	; 0x30
 8004b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b46:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b4a:	e7f4      	b.n	8004b36 <__kernel_rem_pio2+0x32e>
 8004b4c:	a90c      	add	r1, sp, #48	; 0x30
 8004b4e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	430a      	orrs	r2, r1
 8004b56:	e796      	b.n	8004a86 <__kernel_rem_pio2+0x27e>
 8004b58:	3401      	adds	r4, #1
 8004b5a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d0fa      	beq.n	8004b58 <__kernel_rem_pio2+0x350>
 8004b62:	9b08      	ldr	r3, [sp, #32]
 8004b64:	f106 0801 	add.w	r8, r6, #1
 8004b68:	18f5      	adds	r5, r6, r3
 8004b6a:	ab20      	add	r3, sp, #128	; 0x80
 8004b6c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004b70:	4434      	add	r4, r6
 8004b72:	4544      	cmp	r4, r8
 8004b74:	da04      	bge.n	8004b80 <__kernel_rem_pio2+0x378>
 8004b76:	4626      	mov	r6, r4
 8004b78:	e6bf      	b.n	80048fa <__kernel_rem_pio2+0xf2>
 8004b7a:	2401      	movs	r4, #1
 8004b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b7e:	e7ec      	b.n	8004b5a <__kernel_rem_pio2+0x352>
 8004b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b82:	f04f 0900 	mov.w	r9, #0
 8004b86:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004b8a:	f7fb fc33 	bl	80003f4 <__aeabi_i2d>
 8004b8e:	2600      	movs	r6, #0
 8004b90:	2700      	movs	r7, #0
 8004b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b94:	e9c5 0100 	strd	r0, r1, [r5]
 8004b98:	3b08      	subs	r3, #8
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	9504      	str	r5, [sp, #16]
 8004b9e:	9b07      	ldr	r3, [sp, #28]
 8004ba0:	4599      	cmp	r9, r3
 8004ba2:	dd05      	ble.n	8004bb0 <__kernel_rem_pio2+0x3a8>
 8004ba4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004ba8:	f108 0801 	add.w	r8, r8, #1
 8004bac:	3508      	adds	r5, #8
 8004bae:	e7e0      	b.n	8004b72 <__kernel_rem_pio2+0x36a>
 8004bb0:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004bb4:	9900      	ldr	r1, [sp, #0]
 8004bb6:	f109 0901 	add.w	r9, r9, #1
 8004bba:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004bbe:	9100      	str	r1, [sp, #0]
 8004bc0:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004bc4:	f8cd c010 	str.w	ip, [sp, #16]
 8004bc8:	f7fb fc7e 	bl	80004c8 <__aeabi_dmul>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	4639      	mov	r1, r7
 8004bd4:	f7fb fac2 	bl	800015c <__adddf3>
 8004bd8:	4606      	mov	r6, r0
 8004bda:	460f      	mov	r7, r1
 8004bdc:	e7df      	b.n	8004b9e <__kernel_rem_pio2+0x396>
 8004bde:	3c01      	subs	r4, #1
 8004be0:	e756      	b.n	8004a90 <__kernel_rem_pio2+0x288>
 8004be2:	f1cb 0200 	rsb	r2, fp, #0
 8004be6:	4640      	mov	r0, r8
 8004be8:	4649      	mov	r1, r9
 8004bea:	f000 fbd1 	bl	8005390 <scalbn>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	4ba4      	ldr	r3, [pc, #656]	; (8004e84 <__kernel_rem_pio2+0x67c>)
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	f7fb feed 	bl	80009d4 <__aeabi_dcmpge>
 8004bfa:	b1f8      	cbz	r0, 8004c3c <__kernel_rem_pio2+0x434>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4ba2      	ldr	r3, [pc, #648]	; (8004e88 <__kernel_rem_pio2+0x680>)
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb fc60 	bl	80004c8 <__aeabi_dmul>
 8004c08:	f7fb fef8 	bl	80009fc <__aeabi_d2iz>
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	f7fb fbf1 	bl	80003f4 <__aeabi_i2d>
 8004c12:	2200      	movs	r2, #0
 8004c14:	4b9b      	ldr	r3, [pc, #620]	; (8004e84 <__kernel_rem_pio2+0x67c>)
 8004c16:	f7fb fc57 	bl	80004c8 <__aeabi_dmul>
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7fb fa99 	bl	8000158 <__aeabi_dsub>
 8004c26:	f7fb fee9 	bl	80009fc <__aeabi_d2iz>
 8004c2a:	1c74      	adds	r4, r6, #1
 8004c2c:	ab0c      	add	r3, sp, #48	; 0x30
 8004c2e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004c32:	f10b 0b18 	add.w	fp, fp, #24
 8004c36:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8004c3a:	e731      	b.n	8004aa0 <__kernel_rem_pio2+0x298>
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	4629      	mov	r1, r5
 8004c40:	f7fb fedc 	bl	80009fc <__aeabi_d2iz>
 8004c44:	ab0c      	add	r3, sp, #48	; 0x30
 8004c46:	4634      	mov	r4, r6
 8004c48:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004c4c:	e728      	b.n	8004aa0 <__kernel_rem_pio2+0x298>
 8004c4e:	ab0c      	add	r3, sp, #48	; 0x30
 8004c50:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004c54:	f7fb fbce 	bl	80003f4 <__aeabi_i2d>
 8004c58:	4632      	mov	r2, r6
 8004c5a:	463b      	mov	r3, r7
 8004c5c:	f7fb fc34 	bl	80004c8 <__aeabi_dmul>
 8004c60:	4642      	mov	r2, r8
 8004c62:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004c66:	464b      	mov	r3, r9
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fc2c 	bl	80004c8 <__aeabi_dmul>
 8004c70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c74:	4606      	mov	r6, r0
 8004c76:	460f      	mov	r7, r1
 8004c78:	e722      	b.n	8004ac0 <__kernel_rem_pio2+0x2b8>
 8004c7a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004c7e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004c82:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004c86:	f8cd c01c 	str.w	ip, [sp, #28]
 8004c8a:	f7fb fc1d 	bl	80004c8 <__aeabi_dmul>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4650      	mov	r0, sl
 8004c94:	4659      	mov	r1, fp
 8004c96:	f7fb fa61 	bl	800015c <__adddf3>
 8004c9a:	4682      	mov	sl, r0
 8004c9c:	468b      	mov	fp, r1
 8004c9e:	f108 0801 	add.w	r8, r8, #1
 8004ca2:	9b02      	ldr	r3, [sp, #8]
 8004ca4:	4598      	cmp	r8, r3
 8004ca6:	dc01      	bgt.n	8004cac <__kernel_rem_pio2+0x4a4>
 8004ca8:	45b8      	cmp	r8, r7
 8004caa:	dde6      	ble.n	8004c7a <__kernel_rem_pio2+0x472>
 8004cac:	ab48      	add	r3, sp, #288	; 0x120
 8004cae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004cb2:	e9c7 ab00 	strd	sl, fp, [r7]
 8004cb6:	3e01      	subs	r6, #1
 8004cb8:	e707      	b.n	8004aca <__kernel_rem_pio2+0x2c2>
 8004cba:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	dc09      	bgt.n	8004cd4 <__kernel_rem_pio2+0x4cc>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dc32      	bgt.n	8004d2a <__kernel_rem_pio2+0x522>
 8004cc4:	d05a      	beq.n	8004d7c <__kernel_rem_pio2+0x574>
 8004cc6:	9b04      	ldr	r3, [sp, #16]
 8004cc8:	f003 0007 	and.w	r0, r3, #7
 8004ccc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d1f5      	bne.n	8004cc6 <__kernel_rem_pio2+0x4be>
 8004cda:	ab48      	add	r3, sp, #288	; 0x120
 8004cdc:	441d      	add	r5, r3
 8004cde:	46aa      	mov	sl, r5
 8004ce0:	46a3      	mov	fp, r4
 8004ce2:	f1bb 0f00 	cmp.w	fp, #0
 8004ce6:	dc76      	bgt.n	8004dd6 <__kernel_rem_pio2+0x5ce>
 8004ce8:	46aa      	mov	sl, r5
 8004cea:	46a3      	mov	fp, r4
 8004cec:	f1bb 0f01 	cmp.w	fp, #1
 8004cf0:	f300 8090 	bgt.w	8004e14 <__kernel_rem_pio2+0x60c>
 8004cf4:	2700      	movs	r7, #0
 8004cf6:	463e      	mov	r6, r7
 8004cf8:	2c01      	cmp	r4, #1
 8004cfa:	f300 80aa 	bgt.w	8004e52 <__kernel_rem_pio2+0x64a>
 8004cfe:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004d02:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004d06:	9b00      	ldr	r3, [sp, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 80ac 	bne.w	8004e66 <__kernel_rem_pio2+0x65e>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	462a      	mov	r2, r5
 8004d12:	9806      	ldr	r0, [sp, #24]
 8004d14:	e9c0 2300 	strd	r2, r3, [r0]
 8004d18:	4622      	mov	r2, r4
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d20:	463a      	mov	r2, r7
 8004d22:	4633      	mov	r3, r6
 8004d24:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004d28:	e7cd      	b.n	8004cc6 <__kernel_rem_pio2+0x4be>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	46a0      	mov	r8, r4
 8004d2e:	4601      	mov	r1, r0
 8004d30:	ab48      	add	r3, sp, #288	; 0x120
 8004d32:	441d      	add	r5, r3
 8004d34:	f1b8 0f00 	cmp.w	r8, #0
 8004d38:	da3a      	bge.n	8004db0 <__kernel_rem_pio2+0x5a8>
 8004d3a:	9b00      	ldr	r3, [sp, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d03e      	beq.n	8004dbe <__kernel_rem_pio2+0x5b6>
 8004d40:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004d44:	4602      	mov	r2, r0
 8004d46:	462b      	mov	r3, r5
 8004d48:	9d06      	ldr	r5, [sp, #24]
 8004d4a:	2601      	movs	r6, #1
 8004d4c:	e9c5 2300 	strd	r2, r3, [r5]
 8004d50:	460b      	mov	r3, r1
 8004d52:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004d56:	f7fb f9ff 	bl	8000158 <__aeabi_dsub>
 8004d5a:	4684      	mov	ip, r0
 8004d5c:	460f      	mov	r7, r1
 8004d5e:	ad48      	add	r5, sp, #288	; 0x120
 8004d60:	42b4      	cmp	r4, r6
 8004d62:	f105 0508 	add.w	r5, r5, #8
 8004d66:	da2c      	bge.n	8004dc2 <__kernel_rem_pio2+0x5ba>
 8004d68:	9b00      	ldr	r3, [sp, #0]
 8004d6a:	b10b      	cbz	r3, 8004d70 <__kernel_rem_pio2+0x568>
 8004d6c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004d70:	4662      	mov	r2, ip
 8004d72:	463b      	mov	r3, r7
 8004d74:	9906      	ldr	r1, [sp, #24]
 8004d76:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d7a:	e7a4      	b.n	8004cc6 <__kernel_rem_pio2+0x4be>
 8004d7c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004d7e:	ab48      	add	r3, sp, #288	; 0x120
 8004d80:	4637      	mov	r7, r6
 8004d82:	441d      	add	r5, r3
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	da09      	bge.n	8004d9c <__kernel_rem_pio2+0x594>
 8004d88:	9b00      	ldr	r3, [sp, #0]
 8004d8a:	b10b      	cbz	r3, 8004d90 <__kernel_rem_pio2+0x588>
 8004d8c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004d90:	4632      	mov	r2, r6
 8004d92:	463b      	mov	r3, r7
 8004d94:	9906      	ldr	r1, [sp, #24]
 8004d96:	e9c1 2300 	strd	r2, r3, [r1]
 8004d9a:	e794      	b.n	8004cc6 <__kernel_rem_pio2+0x4be>
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb f9da 	bl	800015c <__adddf3>
 8004da8:	3c01      	subs	r4, #1
 8004daa:	4606      	mov	r6, r0
 8004dac:	460f      	mov	r7, r1
 8004dae:	e7e9      	b.n	8004d84 <__kernel_rem_pio2+0x57c>
 8004db0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004db4:	f7fb f9d2 	bl	800015c <__adddf3>
 8004db8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dbc:	e7ba      	b.n	8004d34 <__kernel_rem_pio2+0x52c>
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	e7c0      	b.n	8004d44 <__kernel_rem_pio2+0x53c>
 8004dc2:	4660      	mov	r0, ip
 8004dc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dc8:	4639      	mov	r1, r7
 8004dca:	f7fb f9c7 	bl	800015c <__adddf3>
 8004dce:	3601      	adds	r6, #1
 8004dd0:	4684      	mov	ip, r0
 8004dd2:	460f      	mov	r7, r1
 8004dd4:	e7c4      	b.n	8004d60 <__kernel_rem_pio2+0x558>
 8004dd6:	e9da 6700 	ldrd	r6, r7, [sl]
 8004dda:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004dde:	4632      	mov	r2, r6
 8004de0:	463b      	mov	r3, r7
 8004de2:	4640      	mov	r0, r8
 8004de4:	4649      	mov	r1, r9
 8004de6:	f7fb f9b9 	bl	800015c <__adddf3>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	f7fb f9af 	bl	8000158 <__aeabi_dsub>
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	f7fb f9ad 	bl	800015c <__adddf3>
 8004e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e06:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004e0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e0e:	e9ca 2300 	strd	r2, r3, [sl]
 8004e12:	e766      	b.n	8004ce2 <__kernel_rem_pio2+0x4da>
 8004e14:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e18:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	f7fb f99a 	bl	800015c <__adddf3>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb f990 	bl	8000158 <__aeabi_dsub>
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	f7fb f98e 	bl	800015c <__adddf3>
 8004e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e44:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004e48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e4c:	e9ca 2300 	strd	r2, r3, [sl]
 8004e50:	e74c      	b.n	8004cec <__kernel_rem_pio2+0x4e4>
 8004e52:	4638      	mov	r0, r7
 8004e54:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004e58:	4631      	mov	r1, r6
 8004e5a:	f7fb f97f 	bl	800015c <__adddf3>
 8004e5e:	3c01      	subs	r4, #1
 8004e60:	4607      	mov	r7, r0
 8004e62:	460e      	mov	r6, r1
 8004e64:	e748      	b.n	8004cf8 <__kernel_rem_pio2+0x4f0>
 8004e66:	9b06      	ldr	r3, [sp, #24]
 8004e68:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004e6c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004e70:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004e74:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004e78:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004e7c:	601d      	str	r5, [r3, #0]
 8004e7e:	615e      	str	r6, [r3, #20]
 8004e80:	e721      	b.n	8004cc6 <__kernel_rem_pio2+0x4be>
 8004e82:	bf00      	nop
 8004e84:	41700000 	.word	0x41700000
 8004e88:	3e700000 	.word	0x3e700000
 8004e8c:	00000000 	.word	0x00000000

08004e90 <__kernel_tan>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	b08b      	sub	sp, #44	; 0x2c
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	4bd9      	ldr	r3, [pc, #868]	; (8005200 <__kernel_tan+0x370>)
 8004e9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004e9e:	429e      	cmp	r6, r3
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	4682      	mov	sl, r0
 8004ea6:	468b      	mov	fp, r1
 8004ea8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004eaa:	9202      	str	r2, [sp, #8]
 8004eac:	9107      	str	r1, [sp, #28]
 8004eae:	dc58      	bgt.n	8004f62 <__kernel_tan+0xd2>
 8004eb0:	f7fb fda4 	bl	80009fc <__aeabi_d2iz>
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d178      	bne.n	8004fac <__kernel_tan+0x11c>
 8004eba:	1c7b      	adds	r3, r7, #1
 8004ebc:	4323      	orrs	r3, r4
 8004ebe:	4333      	orrs	r3, r6
 8004ec0:	d110      	bne.n	8004ee4 <__kernel_tan+0x54>
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	f000 f9df 	bl	8005288 <fabs>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	2000      	movs	r0, #0
 8004ed0:	49cc      	ldr	r1, [pc, #816]	; (8005204 <__kernel_tan+0x374>)
 8004ed2:	f7fb fc23 	bl	800071c <__aeabi_ddiv>
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	468b      	mov	fp, r1
 8004eda:	4650      	mov	r0, sl
 8004edc:	4659      	mov	r1, fp
 8004ede:	b00b      	add	sp, #44	; 0x2c
 8004ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee4:	2f01      	cmp	r7, #1
 8004ee6:	d0f8      	beq.n	8004eda <__kernel_tan+0x4a>
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4659      	mov	r1, fp
 8004eec:	9a02      	ldr	r2, [sp, #8]
 8004eee:	9b00      	ldr	r3, [sp, #0]
 8004ef0:	f7fb f934 	bl	800015c <__adddf3>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	460f      	mov	r7, r1
 8004efa:	2000      	movs	r0, #0
 8004efc:	49c2      	ldr	r1, [pc, #776]	; (8005208 <__kernel_tan+0x378>)
 8004efe:	f7fb fc0d 	bl	800071c <__aeabi_ddiv>
 8004f02:	462e      	mov	r6, r5
 8004f04:	4689      	mov	r9, r1
 8004f06:	4652      	mov	r2, sl
 8004f08:	465b      	mov	r3, fp
 8004f0a:	4680      	mov	r8, r0
 8004f0c:	462c      	mov	r4, r5
 8004f0e:	4630      	mov	r0, r6
 8004f10:	460d      	mov	r5, r1
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb f920 	bl	8000158 <__aeabi_dsub>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	9802      	ldr	r0, [sp, #8]
 8004f1e:	9900      	ldr	r1, [sp, #0]
 8004f20:	f7fb f91a 	bl	8000158 <__aeabi_dsub>
 8004f24:	4632      	mov	r2, r6
 8004f26:	464b      	mov	r3, r9
 8004f28:	f7fb face 	bl	80004c8 <__aeabi_dmul>
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4682      	mov	sl, r0
 8004f30:	468b      	mov	fp, r1
 8004f32:	464b      	mov	r3, r9
 8004f34:	4630      	mov	r0, r6
 8004f36:	4639      	mov	r1, r7
 8004f38:	f7fb fac6 	bl	80004c8 <__aeabi_dmul>
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4bb1      	ldr	r3, [pc, #708]	; (8005204 <__kernel_tan+0x374>)
 8004f40:	f7fb f90c 	bl	800015c <__adddf3>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4650      	mov	r0, sl
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	f7fb f906 	bl	800015c <__adddf3>
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	f7fb fab8 	bl	80004c8 <__aeabi_dmul>
 8004f58:	4622      	mov	r2, r4
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	f7fb f8fe 	bl	800015c <__adddf3>
 8004f60:	e7b9      	b.n	8004ed6 <__kernel_tan+0x46>
 8004f62:	4baa      	ldr	r3, [pc, #680]	; (800520c <__kernel_tan+0x37c>)
 8004f64:	429e      	cmp	r6, r3
 8004f66:	dd21      	ble.n	8004fac <__kernel_tan+0x11c>
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	da06      	bge.n	8004f7a <__kernel_tan+0xea>
 8004f6c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f70:	469b      	mov	fp, r3
 8004f72:	9b00      	ldr	r3, [sp, #0]
 8004f74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	4652      	mov	r2, sl
 8004f7c:	a182      	add	r1, pc, #520	; (adr r1, 8005188 <__kernel_tan+0x2f8>)
 8004f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f82:	465b      	mov	r3, fp
 8004f84:	f7fb f8e8 	bl	8000158 <__aeabi_dsub>
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	a180      	add	r1, pc, #512	; (adr r1, 8005190 <__kernel_tan+0x300>)
 8004f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f92:	9a02      	ldr	r2, [sp, #8]
 8004f94:	9b00      	ldr	r3, [sp, #0]
 8004f96:	f7fb f8df 	bl	8000158 <__aeabi_dsub>
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	f7fb f8dd 	bl	800015c <__adddf3>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	468b      	mov	fp, r1
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4652      	mov	r2, sl
 8004fae:	465b      	mov	r3, fp
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	4659      	mov	r1, fp
 8004fb4:	f7fb fa88 	bl	80004c8 <__aeabi_dmul>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	4689      	mov	r9, r1
 8004fc0:	f7fb fa82 	bl	80004c8 <__aeabi_dmul>
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	460d      	mov	r5, r1
 8004fca:	464b      	mov	r3, r9
 8004fcc:	4650      	mov	r0, sl
 8004fce:	4659      	mov	r1, fp
 8004fd0:	f7fb fa7a 	bl	80004c8 <__aeabi_dmul>
 8004fd4:	a370      	add	r3, pc, #448	; (adr r3, 8005198 <__kernel_tan+0x308>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f7fb fa71 	bl	80004c8 <__aeabi_dmul>
 8004fe6:	a36e      	add	r3, pc, #440	; (adr r3, 80051a0 <__kernel_tan+0x310>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f7fb f8b6 	bl	800015c <__adddf3>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	462b      	mov	r3, r5
 8004ff4:	f7fb fa68 	bl	80004c8 <__aeabi_dmul>
 8004ff8:	a36b      	add	r3, pc, #428	; (adr r3, 80051a8 <__kernel_tan+0x318>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb f8ad 	bl	800015c <__adddf3>
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	f7fb fa5f 	bl	80004c8 <__aeabi_dmul>
 800500a:	a369      	add	r3, pc, #420	; (adr r3, 80051b0 <__kernel_tan+0x320>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb f8a4 	bl	800015c <__adddf3>
 8005014:	4622      	mov	r2, r4
 8005016:	462b      	mov	r3, r5
 8005018:	f7fb fa56 	bl	80004c8 <__aeabi_dmul>
 800501c:	a366      	add	r3, pc, #408	; (adr r3, 80051b8 <__kernel_tan+0x328>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f7fb f89b 	bl	800015c <__adddf3>
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	f7fb fa4d 	bl	80004c8 <__aeabi_dmul>
 800502e:	a364      	add	r3, pc, #400	; (adr r3, 80051c0 <__kernel_tan+0x330>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb f892 	bl	800015c <__adddf3>
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	f7fb fa44 	bl	80004c8 <__aeabi_dmul>
 8005040:	a361      	add	r3, pc, #388	; (adr r3, 80051c8 <__kernel_tan+0x338>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	f7fb fa3b 	bl	80004c8 <__aeabi_dmul>
 8005052:	a35f      	add	r3, pc, #380	; (adr r3, 80051d0 <__kernel_tan+0x340>)
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f7fb f880 	bl	800015c <__adddf3>
 800505c:	4622      	mov	r2, r4
 800505e:	462b      	mov	r3, r5
 8005060:	f7fb fa32 	bl	80004c8 <__aeabi_dmul>
 8005064:	a35c      	add	r3, pc, #368	; (adr r3, 80051d8 <__kernel_tan+0x348>)
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	f7fb f877 	bl	800015c <__adddf3>
 800506e:	4622      	mov	r2, r4
 8005070:	462b      	mov	r3, r5
 8005072:	f7fb fa29 	bl	80004c8 <__aeabi_dmul>
 8005076:	a35a      	add	r3, pc, #360	; (adr r3, 80051e0 <__kernel_tan+0x350>)
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f7fb f86e 	bl	800015c <__adddf3>
 8005080:	4622      	mov	r2, r4
 8005082:	462b      	mov	r3, r5
 8005084:	f7fb fa20 	bl	80004c8 <__aeabi_dmul>
 8005088:	a357      	add	r3, pc, #348	; (adr r3, 80051e8 <__kernel_tan+0x358>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb f865 	bl	800015c <__adddf3>
 8005092:	4622      	mov	r2, r4
 8005094:	462b      	mov	r3, r5
 8005096:	f7fb fa17 	bl	80004c8 <__aeabi_dmul>
 800509a:	a355      	add	r3, pc, #340	; (adr r3, 80051f0 <__kernel_tan+0x360>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f7fb f85c 	bl	800015c <__adddf3>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80050ac:	f7fb f856 	bl	800015c <__adddf3>
 80050b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050b4:	f7fb fa08 	bl	80004c8 <__aeabi_dmul>
 80050b8:	9a02      	ldr	r2, [sp, #8]
 80050ba:	9b00      	ldr	r3, [sp, #0]
 80050bc:	f7fb f84e 	bl	800015c <__adddf3>
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	f7fb fa00 	bl	80004c8 <__aeabi_dmul>
 80050c8:	9a02      	ldr	r2, [sp, #8]
 80050ca:	9b00      	ldr	r3, [sp, #0]
 80050cc:	f7fb f846 	bl	800015c <__adddf3>
 80050d0:	a349      	add	r3, pc, #292	; (adr r3, 80051f8 <__kernel_tan+0x368>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	4604      	mov	r4, r0
 80050d8:	460d      	mov	r5, r1
 80050da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050de:	f7fb f9f3 	bl	80004c8 <__aeabi_dmul>
 80050e2:	4622      	mov	r2, r4
 80050e4:	462b      	mov	r3, r5
 80050e6:	f7fb f839 	bl	800015c <__adddf3>
 80050ea:	460b      	mov	r3, r1
 80050ec:	e9cd 0100 	strd	r0, r1, [sp]
 80050f0:	4602      	mov	r2, r0
 80050f2:	4659      	mov	r1, fp
 80050f4:	4650      	mov	r0, sl
 80050f6:	f7fb f831 	bl	800015c <__adddf3>
 80050fa:	4b44      	ldr	r3, [pc, #272]	; (800520c <__kernel_tan+0x37c>)
 80050fc:	4604      	mov	r4, r0
 80050fe:	429e      	cmp	r6, r3
 8005100:	460d      	mov	r5, r1
 8005102:	f340 8085 	ble.w	8005210 <__kernel_tan+0x380>
 8005106:	4638      	mov	r0, r7
 8005108:	f7fb f974 	bl	80003f4 <__aeabi_i2d>
 800510c:	4622      	mov	r2, r4
 800510e:	4680      	mov	r8, r0
 8005110:	4689      	mov	r9, r1
 8005112:	462b      	mov	r3, r5
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb f9d6 	bl	80004c8 <__aeabi_dmul>
 800511c:	4642      	mov	r2, r8
 800511e:	4606      	mov	r6, r0
 8005120:	460f      	mov	r7, r1
 8005122:	464b      	mov	r3, r9
 8005124:	4620      	mov	r0, r4
 8005126:	4629      	mov	r1, r5
 8005128:	f7fb f818 	bl	800015c <__adddf3>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4630      	mov	r0, r6
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb faf2 	bl	800071c <__aeabi_ddiv>
 8005138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800513c:	f7fb f80c 	bl	8000158 <__aeabi_dsub>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4650      	mov	r0, sl
 8005146:	4659      	mov	r1, fp
 8005148:	f7fb f806 	bl	8000158 <__aeabi_dsub>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	f7fb f804 	bl	800015c <__adddf3>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4640      	mov	r0, r8
 800515a:	4649      	mov	r1, r9
 800515c:	f7fa fffc 	bl	8000158 <__aeabi_dsub>
 8005160:	9b07      	ldr	r3, [sp, #28]
 8005162:	4604      	mov	r4, r0
 8005164:	179b      	asrs	r3, r3, #30
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	f1c3 0001 	rsb	r0, r3, #1
 800516e:	460d      	mov	r5, r1
 8005170:	f7fb f940 	bl	80003f4 <__aeabi_i2d>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4620      	mov	r0, r4
 800517a:	4629      	mov	r1, r5
 800517c:	f7fb f9a4 	bl	80004c8 <__aeabi_dmul>
 8005180:	e6a9      	b.n	8004ed6 <__kernel_tan+0x46>
 8005182:	bf00      	nop
 8005184:	f3af 8000 	nop.w
 8005188:	54442d18 	.word	0x54442d18
 800518c:	3fe921fb 	.word	0x3fe921fb
 8005190:	33145c07 	.word	0x33145c07
 8005194:	3c81a626 	.word	0x3c81a626
 8005198:	74bf7ad4 	.word	0x74bf7ad4
 800519c:	3efb2a70 	.word	0x3efb2a70
 80051a0:	32f0a7e9 	.word	0x32f0a7e9
 80051a4:	3f12b80f 	.word	0x3f12b80f
 80051a8:	1a8d1068 	.word	0x1a8d1068
 80051ac:	3f3026f7 	.word	0x3f3026f7
 80051b0:	fee08315 	.word	0xfee08315
 80051b4:	3f57dbc8 	.word	0x3f57dbc8
 80051b8:	e96e8493 	.word	0xe96e8493
 80051bc:	3f8226e3 	.word	0x3f8226e3
 80051c0:	1bb341fe 	.word	0x1bb341fe
 80051c4:	3faba1ba 	.word	0x3faba1ba
 80051c8:	db605373 	.word	0xdb605373
 80051cc:	bef375cb 	.word	0xbef375cb
 80051d0:	a03792a6 	.word	0xa03792a6
 80051d4:	3f147e88 	.word	0x3f147e88
 80051d8:	f2f26501 	.word	0xf2f26501
 80051dc:	3f4344d8 	.word	0x3f4344d8
 80051e0:	c9560328 	.word	0xc9560328
 80051e4:	3f6d6d22 	.word	0x3f6d6d22
 80051e8:	8406d637 	.word	0x8406d637
 80051ec:	3f9664f4 	.word	0x3f9664f4
 80051f0:	1110fe7a 	.word	0x1110fe7a
 80051f4:	3fc11111 	.word	0x3fc11111
 80051f8:	55555563 	.word	0x55555563
 80051fc:	3fd55555 	.word	0x3fd55555
 8005200:	3e2fffff 	.word	0x3e2fffff
 8005204:	3ff00000 	.word	0x3ff00000
 8005208:	bff00000 	.word	0xbff00000
 800520c:	3fe59427 	.word	0x3fe59427
 8005210:	2f01      	cmp	r7, #1
 8005212:	d031      	beq.n	8005278 <__kernel_tan+0x3e8>
 8005214:	460f      	mov	r7, r1
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	2000      	movs	r0, #0
 800521c:	4918      	ldr	r1, [pc, #96]	; (8005280 <__kernel_tan+0x3f0>)
 800521e:	f7fb fa7d 	bl	800071c <__aeabi_ddiv>
 8005222:	2600      	movs	r6, #0
 8005224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005228:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800522c:	4652      	mov	r2, sl
 800522e:	465b      	mov	r3, fp
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fa ff90 	bl	8000158 <__aeabi_dsub>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005240:	f7fa ff8a 	bl	8000158 <__aeabi_dsub>
 8005244:	4632      	mov	r2, r6
 8005246:	462b      	mov	r3, r5
 8005248:	f7fb f93e 	bl	80004c8 <__aeabi_dmul>
 800524c:	4632      	mov	r2, r6
 800524e:	4682      	mov	sl, r0
 8005250:	468b      	mov	fp, r1
 8005252:	462b      	mov	r3, r5
 8005254:	4630      	mov	r0, r6
 8005256:	4639      	mov	r1, r7
 8005258:	f7fb f936 	bl	80004c8 <__aeabi_dmul>
 800525c:	2200      	movs	r2, #0
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <__kernel_tan+0x3f4>)
 8005260:	f7fa ff7c 	bl	800015c <__adddf3>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4650      	mov	r0, sl
 800526a:	4659      	mov	r1, fp
 800526c:	f7fa ff76 	bl	800015c <__adddf3>
 8005270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005274:	4634      	mov	r4, r6
 8005276:	e66d      	b.n	8004f54 <__kernel_tan+0xc4>
 8005278:	4682      	mov	sl, r0
 800527a:	468b      	mov	fp, r1
 800527c:	e62d      	b.n	8004eda <__kernel_tan+0x4a>
 800527e:	bf00      	nop
 8005280:	bff00000 	.word	0xbff00000
 8005284:	3ff00000 	.word	0x3ff00000

08005288 <fabs>:
 8005288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800528c:	4770      	bx	lr
	...

08005290 <floor>:
 8005290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005294:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005298:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800529c:	2e13      	cmp	r6, #19
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4607      	mov	r7, r0
 80052a4:	460c      	mov	r4, r1
 80052a6:	4605      	mov	r5, r0
 80052a8:	dc33      	bgt.n	8005312 <floor+0x82>
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	da14      	bge.n	80052d8 <floor+0x48>
 80052ae:	a334      	add	r3, pc, #208	; (adr r3, 8005380 <floor+0xf0>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fa ff52 	bl	800015c <__adddf3>
 80052b8:	2200      	movs	r2, #0
 80052ba:	2300      	movs	r3, #0
 80052bc:	f7fb fb94 	bl	80009e8 <__aeabi_dcmpgt>
 80052c0:	b138      	cbz	r0, 80052d2 <floor+0x42>
 80052c2:	2c00      	cmp	r4, #0
 80052c4:	da58      	bge.n	8005378 <floor+0xe8>
 80052c6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80052ca:	431d      	orrs	r5, r3
 80052cc:	d001      	beq.n	80052d2 <floor+0x42>
 80052ce:	2500      	movs	r5, #0
 80052d0:	4c2d      	ldr	r4, [pc, #180]	; (8005388 <floor+0xf8>)
 80052d2:	4623      	mov	r3, r4
 80052d4:	462f      	mov	r7, r5
 80052d6:	e025      	b.n	8005324 <floor+0x94>
 80052d8:	4a2c      	ldr	r2, [pc, #176]	; (800538c <floor+0xfc>)
 80052da:	fa42 f806 	asr.w	r8, r2, r6
 80052de:	ea01 0208 	and.w	r2, r1, r8
 80052e2:	4302      	orrs	r2, r0
 80052e4:	d01e      	beq.n	8005324 <floor+0x94>
 80052e6:	a326      	add	r3, pc, #152	; (adr r3, 8005380 <floor+0xf0>)
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f7fa ff36 	bl	800015c <__adddf3>
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	f7fb fb78 	bl	80009e8 <__aeabi_dcmpgt>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d0ea      	beq.n	80052d2 <floor+0x42>
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	bfbe      	ittt	lt
 8005300:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005304:	fa43 f606 	asrlt.w	r6, r3, r6
 8005308:	19a4      	addlt	r4, r4, r6
 800530a:	2500      	movs	r5, #0
 800530c:	ea24 0408 	bic.w	r4, r4, r8
 8005310:	e7df      	b.n	80052d2 <floor+0x42>
 8005312:	2e33      	cmp	r6, #51	; 0x33
 8005314:	dd0a      	ble.n	800532c <floor+0x9c>
 8005316:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800531a:	d103      	bne.n	8005324 <floor+0x94>
 800531c:	f7fa ff1e 	bl	800015c <__adddf3>
 8005320:	4607      	mov	r7, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4638      	mov	r0, r7
 8005326:	4619      	mov	r1, r3
 8005328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532c:	f04f 32ff 	mov.w	r2, #4294967295
 8005330:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005334:	fa22 f808 	lsr.w	r8, r2, r8
 8005338:	ea18 0f00 	tst.w	r8, r0
 800533c:	d0f2      	beq.n	8005324 <floor+0x94>
 800533e:	a310      	add	r3, pc, #64	; (adr r3, 8005380 <floor+0xf0>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fa ff0a 	bl	800015c <__adddf3>
 8005348:	2200      	movs	r2, #0
 800534a:	2300      	movs	r3, #0
 800534c:	f7fb fb4c 	bl	80009e8 <__aeabi_dcmpgt>
 8005350:	2800      	cmp	r0, #0
 8005352:	d0be      	beq.n	80052d2 <floor+0x42>
 8005354:	2c00      	cmp	r4, #0
 8005356:	da02      	bge.n	800535e <floor+0xce>
 8005358:	2e14      	cmp	r6, #20
 800535a:	d103      	bne.n	8005364 <floor+0xd4>
 800535c:	3401      	adds	r4, #1
 800535e:	ea25 0508 	bic.w	r5, r5, r8
 8005362:	e7b6      	b.n	80052d2 <floor+0x42>
 8005364:	2301      	movs	r3, #1
 8005366:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800536a:	fa03 f606 	lsl.w	r6, r3, r6
 800536e:	4435      	add	r5, r6
 8005370:	42bd      	cmp	r5, r7
 8005372:	bf38      	it	cc
 8005374:	18e4      	addcc	r4, r4, r3
 8005376:	e7f2      	b.n	800535e <floor+0xce>
 8005378:	2500      	movs	r5, #0
 800537a:	462c      	mov	r4, r5
 800537c:	e7a9      	b.n	80052d2 <floor+0x42>
 800537e:	bf00      	nop
 8005380:	8800759c 	.word	0x8800759c
 8005384:	7e37e43c 	.word	0x7e37e43c
 8005388:	bff00000 	.word	0xbff00000
 800538c:	000fffff 	.word	0x000fffff

08005390 <scalbn>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005396:	4604      	mov	r4, r0
 8005398:	460d      	mov	r5, r1
 800539a:	4617      	mov	r7, r2
 800539c:	460b      	mov	r3, r1
 800539e:	b996      	cbnz	r6, 80053c6 <scalbn+0x36>
 80053a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053a4:	4303      	orrs	r3, r0
 80053a6:	d039      	beq.n	800541c <scalbn+0x8c>
 80053a8:	4b33      	ldr	r3, [pc, #204]	; (8005478 <scalbn+0xe8>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	f7fb f88c 	bl	80004c8 <__aeabi_dmul>
 80053b0:	4b32      	ldr	r3, [pc, #200]	; (800547c <scalbn+0xec>)
 80053b2:	4604      	mov	r4, r0
 80053b4:	429f      	cmp	r7, r3
 80053b6:	460d      	mov	r5, r1
 80053b8:	da0f      	bge.n	80053da <scalbn+0x4a>
 80053ba:	a32b      	add	r3, pc, #172	; (adr r3, 8005468 <scalbn+0xd8>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fb f882 	bl	80004c8 <__aeabi_dmul>
 80053c4:	e006      	b.n	80053d4 <scalbn+0x44>
 80053c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053ca:	4296      	cmp	r6, r2
 80053cc:	d10a      	bne.n	80053e4 <scalbn+0x54>
 80053ce:	4602      	mov	r2, r0
 80053d0:	f7fa fec4 	bl	800015c <__adddf3>
 80053d4:	4604      	mov	r4, r0
 80053d6:	460d      	mov	r5, r1
 80053d8:	e020      	b.n	800541c <scalbn+0x8c>
 80053da:	460b      	mov	r3, r1
 80053dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80053e0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80053e4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80053e8:	19b9      	adds	r1, r7, r6
 80053ea:	4291      	cmp	r1, r2
 80053ec:	dd0e      	ble.n	800540c <scalbn+0x7c>
 80053ee:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80053f2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80053f6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80053fa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80053fe:	4820      	ldr	r0, [pc, #128]	; (8005480 <scalbn+0xf0>)
 8005400:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005404:	a31a      	add	r3, pc, #104	; (adr r3, 8005470 <scalbn+0xe0>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	e7d9      	b.n	80053c0 <scalbn+0x30>
 800540c:	2900      	cmp	r1, #0
 800540e:	dd08      	ble.n	8005422 <scalbn+0x92>
 8005410:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005418:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005422:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005426:	da12      	bge.n	800544e <scalbn+0xbe>
 8005428:	f24c 3350 	movw	r3, #50000	; 0xc350
 800542c:	429f      	cmp	r7, r3
 800542e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005432:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8005436:	dcdc      	bgt.n	80053f2 <scalbn+0x62>
 8005438:	a30b      	add	r3, pc, #44	; (adr r3, 8005468 <scalbn+0xd8>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005442:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005446:	480f      	ldr	r0, [pc, #60]	; (8005484 <scalbn+0xf4>)
 8005448:	f041 011f 	orr.w	r1, r1, #31
 800544c:	e7b8      	b.n	80053c0 <scalbn+0x30>
 800544e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005452:	3136      	adds	r1, #54	; 0x36
 8005454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005458:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	2200      	movs	r2, #0
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <scalbn+0xf8>)
 8005464:	e7ac      	b.n	80053c0 <scalbn+0x30>
 8005466:	bf00      	nop
 8005468:	c2f8f359 	.word	0xc2f8f359
 800546c:	01a56e1f 	.word	0x01a56e1f
 8005470:	8800759c 	.word	0x8800759c
 8005474:	7e37e43c 	.word	0x7e37e43c
 8005478:	43500000 	.word	0x43500000
 800547c:	ffff3cb0 	.word	0xffff3cb0
 8005480:	8800759c 	.word	0x8800759c
 8005484:	c2f8f359 	.word	0xc2f8f359
 8005488:	3c900000 	.word	0x3c900000

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
