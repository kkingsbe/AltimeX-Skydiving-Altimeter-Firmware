
baro_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08007088  08007088  00017088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b8  080072b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080072b8  080072b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072b8  080072b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072bc  080072bc  000172bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080072c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000070  08007330  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08007330  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d032  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c5  00000000  00000000  0002d0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c71  00000000  00000000  00030bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9f9  00000000  00000000  00048831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a14c  00000000  00000000  0005822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  000e23c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800706c 	.word	0x0800706c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800706c 	.word	0x0800706c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <BMP_Init_Default_Addr>:

struct BMP_Config bmpConfig;
enum BMP_Measurement_Mode bmpCurrentMode;

void BMP_Init_Default_Addr(I2C_HandleTypeDef* i2c_config)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	BMP_Init(i2c_config, BMP_DEFAULT_ADDRESS);
 8000d7c:	2147      	movs	r1, #71	; 0x47
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f804 	bl	8000d8c <BMP_Init>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <BMP_Init>:

void BMP_Init(I2C_HandleTypeDef* i2c_config, uint16_t address)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1000);
 8000d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9c:	f000 ff9c 	bl	8001cd8 <HAL_Delay>
	bmpConfig.i2c_config = i2c_config;
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <BMP_Init+0x40>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
	bmpConfig.address = address;
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <BMP_Init+0x40>)
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	8093      	strh	r3, [r2, #4]
	bmpCurrentMode = NONE;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <BMP_Init+0x44>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]

	//Enter sleep mode
	BMP_Switch_Power_Mode(SLEEP);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 f83a 	bl	8000e2c <BMP_Switch_Power_Mode>

	//Enter continous mode
	BMP_Switch_Power_Mode(CONTINOUS);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f837 	bl	8000e2c <BMP_Switch_Power_Mode>

	//Configure FIFO
	BMP_Configure_FIFO();
 8000dbe:	f000 f809 	bl	8000dd4 <BMP_Configure_FIFO>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000008c 	.word	0x2000008c
 8000dd0:	20000094 	.word	0x20000094

08000dd4 <BMP_Configure_FIFO>:

void BMP_Configure_FIFO()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af04      	add	r7, sp, #16
	//Configure FIFO
	uint8_t fifo_config [1];
	BMP_Reg_Read(BMP_FIFO_SEL, 1, fifo_config);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2101      	movs	r1, #1
 8000de0:	2018      	movs	r0, #24
 8000de2:	f000 f881 	bl	8000ee8 <BMP_Reg_Read>
	fifo_config[0] &= 0xFC; //Clear first 2 bits
 8000de6:	793b      	ldrb	r3, [r7, #4]
 8000de8:	f023 0303 	bic.w	r3, r3, #3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	713b      	strb	r3, [r7, #4]
	fifo_config[0] |= 0x3;  //Set first 2 bits to 0x3 (pt mode)
 8000df0:	793b      	ldrb	r3, [r7, #4]
 8000df2:	f043 0303 	orr.w	r3, r3, #3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), BMP_FIFO_SEL, 1, fifo_config, 1, 5);
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <BMP_Configure_FIFO+0x54>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <BMP_Configure_FIFO+0x54>)
 8000e00:	889b      	ldrh	r3, [r3, #4]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	b299      	uxth	r1, r3
 8000e06:	2305      	movs	r3, #5
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	2218      	movs	r2, #24
 8000e16:	f001 fdd5 	bl	80029c4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000e1a:	200a      	movs	r0, #10
 8000e1c:	f000 ff5c 	bl	8001cd8 <HAL_Delay>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000008c 	.word	0x2000008c

08000e2c <BMP_Switch_Power_Mode>:

void BMP_Switch_Power_Mode(enum BMP_Power_Mode new_mode)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af04      	add	r7, sp, #16
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t odr_config[1];
	BMP_Reg_Read(BMP_ODR_CONFIG, 1, odr_config);
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2037      	movs	r0, #55	; 0x37
 8000e40:	f000 f852 	bl	8000ee8 <BMP_Reg_Read>
	odr_config[0] &= 0xFC; // Clear the lower 2 bits
 8000e44:	7b3b      	ldrb	r3, [r7, #12]
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	733b      	strb	r3, [r7, #12]

	uint8_t mode_code; //Stores the 2 bit mode code

	if(new_mode == SLEEP)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <BMP_Switch_Power_Mode+0x2c>
	{
		mode_code = 0x00;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
	}
	if(new_mode == NORMAL)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d101      	bne.n	8000e62 <BMP_Switch_Power_Mode+0x36>
	{
		mode_code = 0x1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
	}
	if(new_mode == CONTINOUS)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d101      	bne.n	8000e6c <BMP_Switch_Power_Mode+0x40>
	{
		mode_code = 0x3;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	73fb      	strb	r3, [r7, #15]
	}

	odr_config[0] |= mode_code; // Set the lower 2 bits to the desired value
 8000e6c:	7b3a      	ldrb	r2, [r7, #12]
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	733b      	strb	r3, [r7, #12]

	//Write new power mode configuration
	HAL_I2C_Mem_Write(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), BMP_ODR_CONFIG, 1, odr_config, 1, 5);
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <BMP_Switch_Power_Mode+0xb8>)
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <BMP_Switch_Power_Mode+0xb8>)
 8000e7c:	889b      	ldrh	r3, [r3, #4]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	b299      	uxth	r1, r3
 8000e82:	2305      	movs	r3, #5
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	2237      	movs	r2, #55	; 0x37
 8000e94:	f001 fd96 	bl	80029c4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f000 ff1d 	bl	8001cd8 <HAL_Delay>

	//Wait for mode change to apply
	uint8_t current_odr_config[1];
	BMP_Reg_Read(BMP_ODR_CONFIG, 1, current_odr_config);
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2037      	movs	r0, #55	; 0x37
 8000ea8:	f000 f81e 	bl	8000ee8 <BMP_Reg_Read>
	uint8_t pm_mode = current_odr_config[0] & 0x3; //Mask out all but the first 2 bits
 8000eac:	7a3b      	ldrb	r3, [r7, #8]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	73bb      	strb	r3, [r7, #14]

	while(pm_mode != mode_code)
 8000eb4:	e00a      	b.n	8000ecc <BMP_Switch_Power_Mode+0xa0>
	{
		BMP_Reg_Read(BMP_ODR_CONFIG, 1, current_odr_config);
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	2037      	movs	r0, #55	; 0x37
 8000ec0:	f000 f812 	bl	8000ee8 <BMP_Reg_Read>
		pm_mode = current_odr_config[0] & 0x3;
 8000ec4:	7a3b      	ldrb	r3, [r7, #8]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	73bb      	strb	r3, [r7, #14]
	while(pm_mode != mode_code)
 8000ecc:	7bba      	ldrb	r2, [r7, #14]
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d1f0      	bne.n	8000eb6 <BMP_Switch_Power_Mode+0x8a>
	}

	HAL_Delay(10);
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f000 feff 	bl	8001cd8 <HAL_Delay>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000008c 	.word	0x2000008c

08000ee8 <BMP_Reg_Read>:

void BMP_Reg_Read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	4603      	mov	r3, r0
 8000ef0:	603a      	str	r2, [r7, #0]
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), reg_addr, 1, data_output, reg_size, 100);
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <BMP_Reg_Read+0x38>)
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <BMP_Reg_Read+0x38>)
 8000efe:	889b      	ldrh	r3, [r3, #4]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	b299      	uxth	r1, r3
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	88bb      	ldrh	r3, [r7, #4]
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	f001 fe50 	bl	8002bb8 <HAL_I2C_Mem_Read>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000008c 	.word	0x2000008c

08000f24 <BMP_Get_Device_Status>:

uint8_t BMP_Get_Device_Status()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), 3, 5);
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <BMP_Get_Device_Status+0x58>)
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <BMP_Get_Device_Status+0x58>)
 8000f30:	889b      	ldrh	r3, [r3, #4]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	b299      	uxth	r1, r3
 8000f36:	2305      	movs	r3, #5
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f002 f8a5 	bl	8003088 <HAL_I2C_IsDeviceReady>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]

	//HAL_Delay(10);
	uint8_t chipid_rx_dat[1];
	BMP_Reg_Read(BMP_CHIP_ID_REG, 1, chipid_rx_dat);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	461a      	mov	r2, r3
 8000f46:	2101      	movs	r1, #1
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff ffcd 	bl	8000ee8 <BMP_Reg_Read>
	uint8_t chip_id = chipid_rx_dat[0];
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	71bb      	strb	r3, [r7, #6]

	uint8_t status_rx_dat[1];
	BMP_Reg_Read(BMP_STATUS_REG, 1, status_rx_dat);
 8000f52:	463b      	mov	r3, r7
 8000f54:	461a      	mov	r2, r3
 8000f56:	2101      	movs	r1, #1
 8000f58:	2028      	movs	r0, #40	; 0x28
 8000f5a:	f7ff ffc5 	bl	8000ee8 <BMP_Reg_Read>
	uint8_t bmp_status = status_rx_dat[0];
 8000f5e:	783b      	ldrb	r3, [r7, #0]
 8000f60:	717b      	strb	r3, [r7, #5]

	if(i2c_status == HAL_OK && bmp_status == 0x2)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <BMP_Get_Device_Status+0x4e>
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d101      	bne.n	8000f72 <BMP_Get_Device_Status+0x4e>
	{
		return 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <BMP_Get_Device_Status+0x50>
	}
	else
	{
		return 0;
 8000f72:	2300      	movs	r3, #0
	}
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <BMP_Read_Data>:

void BMP_Read_Data(uint32_t* temp_c, uint32_t* pressure)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	BMP_Reg_Read(BMP_FIFO_DATA, 6, data);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2106      	movs	r1, #6
 8000f92:	2029      	movs	r0, #41	; 0x29
 8000f94:	f7ff ffa8 	bl	8000ee8 <BMP_Reg_Read>
	uint32_t temp_conc = (uint32_t)(data[2] << 16 | data[1] << 8 | data[0]);
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	041a      	lsls	r2, r3, #16
 8000f9c:	7b7b      	ldrb	r3, [r7, #13]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	7b3a      	ldrb	r2, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
	uint16_t t_temp = temp_conc >> 16;
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	0c1b      	lsrs	r3, r3, #16
 8000fac:	83fb      	strh	r3, [r7, #30]

	while(t_temp == 0x7F)
 8000fae:	e014      	b.n	8000fda <BMP_Read_Data+0x5a>
	{
		HAL_Delay(20);
 8000fb0:	2014      	movs	r0, #20
 8000fb2:	f000 fe91 	bl	8001cd8 <HAL_Delay>
		BMP_Reg_Read(BMP_FIFO_DATA, 6, data);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2106      	movs	r1, #6
 8000fbe:	2029      	movs	r0, #41	; 0x29
 8000fc0:	f7ff ff92 	bl	8000ee8 <BMP_Reg_Read>
		temp_conc = (uint32_t)(data[2] << 16 | data[1] << 8 | data[0]);
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	041a      	lsls	r2, r3, #16
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	7b3a      	ldrb	r2, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
		t_temp = temp_conc >> 16;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	83fb      	strh	r3, [r7, #30]
	while(t_temp == 0x7F)
 8000fda:	8bfb      	ldrh	r3, [r7, #30]
 8000fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000fde:	d0e7      	beq.n	8000fb0 <BMP_Read_Data+0x30>
	}

	*temp_c = t_temp;
 8000fe0:	8bfa      	ldrh	r2, [r7, #30]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]

	uint32_t pressure_conc = (uint32_t)(data[5] << 16 | data[4] << 8 | data[3]);
 8000fe6:	7c7b      	ldrb	r3, [r7, #17]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	7c3b      	ldrb	r3, [r7, #16]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
	*pressure = pressure_conc >> 6;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	099a      	lsrs	r2, r3, #6
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	601a      	str	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <BMP_Get_Mode>:
	uint32_t temp_conc = (uint32_t)(temp_arr[2] << 16 | temp_arr[1] << 8 | temp_arr[0]);
	return temp_conc >> 16;
}

enum BMP_Power_Mode BMP_Get_Mode()
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
	uint8_t odr_config[1];
	BMP_Reg_Read(BMP_ODR_CONFIG, 1, odr_config);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	461a      	mov	r2, r3
 8001010:	2101      	movs	r1, #1
 8001012:	2037      	movs	r0, #55	; 0x37
 8001014:	f7ff ff68 	bl	8000ee8 <BMP_Reg_Read>
	uint8_t pm_bin = odr_config[0];
 8001018:	793b      	ldrb	r3, [r7, #4]
 800101a:	71fb      	strb	r3, [r7, #7]
	pm_bin &= 0x3; //Mask out all bits except for the first 2 (binary 11 or 0x3)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	71fb      	strb	r3, [r7, #7]

	if(pm_bin == 0x0)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <BMP_Get_Mode+0x28>
	{
		return STANDBY;
 800102a:	2300      	movs	r3, #0
 800102c:	e009      	b.n	8001042 <BMP_Get_Mode+0x3c>
	}

	if(pm_bin == 0x1)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <BMP_Get_Mode+0x32>
	{
		return NORMAL;
 8001034:	2302      	movs	r3, #2
 8001036:	e004      	b.n	8001042 <BMP_Get_Mode+0x3c>
	}

	if(pm_bin == 0x70)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b70      	cmp	r3, #112	; 0x70
 800103c:	d101      	bne.n	8001042 <BMP_Get_Mode+0x3c>
	{
		return SLEEP;
 800103e:	2301      	movs	r3, #1
 8001040:	e7ff      	b.n	8001042 <BMP_Get_Mode+0x3c>
	}
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	0000      	movs	r0, r0
 800104c:	0000      	movs	r0, r0
	...

08001050 <BMP_Get_RelAlt_Ft>:

//Reference pressure is pressure in Pa at surface
double BMP_Get_RelAlt_Ft(uint32_t reference_pressure)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint32_t p = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
	uint32_t t = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
	BMP_Read_Data(&t, &p);
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff88 	bl	8000f80 <BMP_Read_Data>

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)reference_pressure / p;
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff f9af 	bl	80003d4 <__aeabi_ui2d>
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f9a9 	bl	80003d4 <__aeabi_ui2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff fb47 	bl	800071c <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double exponential = pow(frac_p, (double)1.0/5.257);
 8001096:	a320      	add	r3, pc, #128	; (adr r3, 8001118 <BMP_Get_RelAlt_Ft+0xc8>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010a0:	f004 f944 	bl	800532c <pow>
 80010a4:	e9c7 0108 	strd	r0, r1, [r7, #32]
	double fraction_top = (exponential - 1) * (t + 273.15);
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <BMP_Get_RelAlt_Ft+0xe8>)
 80010ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010b2:	f7ff f851 	bl	8000158 <__aeabi_dsub>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4614      	mov	r4, r2
 80010bc:	461d      	mov	r5, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f987 	bl	80003d4 <__aeabi_ui2d>
 80010c6:	a316      	add	r3, pc, #88	; (adr r3, 8001120 <BMP_Get_RelAlt_Ft+0xd0>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff f846 	bl	800015c <__adddf3>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f9f6 	bl	80004c8 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double alt_m = fraction_top / 0.0065;
 80010e4:	a310      	add	r3, pc, #64	; (adr r3, 8001128 <BMP_Get_RelAlt_Ft+0xd8>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ee:	f7ff fb15 	bl	800071c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return alt_m * 3.281; //Convert to ft and return
 80010fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001130 <BMP_Get_RelAlt_Ft+0xe0>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001104:	f7ff f9e0 	bl	80004c8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
}
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bdb0      	pop	{r4, r5, r7, pc}
 8001116:	bf00      	nop
 8001118:	7dee2d4a 	.word	0x7dee2d4a
 800111c:	3fc85936 	.word	0x3fc85936
 8001120:	66666666 	.word	0x66666666
 8001124:	40711266 	.word	0x40711266
 8001128:	76c8b439 	.word	0x76c8b439
 800112c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001130:	ed916873 	.word	0xed916873
 8001134:	400a3f7c 	.word	0x400a3f7c
 8001138:	3ff00000 	.word	0x3ff00000

0800113c <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f835 	bl	80011b4 <Set_LED_Timer>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	460a      	mov	r2, r1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	4613      	mov	r3, r2
 8001160:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 8001162:	f000 f9eb 	bl	800153c <Clear_All_LED>
	if(num_filled > 5) num_filled = 5;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d901      	bls.n	8001170 <Strip_Progress_Bar_Single_Color+0x1e>
 800116c:	2305      	movs	r3, #5
 800116e:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e008      	b.n	8001188 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f9b2 	bl	80014e6 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	3301      	adds	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3f2      	bcc.n	8001176 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <Strip_Clear>:

void Strip_Clear()
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
	Clear_All_LED();
 800119e:	f000 f9cd 	bl	800153c <Clear_All_LED>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <Strip_Send>:

void Strip_Send()
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
	WS2813_Send();
 80011aa:	f000 f8c1 	bl	8001330 <WS2813_Send>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <Set_LED_Timer+0x18>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000098 	.word	0x20000098

080011d0 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	b2d9      	uxtb	r1, r3
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <Set_LED+0x58>)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	460a      	mov	r2, r1
 80011ec:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <Set_LED+0x58>)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	460a      	mov	r2, r1
 80011fc:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	b2d9      	uxtb	r1, r3
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <Set_LED+0x58>)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	460a      	mov	r2, r1
 800120c:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2d9      	uxtb	r1, r3
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <Set_LED+0x58>)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	460a      	mov	r2, r1
 800121c:	71da      	strb	r2, [r3, #7]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000098 	.word	0x20000098
 800122c:	00000000 	.word	0x00000000

08001230 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b2d      	cmp	r3, #45	; 0x2d
 800123c:	dd01      	ble.n	8001242 <Set_Brightness+0x12>
 800123e:	232d      	movs	r3, #45	; 0x2d
 8001240:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e063      	b.n	8001310 <Set_Brightness+0xe0>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 8001248:	4a37      	ldr	r2, [pc, #220]	; (8001328 <Set_Brightness+0xf8>)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	7919      	ldrb	r1, [r3, #4]
 8001252:	4a35      	ldr	r2, [pc, #212]	; (8001328 <Set_Brightness+0xf8>)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3306      	adds	r3, #6
 8001258:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 800125c:	2301      	movs	r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	e050      	b.n	8001304 <Set_Brightness+0xd4>
		{
			float angle = 90-brightness;  // in degrees
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd2f 	bl	8000ccc <__aeabi_i2f>
 800126e:	4603      	mov	r3, r0
 8001270:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff f8d0 	bl	8000418 <__aeabi_f2d>
 8001278:	a329      	add	r3, pc, #164	; (adr r3, 8001320 <Set_Brightness+0xf0>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff f923 	bl	80004c8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <Set_Brightness+0xfc>)
 8001290:	f7ff fa44 	bl	800071c <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc0c 	bl	8000ab8 <__aeabi_d2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 80012a4:	4a20      	ldr	r2, [pc, #128]	; (8001328 <Set_Brightness+0xf8>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	441a      	add	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4413      	add	r3, r2
 80012b0:	3304      	adds	r3, #4
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f89d 	bl	80003f4 <__aeabi_i2d>
 80012ba:	4604      	mov	r4, r0
 80012bc:	460d      	mov	r5, r1
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff f8aa 	bl	8000418 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f004 f804 	bl	80052d8 <tan>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7ff fa20 	bl	800071c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fbc8 	bl	8000a78 <__aeabi_d2uiz>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b2d9      	uxtb	r1, r3
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <Set_Brightness+0xf8>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	441a      	add	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4413      	add	r3, r2
 80012f8:	3318      	adds	r3, #24
 80012fa:	460a      	mov	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	3301      	adds	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b03      	cmp	r3, #3
 8001308:	ddab      	ble.n	8001262 <Set_Brightness+0x32>
	for (int i=0; i<MAX_LED; i++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b04      	cmp	r3, #4
 8001314:	dd98      	ble.n	8001248 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	53c8d4f1 	.word	0x53c8d4f1
 8001324:	400921fb 	.word	0x400921fb
 8001328:	20000098 	.word	0x20000098
 800132c:	40668000 	.word	0x40668000

08001330 <WS2813_Send>:

void WS2813_Send ()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	e03a      	b.n	80013b6 <WS2813_Send+0x86>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8001340:	4a33      	ldr	r2, [pc, #204]	; (8001410 <WS2813_Send+0xe0>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	7e5b      	ldrb	r3, [r3, #25]
 800134a:	041a      	lsls	r2, r3, #16
 800134c:	4930      	ldr	r1, [pc, #192]	; (8001410 <WS2813_Send+0xe0>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	7e9b      	ldrb	r3, [r3, #26]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	431a      	orrs	r2, r3
 800135a:	492d      	ldr	r1, [pc, #180]	; (8001410 <WS2813_Send+0xe0>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	7edb      	ldrb	r3, [r3, #27]
 8001364:	4313      	orrs	r3, r2
 8001366:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001368:	2317      	movs	r3, #23
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e01d      	b.n	80013aa <WS2813_Send+0x7a>
		{
			if (color&(1<<i))
 800136e:	2201      	movs	r2, #1
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <WS2813_Send+0x60>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <WS2813_Send+0xe0>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3314      	adds	r3, #20
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	2230      	movs	r2, #48	; 0x30
 800138c:	809a      	strh	r2, [r3, #4]
 800138e:	e006      	b.n	800139e <WS2813_Send+0x6e>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 8001390:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <WS2813_Send+0xe0>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3314      	adds	r3, #20
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	2214      	movs	r2, #20
 800139c:	809a      	strh	r2, [r3, #4]

			indx++;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dade      	bge.n	800136e <WS2813_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	3301      	adds	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	ddc1      	ble.n	8001340 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	e00c      	b.n	80013dc <WS2813_Send+0xac>
	{
		ws_config.pwmData[indx] = 0;
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <WS2813_Send+0xe0>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3314      	adds	r3, #20
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	2200      	movs	r2, #0
 80013ce:	809a      	strh	r2, [r3, #4]
		indx++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b31      	cmp	r3, #49	; 0x31
 80013e0:	ddef      	ble.n	80013c2 <WS2813_Send+0x92>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <WS2813_Send+0xe0>)
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <WS2813_Send+0xe4>)
 80013ec:	2104      	movs	r1, #4
 80013ee:	f002 ff81 	bl	80042f4 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 80013f2:	bf00      	nop
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <WS2813_Send+0xe0>)
 80013f6:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0fa      	beq.n	80013f4 <WS2813_Send+0xc4>
	ws_config.datasentflag = 0;
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <WS2813_Send+0xe0>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000098 	.word	0x20000098
 8001414:	200000c4 	.word	0x200000c4

08001418 <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d108      	bne.n	800143c <Color_To_RGB+0x24>
		rgb->r = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	22ff      	movs	r2, #255	; 0xff
 8001434:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2214      	movs	r2, #20
 800143a:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <Color_To_RGB+0x3c>
		rgb->r = 255;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	22ff      	movs	r2, #255	; 0xff
 8001446:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	22ff      	movs	r2, #255	; 0xff
 800144c:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d108      	bne.n	800146c <Color_To_RGB+0x54>
		rgb->r = 255;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d108      	bne.n	8001484 <Color_To_RGB+0x6c>
		rgb->r = 255;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	22ff      	movs	r2, #255	; 0xff
 8001476:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d108      	bne.n	800149c <Color_To_RGB+0x84>
		rgb->r = 0;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	22ff      	movs	r2, #255	; 0xff
 8001494:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	22c8      	movs	r2, #200	; 0xc8
 800149a:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d108      	bne.n	80014b4 <Color_To_RGB+0x9c>
		rgb->r = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	709a      	strb	r2, [r3, #2]
	}
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	461a      	mov	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	789b      	ldrb	r3, [r3, #2]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fe79 	bl	80011d0 <Set_LED>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 80014f2:	78fa      	ldrb	r2, [r7, #3]
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff8c 	bl	8001418 <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffd9 	bl	80014be <Set_LED_From_RGB>
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2104      	movs	r1, #4
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f880 	bl	8004628 <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000098 	.word	0x20000098

0800153c <Clear_All_LED>:

void Clear_All_LED()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e007      	b.n	8001558 <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2105      	movs	r1, #5
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffca 	bl	80014e6 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	3301      	adds	r3, #1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b04      	cmp	r3, #4
 800155c:	d9f4      	bls.n	8001548 <Clear_All_LED+0xc>
	}
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156e:	f000 fb51 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001572:	f000 f847 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001576:	f000 f9a3 	bl	80018c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800157a:	f000 f983 	bl	8001884 <MX_DMA_Init>
  MX_I2C1_Init();
 800157e:	f000 f883 	bl	8001688 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001582:	f000 f8ff 	bl	8001784 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001586:	f000 f8ad 	bl	80016e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Strip_Set_Timer(&htim2);
 800158a:	481c      	ldr	r0, [pc, #112]	; (80015fc <main+0x94>)
 800158c:	f7ff fdd6 	bl	800113c <Strip_Set_Timer>
  Strip_Clear();
 8001590:	f7ff fe03 	bl	800119a <Strip_Clear>

  BMP_Init_Default_Addr(&hi2c1);
 8001594:	481a      	ldr	r0, [pc, #104]	; (8001600 <main+0x98>)
 8001596:	f7ff fbed 	bl	8000d74 <BMP_Init_Default_Addr>
  enum BMP_Power_Mode bmp_mode = BMP_Get_Mode();
 800159a:	f7ff fd34 	bl	8001006 <BMP_Get_Mode>
 800159e:	4603      	mov	r3, r0
 80015a0:	77fb      	strb	r3, [r7, #31]
  uint8_t bmp_status = BMP_Get_Device_Status();
 80015a2:	f7ff fcbf 	bl	8000f24 <BMP_Get_Device_Status>
 80015a6:	4603      	mov	r3, r0
 80015a8:	77bb      	strb	r3, [r7, #30]
  uint32_t temp_c = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  uint32_t ref_pressure = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  BMP_Read_Data(&temp_c, &ref_pressure);
 80015b2:	1d3a      	adds	r2, r7, #4
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fce0 	bl	8000f80 <BMP_Read_Data>
  double alt = 0.0;
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Set_Brightness(20);
 80015cc:	2014      	movs	r0, #20
 80015ce:	f7ff fe2f 	bl	8001230 <Set_Brightness>
	alt = BMP_Get_RelAlt_Ft(ref_pressure);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fd3b 	bl	8001050 <BMP_Get_RelAlt_Ft>
 80015da:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint32_t test = temp_c - 25;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b19      	subs	r3, #25
 80015e2:	60fb      	str	r3, [r7, #12]
	Strip_Progress_Bar_Single_Color(test, GREEN);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fdb1 	bl	8001152 <Strip_Progress_Bar_Single_Color>
	Strip_Send();
 80015f0:	f7ff fdd9 	bl	80011a6 <Strip_Send>
	HAL_Delay(10);
 80015f4:	200a      	movs	r0, #10
 80015f6:	f000 fb6f 	bl	8001cd8 <HAL_Delay>
  {
 80015fa:	e7e7      	b.n	80015cc <main+0x64>
 80015fc:	200002b8 	.word	0x200002b8
 8001600:	2000021c 	.word	0x2000021c

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b090      	sub	sp, #64	; 0x40
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	2228      	movs	r2, #40	; 0x28
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fe58 	bl	80052c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162e:	2310      	movs	r3, #16
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800163a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800163e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	4618      	mov	r0, r3
 8001646:	f002 f9a7 	bl	8003998 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001650:	f000 f98a 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
 8001656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001658:	2302      	movs	r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2102      	movs	r1, #2
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fc14 	bl	8003e9c <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800167a:	f000 f975 	bl	8001968 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3740      	adds	r7, #64	; 0x40
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_I2C1_Init+0x50>)
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <MX_I2C1_Init+0x54>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_I2C1_Init+0x50>)
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x58>)
 8001696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016c6:	f001 f839 	bl	800273c <HAL_I2C_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d0:	f000 f94a 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000021c 	.word	0x2000021c
 80016dc:	40005400 	.word	0x40005400
 80016e0:	000186a0 	.word	0x000186a0

080016e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_TIM1_Init+0x98>)
 8001702:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <MX_TIM1_Init+0x9c>)
 8001704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_TIM1_Init+0x98>)
 8001708:	2203      	movs	r2, #3
 800170a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_TIM1_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_TIM1_Init+0x98>)
 8001714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001718:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_TIM1_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_TIM1_Init+0x98>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_TIM1_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <MX_TIM1_Init+0x98>)
 800172e:	f002 fd39 	bl	80041a4 <HAL_TIM_Base_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001738:	f000 f916 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4619      	mov	r1, r3
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <MX_TIM1_Init+0x98>)
 800174a:	f003 f8e9 	bl	8004920 <HAL_TIM_ConfigClockSource>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001754:	f000 f908 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_TIM1_Init+0x98>)
 8001766:	f003 fd27 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001770:	f000 f8fa 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000270 	.word	0x20000270
 8001780:	40012c00 	.word	0x40012c00

08001784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017ca:	223f      	movs	r2, #63	; 0x3f
 80017cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017da:	4829      	ldr	r0, [pc, #164]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017dc:	f002 fce2 	bl	80041a4 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80017e6:	f000 f8bf 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4822      	ldr	r0, [pc, #136]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017f8:	f003 f892 	bl	8004920 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001802:	f000 f8b1 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001806:	481e      	ldr	r0, [pc, #120]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001808:	f002 fd1b 	bl	8004242 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001812:	f000 f8a9 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	4619      	mov	r1, r3
 8001824:	4816      	ldr	r0, [pc, #88]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001826:	f003 fcc7 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001830:	f000 f89a 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	; 0x60
 8001836:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_TIM2_Init+0xfc>)
 800184c:	f002 ffaa 	bl	80047a4 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001856:	f000 f887 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2204      	movs	r2, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4807      	ldr	r0, [pc, #28]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001862:	f002 ff9f 	bl	80047a4 <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800186c:	f000 f87c 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001872:	f000 f941 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 8001876:	bf00      	nop
 8001878:	3738      	adds	r7, #56	; 0x38
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200002b8 	.word	0x200002b8

08001884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_DMA_Init+0x38>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <MX_DMA_Init+0x38>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6153      	str	r3, [r2, #20]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_DMA_Init+0x38>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2011      	movs	r0, #17
 80018a8:	f000 fb11 	bl	8001ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018ac:	2011      	movs	r0, #17
 80018ae:	f000 fb2a 	bl	8001f06 <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_GPIO_Init+0x9c>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <MX_GPIO_Init+0x9c>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_GPIO_Init+0x9c>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_GPIO_Init+0x9c>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <MX_GPIO_Init+0x9c>)
 80018f2:	f043 0308 	orr.w	r3, r3, #8
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_GPIO_Init+0x9c>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	213c      	movs	r1, #60	; 0x3c
 8001908:	4815      	ldr	r0, [pc, #84]	; (8001960 <MX_GPIO_Init+0xa0>)
 800190a:	f000 feff 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_GPIO_Init+0xa4>)
 8001916:	f000 fef9 	bl	800270c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800191a:	233c      	movs	r3, #60	; 0x3c
 800191c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2302      	movs	r3, #2
 8001928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <MX_GPIO_Init+0xa0>)
 8001932:	f000 fd67 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001936:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800193a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2302      	movs	r3, #2
 8001946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	4619      	mov	r1, r3
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_GPIO_Init+0xa4>)
 8001950:	f000 fd58 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	40010800 	.word	0x40010800
 8001964:	40010c00 	.word	0x40010c00

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	e7fe      	b.n	8001970 <Error_Handler+0x8>
	...

08001974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_MspInit+0x40>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_MspInit+0x40>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6193      	str	r3, [r2, #24]
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_MspInit+0x40>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_MspInit+0x40>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_MspInit+0x40>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_MspInit+0x40>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <HAL_I2C_MspInit+0x70>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d123      	bne.n	8001a20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_I2C_MspInit+0x74>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <HAL_I2C_MspInit+0x74>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_I2C_MspInit+0x74>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f0:	23c0      	movs	r3, #192	; 0xc0
 80019f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f4:	2312      	movs	r3, #18
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <HAL_I2C_MspInit+0x78>)
 8001a04:	f000 fcfe 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_I2C_MspInit+0x74>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_I2C_MspInit+0x74>)
 8001a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a12:	61d3      	str	r3, [r2, #28]
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_I2C_MspInit+0x74>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010c00 	.word	0x40010c00

08001a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <HAL_TIM_Base_MspInit+0xb4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10c      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_TIM_Base_MspInit+0xb8>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <HAL_TIM_Base_MspInit+0xb8>)
 8001a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_TIM_Base_MspInit+0xb8>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a5e:	e03e      	b.n	8001ade <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d139      	bne.n	8001ade <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_TIM_Base_MspInit+0xb8>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <HAL_TIM_Base_MspInit+0xb8>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_TIM_Base_MspInit+0xb8>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_TIM_Base_MspInit+0xc0>)
 8001a86:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001ab6:	480e      	ldr	r0, [pc, #56]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001ab8:	f000 fa40 	bl	8001f3c <HAL_DMA_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8001ac2:	f7ff ff51 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
 8001acc:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <HAL_TIM_Base_MspInit+0xbc>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40012c00 	.word	0x40012c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	20000300 	.word	0x20000300
 8001af4:	40020080 	.word	0x40020080

08001af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b16:	d117      	bne.n	8001b48 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_TIM_MspPostInit+0x58>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <HAL_TIM_MspPostInit+0x58>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_TIM_MspPostInit+0x58>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b30:	2303      	movs	r3, #3
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4619      	mov	r1, r3
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <HAL_TIM_MspPostInit+0x5c>)
 8001b44:	f000 fc5e 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010800 	.word	0x40010800

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9e:	f000 f87f 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Channel7_IRQHandler+0x10>)
 8001bae:	f000 faf5 	bl	800219c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000300 	.word	0x20000300

08001bbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	; (8001c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bee:	f7ff ffe5 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f003 fb45 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff fcb7 	bl	8001568 <main>
  bx lr
 8001bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c04:	080072c0 	.word	0x080072c0
  ldr r2, =_sbss
 8001c08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c0c:	20000348 	.word	0x20000348

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x28>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f947 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fea0 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f95f 	bl	8001f22 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f927 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000344 	.word	0x20000344

08001cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000344 	.word	0x20000344

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffe0 	bl	8001cc4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4906      	ldr	r1, [pc, #24]	; (8001db8 <__NVIC_EnableIRQ+0x34>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff90 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff2d 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff42 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff90 	bl	8001e10 <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5f 	bl	8001dbc <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff35 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e043      	b.n	8001fda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_DMA_Init+0xa8>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <HAL_DMA_Init+0xac>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	009a      	lsls	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <HAL_DMA_Init+0xb0>)
 8001f6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	bffdfff8 	.word	0xbffdfff8
 8001fe8:	cccccccd 	.word	0xcccccccd
 8001fec:	40020000 	.word	0x40020000

08001ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_DMA_Start_IT+0x20>
 800200c:	2302      	movs	r3, #2
 800200e:	e04a      	b.n	80020a6 <HAL_DMA_Start_IT+0xb6>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800201e:	2b01      	cmp	r3, #1
 8002020:	d13a      	bne.n	8002098 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f9ae 	bl	80023a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 020e 	orr.w	r2, r2, #14
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e00f      	b.n	8002086 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0204 	bic.w	r2, r2, #4
 8002074:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 020a 	orr.w	r2, r2, #10
 8002084:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e005      	b.n	80020a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
 80020a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d005      	beq.n	80020d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2204      	movs	r2, #4
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e051      	b.n	8002176 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 020e 	bic.w	r2, r2, #14
 80020e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a22      	ldr	r2, [pc, #136]	; (8002180 <HAL_DMA_Abort_IT+0xd0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d029      	beq.n	8002150 <HAL_DMA_Abort_IT+0xa0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a20      	ldr	r2, [pc, #128]	; (8002184 <HAL_DMA_Abort_IT+0xd4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d022      	beq.n	800214c <HAL_DMA_Abort_IT+0x9c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <HAL_DMA_Abort_IT+0xd8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d01a      	beq.n	8002146 <HAL_DMA_Abort_IT+0x96>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_DMA_Abort_IT+0xdc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d012      	beq.n	8002140 <HAL_DMA_Abort_IT+0x90>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <HAL_DMA_Abort_IT+0xe0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00a      	beq.n	800213a <HAL_DMA_Abort_IT+0x8a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_DMA_Abort_IT+0xe4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d102      	bne.n	8002134 <HAL_DMA_Abort_IT+0x84>
 800212e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002132:	e00e      	b.n	8002152 <HAL_DMA_Abort_IT+0xa2>
 8002134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002138:	e00b      	b.n	8002152 <HAL_DMA_Abort_IT+0xa2>
 800213a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800213e:	e008      	b.n	8002152 <HAL_DMA_Abort_IT+0xa2>
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	e005      	b.n	8002152 <HAL_DMA_Abort_IT+0xa2>
 8002146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214a:	e002      	b.n	8002152 <HAL_DMA_Abort_IT+0xa2>
 800214c:	2310      	movs	r3, #16
 800214e:	e000      	b.n	8002152 <HAL_DMA_Abort_IT+0xa2>
 8002150:	2301      	movs	r3, #1
 8002152:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_DMA_Abort_IT+0xe8>)
 8002154:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
    } 
  }
  return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40020008 	.word	0x40020008
 8002184:	4002001c 	.word	0x4002001c
 8002188:	40020030 	.word	0x40020030
 800218c:	40020044 	.word	0x40020044
 8002190:	40020058 	.word	0x40020058
 8002194:	4002006c 	.word	0x4002006c
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2204      	movs	r2, #4
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04f      	beq.n	8002264 <HAL_DMA_IRQHandler+0xc8>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04a      	beq.n	8002264 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a66      	ldr	r2, [pc, #408]	; (800238c <HAL_DMA_IRQHandler+0x1f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d029      	beq.n	800224a <HAL_DMA_IRQHandler+0xae>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a65      	ldr	r2, [pc, #404]	; (8002390 <HAL_DMA_IRQHandler+0x1f4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_IRQHandler+0xaa>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a63      	ldr	r2, [pc, #396]	; (8002394 <HAL_DMA_IRQHandler+0x1f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01a      	beq.n	8002240 <HAL_DMA_IRQHandler+0xa4>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a62      	ldr	r2, [pc, #392]	; (8002398 <HAL_DMA_IRQHandler+0x1fc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d012      	beq.n	800223a <HAL_DMA_IRQHandler+0x9e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a60      	ldr	r2, [pc, #384]	; (800239c <HAL_DMA_IRQHandler+0x200>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00a      	beq.n	8002234 <HAL_DMA_IRQHandler+0x98>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5f      	ldr	r2, [pc, #380]	; (80023a0 <HAL_DMA_IRQHandler+0x204>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d102      	bne.n	800222e <HAL_DMA_IRQHandler+0x92>
 8002228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222c:	e00e      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800222e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002232:	e00b      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002238:	e008      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800223a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800223e:	e005      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002244:	e002      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002246:	2340      	movs	r3, #64	; 0x40
 8002248:	e000      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800224a:	2304      	movs	r3, #4
 800224c:	4a55      	ldr	r2, [pc, #340]	; (80023a4 <HAL_DMA_IRQHandler+0x208>)
 800224e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8094 	beq.w	8002382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002262:	e08e      	b.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2202      	movs	r2, #2
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d056      	beq.n	8002322 <HAL_DMA_IRQHandler+0x186>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d051      	beq.n	8002322 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020a 	bic.w	r2, r2, #10
 800229a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a38      	ldr	r2, [pc, #224]	; (800238c <HAL_DMA_IRQHandler+0x1f0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d029      	beq.n	8002302 <HAL_DMA_IRQHandler+0x166>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a37      	ldr	r2, [pc, #220]	; (8002390 <HAL_DMA_IRQHandler+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <HAL_DMA_IRQHandler+0x162>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a35      	ldr	r2, [pc, #212]	; (8002394 <HAL_DMA_IRQHandler+0x1f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01a      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x15c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a34      	ldr	r2, [pc, #208]	; (8002398 <HAL_DMA_IRQHandler+0x1fc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d012      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x156>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a32      	ldr	r2, [pc, #200]	; (800239c <HAL_DMA_IRQHandler+0x200>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00a      	beq.n	80022ec <HAL_DMA_IRQHandler+0x150>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <HAL_DMA_IRQHandler+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x14a>
 80022e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022e4:	e00e      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ea:	e00b      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f0:	e008      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f6:	e005      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fc:	e002      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022fe:	2320      	movs	r3, #32
 8002300:	e000      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 8002302:	2302      	movs	r3, #2
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_DMA_IRQHandler+0x208>)
 8002306:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	d034      	beq.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002320:	e02f      	b.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2208      	movs	r2, #8
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d028      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 020e 	bic.w	r2, r2, #14
 800234a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
    }
  }
  return;
 8002382:	bf00      	nop
 8002384:	bf00      	nop
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020008 	.word	0x40020008
 8002390:	4002001c 	.word	0x4002001c
 8002394:	40020030 	.word	0x40020030
 8002398:	40020044 	.word	0x40020044
 800239c:	40020058 	.word	0x40020058
 80023a0:	4002006c 	.word	0x4002006c
 80023a4:	40020000 	.word	0x40020000

080023a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d108      	bne.n	80023e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023e6:	e007      	b.n	80023f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
	...

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b08b      	sub	sp, #44	; 0x2c
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002416:	e169      	b.n	80026ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002418:	2201      	movs	r2, #1
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	429a      	cmp	r2, r3
 8002432:	f040 8158 	bne.w	80026e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a9a      	ldr	r2, [pc, #616]	; (80026a4 <HAL_GPIO_Init+0x2a0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d05e      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002440:	4a98      	ldr	r2, [pc, #608]	; (80026a4 <HAL_GPIO_Init+0x2a0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d875      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 8002446:	4a98      	ldr	r2, [pc, #608]	; (80026a8 <HAL_GPIO_Init+0x2a4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d058      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 800244c:	4a96      	ldr	r2, [pc, #600]	; (80026a8 <HAL_GPIO_Init+0x2a4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d86f      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 8002452:	4a96      	ldr	r2, [pc, #600]	; (80026ac <HAL_GPIO_Init+0x2a8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d052      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002458:	4a94      	ldr	r2, [pc, #592]	; (80026ac <HAL_GPIO_Init+0x2a8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d869      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 800245e:	4a94      	ldr	r2, [pc, #592]	; (80026b0 <HAL_GPIO_Init+0x2ac>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d04c      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002464:	4a92      	ldr	r2, [pc, #584]	; (80026b0 <HAL_GPIO_Init+0x2ac>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d863      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 800246a:	4a92      	ldr	r2, [pc, #584]	; (80026b4 <HAL_GPIO_Init+0x2b0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d046      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002470:	4a90      	ldr	r2, [pc, #576]	; (80026b4 <HAL_GPIO_Init+0x2b0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d85d      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 8002476:	2b12      	cmp	r3, #18
 8002478:	d82a      	bhi.n	80024d0 <HAL_GPIO_Init+0xcc>
 800247a:	2b12      	cmp	r3, #18
 800247c:	d859      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 800247e:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <HAL_GPIO_Init+0x80>)
 8002480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002484:	080024ff 	.word	0x080024ff
 8002488:	080024d9 	.word	0x080024d9
 800248c:	080024eb 	.word	0x080024eb
 8002490:	0800252d 	.word	0x0800252d
 8002494:	08002533 	.word	0x08002533
 8002498:	08002533 	.word	0x08002533
 800249c:	08002533 	.word	0x08002533
 80024a0:	08002533 	.word	0x08002533
 80024a4:	08002533 	.word	0x08002533
 80024a8:	08002533 	.word	0x08002533
 80024ac:	08002533 	.word	0x08002533
 80024b0:	08002533 	.word	0x08002533
 80024b4:	08002533 	.word	0x08002533
 80024b8:	08002533 	.word	0x08002533
 80024bc:	08002533 	.word	0x08002533
 80024c0:	08002533 	.word	0x08002533
 80024c4:	08002533 	.word	0x08002533
 80024c8:	080024e1 	.word	0x080024e1
 80024cc:	080024f5 	.word	0x080024f5
 80024d0:	4a79      	ldr	r2, [pc, #484]	; (80026b8 <HAL_GPIO_Init+0x2b4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024d6:	e02c      	b.n	8002532 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	623b      	str	r3, [r7, #32]
          break;
 80024de:	e029      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	3304      	adds	r3, #4
 80024e6:	623b      	str	r3, [r7, #32]
          break;
 80024e8:	e024      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	3308      	adds	r3, #8
 80024f0:	623b      	str	r3, [r7, #32]
          break;
 80024f2:	e01f      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	330c      	adds	r3, #12
 80024fa:	623b      	str	r3, [r7, #32]
          break;
 80024fc:	e01a      	b.n	8002534 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002506:	2304      	movs	r3, #4
 8002508:	623b      	str	r3, [r7, #32]
          break;
 800250a:	e013      	b.n	8002534 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002514:	2308      	movs	r3, #8
 8002516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	611a      	str	r2, [r3, #16]
          break;
 800251e:	e009      	b.n	8002534 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002520:	2308      	movs	r3, #8
 8002522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	615a      	str	r2, [r3, #20]
          break;
 800252a:	e003      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
          break;
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x130>
          break;
 8002532:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2bff      	cmp	r3, #255	; 0xff
 8002538:	d801      	bhi.n	800253e <HAL_GPIO_Init+0x13a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	e001      	b.n	8002542 <HAL_GPIO_Init+0x13e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2bff      	cmp	r3, #255	; 0xff
 8002548:	d802      	bhi.n	8002550 <HAL_GPIO_Init+0x14c>
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	e002      	b.n	8002556 <HAL_GPIO_Init+0x152>
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3b08      	subs	r3, #8
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	210f      	movs	r1, #15
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	6a39      	ldr	r1, [r7, #32]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	431a      	orrs	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80b1 	beq.w	80026e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002584:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <HAL_GPIO_Init+0x2b8>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <HAL_GPIO_Init+0x2b8>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_GPIO_Init+0x2b8>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_GPIO_Init+0x2bc>)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <HAL_GPIO_Init+0x2c0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_GPIO_Init+0x1ec>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3f      	ldr	r2, [pc, #252]	; (80026c8 <HAL_GPIO_Init+0x2c4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00d      	beq.n	80025ec <HAL_GPIO_Init+0x1e8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3e      	ldr	r2, [pc, #248]	; (80026cc <HAL_GPIO_Init+0x2c8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <HAL_GPIO_Init+0x1e4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3d      	ldr	r2, [pc, #244]	; (80026d0 <HAL_GPIO_Init+0x2cc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_GPIO_Init+0x1e0>
 80025e0:	2303      	movs	r3, #3
 80025e2:	e006      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025e4:	2304      	movs	r3, #4
 80025e6:	e004      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e002      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025f0:	2300      	movs	r3, #0
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	f002 0203 	and.w	r2, r2, #3
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	4093      	lsls	r3, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002602:	492f      	ldr	r1, [pc, #188]	; (80026c0 <HAL_GPIO_Init+0x2bc>)
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	492c      	ldr	r1, [pc, #176]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800262a:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	43db      	mvns	r3, r3
 8002632:	4928      	ldr	r1, [pc, #160]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002634:	4013      	ands	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4922      	ldr	r1, [pc, #136]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	43db      	mvns	r3, r3
 800265a:	491e      	ldr	r1, [pc, #120]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 800265c:	4013      	ands	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4918      	ldr	r1, [pc, #96]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	608b      	str	r3, [r1, #8]
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	43db      	mvns	r3, r3
 8002682:	4914      	ldr	r1, [pc, #80]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002684:	4013      	ands	r3, r2
 8002686:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d021      	beq.n	80026d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_GPIO_Init+0x2d0>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	60cb      	str	r3, [r1, #12]
 80026a0:	e021      	b.n	80026e6 <HAL_GPIO_Init+0x2e2>
 80026a2:	bf00      	nop
 80026a4:	10320000 	.word	0x10320000
 80026a8:	10310000 	.word	0x10310000
 80026ac:	10220000 	.word	0x10220000
 80026b0:	10210000 	.word	0x10210000
 80026b4:	10120000 	.word	0x10120000
 80026b8:	10110000 	.word	0x10110000
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40010800 	.word	0x40010800
 80026c8:	40010c00 	.word	0x40010c00
 80026cc:	40011000 	.word	0x40011000
 80026d0:	40011400 	.word	0x40011400
 80026d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	43db      	mvns	r3, r3
 80026e0:	4909      	ldr	r1, [pc, #36]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	3301      	adds	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f47f ae8e 	bne.w	8002418 <HAL_GPIO_Init+0x14>
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	372c      	adds	r7, #44	; 0x2c
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e12b      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff f928 	bl	80019b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a0:	f001 fcce 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a81      	ldr	r2, [pc, #516]	; (80029b0 <HAL_I2C_Init+0x274>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d807      	bhi.n	80027c0 <HAL_I2C_Init+0x84>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a80      	ldr	r2, [pc, #512]	; (80029b4 <HAL_I2C_Init+0x278>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e006      	b.n	80027ce <HAL_I2C_Init+0x92>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a7d      	ldr	r2, [pc, #500]	; (80029b8 <HAL_I2C_Init+0x27c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0e7      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a78      	ldr	r2, [pc, #480]	; (80029bc <HAL_I2C_Init+0x280>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a6a      	ldr	r2, [pc, #424]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d802      	bhi.n	8002810 <HAL_I2C_Init+0xd4>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3301      	adds	r3, #1
 800280e:	e009      	b.n	8002824 <HAL_I2C_Init+0xe8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a69      	ldr	r2, [pc, #420]	; (80029c0 <HAL_I2C_Init+0x284>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	3301      	adds	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	495c      	ldr	r1, [pc, #368]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002840:	428b      	cmp	r3, r1
 8002842:	d819      	bhi.n	8002878 <HAL_I2C_Init+0x13c>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e59      	subs	r1, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002858:	400b      	ands	r3, r1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_I2C_Init+0x138>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e59      	subs	r1, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	e051      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002874:	2304      	movs	r3, #4
 8002876:	e04f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_I2C_Init+0x168>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Init+0x18e>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e58      	subs	r0, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x196>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_I2C_Init+0x1bc>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e58      	subs	r0, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6911      	ldr	r1, [r2, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	000186a0 	.word	0x000186a0
 80029b4:	001e847f 	.word	0x001e847f
 80029b8:	003d08ff 	.word	0x003d08ff
 80029bc:	431bde83 	.word	0x431bde83
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029de:	f7ff f971 	bl	8001cc4 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	f040 80d9 	bne.w	8002ba4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2319      	movs	r3, #25
 80029f8:	2201      	movs	r2, #1
 80029fa:	496d      	ldr	r1, [pc, #436]	; (8002bb0 <HAL_I2C_Mem_Write+0x1ec>)
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fdef 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0cc      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Mem_Write+0x56>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0c5      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d007      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2221      	movs	r2, #33	; 0x21
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a4d      	ldr	r2, [pc, #308]	; (8002bb4 <HAL_I2C_Mem_Write+0x1f0>)
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a82:	88f8      	ldrh	r0, [r7, #6]
 8002a84:	893a      	ldrh	r2, [r7, #8]
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fc26 	bl	80032e4 <I2C_RequestMemoryWrite>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d052      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e081      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fe70 	bl	800378c <I2C_WaitOnTXEFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d107      	bne.n	8002aca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06b      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d11b      	bne.n	8002b44 <HAL_I2C_Mem_Write+0x180>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d017      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1aa      	bne.n	8002aa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fe5c 	bl	800380e <I2C_WaitOnBTFFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d107      	bne.n	8002b74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e016      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	00100002 	.word	0x00100002
 8002bb4:	ffff0000 	.word	0xffff0000

08002bb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08c      	sub	sp, #48	; 0x30
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	813b      	strh	r3, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd6:	f7ff f875 	bl	8001cc4 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	f040 8244 	bne.w	8003072 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2319      	movs	r3, #25
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4982      	ldr	r1, [pc, #520]	; (8002dfc <HAL_I2C_Mem_Read+0x244>)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fcf3 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	e237      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_I2C_Mem_Read+0x5a>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e230      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d007      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2222      	movs	r2, #34	; 0x22
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2240      	movs	r2, #64	; 0x40
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a62      	ldr	r2, [pc, #392]	; (8002e00 <HAL_I2C_Mem_Read+0x248>)
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c7a:	88f8      	ldrh	r0, [r7, #6]
 8002c7c:	893a      	ldrh	r2, [r7, #8]
 8002c7e:	8979      	ldrh	r1, [r7, #10]
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4603      	mov	r3, r0
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fbc0 	bl	8003410 <I2C_RequestMemoryRead>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1ec      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d113      	bne.n	8002cca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e1c0      	b.n	800304c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d11e      	bne.n	8002d10 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce2:	b672      	cpsid	i
}
 8002ce4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0c:	b662      	cpsie	i
}
 8002d0e:	e035      	b.n	8002d7c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d11e      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d28:	b672      	cpsid	i
}
 8002d2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d52:	b662      	cpsie	i
}
 8002d54:	e012      	b.n	8002d7c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d64:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d7c:	e166      	b.n	800304c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	f200 811f 	bhi.w	8002fc6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d123      	bne.n	8002dd8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fd7b 	bl	8003890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e167      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dd6:	e139      	b.n	800304c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d152      	bne.n	8002e86 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	2200      	movs	r2, #0
 8002de8:	4906      	ldr	r1, [pc, #24]	; (8002e04 <HAL_I2C_Mem_Read+0x24c>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fbf8 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e13c      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
 8002dfa:	bf00      	nop
 8002dfc:	00100002 	.word	0x00100002
 8002e00:	ffff0000 	.word	0xffff0000
 8002e04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
}
 8002e0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e4e:	b662      	cpsie	i
}
 8002e50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e84:	e0e2      	b.n	800304c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	497b      	ldr	r1, [pc, #492]	; (800307c <HAL_I2C_Mem_Read+0x4c4>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fba5 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0e9      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb0:	b672      	cpsid	i
}
 8002eb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ee6:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_I2C_Mem_Read+0x4c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	4a65      	ldr	r2, [pc, #404]	; (8003084 <HAL_I2C_Mem_Read+0x4cc>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0a1a      	lsrs	r2, r3, #8
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00da      	lsls	r2, r3, #3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d118      	bne.n	8002f3e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f2e:	b662      	cpsie	i
}
 8002f30:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e09a      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d1d9      	bne.n	8002f00 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f8e:	b662      	cpsie	i
}
 8002f90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc4:	e042      	b.n	800304c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fc60 	bl	8003890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e04c      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d118      	bne.n	800304c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f ae94 	bne.w	8002d7e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3728      	adds	r7, #40	; 0x28
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	00010004 	.word	0x00010004
 8003080:	20000000 	.word	0x20000000
 8003084:	14f8b589 	.word	0x14f8b589

08003088 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	460b      	mov	r3, r1
 8003096:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7fe fe14 	bl	8001cc4 <HAL_GetTick>
 800309c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800309e:	2301      	movs	r3, #1
 80030a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	f040 8111 	bne.w	80032d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2319      	movs	r3, #25
 80030b6:	2201      	movs	r2, #1
 80030b8:	4988      	ldr	r1, [pc, #544]	; (80032dc <HAL_I2C_IsDeviceReady+0x254>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fa90 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
 80030c8:	e104      	b.n	80032d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_I2C_IsDeviceReady+0x50>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0fd      	b.n	80032d4 <HAL_I2C_IsDeviceReady+0x24c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d007      	beq.n	80030fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2224      	movs	r2, #36	; 0x24
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a70      	ldr	r2, [pc, #448]	; (80032e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003130:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa4e 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003158:	d103      	bne.n	8003162 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0b6      	b.n	80032d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003174:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fda5 	bl	8001cc4 <HAL_GetTick>
 800317a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b02      	cmp	r3, #2
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031aa:	e025      	b.n	80031f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ac:	f7fe fd8a 	bl	8001cc4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d302      	bcc.n	80031c2 <HAL_I2C_IsDeviceReady+0x13a>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	22a0      	movs	r2, #160	; 0xa0
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2ba0      	cmp	r3, #160	; 0xa0
 8003202:	d005      	beq.n	8003210 <HAL_I2C_IsDeviceReady+0x188>
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_I2C_IsDeviceReady+0x188>
 800320a:	7dbb      	ldrb	r3, [r7, #22]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0cd      	beq.n	80031ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d129      	bne.n	800327a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2319      	movs	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	4921      	ldr	r1, [pc, #132]	; (80032dc <HAL_I2C_IsDeviceReady+0x254>)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f9c2 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e036      	b.n	80032d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e02c      	b.n	80032d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003288:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003292:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2319      	movs	r3, #25
 800329a:	2201      	movs	r2, #1
 800329c:	490f      	ldr	r1, [pc, #60]	; (80032dc <HAL_I2C_IsDeviceReady+0x254>)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f99e 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e012      	b.n	80032d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	3301      	adds	r3, #1
 80032b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f4ff af32 	bcc.w	8003122 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	00100002 	.word	0x00100002
 80032e0:	ffff0000 	.word	0xffff0000

080032e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	460b      	mov	r3, r1
 80032f8:	813b      	strh	r3, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	2200      	movs	r2, #0
 8003316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f960 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003334:	d103      	bne.n	800333e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e05f      	b.n	8003402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	492d      	ldr	r1, [pc, #180]	; (800340c <I2C_RequestMemoryWrite+0x128>)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f998 	bl	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e04c      	b.n	8003402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	6a39      	ldr	r1, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fa02 	bl	800378c <I2C_WaitOnTXEFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b04      	cmp	r3, #4
 8003394:	d107      	bne.n	80033a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e02b      	b.n	8003402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b0:	893b      	ldrh	r3, [r7, #8]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	611a      	str	r2, [r3, #16]
 80033ba:	e021      	b.n	8003400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033bc:	893b      	ldrh	r3, [r7, #8]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	6a39      	ldr	r1, [r7, #32]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f9dc 	bl	800378c <I2C_WaitOnTXEFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d107      	bne.n	80033f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e005      	b.n	8003402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f6:	893b      	ldrh	r3, [r7, #8]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00010002 	.word	0x00010002

08003410 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	817b      	strh	r3, [r7, #10]
 8003422:	460b      	mov	r3, r1
 8003424:	813b      	strh	r3, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003438:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2200      	movs	r2, #0
 8003452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8c2 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003470:	d103      	bne.n	800347a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0aa      	b.n	80035d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800348c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	4952      	ldr	r1, [pc, #328]	; (80035dc <I2C_RequestMemoryRead+0x1cc>)
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f8fa 	bl	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e097      	b.n	80035d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	6a39      	ldr	r1, [r7, #32]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f964 	bl	800378c <I2C_WaitOnTXEFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d107      	bne.n	80034e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e076      	b.n	80035d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ec:	893b      	ldrh	r3, [r7, #8]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	611a      	str	r2, [r3, #16]
 80034f6:	e021      	b.n	800353c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034f8:	893b      	ldrh	r3, [r7, #8]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	6a39      	ldr	r1, [r7, #32]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f93e 	bl	800378c <I2C_WaitOnTXEFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b04      	cmp	r3, #4
 800351c:	d107      	bne.n	800352e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e050      	b.n	80035d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003532:	893b      	ldrh	r3, [r7, #8]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	6a39      	ldr	r1, [r7, #32]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f923 	bl	800378c <I2C_WaitOnTXEFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	2b04      	cmp	r3, #4
 8003552:	d107      	bne.n	8003564 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e035      	b.n	80035d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003576:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2200      	movs	r2, #0
 8003580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f82b 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00d      	beq.n	80035ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359e:	d103      	bne.n	80035a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e013      	b.n	80035d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035ac:	897b      	ldrh	r3, [r7, #10]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	6a3a      	ldr	r2, [r7, #32]
 80035c0:	4906      	ldr	r1, [pc, #24]	; (80035dc <I2C_RequestMemoryRead+0x1cc>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f863 	bl	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	00010002 	.word	0x00010002

080035e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f0:	e025      	b.n	800363e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d021      	beq.n	800363e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fb63 	bl	8001cc4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d116      	bne.n	800363e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e023      	b.n	8003686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10d      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	43da      	mvns	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	e00c      	b.n	800367e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf0c      	ite	eq
 8003676:	2301      	moveq	r3, #1
 8003678:	2300      	movne	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	429a      	cmp	r2, r3
 8003682:	d0b6      	beq.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800369c:	e051      	b.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ac:	d123      	bne.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e046      	b.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d021      	beq.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe fae1 	bl	8001cc4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e020      	b.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10c      	bne.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	e00b      	b.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d18d      	bne.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003798:	e02d      	b.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f8ce 	bl	800393c <I2C_IsAcknowledgeFailed>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e02d      	b.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d021      	beq.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b2:	f7fe fa87 	bl	8001cc4 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d302      	bcc.n	80037c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e007      	b.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d1ca      	bne.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381a:	e02d      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f88d 	bl	800393c <I2C_IsAcknowledgeFailed>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e02d      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d021      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003834:	f7fe fa46 	bl	8001cc4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e007      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d1ca      	bne.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389c:	e042      	b.n	8003924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d119      	bne.n	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0210 	mvn.w	r2, #16
 80038b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e029      	b.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e0:	f7fe f9f0 	bl	8001cc4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d302      	bcc.n	80038f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d116      	bne.n	8003924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e007      	b.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d1b5      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003952:	d11b      	bne.n	800398c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800395c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e272      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8087 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b8:	4b92      	ldr	r3, [pc, #584]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d00c      	beq.n	80039de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039c4:	4b8f      	ldr	r3, [pc, #572]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d112      	bne.n	80039f6 <HAL_RCC_OscConfig+0x5e>
 80039d0:	4b8c      	ldr	r3, [pc, #560]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039de:	4b89      	ldr	r3, [pc, #548]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x12c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d168      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e24c      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x76>
 8003a00:	4b80      	ldr	r3, [pc, #512]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a7f      	ldr	r2, [pc, #508]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e02e      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x98>
 8003a16:	4b7b      	ldr	r3, [pc, #492]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7a      	ldr	r2, [pc, #488]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b78      	ldr	r3, [pc, #480]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a77      	ldr	r2, [pc, #476]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0xbc>
 8003a3a:	4b72      	ldr	r3, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a71      	ldr	r2, [pc, #452]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a54:	4b6b      	ldr	r3, [pc, #428]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6a      	ldr	r2, [pc, #424]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a67      	ldr	r2, [pc, #412]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fe f926 	bl	8001cc4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fe f922 	bl	8001cc4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e200      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b5d      	ldr	r3, [pc, #372]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe4>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f912 	bl	8001cc4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe f90e 	bl	8001cc4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1ec      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab6:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x10c>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d063      	beq.n	8003b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d11c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x18c>
 8003aea:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d116      	bne.n	8003b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x176>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e1c0      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4939      	ldr	r1, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	e03a      	b.n	8003b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2c:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fe f8c7 	bl	8001cc4 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe f8c3 	bl	8001cc4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1a1      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4927      	ldr	r1, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	e015      	b.n	8003b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6e:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe f8a6 	bl	8001cc4 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7fe f8a2 	bl	8001cc4 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e180      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d03a      	beq.n	8003c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d019      	beq.n	8003be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bae:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe f886 	bl	8001cc4 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe f882 	bl	8001cc4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e160      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f000 fac4 	bl	8004168 <RCC_Delay>
 8003be0:	e01c      	b.n	8003c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be8:	f7fe f86c 	bl	8001cc4 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bee:	e00f      	b.n	8003c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fe f868 	bl	8001cc4 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d908      	bls.n	8003c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e146      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	42420000 	.word	0x42420000
 8003c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e9      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a6 	beq.w	8003d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2e:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c44:	61d3      	str	r3, [r2, #28]
 8003c46:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	4b82      	ldr	r3, [pc, #520]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d118      	bne.n	8003c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c62:	4b7f      	ldr	r3, [pc, #508]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7e      	ldr	r2, [pc, #504]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6e:	f7fe f829 	bl	8001cc4 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7fe f825 	bl	8001cc4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	; 0x64
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e103      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d106      	bne.n	8003caa <HAL_RCC_OscConfig+0x312>
 8003c9c:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6213      	str	r3, [r2, #32]
 8003ca8:	e02d      	b.n	8003d06 <HAL_RCC_OscConfig+0x36e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x334>
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a69      	ldr	r2, [pc, #420]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6213      	str	r3, [r2, #32]
 8003cbe:	4b67      	ldr	r3, [pc, #412]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4a66      	ldr	r2, [pc, #408]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	6213      	str	r3, [r2, #32]
 8003cca:	e01c      	b.n	8003d06 <HAL_RCC_OscConfig+0x36e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d10c      	bne.n	8003cee <HAL_RCC_OscConfig+0x356>
 8003cd4:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4a60      	ldr	r2, [pc, #384]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	6213      	str	r3, [r2, #32]
 8003ce0:	4b5e      	ldr	r3, [pc, #376]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4a5d      	ldr	r2, [pc, #372]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6213      	str	r3, [r2, #32]
 8003cec:	e00b      	b.n	8003d06 <HAL_RCC_OscConfig+0x36e>
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a5a      	ldr	r2, [pc, #360]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6213      	str	r3, [r2, #32]
 8003cfa:	4b58      	ldr	r3, [pc, #352]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	f023 0304 	bic.w	r3, r3, #4
 8003d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d015      	beq.n	8003d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0e:	f7fd ffd9 	bl	8001cc4 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd ffd5 	bl	8001cc4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e0b1      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ee      	beq.n	8003d16 <HAL_RCC_OscConfig+0x37e>
 8003d38:	e014      	b.n	8003d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd ffc3 	bl	8001cc4 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd ffbf 	bl	8001cc4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e09b      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6a:	4b3c      	ldr	r3, [pc, #240]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	4a3b      	ldr	r2, [pc, #236]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8087 	beq.w	8003e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d80:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d061      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d146      	bne.n	8003e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d94:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_RCC_OscConfig+0x4cc>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fd ff93 	bl	8001cc4 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fd ff8f 	bl	8001cc4 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e06d      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db4:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d108      	bne.n	8003ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	4921      	ldr	r1, [pc, #132]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ddc:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a19      	ldr	r1, [r3, #32]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	430b      	orrs	r3, r1
 8003dee:	491b      	ldr	r1, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_OscConfig+0x4cc>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd ff63 	bl	8001cc4 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd ff5f 	bl	8001cc4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e03d      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x46a>
 8003e20:	e035      	b.n	8003e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fd ff4c 	bl	8001cc4 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd ff48 	bl	8001cc4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e026      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x498>
 8003e4e:	e01e      	b.n	8003e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e019      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_OscConfig+0x500>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0d0      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b67      	ldr	r3, [pc, #412]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	4965      	ldr	r1, [pc, #404]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d040      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d115      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e073      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4936      	ldr	r1, [pc, #216]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd fe9a 	bl	8001cc4 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fd fe96 	bl	8001cc4 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e053      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 020c 	and.w	r2, r3, #12
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1eb      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d210      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4922      	ldr	r1, [pc, #136]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f821 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	490a      	ldr	r1, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1cc>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1d0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fd fdf8 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40022000 	.word	0x40022000
 8004060:	40021000 	.word	0x40021000
 8004064:	08007098 	.word	0x08007098
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004

08004070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	b490      	push	{r4, r7}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004076:	4b29      	ldr	r3, [pc, #164]	; (800411c <HAL_RCC_GetSysClockFreq+0xac>)
 8004078:	1d3c      	adds	r4, r7, #4
 800407a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800407c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004080:	f240 2301 	movw	r3, #513	; 0x201
 8004084:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800409a:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb0>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x40>
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x46>
 80040ae:	e02b      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040b2:	623b      	str	r3, [r7, #32]
      break;
 80040b4:	e02b      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	0c9b      	lsrs	r3, r3, #18
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3328      	adds	r3, #40	; 0x28
 80040c0:	443b      	add	r3, r7
 80040c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	0c5b      	lsrs	r3, r3, #17
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	3328      	adds	r3, #40	; 0x28
 80040de:	443b      	add	r3, r7
 80040e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040ea:	fb03 f202 	mul.w	r2, r3, r2
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
 80040f6:	e004      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4a0b      	ldr	r2, [pc, #44]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fc:	fb02 f303 	mul.w	r3, r2, r3
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	623b      	str	r3, [r7, #32]
      break;
 8004106:	e002      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_GetSysClockFreq+0xb4>)
 800410a:	623b      	str	r3, [r7, #32]
      break;
 800410c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410e:	6a3b      	ldr	r3, [r7, #32]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3728      	adds	r7, #40	; 0x28
 8004114:	46bd      	mov	sp, r7
 8004116:	bc90      	pop	{r4, r7}
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	08007088 	.word	0x08007088
 8004120:	40021000 	.word	0x40021000
 8004124:	007a1200 	.word	0x007a1200
 8004128:	003d0900 	.word	0x003d0900

0800412c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b02      	ldr	r3, [pc, #8]	; (800413c <HAL_RCC_GetHCLKFreq+0x10>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	20000000 	.word	0x20000000

08004140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004144:	f7ff fff2 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4903      	ldr	r1, [pc, #12]	; (8004164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	080070a8 	.word	0x080070a8

08004168 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <RCC_Delay+0x34>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <RCC_Delay+0x38>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	0a5b      	lsrs	r3, r3, #9
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004184:	bf00      	nop
  }
  while (Delay --);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1e5a      	subs	r2, r3, #1
 800418a:	60fa      	str	r2, [r7, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f9      	bne.n	8004184 <RCC_Delay+0x1c>
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	20000000 	.word	0x20000000
 80041a0:	10624dd3 	.word	0x10624dd3

080041a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e041      	b.n	800423a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd fc32 	bl	8001a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f000 fd44 	bl	8004c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e041      	b.n	80042d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f839 	bl	80042e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f000 fcf5 	bl	8004c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start_DMA+0x28>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e022      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x6e>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b04      	cmp	r3, #4
 8004320:	d109      	bne.n	8004336 <HAL_TIM_PWM_Start_DMA+0x42>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	e015      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d109      	bne.n	8004350 <HAL_TIM_PWM_Start_DMA+0x5c>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e008      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
 8004368:	e14e      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_TIM_PWM_Start_DMA+0x90>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e022      	b.n	80043ca <HAL_TIM_PWM_Start_DMA+0xd6>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d109      	bne.n	800439e <HAL_TIM_PWM_Start_DMA+0xaa>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e015      	b.n	80043ca <HAL_TIM_PWM_Start_DMA+0xd6>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d109      	bne.n	80043b8 <HAL_TIM_PWM_Start_DMA+0xc4>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e008      	b.n	80043ca <HAL_TIM_PWM_Start_DMA+0xd6>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d024      	beq.n	8004418 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d104      	bne.n	80043de <HAL_TIM_PWM_Start_DMA+0xea>
 80043d4:	887b      	ldrh	r3, [r7, #2]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e114      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_PWM_Start_DMA+0xfa>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ec:	e016      	b.n	800441c <HAL_TIM_PWM_Start_DMA+0x128>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Start_DMA+0x10a>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	e00e      	b.n	800441c <HAL_TIM_PWM_Start_DMA+0x128>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start_DMA+0x11a>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440c:	e006      	b.n	800441c <HAL_TIM_PWM_Start_DMA+0x128>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004416:	e001      	b.n	800441c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0f5      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	f200 80ae 	bhi.w	8004580 <HAL_TIM_PWM_Start_DMA+0x28c>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <HAL_TIM_PWM_Start_DMA+0x138>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004461 	.word	0x08004461
 8004430:	08004581 	.word	0x08004581
 8004434:	08004581 	.word	0x08004581
 8004438:	08004581 	.word	0x08004581
 800443c:	080044a9 	.word	0x080044a9
 8004440:	08004581 	.word	0x08004581
 8004444:	08004581 	.word	0x08004581
 8004448:	08004581 	.word	0x08004581
 800444c:	080044f1 	.word	0x080044f1
 8004450:	08004581 	.word	0x08004581
 8004454:	08004581 	.word	0x08004581
 8004458:	08004581 	.word	0x08004581
 800445c:	08004539 	.word	0x08004539
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	4a6a      	ldr	r2, [pc, #424]	; (8004610 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	4a69      	ldr	r2, [pc, #420]	; (8004614 <HAL_TIM_PWM_Start_DMA+0x320>)
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	4a68      	ldr	r2, [pc, #416]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004476:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3334      	adds	r3, #52	; 0x34
 8004484:	461a      	mov	r2, r3
 8004486:	887b      	ldrh	r3, [r7, #2]
 8004488:	f7fd fdb2 	bl	8001ff0 <HAL_DMA_Start_IT>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0b8      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a4:	60da      	str	r2, [r3, #12]
      break;
 80044a6:	e06c      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	4a57      	ldr	r2, [pc, #348]	; (8004614 <HAL_TIM_PWM_Start_DMA+0x320>)
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	4a56      	ldr	r2, [pc, #344]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x324>)
 80044be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3338      	adds	r3, #56	; 0x38
 80044cc:	461a      	mov	r2, r3
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	f7fd fd8e 	bl	8001ff0 <HAL_DMA_Start_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e094      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044ec:	60da      	str	r2, [r3, #12]
      break;
 80044ee:	e048      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4a46      	ldr	r2, [pc, #280]	; (8004610 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a45      	ldr	r2, [pc, #276]	; (8004614 <HAL_TIM_PWM_Start_DMA+0x320>)
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a44      	ldr	r2, [pc, #272]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004506:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	333c      	adds	r3, #60	; 0x3c
 8004514:	461a      	mov	r2, r3
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	f7fd fd6a 	bl	8001ff0 <HAL_DMA_Start_IT>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e070      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004534:	60da      	str	r2, [r3, #12]
      break;
 8004536:	e024      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	4a34      	ldr	r2, [pc, #208]	; (8004610 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	4a33      	ldr	r2, [pc, #204]	; (8004614 <HAL_TIM_PWM_Start_DMA+0x320>)
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4a32      	ldr	r2, [pc, #200]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x324>)
 800454e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3340      	adds	r3, #64	; 0x40
 800455c:	461a      	mov	r2, r3
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	f7fd fd46 	bl	8001ff0 <HAL_DMA_Start_IT>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e04c      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800457c:	60da      	str	r2, [r3, #12]
      break;
 800457e:	e000      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004580:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2201      	movs	r2, #1
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fdf0 	bl	8005170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a21      	ldr	r2, [pc, #132]	; (800461c <HAL_TIM_PWM_Start_DMA+0x328>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d107      	bne.n	80045aa <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_TIM_PWM_Start_DMA+0x328>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d009      	beq.n	80045d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a15      	ldr	r2, [pc, #84]	; (8004624 <HAL_TIM_PWM_Start_DMA+0x330>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d010      	beq.n	8004606 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	e007      	b.n	8004606 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	08004b5f 	.word	0x08004b5f
 8004614:	08004c07 	.word	0x08004c07
 8004618:	08004acd 	.word	0x08004acd
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800

08004628 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	d855      	bhi.n	80046e4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004675 	.word	0x08004675
 8004644:	080046e5 	.word	0x080046e5
 8004648:	080046e5 	.word	0x080046e5
 800464c:	080046e5 	.word	0x080046e5
 8004650:	08004691 	.word	0x08004691
 8004654:	080046e5 	.word	0x080046e5
 8004658:	080046e5 	.word	0x080046e5
 800465c:	080046e5 	.word	0x080046e5
 8004660:	080046ad 	.word	0x080046ad
 8004664:	080046e5 	.word	0x080046e5
 8004668:	080046e5 	.word	0x080046e5
 800466c:	080046e5 	.word	0x080046e5
 8004670:	080046c9 	.word	0x080046c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004682:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	4618      	mov	r0, r3
 800468a:	f7fd fd11 	bl	80020b0 <HAL_DMA_Abort_IT>
      break;
 800468e:	e02a      	b.n	80046e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fd fd03 	bl	80020b0 <HAL_DMA_Abort_IT>
      break;
 80046aa:	e01c      	b.n	80046e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fd fcf5 	bl	80020b0 <HAL_DMA_Abort_IT>
      break;
 80046c6:	e00e      	b.n	80046e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fd fce7 	bl	80020b0 <HAL_DMA_Abort_IT>
      break;
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80046e4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fd3e 	bl	8005170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d117      	bne.n	800472e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	f241 1311 	movw	r3, #4369	; 0x1111
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_TIM_PWM_Stop_DMA+0x106>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	f240 4344 	movw	r3, #1092	; 0x444
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_TIM_PWM_Stop_DMA+0x106>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	f241 1311 	movw	r3, #4369	; 0x1111
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_TIM_PWM_Stop_DMA+0x136>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	f240 4344 	movw	r3, #1092	; 0x444
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <HAL_TIM_PWM_Stop_DMA+0x136>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Stop_DMA+0x146>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	e013      	b.n	8004796 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Stop_DMA+0x156>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800477c:	e00b      	b.n	8004796 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Stop_DMA+0x166>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478c:	e003      	b.n	8004796 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40012c00 	.word	0x40012c00

080047a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0ac      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x174>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	f200 809f 	bhi.w	800490c <HAL_TIM_PWM_ConfigChannel+0x168>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004809 	.word	0x08004809
 80047d8:	0800490d 	.word	0x0800490d
 80047dc:	0800490d 	.word	0x0800490d
 80047e0:	0800490d 	.word	0x0800490d
 80047e4:	08004849 	.word	0x08004849
 80047e8:	0800490d 	.word	0x0800490d
 80047ec:	0800490d 	.word	0x0800490d
 80047f0:	0800490d 	.word	0x0800490d
 80047f4:	0800488b 	.word	0x0800488b
 80047f8:	0800490d 	.word	0x0800490d
 80047fc:	0800490d 	.word	0x0800490d
 8004800:	0800490d 	.word	0x0800490d
 8004804:	080048cb 	.word	0x080048cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fa90 	bl	8004d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6999      	ldr	r1, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	619a      	str	r2, [r3, #24]
      break;
 8004846:	e062      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fad6 	bl	8004e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	619a      	str	r2, [r3, #24]
      break;
 8004888:	e041      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fb1f 	bl	8004ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0208 	orr.w	r2, r2, #8
 80048a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0204 	bic.w	r2, r2, #4
 80048b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69d9      	ldr	r1, [r3, #28]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	61da      	str	r2, [r3, #28]
      break;
 80048c8:	e021      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fb69 	bl	8004fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	021a      	lsls	r2, r3, #8
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	61da      	str	r2, [r3, #28]
      break;
 800490a:	e000      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800490c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_TIM_ConfigClockSource+0x18>
 8004934:	2302      	movs	r3, #2
 8004936:	e0b3      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x180>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800495e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004970:	d03e      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004976:	f200 8087 	bhi.w	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497e:	f000 8085 	beq.w	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004986:	d87f      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 8004988:	2b70      	cmp	r3, #112	; 0x70
 800498a:	d01a      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0xa2>
 800498c:	2b70      	cmp	r3, #112	; 0x70
 800498e:	d87b      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 8004990:	2b60      	cmp	r3, #96	; 0x60
 8004992:	d050      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x116>
 8004994:	2b60      	cmp	r3, #96	; 0x60
 8004996:	d877      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 8004998:	2b50      	cmp	r3, #80	; 0x50
 800499a:	d03c      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0xf6>
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d873      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d058      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x136>
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d86f      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 80049a8:	2b30      	cmp	r3, #48	; 0x30
 80049aa:	d064      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x156>
 80049ac:	2b30      	cmp	r3, #48	; 0x30
 80049ae:	d86b      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d060      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x156>
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d867      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05c      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x156>
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d05a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049c0:	e062      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6899      	ldr	r1, [r3, #8]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f000 fbae 	bl	8005132 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	609a      	str	r2, [r3, #8]
      break;
 80049ee:	e04e      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f000 fb97 	bl	8005132 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a12:	609a      	str	r2, [r3, #8]
      break;
 8004a14:	e03b      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 fb0e 	bl	8005044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2150      	movs	r1, #80	; 0x50
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fb65 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004a34:	e02b      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fb2c 	bl	80050a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2160      	movs	r1, #96	; 0x60
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb55 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004a54:	e01b      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 faee 	bl	8005044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2140      	movs	r1, #64	; 0x40
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb45 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004a74:	e00b      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f000 fb3c 	bl	80050fe <TIM_ITRx_SetConfig>
        break;
 8004a86:	e002      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e000      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d107      	bne.n	8004af4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af2:	e02a      	b.n	8004b4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d107      	bne.n	8004b0e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2202      	movs	r2, #2
 8004b02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b0c:	e01d      	b.n	8004b4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d107      	bne.n	8004b28 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b26:	e010      	b.n	8004b4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d107      	bne.n	8004b42 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2208      	movs	r2, #8
 8004b36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b40:	e003      	b.n	8004b4a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff ffb5 	bl	8004aba <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	771a      	strb	r2, [r3, #28]
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d10b      	bne.n	8004b8e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d136      	bne.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	e031      	b.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d10b      	bne.n	8004bb0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d125      	bne.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bae:	e020      	b.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d10b      	bne.n	8004bd2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d114      	bne.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd0:	e00f      	b.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d10a      	bne.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2208      	movs	r2, #8
 8004be0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7fc fc8e 	bl	8001514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	771a      	strb	r2, [r3, #28]
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d103      	bne.n	8004c26 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	771a      	strb	r2, [r3, #28]
 8004c24:	e019      	b.n	8004c5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d103      	bne.n	8004c38 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2202      	movs	r2, #2
 8004c34:	771a      	strb	r2, [r3, #28]
 8004c36:	e010      	b.n	8004c5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d103      	bne.n	8004c4a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2204      	movs	r2, #4
 8004c46:	771a      	strb	r2, [r3, #28]
 8004c48:	e007      	b.n	8004c5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d102      	bne.n	8004c5a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2208      	movs	r2, #8
 8004c58:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f7ff ff24 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	771a      	strb	r2, [r3, #28]
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <TIM_Base_SetConfig+0xb8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x30>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x30>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <TIM_Base_SetConfig+0xbc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x30>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <TIM_Base_SetConfig+0xc0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <TIM_Base_SetConfig+0xb8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0x62>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0x62>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <TIM_Base_SetConfig+0xbc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0x62>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <TIM_Base_SetConfig+0xc0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <TIM_Base_SetConfig+0xb8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800

08004d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 0302 	bic.w	r3, r3, #2
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <TIM_OC1_SetConfig+0xc8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10c      	bne.n	8004daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0308 	bic.w	r3, r3, #8
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <TIM_OC1_SetConfig+0xc8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d111      	bne.n	8004dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00

08004e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f023 0210 	bic.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0320 	bic.w	r3, r3, #32
 8004e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <TIM_OC2_SetConfig+0xd0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10d      	bne.n	8004e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <TIM_OC2_SetConfig+0xd0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d113      	bne.n	8004eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00

08004ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <TIM_OC3_SetConfig+0xd0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d10d      	bne.n	8004f4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <TIM_OC3_SetConfig+0xd0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d113      	bne.n	8004f7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40012c00 	.word	0x40012c00

08004fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <TIM_OC4_SetConfig+0x98>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d109      	bne.n	800501c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800500e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	40012c00 	.word	0x40012c00

08005044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f023 0201 	bic.w	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800506e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f023 030a 	bic.w	r3, r3, #10
 8005080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f023 0210 	bic.w	r2, r3, #16
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	031b      	lsls	r3, r3, #12
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	f043 0307 	orr.w	r3, r3, #7
 8005120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005132:	b480      	push	{r7}
 8005134:	b087      	sub	sp, #28
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	021a      	lsls	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	431a      	orrs	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	609a      	str	r2, [r3, #8]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2201      	movs	r2, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e046      	b.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a16      	ldr	r2, [pc, #88]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00e      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d009      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a10      	ldr	r2, [pc, #64]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10c      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4313      	orrs	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	2000000c 	.word	0x2000000c

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	2600      	movs	r6, #0
 8005284:	4d0c      	ldr	r5, [pc, #48]	; (80052b8 <__libc_init_array+0x38>)
 8005286:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	f001 feec 	bl	800706c <_init>
 8005294:	2600      	movs	r6, #0
 8005296:	4d0a      	ldr	r5, [pc, #40]	; (80052c0 <__libc_init_array+0x40>)
 8005298:	4c0a      	ldr	r4, [pc, #40]	; (80052c4 <__libc_init_array+0x44>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	080072b8 	.word	0x080072b8
 80052bc:	080072b8 	.word	0x080072b8
 80052c0:	080072b8 	.word	0x080072b8
 80052c4:	080072bc 	.word	0x080072bc

080052c8 <memset>:
 80052c8:	4603      	mov	r3, r0
 80052ca:	4402      	add	r2, r0
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d100      	bne.n	80052d2 <memset+0xa>
 80052d0:	4770      	bx	lr
 80052d2:	f803 1b01 	strb.w	r1, [r3], #1
 80052d6:	e7f9      	b.n	80052cc <memset+0x4>

080052d8 <tan>:
 80052d8:	b530      	push	{r4, r5, lr}
 80052da:	4a12      	ldr	r2, [pc, #72]	; (8005324 <tan+0x4c>)
 80052dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052e0:	4293      	cmp	r3, r2
 80052e2:	b087      	sub	sp, #28
 80052e4:	dc06      	bgt.n	80052f4 <tan+0x1c>
 80052e6:	2301      	movs	r3, #1
 80052e8:	2200      	movs	r2, #0
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2300      	movs	r3, #0
 80052ee:	f001 fb8b 	bl	8006a08 <__kernel_tan>
 80052f2:	e006      	b.n	8005302 <tan+0x2a>
 80052f4:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <tan+0x50>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	dd05      	ble.n	8005306 <tan+0x2e>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	f7fa ff2b 	bl	8000158 <__aeabi_dsub>
 8005302:	b007      	add	sp, #28
 8005304:	bd30      	pop	{r4, r5, pc}
 8005306:	aa02      	add	r2, sp, #8
 8005308:	f000 fd92 	bl	8005e30 <__ieee754_rem_pio2>
 800530c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005310:	0040      	lsls	r0, r0, #1
 8005312:	f000 0002 	and.w	r0, r0, #2
 8005316:	f1c0 0001 	rsb	r0, r0, #1
 800531a:	9000      	str	r0, [sp, #0]
 800531c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005320:	e7e5      	b.n	80052ee <tan+0x16>
 8005322:	bf00      	nop
 8005324:	3fe921fb 	.word	0x3fe921fb
 8005328:	7fefffff 	.word	0x7fefffff

0800532c <pow>:
 800532c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005330:	4614      	mov	r4, r2
 8005332:	461d      	mov	r5, r3
 8005334:	4680      	mov	r8, r0
 8005336:	4689      	mov	r9, r1
 8005338:	f000 f862 	bl	8005400 <__ieee754_pow>
 800533c:	4622      	mov	r2, r4
 800533e:	4606      	mov	r6, r0
 8005340:	460f      	mov	r7, r1
 8005342:	462b      	mov	r3, r5
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fb fb58 	bl	80009fc <__aeabi_dcmpun>
 800534c:	bbc8      	cbnz	r0, 80053c2 <pow+0x96>
 800534e:	2200      	movs	r2, #0
 8005350:	2300      	movs	r3, #0
 8005352:	4640      	mov	r0, r8
 8005354:	4649      	mov	r1, r9
 8005356:	f7fb fb1f 	bl	8000998 <__aeabi_dcmpeq>
 800535a:	b1b8      	cbz	r0, 800538c <pow+0x60>
 800535c:	2200      	movs	r2, #0
 800535e:	2300      	movs	r3, #0
 8005360:	4620      	mov	r0, r4
 8005362:	4629      	mov	r1, r5
 8005364:	f7fb fb18 	bl	8000998 <__aeabi_dcmpeq>
 8005368:	2800      	cmp	r0, #0
 800536a:	d141      	bne.n	80053f0 <pow+0xc4>
 800536c:	4620      	mov	r0, r4
 800536e:	4629      	mov	r1, r5
 8005370:	f001 fd75 	bl	8006e5e <finite>
 8005374:	b328      	cbz	r0, 80053c2 <pow+0x96>
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f7fb fb15 	bl	80009ac <__aeabi_dcmplt>
 8005382:	b1f0      	cbz	r0, 80053c2 <pow+0x96>
 8005384:	f7ff ff76 	bl	8005274 <__errno>
 8005388:	2322      	movs	r3, #34	; 0x22
 800538a:	e019      	b.n	80053c0 <pow+0x94>
 800538c:	4630      	mov	r0, r6
 800538e:	4639      	mov	r1, r7
 8005390:	f001 fd65 	bl	8006e5e <finite>
 8005394:	b9c8      	cbnz	r0, 80053ca <pow+0x9e>
 8005396:	4640      	mov	r0, r8
 8005398:	4649      	mov	r1, r9
 800539a:	f001 fd60 	bl	8006e5e <finite>
 800539e:	b1a0      	cbz	r0, 80053ca <pow+0x9e>
 80053a0:	4620      	mov	r0, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	f001 fd5b 	bl	8006e5e <finite>
 80053a8:	b178      	cbz	r0, 80053ca <pow+0x9e>
 80053aa:	4632      	mov	r2, r6
 80053ac:	463b      	mov	r3, r7
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fb fb23 	bl	80009fc <__aeabi_dcmpun>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d0e4      	beq.n	8005384 <pow+0x58>
 80053ba:	f7ff ff5b 	bl	8005274 <__errno>
 80053be:	2321      	movs	r3, #33	; 0x21
 80053c0:	6003      	str	r3, [r0, #0]
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ca:	2200      	movs	r2, #0
 80053cc:	2300      	movs	r3, #0
 80053ce:	4630      	mov	r0, r6
 80053d0:	4639      	mov	r1, r7
 80053d2:	f7fb fae1 	bl	8000998 <__aeabi_dcmpeq>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d0f3      	beq.n	80053c2 <pow+0x96>
 80053da:	4640      	mov	r0, r8
 80053dc:	4649      	mov	r1, r9
 80053de:	f001 fd3e 	bl	8006e5e <finite>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d0ed      	beq.n	80053c2 <pow+0x96>
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f001 fd38 	bl	8006e5e <finite>
 80053ee:	e7c8      	b.n	8005382 <pow+0x56>
 80053f0:	2600      	movs	r6, #0
 80053f2:	4f01      	ldr	r7, [pc, #4]	; (80053f8 <pow+0xcc>)
 80053f4:	e7e5      	b.n	80053c2 <pow+0x96>
 80053f6:	bf00      	nop
 80053f8:	3ff00000 	.word	0x3ff00000
 80053fc:	00000000 	.word	0x00000000

08005400 <__ieee754_pow>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	b093      	sub	sp, #76	; 0x4c
 8005406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800540a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800540e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005412:	4689      	mov	r9, r1
 8005414:	ea56 0102 	orrs.w	r1, r6, r2
 8005418:	4680      	mov	r8, r0
 800541a:	d111      	bne.n	8005440 <__ieee754_pow+0x40>
 800541c:	1803      	adds	r3, r0, r0
 800541e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005422:	4152      	adcs	r2, r2
 8005424:	4299      	cmp	r1, r3
 8005426:	4b82      	ldr	r3, [pc, #520]	; (8005630 <__ieee754_pow+0x230>)
 8005428:	4193      	sbcs	r3, r2
 800542a:	f080 84b9 	bcs.w	8005da0 <__ieee754_pow+0x9a0>
 800542e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005432:	4640      	mov	r0, r8
 8005434:	4649      	mov	r1, r9
 8005436:	f7fa fe91 	bl	800015c <__adddf3>
 800543a:	4683      	mov	fp, r0
 800543c:	468c      	mov	ip, r1
 800543e:	e06f      	b.n	8005520 <__ieee754_pow+0x120>
 8005440:	4b7c      	ldr	r3, [pc, #496]	; (8005634 <__ieee754_pow+0x234>)
 8005442:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005446:	429c      	cmp	r4, r3
 8005448:	464d      	mov	r5, r9
 800544a:	4682      	mov	sl, r0
 800544c:	dc06      	bgt.n	800545c <__ieee754_pow+0x5c>
 800544e:	d101      	bne.n	8005454 <__ieee754_pow+0x54>
 8005450:	2800      	cmp	r0, #0
 8005452:	d1ec      	bne.n	800542e <__ieee754_pow+0x2e>
 8005454:	429e      	cmp	r6, r3
 8005456:	dc01      	bgt.n	800545c <__ieee754_pow+0x5c>
 8005458:	d10f      	bne.n	800547a <__ieee754_pow+0x7a>
 800545a:	b172      	cbz	r2, 800547a <__ieee754_pow+0x7a>
 800545c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005460:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005464:	ea55 050a 	orrs.w	r5, r5, sl
 8005468:	d1e1      	bne.n	800542e <__ieee754_pow+0x2e>
 800546a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800546e:	18db      	adds	r3, r3, r3
 8005470:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005474:	4152      	adcs	r2, r2
 8005476:	429d      	cmp	r5, r3
 8005478:	e7d5      	b.n	8005426 <__ieee754_pow+0x26>
 800547a:	2d00      	cmp	r5, #0
 800547c:	da39      	bge.n	80054f2 <__ieee754_pow+0xf2>
 800547e:	4b6e      	ldr	r3, [pc, #440]	; (8005638 <__ieee754_pow+0x238>)
 8005480:	429e      	cmp	r6, r3
 8005482:	dc52      	bgt.n	800552a <__ieee754_pow+0x12a>
 8005484:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005488:	429e      	cmp	r6, r3
 800548a:	f340 849c 	ble.w	8005dc6 <__ieee754_pow+0x9c6>
 800548e:	1533      	asrs	r3, r6, #20
 8005490:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005494:	2b14      	cmp	r3, #20
 8005496:	dd0f      	ble.n	80054b8 <__ieee754_pow+0xb8>
 8005498:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800549c:	fa22 f103 	lsr.w	r1, r2, r3
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	4293      	cmp	r3, r2
 80054a6:	f040 848e 	bne.w	8005dc6 <__ieee754_pow+0x9c6>
 80054aa:	f001 0101 	and.w	r1, r1, #1
 80054ae:	f1c1 0302 	rsb	r3, r1, #2
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	b182      	cbz	r2, 80054d8 <__ieee754_pow+0xd8>
 80054b6:	e05d      	b.n	8005574 <__ieee754_pow+0x174>
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	d159      	bne.n	8005570 <__ieee754_pow+0x170>
 80054bc:	f1c3 0314 	rsb	r3, r3, #20
 80054c0:	fa46 f103 	asr.w	r1, r6, r3
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	42b3      	cmp	r3, r6
 80054ca:	f040 8479 	bne.w	8005dc0 <__ieee754_pow+0x9c0>
 80054ce:	f001 0101 	and.w	r1, r1, #1
 80054d2:	f1c1 0302 	rsb	r3, r1, #2
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	4b58      	ldr	r3, [pc, #352]	; (800563c <__ieee754_pow+0x23c>)
 80054da:	429e      	cmp	r6, r3
 80054dc:	d132      	bne.n	8005544 <__ieee754_pow+0x144>
 80054de:	2f00      	cmp	r7, #0
 80054e0:	f280 846a 	bge.w	8005db8 <__ieee754_pow+0x9b8>
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	2000      	movs	r0, #0
 80054ea:	4954      	ldr	r1, [pc, #336]	; (800563c <__ieee754_pow+0x23c>)
 80054ec:	f7fb f916 	bl	800071c <__aeabi_ddiv>
 80054f0:	e7a3      	b.n	800543a <__ieee754_pow+0x3a>
 80054f2:	2300      	movs	r3, #0
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d13c      	bne.n	8005574 <__ieee754_pow+0x174>
 80054fa:	4b4e      	ldr	r3, [pc, #312]	; (8005634 <__ieee754_pow+0x234>)
 80054fc:	429e      	cmp	r6, r3
 80054fe:	d1eb      	bne.n	80054d8 <__ieee754_pow+0xd8>
 8005500:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005504:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005508:	ea53 030a 	orrs.w	r3, r3, sl
 800550c:	f000 8448 	beq.w	8005da0 <__ieee754_pow+0x9a0>
 8005510:	4b4b      	ldr	r3, [pc, #300]	; (8005640 <__ieee754_pow+0x240>)
 8005512:	429c      	cmp	r4, r3
 8005514:	dd0b      	ble.n	800552e <__ieee754_pow+0x12e>
 8005516:	2f00      	cmp	r7, #0
 8005518:	f2c0 8448 	blt.w	8005dac <__ieee754_pow+0x9ac>
 800551c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005520:	4658      	mov	r0, fp
 8005522:	4661      	mov	r1, ip
 8005524:	b013      	add	sp, #76	; 0x4c
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	2302      	movs	r3, #2
 800552c:	e7e2      	b.n	80054f4 <__ieee754_pow+0xf4>
 800552e:	2f00      	cmp	r7, #0
 8005530:	f04f 0b00 	mov.w	fp, #0
 8005534:	f04f 0c00 	mov.w	ip, #0
 8005538:	daf2      	bge.n	8005520 <__ieee754_pow+0x120>
 800553a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800553e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005542:	e7ed      	b.n	8005520 <__ieee754_pow+0x120>
 8005544:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005548:	d106      	bne.n	8005558 <__ieee754_pow+0x158>
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	4640      	mov	r0, r8
 8005550:	4649      	mov	r1, r9
 8005552:	f7fa ffb9 	bl	80004c8 <__aeabi_dmul>
 8005556:	e770      	b.n	800543a <__ieee754_pow+0x3a>
 8005558:	4b3a      	ldr	r3, [pc, #232]	; (8005644 <__ieee754_pow+0x244>)
 800555a:	429f      	cmp	r7, r3
 800555c:	d10a      	bne.n	8005574 <__ieee754_pow+0x174>
 800555e:	2d00      	cmp	r5, #0
 8005560:	db08      	blt.n	8005574 <__ieee754_pow+0x174>
 8005562:	4640      	mov	r0, r8
 8005564:	4649      	mov	r1, r9
 8005566:	b013      	add	sp, #76	; 0x4c
 8005568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	f000 be58 	b.w	8006220 <__ieee754_sqrt>
 8005570:	2300      	movs	r3, #0
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f001 fc6e 	bl	8006e58 <fabs>
 800557c:	4683      	mov	fp, r0
 800557e:	468c      	mov	ip, r1
 8005580:	f1ba 0f00 	cmp.w	sl, #0
 8005584:	d128      	bne.n	80055d8 <__ieee754_pow+0x1d8>
 8005586:	b124      	cbz	r4, 8005592 <__ieee754_pow+0x192>
 8005588:	4b2c      	ldr	r3, [pc, #176]	; (800563c <__ieee754_pow+0x23c>)
 800558a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800558e:	429a      	cmp	r2, r3
 8005590:	d122      	bne.n	80055d8 <__ieee754_pow+0x1d8>
 8005592:	2f00      	cmp	r7, #0
 8005594:	da07      	bge.n	80055a6 <__ieee754_pow+0x1a6>
 8005596:	465a      	mov	r2, fp
 8005598:	4663      	mov	r3, ip
 800559a:	2000      	movs	r0, #0
 800559c:	4927      	ldr	r1, [pc, #156]	; (800563c <__ieee754_pow+0x23c>)
 800559e:	f7fb f8bd 	bl	800071c <__aeabi_ddiv>
 80055a2:	4683      	mov	fp, r0
 80055a4:	468c      	mov	ip, r1
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	daba      	bge.n	8005520 <__ieee754_pow+0x120>
 80055aa:	9b00      	ldr	r3, [sp, #0]
 80055ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80055b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80055b4:	4323      	orrs	r3, r4
 80055b6:	d108      	bne.n	80055ca <__ieee754_pow+0x1ca>
 80055b8:	465a      	mov	r2, fp
 80055ba:	4663      	mov	r3, ip
 80055bc:	4658      	mov	r0, fp
 80055be:	4661      	mov	r1, ip
 80055c0:	f7fa fdca 	bl	8000158 <__aeabi_dsub>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	e790      	b.n	80054ec <__ieee754_pow+0xec>
 80055ca:	9b00      	ldr	r3, [sp, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d1a7      	bne.n	8005520 <__ieee754_pow+0x120>
 80055d0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80055d4:	469c      	mov	ip, r3
 80055d6:	e7a3      	b.n	8005520 <__ieee754_pow+0x120>
 80055d8:	0feb      	lsrs	r3, r5, #31
 80055da:	3b01      	subs	r3, #1
 80055dc:	930c      	str	r3, [sp, #48]	; 0x30
 80055de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055e0:	9b00      	ldr	r3, [sp, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	d104      	bne.n	80055f0 <__ieee754_pow+0x1f0>
 80055e6:	4642      	mov	r2, r8
 80055e8:	464b      	mov	r3, r9
 80055ea:	4640      	mov	r0, r8
 80055ec:	4649      	mov	r1, r9
 80055ee:	e7e7      	b.n	80055c0 <__ieee754_pow+0x1c0>
 80055f0:	4b15      	ldr	r3, [pc, #84]	; (8005648 <__ieee754_pow+0x248>)
 80055f2:	429e      	cmp	r6, r3
 80055f4:	f340 80f6 	ble.w	80057e4 <__ieee754_pow+0x3e4>
 80055f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80055fc:	429e      	cmp	r6, r3
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <__ieee754_pow+0x240>)
 8005600:	dd09      	ble.n	8005616 <__ieee754_pow+0x216>
 8005602:	429c      	cmp	r4, r3
 8005604:	dc0c      	bgt.n	8005620 <__ieee754_pow+0x220>
 8005606:	2f00      	cmp	r7, #0
 8005608:	da0c      	bge.n	8005624 <__ieee754_pow+0x224>
 800560a:	2000      	movs	r0, #0
 800560c:	b013      	add	sp, #76	; 0x4c
 800560e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005612:	f001 bc1c 	b.w	8006e4e <__math_oflow>
 8005616:	429c      	cmp	r4, r3
 8005618:	dbf5      	blt.n	8005606 <__ieee754_pow+0x206>
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <__ieee754_pow+0x23c>)
 800561c:	429c      	cmp	r4, r3
 800561e:	dd15      	ble.n	800564c <__ieee754_pow+0x24c>
 8005620:	2f00      	cmp	r7, #0
 8005622:	dcf2      	bgt.n	800560a <__ieee754_pow+0x20a>
 8005624:	2000      	movs	r0, #0
 8005626:	b013      	add	sp, #76	; 0x4c
 8005628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	f001 bc0a 	b.w	8006e44 <__math_uflow>
 8005630:	fff00000 	.word	0xfff00000
 8005634:	7ff00000 	.word	0x7ff00000
 8005638:	433fffff 	.word	0x433fffff
 800563c:	3ff00000 	.word	0x3ff00000
 8005640:	3fefffff 	.word	0x3fefffff
 8005644:	3fe00000 	.word	0x3fe00000
 8005648:	41e00000 	.word	0x41e00000
 800564c:	4661      	mov	r1, ip
 800564e:	2200      	movs	r2, #0
 8005650:	4658      	mov	r0, fp
 8005652:	4b5f      	ldr	r3, [pc, #380]	; (80057d0 <__ieee754_pow+0x3d0>)
 8005654:	f7fa fd80 	bl	8000158 <__aeabi_dsub>
 8005658:	a355      	add	r3, pc, #340	; (adr r3, 80057b0 <__ieee754_pow+0x3b0>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	4604      	mov	r4, r0
 8005660:	460d      	mov	r5, r1
 8005662:	f7fa ff31 	bl	80004c8 <__aeabi_dmul>
 8005666:	a354      	add	r3, pc, #336	; (adr r3, 80057b8 <__ieee754_pow+0x3b8>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	4620      	mov	r0, r4
 8005672:	4629      	mov	r1, r5
 8005674:	f7fa ff28 	bl	80004c8 <__aeabi_dmul>
 8005678:	2200      	movs	r2, #0
 800567a:	4682      	mov	sl, r0
 800567c:	468b      	mov	fp, r1
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	4b54      	ldr	r3, [pc, #336]	; (80057d4 <__ieee754_pow+0x3d4>)
 8005684:	f7fa ff20 	bl	80004c8 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	a14c      	add	r1, pc, #304	; (adr r1, 80057c0 <__ieee754_pow+0x3c0>)
 800568e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005692:	f7fa fd61 	bl	8000158 <__aeabi_dsub>
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	f7fa ff15 	bl	80004c8 <__aeabi_dmul>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	2000      	movs	r0, #0
 80056a4:	494c      	ldr	r1, [pc, #304]	; (80057d8 <__ieee754_pow+0x3d8>)
 80056a6:	f7fa fd57 	bl	8000158 <__aeabi_dsub>
 80056aa:	4622      	mov	r2, r4
 80056ac:	462b      	mov	r3, r5
 80056ae:	4680      	mov	r8, r0
 80056b0:	4689      	mov	r9, r1
 80056b2:	4620      	mov	r0, r4
 80056b4:	4629      	mov	r1, r5
 80056b6:	f7fa ff07 	bl	80004c8 <__aeabi_dmul>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4640      	mov	r0, r8
 80056c0:	4649      	mov	r1, r9
 80056c2:	f7fa ff01 	bl	80004c8 <__aeabi_dmul>
 80056c6:	a340      	add	r3, pc, #256	; (adr r3, 80057c8 <__ieee754_pow+0x3c8>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fa fefc 	bl	80004c8 <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4650      	mov	r0, sl
 80056d6:	4659      	mov	r1, fp
 80056d8:	f7fa fd3e 	bl	8000158 <__aeabi_dsub>
 80056dc:	f04f 0a00 	mov.w	sl, #0
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4604      	mov	r4, r0
 80056e6:	460d      	mov	r5, r1
 80056e8:	4630      	mov	r0, r6
 80056ea:	4639      	mov	r1, r7
 80056ec:	f7fa fd36 	bl	800015c <__adddf3>
 80056f0:	4632      	mov	r2, r6
 80056f2:	463b      	mov	r3, r7
 80056f4:	4650      	mov	r0, sl
 80056f6:	468b      	mov	fp, r1
 80056f8:	f7fa fd2e 	bl	8000158 <__aeabi_dsub>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
 8005704:	f7fa fd28 	bl	8000158 <__aeabi_dsub>
 8005708:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800570c:	9b00      	ldr	r3, [sp, #0]
 800570e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005710:	3b01      	subs	r3, #1
 8005712:	4313      	orrs	r3, r2
 8005714:	f04f 0600 	mov.w	r6, #0
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	bf0c      	ite	eq
 800571e:	4b2f      	ldreq	r3, [pc, #188]	; (80057dc <__ieee754_pow+0x3dc>)
 8005720:	4b2b      	ldrne	r3, [pc, #172]	; (80057d0 <__ieee754_pow+0x3d0>)
 8005722:	4604      	mov	r4, r0
 8005724:	460d      	mov	r5, r1
 8005726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800572a:	e9cd 2300 	strd	r2, r3, [sp]
 800572e:	4632      	mov	r2, r6
 8005730:	463b      	mov	r3, r7
 8005732:	f7fa fd11 	bl	8000158 <__aeabi_dsub>
 8005736:	4652      	mov	r2, sl
 8005738:	465b      	mov	r3, fp
 800573a:	f7fa fec5 	bl	80004c8 <__aeabi_dmul>
 800573e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005742:	4680      	mov	r8, r0
 8005744:	4689      	mov	r9, r1
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f7fa febd 	bl	80004c8 <__aeabi_dmul>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4640      	mov	r0, r8
 8005754:	4649      	mov	r1, r9
 8005756:	f7fa fd01 	bl	800015c <__adddf3>
 800575a:	4632      	mov	r2, r6
 800575c:	463b      	mov	r3, r7
 800575e:	4680      	mov	r8, r0
 8005760:	4689      	mov	r9, r1
 8005762:	4650      	mov	r0, sl
 8005764:	4659      	mov	r1, fp
 8005766:	f7fa feaf 	bl	80004c8 <__aeabi_dmul>
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	460b      	mov	r3, r1
 8005770:	4602      	mov	r2, r0
 8005772:	4649      	mov	r1, r9
 8005774:	4640      	mov	r0, r8
 8005776:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800577a:	f7fa fcef 	bl	800015c <__adddf3>
 800577e:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <__ieee754_pow+0x3e0>)
 8005780:	4682      	mov	sl, r0
 8005782:	4299      	cmp	r1, r3
 8005784:	460f      	mov	r7, r1
 8005786:	460e      	mov	r6, r1
 8005788:	f340 82e5 	ble.w	8005d56 <__ieee754_pow+0x956>
 800578c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005790:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005794:	4303      	orrs	r3, r0
 8005796:	f000 81df 	beq.w	8005b58 <__ieee754_pow+0x758>
 800579a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	f7fb f903 	bl	80009ac <__aeabi_dcmplt>
 80057a6:	3800      	subs	r0, #0
 80057a8:	bf18      	it	ne
 80057aa:	2001      	movne	r0, #1
 80057ac:	e72e      	b.n	800560c <__ieee754_pow+0x20c>
 80057ae:	bf00      	nop
 80057b0:	60000000 	.word	0x60000000
 80057b4:	3ff71547 	.word	0x3ff71547
 80057b8:	f85ddf44 	.word	0xf85ddf44
 80057bc:	3e54ae0b 	.word	0x3e54ae0b
 80057c0:	55555555 	.word	0x55555555
 80057c4:	3fd55555 	.word	0x3fd55555
 80057c8:	652b82fe 	.word	0x652b82fe
 80057cc:	3ff71547 	.word	0x3ff71547
 80057d0:	3ff00000 	.word	0x3ff00000
 80057d4:	3fd00000 	.word	0x3fd00000
 80057d8:	3fe00000 	.word	0x3fe00000
 80057dc:	bff00000 	.word	0xbff00000
 80057e0:	408fffff 	.word	0x408fffff
 80057e4:	4bd2      	ldr	r3, [pc, #840]	; (8005b30 <__ieee754_pow+0x730>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	402b      	ands	r3, r5
 80057ea:	b943      	cbnz	r3, 80057fe <__ieee754_pow+0x3fe>
 80057ec:	4658      	mov	r0, fp
 80057ee:	4661      	mov	r1, ip
 80057f0:	4bd0      	ldr	r3, [pc, #832]	; (8005b34 <__ieee754_pow+0x734>)
 80057f2:	f7fa fe69 	bl	80004c8 <__aeabi_dmul>
 80057f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80057fa:	4683      	mov	fp, r0
 80057fc:	460c      	mov	r4, r1
 80057fe:	1523      	asrs	r3, r4, #20
 8005800:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005804:	4413      	add	r3, r2
 8005806:	930b      	str	r3, [sp, #44]	; 0x2c
 8005808:	4bcb      	ldr	r3, [pc, #812]	; (8005b38 <__ieee754_pow+0x738>)
 800580a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800580e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005812:	429c      	cmp	r4, r3
 8005814:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005818:	dd08      	ble.n	800582c <__ieee754_pow+0x42c>
 800581a:	4bc8      	ldr	r3, [pc, #800]	; (8005b3c <__ieee754_pow+0x73c>)
 800581c:	429c      	cmp	r4, r3
 800581e:	f340 8199 	ble.w	8005b54 <__ieee754_pow+0x754>
 8005822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005824:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005828:	3301      	adds	r3, #1
 800582a:	930b      	str	r3, [sp, #44]	; 0x2c
 800582c:	2600      	movs	r6, #0
 800582e:	00f3      	lsls	r3, r6, #3
 8005830:	930d      	str	r3, [sp, #52]	; 0x34
 8005832:	4bc3      	ldr	r3, [pc, #780]	; (8005b40 <__ieee754_pow+0x740>)
 8005834:	4658      	mov	r0, fp
 8005836:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800583a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800583e:	4629      	mov	r1, r5
 8005840:	461a      	mov	r2, r3
 8005842:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005846:	4623      	mov	r3, r4
 8005848:	f7fa fc86 	bl	8000158 <__aeabi_dsub>
 800584c:	46da      	mov	sl, fp
 800584e:	462b      	mov	r3, r5
 8005850:	4652      	mov	r2, sl
 8005852:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800585a:	f7fa fc7f 	bl	800015c <__adddf3>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	2000      	movs	r0, #0
 8005864:	49b7      	ldr	r1, [pc, #732]	; (8005b44 <__ieee754_pow+0x744>)
 8005866:	f7fa ff59 	bl	800071c <__aeabi_ddiv>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005872:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005876:	f7fa fe27 	bl	80004c8 <__aeabi_dmul>
 800587a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800587e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005882:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005886:	2300      	movs	r3, #0
 8005888:	2200      	movs	r2, #0
 800588a:	46ab      	mov	fp, r5
 800588c:	106d      	asrs	r5, r5, #1
 800588e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005892:	9304      	str	r3, [sp, #16]
 8005894:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005898:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800589c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	4614      	mov	r4, r2
 80058a6:	461d      	mov	r5, r3
 80058a8:	f7fa fe0e 	bl	80004c8 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80058b4:	f7fa fc50 	bl	8000158 <__aeabi_dsub>
 80058b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058bc:	4606      	mov	r6, r0
 80058be:	460f      	mov	r7, r1
 80058c0:	4620      	mov	r0, r4
 80058c2:	4629      	mov	r1, r5
 80058c4:	f7fa fc48 	bl	8000158 <__aeabi_dsub>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4650      	mov	r0, sl
 80058ce:	4659      	mov	r1, fp
 80058d0:	f7fa fc42 	bl	8000158 <__aeabi_dsub>
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	f7fa fdf6 	bl	80004c8 <__aeabi_dmul>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4630      	mov	r0, r6
 80058e2:	4639      	mov	r1, r7
 80058e4:	f7fa fc38 	bl	8000158 <__aeabi_dsub>
 80058e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058ec:	f7fa fdec 	bl	80004c8 <__aeabi_dmul>
 80058f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80058f8:	4610      	mov	r0, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	f7fa fde4 	bl	80004c8 <__aeabi_dmul>
 8005900:	a379      	add	r3, pc, #484	; (adr r3, 8005ae8 <__ieee754_pow+0x6e8>)
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	4604      	mov	r4, r0
 8005908:	460d      	mov	r5, r1
 800590a:	f7fa fddd 	bl	80004c8 <__aeabi_dmul>
 800590e:	a378      	add	r3, pc, #480	; (adr r3, 8005af0 <__ieee754_pow+0x6f0>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f7fa fc22 	bl	800015c <__adddf3>
 8005918:	4622      	mov	r2, r4
 800591a:	462b      	mov	r3, r5
 800591c:	f7fa fdd4 	bl	80004c8 <__aeabi_dmul>
 8005920:	a375      	add	r3, pc, #468	; (adr r3, 8005af8 <__ieee754_pow+0x6f8>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	f7fa fc19 	bl	800015c <__adddf3>
 800592a:	4622      	mov	r2, r4
 800592c:	462b      	mov	r3, r5
 800592e:	f7fa fdcb 	bl	80004c8 <__aeabi_dmul>
 8005932:	a373      	add	r3, pc, #460	; (adr r3, 8005b00 <__ieee754_pow+0x700>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fc10 	bl	800015c <__adddf3>
 800593c:	4622      	mov	r2, r4
 800593e:	462b      	mov	r3, r5
 8005940:	f7fa fdc2 	bl	80004c8 <__aeabi_dmul>
 8005944:	a370      	add	r3, pc, #448	; (adr r3, 8005b08 <__ieee754_pow+0x708>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f7fa fc07 	bl	800015c <__adddf3>
 800594e:	4622      	mov	r2, r4
 8005950:	462b      	mov	r3, r5
 8005952:	f7fa fdb9 	bl	80004c8 <__aeabi_dmul>
 8005956:	a36e      	add	r3, pc, #440	; (adr r3, 8005b10 <__ieee754_pow+0x710>)
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f7fa fbfe 	bl	800015c <__adddf3>
 8005960:	4622      	mov	r2, r4
 8005962:	4606      	mov	r6, r0
 8005964:	460f      	mov	r7, r1
 8005966:	462b      	mov	r3, r5
 8005968:	4620      	mov	r0, r4
 800596a:	4629      	mov	r1, r5
 800596c:	f7fa fdac 	bl	80004c8 <__aeabi_dmul>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4630      	mov	r0, r6
 8005976:	4639      	mov	r1, r7
 8005978:	f7fa fda6 	bl	80004c8 <__aeabi_dmul>
 800597c:	4604      	mov	r4, r0
 800597e:	460d      	mov	r5, r1
 8005980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	f7fa fbe8 	bl	800015c <__adddf3>
 800598c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005990:	f7fa fd9a 	bl	80004c8 <__aeabi_dmul>
 8005994:	4622      	mov	r2, r4
 8005996:	462b      	mov	r3, r5
 8005998:	f7fa fbe0 	bl	800015c <__adddf3>
 800599c:	4642      	mov	r2, r8
 800599e:	4606      	mov	r6, r0
 80059a0:	460f      	mov	r7, r1
 80059a2:	464b      	mov	r3, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	4649      	mov	r1, r9
 80059a8:	f7fa fd8e 	bl	80004c8 <__aeabi_dmul>
 80059ac:	2200      	movs	r2, #0
 80059ae:	4b66      	ldr	r3, [pc, #408]	; (8005b48 <__ieee754_pow+0x748>)
 80059b0:	4682      	mov	sl, r0
 80059b2:	468b      	mov	fp, r1
 80059b4:	f7fa fbd2 	bl	800015c <__adddf3>
 80059b8:	4632      	mov	r2, r6
 80059ba:	463b      	mov	r3, r7
 80059bc:	f7fa fbce 	bl	800015c <__adddf3>
 80059c0:	2400      	movs	r4, #0
 80059c2:	460d      	mov	r5, r1
 80059c4:	4622      	mov	r2, r4
 80059c6:	460b      	mov	r3, r1
 80059c8:	4640      	mov	r0, r8
 80059ca:	4649      	mov	r1, r9
 80059cc:	f7fa fd7c 	bl	80004c8 <__aeabi_dmul>
 80059d0:	2200      	movs	r2, #0
 80059d2:	4680      	mov	r8, r0
 80059d4:	4689      	mov	r9, r1
 80059d6:	4620      	mov	r0, r4
 80059d8:	4629      	mov	r1, r5
 80059da:	4b5b      	ldr	r3, [pc, #364]	; (8005b48 <__ieee754_pow+0x748>)
 80059dc:	f7fa fbbc 	bl	8000158 <__aeabi_dsub>
 80059e0:	4652      	mov	r2, sl
 80059e2:	465b      	mov	r3, fp
 80059e4:	f7fa fbb8 	bl	8000158 <__aeabi_dsub>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4630      	mov	r0, r6
 80059ee:	4639      	mov	r1, r7
 80059f0:	f7fa fbb2 	bl	8000158 <__aeabi_dsub>
 80059f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059f8:	f7fa fd66 	bl	80004c8 <__aeabi_dmul>
 80059fc:	4622      	mov	r2, r4
 80059fe:	4606      	mov	r6, r0
 8005a00:	460f      	mov	r7, r1
 8005a02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a06:	462b      	mov	r3, r5
 8005a08:	f7fa fd5e 	bl	80004c8 <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4630      	mov	r0, r6
 8005a12:	4639      	mov	r1, r7
 8005a14:	f7fa fba2 	bl	800015c <__adddf3>
 8005a18:	2400      	movs	r4, #0
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460f      	mov	r7, r1
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4640      	mov	r0, r8
 8005a24:	4649      	mov	r1, r9
 8005a26:	f7fa fb99 	bl	800015c <__adddf3>
 8005a2a:	a33b      	add	r3, pc, #236	; (adr r3, 8005b18 <__ieee754_pow+0x718>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	4620      	mov	r0, r4
 8005a32:	460d      	mov	r5, r1
 8005a34:	f7fa fd48 	bl	80004c8 <__aeabi_dmul>
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a40:	4620      	mov	r0, r4
 8005a42:	4629      	mov	r1, r5
 8005a44:	f7fa fb88 	bl	8000158 <__aeabi_dsub>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	4639      	mov	r1, r7
 8005a50:	f7fa fb82 	bl	8000158 <__aeabi_dsub>
 8005a54:	a332      	add	r3, pc, #200	; (adr r3, 8005b20 <__ieee754_pow+0x720>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f7fa fd35 	bl	80004c8 <__aeabi_dmul>
 8005a5e:	a332      	add	r3, pc, #200	; (adr r3, 8005b28 <__ieee754_pow+0x728>)
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	4606      	mov	r6, r0
 8005a66:	460f      	mov	r7, r1
 8005a68:	4620      	mov	r0, r4
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	f7fa fd2c 	bl	80004c8 <__aeabi_dmul>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa fb70 	bl	800015c <__adddf3>
 8005a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a7e:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <__ieee754_pow+0x74c>)
 8005a80:	f04f 0a00 	mov.w	sl, #0
 8005a84:	4413      	add	r3, r2
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f7fa fb67 	bl	800015c <__adddf3>
 8005a8e:	4680      	mov	r8, r0
 8005a90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a92:	4689      	mov	r9, r1
 8005a94:	f7fa fcae 	bl	80003f4 <__aeabi_i2d>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a9e:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <__ieee754_pow+0x750>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aac:	464b      	mov	r3, r9
 8005aae:	f7fa fb55 	bl	800015c <__adddf3>
 8005ab2:	4632      	mov	r2, r6
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	f7fa fb51 	bl	800015c <__adddf3>
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	f7fa fb4d 	bl	800015c <__adddf3>
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	468b      	mov	fp, r1
 8005aca:	f7fa fb45 	bl	8000158 <__aeabi_dsub>
 8005ace:	4632      	mov	r2, r6
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	f7fa fb41 	bl	8000158 <__aeabi_dsub>
 8005ad6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ada:	f7fa fb3d 	bl	8000158 <__aeabi_dsub>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	e60d      	b.n	8005704 <__ieee754_pow+0x304>
 8005ae8:	4a454eef 	.word	0x4a454eef
 8005aec:	3fca7e28 	.word	0x3fca7e28
 8005af0:	93c9db65 	.word	0x93c9db65
 8005af4:	3fcd864a 	.word	0x3fcd864a
 8005af8:	a91d4101 	.word	0xa91d4101
 8005afc:	3fd17460 	.word	0x3fd17460
 8005b00:	518f264d 	.word	0x518f264d
 8005b04:	3fd55555 	.word	0x3fd55555
 8005b08:	db6fabff 	.word	0xdb6fabff
 8005b0c:	3fdb6db6 	.word	0x3fdb6db6
 8005b10:	33333303 	.word	0x33333303
 8005b14:	3fe33333 	.word	0x3fe33333
 8005b18:	e0000000 	.word	0xe0000000
 8005b1c:	3feec709 	.word	0x3feec709
 8005b20:	dc3a03fd 	.word	0xdc3a03fd
 8005b24:	3feec709 	.word	0x3feec709
 8005b28:	145b01f5 	.word	0x145b01f5
 8005b2c:	be3e2fe0 	.word	0xbe3e2fe0
 8005b30:	7ff00000 	.word	0x7ff00000
 8005b34:	43400000 	.word	0x43400000
 8005b38:	0003988e 	.word	0x0003988e
 8005b3c:	000bb679 	.word	0x000bb679
 8005b40:	080070b0 	.word	0x080070b0
 8005b44:	3ff00000 	.word	0x3ff00000
 8005b48:	40080000 	.word	0x40080000
 8005b4c:	080070d0 	.word	0x080070d0
 8005b50:	080070c0 	.word	0x080070c0
 8005b54:	2601      	movs	r6, #1
 8005b56:	e66a      	b.n	800582e <__ieee754_pow+0x42e>
 8005b58:	a39d      	add	r3, pc, #628	; (adr r3, 8005dd0 <__ieee754_pow+0x9d0>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fa fafb 	bl	800015c <__adddf3>
 8005b66:	4622      	mov	r2, r4
 8005b68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	4650      	mov	r0, sl
 8005b70:	4639      	mov	r1, r7
 8005b72:	f7fa faf1 	bl	8000158 <__aeabi_dsub>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b7e:	f7fa ff33 	bl	80009e8 <__aeabi_dcmpgt>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	f47f ae09 	bne.w	800579a <__ieee754_pow+0x39a>
 8005b88:	4aa3      	ldr	r2, [pc, #652]	; (8005e18 <__ieee754_pow+0xa18>)
 8005b8a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	f340 8101 	ble.w	8005d96 <__ieee754_pow+0x996>
 8005b94:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005b98:	2000      	movs	r0, #0
 8005b9a:	151b      	asrs	r3, r3, #20
 8005b9c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005ba0:	fa4a f303 	asr.w	r3, sl, r3
 8005ba4:	4433      	add	r3, r6
 8005ba6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005baa:	4f9c      	ldr	r7, [pc, #624]	; (8005e1c <__ieee754_pow+0xa1c>)
 8005bac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005bb0:	4117      	asrs	r7, r2
 8005bb2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005bb6:	ea23 0107 	bic.w	r1, r3, r7
 8005bba:	f1c2 0214 	rsb	r2, r2, #20
 8005bbe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	fa4a fa02 	asr.w	sl, sl, r2
 8005bc8:	2e00      	cmp	r6, #0
 8005bca:	4602      	mov	r2, r0
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4620      	mov	r0, r4
 8005bd0:	bfb8      	it	lt
 8005bd2:	f1ca 0a00 	rsblt	sl, sl, #0
 8005bd6:	f7fa fabf 	bl	8000158 <__aeabi_dsub>
 8005bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be2:	2400      	movs	r4, #0
 8005be4:	4642      	mov	r2, r8
 8005be6:	464b      	mov	r3, r9
 8005be8:	f7fa fab8 	bl	800015c <__adddf3>
 8005bec:	a37a      	add	r3, pc, #488	; (adr r3, 8005dd8 <__ieee754_pow+0x9d8>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	460d      	mov	r5, r1
 8005bf6:	f7fa fc67 	bl	80004c8 <__aeabi_dmul>
 8005bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	4620      	mov	r0, r4
 8005c04:	4629      	mov	r1, r5
 8005c06:	f7fa faa7 	bl	8000158 <__aeabi_dsub>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa faa1 	bl	8000158 <__aeabi_dsub>
 8005c16:	a372      	add	r3, pc, #456	; (adr r3, 8005de0 <__ieee754_pow+0x9e0>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f7fa fc54 	bl	80004c8 <__aeabi_dmul>
 8005c20:	a371      	add	r3, pc, #452	; (adr r3, 8005de8 <__ieee754_pow+0x9e8>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	4680      	mov	r8, r0
 8005c28:	4689      	mov	r9, r1
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	f7fa fc4b 	bl	80004c8 <__aeabi_dmul>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4640      	mov	r0, r8
 8005c38:	4649      	mov	r1, r9
 8005c3a:	f7fa fa8f 	bl	800015c <__adddf3>
 8005c3e:	4604      	mov	r4, r0
 8005c40:	460d      	mov	r5, r1
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4630      	mov	r0, r6
 8005c48:	4639      	mov	r1, r7
 8005c4a:	f7fa fa87 	bl	800015c <__adddf3>
 8005c4e:	4632      	mov	r2, r6
 8005c50:	463b      	mov	r3, r7
 8005c52:	4680      	mov	r8, r0
 8005c54:	4689      	mov	r9, r1
 8005c56:	f7fa fa7f 	bl	8000158 <__aeabi_dsub>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fa79 	bl	8000158 <__aeabi_dsub>
 8005c66:	4642      	mov	r2, r8
 8005c68:	4606      	mov	r6, r0
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4649      	mov	r1, r9
 8005c72:	f7fa fc29 	bl	80004c8 <__aeabi_dmul>
 8005c76:	a35e      	add	r3, pc, #376	; (adr r3, 8005df0 <__ieee754_pow+0x9f0>)
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	f7fa fc22 	bl	80004c8 <__aeabi_dmul>
 8005c84:	a35c      	add	r3, pc, #368	; (adr r3, 8005df8 <__ieee754_pow+0x9f8>)
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f7fa fa65 	bl	8000158 <__aeabi_dsub>
 8005c8e:	4622      	mov	r2, r4
 8005c90:	462b      	mov	r3, r5
 8005c92:	f7fa fc19 	bl	80004c8 <__aeabi_dmul>
 8005c96:	a35a      	add	r3, pc, #360	; (adr r3, 8005e00 <__ieee754_pow+0xa00>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fa5e 	bl	800015c <__adddf3>
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	462b      	mov	r3, r5
 8005ca4:	f7fa fc10 	bl	80004c8 <__aeabi_dmul>
 8005ca8:	a357      	add	r3, pc, #348	; (adr r3, 8005e08 <__ieee754_pow+0xa08>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa fa53 	bl	8000158 <__aeabi_dsub>
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	f7fa fc07 	bl	80004c8 <__aeabi_dmul>
 8005cba:	a355      	add	r3, pc, #340	; (adr r3, 8005e10 <__ieee754_pow+0xa10>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fa4c 	bl	800015c <__adddf3>
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	462b      	mov	r3, r5
 8005cc8:	f7fa fbfe 	bl	80004c8 <__aeabi_dmul>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	f7fa fa40 	bl	8000158 <__aeabi_dsub>
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	f7fa fbf0 	bl	80004c8 <__aeabi_dmul>
 8005ce8:	2200      	movs	r2, #0
 8005cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	f7fa fa2f 	bl	8000158 <__aeabi_dsub>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d02:	f7fa fd0b 	bl	800071c <__aeabi_ddiv>
 8005d06:	4632      	mov	r2, r6
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7fa fbd9 	bl	80004c8 <__aeabi_dmul>
 8005d16:	4632      	mov	r2, r6
 8005d18:	463b      	mov	r3, r7
 8005d1a:	f7fa fa1f 	bl	800015c <__adddf3>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fa17 	bl	8000158 <__aeabi_dsub>
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	f7fa fa13 	bl	8000158 <__aeabi_dsub>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	2000      	movs	r0, #0
 8005d38:	4939      	ldr	r1, [pc, #228]	; (8005e20 <__ieee754_pow+0xa20>)
 8005d3a:	f7fa fa0d 	bl	8000158 <__aeabi_dsub>
 8005d3e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005d42:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005d46:	da29      	bge.n	8005d9c <__ieee754_pow+0x99c>
 8005d48:	4652      	mov	r2, sl
 8005d4a:	f001 f911 	bl	8006f70 <scalbn>
 8005d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d52:	f7ff bbfe 	b.w	8005552 <__ieee754_pow+0x152>
 8005d56:	4b33      	ldr	r3, [pc, #204]	; (8005e24 <__ieee754_pow+0xa24>)
 8005d58:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005d5c:	429f      	cmp	r7, r3
 8005d5e:	f77f af13 	ble.w	8005b88 <__ieee754_pow+0x788>
 8005d62:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <__ieee754_pow+0xa28>)
 8005d64:	440b      	add	r3, r1
 8005d66:	4303      	orrs	r3, r0
 8005d68:	d009      	beq.n	8005d7e <__ieee754_pow+0x97e>
 8005d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	f7fa fe1b 	bl	80009ac <__aeabi_dcmplt>
 8005d76:	3800      	subs	r0, #0
 8005d78:	bf18      	it	ne
 8005d7a:	2001      	movne	r0, #1
 8005d7c:	e453      	b.n	8005626 <__ieee754_pow+0x226>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	f7fa f9e9 	bl	8000158 <__aeabi_dsub>
 8005d86:	4642      	mov	r2, r8
 8005d88:	464b      	mov	r3, r9
 8005d8a:	f7fa fe23 	bl	80009d4 <__aeabi_dcmpge>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f43f aefa 	beq.w	8005b88 <__ieee754_pow+0x788>
 8005d94:	e7e9      	b.n	8005d6a <__ieee754_pow+0x96a>
 8005d96:	f04f 0a00 	mov.w	sl, #0
 8005d9a:	e720      	b.n	8005bde <__ieee754_pow+0x7de>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	e7d6      	b.n	8005d4e <__ieee754_pow+0x94e>
 8005da0:	f04f 0b00 	mov.w	fp, #0
 8005da4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005e20 <__ieee754_pow+0xa20>
 8005da8:	f7ff bbba 	b.w	8005520 <__ieee754_pow+0x120>
 8005dac:	f04f 0b00 	mov.w	fp, #0
 8005db0:	f04f 0c00 	mov.w	ip, #0
 8005db4:	f7ff bbb4 	b.w	8005520 <__ieee754_pow+0x120>
 8005db8:	4640      	mov	r0, r8
 8005dba:	4649      	mov	r1, r9
 8005dbc:	f7ff bb3d 	b.w	800543a <__ieee754_pow+0x3a>
 8005dc0:	9200      	str	r2, [sp, #0]
 8005dc2:	f7ff bb89 	b.w	80054d8 <__ieee754_pow+0xd8>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f7ff bb73 	b.w	80054b2 <__ieee754_pow+0xb2>
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	652b82fe 	.word	0x652b82fe
 8005dd4:	3c971547 	.word	0x3c971547
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	3fe62e43 	.word	0x3fe62e43
 8005de0:	fefa39ef 	.word	0xfefa39ef
 8005de4:	3fe62e42 	.word	0x3fe62e42
 8005de8:	0ca86c39 	.word	0x0ca86c39
 8005dec:	be205c61 	.word	0xbe205c61
 8005df0:	72bea4d0 	.word	0x72bea4d0
 8005df4:	3e663769 	.word	0x3e663769
 8005df8:	c5d26bf1 	.word	0xc5d26bf1
 8005dfc:	3ebbbd41 	.word	0x3ebbbd41
 8005e00:	af25de2c 	.word	0xaf25de2c
 8005e04:	3f11566a 	.word	0x3f11566a
 8005e08:	16bebd93 	.word	0x16bebd93
 8005e0c:	3f66c16c 	.word	0x3f66c16c
 8005e10:	5555553e 	.word	0x5555553e
 8005e14:	3fc55555 	.word	0x3fc55555
 8005e18:	3fe00000 	.word	0x3fe00000
 8005e1c:	000fffff 	.word	0x000fffff
 8005e20:	3ff00000 	.word	0x3ff00000
 8005e24:	4090cbff 	.word	0x4090cbff
 8005e28:	3f6f3400 	.word	0x3f6f3400
 8005e2c:	00000000 	.word	0x00000000

08005e30 <__ieee754_rem_pio2>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	4614      	mov	r4, r2
 8005e36:	4ac4      	ldr	r2, [pc, #784]	; (8006148 <__ieee754_rem_pio2+0x318>)
 8005e38:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005e3c:	b08d      	sub	sp, #52	; 0x34
 8005e3e:	4592      	cmp	sl, r2
 8005e40:	9104      	str	r1, [sp, #16]
 8005e42:	dc07      	bgt.n	8005e54 <__ieee754_rem_pio2+0x24>
 8005e44:	2200      	movs	r2, #0
 8005e46:	2300      	movs	r3, #0
 8005e48:	e9c4 0100 	strd	r0, r1, [r4]
 8005e4c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005e50:	2500      	movs	r5, #0
 8005e52:	e024      	b.n	8005e9e <__ieee754_rem_pio2+0x6e>
 8005e54:	4abd      	ldr	r2, [pc, #756]	; (800614c <__ieee754_rem_pio2+0x31c>)
 8005e56:	4592      	cmp	sl, r2
 8005e58:	dc72      	bgt.n	8005f40 <__ieee754_rem_pio2+0x110>
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	4dbc      	ldr	r5, [pc, #752]	; (8006150 <__ieee754_rem_pio2+0x320>)
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	a3ab      	add	r3, pc, #684	; (adr r3, 8006110 <__ieee754_rem_pio2+0x2e0>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	dd36      	ble.n	8005ed6 <__ieee754_rem_pio2+0xa6>
 8005e68:	f7fa f976 	bl	8000158 <__aeabi_dsub>
 8005e6c:	45aa      	cmp	sl, r5
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460f      	mov	r7, r1
 8005e72:	d018      	beq.n	8005ea6 <__ieee754_rem_pio2+0x76>
 8005e74:	a3a8      	add	r3, pc, #672	; (adr r3, 8006118 <__ieee754_rem_pio2+0x2e8>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f7fa f96d 	bl	8000158 <__aeabi_dsub>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4630      	mov	r0, r6
 8005e84:	e9c4 2300 	strd	r2, r3, [r4]
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa f965 	bl	8000158 <__aeabi_dsub>
 8005e8e:	a3a2      	add	r3, pc, #648	; (adr r3, 8006118 <__ieee754_rem_pio2+0x2e8>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa f960 	bl	8000158 <__aeabi_dsub>
 8005e98:	2501      	movs	r5, #1
 8005e9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	b00d      	add	sp, #52	; 0x34
 8005ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea6:	a39e      	add	r3, pc, #632	; (adr r3, 8006120 <__ieee754_rem_pio2+0x2f0>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa f954 	bl	8000158 <__aeabi_dsub>
 8005eb0:	a39d      	add	r3, pc, #628	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2f8>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	f7fa f94d 	bl	8000158 <__aeabi_dsub>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	e9c4 2300 	strd	r2, r3, [r4]
 8005ec8:	4639      	mov	r1, r7
 8005eca:	f7fa f945 	bl	8000158 <__aeabi_dsub>
 8005ece:	a396      	add	r3, pc, #600	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2f8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	e7de      	b.n	8005e94 <__ieee754_rem_pio2+0x64>
 8005ed6:	f7fa f941 	bl	800015c <__adddf3>
 8005eda:	45aa      	cmp	sl, r5
 8005edc:	4606      	mov	r6, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	d016      	beq.n	8005f10 <__ieee754_rem_pio2+0xe0>
 8005ee2:	a38d      	add	r3, pc, #564	; (adr r3, 8006118 <__ieee754_rem_pio2+0x2e8>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa f938 	bl	800015c <__adddf3>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	e9c4 2300 	strd	r2, r3, [r4]
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	f7fa f92e 	bl	8000158 <__aeabi_dsub>
 8005efc:	a386      	add	r3, pc, #536	; (adr r3, 8006118 <__ieee754_rem_pio2+0x2e8>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f92b 	bl	800015c <__adddf3>
 8005f06:	f04f 35ff 	mov.w	r5, #4294967295
 8005f0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f0e:	e7c6      	b.n	8005e9e <__ieee754_rem_pio2+0x6e>
 8005f10:	a383      	add	r3, pc, #524	; (adr r3, 8006120 <__ieee754_rem_pio2+0x2f0>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa f921 	bl	800015c <__adddf3>
 8005f1a:	a383      	add	r3, pc, #524	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2f8>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	4606      	mov	r6, r0
 8005f22:	460f      	mov	r7, r1
 8005f24:	f7fa f91a 	bl	800015c <__adddf3>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	e9c4 2300 	strd	r2, r3, [r4]
 8005f32:	4639      	mov	r1, r7
 8005f34:	f7fa f910 	bl	8000158 <__aeabi_dsub>
 8005f38:	a37b      	add	r3, pc, #492	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2f8>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	e7e0      	b.n	8005f02 <__ieee754_rem_pio2+0xd2>
 8005f40:	4a84      	ldr	r2, [pc, #528]	; (8006154 <__ieee754_rem_pio2+0x324>)
 8005f42:	4592      	cmp	sl, r2
 8005f44:	f300 80d5 	bgt.w	80060f2 <__ieee754_rem_pio2+0x2c2>
 8005f48:	f000 ff86 	bl	8006e58 <fabs>
 8005f4c:	a378      	add	r3, pc, #480	; (adr r3, 8006130 <__ieee754_rem_pio2+0x300>)
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	4606      	mov	r6, r0
 8005f54:	460f      	mov	r7, r1
 8005f56:	f7fa fab7 	bl	80004c8 <__aeabi_dmul>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4b7e      	ldr	r3, [pc, #504]	; (8006158 <__ieee754_rem_pio2+0x328>)
 8005f5e:	f7fa f8fd 	bl	800015c <__adddf3>
 8005f62:	f7fa fd61 	bl	8000a28 <__aeabi_d2iz>
 8005f66:	4605      	mov	r5, r0
 8005f68:	f7fa fa44 	bl	80003f4 <__aeabi_i2d>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f74:	a366      	add	r3, pc, #408	; (adr r3, 8006110 <__ieee754_rem_pio2+0x2e0>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f7fa faa5 	bl	80004c8 <__aeabi_dmul>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa f8e7 	bl	8000158 <__aeabi_dsub>
 8005f8a:	a363      	add	r3, pc, #396	; (adr r3, 8006118 <__ieee754_rem_pio2+0x2e8>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	4680      	mov	r8, r0
 8005f92:	4689      	mov	r9, r1
 8005f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f98:	f7fa fa96 	bl	80004c8 <__aeabi_dmul>
 8005f9c:	2d1f      	cmp	r5, #31
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460f      	mov	r7, r1
 8005fa2:	dc0e      	bgt.n	8005fc2 <__ieee754_rem_pio2+0x192>
 8005fa4:	4b6d      	ldr	r3, [pc, #436]	; (800615c <__ieee754_rem_pio2+0x32c>)
 8005fa6:	1e6a      	subs	r2, r5, #1
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	4553      	cmp	r3, sl
 8005fae:	d008      	beq.n	8005fc2 <__ieee754_rem_pio2+0x192>
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	f7fa f8ce 	bl	8000158 <__aeabi_dsub>
 8005fbc:	e9c4 0100 	strd	r0, r1, [r4]
 8005fc0:	e013      	b.n	8005fea <__ieee754_rem_pio2+0x1ba>
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa f8c5 	bl	8000158 <__aeabi_dsub>
 8005fce:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005fd2:	9305      	str	r3, [sp, #20]
 8005fd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fd8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005fdc:	f1ba 0f10 	cmp.w	sl, #16
 8005fe0:	dc1f      	bgt.n	8006022 <__ieee754_rem_pio2+0x1f2>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	e9c4 2300 	strd	r2, r3, [r4]
 8005fea:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005fee:	4640      	mov	r0, r8
 8005ff0:	4653      	mov	r3, sl
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa f8b0 	bl	8000158 <__aeabi_dsub>
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	f7fa f8ac 	bl	8000158 <__aeabi_dsub>
 8006000:	460b      	mov	r3, r1
 8006002:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006006:	9904      	ldr	r1, [sp, #16]
 8006008:	4602      	mov	r2, r0
 800600a:	2900      	cmp	r1, #0
 800600c:	f6bf af47 	bge.w	8005e9e <__ieee754_rem_pio2+0x6e>
 8006010:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8006014:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006018:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800601c:	60e3      	str	r3, [r4, #12]
 800601e:	426d      	negs	r5, r5
 8006020:	e73d      	b.n	8005e9e <__ieee754_rem_pio2+0x6e>
 8006022:	a33f      	add	r3, pc, #252	; (adr r3, 8006120 <__ieee754_rem_pio2+0x2f0>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602c:	f7fa fa4c 	bl	80004c8 <__aeabi_dmul>
 8006030:	4606      	mov	r6, r0
 8006032:	460f      	mov	r7, r1
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4640      	mov	r0, r8
 800603a:	4649      	mov	r1, r9
 800603c:	f7fa f88c 	bl	8000158 <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4682      	mov	sl, r0
 8006046:	468b      	mov	fp, r1
 8006048:	4640      	mov	r0, r8
 800604a:	4649      	mov	r1, r9
 800604c:	f7fa f884 	bl	8000158 <__aeabi_dsub>
 8006050:	4632      	mov	r2, r6
 8006052:	463b      	mov	r3, r7
 8006054:	f7fa f880 	bl	8000158 <__aeabi_dsub>
 8006058:	a333      	add	r3, pc, #204	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2f8>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006066:	f7fa fa2f 	bl	80004c8 <__aeabi_dmul>
 800606a:	4632      	mov	r2, r6
 800606c:	463b      	mov	r3, r7
 800606e:	f7fa f873 	bl	8000158 <__aeabi_dsub>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4606      	mov	r6, r0
 8006078:	460f      	mov	r7, r1
 800607a:	4650      	mov	r0, sl
 800607c:	4659      	mov	r1, fp
 800607e:	f7fa f86b 	bl	8000158 <__aeabi_dsub>
 8006082:	9a05      	ldr	r2, [sp, #20]
 8006084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b31      	cmp	r3, #49	; 0x31
 800608c:	dc06      	bgt.n	800609c <__ieee754_rem_pio2+0x26c>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	46d0      	mov	r8, sl
 8006094:	46d9      	mov	r9, fp
 8006096:	e9c4 2300 	strd	r2, r3, [r4]
 800609a:	e7a6      	b.n	8005fea <__ieee754_rem_pio2+0x1ba>
 800609c:	a326      	add	r3, pc, #152	; (adr r3, 8006138 <__ieee754_rem_pio2+0x308>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a6:	f7fa fa0f 	bl	80004c8 <__aeabi_dmul>
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4650      	mov	r0, sl
 80060b4:	4659      	mov	r1, fp
 80060b6:	f7fa f84f 	bl	8000158 <__aeabi_dsub>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4680      	mov	r8, r0
 80060c0:	4689      	mov	r9, r1
 80060c2:	4650      	mov	r0, sl
 80060c4:	4659      	mov	r1, fp
 80060c6:	f7fa f847 	bl	8000158 <__aeabi_dsub>
 80060ca:	4632      	mov	r2, r6
 80060cc:	463b      	mov	r3, r7
 80060ce:	f7fa f843 	bl	8000158 <__aeabi_dsub>
 80060d2:	a31b      	add	r3, pc, #108	; (adr r3, 8006140 <__ieee754_rem_pio2+0x310>)
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	4606      	mov	r6, r0
 80060da:	460f      	mov	r7, r1
 80060dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e0:	f7fa f9f2 	bl	80004c8 <__aeabi_dmul>
 80060e4:	4632      	mov	r2, r6
 80060e6:	463b      	mov	r3, r7
 80060e8:	f7fa f836 	bl	8000158 <__aeabi_dsub>
 80060ec:	4606      	mov	r6, r0
 80060ee:	460f      	mov	r7, r1
 80060f0:	e75e      	b.n	8005fb0 <__ieee754_rem_pio2+0x180>
 80060f2:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <__ieee754_rem_pio2+0x330>)
 80060f4:	4592      	cmp	sl, r2
 80060f6:	dd35      	ble.n	8006164 <__ieee754_rem_pio2+0x334>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	f7fa f82c 	bl	8000158 <__aeabi_dsub>
 8006100:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006104:	e9c4 0100 	strd	r0, r1, [r4]
 8006108:	e6a2      	b.n	8005e50 <__ieee754_rem_pio2+0x20>
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w
 8006110:	54400000 	.word	0x54400000
 8006114:	3ff921fb 	.word	0x3ff921fb
 8006118:	1a626331 	.word	0x1a626331
 800611c:	3dd0b461 	.word	0x3dd0b461
 8006120:	1a600000 	.word	0x1a600000
 8006124:	3dd0b461 	.word	0x3dd0b461
 8006128:	2e037073 	.word	0x2e037073
 800612c:	3ba3198a 	.word	0x3ba3198a
 8006130:	6dc9c883 	.word	0x6dc9c883
 8006134:	3fe45f30 	.word	0x3fe45f30
 8006138:	2e000000 	.word	0x2e000000
 800613c:	3ba3198a 	.word	0x3ba3198a
 8006140:	252049c1 	.word	0x252049c1
 8006144:	397b839a 	.word	0x397b839a
 8006148:	3fe921fb 	.word	0x3fe921fb
 800614c:	4002d97b 	.word	0x4002d97b
 8006150:	3ff921fb 	.word	0x3ff921fb
 8006154:	413921fb 	.word	0x413921fb
 8006158:	3fe00000 	.word	0x3fe00000
 800615c:	080070e0 	.word	0x080070e0
 8006160:	7fefffff 	.word	0x7fefffff
 8006164:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006168:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800616c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006170:	460f      	mov	r7, r1
 8006172:	4606      	mov	r6, r0
 8006174:	f7fa fc58 	bl	8000a28 <__aeabi_d2iz>
 8006178:	f7fa f93c 	bl	80003f4 <__aeabi_i2d>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006188:	f7f9 ffe6 	bl	8000158 <__aeabi_dsub>
 800618c:	2200      	movs	r2, #0
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <__ieee754_rem_pio2+0x3e8>)
 8006190:	f7fa f99a 	bl	80004c8 <__aeabi_dmul>
 8006194:	460f      	mov	r7, r1
 8006196:	4606      	mov	r6, r0
 8006198:	f7fa fc46 	bl	8000a28 <__aeabi_d2iz>
 800619c:	f7fa f92a 	bl	80003f4 <__aeabi_i2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4630      	mov	r0, r6
 80061a6:	4639      	mov	r1, r7
 80061a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061ac:	f7f9 ffd4 	bl	8000158 <__aeabi_dsub>
 80061b0:	2200      	movs	r2, #0
 80061b2:	4b19      	ldr	r3, [pc, #100]	; (8006218 <__ieee754_rem_pio2+0x3e8>)
 80061b4:	f7fa f988 	bl	80004c8 <__aeabi_dmul>
 80061b8:	f04f 0803 	mov.w	r8, #3
 80061bc:	2600      	movs	r6, #0
 80061be:	2700      	movs	r7, #0
 80061c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061c4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80061c8:	4632      	mov	r2, r6
 80061ca:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80061ce:	463b      	mov	r3, r7
 80061d0:	46c2      	mov	sl, r8
 80061d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80061d6:	f7fa fbdf 	bl	8000998 <__aeabi_dcmpeq>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d1f4      	bne.n	80061c8 <__ieee754_rem_pio2+0x398>
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <__ieee754_rem_pio2+0x3ec>)
 80061e0:	462a      	mov	r2, r5
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	2302      	movs	r3, #2
 80061e6:	4621      	mov	r1, r4
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	a806      	add	r0, sp, #24
 80061ec:	4653      	mov	r3, sl
 80061ee:	f000 f8c7 	bl	8006380 <__kernel_rem_pio2>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	4605      	mov	r5, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f6bf ae51 	bge.w	8005e9e <__ieee754_rem_pio2+0x6e>
 80061fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006204:	e9c4 2300 	strd	r2, r3, [r4]
 8006208:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800620c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006210:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006214:	e703      	b.n	800601e <__ieee754_rem_pio2+0x1ee>
 8006216:	bf00      	nop
 8006218:	41700000 	.word	0x41700000
 800621c:	08007160 	.word	0x08007160

08006220 <__ieee754_sqrt>:
 8006220:	f8df c158 	ldr.w	ip, [pc, #344]	; 800637c <__ieee754_sqrt+0x15c>
 8006224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	ea3c 0c01 	bics.w	ip, ip, r1
 800622c:	4606      	mov	r6, r0
 800622e:	460d      	mov	r5, r1
 8006230:	460c      	mov	r4, r1
 8006232:	460a      	mov	r2, r1
 8006234:	4607      	mov	r7, r0
 8006236:	4603      	mov	r3, r0
 8006238:	d10f      	bne.n	800625a <__ieee754_sqrt+0x3a>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	f7fa f943 	bl	80004c8 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4630      	mov	r0, r6
 8006248:	4629      	mov	r1, r5
 800624a:	f7f9 ff87 	bl	800015c <__adddf3>
 800624e:	4606      	mov	r6, r0
 8006250:	460d      	mov	r5, r1
 8006252:	4630      	mov	r0, r6
 8006254:	4629      	mov	r1, r5
 8006256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800625a:	2900      	cmp	r1, #0
 800625c:	dc0e      	bgt.n	800627c <__ieee754_sqrt+0x5c>
 800625e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006262:	ea5c 0707 	orrs.w	r7, ip, r7
 8006266:	d0f4      	beq.n	8006252 <__ieee754_sqrt+0x32>
 8006268:	b141      	cbz	r1, 800627c <__ieee754_sqrt+0x5c>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	f7f9 ff73 	bl	8000158 <__aeabi_dsub>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	f7fa fa51 	bl	800071c <__aeabi_ddiv>
 800627a:	e7e8      	b.n	800624e <__ieee754_sqrt+0x2e>
 800627c:	1521      	asrs	r1, r4, #20
 800627e:	d075      	beq.n	800636c <__ieee754_sqrt+0x14c>
 8006280:	07cc      	lsls	r4, r1, #31
 8006282:	f04f 0400 	mov.w	r4, #0
 8006286:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800628a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800628e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006292:	bf5e      	ittt	pl
 8006294:	0fd9      	lsrpl	r1, r3, #31
 8006296:	005b      	lslpl	r3, r3, #1
 8006298:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800629c:	0fd9      	lsrs	r1, r3, #31
 800629e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80062a2:	2516      	movs	r5, #22
 80062a4:	4620      	mov	r0, r4
 80062a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062aa:	107f      	asrs	r7, r7, #1
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	1846      	adds	r6, r0, r1
 80062b0:	4296      	cmp	r6, r2
 80062b2:	bfde      	ittt	le
 80062b4:	1b92      	suble	r2, r2, r6
 80062b6:	1870      	addle	r0, r6, r1
 80062b8:	1864      	addle	r4, r4, r1
 80062ba:	0052      	lsls	r2, r2, #1
 80062bc:	3d01      	subs	r5, #1
 80062be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80062c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80062c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062ca:	d1f0      	bne.n	80062ae <__ieee754_sqrt+0x8e>
 80062cc:	4629      	mov	r1, r5
 80062ce:	f04f 0e20 	mov.w	lr, #32
 80062d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80062d6:	4282      	cmp	r2, r0
 80062d8:	eb06 0c05 	add.w	ip, r6, r5
 80062dc:	dc02      	bgt.n	80062e4 <__ieee754_sqrt+0xc4>
 80062de:	d113      	bne.n	8006308 <__ieee754_sqrt+0xe8>
 80062e0:	459c      	cmp	ip, r3
 80062e2:	d811      	bhi.n	8006308 <__ieee754_sqrt+0xe8>
 80062e4:	f1bc 0f00 	cmp.w	ip, #0
 80062e8:	eb0c 0506 	add.w	r5, ip, r6
 80062ec:	da43      	bge.n	8006376 <__ieee754_sqrt+0x156>
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	db41      	blt.n	8006376 <__ieee754_sqrt+0x156>
 80062f2:	f100 0801 	add.w	r8, r0, #1
 80062f6:	1a12      	subs	r2, r2, r0
 80062f8:	4640      	mov	r0, r8
 80062fa:	459c      	cmp	ip, r3
 80062fc:	bf88      	it	hi
 80062fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006302:	eba3 030c 	sub.w	r3, r3, ip
 8006306:	4431      	add	r1, r6
 8006308:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800630c:	f1be 0e01 	subs.w	lr, lr, #1
 8006310:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006314:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006318:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800631c:	d1db      	bne.n	80062d6 <__ieee754_sqrt+0xb6>
 800631e:	4313      	orrs	r3, r2
 8006320:	d006      	beq.n	8006330 <__ieee754_sqrt+0x110>
 8006322:	1c48      	adds	r0, r1, #1
 8006324:	bf0b      	itete	eq
 8006326:	4671      	moveq	r1, lr
 8006328:	3101      	addne	r1, #1
 800632a:	3401      	addeq	r4, #1
 800632c:	f021 0101 	bicne.w	r1, r1, #1
 8006330:	1063      	asrs	r3, r4, #1
 8006332:	0849      	lsrs	r1, r1, #1
 8006334:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006338:	07e2      	lsls	r2, r4, #31
 800633a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800633e:	bf48      	it	mi
 8006340:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006344:	460e      	mov	r6, r1
 8006346:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800634a:	e782      	b.n	8006252 <__ieee754_sqrt+0x32>
 800634c:	0ada      	lsrs	r2, r3, #11
 800634e:	3815      	subs	r0, #21
 8006350:	055b      	lsls	r3, r3, #21
 8006352:	2a00      	cmp	r2, #0
 8006354:	d0fa      	beq.n	800634c <__ieee754_sqrt+0x12c>
 8006356:	02d5      	lsls	r5, r2, #11
 8006358:	d50a      	bpl.n	8006370 <__ieee754_sqrt+0x150>
 800635a:	f1c1 0420 	rsb	r4, r1, #32
 800635e:	fa23 f404 	lsr.w	r4, r3, r4
 8006362:	1e4d      	subs	r5, r1, #1
 8006364:	408b      	lsls	r3, r1
 8006366:	4322      	orrs	r2, r4
 8006368:	1b41      	subs	r1, r0, r5
 800636a:	e789      	b.n	8006280 <__ieee754_sqrt+0x60>
 800636c:	4608      	mov	r0, r1
 800636e:	e7f0      	b.n	8006352 <__ieee754_sqrt+0x132>
 8006370:	0052      	lsls	r2, r2, #1
 8006372:	3101      	adds	r1, #1
 8006374:	e7ef      	b.n	8006356 <__ieee754_sqrt+0x136>
 8006376:	4680      	mov	r8, r0
 8006378:	e7bd      	b.n	80062f6 <__ieee754_sqrt+0xd6>
 800637a:	bf00      	nop
 800637c:	7ff00000 	.word	0x7ff00000

08006380 <__kernel_rem_pio2>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006388:	9308      	str	r3, [sp, #32]
 800638a:	9106      	str	r1, [sp, #24]
 800638c:	4bb6      	ldr	r3, [pc, #728]	; (8006668 <__kernel_rem_pio2+0x2e8>)
 800638e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006390:	f112 0f14 	cmn.w	r2, #20
 8006394:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006398:	bfa8      	it	ge
 800639a:	1ed4      	subge	r4, r2, #3
 800639c:	9302      	str	r3, [sp, #8]
 800639e:	9b08      	ldr	r3, [sp, #32]
 80063a0:	bfb8      	it	lt
 80063a2:	2400      	movlt	r4, #0
 80063a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80063a8:	9307      	str	r3, [sp, #28]
 80063aa:	bfa4      	itt	ge
 80063ac:	2318      	movge	r3, #24
 80063ae:	fb94 f4f3 	sdivge	r4, r4, r3
 80063b2:	f06f 0317 	mvn.w	r3, #23
 80063b6:	fb04 3303 	mla	r3, r4, r3, r3
 80063ba:	eb03 0b02 	add.w	fp, r3, r2
 80063be:	9a07      	ldr	r2, [sp, #28]
 80063c0:	9b02      	ldr	r3, [sp, #8]
 80063c2:	1aa7      	subs	r7, r4, r2
 80063c4:	eb03 0802 	add.w	r8, r3, r2
 80063c8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80063ca:	2500      	movs	r5, #0
 80063cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	9009      	str	r0, [sp, #36]	; 0x24
 80063d6:	ae20      	add	r6, sp, #128	; 0x80
 80063d8:	4545      	cmp	r5, r8
 80063da:	dd14      	ble.n	8006406 <__kernel_rem_pio2+0x86>
 80063dc:	f04f 0800 	mov.w	r8, #0
 80063e0:	9a08      	ldr	r2, [sp, #32]
 80063e2:	ab20      	add	r3, sp, #128	; 0x80
 80063e4:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80063e8:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80063ec:	9b02      	ldr	r3, [sp, #8]
 80063ee:	4598      	cmp	r8, r3
 80063f0:	dc35      	bgt.n	800645e <__kernel_rem_pio2+0xde>
 80063f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f4:	2200      	movs	r2, #0
 80063f6:	f1a3 0908 	sub.w	r9, r3, #8
 80063fa:	2300      	movs	r3, #0
 80063fc:	462f      	mov	r7, r5
 80063fe:	2600      	movs	r6, #0
 8006400:	e9cd 2300 	strd	r2, r3, [sp]
 8006404:	e01f      	b.n	8006446 <__kernel_rem_pio2+0xc6>
 8006406:	42ef      	cmn	r7, r5
 8006408:	d40b      	bmi.n	8006422 <__kernel_rem_pio2+0xa2>
 800640a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800640e:	e9cd 2300 	strd	r2, r3, [sp]
 8006412:	f7f9 ffef 	bl	80003f4 <__aeabi_i2d>
 8006416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800641a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800641e:	3501      	adds	r5, #1
 8006420:	e7da      	b.n	80063d8 <__kernel_rem_pio2+0x58>
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	e7f8      	b.n	800641a <__kernel_rem_pio2+0x9a>
 8006428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006430:	f7fa f84a 	bl	80004c8 <__aeabi_dmul>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800643c:	f7f9 fe8e 	bl	800015c <__adddf3>
 8006440:	e9cd 0100 	strd	r0, r1, [sp]
 8006444:	3601      	adds	r6, #1
 8006446:	9b07      	ldr	r3, [sp, #28]
 8006448:	3f08      	subs	r7, #8
 800644a:	429e      	cmp	r6, r3
 800644c:	ddec      	ble.n	8006428 <__kernel_rem_pio2+0xa8>
 800644e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006452:	f108 0801 	add.w	r8, r8, #1
 8006456:	e8ea 2302 	strd	r2, r3, [sl], #8
 800645a:	3508      	adds	r5, #8
 800645c:	e7c6      	b.n	80063ec <__kernel_rem_pio2+0x6c>
 800645e:	9b02      	ldr	r3, [sp, #8]
 8006460:	aa0c      	add	r2, sp, #48	; 0x30
 8006462:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006466:	930b      	str	r3, [sp, #44]	; 0x2c
 8006468:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800646a:	9e02      	ldr	r6, [sp, #8]
 800646c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006470:	930a      	str	r3, [sp, #40]	; 0x28
 8006472:	ab98      	add	r3, sp, #608	; 0x260
 8006474:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006478:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800647c:	ab70      	add	r3, sp, #448	; 0x1c0
 800647e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8006482:	46d0      	mov	r8, sl
 8006484:	46b1      	mov	r9, r6
 8006486:	af0c      	add	r7, sp, #48	; 0x30
 8006488:	9700      	str	r7, [sp, #0]
 800648a:	f1b9 0f00 	cmp.w	r9, #0
 800648e:	f1a8 0808 	sub.w	r8, r8, #8
 8006492:	dc71      	bgt.n	8006578 <__kernel_rem_pio2+0x1f8>
 8006494:	465a      	mov	r2, fp
 8006496:	4620      	mov	r0, r4
 8006498:	4629      	mov	r1, r5
 800649a:	f000 fd69 	bl	8006f70 <scalbn>
 800649e:	2200      	movs	r2, #0
 80064a0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80064a4:	4604      	mov	r4, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	f7fa f80e 	bl	80004c8 <__aeabi_dmul>
 80064ac:	f000 fce0 	bl	8006e70 <floor>
 80064b0:	2200      	movs	r2, #0
 80064b2:	4b6e      	ldr	r3, [pc, #440]	; (800666c <__kernel_rem_pio2+0x2ec>)
 80064b4:	f7fa f808 	bl	80004c8 <__aeabi_dmul>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	f7f9 fe4a 	bl	8000158 <__aeabi_dsub>
 80064c4:	460d      	mov	r5, r1
 80064c6:	4604      	mov	r4, r0
 80064c8:	f7fa faae 	bl	8000a28 <__aeabi_d2iz>
 80064cc:	9004      	str	r0, [sp, #16]
 80064ce:	f7f9 ff91 	bl	80003f4 <__aeabi_i2d>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	f7f9 fe3d 	bl	8000158 <__aeabi_dsub>
 80064de:	f1bb 0f00 	cmp.w	fp, #0
 80064e2:	4680      	mov	r8, r0
 80064e4:	4689      	mov	r9, r1
 80064e6:	dd70      	ble.n	80065ca <__kernel_rem_pio2+0x24a>
 80064e8:	1e72      	subs	r2, r6, #1
 80064ea:	ab0c      	add	r3, sp, #48	; 0x30
 80064ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80064f0:	9c04      	ldr	r4, [sp, #16]
 80064f2:	f1cb 0118 	rsb	r1, fp, #24
 80064f6:	fa40 f301 	asr.w	r3, r0, r1
 80064fa:	441c      	add	r4, r3
 80064fc:	408b      	lsls	r3, r1
 80064fe:	1ac0      	subs	r0, r0, r3
 8006500:	ab0c      	add	r3, sp, #48	; 0x30
 8006502:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006506:	f1cb 0317 	rsb	r3, fp, #23
 800650a:	9404      	str	r4, [sp, #16]
 800650c:	fa40 f303 	asr.w	r3, r0, r3
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	9b00      	ldr	r3, [sp, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	dd66      	ble.n	80065e6 <__kernel_rem_pio2+0x266>
 8006518:	2200      	movs	r2, #0
 800651a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800651e:	4614      	mov	r4, r2
 8006520:	9b04      	ldr	r3, [sp, #16]
 8006522:	3301      	adds	r3, #1
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	4296      	cmp	r6, r2
 8006528:	f300 80ac 	bgt.w	8006684 <__kernel_rem_pio2+0x304>
 800652c:	f1bb 0f00 	cmp.w	fp, #0
 8006530:	dd07      	ble.n	8006542 <__kernel_rem_pio2+0x1c2>
 8006532:	f1bb 0f01 	cmp.w	fp, #1
 8006536:	f000 80b4 	beq.w	80066a2 <__kernel_rem_pio2+0x322>
 800653a:	f1bb 0f02 	cmp.w	fp, #2
 800653e:	f000 80ba 	beq.w	80066b6 <__kernel_rem_pio2+0x336>
 8006542:	9b00      	ldr	r3, [sp, #0]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d14e      	bne.n	80065e6 <__kernel_rem_pio2+0x266>
 8006548:	4642      	mov	r2, r8
 800654a:	464b      	mov	r3, r9
 800654c:	2000      	movs	r0, #0
 800654e:	4948      	ldr	r1, [pc, #288]	; (8006670 <__kernel_rem_pio2+0x2f0>)
 8006550:	f7f9 fe02 	bl	8000158 <__aeabi_dsub>
 8006554:	4680      	mov	r8, r0
 8006556:	4689      	mov	r9, r1
 8006558:	2c00      	cmp	r4, #0
 800655a:	d044      	beq.n	80065e6 <__kernel_rem_pio2+0x266>
 800655c:	465a      	mov	r2, fp
 800655e:	2000      	movs	r0, #0
 8006560:	4943      	ldr	r1, [pc, #268]	; (8006670 <__kernel_rem_pio2+0x2f0>)
 8006562:	f000 fd05 	bl	8006f70 <scalbn>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4640      	mov	r0, r8
 800656c:	4649      	mov	r1, r9
 800656e:	f7f9 fdf3 	bl	8000158 <__aeabi_dsub>
 8006572:	4680      	mov	r8, r0
 8006574:	4689      	mov	r9, r1
 8006576:	e036      	b.n	80065e6 <__kernel_rem_pio2+0x266>
 8006578:	2200      	movs	r2, #0
 800657a:	4b3e      	ldr	r3, [pc, #248]	; (8006674 <__kernel_rem_pio2+0x2f4>)
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7f9 ffa2 	bl	80004c8 <__aeabi_dmul>
 8006584:	f7fa fa50 	bl	8000a28 <__aeabi_d2iz>
 8006588:	f7f9 ff34 	bl	80003f4 <__aeabi_i2d>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006594:	2200      	movs	r2, #0
 8006596:	4b38      	ldr	r3, [pc, #224]	; (8006678 <__kernel_rem_pio2+0x2f8>)
 8006598:	f7f9 ff96 	bl	80004c8 <__aeabi_dmul>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4620      	mov	r0, r4
 80065a2:	4629      	mov	r1, r5
 80065a4:	f7f9 fdd8 	bl	8000158 <__aeabi_dsub>
 80065a8:	f7fa fa3e 	bl	8000a28 <__aeabi_d2iz>
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80065b2:	f843 0b04 	str.w	r0, [r3], #4
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80065c0:	f7f9 fdcc 	bl	800015c <__adddf3>
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	e75f      	b.n	800648a <__kernel_rem_pio2+0x10a>
 80065ca:	d105      	bne.n	80065d8 <__kernel_rem_pio2+0x258>
 80065cc:	1e73      	subs	r3, r6, #1
 80065ce:	aa0c      	add	r2, sp, #48	; 0x30
 80065d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80065d4:	15c3      	asrs	r3, r0, #23
 80065d6:	e79b      	b.n	8006510 <__kernel_rem_pio2+0x190>
 80065d8:	2200      	movs	r2, #0
 80065da:	4b28      	ldr	r3, [pc, #160]	; (800667c <__kernel_rem_pio2+0x2fc>)
 80065dc:	f7fa f9fa 	bl	80009d4 <__aeabi_dcmpge>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d13e      	bne.n	8006662 <__kernel_rem_pio2+0x2e2>
 80065e4:	9000      	str	r0, [sp, #0]
 80065e6:	2200      	movs	r2, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7fa f9d3 	bl	8000998 <__aeabi_dcmpeq>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	f000 80b1 	beq.w	800675a <__kernel_rem_pio2+0x3da>
 80065f8:	1e74      	subs	r4, r6, #1
 80065fa:	4623      	mov	r3, r4
 80065fc:	2200      	movs	r2, #0
 80065fe:	9902      	ldr	r1, [sp, #8]
 8006600:	428b      	cmp	r3, r1
 8006602:	da5f      	bge.n	80066c4 <__kernel_rem_pio2+0x344>
 8006604:	2a00      	cmp	r2, #0
 8006606:	d074      	beq.n	80066f2 <__kernel_rem_pio2+0x372>
 8006608:	ab0c      	add	r3, sp, #48	; 0x30
 800660a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800660e:	f1ab 0b18 	sub.w	fp, fp, #24
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 809f 	beq.w	8006756 <__kernel_rem_pio2+0x3d6>
 8006618:	465a      	mov	r2, fp
 800661a:	2000      	movs	r0, #0
 800661c:	4914      	ldr	r1, [pc, #80]	; (8006670 <__kernel_rem_pio2+0x2f0>)
 800661e:	f000 fca7 	bl	8006f70 <scalbn>
 8006622:	46a2      	mov	sl, r4
 8006624:	4606      	mov	r6, r0
 8006626:	460f      	mov	r7, r1
 8006628:	f04f 0800 	mov.w	r8, #0
 800662c:	ab70      	add	r3, sp, #448	; 0x1c0
 800662e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006674 <__kernel_rem_pio2+0x2f4>
 8006632:	00e5      	lsls	r5, r4, #3
 8006634:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006638:	f1ba 0f00 	cmp.w	sl, #0
 800663c:	f280 80c3 	bge.w	80067c6 <__kernel_rem_pio2+0x446>
 8006640:	4626      	mov	r6, r4
 8006642:	2e00      	cmp	r6, #0
 8006644:	f2c0 80f5 	blt.w	8006832 <__kernel_rem_pio2+0x4b2>
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <__kernel_rem_pio2+0x300>)
 800664a:	f04f 0a00 	mov.w	sl, #0
 800664e:	9307      	str	r3, [sp, #28]
 8006650:	ab70      	add	r3, sp, #448	; 0x1c0
 8006652:	f04f 0b00 	mov.w	fp, #0
 8006656:	f04f 0800 	mov.w	r8, #0
 800665a:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800665e:	1ba7      	subs	r7, r4, r6
 8006660:	e0db      	b.n	800681a <__kernel_rem_pio2+0x49a>
 8006662:	2302      	movs	r3, #2
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	e757      	b.n	8006518 <__kernel_rem_pio2+0x198>
 8006668:	080072a8 	.word	0x080072a8
 800666c:	40200000 	.word	0x40200000
 8006670:	3ff00000 	.word	0x3ff00000
 8006674:	3e700000 	.word	0x3e700000
 8006678:	41700000 	.word	0x41700000
 800667c:	3fe00000 	.word	0x3fe00000
 8006680:	08007268 	.word	0x08007268
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	b944      	cbnz	r4, 800669a <__kernel_rem_pio2+0x31a>
 8006688:	b11b      	cbz	r3, 8006692 <__kernel_rem_pio2+0x312>
 800668a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	2301      	movs	r3, #1
 8006692:	461c      	mov	r4, r3
 8006694:	3201      	adds	r2, #1
 8006696:	3704      	adds	r7, #4
 8006698:	e745      	b.n	8006526 <__kernel_rem_pio2+0x1a6>
 800669a:	1acb      	subs	r3, r1, r3
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4623      	mov	r3, r4
 80066a0:	e7f7      	b.n	8006692 <__kernel_rem_pio2+0x312>
 80066a2:	1e72      	subs	r2, r6, #1
 80066a4:	ab0c      	add	r3, sp, #48	; 0x30
 80066a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80066ae:	a90c      	add	r1, sp, #48	; 0x30
 80066b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80066b4:	e745      	b.n	8006542 <__kernel_rem_pio2+0x1c2>
 80066b6:	1e72      	subs	r2, r6, #1
 80066b8:	ab0c      	add	r3, sp, #48	; 0x30
 80066ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066be:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80066c2:	e7f4      	b.n	80066ae <__kernel_rem_pio2+0x32e>
 80066c4:	a90c      	add	r1, sp, #48	; 0x30
 80066c6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	430a      	orrs	r2, r1
 80066ce:	e796      	b.n	80065fe <__kernel_rem_pio2+0x27e>
 80066d0:	3401      	adds	r4, #1
 80066d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	d0fa      	beq.n	80066d0 <__kernel_rem_pio2+0x350>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	f106 0801 	add.w	r8, r6, #1
 80066e0:	18f5      	adds	r5, r6, r3
 80066e2:	ab20      	add	r3, sp, #128	; 0x80
 80066e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80066e8:	4434      	add	r4, r6
 80066ea:	4544      	cmp	r4, r8
 80066ec:	da04      	bge.n	80066f8 <__kernel_rem_pio2+0x378>
 80066ee:	4626      	mov	r6, r4
 80066f0:	e6bf      	b.n	8006472 <__kernel_rem_pio2+0xf2>
 80066f2:	2401      	movs	r4, #1
 80066f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f6:	e7ec      	b.n	80066d2 <__kernel_rem_pio2+0x352>
 80066f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fa:	f04f 0900 	mov.w	r9, #0
 80066fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006702:	f7f9 fe77 	bl	80003f4 <__aeabi_i2d>
 8006706:	2600      	movs	r6, #0
 8006708:	2700      	movs	r7, #0
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	e9c5 0100 	strd	r0, r1, [r5]
 8006710:	3b08      	subs	r3, #8
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	9504      	str	r5, [sp, #16]
 8006716:	9b07      	ldr	r3, [sp, #28]
 8006718:	4599      	cmp	r9, r3
 800671a:	dd05      	ble.n	8006728 <__kernel_rem_pio2+0x3a8>
 800671c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006720:	f108 0801 	add.w	r8, r8, #1
 8006724:	3508      	adds	r5, #8
 8006726:	e7e0      	b.n	80066ea <__kernel_rem_pio2+0x36a>
 8006728:	f8dd c010 	ldr.w	ip, [sp, #16]
 800672c:	9900      	ldr	r1, [sp, #0]
 800672e:	f109 0901 	add.w	r9, r9, #1
 8006732:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006736:	9100      	str	r1, [sp, #0]
 8006738:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800673c:	f8cd c010 	str.w	ip, [sp, #16]
 8006740:	f7f9 fec2 	bl	80004c8 <__aeabi_dmul>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7f9 fd06 	bl	800015c <__adddf3>
 8006750:	4606      	mov	r6, r0
 8006752:	460f      	mov	r7, r1
 8006754:	e7df      	b.n	8006716 <__kernel_rem_pio2+0x396>
 8006756:	3c01      	subs	r4, #1
 8006758:	e756      	b.n	8006608 <__kernel_rem_pio2+0x288>
 800675a:	f1cb 0200 	rsb	r2, fp, #0
 800675e:	4640      	mov	r0, r8
 8006760:	4649      	mov	r1, r9
 8006762:	f000 fc05 	bl	8006f70 <scalbn>
 8006766:	2200      	movs	r2, #0
 8006768:	4ba4      	ldr	r3, [pc, #656]	; (80069fc <__kernel_rem_pio2+0x67c>)
 800676a:	4604      	mov	r4, r0
 800676c:	460d      	mov	r5, r1
 800676e:	f7fa f931 	bl	80009d4 <__aeabi_dcmpge>
 8006772:	b1f8      	cbz	r0, 80067b4 <__kernel_rem_pio2+0x434>
 8006774:	2200      	movs	r2, #0
 8006776:	4ba2      	ldr	r3, [pc, #648]	; (8006a00 <__kernel_rem_pio2+0x680>)
 8006778:	4620      	mov	r0, r4
 800677a:	4629      	mov	r1, r5
 800677c:	f7f9 fea4 	bl	80004c8 <__aeabi_dmul>
 8006780:	f7fa f952 	bl	8000a28 <__aeabi_d2iz>
 8006784:	4607      	mov	r7, r0
 8006786:	f7f9 fe35 	bl	80003f4 <__aeabi_i2d>
 800678a:	2200      	movs	r2, #0
 800678c:	4b9b      	ldr	r3, [pc, #620]	; (80069fc <__kernel_rem_pio2+0x67c>)
 800678e:	f7f9 fe9b 	bl	80004c8 <__aeabi_dmul>
 8006792:	460b      	mov	r3, r1
 8006794:	4602      	mov	r2, r0
 8006796:	4629      	mov	r1, r5
 8006798:	4620      	mov	r0, r4
 800679a:	f7f9 fcdd 	bl	8000158 <__aeabi_dsub>
 800679e:	f7fa f943 	bl	8000a28 <__aeabi_d2iz>
 80067a2:	1c74      	adds	r4, r6, #1
 80067a4:	ab0c      	add	r3, sp, #48	; 0x30
 80067a6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80067aa:	f10b 0b18 	add.w	fp, fp, #24
 80067ae:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80067b2:	e731      	b.n	8006618 <__kernel_rem_pio2+0x298>
 80067b4:	4620      	mov	r0, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	f7fa f936 	bl	8000a28 <__aeabi_d2iz>
 80067bc:	ab0c      	add	r3, sp, #48	; 0x30
 80067be:	4634      	mov	r4, r6
 80067c0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80067c4:	e728      	b.n	8006618 <__kernel_rem_pio2+0x298>
 80067c6:	ab0c      	add	r3, sp, #48	; 0x30
 80067c8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80067cc:	f7f9 fe12 	bl	80003f4 <__aeabi_i2d>
 80067d0:	4632      	mov	r2, r6
 80067d2:	463b      	mov	r3, r7
 80067d4:	f7f9 fe78 	bl	80004c8 <__aeabi_dmul>
 80067d8:	4642      	mov	r2, r8
 80067da:	e86b 0102 	strd	r0, r1, [fp], #-8
 80067de:	464b      	mov	r3, r9
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fe70 	bl	80004c8 <__aeabi_dmul>
 80067e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ec:	4606      	mov	r6, r0
 80067ee:	460f      	mov	r7, r1
 80067f0:	e722      	b.n	8006638 <__kernel_rem_pio2+0x2b8>
 80067f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80067f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80067fa:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80067fe:	f8cd c01c 	str.w	ip, [sp, #28]
 8006802:	f7f9 fe61 	bl	80004c8 <__aeabi_dmul>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4650      	mov	r0, sl
 800680c:	4659      	mov	r1, fp
 800680e:	f7f9 fca5 	bl	800015c <__adddf3>
 8006812:	4682      	mov	sl, r0
 8006814:	468b      	mov	fp, r1
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	4598      	cmp	r8, r3
 800681e:	dc01      	bgt.n	8006824 <__kernel_rem_pio2+0x4a4>
 8006820:	45b8      	cmp	r8, r7
 8006822:	dde6      	ble.n	80067f2 <__kernel_rem_pio2+0x472>
 8006824:	ab48      	add	r3, sp, #288	; 0x120
 8006826:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800682a:	e9c7 ab00 	strd	sl, fp, [r7]
 800682e:	3e01      	subs	r6, #1
 8006830:	e707      	b.n	8006642 <__kernel_rem_pio2+0x2c2>
 8006832:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006834:	2b02      	cmp	r3, #2
 8006836:	dc09      	bgt.n	800684c <__kernel_rem_pio2+0x4cc>
 8006838:	2b00      	cmp	r3, #0
 800683a:	dc32      	bgt.n	80068a2 <__kernel_rem_pio2+0x522>
 800683c:	d05a      	beq.n	80068f4 <__kernel_rem_pio2+0x574>
 800683e:	9b04      	ldr	r3, [sp, #16]
 8006840:	f003 0007 	and.w	r0, r3, #7
 8006844:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800684e:	2b03      	cmp	r3, #3
 8006850:	d1f5      	bne.n	800683e <__kernel_rem_pio2+0x4be>
 8006852:	ab48      	add	r3, sp, #288	; 0x120
 8006854:	441d      	add	r5, r3
 8006856:	46aa      	mov	sl, r5
 8006858:	46a3      	mov	fp, r4
 800685a:	f1bb 0f00 	cmp.w	fp, #0
 800685e:	dc76      	bgt.n	800694e <__kernel_rem_pio2+0x5ce>
 8006860:	46aa      	mov	sl, r5
 8006862:	46a3      	mov	fp, r4
 8006864:	f1bb 0f01 	cmp.w	fp, #1
 8006868:	f300 8090 	bgt.w	800698c <__kernel_rem_pio2+0x60c>
 800686c:	2700      	movs	r7, #0
 800686e:	463e      	mov	r6, r7
 8006870:	2c01      	cmp	r4, #1
 8006872:	f300 80aa 	bgt.w	80069ca <__kernel_rem_pio2+0x64a>
 8006876:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800687a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800687e:	9b00      	ldr	r3, [sp, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f040 80ac 	bne.w	80069de <__kernel_rem_pio2+0x65e>
 8006886:	4603      	mov	r3, r0
 8006888:	462a      	mov	r2, r5
 800688a:	9806      	ldr	r0, [sp, #24]
 800688c:	e9c0 2300 	strd	r2, r3, [r0]
 8006890:	4622      	mov	r2, r4
 8006892:	460b      	mov	r3, r1
 8006894:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006898:	463a      	mov	r2, r7
 800689a:	4633      	mov	r3, r6
 800689c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80068a0:	e7cd      	b.n	800683e <__kernel_rem_pio2+0x4be>
 80068a2:	2000      	movs	r0, #0
 80068a4:	46a0      	mov	r8, r4
 80068a6:	4601      	mov	r1, r0
 80068a8:	ab48      	add	r3, sp, #288	; 0x120
 80068aa:	441d      	add	r5, r3
 80068ac:	f1b8 0f00 	cmp.w	r8, #0
 80068b0:	da3a      	bge.n	8006928 <__kernel_rem_pio2+0x5a8>
 80068b2:	9b00      	ldr	r3, [sp, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d03e      	beq.n	8006936 <__kernel_rem_pio2+0x5b6>
 80068b8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80068bc:	4602      	mov	r2, r0
 80068be:	462b      	mov	r3, r5
 80068c0:	9d06      	ldr	r5, [sp, #24]
 80068c2:	2601      	movs	r6, #1
 80068c4:	e9c5 2300 	strd	r2, r3, [r5]
 80068c8:	460b      	mov	r3, r1
 80068ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80068ce:	f7f9 fc43 	bl	8000158 <__aeabi_dsub>
 80068d2:	4684      	mov	ip, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	ad48      	add	r5, sp, #288	; 0x120
 80068d8:	42b4      	cmp	r4, r6
 80068da:	f105 0508 	add.w	r5, r5, #8
 80068de:	da2c      	bge.n	800693a <__kernel_rem_pio2+0x5ba>
 80068e0:	9b00      	ldr	r3, [sp, #0]
 80068e2:	b10b      	cbz	r3, 80068e8 <__kernel_rem_pio2+0x568>
 80068e4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80068e8:	4662      	mov	r2, ip
 80068ea:	463b      	mov	r3, r7
 80068ec:	9906      	ldr	r1, [sp, #24]
 80068ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80068f2:	e7a4      	b.n	800683e <__kernel_rem_pio2+0x4be>
 80068f4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80068f6:	ab48      	add	r3, sp, #288	; 0x120
 80068f8:	4637      	mov	r7, r6
 80068fa:	441d      	add	r5, r3
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	da09      	bge.n	8006914 <__kernel_rem_pio2+0x594>
 8006900:	9b00      	ldr	r3, [sp, #0]
 8006902:	b10b      	cbz	r3, 8006908 <__kernel_rem_pio2+0x588>
 8006904:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006908:	4632      	mov	r2, r6
 800690a:	463b      	mov	r3, r7
 800690c:	9906      	ldr	r1, [sp, #24]
 800690e:	e9c1 2300 	strd	r2, r3, [r1]
 8006912:	e794      	b.n	800683e <__kernel_rem_pio2+0x4be>
 8006914:	4630      	mov	r0, r6
 8006916:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800691a:	4639      	mov	r1, r7
 800691c:	f7f9 fc1e 	bl	800015c <__adddf3>
 8006920:	3c01      	subs	r4, #1
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	e7e9      	b.n	80068fc <__kernel_rem_pio2+0x57c>
 8006928:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800692c:	f7f9 fc16 	bl	800015c <__adddf3>
 8006930:	f108 38ff 	add.w	r8, r8, #4294967295
 8006934:	e7ba      	b.n	80068ac <__kernel_rem_pio2+0x52c>
 8006936:	460d      	mov	r5, r1
 8006938:	e7c0      	b.n	80068bc <__kernel_rem_pio2+0x53c>
 800693a:	4660      	mov	r0, ip
 800693c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006940:	4639      	mov	r1, r7
 8006942:	f7f9 fc0b 	bl	800015c <__adddf3>
 8006946:	3601      	adds	r6, #1
 8006948:	4684      	mov	ip, r0
 800694a:	460f      	mov	r7, r1
 800694c:	e7c4      	b.n	80068d8 <__kernel_rem_pio2+0x558>
 800694e:	e9da 6700 	ldrd	r6, r7, [sl]
 8006952:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006956:	4632      	mov	r2, r6
 8006958:	463b      	mov	r3, r7
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 fbfd 	bl	800015c <__adddf3>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7f9 fbf3 	bl	8000158 <__aeabi_dsub>
 8006972:	4632      	mov	r2, r6
 8006974:	463b      	mov	r3, r7
 8006976:	f7f9 fbf1 	bl	800015c <__adddf3>
 800697a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800697e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006982:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006986:	e9ca 2300 	strd	r2, r3, [sl]
 800698a:	e766      	b.n	800685a <__kernel_rem_pio2+0x4da>
 800698c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006990:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7f9 fbde 	bl	800015c <__adddf3>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7f9 fbd4 	bl	8000158 <__aeabi_dsub>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	f7f9 fbd2 	bl	800015c <__adddf3>
 80069b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069bc:	e86a 0102 	strd	r0, r1, [sl], #-8
 80069c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069c4:	e9ca 2300 	strd	r2, r3, [sl]
 80069c8:	e74c      	b.n	8006864 <__kernel_rem_pio2+0x4e4>
 80069ca:	4638      	mov	r0, r7
 80069cc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80069d0:	4631      	mov	r1, r6
 80069d2:	f7f9 fbc3 	bl	800015c <__adddf3>
 80069d6:	3c01      	subs	r4, #1
 80069d8:	4607      	mov	r7, r0
 80069da:	460e      	mov	r6, r1
 80069dc:	e748      	b.n	8006870 <__kernel_rem_pio2+0x4f0>
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80069e4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80069e8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80069ec:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80069f0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80069f4:	601d      	str	r5, [r3, #0]
 80069f6:	615e      	str	r6, [r3, #20]
 80069f8:	e721      	b.n	800683e <__kernel_rem_pio2+0x4be>
 80069fa:	bf00      	nop
 80069fc:	41700000 	.word	0x41700000
 8006a00:	3e700000 	.word	0x3e700000
 8006a04:	00000000 	.word	0x00000000

08006a08 <__kernel_tan>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	b08b      	sub	sp, #44	; 0x2c
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	4bd9      	ldr	r3, [pc, #868]	; (8006d78 <__kernel_tan+0x370>)
 8006a12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a16:	429e      	cmp	r6, r3
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4682      	mov	sl, r0
 8006a1e:	468b      	mov	fp, r1
 8006a20:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a22:	9202      	str	r2, [sp, #8]
 8006a24:	9107      	str	r1, [sp, #28]
 8006a26:	dc58      	bgt.n	8006ada <__kernel_tan+0xd2>
 8006a28:	f7f9 fffe 	bl	8000a28 <__aeabi_d2iz>
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d178      	bne.n	8006b24 <__kernel_tan+0x11c>
 8006a32:	1c7b      	adds	r3, r7, #1
 8006a34:	4323      	orrs	r3, r4
 8006a36:	4333      	orrs	r3, r6
 8006a38:	d110      	bne.n	8006a5c <__kernel_tan+0x54>
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	f000 fa0b 	bl	8006e58 <fabs>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	2000      	movs	r0, #0
 8006a48:	49cc      	ldr	r1, [pc, #816]	; (8006d7c <__kernel_tan+0x374>)
 8006a4a:	f7f9 fe67 	bl	800071c <__aeabi_ddiv>
 8006a4e:	4682      	mov	sl, r0
 8006a50:	468b      	mov	fp, r1
 8006a52:	4650      	mov	r0, sl
 8006a54:	4659      	mov	r1, fp
 8006a56:	b00b      	add	sp, #44	; 0x2c
 8006a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5c:	2f01      	cmp	r7, #1
 8006a5e:	d0f8      	beq.n	8006a52 <__kernel_tan+0x4a>
 8006a60:	4620      	mov	r0, r4
 8006a62:	4659      	mov	r1, fp
 8006a64:	9a02      	ldr	r2, [sp, #8]
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	f7f9 fb78 	bl	800015c <__adddf3>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	460f      	mov	r7, r1
 8006a72:	2000      	movs	r0, #0
 8006a74:	49c2      	ldr	r1, [pc, #776]	; (8006d80 <__kernel_tan+0x378>)
 8006a76:	f7f9 fe51 	bl	800071c <__aeabi_ddiv>
 8006a7a:	462e      	mov	r6, r5
 8006a7c:	4689      	mov	r9, r1
 8006a7e:	4652      	mov	r2, sl
 8006a80:	465b      	mov	r3, fp
 8006a82:	4680      	mov	r8, r0
 8006a84:	462c      	mov	r4, r5
 8006a86:	4630      	mov	r0, r6
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7f9 fb64 	bl	8000158 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	9802      	ldr	r0, [sp, #8]
 8006a96:	9900      	ldr	r1, [sp, #0]
 8006a98:	f7f9 fb5e 	bl	8000158 <__aeabi_dsub>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	f7f9 fd12 	bl	80004c8 <__aeabi_dmul>
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	4682      	mov	sl, r0
 8006aa8:	468b      	mov	fp, r1
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 fd0a 	bl	80004c8 <__aeabi_dmul>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4bb1      	ldr	r3, [pc, #708]	; (8006d7c <__kernel_tan+0x374>)
 8006ab8:	f7f9 fb50 	bl	800015c <__adddf3>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4650      	mov	r0, sl
 8006ac2:	4659      	mov	r1, fp
 8006ac4:	f7f9 fb4a 	bl	800015c <__adddf3>
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	f7f9 fcfc 	bl	80004c8 <__aeabi_dmul>
 8006ad0:	4622      	mov	r2, r4
 8006ad2:	462b      	mov	r3, r5
 8006ad4:	f7f9 fb42 	bl	800015c <__adddf3>
 8006ad8:	e7b9      	b.n	8006a4e <__kernel_tan+0x46>
 8006ada:	4baa      	ldr	r3, [pc, #680]	; (8006d84 <__kernel_tan+0x37c>)
 8006adc:	429e      	cmp	r6, r3
 8006ade:	dd21      	ble.n	8006b24 <__kernel_tan+0x11c>
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	da06      	bge.n	8006af2 <__kernel_tan+0xea>
 8006ae4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006ae8:	469b      	mov	fp, r3
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	4652      	mov	r2, sl
 8006af4:	a182      	add	r1, pc, #520	; (adr r1, 8006d00 <__kernel_tan+0x2f8>)
 8006af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afa:	465b      	mov	r3, fp
 8006afc:	f7f9 fb2c 	bl	8000158 <__aeabi_dsub>
 8006b00:	4604      	mov	r4, r0
 8006b02:	460d      	mov	r5, r1
 8006b04:	a180      	add	r1, pc, #512	; (adr r1, 8006d08 <__kernel_tan+0x300>)
 8006b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b0a:	9a02      	ldr	r2, [sp, #8]
 8006b0c:	9b00      	ldr	r3, [sp, #0]
 8006b0e:	f7f9 fb23 	bl	8000158 <__aeabi_dsub>
 8006b12:	462b      	mov	r3, r5
 8006b14:	4622      	mov	r2, r4
 8006b16:	f7f9 fb21 	bl	800015c <__adddf3>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4682      	mov	sl, r0
 8006b1e:	468b      	mov	fp, r1
 8006b20:	9302      	str	r3, [sp, #8]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	4652      	mov	r2, sl
 8006b26:	465b      	mov	r3, fp
 8006b28:	4650      	mov	r0, sl
 8006b2a:	4659      	mov	r1, fp
 8006b2c:	f7f9 fccc 	bl	80004c8 <__aeabi_dmul>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4680      	mov	r8, r0
 8006b36:	4689      	mov	r9, r1
 8006b38:	f7f9 fcc6 	bl	80004c8 <__aeabi_dmul>
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	464b      	mov	r3, r9
 8006b44:	4650      	mov	r0, sl
 8006b46:	4659      	mov	r1, fp
 8006b48:	f7f9 fcbe 	bl	80004c8 <__aeabi_dmul>
 8006b4c:	a370      	add	r3, pc, #448	; (adr r3, 8006d10 <__kernel_tan+0x308>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b56:	4620      	mov	r0, r4
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7f9 fcb5 	bl	80004c8 <__aeabi_dmul>
 8006b5e:	a36e      	add	r3, pc, #440	; (adr r3, 8006d18 <__kernel_tan+0x310>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fafa 	bl	800015c <__adddf3>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	f7f9 fcac 	bl	80004c8 <__aeabi_dmul>
 8006b70:	a36b      	add	r3, pc, #428	; (adr r3, 8006d20 <__kernel_tan+0x318>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 faf1 	bl	800015c <__adddf3>
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	f7f9 fca3 	bl	80004c8 <__aeabi_dmul>
 8006b82:	a369      	add	r3, pc, #420	; (adr r3, 8006d28 <__kernel_tan+0x320>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fae8 	bl	800015c <__adddf3>
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	462b      	mov	r3, r5
 8006b90:	f7f9 fc9a 	bl	80004c8 <__aeabi_dmul>
 8006b94:	a366      	add	r3, pc, #408	; (adr r3, 8006d30 <__kernel_tan+0x328>)
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f7f9 fadf 	bl	800015c <__adddf3>
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	f7f9 fc91 	bl	80004c8 <__aeabi_dmul>
 8006ba6:	a364      	add	r3, pc, #400	; (adr r3, 8006d38 <__kernel_tan+0x330>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f7f9 fad6 	bl	800015c <__adddf3>
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	f7f9 fc88 	bl	80004c8 <__aeabi_dmul>
 8006bb8:	a361      	add	r3, pc, #388	; (adr r3, 8006d40 <__kernel_tan+0x338>)
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	f7f9 fc7f 	bl	80004c8 <__aeabi_dmul>
 8006bca:	a35f      	add	r3, pc, #380	; (adr r3, 8006d48 <__kernel_tan+0x340>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f7f9 fac4 	bl	800015c <__adddf3>
 8006bd4:	4622      	mov	r2, r4
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	f7f9 fc76 	bl	80004c8 <__aeabi_dmul>
 8006bdc:	a35c      	add	r3, pc, #368	; (adr r3, 8006d50 <__kernel_tan+0x348>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fabb 	bl	800015c <__adddf3>
 8006be6:	4622      	mov	r2, r4
 8006be8:	462b      	mov	r3, r5
 8006bea:	f7f9 fc6d 	bl	80004c8 <__aeabi_dmul>
 8006bee:	a35a      	add	r3, pc, #360	; (adr r3, 8006d58 <__kernel_tan+0x350>)
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f7f9 fab2 	bl	800015c <__adddf3>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	f7f9 fc64 	bl	80004c8 <__aeabi_dmul>
 8006c00:	a357      	add	r3, pc, #348	; (adr r3, 8006d60 <__kernel_tan+0x358>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 faa9 	bl	800015c <__adddf3>
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	f7f9 fc5b 	bl	80004c8 <__aeabi_dmul>
 8006c12:	a355      	add	r3, pc, #340	; (adr r3, 8006d68 <__kernel_tan+0x360>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 faa0 	bl	800015c <__adddf3>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c24:	f7f9 fa9a 	bl	800015c <__adddf3>
 8006c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c2c:	f7f9 fc4c 	bl	80004c8 <__aeabi_dmul>
 8006c30:	9a02      	ldr	r2, [sp, #8]
 8006c32:	9b00      	ldr	r3, [sp, #0]
 8006c34:	f7f9 fa92 	bl	800015c <__adddf3>
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	f7f9 fc44 	bl	80004c8 <__aeabi_dmul>
 8006c40:	9a02      	ldr	r2, [sp, #8]
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	f7f9 fa8a 	bl	800015c <__adddf3>
 8006c48:	a349      	add	r3, pc, #292	; (adr r3, 8006d70 <__kernel_tan+0x368>)
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460d      	mov	r5, r1
 8006c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c56:	f7f9 fc37 	bl	80004c8 <__aeabi_dmul>
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	f7f9 fa7d 	bl	800015c <__adddf3>
 8006c62:	460b      	mov	r3, r1
 8006c64:	e9cd 0100 	strd	r0, r1, [sp]
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	4650      	mov	r0, sl
 8006c6e:	f7f9 fa75 	bl	800015c <__adddf3>
 8006c72:	4b44      	ldr	r3, [pc, #272]	; (8006d84 <__kernel_tan+0x37c>)
 8006c74:	4604      	mov	r4, r0
 8006c76:	429e      	cmp	r6, r3
 8006c78:	460d      	mov	r5, r1
 8006c7a:	f340 8085 	ble.w	8006d88 <__kernel_tan+0x380>
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7f9 fbb8 	bl	80003f4 <__aeabi_i2d>
 8006c84:	4622      	mov	r2, r4
 8006c86:	4680      	mov	r8, r0
 8006c88:	4689      	mov	r9, r1
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	f7f9 fc1a 	bl	80004c8 <__aeabi_dmul>
 8006c94:	4642      	mov	r2, r8
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f7f9 fa5c 	bl	800015c <__adddf3>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 fd36 	bl	800071c <__aeabi_ddiv>
 8006cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cb4:	f7f9 fa50 	bl	8000158 <__aeabi_dsub>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4650      	mov	r0, sl
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	f7f9 fa4a 	bl	8000158 <__aeabi_dsub>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	f7f9 fa48 	bl	800015c <__adddf3>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	f7f9 fa40 	bl	8000158 <__aeabi_dsub>
 8006cd8:	9b07      	ldr	r3, [sp, #28]
 8006cda:	4604      	mov	r4, r0
 8006cdc:	179b      	asrs	r3, r3, #30
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	f1c3 0001 	rsb	r0, r3, #1
 8006ce6:	460d      	mov	r5, r1
 8006ce8:	f7f9 fb84 	bl	80003f4 <__aeabi_i2d>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f7f9 fbe8 	bl	80004c8 <__aeabi_dmul>
 8006cf8:	e6a9      	b.n	8006a4e <__kernel_tan+0x46>
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w
 8006d00:	54442d18 	.word	0x54442d18
 8006d04:	3fe921fb 	.word	0x3fe921fb
 8006d08:	33145c07 	.word	0x33145c07
 8006d0c:	3c81a626 	.word	0x3c81a626
 8006d10:	74bf7ad4 	.word	0x74bf7ad4
 8006d14:	3efb2a70 	.word	0x3efb2a70
 8006d18:	32f0a7e9 	.word	0x32f0a7e9
 8006d1c:	3f12b80f 	.word	0x3f12b80f
 8006d20:	1a8d1068 	.word	0x1a8d1068
 8006d24:	3f3026f7 	.word	0x3f3026f7
 8006d28:	fee08315 	.word	0xfee08315
 8006d2c:	3f57dbc8 	.word	0x3f57dbc8
 8006d30:	e96e8493 	.word	0xe96e8493
 8006d34:	3f8226e3 	.word	0x3f8226e3
 8006d38:	1bb341fe 	.word	0x1bb341fe
 8006d3c:	3faba1ba 	.word	0x3faba1ba
 8006d40:	db605373 	.word	0xdb605373
 8006d44:	bef375cb 	.word	0xbef375cb
 8006d48:	a03792a6 	.word	0xa03792a6
 8006d4c:	3f147e88 	.word	0x3f147e88
 8006d50:	f2f26501 	.word	0xf2f26501
 8006d54:	3f4344d8 	.word	0x3f4344d8
 8006d58:	c9560328 	.word	0xc9560328
 8006d5c:	3f6d6d22 	.word	0x3f6d6d22
 8006d60:	8406d637 	.word	0x8406d637
 8006d64:	3f9664f4 	.word	0x3f9664f4
 8006d68:	1110fe7a 	.word	0x1110fe7a
 8006d6c:	3fc11111 	.word	0x3fc11111
 8006d70:	55555563 	.word	0x55555563
 8006d74:	3fd55555 	.word	0x3fd55555
 8006d78:	3e2fffff 	.word	0x3e2fffff
 8006d7c:	3ff00000 	.word	0x3ff00000
 8006d80:	bff00000 	.word	0xbff00000
 8006d84:	3fe59427 	.word	0x3fe59427
 8006d88:	2f01      	cmp	r7, #1
 8006d8a:	d031      	beq.n	8006df0 <__kernel_tan+0x3e8>
 8006d8c:	460f      	mov	r7, r1
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	2000      	movs	r0, #0
 8006d94:	4918      	ldr	r1, [pc, #96]	; (8006df8 <__kernel_tan+0x3f0>)
 8006d96:	f7f9 fcc1 	bl	800071c <__aeabi_ddiv>
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006da4:	4652      	mov	r2, sl
 8006da6:	465b      	mov	r3, fp
 8006da8:	4630      	mov	r0, r6
 8006daa:	4639      	mov	r1, r7
 8006dac:	f7f9 f9d4 	bl	8000158 <__aeabi_dsub>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006db8:	f7f9 f9ce 	bl	8000158 <__aeabi_dsub>
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	462b      	mov	r3, r5
 8006dc0:	f7f9 fb82 	bl	80004c8 <__aeabi_dmul>
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	468b      	mov	fp, r1
 8006dca:	462b      	mov	r3, r5
 8006dcc:	4630      	mov	r0, r6
 8006dce:	4639      	mov	r1, r7
 8006dd0:	f7f9 fb7a 	bl	80004c8 <__aeabi_dmul>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <__kernel_tan+0x3f4>)
 8006dd8:	f7f9 f9c0 	bl	800015c <__adddf3>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4650      	mov	r0, sl
 8006de2:	4659      	mov	r1, fp
 8006de4:	f7f9 f9ba 	bl	800015c <__adddf3>
 8006de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dec:	4634      	mov	r4, r6
 8006dee:	e66d      	b.n	8006acc <__kernel_tan+0xc4>
 8006df0:	4682      	mov	sl, r0
 8006df2:	468b      	mov	fp, r1
 8006df4:	e62d      	b.n	8006a52 <__kernel_tan+0x4a>
 8006df6:	bf00      	nop
 8006df8:	bff00000 	.word	0xbff00000
 8006dfc:	3ff00000 	.word	0x3ff00000

08006e00 <with_errno>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	4604      	mov	r4, r0
 8006e04:	460d      	mov	r5, r1
 8006e06:	4616      	mov	r6, r2
 8006e08:	f7fe fa34 	bl	8005274 <__errno>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	6006      	str	r6, [r0, #0]
 8006e10:	4620      	mov	r0, r4
 8006e12:	bd70      	pop	{r4, r5, r6, pc}

08006e14 <xflow>:
 8006e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e16:	4615      	mov	r5, r2
 8006e18:	461c      	mov	r4, r3
 8006e1a:	b180      	cbz	r0, 8006e3e <xflow+0x2a>
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e22:	e9cd 0100 	strd	r0, r1, [sp]
 8006e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	f7f9 fb4b 	bl	80004c8 <__aeabi_dmul>
 8006e32:	2222      	movs	r2, #34	; 0x22
 8006e34:	b003      	add	sp, #12
 8006e36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e3a:	f7ff bfe1 	b.w	8006e00 <with_errno>
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	e7ee      	b.n	8006e22 <xflow+0xe>

08006e44 <__math_uflow>:
 8006e44:	2200      	movs	r2, #0
 8006e46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e4a:	f7ff bfe3 	b.w	8006e14 <xflow>

08006e4e <__math_oflow>:
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006e54:	f7ff bfde 	b.w	8006e14 <xflow>

08006e58 <fabs>:
 8006e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006e5c:	4770      	bx	lr

08006e5e <finite>:
 8006e5e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006e62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006e66:	0fc0      	lsrs	r0, r0, #31
 8006e68:	4770      	bx	lr
 8006e6a:	0000      	movs	r0, r0
 8006e6c:	0000      	movs	r0, r0
	...

08006e70 <floor>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006e78:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006e7c:	2e13      	cmp	r6, #19
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4607      	mov	r7, r0
 8006e84:	460c      	mov	r4, r1
 8006e86:	4605      	mov	r5, r0
 8006e88:	dc33      	bgt.n	8006ef2 <floor+0x82>
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	da14      	bge.n	8006eb8 <floor+0x48>
 8006e8e:	a334      	add	r3, pc, #208	; (adr r3, 8006f60 <floor+0xf0>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7f9 f962 	bl	800015c <__adddf3>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f7f9 fda4 	bl	80009e8 <__aeabi_dcmpgt>
 8006ea0:	b138      	cbz	r0, 8006eb2 <floor+0x42>
 8006ea2:	2c00      	cmp	r4, #0
 8006ea4:	da58      	bge.n	8006f58 <floor+0xe8>
 8006ea6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006eaa:	431d      	orrs	r5, r3
 8006eac:	d001      	beq.n	8006eb2 <floor+0x42>
 8006eae:	2500      	movs	r5, #0
 8006eb0:	4c2d      	ldr	r4, [pc, #180]	; (8006f68 <floor+0xf8>)
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	462f      	mov	r7, r5
 8006eb6:	e025      	b.n	8006f04 <floor+0x94>
 8006eb8:	4a2c      	ldr	r2, [pc, #176]	; (8006f6c <floor+0xfc>)
 8006eba:	fa42 f806 	asr.w	r8, r2, r6
 8006ebe:	ea01 0208 	and.w	r2, r1, r8
 8006ec2:	4302      	orrs	r2, r0
 8006ec4:	d01e      	beq.n	8006f04 <floor+0x94>
 8006ec6:	a326      	add	r3, pc, #152	; (adr r3, 8006f60 <floor+0xf0>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 f946 	bl	800015c <__adddf3>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f7f9 fd88 	bl	80009e8 <__aeabi_dcmpgt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d0ea      	beq.n	8006eb2 <floor+0x42>
 8006edc:	2c00      	cmp	r4, #0
 8006ede:	bfbe      	ittt	lt
 8006ee0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006ee4:	fa43 f606 	asrlt.w	r6, r3, r6
 8006ee8:	19a4      	addlt	r4, r4, r6
 8006eea:	2500      	movs	r5, #0
 8006eec:	ea24 0408 	bic.w	r4, r4, r8
 8006ef0:	e7df      	b.n	8006eb2 <floor+0x42>
 8006ef2:	2e33      	cmp	r6, #51	; 0x33
 8006ef4:	dd0a      	ble.n	8006f0c <floor+0x9c>
 8006ef6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006efa:	d103      	bne.n	8006f04 <floor+0x94>
 8006efc:	f7f9 f92e 	bl	800015c <__adddf3>
 8006f00:	4607      	mov	r7, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4638      	mov	r0, r7
 8006f06:	4619      	mov	r1, r3
 8006f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f10:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006f14:	fa22 f808 	lsr.w	r8, r2, r8
 8006f18:	ea18 0f00 	tst.w	r8, r0
 8006f1c:	d0f2      	beq.n	8006f04 <floor+0x94>
 8006f1e:	a310      	add	r3, pc, #64	; (adr r3, 8006f60 <floor+0xf0>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f7f9 f91a 	bl	800015c <__adddf3>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f7f9 fd5c 	bl	80009e8 <__aeabi_dcmpgt>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d0be      	beq.n	8006eb2 <floor+0x42>
 8006f34:	2c00      	cmp	r4, #0
 8006f36:	da02      	bge.n	8006f3e <floor+0xce>
 8006f38:	2e14      	cmp	r6, #20
 8006f3a:	d103      	bne.n	8006f44 <floor+0xd4>
 8006f3c:	3401      	adds	r4, #1
 8006f3e:	ea25 0508 	bic.w	r5, r5, r8
 8006f42:	e7b6      	b.n	8006eb2 <floor+0x42>
 8006f44:	2301      	movs	r3, #1
 8006f46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006f4a:	fa03 f606 	lsl.w	r6, r3, r6
 8006f4e:	4435      	add	r5, r6
 8006f50:	42bd      	cmp	r5, r7
 8006f52:	bf38      	it	cc
 8006f54:	18e4      	addcc	r4, r4, r3
 8006f56:	e7f2      	b.n	8006f3e <floor+0xce>
 8006f58:	2500      	movs	r5, #0
 8006f5a:	462c      	mov	r4, r5
 8006f5c:	e7a9      	b.n	8006eb2 <floor+0x42>
 8006f5e:	bf00      	nop
 8006f60:	8800759c 	.word	0x8800759c
 8006f64:	7e37e43c 	.word	0x7e37e43c
 8006f68:	bff00000 	.word	0xbff00000
 8006f6c:	000fffff 	.word	0x000fffff

08006f70 <scalbn>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006f76:	4604      	mov	r4, r0
 8006f78:	460d      	mov	r5, r1
 8006f7a:	4617      	mov	r7, r2
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	b996      	cbnz	r6, 8006fa6 <scalbn+0x36>
 8006f80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f84:	4303      	orrs	r3, r0
 8006f86:	d039      	beq.n	8006ffc <scalbn+0x8c>
 8006f88:	4b33      	ldr	r3, [pc, #204]	; (8007058 <scalbn+0xe8>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f7f9 fa9c 	bl	80004c8 <__aeabi_dmul>
 8006f90:	4b32      	ldr	r3, [pc, #200]	; (800705c <scalbn+0xec>)
 8006f92:	4604      	mov	r4, r0
 8006f94:	429f      	cmp	r7, r3
 8006f96:	460d      	mov	r5, r1
 8006f98:	da0f      	bge.n	8006fba <scalbn+0x4a>
 8006f9a:	a32b      	add	r3, pc, #172	; (adr r3, 8007048 <scalbn+0xd8>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f7f9 fa92 	bl	80004c8 <__aeabi_dmul>
 8006fa4:	e006      	b.n	8006fb4 <scalbn+0x44>
 8006fa6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006faa:	4296      	cmp	r6, r2
 8006fac:	d10a      	bne.n	8006fc4 <scalbn+0x54>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f7f9 f8d4 	bl	800015c <__adddf3>
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	460d      	mov	r5, r1
 8006fb8:	e020      	b.n	8006ffc <scalbn+0x8c>
 8006fba:	460b      	mov	r3, r1
 8006fbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006fc0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006fc4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006fc8:	19b9      	adds	r1, r7, r6
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	dd0e      	ble.n	8006fec <scalbn+0x7c>
 8006fce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006fd2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006fd6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006fda:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006fde:	4820      	ldr	r0, [pc, #128]	; (8007060 <scalbn+0xf0>)
 8006fe0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006fe4:	a31a      	add	r3, pc, #104	; (adr r3, 8007050 <scalbn+0xe0>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	e7d9      	b.n	8006fa0 <scalbn+0x30>
 8006fec:	2900      	cmp	r1, #0
 8006fee:	dd08      	ble.n	8007002 <scalbn+0x92>
 8006ff0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ff8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007002:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007006:	da12      	bge.n	800702e <scalbn+0xbe>
 8007008:	f24c 3350 	movw	r3, #50000	; 0xc350
 800700c:	429f      	cmp	r7, r3
 800700e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007012:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007016:	dcdc      	bgt.n	8006fd2 <scalbn+0x62>
 8007018:	a30b      	add	r3, pc, #44	; (adr r3, 8007048 <scalbn+0xd8>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007022:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007026:	480f      	ldr	r0, [pc, #60]	; (8007064 <scalbn+0xf4>)
 8007028:	f041 011f 	orr.w	r1, r1, #31
 800702c:	e7b8      	b.n	8006fa0 <scalbn+0x30>
 800702e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007032:	3136      	adds	r1, #54	; 0x36
 8007034:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007038:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	2200      	movs	r2, #0
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <scalbn+0xf8>)
 8007044:	e7ac      	b.n	8006fa0 <scalbn+0x30>
 8007046:	bf00      	nop
 8007048:	c2f8f359 	.word	0xc2f8f359
 800704c:	01a56e1f 	.word	0x01a56e1f
 8007050:	8800759c 	.word	0x8800759c
 8007054:	7e37e43c 	.word	0x7e37e43c
 8007058:	43500000 	.word	0x43500000
 800705c:	ffff3cb0 	.word	0xffff3cb0
 8007060:	8800759c 	.word	0x8800759c
 8007064:	c2f8f359 	.word	0xc2f8f359
 8007068:	3c900000 	.word	0x3c900000

0800706c <_init>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr

08007078 <_fini>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr
