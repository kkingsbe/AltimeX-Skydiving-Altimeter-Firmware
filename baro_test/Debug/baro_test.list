
baro_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006238  08006238  00016238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006438  08006438  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006438  08006438  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006438  08006438  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000000c  0800644c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  0800644c  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf29  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206e  00000000  00000000  0002cf5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc6  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f83c  00000000  00000000  000485b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0ec  00000000  00000000  00057df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1ede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  000e1f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800621c 	.word	0x0800621c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	0800621c 	.word	0x0800621c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <BMP_Init_Default_Addr>:

struct BMP_Config bmpConfig;
enum BMP_Measurement_Mode bmpCurrentMode;

void BMP_Init_Default_Addr(I2C_HandleTypeDef* i2c_config)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	BMP_Init(i2c_config, BMP_DEFAULT_ADDRESS);
 8000d50:	2147      	movs	r1, #71	; 0x47
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f804 	bl	8000d60 <BMP_Init>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <BMP_Init>:

void BMP_Init(I2C_HandleTypeDef* i2c_config, uint16_t address)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1000);
 8000d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d70:	f000 fef4 	bl	8001b5c <HAL_Delay>
	bmpConfig.i2c_config = i2c_config;
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <BMP_Init+0x40>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
	bmpConfig.address = address;
 8000d7a:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <BMP_Init+0x40>)
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	8093      	strh	r3, [r2, #4]
	bmpCurrentMode = NONE;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <BMP_Init+0x44>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]

	//Enter sleep mode
	BMP_Switch_Power_Mode(SLEEP);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 f83a 	bl	8000e00 <BMP_Switch_Power_Mode>

	//Configure FIFO
	BMP_Configure_FIFO();
 8000d8c:	f000 f80c 	bl	8000da8 <BMP_Configure_FIFO>

	//Enter normal mode
	BMP_Switch_Power_Mode(NORMAL);
 8000d90:	2002      	movs	r0, #2
 8000d92:	f000 f835 	bl	8000e00 <BMP_Switch_Power_Mode>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000028 	.word	0x20000028
 8000da4:	20000030 	.word	0x20000030

08000da8 <BMP_Configure_FIFO>:

void BMP_Configure_FIFO()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af04      	add	r7, sp, #16
	//Configure FIFO
	uint8_t fifo_config [1];
	BMP_Reg_Read(BMP_FIFO_SEL, 1, fifo_config);
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	461a      	mov	r2, r3
 8000db2:	2101      	movs	r1, #1
 8000db4:	2018      	movs	r0, #24
 8000db6:	f000 f87b 	bl	8000eb0 <BMP_Reg_Read>
	fifo_config[0] &= 0xFC; //Clear first 2 bits
 8000dba:	793b      	ldrb	r3, [r7, #4]
 8000dbc:	f023 0303 	bic.w	r3, r3, #3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	713b      	strb	r3, [r7, #4]
	fifo_config[0] |= 0x3;  //Set first 2 bits to 0x3 (pt mode)
 8000dc4:	793b      	ldrb	r3, [r7, #4]
 8000dc6:	f043 0303 	orr.w	r3, r3, #3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), BMP_FIFO_SEL, 1, fifo_config, 1, 5);
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <BMP_Configure_FIFO+0x54>)
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <BMP_Configure_FIFO+0x54>)
 8000dd4:	889b      	ldrh	r3, [r3, #4]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	2305      	movs	r3, #5
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	2301      	movs	r3, #1
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2301      	movs	r3, #1
 8000de8:	2218      	movs	r2, #24
 8000dea:	f001 fd2d 	bl	8002848 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000dee:	200a      	movs	r0, #10
 8000df0:	f000 feb4 	bl	8001b5c <HAL_Delay>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000028 	.word	0x20000028

08000e00 <BMP_Switch_Power_Mode>:

void BMP_Switch_Power_Mode(enum BMP_Power_Mode new_mode)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af04      	add	r7, sp, #16
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	uint8_t odr_config[1];
	BMP_Reg_Read(BMP_ODR_CONFIG, 1, odr_config);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2101      	movs	r1, #1
 8000e12:	2037      	movs	r0, #55	; 0x37
 8000e14:	f000 f84c 	bl	8000eb0 <BMP_Reg_Read>
	odr_config[0] &= 0xFC; // Clear the lower 2 bits
 8000e18:	7b3b      	ldrb	r3, [r7, #12]
 8000e1a:	f023 0303 	bic.w	r3, r3, #3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	733b      	strb	r3, [r7, #12]

	uint8_t mode_code; //Stores the 2 bit mode code

	if(new_mode == SLEEP)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <BMP_Switch_Power_Mode+0x2c>
	{
		mode_code = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
	}
	if(new_mode == NORMAL)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d101      	bne.n	8000e36 <BMP_Switch_Power_Mode+0x36>
	{
		mode_code = 0x1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
	}

	odr_config[0] |= mode_code; // Set the lower 2 bits to the desired value
 8000e36:	7b3a      	ldrb	r2, [r7, #12]
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	733b      	strb	r3, [r7, #12]

	//Write new power mode configuration
	HAL_I2C_Mem_Write(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), BMP_ODR_CONFIG, 1, odr_config, 1, 5);
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <BMP_Switch_Power_Mode+0xac>)
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <BMP_Switch_Power_Mode+0xac>)
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	b299      	uxth	r1, r3
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2301      	movs	r3, #1
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	2237      	movs	r2, #55	; 0x37
 8000e5e:	f001 fcf3 	bl	8002848 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f000 fe7a 	bl	8001b5c <HAL_Delay>

	//Wait for mode change to apply
	uint8_t current_odr_config[1];
	BMP_Reg_Read(BMP_ODR_CONFIG, 1, current_odr_config);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2037      	movs	r0, #55	; 0x37
 8000e72:	f000 f81d 	bl	8000eb0 <BMP_Reg_Read>
	uint8_t pm_mode = current_odr_config[0] & 0x3; //Mask out all but the first 2 bits
 8000e76:	7a3b      	ldrb	r3, [r7, #8]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	73bb      	strb	r3, [r7, #14]

	while(pm_mode != mode_code)
 8000e7e:	e00a      	b.n	8000e96 <BMP_Switch_Power_Mode+0x96>
	{
		BMP_Reg_Read(BMP_ODR_CONFIG, 1, current_odr_config);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	461a      	mov	r2, r3
 8000e86:	2101      	movs	r1, #1
 8000e88:	2037      	movs	r0, #55	; 0x37
 8000e8a:	f000 f811 	bl	8000eb0 <BMP_Reg_Read>
		pm_mode = current_odr_config[0] & 0x3;
 8000e8e:	7a3b      	ldrb	r3, [r7, #8]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	73bb      	strb	r3, [r7, #14]
	while(pm_mode != mode_code)
 8000e96:	7bba      	ldrb	r2, [r7, #14]
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d1f0      	bne.n	8000e80 <BMP_Switch_Power_Mode+0x80>
	}

	HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f000 fe5c 	bl	8001b5c <HAL_Delay>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000028 	.word	0x20000028

08000eb0 <BMP_Reg_Read>:

void BMP_Reg_Read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af04      	add	r7, sp, #16
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	603a      	str	r2, [r7, #0]
 8000eba:	80fb      	strh	r3, [r7, #6]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), reg_addr, 1, data_output, reg_size, 100);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <BMP_Reg_Read+0x38>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <BMP_Reg_Read+0x38>)
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	f001 fdae 	bl	8002a3c <HAL_I2C_Mem_Read>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000028 	.word	0x20000028

08000eec <BMP_Get_Device_Status>:

uint8_t BMP_Get_Device_Status()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(bmpConfig.i2c_config, (uint16_t)(bmpConfig.address<<1), 3, 5);
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <BMP_Get_Device_Status+0x58>)
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <BMP_Get_Device_Status+0x58>)
 8000ef8:	889b      	ldrh	r3, [r3, #4]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b299      	uxth	r1, r3
 8000efe:	2305      	movs	r3, #5
 8000f00:	2203      	movs	r2, #3
 8000f02:	f002 f803 	bl	8002f0c <HAL_I2C_IsDeviceReady>
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]

	//HAL_Delay(10);
	uint8_t chipid_rx_dat[1];
	BMP_Reg_Read(BMP_CHIP_ID_REG, 1, chipid_rx_dat);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff ffcd 	bl	8000eb0 <BMP_Reg_Read>
	uint8_t chip_id = chipid_rx_dat[0];
 8000f16:	793b      	ldrb	r3, [r7, #4]
 8000f18:	71bb      	strb	r3, [r7, #6]

	uint8_t status_rx_dat[1];
	BMP_Reg_Read(BMP_STATUS_REG, 1, status_rx_dat);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2028      	movs	r0, #40	; 0x28
 8000f22:	f7ff ffc5 	bl	8000eb0 <BMP_Reg_Read>
	uint8_t bmp_status = status_rx_dat[0];
 8000f26:	783b      	ldrb	r3, [r7, #0]
 8000f28:	717b      	strb	r3, [r7, #5]

	if(i2c_status == HAL_OK && bmp_status == 0x2)
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d104      	bne.n	8000f3a <BMP_Get_Device_Status+0x4e>
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d101      	bne.n	8000f3a <BMP_Get_Device_Status+0x4e>
	{
		return 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <BMP_Get_Device_Status+0x50>
	}
	else
	{
		return 0;
 8000f3a:	2300      	movs	r3, #0
	}
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000028 	.word	0x20000028

08000f48 <BMP_Read_Data>:

void BMP_Read_Data(uint16_t* temp_c, uint16_t* pressure)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	BMP_Reg_Read(BMP_FIFO_DATA, 6, data);
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	461a      	mov	r2, r3
 8000f58:	2106      	movs	r1, #6
 8000f5a:	2029      	movs	r0, #41	; 0x29
 8000f5c:	f7ff ffa8 	bl	8000eb0 <BMP_Reg_Read>
	uint32_t temp_conc = (uint32_t)(data[2] << 16 | data[1] << 8 | data[0]);
 8000f60:	7abb      	ldrb	r3, [r7, #10]
 8000f62:	041a      	lsls	r2, r3, #16
 8000f64:	7a7b      	ldrb	r3, [r7, #9]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	7a3a      	ldrb	r2, [r7, #8]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
	*temp_c = temp_conc >> 16;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	801a      	strh	r2, [r3, #0]

	uint32_t pressure_conc = (uint32_t)(data[5] << 16 | data[4] << 8 | data[3]);
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	7b3b      	ldrb	r3, [r7, #12]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	4313      	orrs	r3, r2
 8000f84:	7afa      	ldrb	r2, [r7, #11]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
	*pressure = pressure_conc >> 16;
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	0c1b      	lsrs	r3, r3, #16
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	801a      	strh	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <BMP_Get_Mode>:
	uint32_t temp_conc = (uint32_t)(temp_arr[2] << 16 | temp_arr[1] << 8 | temp_arr[0]);
	return temp_conc >> 16;
}

enum BMP_Power_Mode BMP_Get_Mode()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
	uint8_t odr_config[1];
	BMP_Reg_Read(BMP_ODR_CONFIG, 1, odr_config);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2037      	movs	r0, #55	; 0x37
 8000faa:	f7ff ff81 	bl	8000eb0 <BMP_Reg_Read>
	uint8_t pm_bin = odr_config[0];
 8000fae:	793b      	ldrb	r3, [r7, #4]
 8000fb0:	71fb      	strb	r3, [r7, #7]
	pm_bin &= 0x3; //Mask out all bits except for the first 2 (binary 11 or 0x3)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	71fb      	strb	r3, [r7, #7]

	if(pm_bin == 0x0)
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <BMP_Get_Mode+0x28>
	{
		return STANDBY;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e009      	b.n	8000fd8 <BMP_Get_Mode+0x3c>
	}

	if(pm_bin == 0x1)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <BMP_Get_Mode+0x32>
	{
		return NORMAL;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e004      	b.n	8000fd8 <BMP_Get_Mode+0x3c>
	}

	if(pm_bin == 0x70)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b70      	cmp	r3, #112	; 0x70
 8000fd2:	d101      	bne.n	8000fd8 <BMP_Get_Mode+0x3c>
	{
		return SLEEP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e7ff      	b.n	8000fd8 <BMP_Get_Mode+0x3c>
	}
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f835 	bl	8001058 <Set_LED_Timer>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	460a      	mov	r2, r1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	4613      	mov	r3, r2
 8001004:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 8001006:	f000 f9e9 	bl	80013dc <Clear_All_LED>
	if(num_filled > 5) num_filled = 5;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d901      	bls.n	8001014 <Strip_Progress_Bar_Single_Color+0x1e>
 8001010:	2305      	movs	r3, #5
 8001012:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e008      	b.n	800102c <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	79ba      	ldrb	r2, [r7, #6]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f9b0 	bl	8001386 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3f2      	bcc.n	800101a <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <Strip_Clear>:

void Strip_Clear()
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
	Clear_All_LED();
 8001042:	f000 f9cb 	bl	80013dc <Clear_All_LED>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <Strip_Send>:

void Strip_Send()
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
	WS2813_Send();
 800104e:	f000 f8bf 	bl	80011d0 <WS2813_Send>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <Set_LED_Timer+0x18>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	20000034 	.word	0x20000034

08001074 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <Set_LED+0x58>)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	460a      	mov	r2, r1
 8001090:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	b2d9      	uxtb	r1, r3
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <Set_LED+0x58>)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	b2d9      	uxtb	r1, r3
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <Set_LED+0x58>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	460a      	mov	r2, r1
 80010b0:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <Set_LED+0x58>)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	460a      	mov	r2, r1
 80010c0:	71da      	strb	r2, [r3, #7]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000034 	.word	0x20000034

080010d0 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b2d      	cmp	r3, #45	; 0x2d
 80010dc:	dd01      	ble.n	80010e2 <Set_Brightness+0x12>
 80010de:	232d      	movs	r3, #45	; 0x2d
 80010e0:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e063      	b.n	80011b0 <Set_Brightness+0xe0>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 80010e8:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <Set_Brightness+0xf8>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	7919      	ldrb	r1, [r3, #4]
 80010f2:	4a35      	ldr	r2, [pc, #212]	; (80011c8 <Set_Brightness+0xf8>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3306      	adds	r3, #6
 80010f8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	e050      	b.n	80011a4 <Set_Brightness+0xd4>
		{
			float angle = 90-brightness;  // in degrees
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fdc9 	bl	8000ca0 <__aeabi_i2f>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff f980 	bl	8000418 <__aeabi_f2d>
 8001118:	a329      	add	r3, pc, #164	; (adr r3, 80011c0 <Set_Brightness+0xf0>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff f9d3 	bl	80004c8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <Set_Brightness+0xfc>)
 8001130:	f7ff faf4 	bl	800071c <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fca6 	bl	8000a8c <__aeabi_d2f>
 8001140:	4603      	mov	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 8001144:	4a20      	ldr	r2, [pc, #128]	; (80011c8 <Set_Brightness+0xf8>)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	441a      	add	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4413      	add	r3, r2
 8001150:	3304      	adds	r3, #4
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f94d 	bl	80003f4 <__aeabi_i2d>
 800115a:	4604      	mov	r4, r0
 800115c:	460d      	mov	r5, r1
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff f95a 	bl	8000418 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f003 fff0 	bl	8005150 <tan>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff fad0 	bl	800071c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fc62 	bl	8000a4c <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	b2d9      	uxtb	r1, r3
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <Set_Brightness+0xf8>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	441a      	add	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4413      	add	r3, r2
 8001198:	3318      	adds	r3, #24
 800119a:	460a      	mov	r2, r1
 800119c:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	ddab      	ble.n	8001102 <Set_Brightness+0x32>
	for (int i=0; i<MAX_LED; i++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	dd98      	ble.n	80010e8 <Set_Brightness+0x18>
		}
	}

#endif

}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	53c8d4f1 	.word	0x53c8d4f1
 80011c4:	400921fb 	.word	0x400921fb
 80011c8:	20000034 	.word	0x20000034
 80011cc:	40668000 	.word	0x40668000

080011d0 <WS2813_Send>:

void WS2813_Send ()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	e03a      	b.n	8001256 <WS2813_Send+0x86>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 80011e0:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <WS2813_Send+0xe0>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	7e5b      	ldrb	r3, [r3, #25]
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	4930      	ldr	r1, [pc, #192]	; (80012b0 <WS2813_Send+0xe0>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	7e9b      	ldrb	r3, [r3, #26]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	431a      	orrs	r2, r3
 80011fa:	492d      	ldr	r1, [pc, #180]	; (80012b0 <WS2813_Send+0xe0>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	7edb      	ldrb	r3, [r3, #27]
 8001204:	4313      	orrs	r3, r2
 8001206:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001208:	2317      	movs	r3, #23
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	e01d      	b.n	800124a <WS2813_Send+0x7a>
		{
			if (color&(1<<i))
 800120e:	2201      	movs	r2, #1
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <WS2813_Send+0x60>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 8001220:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <WS2813_Send+0xe0>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3314      	adds	r3, #20
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	809a      	strh	r2, [r3, #4]
 800122e:	e006      	b.n	800123e <WS2813_Send+0x6e>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <WS2813_Send+0xe0>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3314      	adds	r3, #20
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	2214      	movs	r2, #20
 800123c:	809a      	strh	r2, [r3, #4]

			indx++;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3b01      	subs	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	dade      	bge.n	800120e <WS2813_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	3301      	adds	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b04      	cmp	r3, #4
 800125a:	ddc1      	ble.n	80011e0 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	e00c      	b.n	800127c <WS2813_Send+0xac>
	{
		ws_config.pwmData[indx] = 0;
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <WS2813_Send+0xe0>)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3314      	adds	r3, #20
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	2200      	movs	r2, #0
 800126e:	809a      	strh	r2, [r3, #4]
		indx++;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3301      	adds	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b31      	cmp	r3, #49	; 0x31
 8001280:	ddef      	ble.n	8001262 <WS2813_Send+0x92>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <WS2813_Send+0xe0>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <WS2813_Send+0xe4>)
 800128c:	2104      	movs	r1, #4
 800128e:	f002 ff73 	bl	8004178 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 8001292:	bf00      	nop
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <WS2813_Send+0xe0>)
 8001296:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0fa      	beq.n	8001294 <WS2813_Send+0xc4>
	ws_config.datasentflag = 0;
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <WS2813_Send+0xe0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000034 	.word	0x20000034
 80012b4:	20000060 	.word	0x20000060

080012b8 <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d108      	bne.n	80012dc <Color_To_RGB+0x24>
		rgb->r = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2214      	movs	r2, #20
 80012da:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <Color_To_RGB+0x3c>
		rgb->r = 255;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d108      	bne.n	800130c <Color_To_RGB+0x54>
		rgb->r = 255;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	22ff      	movs	r2, #255	; 0xff
 80012fe:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d108      	bne.n	8001324 <Color_To_RGB+0x6c>
		rgb->r = 255;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	22ff      	movs	r2, #255	; 0xff
 8001316:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d108      	bne.n	800133c <Color_To_RGB+0x84>
		rgb->r = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	22c8      	movs	r2, #200	; 0xc8
 800133a:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d108      	bne.n	8001354 <Color_To_RGB+0x9c>
		rgb->r = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	709a      	strb	r2, [r3, #2]
	}
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	461a      	mov	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	789b      	ldrb	r3, [r3, #2]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fe7b 	bl	8001074 <Set_LED>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff8c 	bl	80012b8 <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4619      	mov	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffd9 	bl	800135e <Set_LED_From_RGB>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2104      	movs	r1, #4
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f872 	bl	80044ac <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000034 	.word	0x20000034

080013dc <Clear_All_LED>:

void Clear_All_LED()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	e007      	b.n	80013f8 <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2105      	movs	r1, #5
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffca 	bl	8001386 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	3301      	adds	r3, #1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d9f4      	bls.n	80013e8 <Clear_All_LED+0xc>
	}
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 fb43 	bl	8001a98 <HAL_Init>

  /* USER CODE BEGIN Init */
  Strip_Set_Timer(&htim2);
 8001412:	481b      	ldr	r0, [pc, #108]	; (8001480 <main+0x78>)
 8001414:	f7ff fde4 	bl	8000fe0 <Strip_Set_Timer>
  Strip_Clear();
 8001418:	f7ff fe11 	bl	800103e <Strip_Clear>
  Set_Brightness(5);
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff fe57 	bl	80010d0 <Set_Brightness>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001422:	f000 f831 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001426:	f000 f98d 	bl	8001744 <MX_GPIO_Init>
  MX_DMA_Init();
 800142a:	f000 f96d 	bl	8001708 <MX_DMA_Init>
  MX_I2C1_Init();
 800142e:	f000 f86d 	bl	800150c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001432:	f000 f8e9 	bl	8001608 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001436:	f000 f897 	bl	8001568 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(71<<1), 3, 5);

  BMP_Init_Default_Addr(&hi2c1);
 800143a:	4812      	ldr	r0, [pc, #72]	; (8001484 <main+0x7c>)
 800143c:	f7ff fc84 	bl	8000d48 <BMP_Init_Default_Addr>
  enum BMP_Power_Mode bmp_mode = BMP_Get_Mode();
 8001440:	f7ff fdac 	bl	8000f9c <BMP_Get_Mode>
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  uint8_t bmp_status = BMP_Get_Device_Status();
 8001448:	f7ff fd50 	bl	8000eec <BMP_Get_Device_Status>
 800144c:	4603      	mov	r3, r0
 800144e:	71bb      	strb	r3, [r7, #6]
  uint16_t temp_c = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	80bb      	strh	r3, [r7, #4]
  uint16_t pressure = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	807b      	strh	r3, [r7, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BMP_Read_Data(&temp_c, &pressure);
 8001458:	1cba      	adds	r2, r7, #2
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fd72 	bl	8000f48 <BMP_Read_Data>
	Strip_Progress_Bar_Single_Color(temp_c - 20, GREEN);
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3b14      	subs	r3, #20
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fdc1 	bl	8000ff6 <Strip_Progress_Bar_Single_Color>
	Strip_Send();
 8001474:	f7ff fde9 	bl	800104a <Strip_Send>
	HAL_Delay(100);
 8001478:	2064      	movs	r0, #100	; 0x64
 800147a:	f000 fb6f 	bl	8001b5c <HAL_Delay>
	BMP_Read_Data(&temp_c, &pressure);
 800147e:	e7eb      	b.n	8001458 <main+0x50>
 8001480:	20000254 	.word	0x20000254
 8001484:	200001b8 	.word	0x200001b8

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	; 0x40
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2228      	movs	r2, #40	; 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fe52 	bl	8005140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2310      	movs	r3, #16
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014be:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f9a7 	bl	800381c <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014d4:	f000 f98a 	bl	80017ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2102      	movs	r1, #2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fc14 	bl	8003d20 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014fe:	f000 f975 	bl	80017ec <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3740      	adds	r7, #64	; 0x40
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C1_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_I2C1_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_I2C1_Init+0x50>)
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_I2C1_Init+0x58>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_I2C1_Init+0x50>)
 800152a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_I2C1_Init+0x50>)
 800154a:	f001 f839 	bl	80025c0 <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 f94a 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200001b8 	.word	0x200001b8
 8001560:	40005400 	.word	0x40005400
 8001564:	000186a0 	.word	0x000186a0

08001568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM1_Init+0x98>)
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <MX_TIM1_Init+0x9c>)
 8001588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM1_Init+0x98>)
 800158c:	2203      	movs	r2, #3
 800158e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM1_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM1_Init+0x98>)
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM1_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM1_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM1_Init+0x98>)
 80015b2:	f002 fd39 	bl	8004028 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 f916 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ce:	f003 f8e9 	bl	80047a4 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015d8:	f000 f908 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ea:	f003 fd27 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015f4:	f000 f8fa 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000020c 	.word	0x2000020c
 8001604:	40012c00 	.word	0x40012c00

08001608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <MX_TIM2_Init+0xfc>)
 800163a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <MX_TIM2_Init+0xfc>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <MX_TIM2_Init+0xfc>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <MX_TIM2_Init+0xfc>)
 800164e:	223f      	movs	r2, #63	; 0x3f
 8001650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <MX_TIM2_Init+0xfc>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <MX_TIM2_Init+0xfc>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800165e:	4829      	ldr	r0, [pc, #164]	; (8001704 <MX_TIM2_Init+0xfc>)
 8001660:	f002 fce2 	bl	8004028 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800166a:	f000 f8bf 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	4822      	ldr	r0, [pc, #136]	; (8001704 <MX_TIM2_Init+0xfc>)
 800167c:	f003 f892 	bl	80047a4 <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001686:	f000 f8b1 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800168a:	481e      	ldr	r0, [pc, #120]	; (8001704 <MX_TIM2_Init+0xfc>)
 800168c:	f002 fd1b 	bl	80040c6 <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001696:	f000 f8a9 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	4619      	mov	r1, r3
 80016a8:	4816      	ldr	r0, [pc, #88]	; (8001704 <MX_TIM2_Init+0xfc>)
 80016aa:	f003 fcc7 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016b4:	f000 f89a 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	; 0x60
 80016ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_TIM2_Init+0xfc>)
 80016d0:	f002 ffaa 	bl	8004628 <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80016da:	f000 f887 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2204      	movs	r2, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <MX_TIM2_Init+0xfc>)
 80016e6:	f002 ff9f 	bl	8004628 <HAL_TIM_PWM_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80016f0:	f000 f87c 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <MX_TIM2_Init+0xfc>)
 80016f6:	f000 f941 	bl	800197c <HAL_TIM_MspPostInit>

}
 80016fa:	bf00      	nop
 80016fc:	3738      	adds	r7, #56	; 0x38
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000254 	.word	0x20000254

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_DMA_Init+0x38>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <MX_DMA_Init+0x38>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_DMA_Init+0x38>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2011      	movs	r0, #17
 800172c:	f000 fb11 	bl	8001d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001730:	2011      	movs	r0, #17
 8001732:	f000 fb2a 	bl	8001d8a <HAL_NVIC_EnableIRQ>

}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <MX_GPIO_Init+0x9c>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <MX_GPIO_Init+0x9c>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <MX_GPIO_Init+0x9c>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_GPIO_Init+0x9c>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <MX_GPIO_Init+0x9c>)
 8001776:	f043 0308 	orr.w	r3, r3, #8
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_GPIO_Init+0x9c>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	213c      	movs	r1, #60	; 0x3c
 800178c:	4815      	ldr	r0, [pc, #84]	; (80017e4 <MX_GPIO_Init+0xa0>)
 800178e:	f000 feff 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_GPIO_Init+0xa4>)
 800179a:	f000 fef9 	bl	8002590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800179e:	233c      	movs	r3, #60	; 0x3c
 80017a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2302      	movs	r3, #2
 80017ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4619      	mov	r1, r3
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <MX_GPIO_Init+0xa0>)
 80017b6:	f000 fd67 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80017ba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80017be:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2302      	movs	r3, #2
 80017ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	4619      	mov	r1, r3
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_GPIO_Init+0xa4>)
 80017d4:	f000 fd58 	bl	8002288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010800 	.word	0x40010800
 80017e8:	40010c00 	.word	0x40010c00

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <Error_Handler+0x8>
	...

080017f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_MspInit+0x40>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_MspInit+0x40>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_MspInit+0x40>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_MspInit+0x40>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_MspInit+0x40>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_MspInit+0x40>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <HAL_I2C_MspInit+0x70>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d123      	bne.n	80018a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_I2C_MspInit+0x74>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_I2C_MspInit+0x74>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_I2C_MspInit+0x74>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001878:	2312      	movs	r3, #18
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <HAL_I2C_MspInit+0x78>)
 8001888:	f000 fcfe 	bl	8002288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_I2C_MspInit+0x74>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <HAL_I2C_MspInit+0x74>)
 8001892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001896:	61d3      	str	r3, [r2, #28]
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_I2C_MspInit+0x74>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40005400 	.word	0x40005400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010c00 	.word	0x40010c00

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_TIM_Base_MspInit+0xb4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10c      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a28      	ldr	r2, [pc, #160]	; (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d4:	6193      	str	r3, [r2, #24]
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018e2:	e03e      	b.n	8001962 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ec:	d139      	bne.n	8001962 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 800190a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800190e:	2210      	movs	r2, #16
 8001910:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001924:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800193c:	f000 fa40 	bl	8001dc0 <HAL_DMA_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8001946:	f7ff ff51 	bl	80017ec <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
 8001950:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
 800195c:	4a05      	ldr	r2, [pc, #20]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40021000 	.word	0x40021000
 8001974:	2000029c 	.word	0x2000029c
 8001978:	40020080 	.word	0x40020080

0800197c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199a:	d117      	bne.n	80019cc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_TIM_MspPostInit+0x58>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <HAL_TIM_MspPostInit+0x58>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_TIM_MspPostInit+0x58>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019b4:	2303      	movs	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2302      	movs	r3, #2
 80019be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4619      	mov	r1, r3
 80019c6:	4804      	ldr	r0, [pc, #16]	; (80019d8 <HAL_TIM_MspPostInit+0x5c>)
 80019c8:	f000 fc5e 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010800 	.word	0x40010800

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a22:	f000 f87f 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <DMA1_Channel7_IRQHandler+0x10>)
 8001a32:	f000 faf5 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000029c 	.word	0x2000029c

08001a40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a4e:	490d      	ldr	r1, [pc, #52]	; (8001a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a64:	4c0a      	ldr	r4, [pc, #40]	; (8001a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a72:	f7ff ffe5 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a76:	f003 fb3f 	bl	80050f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a7a:	f7ff fcc5 	bl	8001408 <main>
  bx lr
 8001a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a88:	08006440 	.word	0x08006440
  ldr r2, =_sbss
 8001a8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a90:	200002e4 	.word	0x200002e4

08001a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC1_2_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_Init+0x28>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_Init+0x28>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f947 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff fea0 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f95f 	bl	8001da6 <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 f927 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_IncTick+0x1c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_IncTick+0x20>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_IncTick+0x20>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000008 	.word	0x20000008
 8001b44:	200002e0 	.word	0x200002e0

08001b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_GetTick+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	200002e0 	.word	0x200002e0

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fff0 	bl	8001b48 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffe0 	bl	8001b48 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4906      	ldr	r1, [pc, #24]	; (8001c3c <__NVIC_EnableIRQ+0x34>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff90 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff2d 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff42 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff90 	bl	8001c94 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5f 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff35 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa2 	bl	8001cf8 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e043      	b.n	8001e5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_DMA_Init+0xa8>)
 8001dde:	4413      	add	r3, r2
 8001de0:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <HAL_DMA_Init+0xac>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	009a      	lsls	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_DMA_Init+0xb0>)
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	bffdfff8 	.word	0xbffdfff8
 8001e6c:	cccccccd 	.word	0xcccccccd
 8001e70:	40020000 	.word	0x40020000

08001e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Start_IT+0x20>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e04a      	b.n	8001f2a <HAL_DMA_Start_IT+0xb6>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d13a      	bne.n	8001f1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f9ae 	bl	800222c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 020e 	orr.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e00f      	b.n	8001f0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0204 	bic.w	r2, r2, #4
 8001ef8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 020a 	orr.w	r2, r2, #10
 8001f08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e005      	b.n	8001f28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
 8001f26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d005      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e051      	b.n	8001ffa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 020e 	bic.w	r2, r2, #14
 8001f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_DMA_Abort_IT+0xd0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d029      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0xa0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a20      	ldr	r2, [pc, #128]	; (8002008 <HAL_DMA_Abort_IT+0xd4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d022      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x9c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_DMA_Abort_IT+0xd8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d01a      	beq.n	8001fca <HAL_DMA_Abort_IT+0x96>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_DMA_Abort_IT+0xdc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d012      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0x90>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_DMA_Abort_IT+0xe0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00a      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x8a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_DMA_Abort_IT+0xe4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d102      	bne.n	8001fb8 <HAL_DMA_Abort_IT+0x84>
 8001fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb6:	e00e      	b.n	8001fd6 <HAL_DMA_Abort_IT+0xa2>
 8001fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fbc:	e00b      	b.n	8001fd6 <HAL_DMA_Abort_IT+0xa2>
 8001fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc2:	e008      	b.n	8001fd6 <HAL_DMA_Abort_IT+0xa2>
 8001fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc8:	e005      	b.n	8001fd6 <HAL_DMA_Abort_IT+0xa2>
 8001fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fce:	e002      	b.n	8001fd6 <HAL_DMA_Abort_IT+0xa2>
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	e000      	b.n	8001fd6 <HAL_DMA_Abort_IT+0xa2>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_DMA_Abort_IT+0xe8>)
 8001fd8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
    } 
  }
  return status;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40020008 	.word	0x40020008
 8002008:	4002001c 	.word	0x4002001c
 800200c:	40020030 	.word	0x40020030
 8002010:	40020044 	.word	0x40020044
 8002014:	40020058 	.word	0x40020058
 8002018:	4002006c 	.word	0x4002006c
 800201c:	40020000 	.word	0x40020000

08002020 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2204      	movs	r2, #4
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d04f      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xc8>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04a      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d107      	bne.n	8002070 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0204 	bic.w	r2, r2, #4
 800206e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a66      	ldr	r2, [pc, #408]	; (8002210 <HAL_DMA_IRQHandler+0x1f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d029      	beq.n	80020ce <HAL_DMA_IRQHandler+0xae>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a65      	ldr	r2, [pc, #404]	; (8002214 <HAL_DMA_IRQHandler+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d022      	beq.n	80020ca <HAL_DMA_IRQHandler+0xaa>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a63      	ldr	r2, [pc, #396]	; (8002218 <HAL_DMA_IRQHandler+0x1f8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xa4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a62      	ldr	r2, [pc, #392]	; (800221c <HAL_DMA_IRQHandler+0x1fc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d012      	beq.n	80020be <HAL_DMA_IRQHandler+0x9e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a60      	ldr	r2, [pc, #384]	; (8002220 <HAL_DMA_IRQHandler+0x200>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00a      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x98>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a5f      	ldr	r2, [pc, #380]	; (8002224 <HAL_DMA_IRQHandler+0x204>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d102      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x92>
 80020ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020b0:	e00e      	b.n	80020d0 <HAL_DMA_IRQHandler+0xb0>
 80020b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020b6:	e00b      	b.n	80020d0 <HAL_DMA_IRQHandler+0xb0>
 80020b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020bc:	e008      	b.n	80020d0 <HAL_DMA_IRQHandler+0xb0>
 80020be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020c2:	e005      	b.n	80020d0 <HAL_DMA_IRQHandler+0xb0>
 80020c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c8:	e002      	b.n	80020d0 <HAL_DMA_IRQHandler+0xb0>
 80020ca:	2340      	movs	r3, #64	; 0x40
 80020cc:	e000      	b.n	80020d0 <HAL_DMA_IRQHandler+0xb0>
 80020ce:	2304      	movs	r3, #4
 80020d0:	4a55      	ldr	r2, [pc, #340]	; (8002228 <HAL_DMA_IRQHandler+0x208>)
 80020d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8094 	beq.w	8002206 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020e6:	e08e      	b.n	8002206 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2202      	movs	r2, #2
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d056      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x186>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d051      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 020a 	bic.w	r2, r2, #10
 800211e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_DMA_IRQHandler+0x1f0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d029      	beq.n	8002186 <HAL_DMA_IRQHandler+0x166>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a37      	ldr	r2, [pc, #220]	; (8002214 <HAL_DMA_IRQHandler+0x1f4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_IRQHandler+0x162>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a35      	ldr	r2, [pc, #212]	; (8002218 <HAL_DMA_IRQHandler+0x1f8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01a      	beq.n	800217c <HAL_DMA_IRQHandler+0x15c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a34      	ldr	r2, [pc, #208]	; (800221c <HAL_DMA_IRQHandler+0x1fc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d012      	beq.n	8002176 <HAL_DMA_IRQHandler+0x156>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a32      	ldr	r2, [pc, #200]	; (8002220 <HAL_DMA_IRQHandler+0x200>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00a      	beq.n	8002170 <HAL_DMA_IRQHandler+0x150>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_DMA_IRQHandler+0x204>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d102      	bne.n	800216a <HAL_DMA_IRQHandler+0x14a>
 8002164:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002168:	e00e      	b.n	8002188 <HAL_DMA_IRQHandler+0x168>
 800216a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216e:	e00b      	b.n	8002188 <HAL_DMA_IRQHandler+0x168>
 8002170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002174:	e008      	b.n	8002188 <HAL_DMA_IRQHandler+0x168>
 8002176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800217a:	e005      	b.n	8002188 <HAL_DMA_IRQHandler+0x168>
 800217c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002180:	e002      	b.n	8002188 <HAL_DMA_IRQHandler+0x168>
 8002182:	2320      	movs	r3, #32
 8002184:	e000      	b.n	8002188 <HAL_DMA_IRQHandler+0x168>
 8002186:	2302      	movs	r3, #2
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_DMA_IRQHandler+0x208>)
 800218a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d034      	beq.n	8002206 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021a4:	e02f      	b.n	8002206 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2208      	movs	r2, #8
 80021ac:	409a      	lsls	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d028      	beq.n	8002208 <HAL_DMA_IRQHandler+0x1e8>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d023      	beq.n	8002208 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 020e 	bic.w	r2, r2, #14
 80021ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
    }
  }
  return;
 8002206:	bf00      	nop
 8002208:	bf00      	nop
}
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40020008 	.word	0x40020008
 8002214:	4002001c 	.word	0x4002001c
 8002218:	40020030 	.word	0x40020030
 800221c:	40020044 	.word	0x40020044
 8002220:	40020058 	.word	0x40020058
 8002224:	4002006c 	.word	0x4002006c
 8002228:	40020000 	.word	0x40020000

0800222c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f202 	lsl.w	r2, r1, r2
 8002248:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b10      	cmp	r3, #16
 8002258:	d108      	bne.n	800226c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800226a:	e007      	b.n	800227c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	60da      	str	r2, [r3, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
	...

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b08b      	sub	sp, #44	; 0x2c
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229a:	e169      	b.n	8002570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800229c:	2201      	movs	r2, #1
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 8158 	bne.w	800256a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a9a      	ldr	r2, [pc, #616]	; (8002528 <HAL_GPIO_Init+0x2a0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d05e      	beq.n	8002382 <HAL_GPIO_Init+0xfa>
 80022c4:	4a98      	ldr	r2, [pc, #608]	; (8002528 <HAL_GPIO_Init+0x2a0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d875      	bhi.n	80023b6 <HAL_GPIO_Init+0x12e>
 80022ca:	4a98      	ldr	r2, [pc, #608]	; (800252c <HAL_GPIO_Init+0x2a4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d058      	beq.n	8002382 <HAL_GPIO_Init+0xfa>
 80022d0:	4a96      	ldr	r2, [pc, #600]	; (800252c <HAL_GPIO_Init+0x2a4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d86f      	bhi.n	80023b6 <HAL_GPIO_Init+0x12e>
 80022d6:	4a96      	ldr	r2, [pc, #600]	; (8002530 <HAL_GPIO_Init+0x2a8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d052      	beq.n	8002382 <HAL_GPIO_Init+0xfa>
 80022dc:	4a94      	ldr	r2, [pc, #592]	; (8002530 <HAL_GPIO_Init+0x2a8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d869      	bhi.n	80023b6 <HAL_GPIO_Init+0x12e>
 80022e2:	4a94      	ldr	r2, [pc, #592]	; (8002534 <HAL_GPIO_Init+0x2ac>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04c      	beq.n	8002382 <HAL_GPIO_Init+0xfa>
 80022e8:	4a92      	ldr	r2, [pc, #584]	; (8002534 <HAL_GPIO_Init+0x2ac>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d863      	bhi.n	80023b6 <HAL_GPIO_Init+0x12e>
 80022ee:	4a92      	ldr	r2, [pc, #584]	; (8002538 <HAL_GPIO_Init+0x2b0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d046      	beq.n	8002382 <HAL_GPIO_Init+0xfa>
 80022f4:	4a90      	ldr	r2, [pc, #576]	; (8002538 <HAL_GPIO_Init+0x2b0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d85d      	bhi.n	80023b6 <HAL_GPIO_Init+0x12e>
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d82a      	bhi.n	8002354 <HAL_GPIO_Init+0xcc>
 80022fe:	2b12      	cmp	r3, #18
 8002300:	d859      	bhi.n	80023b6 <HAL_GPIO_Init+0x12e>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <HAL_GPIO_Init+0x80>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002383 	.word	0x08002383
 800230c:	0800235d 	.word	0x0800235d
 8002310:	0800236f 	.word	0x0800236f
 8002314:	080023b1 	.word	0x080023b1
 8002318:	080023b7 	.word	0x080023b7
 800231c:	080023b7 	.word	0x080023b7
 8002320:	080023b7 	.word	0x080023b7
 8002324:	080023b7 	.word	0x080023b7
 8002328:	080023b7 	.word	0x080023b7
 800232c:	080023b7 	.word	0x080023b7
 8002330:	080023b7 	.word	0x080023b7
 8002334:	080023b7 	.word	0x080023b7
 8002338:	080023b7 	.word	0x080023b7
 800233c:	080023b7 	.word	0x080023b7
 8002340:	080023b7 	.word	0x080023b7
 8002344:	080023b7 	.word	0x080023b7
 8002348:	080023b7 	.word	0x080023b7
 800234c:	08002365 	.word	0x08002365
 8002350:	08002379 	.word	0x08002379
 8002354:	4a79      	ldr	r2, [pc, #484]	; (800253c <HAL_GPIO_Init+0x2b4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800235a:	e02c      	b.n	80023b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	623b      	str	r3, [r7, #32]
          break;
 8002362:	e029      	b.n	80023b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	3304      	adds	r3, #4
 800236a:	623b      	str	r3, [r7, #32]
          break;
 800236c:	e024      	b.n	80023b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	3308      	adds	r3, #8
 8002374:	623b      	str	r3, [r7, #32]
          break;
 8002376:	e01f      	b.n	80023b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	330c      	adds	r3, #12
 800237e:	623b      	str	r3, [r7, #32]
          break;
 8002380:	e01a      	b.n	80023b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800238a:	2304      	movs	r3, #4
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e013      	b.n	80023b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002398:	2308      	movs	r3, #8
 800239a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	611a      	str	r2, [r3, #16]
          break;
 80023a2:	e009      	b.n	80023b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a4:	2308      	movs	r3, #8
 80023a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	615a      	str	r2, [r3, #20]
          break;
 80023ae:	e003      	b.n	80023b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
          break;
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x130>
          break;
 80023b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2bff      	cmp	r3, #255	; 0xff
 80023bc:	d801      	bhi.n	80023c2 <HAL_GPIO_Init+0x13a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	e001      	b.n	80023c6 <HAL_GPIO_Init+0x13e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2bff      	cmp	r3, #255	; 0xff
 80023cc:	d802      	bhi.n	80023d4 <HAL_GPIO_Init+0x14c>
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	e002      	b.n	80023da <HAL_GPIO_Init+0x152>
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	3b08      	subs	r3, #8
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	210f      	movs	r1, #15
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	401a      	ands	r2, r3
 80023ec:	6a39      	ldr	r1, [r7, #32]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	431a      	orrs	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80b1 	beq.w	800256a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002408:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002420:	4a48      	ldr	r2, [pc, #288]	; (8002544 <HAL_GPIO_Init+0x2bc>)
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a40      	ldr	r2, [pc, #256]	; (8002548 <HAL_GPIO_Init+0x2c0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_GPIO_Init+0x1ec>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3f      	ldr	r2, [pc, #252]	; (800254c <HAL_GPIO_Init+0x2c4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00d      	beq.n	8002470 <HAL_GPIO_Init+0x1e8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <HAL_GPIO_Init+0x2c8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <HAL_GPIO_Init+0x1e4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3d      	ldr	r2, [pc, #244]	; (8002554 <HAL_GPIO_Init+0x2cc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_GPIO_Init+0x1e0>
 8002464:	2303      	movs	r3, #3
 8002466:	e006      	b.n	8002476 <HAL_GPIO_Init+0x1ee>
 8002468:	2304      	movs	r3, #4
 800246a:	e004      	b.n	8002476 <HAL_GPIO_Init+0x1ee>
 800246c:	2302      	movs	r3, #2
 800246e:	e002      	b.n	8002476 <HAL_GPIO_Init+0x1ee>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_GPIO_Init+0x1ee>
 8002474:	2300      	movs	r3, #0
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	f002 0203 	and.w	r2, r2, #3
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	4093      	lsls	r3, r2
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002486:	492f      	ldr	r1, [pc, #188]	; (8002544 <HAL_GPIO_Init+0x2bc>)
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	492c      	ldr	r1, [pc, #176]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ae:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	4928      	ldr	r1, [pc, #160]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4922      	ldr	r1, [pc, #136]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	43db      	mvns	r3, r3
 80024de:	491e      	ldr	r1, [pc, #120]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	4918      	ldr	r1, [pc, #96]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	43db      	mvns	r3, r3
 8002506:	4914      	ldr	r1, [pc, #80]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 8002508:	4013      	ands	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d021      	beq.n	800255c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	490e      	ldr	r1, [pc, #56]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	60cb      	str	r3, [r1, #12]
 8002524:	e021      	b.n	800256a <HAL_GPIO_Init+0x2e2>
 8002526:	bf00      	nop
 8002528:	10320000 	.word	0x10320000
 800252c:	10310000 	.word	0x10310000
 8002530:	10220000 	.word	0x10220000
 8002534:	10210000 	.word	0x10210000
 8002538:	10120000 	.word	0x10120000
 800253c:	10110000 	.word	0x10110000
 8002540:	40021000 	.word	0x40021000
 8002544:	40010000 	.word	0x40010000
 8002548:	40010800 	.word	0x40010800
 800254c:	40010c00 	.word	0x40010c00
 8002550:	40011000 	.word	0x40011000
 8002554:	40011400 	.word	0x40011400
 8002558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_GPIO_Init+0x304>)
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	43db      	mvns	r3, r3
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <HAL_GPIO_Init+0x304>)
 8002566:	4013      	ands	r3, r2
 8002568:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	3301      	adds	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	f47f ae8e 	bne.w	800229c <HAL_GPIO_Init+0x14>
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	372c      	adds	r7, #44	; 0x2c
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40010400 	.word	0x40010400

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	611a      	str	r2, [r3, #16]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e12b      	b.n	800282a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff f928 	bl	800183c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002624:	f001 fcce 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8002628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a81      	ldr	r2, [pc, #516]	; (8002834 <HAL_I2C_Init+0x274>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d807      	bhi.n	8002644 <HAL_I2C_Init+0x84>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a80      	ldr	r2, [pc, #512]	; (8002838 <HAL_I2C_Init+0x278>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e006      	b.n	8002652 <HAL_I2C_Init+0x92>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a7d      	ldr	r2, [pc, #500]	; (800283c <HAL_I2C_Init+0x27c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0e7      	b.n	800282a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4a78      	ldr	r2, [pc, #480]	; (8002840 <HAL_I2C_Init+0x280>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a6a      	ldr	r2, [pc, #424]	; (8002834 <HAL_I2C_Init+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d802      	bhi.n	8002694 <HAL_I2C_Init+0xd4>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3301      	adds	r3, #1
 8002692:	e009      	b.n	80026a8 <HAL_I2C_Init+0xe8>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a69      	ldr	r2, [pc, #420]	; (8002844 <HAL_I2C_Init+0x284>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	3301      	adds	r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	495c      	ldr	r1, [pc, #368]	; (8002834 <HAL_I2C_Init+0x274>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d819      	bhi.n	80026fc <HAL_I2C_Init+0x13c>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e59      	subs	r1, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026dc:	400b      	ands	r3, r1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_I2C_Init+0x138>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e59      	subs	r1, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f6:	e051      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e04f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <HAL_I2C_Init+0x168>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e012      	b.n	800274e <HAL_I2C_Init+0x18e>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	0099      	lsls	r1, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Init+0x196>
 8002752:	2301      	movs	r3, #1
 8002754:	e022      	b.n	800279c <HAL_I2C_Init+0x1dc>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10e      	bne.n	800277c <HAL_I2C_Init+0x1bc>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e58      	subs	r0, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	440b      	add	r3, r1
 800276c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277a:	e00f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e58      	subs	r0, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	0099      	lsls	r1, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	6809      	ldr	r1, [r1, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6911      	ldr	r1, [r2, #16]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68d2      	ldr	r2, [r2, #12]
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	000186a0 	.word	0x000186a0
 8002838:	001e847f 	.word	0x001e847f
 800283c:	003d08ff 	.word	0x003d08ff
 8002840:	431bde83 	.word	0x431bde83
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	460b      	mov	r3, r1
 800285c:	813b      	strh	r3, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002862:	f7ff f971 	bl	8001b48 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b20      	cmp	r3, #32
 8002872:	f040 80d9 	bne.w	8002a28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2319      	movs	r3, #25
 800287c:	2201      	movs	r2, #1
 800287e:	496d      	ldr	r1, [pc, #436]	; (8002a34 <HAL_I2C_Mem_Write+0x1ec>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fdef 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
 800288e:	e0cc      	b.n	8002a2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_I2C_Mem_Write+0x56>
 800289a:	2302      	movs	r3, #2
 800289c:	e0c5      	b.n	8002a2a <HAL_I2C_Mem_Write+0x1e2>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d007      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2221      	movs	r2, #33	; 0x21
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a3a      	ldr	r2, [r7, #32]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a4d      	ldr	r2, [pc, #308]	; (8002a38 <HAL_I2C_Mem_Write+0x1f0>)
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002906:	88f8      	ldrh	r0, [r7, #6]
 8002908:	893a      	ldrh	r2, [r7, #8]
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fc26 	bl	8003168 <I2C_RequestMemoryWrite>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d052      	beq.n	80029c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e081      	b.n	8002a2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fe70 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b04      	cmp	r3, #4
 800293c:	d107      	bne.n	800294e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e06b      	b.n	8002a2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b04      	cmp	r3, #4
 800298e:	d11b      	bne.n	80029c8 <HAL_I2C_Mem_Write+0x180>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d017      	beq.n	80029c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1aa      	bne.n	8002926 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fe5c 	bl	8003692 <I2C_WaitOnBTFFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00d      	beq.n	80029fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d107      	bne.n	80029f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e016      	b.n	8002a2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	00100002 	.word	0x00100002
 8002a38:	ffff0000 	.word	0xffff0000

08002a3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	; 0x30
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a5a:	f7ff f875 	bl	8001b48 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f040 8244 	bne.w	8002ef6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	4982      	ldr	r1, [pc, #520]	; (8002c80 <HAL_I2C_Mem_Read+0x244>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fcf3 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
 8002a86:	e237      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Mem_Read+0x5a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e230      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d007      	beq.n	8002abc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2222      	movs	r2, #34	; 0x22
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a62      	ldr	r2, [pc, #392]	; (8002c84 <HAL_I2C_Mem_Read+0x248>)
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002afe:	88f8      	ldrh	r0, [r7, #6]
 8002b00:	893a      	ldrh	r2, [r7, #8]
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fbc0 	bl	8003294 <I2C_RequestMemoryRead>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1ec      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e1c0      	b.n	8002ed0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d11e      	bne.n	8002b94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b66:	b672      	cpsid	i
}
 8002b68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b90:	b662      	cpsie	i
}
 8002b92:	e035      	b.n	8002c00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d11e      	bne.n	8002bda <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002baa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bd6:	b662      	cpsie	i
}
 8002bd8:	e012      	b.n	8002c00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002be8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c00:	e166      	b.n	8002ed0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	f200 811f 	bhi.w	8002e4a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d123      	bne.n	8002c5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fd7b 	bl	8003714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e167      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c5a:	e139      	b.n	8002ed0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d152      	bne.n	8002d0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_I2C_Mem_Read+0x24c>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fbf8 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e13c      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
 8002c7e:	bf00      	nop
 8002c80:	00100002 	.word	0x00100002
 8002c84:	ffff0000 	.word	0xffff0000
 8002c88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8c:	b672      	cpsid	i
}
 8002c8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd2:	b662      	cpsie	i
}
 8002cd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d08:	e0e2      	b.n	8002ed0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	2200      	movs	r2, #0
 8002d12:	497b      	ldr	r1, [pc, #492]	; (8002f00 <HAL_I2C_Mem_Read+0x4c4>)
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fba5 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0e9      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d6a:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_I2C_Mem_Read+0x4c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <HAL_I2C_Mem_Read+0x4cc>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a1a      	lsrs	r2, r3, #8
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00da      	lsls	r2, r3, #3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d118      	bne.n	8002dc2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002db2:	b662      	cpsie	i
}
 8002db4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e09a      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d1d9      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e12:	b662      	cpsie	i
}
 8002e14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e48:	e042      	b.n	8002ed0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fc60 	bl	8003714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e04c      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d118      	bne.n	8002ed0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f ae94 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
  }
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	00010004 	.word	0x00010004
 8002f04:	20000000 	.word	0x20000000
 8002f08:	14f8b589 	.word	0x14f8b589

08002f0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7fe fe14 	bl	8001b48 <HAL_GetTick>
 8002f20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 8111 	bne.w	8003156 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4988      	ldr	r1, [pc, #544]	; (8003160 <HAL_I2C_IsDeviceReady+0x254>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fa90 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e104      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_IsDeviceReady+0x50>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0fd      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d007      	beq.n	8002f82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2224      	movs	r2, #36	; 0x24
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a70      	ldr	r2, [pc, #448]	; (8003164 <HAL_I2C_IsDeviceReady+0x258>)
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fa4e 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fdc:	d103      	bne.n	8002fe6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0b6      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ff8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fda5 	bl	8001b48 <HAL_GetTick>
 8002ffe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800302e:	e025      	b.n	800307c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fe fd8a 	bl	8001b48 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <HAL_I2C_IsDeviceReady+0x13a>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	22a0      	movs	r2, #160	; 0xa0
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2ba0      	cmp	r3, #160	; 0xa0
 8003086:	d005      	beq.n	8003094 <HAL_I2C_IsDeviceReady+0x188>
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <HAL_I2C_IsDeviceReady+0x188>
 800308e:	7dbb      	ldrb	r3, [r7, #22]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0cd      	beq.n	8003030 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d129      	bne.n	80030fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2319      	movs	r3, #25
 80030d6:	2201      	movs	r2, #1
 80030d8:	4921      	ldr	r1, [pc, #132]	; (8003160 <HAL_I2C_IsDeviceReady+0x254>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f9c2 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e036      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e02c      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003116:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2319      	movs	r3, #25
 800311e:	2201      	movs	r2, #1
 8003120:	490f      	ldr	r1, [pc, #60]	; (8003160 <HAL_I2C_IsDeviceReady+0x254>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f99e 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e012      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3301      	adds	r3, #1
 8003136:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	f4ff af32 	bcc.w	8002fa6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	00100002 	.word	0x00100002
 8003164:	ffff0000 	.word	0xffff0000

08003168 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2200      	movs	r2, #0
 800319a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f960 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b8:	d103      	bne.n	80031c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e05f      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	492d      	ldr	r1, [pc, #180]	; (8003290 <I2C_RequestMemoryWrite+0x128>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f998 	bl	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e04c      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa02 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e02b      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	611a      	str	r2, [r3, #16]
 800323e:	e021      	b.n	8003284 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b29b      	uxth	r3, r3
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	6a39      	ldr	r1, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f9dc 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e005      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	00010002 	.word	0x00010002

08003294 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8c2 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f4:	d103      	bne.n	80032fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0aa      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	4952      	ldr	r1, [pc, #328]	; (8003460 <I2C_RequestMemoryRead+0x1cc>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f8fa 	bl	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e097      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f964 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b04      	cmp	r3, #4
 8003354:	d107      	bne.n	8003366 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e076      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]
 800337a:	e021      	b.n	80033c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800337c:	893b      	ldrh	r3, [r7, #8]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	b29b      	uxth	r3, r3
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f93e 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e050      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b6:	893b      	ldrh	r3, [r7, #8]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c2:	6a39      	ldr	r1, [r7, #32]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f923 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e035      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	2200      	movs	r2, #0
 8003404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f82b 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d103      	bne.n	800342c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e013      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	4906      	ldr	r1, [pc, #24]	; (8003460 <I2C_RequestMemoryRead+0x1cc>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f863 	bl	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	00010002 	.word	0x00010002

08003464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003474:	e025      	b.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d021      	beq.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fb63 	bl	8001b48 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e023      	b.n	800350a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10d      	bne.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	e00c      	b.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	429a      	cmp	r2, r3
 8003506:	d0b6      	beq.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003520:	e051      	b.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d123      	bne.n	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003540:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800354a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e046      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d021      	beq.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003582:	f7fe fae1 	bl	8001b48 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d302      	bcc.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d116      	bne.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e020      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10c      	bne.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	43da      	mvns	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4013      	ands	r3, r2
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e00b      	b.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d18d      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361c:	e02d      	b.n	800367a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f8ce 	bl	80037c0 <I2C_IsAcknowledgeFailed>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e02d      	b.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d021      	beq.n	800367a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7fe fa87 	bl	8001b48 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d116      	bne.n	800367a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e007      	b.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d1ca      	bne.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369e:	e02d      	b.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f88d 	bl	80037c0 <I2C_IsAcknowledgeFailed>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e02d      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d021      	beq.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fe fa46 	bl	8001b48 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d116      	bne.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e007      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d1ca      	bne.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003720:	e042      	b.n	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b10      	cmp	r3, #16
 800372e:	d119      	bne.n	8003764 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0210 	mvn.w	r2, #16
 8003738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e029      	b.n	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003764:	f7fe f9f0 	bl	8001b48 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d302      	bcc.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d116      	bne.n	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e007      	b.n	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d1b5      	bne.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d11b      	bne.n	8003810 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e272      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8087 	beq.w	800394a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800383c:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b04      	cmp	r3, #4
 8003846:	d00c      	beq.n	8003862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003848:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d112      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
 8003854:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d10b      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06c      	beq.n	8003948 <HAL_RCC_OscConfig+0x12c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d168      	bne.n	8003948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e24c      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x76>
 8003884:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7f      	ldr	r2, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e02e      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x98>
 800389a:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a7a      	ldr	r2, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b78      	ldr	r3, [pc, #480]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a77      	ldr	r2, [pc, #476]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0xbc>
 80038be:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a71      	ldr	r2, [pc, #452]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038d8:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe f926 	bl	8001b48 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe f922 	bl	8001b48 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e200      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xe4>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe f912 	bl	8001b48 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe f90e 	bl	8001b48 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1ec      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x10c>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c0      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4939      	ldr	r1, [pc, #228]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fe f8c7 	bl	8001b48 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fe f8c3 	bl	8001b48 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a1      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4927      	ldr	r1, [pc, #156]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe f8a6 	bl	8001b48 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fe f8a2 	bl	8001b48 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e180      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03a      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d019      	beq.n	8003a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fe f886 	bl	8001b48 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe f882 	bl	8001b48 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e160      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f000 fac4 	bl	8003fec <RCC_Delay>
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fe f86c 	bl	8001b48 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a72:	e00f      	b.n	8003a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe f868 	bl	8001b48 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d908      	bls.n	8003a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e146      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	42420000 	.word	0x42420000
 8003a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b92      	ldr	r3, [pc, #584]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e9      	bne.n	8003a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a6 	beq.w	8003bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b8b      	ldr	r3, [pc, #556]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b88      	ldr	r3, [pc, #544]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a87      	ldr	r2, [pc, #540]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]
 8003aca:	4b85      	ldr	r3, [pc, #532]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a7e      	ldr	r2, [pc, #504]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe f829 	bl	8001b48 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe f825 	bl	8001b48 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	; 0x64
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e103      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b75      	ldr	r3, [pc, #468]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x312>
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a6e      	ldr	r2, [pc, #440]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	e02d      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x334>
 8003b36:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a69      	ldr	r2, [pc, #420]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a66      	ldr	r2, [pc, #408]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	e01c      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x356>
 8003b58:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	4b5e      	ldr	r3, [pc, #376]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a5d      	ldr	r2, [pc, #372]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6213      	str	r3, [r2, #32]
 8003b70:	e00b      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b72:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a5a      	ldr	r2, [pc, #360]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d015      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fd ffd9 	bl	8001b48 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fd ffd5 	bl	8001b48 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0b1      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <HAL_RCC_OscConfig+0x37e>
 8003bbc:	e014      	b.n	8003be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd ffc3 	bl	8001b48 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd ffbf 	bl	8001b48 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e09b      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ee      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bee:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8087 	beq.w	8003d12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c04:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d061      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d146      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c18:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fd ff93 	bl	8001b48 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fd ff8f 	bl	8001b48 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e06d      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c38:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4921      	ldr	r1, [pc, #132]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a19      	ldr	r1, [r3, #32]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	430b      	orrs	r3, r1
 8003c72:	491b      	ldr	r1, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fd ff63 	bl	8001b48 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fd ff5f 	bl	8001b48 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e03d      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x46a>
 8003ca4:	e035      	b.n	8003d12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd ff4c 	bl	8001b48 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd ff48 	bl	8001b48 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e026      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x498>
 8003cd2:	e01e      	b.n	8003d12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e019      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_OscConfig+0x500>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0d0      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d910      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 0207 	bic.w	r2, r3, #7
 8003d4a:	4965      	ldr	r1, [pc, #404]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b8      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a58      	ldr	r2, [pc, #352]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	494d      	ldr	r1, [pc, #308]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d040      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d115      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e073      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06b      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4936      	ldr	r1, [pc, #216]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fd fe9a 	bl	8001b48 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fd fe96 	bl	8001b48 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e053      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d210      	bcs.n	8003e70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	4922      	ldr	r1, [pc, #136]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e032      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4916      	ldr	r1, [pc, #88]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eae:	f000 f821 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	490a      	ldr	r1, [pc, #40]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1cc>)
 8003ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd fdf8 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40022000 	.word	0x40022000
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	08006248 	.word	0x08006248
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	20000004 	.word	0x20000004

08003ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef4:	b490      	push	{r4, r7}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003efc:	1d3c      	adds	r4, r7, #4
 8003efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f04:	f240 2301 	movw	r3, #513	; 0x201
 8003f08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x40>
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x46>
 8003f32:	e02b      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f36:	623b      	str	r3, [r7, #32]
      break;
 8003f38:	e02b      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	0c9b      	lsrs	r3, r3, #18
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	3328      	adds	r3, #40	; 0x28
 8003f44:	443b      	add	r3, r7
 8003f46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d012      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	0c5b      	lsrs	r3, r3, #17
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	3328      	adds	r3, #40	; 0x28
 8003f62:	443b      	add	r3, r7
 8003f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f6e:	fb03 f202 	mul.w	r2, r3, r2
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7a:	e004      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	623b      	str	r3, [r7, #32]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f8e:	623b      	str	r3, [r7, #32]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	6a3b      	ldr	r3, [r7, #32]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc90      	pop	{r4, r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	08006238 	.word	0x08006238
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	003d0900 	.word	0x003d0900

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b02      	ldr	r3, [pc, #8]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	20000000 	.word	0x20000000

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc8:	f7ff fff2 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4903      	ldr	r1, [pc, #12]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08006258 	.word	0x08006258

08003fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <RCC_Delay+0x34>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <RCC_Delay+0x38>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0a5b      	lsrs	r3, r3, #9
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004008:	bf00      	nop
  }
  while (Delay --);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e5a      	subs	r2, r3, #1
 800400e:	60fa      	str	r2, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f9      	bne.n	8004008 <RCC_Delay+0x1c>
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20000000 	.word	0x20000000
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e041      	b.n	80040be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fc32 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 fd44 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e041      	b.n	800415c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f839 	bl	8004164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fcf5 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
	...

08004178 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start_DMA+0x28>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e022      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x6e>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d109      	bne.n	80041ba <HAL_TIM_PWM_Start_DMA+0x42>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e015      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x6e>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start_DMA+0x5c>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e008      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x6e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
 80041ec:	e14e      	b.n	800448c <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_TIM_PWM_Start_DMA+0x90>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e022      	b.n	800424e <HAL_TIM_PWM_Start_DMA+0xd6>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d109      	bne.n	8004222 <HAL_TIM_PWM_Start_DMA+0xaa>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	e015      	b.n	800424e <HAL_TIM_PWM_Start_DMA+0xd6>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d109      	bne.n	800423c <HAL_TIM_PWM_Start_DMA+0xc4>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e008      	b.n	800424e <HAL_TIM_PWM_Start_DMA+0xd6>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d024      	beq.n	800429c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start_DMA+0xea>
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e114      	b.n	800448c <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start_DMA+0xfa>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	e016      	b.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x128>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_PWM_Start_DMA+0x10a>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004280:	e00e      	b.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x128>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_PWM_Start_DMA+0x11a>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004290:	e006      	b.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x128>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800429a:	e001      	b.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0f5      	b.n	800448c <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	f200 80ae 	bhi.w	8004404 <HAL_TIM_PWM_Start_DMA+0x28c>
 80042a8:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <HAL_TIM_PWM_Start_DMA+0x138>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042e5 	.word	0x080042e5
 80042b4:	08004405 	.word	0x08004405
 80042b8:	08004405 	.word	0x08004405
 80042bc:	08004405 	.word	0x08004405
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	08004405 	.word	0x08004405
 80042c8:	08004405 	.word	0x08004405
 80042cc:	08004405 	.word	0x08004405
 80042d0:	08004375 	.word	0x08004375
 80042d4:	08004405 	.word	0x08004405
 80042d8:	08004405 	.word	0x08004405
 80042dc:	08004405 	.word	0x08004405
 80042e0:	080043bd 	.word	0x080043bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	4a6a      	ldr	r2, [pc, #424]	; (8004494 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	4a69      	ldr	r2, [pc, #420]	; (8004498 <HAL_TIM_PWM_Start_DMA+0x320>)
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	4a68      	ldr	r2, [pc, #416]	; (800449c <HAL_TIM_PWM_Start_DMA+0x324>)
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3334      	adds	r3, #52	; 0x34
 8004308:	461a      	mov	r2, r3
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	f7fd fdb2 	bl	8001e74 <HAL_DMA_Start_IT>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e0b8      	b.n	800448c <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004328:	60da      	str	r2, [r3, #12]
      break;
 800432a:	e06c      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	4a58      	ldr	r2, [pc, #352]	; (8004494 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	4a57      	ldr	r2, [pc, #348]	; (8004498 <HAL_TIM_PWM_Start_DMA+0x320>)
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	4a56      	ldr	r2, [pc, #344]	; (800449c <HAL_TIM_PWM_Start_DMA+0x324>)
 8004342:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3338      	adds	r3, #56	; 0x38
 8004350:	461a      	mov	r2, r3
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	f7fd fd8e 	bl	8001e74 <HAL_DMA_Start_IT>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e094      	b.n	800448c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004370:	60da      	str	r2, [r3, #12]
      break;
 8004372:	e048      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4a46      	ldr	r2, [pc, #280]	; (8004494 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4a45      	ldr	r2, [pc, #276]	; (8004498 <HAL_TIM_PWM_Start_DMA+0x320>)
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a44      	ldr	r2, [pc, #272]	; (800449c <HAL_TIM_PWM_Start_DMA+0x324>)
 800438a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	333c      	adds	r3, #60	; 0x3c
 8004398:	461a      	mov	r2, r3
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	f7fd fd6a 	bl	8001e74 <HAL_DMA_Start_IT>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e070      	b.n	800448c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b8:	60da      	str	r2, [r3, #12]
      break;
 80043ba:	e024      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	4a34      	ldr	r2, [pc, #208]	; (8004494 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4a33      	ldr	r2, [pc, #204]	; (8004498 <HAL_TIM_PWM_Start_DMA+0x320>)
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4a32      	ldr	r2, [pc, #200]	; (800449c <HAL_TIM_PWM_Start_DMA+0x324>)
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3340      	adds	r3, #64	; 0x40
 80043e0:	461a      	mov	r2, r3
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	f7fd fd46 	bl	8001e74 <HAL_DMA_Start_IT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e04c      	b.n	800448c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004400:	60da      	str	r2, [r3, #12]
      break;
 8004402:	e000      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004404:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2201      	movs	r2, #1
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fdf0 	bl	8004ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <HAL_TIM_PWM_Start_DMA+0x328>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d107      	bne.n	800442e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <HAL_TIM_PWM_Start_DMA+0x328>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <HAL_TIM_PWM_Start_DMA+0x2de>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d009      	beq.n	8004456 <HAL_TIM_PWM_Start_DMA+0x2de>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_TIM_PWM_Start_DMA+0x2de>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d111      	bne.n	800447a <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b06      	cmp	r3, #6
 8004466:	d010      	beq.n	800448a <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	e007      	b.n	800448a <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	080049e3 	.word	0x080049e3
 8004498:	08004a8b 	.word	0x08004a8b
 800449c:	08004951 	.word	0x08004951
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800

080044ac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d855      	bhi.n	8004568 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	08004569 	.word	0x08004569
 80044cc:	08004569 	.word	0x08004569
 80044d0:	08004569 	.word	0x08004569
 80044d4:	08004515 	.word	0x08004515
 80044d8:	08004569 	.word	0x08004569
 80044dc:	08004569 	.word	0x08004569
 80044e0:	08004569 	.word	0x08004569
 80044e4:	08004531 	.word	0x08004531
 80044e8:	08004569 	.word	0x08004569
 80044ec:	08004569 	.word	0x08004569
 80044f0:	08004569 	.word	0x08004569
 80044f4:	0800454d 	.word	0x0800454d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004506:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fd11 	bl	8001f34 <HAL_DMA_Abort_IT>
      break;
 8004512:	e02a      	b.n	800456a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004522:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd fd03 	bl	8001f34 <HAL_DMA_Abort_IT>
      break;
 800452e:	e01c      	b.n	800456a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fcf5 	bl	8001f34 <HAL_DMA_Abort_IT>
      break;
 800454a:	e00e      	b.n	800456a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800455a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fce7 	bl	8001f34 <HAL_DMA_Abort_IT>
      break;
 8004566:	e000      	b.n	800456a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8004568:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2200      	movs	r2, #0
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd3e 	bl	8004ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d117      	bne.n	80045b2 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	f241 1311 	movw	r3, #4369	; 0x1111
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	f240 4344 	movw	r3, #1092	; 0x444
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <HAL_TIM_PWM_Stop_DMA+0x136>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	f240 4344 	movw	r3, #1092	; 0x444
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_PWM_Stop_DMA+0x136>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Stop_DMA+0x146>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f0:	e013      	b.n	800461a <HAL_TIM_PWM_Stop_DMA+0x16e>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Stop_DMA+0x156>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004600:	e00b      	b.n	800461a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Stop_DMA+0x166>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	e003      	b.n	800461a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40012c00 	.word	0x40012c00

08004628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800463e:	2302      	movs	r3, #2
 8004640:	e0ac      	b.n	800479c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b0c      	cmp	r3, #12
 800464e:	f200 809f 	bhi.w	8004790 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800468d 	.word	0x0800468d
 800465c:	08004791 	.word	0x08004791
 8004660:	08004791 	.word	0x08004791
 8004664:	08004791 	.word	0x08004791
 8004668:	080046cd 	.word	0x080046cd
 800466c:	08004791 	.word	0x08004791
 8004670:	08004791 	.word	0x08004791
 8004674:	08004791 	.word	0x08004791
 8004678:	0800470f 	.word	0x0800470f
 800467c:	08004791 	.word	0x08004791
 8004680:	08004791 	.word	0x08004791
 8004684:	08004791 	.word	0x08004791
 8004688:	0800474f 	.word	0x0800474f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa90 	bl	8004bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0204 	bic.w	r2, r2, #4
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	619a      	str	r2, [r3, #24]
      break;
 80046ca:	e062      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fad6 	bl	8004c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6999      	ldr	r1, [r3, #24]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	619a      	str	r2, [r3, #24]
      break;
 800470c:	e041      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fb1f 	bl	8004d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0208 	orr.w	r2, r2, #8
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0204 	bic.w	r2, r2, #4
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	61da      	str	r2, [r3, #28]
      break;
 800474c:	e021      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fb69 	bl	8004e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69d9      	ldr	r1, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	021a      	lsls	r2, r3, #8
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	61da      	str	r2, [r3, #28]
      break;
 800478e:	e000      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIM_ConfigClockSource+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e0b3      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x180>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f4:	d03e      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0xd0>
 80047f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fa:	f200 8087 	bhi.w	800490c <HAL_TIM_ConfigClockSource+0x168>
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004802:	f000 8085 	beq.w	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480a:	d87f      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x168>
 800480c:	2b70      	cmp	r3, #112	; 0x70
 800480e:	d01a      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0xa2>
 8004810:	2b70      	cmp	r3, #112	; 0x70
 8004812:	d87b      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x168>
 8004814:	2b60      	cmp	r3, #96	; 0x60
 8004816:	d050      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x116>
 8004818:	2b60      	cmp	r3, #96	; 0x60
 800481a:	d877      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x168>
 800481c:	2b50      	cmp	r3, #80	; 0x50
 800481e:	d03c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0xf6>
 8004820:	2b50      	cmp	r3, #80	; 0x50
 8004822:	d873      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x168>
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d058      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x136>
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d86f      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x168>
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d064      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x156>
 8004830:	2b30      	cmp	r3, #48	; 0x30
 8004832:	d86b      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x168>
 8004834:	2b20      	cmp	r3, #32
 8004836:	d060      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x156>
 8004838:	2b20      	cmp	r3, #32
 800483a:	d867      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x168>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05c      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x156>
 8004840:	2b10      	cmp	r3, #16
 8004842:	d05a      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004844:	e062      	b.n	800490c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6899      	ldr	r1, [r3, #8]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f000 fbae 	bl	8004fb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004868:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	609a      	str	r2, [r3, #8]
      break;
 8004872:	e04e      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6899      	ldr	r1, [r3, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f000 fb97 	bl	8004fb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004896:	609a      	str	r2, [r3, #8]
      break;
 8004898:	e03b      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f000 fb0e 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2150      	movs	r1, #80	; 0x50
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb65 	bl	8004f82 <TIM_ITRx_SetConfig>
      break;
 80048b8:	e02b      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 fb2c 	bl	8004f24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2160      	movs	r1, #96	; 0x60
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fb55 	bl	8004f82 <TIM_ITRx_SetConfig>
      break;
 80048d8:	e01b      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 faee 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2140      	movs	r1, #64	; 0x40
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fb45 	bl	8004f82 <TIM_ITRx_SetConfig>
      break;
 80048f8:	e00b      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f000 fb3c 	bl	8004f82 <TIM_ITRx_SetConfig>
        break;
 800490a:	e002      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800490c:	bf00      	nop
 800490e:	e000      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004910:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004976:	e02a      	b.n	80049ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d107      	bne.n	8004992 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2202      	movs	r2, #2
 8004986:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004990:	e01d      	b.n	80049ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d107      	bne.n	80049ac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2204      	movs	r2, #4
 80049a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049aa:	e010      	b.n	80049ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d107      	bne.n	80049c6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2208      	movs	r2, #8
 80049ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c4:	e003      	b.n	80049ce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7ff ffb5 	bl	800493e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d10b      	bne.n	8004a12 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d136      	bne.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	e031      	b.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d10b      	bne.n	8004a34 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d125      	bne.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a32:	e020      	b.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d10b      	bne.n	8004a56 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2204      	movs	r2, #4
 8004a42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d114      	bne.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a54:	e00f      	b.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d10a      	bne.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2208      	movs	r2, #8
 8004a64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7fc fc9c 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d103      	bne.n	8004aaa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	771a      	strb	r2, [r3, #28]
 8004aa8:	e019      	b.n	8004ade <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d103      	bne.n	8004abc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	771a      	strb	r2, [r3, #28]
 8004aba:	e010      	b.n	8004ade <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d103      	bne.n	8004ace <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
 8004acc:	e007      	b.n	8004ade <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d102      	bne.n	8004ade <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2208      	movs	r2, #8
 8004adc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff ff24 	bl	800492c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	771a      	strb	r2, [r3, #28]
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a29      	ldr	r2, [pc, #164]	; (8004bac <TIM_Base_SetConfig+0xb8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <TIM_Base_SetConfig+0x30>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d007      	beq.n	8004b24 <TIM_Base_SetConfig+0x30>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <TIM_Base_SetConfig+0xbc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_Base_SetConfig+0x30>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a25      	ldr	r2, [pc, #148]	; (8004bb4 <TIM_Base_SetConfig+0xc0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d108      	bne.n	8004b36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <TIM_Base_SetConfig+0xb8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d007      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <TIM_Base_SetConfig+0xbc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <TIM_Base_SetConfig+0xc0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a07      	ldr	r2, [pc, #28]	; (8004bac <TIM_Base_SetConfig+0xb8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800

08004bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0201 	bic.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 0302 	bic.w	r3, r3, #2
 8004c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <TIM_OC1_SetConfig+0xc8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10c      	bne.n	8004c2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0308 	bic.w	r3, r3, #8
 8004c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <TIM_OC1_SetConfig+0xc8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d111      	bne.n	8004c5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00

08004c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f023 0210 	bic.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0320 	bic.w	r3, r3, #32
 8004cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <TIM_OC2_SetConfig+0xd0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10d      	bne.n	8004d00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <TIM_OC2_SetConfig+0xd0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d113      	bne.n	8004d30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00

08004d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <TIM_OC3_SetConfig+0xd0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10d      	bne.n	8004dd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a14      	ldr	r2, [pc, #80]	; (8004e28 <TIM_OC3_SetConfig+0xd0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d113      	bne.n	8004e02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40012c00 	.word	0x40012c00

08004e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a0f      	ldr	r2, [pc, #60]	; (8004ec4 <TIM_OC4_SetConfig+0x98>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d109      	bne.n	8004ea0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	019b      	lsls	r3, r3, #6
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00

08004ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 030a 	bic.w	r3, r3, #10
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f023 0210 	bic.w	r2, r3, #16
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	031b      	lsls	r3, r3, #12
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	621a      	str	r2, [r3, #32]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f043 0307 	orr.w	r3, r3, #7
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	021a      	lsls	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	609a      	str	r2, [r3, #8]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2201      	movs	r2, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	43db      	mvns	r3, r3
 8005016:	401a      	ands	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e046      	b.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d009      	beq.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10c      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800

080050f8 <__libc_init_array>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	2600      	movs	r6, #0
 80050fc:	4d0c      	ldr	r5, [pc, #48]	; (8005130 <__libc_init_array+0x38>)
 80050fe:	4c0d      	ldr	r4, [pc, #52]	; (8005134 <__libc_init_array+0x3c>)
 8005100:	1b64      	subs	r4, r4, r5
 8005102:	10a4      	asrs	r4, r4, #2
 8005104:	42a6      	cmp	r6, r4
 8005106:	d109      	bne.n	800511c <__libc_init_array+0x24>
 8005108:	f001 f888 	bl	800621c <_init>
 800510c:	2600      	movs	r6, #0
 800510e:	4d0a      	ldr	r5, [pc, #40]	; (8005138 <__libc_init_array+0x40>)
 8005110:	4c0a      	ldr	r4, [pc, #40]	; (800513c <__libc_init_array+0x44>)
 8005112:	1b64      	subs	r4, r4, r5
 8005114:	10a4      	asrs	r4, r4, #2
 8005116:	42a6      	cmp	r6, r4
 8005118:	d105      	bne.n	8005126 <__libc_init_array+0x2e>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005120:	4798      	blx	r3
 8005122:	3601      	adds	r6, #1
 8005124:	e7ee      	b.n	8005104 <__libc_init_array+0xc>
 8005126:	f855 3b04 	ldr.w	r3, [r5], #4
 800512a:	4798      	blx	r3
 800512c:	3601      	adds	r6, #1
 800512e:	e7f2      	b.n	8005116 <__libc_init_array+0x1e>
 8005130:	08006438 	.word	0x08006438
 8005134:	08006438 	.word	0x08006438
 8005138:	08006438 	.word	0x08006438
 800513c:	0800643c 	.word	0x0800643c

08005140 <memset>:
 8005140:	4603      	mov	r3, r0
 8005142:	4402      	add	r2, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	d100      	bne.n	800514a <memset+0xa>
 8005148:	4770      	bx	lr
 800514a:	f803 1b01 	strb.w	r1, [r3], #1
 800514e:	e7f9      	b.n	8005144 <memset+0x4>

08005150 <tan>:
 8005150:	b530      	push	{r4, r5, lr}
 8005152:	4a12      	ldr	r2, [pc, #72]	; (800519c <tan+0x4c>)
 8005154:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005158:	4293      	cmp	r3, r2
 800515a:	b087      	sub	sp, #28
 800515c:	dc06      	bgt.n	800516c <tan+0x1c>
 800515e:	2301      	movs	r3, #1
 8005160:	2200      	movs	r2, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	f000 fd5b 	bl	8005c20 <__kernel_tan>
 800516a:	e006      	b.n	800517a <tan+0x2a>
 800516c:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <tan+0x50>)
 800516e:	4293      	cmp	r3, r2
 8005170:	dd05      	ble.n	800517e <tan+0x2e>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	f7fa ffef 	bl	8000158 <__aeabi_dsub>
 800517a:	b007      	add	sp, #28
 800517c:	bd30      	pop	{r4, r5, pc}
 800517e:	aa02      	add	r2, sp, #8
 8005180:	f000 f812 	bl	80051a8 <__ieee754_rem_pio2>
 8005184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005188:	0040      	lsls	r0, r0, #1
 800518a:	f000 0002 	and.w	r0, r0, #2
 800518e:	f1c0 0001 	rsb	r0, r0, #1
 8005192:	9000      	str	r0, [sp, #0]
 8005194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005198:	e7e5      	b.n	8005166 <tan+0x16>
 800519a:	bf00      	nop
 800519c:	3fe921fb 	.word	0x3fe921fb
 80051a0:	7fefffff 	.word	0x7fefffff
 80051a4:	00000000 	.word	0x00000000

080051a8 <__ieee754_rem_pio2>:
 80051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	4614      	mov	r4, r2
 80051ae:	4ac4      	ldr	r2, [pc, #784]	; (80054c0 <__ieee754_rem_pio2+0x318>)
 80051b0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80051b4:	b08d      	sub	sp, #52	; 0x34
 80051b6:	4592      	cmp	sl, r2
 80051b8:	9104      	str	r1, [sp, #16]
 80051ba:	dc07      	bgt.n	80051cc <__ieee754_rem_pio2+0x24>
 80051bc:	2200      	movs	r2, #0
 80051be:	2300      	movs	r3, #0
 80051c0:	e9c4 0100 	strd	r0, r1, [r4]
 80051c4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80051c8:	2500      	movs	r5, #0
 80051ca:	e024      	b.n	8005216 <__ieee754_rem_pio2+0x6e>
 80051cc:	4abd      	ldr	r2, [pc, #756]	; (80054c4 <__ieee754_rem_pio2+0x31c>)
 80051ce:	4592      	cmp	sl, r2
 80051d0:	dc72      	bgt.n	80052b8 <__ieee754_rem_pio2+0x110>
 80051d2:	9b04      	ldr	r3, [sp, #16]
 80051d4:	4dbc      	ldr	r5, [pc, #752]	; (80054c8 <__ieee754_rem_pio2+0x320>)
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	a3ab      	add	r3, pc, #684	; (adr r3, 8005488 <__ieee754_rem_pio2+0x2e0>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	dd36      	ble.n	800524e <__ieee754_rem_pio2+0xa6>
 80051e0:	f7fa ffba 	bl	8000158 <__aeabi_dsub>
 80051e4:	45aa      	cmp	sl, r5
 80051e6:	4606      	mov	r6, r0
 80051e8:	460f      	mov	r7, r1
 80051ea:	d018      	beq.n	800521e <__ieee754_rem_pio2+0x76>
 80051ec:	a3a8      	add	r3, pc, #672	; (adr r3, 8005490 <__ieee754_rem_pio2+0x2e8>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fa ffb1 	bl	8000158 <__aeabi_dsub>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4630      	mov	r0, r6
 80051fc:	e9c4 2300 	strd	r2, r3, [r4]
 8005200:	4639      	mov	r1, r7
 8005202:	f7fa ffa9 	bl	8000158 <__aeabi_dsub>
 8005206:	a3a2      	add	r3, pc, #648	; (adr r3, 8005490 <__ieee754_rem_pio2+0x2e8>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fa ffa4 	bl	8000158 <__aeabi_dsub>
 8005210:	2501      	movs	r5, #1
 8005212:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005216:	4628      	mov	r0, r5
 8005218:	b00d      	add	sp, #52	; 0x34
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521e:	a39e      	add	r3, pc, #632	; (adr r3, 8005498 <__ieee754_rem_pio2+0x2f0>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f7fa ff98 	bl	8000158 <__aeabi_dsub>
 8005228:	a39d      	add	r3, pc, #628	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x2f8>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	f7fa ff91 	bl	8000158 <__aeabi_dsub>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	e9c4 2300 	strd	r2, r3, [r4]
 8005240:	4639      	mov	r1, r7
 8005242:	f7fa ff89 	bl	8000158 <__aeabi_dsub>
 8005246:	a396      	add	r3, pc, #600	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x2f8>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	e7de      	b.n	800520c <__ieee754_rem_pio2+0x64>
 800524e:	f7fa ff85 	bl	800015c <__adddf3>
 8005252:	45aa      	cmp	sl, r5
 8005254:	4606      	mov	r6, r0
 8005256:	460f      	mov	r7, r1
 8005258:	d016      	beq.n	8005288 <__ieee754_rem_pio2+0xe0>
 800525a:	a38d      	add	r3, pc, #564	; (adr r3, 8005490 <__ieee754_rem_pio2+0x2e8>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f7fa ff7c 	bl	800015c <__adddf3>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4630      	mov	r0, r6
 800526a:	e9c4 2300 	strd	r2, r3, [r4]
 800526e:	4639      	mov	r1, r7
 8005270:	f7fa ff72 	bl	8000158 <__aeabi_dsub>
 8005274:	a386      	add	r3, pc, #536	; (adr r3, 8005490 <__ieee754_rem_pio2+0x2e8>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fa ff6f 	bl	800015c <__adddf3>
 800527e:	f04f 35ff 	mov.w	r5, #4294967295
 8005282:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005286:	e7c6      	b.n	8005216 <__ieee754_rem_pio2+0x6e>
 8005288:	a383      	add	r3, pc, #524	; (adr r3, 8005498 <__ieee754_rem_pio2+0x2f0>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fa ff65 	bl	800015c <__adddf3>
 8005292:	a383      	add	r3, pc, #524	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x2f8>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	f7fa ff5e 	bl	800015c <__adddf3>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4630      	mov	r0, r6
 80052a6:	e9c4 2300 	strd	r2, r3, [r4]
 80052aa:	4639      	mov	r1, r7
 80052ac:	f7fa ff54 	bl	8000158 <__aeabi_dsub>
 80052b0:	a37b      	add	r3, pc, #492	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x2f8>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	e7e0      	b.n	800527a <__ieee754_rem_pio2+0xd2>
 80052b8:	4a84      	ldr	r2, [pc, #528]	; (80054cc <__ieee754_rem_pio2+0x324>)
 80052ba:	4592      	cmp	sl, r2
 80052bc:	f300 80d5 	bgt.w	800546a <__ieee754_rem_pio2+0x2c2>
 80052c0:	f000 feaa 	bl	8006018 <fabs>
 80052c4:	a378      	add	r3, pc, #480	; (adr r3, 80054a8 <__ieee754_rem_pio2+0x300>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	4606      	mov	r6, r0
 80052cc:	460f      	mov	r7, r1
 80052ce:	f7fb f8fb 	bl	80004c8 <__aeabi_dmul>
 80052d2:	2200      	movs	r2, #0
 80052d4:	4b7e      	ldr	r3, [pc, #504]	; (80054d0 <__ieee754_rem_pio2+0x328>)
 80052d6:	f7fa ff41 	bl	800015c <__adddf3>
 80052da:	f7fb fb8f 	bl	80009fc <__aeabi_d2iz>
 80052de:	4605      	mov	r5, r0
 80052e0:	f7fb f888 	bl	80003f4 <__aeabi_i2d>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052ec:	a366      	add	r3, pc, #408	; (adr r3, 8005488 <__ieee754_rem_pio2+0x2e0>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fb f8e9 	bl	80004c8 <__aeabi_dmul>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4630      	mov	r0, r6
 80052fc:	4639      	mov	r1, r7
 80052fe:	f7fa ff2b 	bl	8000158 <__aeabi_dsub>
 8005302:	a363      	add	r3, pc, #396	; (adr r3, 8005490 <__ieee754_rem_pio2+0x2e8>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	4680      	mov	r8, r0
 800530a:	4689      	mov	r9, r1
 800530c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005310:	f7fb f8da 	bl	80004c8 <__aeabi_dmul>
 8005314:	2d1f      	cmp	r5, #31
 8005316:	4606      	mov	r6, r0
 8005318:	460f      	mov	r7, r1
 800531a:	dc0e      	bgt.n	800533a <__ieee754_rem_pio2+0x192>
 800531c:	4b6d      	ldr	r3, [pc, #436]	; (80054d4 <__ieee754_rem_pio2+0x32c>)
 800531e:	1e6a      	subs	r2, r5, #1
 8005320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005324:	4553      	cmp	r3, sl
 8005326:	d008      	beq.n	800533a <__ieee754_rem_pio2+0x192>
 8005328:	4632      	mov	r2, r6
 800532a:	463b      	mov	r3, r7
 800532c:	4640      	mov	r0, r8
 800532e:	4649      	mov	r1, r9
 8005330:	f7fa ff12 	bl	8000158 <__aeabi_dsub>
 8005334:	e9c4 0100 	strd	r0, r1, [r4]
 8005338:	e013      	b.n	8005362 <__ieee754_rem_pio2+0x1ba>
 800533a:	463b      	mov	r3, r7
 800533c:	4632      	mov	r2, r6
 800533e:	4640      	mov	r0, r8
 8005340:	4649      	mov	r1, r9
 8005342:	f7fa ff09 	bl	8000158 <__aeabi_dsub>
 8005346:	ea4f 532a 	mov.w	r3, sl, asr #20
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005350:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005354:	f1ba 0f10 	cmp.w	sl, #16
 8005358:	dc1f      	bgt.n	800539a <__ieee754_rem_pio2+0x1f2>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	e9c4 2300 	strd	r2, r3, [r4]
 8005362:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005366:	4640      	mov	r0, r8
 8005368:	4653      	mov	r3, sl
 800536a:	4649      	mov	r1, r9
 800536c:	f7fa fef4 	bl	8000158 <__aeabi_dsub>
 8005370:	4632      	mov	r2, r6
 8005372:	463b      	mov	r3, r7
 8005374:	f7fa fef0 	bl	8000158 <__aeabi_dsub>
 8005378:	460b      	mov	r3, r1
 800537a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800537e:	9904      	ldr	r1, [sp, #16]
 8005380:	4602      	mov	r2, r0
 8005382:	2900      	cmp	r1, #0
 8005384:	f6bf af47 	bge.w	8005216 <__ieee754_rem_pio2+0x6e>
 8005388:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800538c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005390:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005394:	60e3      	str	r3, [r4, #12]
 8005396:	426d      	negs	r5, r5
 8005398:	e73d      	b.n	8005216 <__ieee754_rem_pio2+0x6e>
 800539a:	a33f      	add	r3, pc, #252	; (adr r3, 8005498 <__ieee754_rem_pio2+0x2f0>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053a4:	f7fb f890 	bl	80004c8 <__aeabi_dmul>
 80053a8:	4606      	mov	r6, r0
 80053aa:	460f      	mov	r7, r1
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4640      	mov	r0, r8
 80053b2:	4649      	mov	r1, r9
 80053b4:	f7fa fed0 	bl	8000158 <__aeabi_dsub>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4682      	mov	sl, r0
 80053be:	468b      	mov	fp, r1
 80053c0:	4640      	mov	r0, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fa fec8 	bl	8000158 <__aeabi_dsub>
 80053c8:	4632      	mov	r2, r6
 80053ca:	463b      	mov	r3, r7
 80053cc:	f7fa fec4 	bl	8000158 <__aeabi_dsub>
 80053d0:	a333      	add	r3, pc, #204	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x2f8>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	4606      	mov	r6, r0
 80053d8:	460f      	mov	r7, r1
 80053da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053de:	f7fb f873 	bl	80004c8 <__aeabi_dmul>
 80053e2:	4632      	mov	r2, r6
 80053e4:	463b      	mov	r3, r7
 80053e6:	f7fa feb7 	bl	8000158 <__aeabi_dsub>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	4650      	mov	r0, sl
 80053f4:	4659      	mov	r1, fp
 80053f6:	f7fa feaf 	bl	8000158 <__aeabi_dsub>
 80053fa:	9a05      	ldr	r2, [sp, #20]
 80053fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b31      	cmp	r3, #49	; 0x31
 8005404:	dc06      	bgt.n	8005414 <__ieee754_rem_pio2+0x26c>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	46d0      	mov	r8, sl
 800540c:	46d9      	mov	r9, fp
 800540e:	e9c4 2300 	strd	r2, r3, [r4]
 8005412:	e7a6      	b.n	8005362 <__ieee754_rem_pio2+0x1ba>
 8005414:	a326      	add	r3, pc, #152	; (adr r3, 80054b0 <__ieee754_rem_pio2+0x308>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800541e:	f7fb f853 	bl	80004c8 <__aeabi_dmul>
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4650      	mov	r0, sl
 800542c:	4659      	mov	r1, fp
 800542e:	f7fa fe93 	bl	8000158 <__aeabi_dsub>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4680      	mov	r8, r0
 8005438:	4689      	mov	r9, r1
 800543a:	4650      	mov	r0, sl
 800543c:	4659      	mov	r1, fp
 800543e:	f7fa fe8b 	bl	8000158 <__aeabi_dsub>
 8005442:	4632      	mov	r2, r6
 8005444:	463b      	mov	r3, r7
 8005446:	f7fa fe87 	bl	8000158 <__aeabi_dsub>
 800544a:	a31b      	add	r3, pc, #108	; (adr r3, 80054b8 <__ieee754_rem_pio2+0x310>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	4606      	mov	r6, r0
 8005452:	460f      	mov	r7, r1
 8005454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005458:	f7fb f836 	bl	80004c8 <__aeabi_dmul>
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	f7fa fe7a 	bl	8000158 <__aeabi_dsub>
 8005464:	4606      	mov	r6, r0
 8005466:	460f      	mov	r7, r1
 8005468:	e75e      	b.n	8005328 <__ieee754_rem_pio2+0x180>
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <__ieee754_rem_pio2+0x330>)
 800546c:	4592      	cmp	sl, r2
 800546e:	dd35      	ble.n	80054dc <__ieee754_rem_pio2+0x334>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	f7fa fe70 	bl	8000158 <__aeabi_dsub>
 8005478:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800547c:	e9c4 0100 	strd	r0, r1, [r4]
 8005480:	e6a2      	b.n	80051c8 <__ieee754_rem_pio2+0x20>
 8005482:	bf00      	nop
 8005484:	f3af 8000 	nop.w
 8005488:	54400000 	.word	0x54400000
 800548c:	3ff921fb 	.word	0x3ff921fb
 8005490:	1a626331 	.word	0x1a626331
 8005494:	3dd0b461 	.word	0x3dd0b461
 8005498:	1a600000 	.word	0x1a600000
 800549c:	3dd0b461 	.word	0x3dd0b461
 80054a0:	2e037073 	.word	0x2e037073
 80054a4:	3ba3198a 	.word	0x3ba3198a
 80054a8:	6dc9c883 	.word	0x6dc9c883
 80054ac:	3fe45f30 	.word	0x3fe45f30
 80054b0:	2e000000 	.word	0x2e000000
 80054b4:	3ba3198a 	.word	0x3ba3198a
 80054b8:	252049c1 	.word	0x252049c1
 80054bc:	397b839a 	.word	0x397b839a
 80054c0:	3fe921fb 	.word	0x3fe921fb
 80054c4:	4002d97b 	.word	0x4002d97b
 80054c8:	3ff921fb 	.word	0x3ff921fb
 80054cc:	413921fb 	.word	0x413921fb
 80054d0:	3fe00000 	.word	0x3fe00000
 80054d4:	08006260 	.word	0x08006260
 80054d8:	7fefffff 	.word	0x7fefffff
 80054dc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80054e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80054e4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80054e8:	460f      	mov	r7, r1
 80054ea:	4606      	mov	r6, r0
 80054ec:	f7fb fa86 	bl	80009fc <__aeabi_d2iz>
 80054f0:	f7fa ff80 	bl	80003f4 <__aeabi_i2d>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4630      	mov	r0, r6
 80054fa:	4639      	mov	r1, r7
 80054fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005500:	f7fa fe2a 	bl	8000158 <__aeabi_dsub>
 8005504:	2200      	movs	r2, #0
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <__ieee754_rem_pio2+0x3e8>)
 8005508:	f7fa ffde 	bl	80004c8 <__aeabi_dmul>
 800550c:	460f      	mov	r7, r1
 800550e:	4606      	mov	r6, r0
 8005510:	f7fb fa74 	bl	80009fc <__aeabi_d2iz>
 8005514:	f7fa ff6e 	bl	80003f4 <__aeabi_i2d>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005524:	f7fa fe18 	bl	8000158 <__aeabi_dsub>
 8005528:	2200      	movs	r2, #0
 800552a:	4b19      	ldr	r3, [pc, #100]	; (8005590 <__ieee754_rem_pio2+0x3e8>)
 800552c:	f7fa ffcc 	bl	80004c8 <__aeabi_dmul>
 8005530:	f04f 0803 	mov.w	r8, #3
 8005534:	2600      	movs	r6, #0
 8005536:	2700      	movs	r7, #0
 8005538:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800553c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005540:	4632      	mov	r2, r6
 8005542:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005546:	463b      	mov	r3, r7
 8005548:	46c2      	mov	sl, r8
 800554a:	f108 38ff 	add.w	r8, r8, #4294967295
 800554e:	f7fb fa23 	bl	8000998 <__aeabi_dcmpeq>
 8005552:	2800      	cmp	r0, #0
 8005554:	d1f4      	bne.n	8005540 <__ieee754_rem_pio2+0x398>
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <__ieee754_rem_pio2+0x3ec>)
 8005558:	462a      	mov	r2, r5
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	2302      	movs	r3, #2
 800555e:	4621      	mov	r1, r4
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	a806      	add	r0, sp, #24
 8005564:	4653      	mov	r3, sl
 8005566:	f000 f817 	bl	8005598 <__kernel_rem_pio2>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	4605      	mov	r5, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	f6bf ae51 	bge.w	8005216 <__ieee754_rem_pio2+0x6e>
 8005574:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800557c:	e9c4 2300 	strd	r2, r3, [r4]
 8005580:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005588:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800558c:	e703      	b.n	8005396 <__ieee754_rem_pio2+0x1ee>
 800558e:	bf00      	nop
 8005590:	41700000 	.word	0x41700000
 8005594:	080062e0 	.word	0x080062e0

08005598 <__kernel_rem_pio2>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80055a0:	9308      	str	r3, [sp, #32]
 80055a2:	9106      	str	r1, [sp, #24]
 80055a4:	4bb6      	ldr	r3, [pc, #728]	; (8005880 <__kernel_rem_pio2+0x2e8>)
 80055a6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80055a8:	f112 0f14 	cmn.w	r2, #20
 80055ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80055b0:	bfa8      	it	ge
 80055b2:	1ed4      	subge	r4, r2, #3
 80055b4:	9302      	str	r3, [sp, #8]
 80055b6:	9b08      	ldr	r3, [sp, #32]
 80055b8:	bfb8      	it	lt
 80055ba:	2400      	movlt	r4, #0
 80055bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80055c0:	9307      	str	r3, [sp, #28]
 80055c2:	bfa4      	itt	ge
 80055c4:	2318      	movge	r3, #24
 80055c6:	fb94 f4f3 	sdivge	r4, r4, r3
 80055ca:	f06f 0317 	mvn.w	r3, #23
 80055ce:	fb04 3303 	mla	r3, r4, r3, r3
 80055d2:	eb03 0b02 	add.w	fp, r3, r2
 80055d6:	9a07      	ldr	r2, [sp, #28]
 80055d8:	9b02      	ldr	r3, [sp, #8]
 80055da:	1aa7      	subs	r7, r4, r2
 80055dc:	eb03 0802 	add.w	r8, r3, r2
 80055e0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80055e2:	2500      	movs	r5, #0
 80055e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80055e8:	2200      	movs	r2, #0
 80055ea:	2300      	movs	r3, #0
 80055ec:	9009      	str	r0, [sp, #36]	; 0x24
 80055ee:	ae20      	add	r6, sp, #128	; 0x80
 80055f0:	4545      	cmp	r5, r8
 80055f2:	dd14      	ble.n	800561e <__kernel_rem_pio2+0x86>
 80055f4:	f04f 0800 	mov.w	r8, #0
 80055f8:	9a08      	ldr	r2, [sp, #32]
 80055fa:	ab20      	add	r3, sp, #128	; 0x80
 80055fc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8005600:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8005604:	9b02      	ldr	r3, [sp, #8]
 8005606:	4598      	cmp	r8, r3
 8005608:	dc35      	bgt.n	8005676 <__kernel_rem_pio2+0xde>
 800560a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560c:	2200      	movs	r2, #0
 800560e:	f1a3 0908 	sub.w	r9, r3, #8
 8005612:	2300      	movs	r3, #0
 8005614:	462f      	mov	r7, r5
 8005616:	2600      	movs	r6, #0
 8005618:	e9cd 2300 	strd	r2, r3, [sp]
 800561c:	e01f      	b.n	800565e <__kernel_rem_pio2+0xc6>
 800561e:	42ef      	cmn	r7, r5
 8005620:	d40b      	bmi.n	800563a <__kernel_rem_pio2+0xa2>
 8005622:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005626:	e9cd 2300 	strd	r2, r3, [sp]
 800562a:	f7fa fee3 	bl	80003f4 <__aeabi_i2d>
 800562e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005632:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005636:	3501      	adds	r5, #1
 8005638:	e7da      	b.n	80055f0 <__kernel_rem_pio2+0x58>
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	e7f8      	b.n	8005632 <__kernel_rem_pio2+0x9a>
 8005640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005644:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005648:	f7fa ff3e 	bl	80004c8 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005654:	f7fa fd82 	bl	800015c <__adddf3>
 8005658:	e9cd 0100 	strd	r0, r1, [sp]
 800565c:	3601      	adds	r6, #1
 800565e:	9b07      	ldr	r3, [sp, #28]
 8005660:	3f08      	subs	r7, #8
 8005662:	429e      	cmp	r6, r3
 8005664:	ddec      	ble.n	8005640 <__kernel_rem_pio2+0xa8>
 8005666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800566a:	f108 0801 	add.w	r8, r8, #1
 800566e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8005672:	3508      	adds	r5, #8
 8005674:	e7c6      	b.n	8005604 <__kernel_rem_pio2+0x6c>
 8005676:	9b02      	ldr	r3, [sp, #8]
 8005678:	aa0c      	add	r2, sp, #48	; 0x30
 800567a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800567e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005680:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005682:	9e02      	ldr	r6, [sp, #8]
 8005684:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005688:	930a      	str	r3, [sp, #40]	; 0x28
 800568a:	ab98      	add	r3, sp, #608	; 0x260
 800568c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005690:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005694:	ab70      	add	r3, sp, #448	; 0x1c0
 8005696:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800569a:	46d0      	mov	r8, sl
 800569c:	46b1      	mov	r9, r6
 800569e:	af0c      	add	r7, sp, #48	; 0x30
 80056a0:	9700      	str	r7, [sp, #0]
 80056a2:	f1b9 0f00 	cmp.w	r9, #0
 80056a6:	f1a8 0808 	sub.w	r8, r8, #8
 80056aa:	dc71      	bgt.n	8005790 <__kernel_rem_pio2+0x1f8>
 80056ac:	465a      	mov	r2, fp
 80056ae:	4620      	mov	r0, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	f000 fd35 	bl	8006120 <scalbn>
 80056b6:	2200      	movs	r2, #0
 80056b8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80056bc:	4604      	mov	r4, r0
 80056be:	460d      	mov	r5, r1
 80056c0:	f7fa ff02 	bl	80004c8 <__aeabi_dmul>
 80056c4:	f000 fcac 	bl	8006020 <floor>
 80056c8:	2200      	movs	r2, #0
 80056ca:	4b6e      	ldr	r3, [pc, #440]	; (8005884 <__kernel_rem_pio2+0x2ec>)
 80056cc:	f7fa fefc 	bl	80004c8 <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7fa fd3e 	bl	8000158 <__aeabi_dsub>
 80056dc:	460d      	mov	r5, r1
 80056de:	4604      	mov	r4, r0
 80056e0:	f7fb f98c 	bl	80009fc <__aeabi_d2iz>
 80056e4:	9004      	str	r0, [sp, #16]
 80056e6:	f7fa fe85 	bl	80003f4 <__aeabi_i2d>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fa fd31 	bl	8000158 <__aeabi_dsub>
 80056f6:	f1bb 0f00 	cmp.w	fp, #0
 80056fa:	4680      	mov	r8, r0
 80056fc:	4689      	mov	r9, r1
 80056fe:	dd70      	ble.n	80057e2 <__kernel_rem_pio2+0x24a>
 8005700:	1e72      	subs	r2, r6, #1
 8005702:	ab0c      	add	r3, sp, #48	; 0x30
 8005704:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005708:	9c04      	ldr	r4, [sp, #16]
 800570a:	f1cb 0118 	rsb	r1, fp, #24
 800570e:	fa40 f301 	asr.w	r3, r0, r1
 8005712:	441c      	add	r4, r3
 8005714:	408b      	lsls	r3, r1
 8005716:	1ac0      	subs	r0, r0, r3
 8005718:	ab0c      	add	r3, sp, #48	; 0x30
 800571a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800571e:	f1cb 0317 	rsb	r3, fp, #23
 8005722:	9404      	str	r4, [sp, #16]
 8005724:	fa40 f303 	asr.w	r3, r0, r3
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	9b00      	ldr	r3, [sp, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	dd66      	ble.n	80057fe <__kernel_rem_pio2+0x266>
 8005730:	2200      	movs	r2, #0
 8005732:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005736:	4614      	mov	r4, r2
 8005738:	9b04      	ldr	r3, [sp, #16]
 800573a:	3301      	adds	r3, #1
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	4296      	cmp	r6, r2
 8005740:	f300 80ac 	bgt.w	800589c <__kernel_rem_pio2+0x304>
 8005744:	f1bb 0f00 	cmp.w	fp, #0
 8005748:	dd07      	ble.n	800575a <__kernel_rem_pio2+0x1c2>
 800574a:	f1bb 0f01 	cmp.w	fp, #1
 800574e:	f000 80b4 	beq.w	80058ba <__kernel_rem_pio2+0x322>
 8005752:	f1bb 0f02 	cmp.w	fp, #2
 8005756:	f000 80ba 	beq.w	80058ce <__kernel_rem_pio2+0x336>
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d14e      	bne.n	80057fe <__kernel_rem_pio2+0x266>
 8005760:	4642      	mov	r2, r8
 8005762:	464b      	mov	r3, r9
 8005764:	2000      	movs	r0, #0
 8005766:	4948      	ldr	r1, [pc, #288]	; (8005888 <__kernel_rem_pio2+0x2f0>)
 8005768:	f7fa fcf6 	bl	8000158 <__aeabi_dsub>
 800576c:	4680      	mov	r8, r0
 800576e:	4689      	mov	r9, r1
 8005770:	2c00      	cmp	r4, #0
 8005772:	d044      	beq.n	80057fe <__kernel_rem_pio2+0x266>
 8005774:	465a      	mov	r2, fp
 8005776:	2000      	movs	r0, #0
 8005778:	4943      	ldr	r1, [pc, #268]	; (8005888 <__kernel_rem_pio2+0x2f0>)
 800577a:	f000 fcd1 	bl	8006120 <scalbn>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4640      	mov	r0, r8
 8005784:	4649      	mov	r1, r9
 8005786:	f7fa fce7 	bl	8000158 <__aeabi_dsub>
 800578a:	4680      	mov	r8, r0
 800578c:	4689      	mov	r9, r1
 800578e:	e036      	b.n	80057fe <__kernel_rem_pio2+0x266>
 8005790:	2200      	movs	r2, #0
 8005792:	4b3e      	ldr	r3, [pc, #248]	; (800588c <__kernel_rem_pio2+0x2f4>)
 8005794:	4620      	mov	r0, r4
 8005796:	4629      	mov	r1, r5
 8005798:	f7fa fe96 	bl	80004c8 <__aeabi_dmul>
 800579c:	f7fb f92e 	bl	80009fc <__aeabi_d2iz>
 80057a0:	f7fa fe28 	bl	80003f4 <__aeabi_i2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057ac:	2200      	movs	r2, #0
 80057ae:	4b38      	ldr	r3, [pc, #224]	; (8005890 <__kernel_rem_pio2+0x2f8>)
 80057b0:	f7fa fe8a 	bl	80004c8 <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa fccc 	bl	8000158 <__aeabi_dsub>
 80057c0:	f7fb f91c 	bl	80009fc <__aeabi_d2iz>
 80057c4:	9b00      	ldr	r3, [sp, #0]
 80057c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80057ca:	f843 0b04 	str.w	r0, [r3], #4
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80057d8:	f7fa fcc0 	bl	800015c <__adddf3>
 80057dc:	4604      	mov	r4, r0
 80057de:	460d      	mov	r5, r1
 80057e0:	e75f      	b.n	80056a2 <__kernel_rem_pio2+0x10a>
 80057e2:	d105      	bne.n	80057f0 <__kernel_rem_pio2+0x258>
 80057e4:	1e73      	subs	r3, r6, #1
 80057e6:	aa0c      	add	r2, sp, #48	; 0x30
 80057e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80057ec:	15c3      	asrs	r3, r0, #23
 80057ee:	e79b      	b.n	8005728 <__kernel_rem_pio2+0x190>
 80057f0:	2200      	movs	r2, #0
 80057f2:	4b28      	ldr	r3, [pc, #160]	; (8005894 <__kernel_rem_pio2+0x2fc>)
 80057f4:	f7fb f8ee 	bl	80009d4 <__aeabi_dcmpge>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d13e      	bne.n	800587a <__kernel_rem_pio2+0x2e2>
 80057fc:	9000      	str	r0, [sp, #0]
 80057fe:	2200      	movs	r2, #0
 8005800:	2300      	movs	r3, #0
 8005802:	4640      	mov	r0, r8
 8005804:	4649      	mov	r1, r9
 8005806:	f7fb f8c7 	bl	8000998 <__aeabi_dcmpeq>
 800580a:	2800      	cmp	r0, #0
 800580c:	f000 80b1 	beq.w	8005972 <__kernel_rem_pio2+0x3da>
 8005810:	1e74      	subs	r4, r6, #1
 8005812:	4623      	mov	r3, r4
 8005814:	2200      	movs	r2, #0
 8005816:	9902      	ldr	r1, [sp, #8]
 8005818:	428b      	cmp	r3, r1
 800581a:	da5f      	bge.n	80058dc <__kernel_rem_pio2+0x344>
 800581c:	2a00      	cmp	r2, #0
 800581e:	d074      	beq.n	800590a <__kernel_rem_pio2+0x372>
 8005820:	ab0c      	add	r3, sp, #48	; 0x30
 8005822:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005826:	f1ab 0b18 	sub.w	fp, fp, #24
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 809f 	beq.w	800596e <__kernel_rem_pio2+0x3d6>
 8005830:	465a      	mov	r2, fp
 8005832:	2000      	movs	r0, #0
 8005834:	4914      	ldr	r1, [pc, #80]	; (8005888 <__kernel_rem_pio2+0x2f0>)
 8005836:	f000 fc73 	bl	8006120 <scalbn>
 800583a:	46a2      	mov	sl, r4
 800583c:	4606      	mov	r6, r0
 800583e:	460f      	mov	r7, r1
 8005840:	f04f 0800 	mov.w	r8, #0
 8005844:	ab70      	add	r3, sp, #448	; 0x1c0
 8005846:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800588c <__kernel_rem_pio2+0x2f4>
 800584a:	00e5      	lsls	r5, r4, #3
 800584c:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8005850:	f1ba 0f00 	cmp.w	sl, #0
 8005854:	f280 80c3 	bge.w	80059de <__kernel_rem_pio2+0x446>
 8005858:	4626      	mov	r6, r4
 800585a:	2e00      	cmp	r6, #0
 800585c:	f2c0 80f5 	blt.w	8005a4a <__kernel_rem_pio2+0x4b2>
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <__kernel_rem_pio2+0x300>)
 8005862:	f04f 0a00 	mov.w	sl, #0
 8005866:	9307      	str	r3, [sp, #28]
 8005868:	ab70      	add	r3, sp, #448	; 0x1c0
 800586a:	f04f 0b00 	mov.w	fp, #0
 800586e:	f04f 0800 	mov.w	r8, #0
 8005872:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005876:	1ba7      	subs	r7, r4, r6
 8005878:	e0db      	b.n	8005a32 <__kernel_rem_pio2+0x49a>
 800587a:	2302      	movs	r3, #2
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	e757      	b.n	8005730 <__kernel_rem_pio2+0x198>
 8005880:	08006428 	.word	0x08006428
 8005884:	40200000 	.word	0x40200000
 8005888:	3ff00000 	.word	0x3ff00000
 800588c:	3e700000 	.word	0x3e700000
 8005890:	41700000 	.word	0x41700000
 8005894:	3fe00000 	.word	0x3fe00000
 8005898:	080063e8 	.word	0x080063e8
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	b944      	cbnz	r4, 80058b2 <__kernel_rem_pio2+0x31a>
 80058a0:	b11b      	cbz	r3, 80058aa <__kernel_rem_pio2+0x312>
 80058a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	2301      	movs	r3, #1
 80058aa:	461c      	mov	r4, r3
 80058ac:	3201      	adds	r2, #1
 80058ae:	3704      	adds	r7, #4
 80058b0:	e745      	b.n	800573e <__kernel_rem_pio2+0x1a6>
 80058b2:	1acb      	subs	r3, r1, r3
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	4623      	mov	r3, r4
 80058b8:	e7f7      	b.n	80058aa <__kernel_rem_pio2+0x312>
 80058ba:	1e72      	subs	r2, r6, #1
 80058bc:	ab0c      	add	r3, sp, #48	; 0x30
 80058be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80058c6:	a90c      	add	r1, sp, #48	; 0x30
 80058c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80058cc:	e745      	b.n	800575a <__kernel_rem_pio2+0x1c2>
 80058ce:	1e72      	subs	r2, r6, #1
 80058d0:	ab0c      	add	r3, sp, #48	; 0x30
 80058d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80058da:	e7f4      	b.n	80058c6 <__kernel_rem_pio2+0x32e>
 80058dc:	a90c      	add	r1, sp, #48	; 0x30
 80058de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	430a      	orrs	r2, r1
 80058e6:	e796      	b.n	8005816 <__kernel_rem_pio2+0x27e>
 80058e8:	3401      	adds	r4, #1
 80058ea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d0fa      	beq.n	80058e8 <__kernel_rem_pio2+0x350>
 80058f2:	9b08      	ldr	r3, [sp, #32]
 80058f4:	f106 0801 	add.w	r8, r6, #1
 80058f8:	18f5      	adds	r5, r6, r3
 80058fa:	ab20      	add	r3, sp, #128	; 0x80
 80058fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005900:	4434      	add	r4, r6
 8005902:	4544      	cmp	r4, r8
 8005904:	da04      	bge.n	8005910 <__kernel_rem_pio2+0x378>
 8005906:	4626      	mov	r6, r4
 8005908:	e6bf      	b.n	800568a <__kernel_rem_pio2+0xf2>
 800590a:	2401      	movs	r4, #1
 800590c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800590e:	e7ec      	b.n	80058ea <__kernel_rem_pio2+0x352>
 8005910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005912:	f04f 0900 	mov.w	r9, #0
 8005916:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800591a:	f7fa fd6b 	bl	80003f4 <__aeabi_i2d>
 800591e:	2600      	movs	r6, #0
 8005920:	2700      	movs	r7, #0
 8005922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005924:	e9c5 0100 	strd	r0, r1, [r5]
 8005928:	3b08      	subs	r3, #8
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	9504      	str	r5, [sp, #16]
 800592e:	9b07      	ldr	r3, [sp, #28]
 8005930:	4599      	cmp	r9, r3
 8005932:	dd05      	ble.n	8005940 <__kernel_rem_pio2+0x3a8>
 8005934:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8005938:	f108 0801 	add.w	r8, r8, #1
 800593c:	3508      	adds	r5, #8
 800593e:	e7e0      	b.n	8005902 <__kernel_rem_pio2+0x36a>
 8005940:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005944:	9900      	ldr	r1, [sp, #0]
 8005946:	f109 0901 	add.w	r9, r9, #1
 800594a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800594e:	9100      	str	r1, [sp, #0]
 8005950:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8005954:	f8cd c010 	str.w	ip, [sp, #16]
 8005958:	f7fa fdb6 	bl	80004c8 <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	f7fa fbfa 	bl	800015c <__adddf3>
 8005968:	4606      	mov	r6, r0
 800596a:	460f      	mov	r7, r1
 800596c:	e7df      	b.n	800592e <__kernel_rem_pio2+0x396>
 800596e:	3c01      	subs	r4, #1
 8005970:	e756      	b.n	8005820 <__kernel_rem_pio2+0x288>
 8005972:	f1cb 0200 	rsb	r2, fp, #0
 8005976:	4640      	mov	r0, r8
 8005978:	4649      	mov	r1, r9
 800597a:	f000 fbd1 	bl	8006120 <scalbn>
 800597e:	2200      	movs	r2, #0
 8005980:	4ba4      	ldr	r3, [pc, #656]	; (8005c14 <__kernel_rem_pio2+0x67c>)
 8005982:	4604      	mov	r4, r0
 8005984:	460d      	mov	r5, r1
 8005986:	f7fb f825 	bl	80009d4 <__aeabi_dcmpge>
 800598a:	b1f8      	cbz	r0, 80059cc <__kernel_rem_pio2+0x434>
 800598c:	2200      	movs	r2, #0
 800598e:	4ba2      	ldr	r3, [pc, #648]	; (8005c18 <__kernel_rem_pio2+0x680>)
 8005990:	4620      	mov	r0, r4
 8005992:	4629      	mov	r1, r5
 8005994:	f7fa fd98 	bl	80004c8 <__aeabi_dmul>
 8005998:	f7fb f830 	bl	80009fc <__aeabi_d2iz>
 800599c:	4607      	mov	r7, r0
 800599e:	f7fa fd29 	bl	80003f4 <__aeabi_i2d>
 80059a2:	2200      	movs	r2, #0
 80059a4:	4b9b      	ldr	r3, [pc, #620]	; (8005c14 <__kernel_rem_pio2+0x67c>)
 80059a6:	f7fa fd8f 	bl	80004c8 <__aeabi_dmul>
 80059aa:	460b      	mov	r3, r1
 80059ac:	4602      	mov	r2, r0
 80059ae:	4629      	mov	r1, r5
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7fa fbd1 	bl	8000158 <__aeabi_dsub>
 80059b6:	f7fb f821 	bl	80009fc <__aeabi_d2iz>
 80059ba:	1c74      	adds	r4, r6, #1
 80059bc:	ab0c      	add	r3, sp, #48	; 0x30
 80059be:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80059c2:	f10b 0b18 	add.w	fp, fp, #24
 80059c6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80059ca:	e731      	b.n	8005830 <__kernel_rem_pio2+0x298>
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fb f814 	bl	80009fc <__aeabi_d2iz>
 80059d4:	ab0c      	add	r3, sp, #48	; 0x30
 80059d6:	4634      	mov	r4, r6
 80059d8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80059dc:	e728      	b.n	8005830 <__kernel_rem_pio2+0x298>
 80059de:	ab0c      	add	r3, sp, #48	; 0x30
 80059e0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80059e4:	f7fa fd06 	bl	80003f4 <__aeabi_i2d>
 80059e8:	4632      	mov	r2, r6
 80059ea:	463b      	mov	r3, r7
 80059ec:	f7fa fd6c 	bl	80004c8 <__aeabi_dmul>
 80059f0:	4642      	mov	r2, r8
 80059f2:	e86b 0102 	strd	r0, r1, [fp], #-8
 80059f6:	464b      	mov	r3, r9
 80059f8:	4630      	mov	r0, r6
 80059fa:	4639      	mov	r1, r7
 80059fc:	f7fa fd64 	bl	80004c8 <__aeabi_dmul>
 8005a00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	e722      	b.n	8005850 <__kernel_rem_pio2+0x2b8>
 8005a0a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005a0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005a12:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005a16:	f8cd c01c 	str.w	ip, [sp, #28]
 8005a1a:	f7fa fd55 	bl	80004c8 <__aeabi_dmul>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4650      	mov	r0, sl
 8005a24:	4659      	mov	r1, fp
 8005a26:	f7fa fb99 	bl	800015c <__adddf3>
 8005a2a:	4682      	mov	sl, r0
 8005a2c:	468b      	mov	fp, r1
 8005a2e:	f108 0801 	add.w	r8, r8, #1
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	4598      	cmp	r8, r3
 8005a36:	dc01      	bgt.n	8005a3c <__kernel_rem_pio2+0x4a4>
 8005a38:	45b8      	cmp	r8, r7
 8005a3a:	dde6      	ble.n	8005a0a <__kernel_rem_pio2+0x472>
 8005a3c:	ab48      	add	r3, sp, #288	; 0x120
 8005a3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005a42:	e9c7 ab00 	strd	sl, fp, [r7]
 8005a46:	3e01      	subs	r6, #1
 8005a48:	e707      	b.n	800585a <__kernel_rem_pio2+0x2c2>
 8005a4a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	dc09      	bgt.n	8005a64 <__kernel_rem_pio2+0x4cc>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dc32      	bgt.n	8005aba <__kernel_rem_pio2+0x522>
 8005a54:	d05a      	beq.n	8005b0c <__kernel_rem_pio2+0x574>
 8005a56:	9b04      	ldr	r3, [sp, #16]
 8005a58:	f003 0007 	and.w	r0, r3, #7
 8005a5c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d1f5      	bne.n	8005a56 <__kernel_rem_pio2+0x4be>
 8005a6a:	ab48      	add	r3, sp, #288	; 0x120
 8005a6c:	441d      	add	r5, r3
 8005a6e:	46aa      	mov	sl, r5
 8005a70:	46a3      	mov	fp, r4
 8005a72:	f1bb 0f00 	cmp.w	fp, #0
 8005a76:	dc76      	bgt.n	8005b66 <__kernel_rem_pio2+0x5ce>
 8005a78:	46aa      	mov	sl, r5
 8005a7a:	46a3      	mov	fp, r4
 8005a7c:	f1bb 0f01 	cmp.w	fp, #1
 8005a80:	f300 8090 	bgt.w	8005ba4 <__kernel_rem_pio2+0x60c>
 8005a84:	2700      	movs	r7, #0
 8005a86:	463e      	mov	r6, r7
 8005a88:	2c01      	cmp	r4, #1
 8005a8a:	f300 80aa 	bgt.w	8005be2 <__kernel_rem_pio2+0x64a>
 8005a8e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8005a92:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8005a96:	9b00      	ldr	r3, [sp, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f040 80ac 	bne.w	8005bf6 <__kernel_rem_pio2+0x65e>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	9806      	ldr	r0, [sp, #24]
 8005aa4:	e9c0 2300 	strd	r2, r3, [r0]
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	460b      	mov	r3, r1
 8005aac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005ab0:	463a      	mov	r2, r7
 8005ab2:	4633      	mov	r3, r6
 8005ab4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005ab8:	e7cd      	b.n	8005a56 <__kernel_rem_pio2+0x4be>
 8005aba:	2000      	movs	r0, #0
 8005abc:	46a0      	mov	r8, r4
 8005abe:	4601      	mov	r1, r0
 8005ac0:	ab48      	add	r3, sp, #288	; 0x120
 8005ac2:	441d      	add	r5, r3
 8005ac4:	f1b8 0f00 	cmp.w	r8, #0
 8005ac8:	da3a      	bge.n	8005b40 <__kernel_rem_pio2+0x5a8>
 8005aca:	9b00      	ldr	r3, [sp, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d03e      	beq.n	8005b4e <__kernel_rem_pio2+0x5b6>
 8005ad0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	9d06      	ldr	r5, [sp, #24]
 8005ada:	2601      	movs	r6, #1
 8005adc:	e9c5 2300 	strd	r2, r3, [r5]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005ae6:	f7fa fb37 	bl	8000158 <__aeabi_dsub>
 8005aea:	4684      	mov	ip, r0
 8005aec:	460f      	mov	r7, r1
 8005aee:	ad48      	add	r5, sp, #288	; 0x120
 8005af0:	42b4      	cmp	r4, r6
 8005af2:	f105 0508 	add.w	r5, r5, #8
 8005af6:	da2c      	bge.n	8005b52 <__kernel_rem_pio2+0x5ba>
 8005af8:	9b00      	ldr	r3, [sp, #0]
 8005afa:	b10b      	cbz	r3, 8005b00 <__kernel_rem_pio2+0x568>
 8005afc:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005b00:	4662      	mov	r2, ip
 8005b02:	463b      	mov	r3, r7
 8005b04:	9906      	ldr	r1, [sp, #24]
 8005b06:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005b0a:	e7a4      	b.n	8005a56 <__kernel_rem_pio2+0x4be>
 8005b0c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8005b0e:	ab48      	add	r3, sp, #288	; 0x120
 8005b10:	4637      	mov	r7, r6
 8005b12:	441d      	add	r5, r3
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	da09      	bge.n	8005b2c <__kernel_rem_pio2+0x594>
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	b10b      	cbz	r3, 8005b20 <__kernel_rem_pio2+0x588>
 8005b1c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005b20:	4632      	mov	r2, r6
 8005b22:	463b      	mov	r3, r7
 8005b24:	9906      	ldr	r1, [sp, #24]
 8005b26:	e9c1 2300 	strd	r2, r3, [r1]
 8005b2a:	e794      	b.n	8005a56 <__kernel_rem_pio2+0x4be>
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005b32:	4639      	mov	r1, r7
 8005b34:	f7fa fb12 	bl	800015c <__adddf3>
 8005b38:	3c01      	subs	r4, #1
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460f      	mov	r7, r1
 8005b3e:	e7e9      	b.n	8005b14 <__kernel_rem_pio2+0x57c>
 8005b40:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005b44:	f7fa fb0a 	bl	800015c <__adddf3>
 8005b48:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b4c:	e7ba      	b.n	8005ac4 <__kernel_rem_pio2+0x52c>
 8005b4e:	460d      	mov	r5, r1
 8005b50:	e7c0      	b.n	8005ad4 <__kernel_rem_pio2+0x53c>
 8005b52:	4660      	mov	r0, ip
 8005b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b58:	4639      	mov	r1, r7
 8005b5a:	f7fa faff 	bl	800015c <__adddf3>
 8005b5e:	3601      	adds	r6, #1
 8005b60:	4684      	mov	ip, r0
 8005b62:	460f      	mov	r7, r1
 8005b64:	e7c4      	b.n	8005af0 <__kernel_rem_pio2+0x558>
 8005b66:	e9da 6700 	ldrd	r6, r7, [sl]
 8005b6a:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005b6e:	4632      	mov	r2, r6
 8005b70:	463b      	mov	r3, r7
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fa faf1 	bl	800015c <__adddf3>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b82:	4640      	mov	r0, r8
 8005b84:	4649      	mov	r1, r9
 8005b86:	f7fa fae7 	bl	8000158 <__aeabi_dsub>
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	f7fa fae5 	bl	800015c <__adddf3>
 8005b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b96:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005b9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b9e:	e9ca 2300 	strd	r2, r3, [sl]
 8005ba2:	e766      	b.n	8005a72 <__kernel_rem_pio2+0x4da>
 8005ba4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005ba8:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005bac:	4642      	mov	r2, r8
 8005bae:	464b      	mov	r3, r9
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fad2 	bl	800015c <__adddf3>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fa fac8 	bl	8000158 <__aeabi_dsub>
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	f7fa fac6 	bl	800015c <__adddf3>
 8005bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bd4:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005bd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bdc:	e9ca 2300 	strd	r2, r3, [sl]
 8005be0:	e74c      	b.n	8005a7c <__kernel_rem_pio2+0x4e4>
 8005be2:	4638      	mov	r0, r7
 8005be4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005be8:	4631      	mov	r1, r6
 8005bea:	f7fa fab7 	bl	800015c <__adddf3>
 8005bee:	3c01      	subs	r4, #1
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	460e      	mov	r6, r1
 8005bf4:	e748      	b.n	8005a88 <__kernel_rem_pio2+0x4f0>
 8005bf6:	9b06      	ldr	r3, [sp, #24]
 8005bf8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005bfc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005c00:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005c04:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005c08:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005c0c:	601d      	str	r5, [r3, #0]
 8005c0e:	615e      	str	r6, [r3, #20]
 8005c10:	e721      	b.n	8005a56 <__kernel_rem_pio2+0x4be>
 8005c12:	bf00      	nop
 8005c14:	41700000 	.word	0x41700000
 8005c18:	3e700000 	.word	0x3e700000
 8005c1c:	00000000 	.word	0x00000000

08005c20 <__kernel_tan>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	b08b      	sub	sp, #44	; 0x2c
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	4bd9      	ldr	r3, [pc, #868]	; (8005f90 <__kernel_tan+0x370>)
 8005c2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005c2e:	429e      	cmp	r6, r3
 8005c30:	4604      	mov	r4, r0
 8005c32:	460d      	mov	r5, r1
 8005c34:	4682      	mov	sl, r0
 8005c36:	468b      	mov	fp, r1
 8005c38:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c3a:	9202      	str	r2, [sp, #8]
 8005c3c:	9107      	str	r1, [sp, #28]
 8005c3e:	dc58      	bgt.n	8005cf2 <__kernel_tan+0xd2>
 8005c40:	f7fa fedc 	bl	80009fc <__aeabi_d2iz>
 8005c44:	4605      	mov	r5, r0
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d178      	bne.n	8005d3c <__kernel_tan+0x11c>
 8005c4a:	1c7b      	adds	r3, r7, #1
 8005c4c:	4323      	orrs	r3, r4
 8005c4e:	4333      	orrs	r3, r6
 8005c50:	d110      	bne.n	8005c74 <__kernel_tan+0x54>
 8005c52:	4620      	mov	r0, r4
 8005c54:	4659      	mov	r1, fp
 8005c56:	f000 f9df 	bl	8006018 <fabs>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	2000      	movs	r0, #0
 8005c60:	49cc      	ldr	r1, [pc, #816]	; (8005f94 <__kernel_tan+0x374>)
 8005c62:	f7fa fd5b 	bl	800071c <__aeabi_ddiv>
 8005c66:	4682      	mov	sl, r0
 8005c68:	468b      	mov	fp, r1
 8005c6a:	4650      	mov	r0, sl
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	b00b      	add	sp, #44	; 0x2c
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c74:	2f01      	cmp	r7, #1
 8005c76:	d0f8      	beq.n	8005c6a <__kernel_tan+0x4a>
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	9a02      	ldr	r2, [sp, #8]
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	f7fa fa6c 	bl	800015c <__adddf3>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	460f      	mov	r7, r1
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	49c2      	ldr	r1, [pc, #776]	; (8005f98 <__kernel_tan+0x378>)
 8005c8e:	f7fa fd45 	bl	800071c <__aeabi_ddiv>
 8005c92:	462e      	mov	r6, r5
 8005c94:	4689      	mov	r9, r1
 8005c96:	4652      	mov	r2, sl
 8005c98:	465b      	mov	r3, fp
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	462c      	mov	r4, r5
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	460d      	mov	r5, r1
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa fa58 	bl	8000158 <__aeabi_dsub>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	9802      	ldr	r0, [sp, #8]
 8005cae:	9900      	ldr	r1, [sp, #0]
 8005cb0:	f7fa fa52 	bl	8000158 <__aeabi_dsub>
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	f7fa fc06 	bl	80004c8 <__aeabi_dmul>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4682      	mov	sl, r0
 8005cc0:	468b      	mov	fp, r1
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	f7fa fbfe 	bl	80004c8 <__aeabi_dmul>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4bb1      	ldr	r3, [pc, #708]	; (8005f94 <__kernel_tan+0x374>)
 8005cd0:	f7fa fa44 	bl	800015c <__adddf3>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4650      	mov	r0, sl
 8005cda:	4659      	mov	r1, fp
 8005cdc:	f7fa fa3e 	bl	800015c <__adddf3>
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	f7fa fbf0 	bl	80004c8 <__aeabi_dmul>
 8005ce8:	4622      	mov	r2, r4
 8005cea:	462b      	mov	r3, r5
 8005cec:	f7fa fa36 	bl	800015c <__adddf3>
 8005cf0:	e7b9      	b.n	8005c66 <__kernel_tan+0x46>
 8005cf2:	4baa      	ldr	r3, [pc, #680]	; (8005f9c <__kernel_tan+0x37c>)
 8005cf4:	429e      	cmp	r6, r3
 8005cf6:	dd21      	ble.n	8005d3c <__kernel_tan+0x11c>
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	da06      	bge.n	8005d0a <__kernel_tan+0xea>
 8005cfc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005d00:	469b      	mov	fp, r3
 8005d02:	9b00      	ldr	r3, [sp, #0]
 8005d04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	4652      	mov	r2, sl
 8005d0c:	a182      	add	r1, pc, #520	; (adr r1, 8005f18 <__kernel_tan+0x2f8>)
 8005d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d12:	465b      	mov	r3, fp
 8005d14:	f7fa fa20 	bl	8000158 <__aeabi_dsub>
 8005d18:	4604      	mov	r4, r0
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	a180      	add	r1, pc, #512	; (adr r1, 8005f20 <__kernel_tan+0x300>)
 8005d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d22:	9a02      	ldr	r2, [sp, #8]
 8005d24:	9b00      	ldr	r3, [sp, #0]
 8005d26:	f7fa fa17 	bl	8000158 <__aeabi_dsub>
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	f7fa fa15 	bl	800015c <__adddf3>
 8005d32:	2300      	movs	r3, #0
 8005d34:	4682      	mov	sl, r0
 8005d36:	468b      	mov	fp, r1
 8005d38:	9302      	str	r3, [sp, #8]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	465b      	mov	r3, fp
 8005d40:	4650      	mov	r0, sl
 8005d42:	4659      	mov	r1, fp
 8005d44:	f7fa fbc0 	bl	80004c8 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	4689      	mov	r9, r1
 8005d50:	f7fa fbba 	bl	80004c8 <__aeabi_dmul>
 8005d54:	4642      	mov	r2, r8
 8005d56:	4604      	mov	r4, r0
 8005d58:	460d      	mov	r5, r1
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	4650      	mov	r0, sl
 8005d5e:	4659      	mov	r1, fp
 8005d60:	f7fa fbb2 	bl	80004c8 <__aeabi_dmul>
 8005d64:	a370      	add	r3, pc, #448	; (adr r3, 8005f28 <__kernel_tan+0x308>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa fba9 	bl	80004c8 <__aeabi_dmul>
 8005d76:	a36e      	add	r3, pc, #440	; (adr r3, 8005f30 <__kernel_tan+0x310>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f7fa f9ee 	bl	800015c <__adddf3>
 8005d80:	4622      	mov	r2, r4
 8005d82:	462b      	mov	r3, r5
 8005d84:	f7fa fba0 	bl	80004c8 <__aeabi_dmul>
 8005d88:	a36b      	add	r3, pc, #428	; (adr r3, 8005f38 <__kernel_tan+0x318>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa f9e5 	bl	800015c <__adddf3>
 8005d92:	4622      	mov	r2, r4
 8005d94:	462b      	mov	r3, r5
 8005d96:	f7fa fb97 	bl	80004c8 <__aeabi_dmul>
 8005d9a:	a369      	add	r3, pc, #420	; (adr r3, 8005f40 <__kernel_tan+0x320>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa f9dc 	bl	800015c <__adddf3>
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	f7fa fb8e 	bl	80004c8 <__aeabi_dmul>
 8005dac:	a366      	add	r3, pc, #408	; (adr r3, 8005f48 <__kernel_tan+0x328>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f7fa f9d3 	bl	800015c <__adddf3>
 8005db6:	4622      	mov	r2, r4
 8005db8:	462b      	mov	r3, r5
 8005dba:	f7fa fb85 	bl	80004c8 <__aeabi_dmul>
 8005dbe:	a364      	add	r3, pc, #400	; (adr r3, 8005f50 <__kernel_tan+0x330>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa f9ca 	bl	800015c <__adddf3>
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	f7fa fb7c 	bl	80004c8 <__aeabi_dmul>
 8005dd0:	a361      	add	r3, pc, #388	; (adr r3, 8005f58 <__kernel_tan+0x338>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f7fa fb73 	bl	80004c8 <__aeabi_dmul>
 8005de2:	a35f      	add	r3, pc, #380	; (adr r3, 8005f60 <__kernel_tan+0x340>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f7fa f9b8 	bl	800015c <__adddf3>
 8005dec:	4622      	mov	r2, r4
 8005dee:	462b      	mov	r3, r5
 8005df0:	f7fa fb6a 	bl	80004c8 <__aeabi_dmul>
 8005df4:	a35c      	add	r3, pc, #368	; (adr r3, 8005f68 <__kernel_tan+0x348>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa f9af 	bl	800015c <__adddf3>
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	f7fa fb61 	bl	80004c8 <__aeabi_dmul>
 8005e06:	a35a      	add	r3, pc, #360	; (adr r3, 8005f70 <__kernel_tan+0x350>)
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f7fa f9a6 	bl	800015c <__adddf3>
 8005e10:	4622      	mov	r2, r4
 8005e12:	462b      	mov	r3, r5
 8005e14:	f7fa fb58 	bl	80004c8 <__aeabi_dmul>
 8005e18:	a357      	add	r3, pc, #348	; (adr r3, 8005f78 <__kernel_tan+0x358>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f7fa f99d 	bl	800015c <__adddf3>
 8005e22:	4622      	mov	r2, r4
 8005e24:	462b      	mov	r3, r5
 8005e26:	f7fa fb4f 	bl	80004c8 <__aeabi_dmul>
 8005e2a:	a355      	add	r3, pc, #340	; (adr r3, 8005f80 <__kernel_tan+0x360>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa f994 	bl	800015c <__adddf3>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e3c:	f7fa f98e 	bl	800015c <__adddf3>
 8005e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e44:	f7fa fb40 	bl	80004c8 <__aeabi_dmul>
 8005e48:	9a02      	ldr	r2, [sp, #8]
 8005e4a:	9b00      	ldr	r3, [sp, #0]
 8005e4c:	f7fa f986 	bl	800015c <__adddf3>
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	f7fa fb38 	bl	80004c8 <__aeabi_dmul>
 8005e58:	9a02      	ldr	r2, [sp, #8]
 8005e5a:	9b00      	ldr	r3, [sp, #0]
 8005e5c:	f7fa f97e 	bl	800015c <__adddf3>
 8005e60:	a349      	add	r3, pc, #292	; (adr r3, 8005f88 <__kernel_tan+0x368>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
 8005e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e6e:	f7fa fb2b 	bl	80004c8 <__aeabi_dmul>
 8005e72:	4622      	mov	r2, r4
 8005e74:	462b      	mov	r3, r5
 8005e76:	f7fa f971 	bl	800015c <__adddf3>
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	e9cd 0100 	strd	r0, r1, [sp]
 8005e80:	4602      	mov	r2, r0
 8005e82:	4659      	mov	r1, fp
 8005e84:	4650      	mov	r0, sl
 8005e86:	f7fa f969 	bl	800015c <__adddf3>
 8005e8a:	4b44      	ldr	r3, [pc, #272]	; (8005f9c <__kernel_tan+0x37c>)
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	429e      	cmp	r6, r3
 8005e90:	460d      	mov	r5, r1
 8005e92:	f340 8085 	ble.w	8005fa0 <__kernel_tan+0x380>
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7fa faac 	bl	80003f4 <__aeabi_i2d>
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4680      	mov	r8, r0
 8005ea0:	4689      	mov	r9, r1
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	f7fa fb0e 	bl	80004c8 <__aeabi_dmul>
 8005eac:	4642      	mov	r2, r8
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f7fa f950 	bl	800015c <__adddf3>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fc2a 	bl	800071c <__aeabi_ddiv>
 8005ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ecc:	f7fa f944 	bl	8000158 <__aeabi_dsub>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	4659      	mov	r1, fp
 8005ed8:	f7fa f93e 	bl	8000158 <__aeabi_dsub>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	f7fa f93c 	bl	800015c <__adddf3>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4640      	mov	r0, r8
 8005eea:	4649      	mov	r1, r9
 8005eec:	f7fa f934 	bl	8000158 <__aeabi_dsub>
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	179b      	asrs	r3, r3, #30
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	f1c3 0001 	rsb	r0, r3, #1
 8005efe:	460d      	mov	r5, r1
 8005f00:	f7fa fa78 	bl	80003f4 <__aeabi_i2d>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	f7fa fadc 	bl	80004c8 <__aeabi_dmul>
 8005f10:	e6a9      	b.n	8005c66 <__kernel_tan+0x46>
 8005f12:	bf00      	nop
 8005f14:	f3af 8000 	nop.w
 8005f18:	54442d18 	.word	0x54442d18
 8005f1c:	3fe921fb 	.word	0x3fe921fb
 8005f20:	33145c07 	.word	0x33145c07
 8005f24:	3c81a626 	.word	0x3c81a626
 8005f28:	74bf7ad4 	.word	0x74bf7ad4
 8005f2c:	3efb2a70 	.word	0x3efb2a70
 8005f30:	32f0a7e9 	.word	0x32f0a7e9
 8005f34:	3f12b80f 	.word	0x3f12b80f
 8005f38:	1a8d1068 	.word	0x1a8d1068
 8005f3c:	3f3026f7 	.word	0x3f3026f7
 8005f40:	fee08315 	.word	0xfee08315
 8005f44:	3f57dbc8 	.word	0x3f57dbc8
 8005f48:	e96e8493 	.word	0xe96e8493
 8005f4c:	3f8226e3 	.word	0x3f8226e3
 8005f50:	1bb341fe 	.word	0x1bb341fe
 8005f54:	3faba1ba 	.word	0x3faba1ba
 8005f58:	db605373 	.word	0xdb605373
 8005f5c:	bef375cb 	.word	0xbef375cb
 8005f60:	a03792a6 	.word	0xa03792a6
 8005f64:	3f147e88 	.word	0x3f147e88
 8005f68:	f2f26501 	.word	0xf2f26501
 8005f6c:	3f4344d8 	.word	0x3f4344d8
 8005f70:	c9560328 	.word	0xc9560328
 8005f74:	3f6d6d22 	.word	0x3f6d6d22
 8005f78:	8406d637 	.word	0x8406d637
 8005f7c:	3f9664f4 	.word	0x3f9664f4
 8005f80:	1110fe7a 	.word	0x1110fe7a
 8005f84:	3fc11111 	.word	0x3fc11111
 8005f88:	55555563 	.word	0x55555563
 8005f8c:	3fd55555 	.word	0x3fd55555
 8005f90:	3e2fffff 	.word	0x3e2fffff
 8005f94:	3ff00000 	.word	0x3ff00000
 8005f98:	bff00000 	.word	0xbff00000
 8005f9c:	3fe59427 	.word	0x3fe59427
 8005fa0:	2f01      	cmp	r7, #1
 8005fa2:	d031      	beq.n	8006008 <__kernel_tan+0x3e8>
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	2000      	movs	r0, #0
 8005fac:	4918      	ldr	r1, [pc, #96]	; (8006010 <__kernel_tan+0x3f0>)
 8005fae:	f7fa fbb5 	bl	800071c <__aeabi_ddiv>
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	465b      	mov	r3, fp
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa f8c8 	bl	8000158 <__aeabi_dsub>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fd0:	f7fa f8c2 	bl	8000158 <__aeabi_dsub>
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	f7fa fa76 	bl	80004c8 <__aeabi_dmul>
 8005fdc:	4632      	mov	r2, r6
 8005fde:	4682      	mov	sl, r0
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa fa6e 	bl	80004c8 <__aeabi_dmul>
 8005fec:	2200      	movs	r2, #0
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <__kernel_tan+0x3f4>)
 8005ff0:	f7fa f8b4 	bl	800015c <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4650      	mov	r0, sl
 8005ffa:	4659      	mov	r1, fp
 8005ffc:	f7fa f8ae 	bl	800015c <__adddf3>
 8006000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006004:	4634      	mov	r4, r6
 8006006:	e66d      	b.n	8005ce4 <__kernel_tan+0xc4>
 8006008:	4682      	mov	sl, r0
 800600a:	468b      	mov	fp, r1
 800600c:	e62d      	b.n	8005c6a <__kernel_tan+0x4a>
 800600e:	bf00      	nop
 8006010:	bff00000 	.word	0xbff00000
 8006014:	3ff00000 	.word	0x3ff00000

08006018 <fabs>:
 8006018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800601c:	4770      	bx	lr
	...

08006020 <floor>:
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006024:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006028:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800602c:	2e13      	cmp	r6, #19
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4607      	mov	r7, r0
 8006034:	460c      	mov	r4, r1
 8006036:	4605      	mov	r5, r0
 8006038:	dc33      	bgt.n	80060a2 <floor+0x82>
 800603a:	2e00      	cmp	r6, #0
 800603c:	da14      	bge.n	8006068 <floor+0x48>
 800603e:	a334      	add	r3, pc, #208	; (adr r3, 8006110 <floor+0xf0>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa f88a 	bl	800015c <__adddf3>
 8006048:	2200      	movs	r2, #0
 800604a:	2300      	movs	r3, #0
 800604c:	f7fa fccc 	bl	80009e8 <__aeabi_dcmpgt>
 8006050:	b138      	cbz	r0, 8006062 <floor+0x42>
 8006052:	2c00      	cmp	r4, #0
 8006054:	da58      	bge.n	8006108 <floor+0xe8>
 8006056:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800605a:	431d      	orrs	r5, r3
 800605c:	d001      	beq.n	8006062 <floor+0x42>
 800605e:	2500      	movs	r5, #0
 8006060:	4c2d      	ldr	r4, [pc, #180]	; (8006118 <floor+0xf8>)
 8006062:	4623      	mov	r3, r4
 8006064:	462f      	mov	r7, r5
 8006066:	e025      	b.n	80060b4 <floor+0x94>
 8006068:	4a2c      	ldr	r2, [pc, #176]	; (800611c <floor+0xfc>)
 800606a:	fa42 f806 	asr.w	r8, r2, r6
 800606e:	ea01 0208 	and.w	r2, r1, r8
 8006072:	4302      	orrs	r2, r0
 8006074:	d01e      	beq.n	80060b4 <floor+0x94>
 8006076:	a326      	add	r3, pc, #152	; (adr r3, 8006110 <floor+0xf0>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f7fa f86e 	bl	800015c <__adddf3>
 8006080:	2200      	movs	r2, #0
 8006082:	2300      	movs	r3, #0
 8006084:	f7fa fcb0 	bl	80009e8 <__aeabi_dcmpgt>
 8006088:	2800      	cmp	r0, #0
 800608a:	d0ea      	beq.n	8006062 <floor+0x42>
 800608c:	2c00      	cmp	r4, #0
 800608e:	bfbe      	ittt	lt
 8006090:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006094:	fa43 f606 	asrlt.w	r6, r3, r6
 8006098:	19a4      	addlt	r4, r4, r6
 800609a:	2500      	movs	r5, #0
 800609c:	ea24 0408 	bic.w	r4, r4, r8
 80060a0:	e7df      	b.n	8006062 <floor+0x42>
 80060a2:	2e33      	cmp	r6, #51	; 0x33
 80060a4:	dd0a      	ble.n	80060bc <floor+0x9c>
 80060a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80060aa:	d103      	bne.n	80060b4 <floor+0x94>
 80060ac:	f7fa f856 	bl	800015c <__adddf3>
 80060b0:	4607      	mov	r7, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4638      	mov	r0, r7
 80060b6:	4619      	mov	r1, r3
 80060b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80060c4:	fa22 f808 	lsr.w	r8, r2, r8
 80060c8:	ea18 0f00 	tst.w	r8, r0
 80060cc:	d0f2      	beq.n	80060b4 <floor+0x94>
 80060ce:	a310      	add	r3, pc, #64	; (adr r3, 8006110 <floor+0xf0>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f7fa f842 	bl	800015c <__adddf3>
 80060d8:	2200      	movs	r2, #0
 80060da:	2300      	movs	r3, #0
 80060dc:	f7fa fc84 	bl	80009e8 <__aeabi_dcmpgt>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d0be      	beq.n	8006062 <floor+0x42>
 80060e4:	2c00      	cmp	r4, #0
 80060e6:	da02      	bge.n	80060ee <floor+0xce>
 80060e8:	2e14      	cmp	r6, #20
 80060ea:	d103      	bne.n	80060f4 <floor+0xd4>
 80060ec:	3401      	adds	r4, #1
 80060ee:	ea25 0508 	bic.w	r5, r5, r8
 80060f2:	e7b6      	b.n	8006062 <floor+0x42>
 80060f4:	2301      	movs	r3, #1
 80060f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80060fa:	fa03 f606 	lsl.w	r6, r3, r6
 80060fe:	4435      	add	r5, r6
 8006100:	42bd      	cmp	r5, r7
 8006102:	bf38      	it	cc
 8006104:	18e4      	addcc	r4, r4, r3
 8006106:	e7f2      	b.n	80060ee <floor+0xce>
 8006108:	2500      	movs	r5, #0
 800610a:	462c      	mov	r4, r5
 800610c:	e7a9      	b.n	8006062 <floor+0x42>
 800610e:	bf00      	nop
 8006110:	8800759c 	.word	0x8800759c
 8006114:	7e37e43c 	.word	0x7e37e43c
 8006118:	bff00000 	.word	0xbff00000
 800611c:	000fffff 	.word	0x000fffff

08006120 <scalbn>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	4617      	mov	r7, r2
 800612c:	460b      	mov	r3, r1
 800612e:	b996      	cbnz	r6, 8006156 <scalbn+0x36>
 8006130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006134:	4303      	orrs	r3, r0
 8006136:	d039      	beq.n	80061ac <scalbn+0x8c>
 8006138:	4b33      	ldr	r3, [pc, #204]	; (8006208 <scalbn+0xe8>)
 800613a:	2200      	movs	r2, #0
 800613c:	f7fa f9c4 	bl	80004c8 <__aeabi_dmul>
 8006140:	4b32      	ldr	r3, [pc, #200]	; (800620c <scalbn+0xec>)
 8006142:	4604      	mov	r4, r0
 8006144:	429f      	cmp	r7, r3
 8006146:	460d      	mov	r5, r1
 8006148:	da0f      	bge.n	800616a <scalbn+0x4a>
 800614a:	a32b      	add	r3, pc, #172	; (adr r3, 80061f8 <scalbn+0xd8>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f7fa f9ba 	bl	80004c8 <__aeabi_dmul>
 8006154:	e006      	b.n	8006164 <scalbn+0x44>
 8006156:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800615a:	4296      	cmp	r6, r2
 800615c:	d10a      	bne.n	8006174 <scalbn+0x54>
 800615e:	4602      	mov	r2, r0
 8006160:	f7f9 fffc 	bl	800015c <__adddf3>
 8006164:	4604      	mov	r4, r0
 8006166:	460d      	mov	r5, r1
 8006168:	e020      	b.n	80061ac <scalbn+0x8c>
 800616a:	460b      	mov	r3, r1
 800616c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006170:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006174:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006178:	19b9      	adds	r1, r7, r6
 800617a:	4291      	cmp	r1, r2
 800617c:	dd0e      	ble.n	800619c <scalbn+0x7c>
 800617e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006182:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006186:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800618a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800618e:	4820      	ldr	r0, [pc, #128]	; (8006210 <scalbn+0xf0>)
 8006190:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006194:	a31a      	add	r3, pc, #104	; (adr r3, 8006200 <scalbn+0xe0>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	e7d9      	b.n	8006150 <scalbn+0x30>
 800619c:	2900      	cmp	r1, #0
 800619e:	dd08      	ble.n	80061b2 <scalbn+0x92>
 80061a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80061b6:	da12      	bge.n	80061de <scalbn+0xbe>
 80061b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80061bc:	429f      	cmp	r7, r3
 80061be:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80061c2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80061c6:	dcdc      	bgt.n	8006182 <scalbn+0x62>
 80061c8:	a30b      	add	r3, pc, #44	; (adr r3, 80061f8 <scalbn+0xd8>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80061d2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80061d6:	480f      	ldr	r0, [pc, #60]	; (8006214 <scalbn+0xf4>)
 80061d8:	f041 011f 	orr.w	r1, r1, #31
 80061dc:	e7b8      	b.n	8006150 <scalbn+0x30>
 80061de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061e2:	3136      	adds	r1, #54	; 0x36
 80061e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	2200      	movs	r2, #0
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <scalbn+0xf8>)
 80061f4:	e7ac      	b.n	8006150 <scalbn+0x30>
 80061f6:	bf00      	nop
 80061f8:	c2f8f359 	.word	0xc2f8f359
 80061fc:	01a56e1f 	.word	0x01a56e1f
 8006200:	8800759c 	.word	0x8800759c
 8006204:	7e37e43c 	.word	0x7e37e43c
 8006208:	43500000 	.word	0x43500000
 800620c:	ffff3cb0 	.word	0xffff3cb0
 8006210:	8800759c 	.word	0x8800759c
 8006214:	c2f8f359 	.word	0xc2f8f359
 8006218:	3c900000 	.word	0x3c900000

0800621c <_init>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr

08006228 <_fini>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr
