
Open Source ColorAlti FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080060b0  080060b0  000160b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08006110  08006110  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006110  08006110  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000088  080061a0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080061a0  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b5  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c0  00000000  00000000  0002d866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0002fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000308e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018169  00000000  00000000  000315a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c22  00000000  00000000  00049711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6cb  00000000  00000000  0005a333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e49fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  000e4a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08006094 	.word	0x08006094

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08006094 	.word	0x08006094

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <LPS_Init>:
#include "LPS22HB.h"

struct LPS_CONFIG lpsConfig;

uint8_t LPS_Init(I2C_HandleTypeDef* i2c_config, uint16_t address)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1000);
 8000a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a78:	f001 f8c0 	bl	8001bfc <HAL_Delay>
	lpsConfig.i2c_config = i2c_config;
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <LPS_Init+0x64>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
	lpsConfig.address = address;
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <LPS_Init+0x64>)
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	8093      	strh	r3, [r2, #4]

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 8000a88:	2305      	movs	r3, #5
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	21b8      	movs	r1, #184	; 0xb8
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f002 fa8e 	bl	8002fb0 <HAL_I2C_IsDeviceReady>
 8000a94:	4603      	mov	r3, r0
 8000a96:	73fb      	strb	r3, [r7, #15]
	if(i2c_status == HAL_BUSY) {
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d101      	bne.n	8000aa2 <LPS_Init+0x3a>
		return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e00f      	b.n	8000ac2 <LPS_Init+0x5a>
	}

	//Set the ouptut data rate (odr)
	LPS_Set_Odr(ODR_75hz);
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f000 f832 	bl	8000b0c <LPS_Set_Odr>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = LPS_Get_Odr();
 8000aa8:	f000 f862 	bl	8000b70 <LPS_Get_Odr>
 8000aac:	4603      	mov	r3, r0
 8000aae:	73bb      	strb	r3, [r7, #14]
	if(odr != ODR_75hz) {
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	2b05      	cmp	r3, #5
 8000ab4:	d001      	beq.n	8000aba <LPS_Init+0x52>
		return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e003      	b.n	8000ac2 <LPS_Init+0x5a>
	}

	//Set FIFO mode to BYPASS
	LPS_Configure_Fifo(BYPASS);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f86a 	bl	8000b94 <LPS_Configure_Fifo>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return 1;
 8000ac0:	2301      	movs	r3, #1
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000a4 	.word	0x200000a4

08000ad0 <LPS_Reg_Read>:

void LPS_Reg_Read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	603a      	str	r2, [r7, #0]
 8000ada:	80fb      	strh	r3, [r7, #6]
 8000adc:	460b      	mov	r3, r1
 8000ade:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), reg_addr, 1, data_output, reg_size, 100);
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <LPS_Reg_Read+0x38>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <LPS_Reg_Read+0x38>)
 8000ae6:	889b      	ldrh	r3, [r3, #4]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	b299      	uxth	r1, r3
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	f001 fff0 	bl	8002ae0 <HAL_I2C_Mem_Read>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000a4 	.word	0x200000a4

08000b0c <LPS_Set_Odr>:

//Configures the output data rate (ODR)
void LPS_Set_Odr(enum LPS_ODR new_odr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2010      	movs	r0, #16
 8000b20:	f7ff ffd6 	bl	8000ad0 <LPS_Reg_Read>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 8000b24:	7b3b      	ldrb	r3, [r7, #12]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 8000b2e:	7a3b      	ldrb	r3, [r7, #8]
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <LPS_Set_Odr+0x60>)
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <LPS_Set_Odr+0x60>)
 8000b46:	889b      	ldrh	r3, [r3, #4]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	9302      	str	r3, [sp, #8]
 8000b50:	2301      	movs	r3, #1
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	f001 fec5 	bl	80028ec <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000a4 	.word	0x200000a4

08000b70 <LPS_Get_Odr>:

//Reads the sensors odr
enum LPS_ODR LPS_Get_Odr()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2010      	movs	r0, #16
 8000b7e:	f7ff ffa7 	bl	8000ad0 <LPS_Reg_Read>
	uint8_t odr_code = (existingConfig[0] >> 4);
 8000b82:	793b      	ldrb	r3, [r7, #4]
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	71fb      	strb	r3, [r7, #7]

	return odr_code;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <LPS_Configure_Fifo>:

//Configures the FIFO for the desired mode
void LPS_Configure_Fifo(enum LPS_FIFO desiredFifo)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d11d      	bne.n	8000be0 <LPS_Configure_Fifo+0x4c>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	LPS_Reg_Read(FIFO_CTRL, 1, existingConfig);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2101      	movs	r1, #1
 8000bac:	2014      	movs	r0, #20
 8000bae:	f7ff ff8f 	bl	8000ad0 <LPS_Reg_Read>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 8000bb2:	7b3b      	ldrb	r3, [r7, #12]
 8000bb4:	f003 031f 	and.w	r3, r3, #31
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t) (lpsConfig.address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <LPS_Configure_Fifo+0x54>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <LPS_Configure_Fifo+0x54>)
 8000bc2:	889b      	ldrh	r3, [r3, #4]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	b299      	uxth	r1, r3
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2214      	movs	r2, #20
 8000bda:	f001 fe87 	bl	80028ec <HAL_I2C_Mem_Write>
 8000bde:	e000      	b.n	8000be2 <LPS_Configure_Fifo+0x4e>
		return;
 8000be0:	bf00      	nop
}
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000a4 	.word	0x200000a4

08000bec <LPS_Get_Pressure>:

//Returns the pressure read by the sensor in HPA
double LPS_Get_Pressure()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 4096.0;
 8000bf2:	f04f 0200 	mov.w	r2, #0
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <LPS_Get_Pressure+0x64>)
 8000bf8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	LPS_Reg_Read(PRESS_OUT_H, 1, press_out_h);
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	461a      	mov	r2, r3
 8000c02:	2101      	movs	r1, #1
 8000c04:	202a      	movs	r0, #42	; 0x2a
 8000c06:	f7ff ff63 	bl	8000ad0 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_L, 1, press_out_l);
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2029      	movs	r0, #41	; 0x29
 8000c12:	f7ff ff5d 	bl	8000ad0 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_XL, 1, press_out_xl);
 8000c16:	463b      	mov	r3, r7
 8000c18:	461a      	mov	r2, r3
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2028      	movs	r0, #40	; 0x28
 8000c1e:	f7ff ff57 	bl	8000ad0 <LPS_Reg_Read>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 8000c22:	7a3b      	ldrb	r3, [r7, #8]
 8000c24:	041a      	lsls	r2, r3, #16
 8000c26:	793b      	ldrb	r3, [r7, #4]
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	4413      	add	r3, r2
 8000c2c:	783a      	ldrb	r2, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]

	return pressure / SCALING_FACTOR;
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f7ff fbce 	bl	80003d4 <__aeabi_ui2d>
 8000c38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c3c:	f7ff fd6e 	bl	800071c <__aeabi_ddiv>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
}
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40b00000 	.word	0x40b00000

08000c54 <LPS_Get_Temp>:

//Returns the temperature read by the sensor in C
double LPS_Get_Temp()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 100.0;
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <LPS_Get_Temp+0x50>)
 8000c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

	LPS_Reg_Read(TEMP_OUT_H, 1, temp_out_h);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	461a      	mov	r2, r3
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	202c      	movs	r0, #44	; 0x2c
 8000c6e:	f7ff ff2f 	bl	8000ad0 <LPS_Reg_Read>
	LPS_Reg_Read(TEMP_OUT_L, 1, temp_out_l);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	461a      	mov	r2, r3
 8000c76:	2101      	movs	r1, #1
 8000c78:	202b      	movs	r0, #43	; 0x2b
 8000c7a:	f7ff ff29 	bl	8000ad0 <LPS_Reg_Read>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 8000c7e:	7a3b      	ldrb	r3, [r7, #8]
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	793a      	ldrb	r2, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

	return temperature / SCALING_FACTOR;
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff fba3 	bl	80003d4 <__aeabi_ui2d>
 8000c8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c92:	f7ff fd43 	bl	800071c <__aeabi_ddiv>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
}
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40590000 	.word	0x40590000

08000ca8 <LPS_Get_RelAlt_Ft>:
	return pressHPA * 0.0009869233;
}

//Reference pressure is pressure in Pa at surface
double LPS_Get_RelAlt_Ft(uint32_t reference_pressure)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	double p = LPS_Get_Pressure();
 8000cb0:	f7ff ff9c 	bl	8000bec <LPS_Get_Pressure>
 8000cb4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double t = LPS_Get_Temp();
 8000cb8:	f7ff ffcc 	bl	8000c54 <LPS_Get_Temp>
 8000cbc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)reference_pressure / p;
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fb87 	bl	80003d4 <__aeabi_ui2d>
 8000cc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000cca:	f7ff fd27 	bl	800071c <__aeabi_ddiv>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exponential = pow(frac_p, (double)1.0/5.257);
 8000cd6:	a320      	add	r3, pc, #128	; (adr r3, 8000d58 <LPS_Get_RelAlt_Ft+0xb0>)
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ce0:	f004 faf4 	bl	80052cc <pow>
 8000ce4:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double fraction_top = (exponential - 1) * (t + 273.15);
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <LPS_Get_RelAlt_Ft+0xd0>)
 8000cee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cf2:	f7ff fa31 	bl	8000158 <__aeabi_dsub>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4614      	mov	r4, r2
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	a318      	add	r3, pc, #96	; (adr r3, 8000d60 <LPS_Get_RelAlt_Ft+0xb8>)
 8000d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000d08:	f7ff fa28 	bl	800015c <__adddf3>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4620      	mov	r0, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	f7ff fbd8 	bl	80004c8 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double alt_m = fraction_top / 0.0065;
 8000d20:	a311      	add	r3, pc, #68	; (adr r3, 8000d68 <LPS_Get_RelAlt_Ft+0xc0>)
 8000d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d2a:	f7ff fcf7 	bl	800071c <__aeabi_ddiv>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return alt_m * 3.281; //Convert to ft and return
 8000d36:	a30e      	add	r3, pc, #56	; (adr r3, 8000d70 <LPS_Get_RelAlt_Ft+0xc8>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d40:	f7ff fbc2 	bl	80004c8 <__aeabi_dmul>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
}
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	3738      	adds	r7, #56	; 0x38
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bdb0      	pop	{r4, r5, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	f3af 8000 	nop.w
 8000d58:	7dee2d4a 	.word	0x7dee2d4a
 8000d5c:	3fc85936 	.word	0x3fc85936
 8000d60:	66666666 	.word	0x66666666
 8000d64:	40711266 	.word	0x40711266
 8000d68:	76c8b439 	.word	0x76c8b439
 8000d6c:	3f7a9fbe 	.word	0x3f7a9fbe
 8000d70:	ed916873 	.word	0xed916873
 8000d74:	400a3f7c 	.word	0x400a3f7c
 8000d78:	3ff00000 	.word	0x3ff00000

08000d7c <ColorAlti_displayLeds>:
uint32_t standbyLastFlash = 0;
uint32_t standbyFlashOnLength = 1000;
uint32_t standbyFlashOffLength = 20000-1000;

void ColorAlti_displayLeds(enum ColorAltiState state, uint16_t alt)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	460a      	mov	r2, r1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	80bb      	strh	r3, [r7, #4]
	if(state == COLORALTI_STANDBY)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d125      	bne.n	8000dde <ColorAlti_displayLeds+0x62>
	{
		uint32_t standbyFlashLength = standbyFlashOnLength + standbyFlashOffLength;
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <ColorAlti_displayLeds+0x70>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <ColorAlti_displayLeds+0x74>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
		if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8000d9e:	f000 ff23 	bl	8001be8 <HAL_GetTick>
 8000da2:	4601      	mov	r1, r0
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <ColorAlti_displayLeds+0x78>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d905      	bls.n	8000dbc <ColorAlti_displayLeds+0x40>
			standbyLastFlash = HAL_GetTick();
 8000db0:	f000 ff1a 	bl	8001be8 <HAL_GetTick>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <ColorAlti_displayLeds+0x78>)
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e010      	b.n	8000dde <ColorAlti_displayLeds+0x62>
		}
		else
		{
			if(standbyLastFlash + standbyFlashOnLength < HAL_GetTick())
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <ColorAlti_displayLeds+0x78>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <ColorAlti_displayLeds+0x70>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	18d4      	adds	r4, r2, r3
 8000dc6:	f000 ff0f 	bl	8001be8 <HAL_GetTick>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	d204      	bcs.n	8000dda <ColorAlti_displayLeds+0x5e>
			{
				Strip_Progress_Bar_Single_Color(1, GREEN);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 f9d9 	bl	800118a <Strip_Progress_Bar_Single_Color>
 8000dd8:	e001      	b.n	8000dde <ColorAlti_displayLeds+0x62>
			}
			else
			{
				Strip_Clear();
 8000dda:	f000 f9fa 	bl	80011d2 <Strip_Clear>
	if(state == COLORALTI_CANOPY)
	{

	}

	Strip_Send();
 8000dde:	f000 f9fe 	bl	80011de <Strip_Send>
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000004 	.word	0x20000004
 8000df4:	200000ac 	.word	0x200000ac

08000df8 <StateController_updateState>:
uint32_t deployTestStart = 0; //ms, the timestamp for starting to validate deployment
uint32_t deployTestThresholdTime = 2000; //ms, threshold time that vertical speed has to be under 50mph
uint16_t deployTestStartAlt = 0; //ft, altitude at beginning of current deployment test

void StateController_updateState(uint16_t alt)
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	uint16_t exit = 12500;
 8000e02:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000e06:	81fb      	strh	r3, [r7, #14]
	uint16_t breakoff = 5500;
 8000e08:	f241 537c 	movw	r3, #5500	; 0x157c
 8000e0c:	81bb      	strh	r3, [r7, #12]
	uint16_t deploy = 4500;
 8000e0e:	f241 1394 	movw	r3, #4500	; 0x1194
 8000e12:	817b      	strh	r3, [r7, #10]

	if(StateController_currentState == COLORALTI_STANDBY)
 8000e14:	4b9f      	ldr	r3, [pc, #636]	; (8001094 <StateController_updateState+0x29c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d12d      	bne.n	8000e78 <StateController_updateState+0x80>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > ascentThreshold)
 8000e1c:	4b9e      	ldr	r3, [pc, #632]	; (8001098 <StateController_updateState+0x2a0>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	88fa      	ldrh	r2, [r7, #6]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d91c      	bls.n	8000e60 <StateController_updateState+0x68>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 8000e26:	4b9d      	ldr	r3, [pc, #628]	; (800109c <StateController_updateState+0x2a4>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <StateController_updateState+0x46>
			{
				testingAscent = 1;
 8000e2e:	4b9b      	ldr	r3, [pc, #620]	; (800109c <StateController_updateState+0x2a4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
				ascentTestStart = HAL_GetTick();
 8000e34:	f000 fed8 	bl	8001be8 <HAL_GetTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a99      	ldr	r2, [pc, #612]	; (80010a0 <StateController_updateState+0x2a8>)
 8000e3c:	6013      	str	r3, [r2, #0]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 8000e3e:	4b97      	ldr	r3, [pc, #604]	; (800109c <StateController_updateState+0x2a4>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10c      	bne.n	8000e60 <StateController_updateState+0x68>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= ascentThresholdTime)
 8000e46:	f000 fecf 	bl	8001be8 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <StateController_updateState+0x2a8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4a94      	ldr	r2, [pc, #592]	; (80010a4 <StateController_updateState+0x2ac>)
 8000e54:	8812      	ldrh	r2, [r2, #0]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d302      	bcc.n	8000e60 <StateController_updateState+0x68>
				{
					StateController_currentState = COLORALTI_ASCENT;
 8000e5a:	4b8e      	ldr	r3, [pc, #568]	; (8001094 <StateController_updateState+0x29c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < ascentThreshold)
 8000e60:	4b8d      	ldr	r3, [pc, #564]	; (8001098 <StateController_updateState+0x2a0>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d206      	bcs.n	8000e78 <StateController_updateState+0x80>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8000e6a:	4b8c      	ldr	r3, [pc, #560]	; (800109c <StateController_updateState+0x2a4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d102      	bne.n	8000e78 <StateController_updateState+0x80>
			{
				testingAscent = 0;
 8000e72:	4b8a      	ldr	r3, [pc, #552]	; (800109c <StateController_updateState+0x2a4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(StateController_currentState == COLORALTI_ASCENT)
 8000e78:	4b86      	ldr	r3, [pc, #536]	; (8001094 <StateController_updateState+0x29c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d107      	bne.n	8000e90 <StateController_updateState+0x98>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > 10000)
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d902      	bls.n	8000e90 <StateController_updateState+0x98>
		{
			StateController_currentState = COLORALTI_GEARCHECK;
 8000e8a:	4b82      	ldr	r3, [pc, #520]	; (8001094 <StateController_updateState+0x29c>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == COLORALTI_GEARCHECK)
 8000e90:	4b80      	ldr	r3, [pc, #512]	; (8001094 <StateController_updateState+0x29c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d126      	bne.n	8000ee6 <StateController_updateState+0xee>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 8000e98:	4b83      	ldr	r3, [pc, #524]	; (80010a8 <StateController_updateState+0x2b0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d107      	bne.n	8000eb0 <StateController_updateState+0xb8>
		{
			gearCheckNotificationStart = HAL_GetTick();
 8000ea0:	f000 fea2 	bl	8001be8 <HAL_GetTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a81      	ldr	r2, [pc, #516]	; (80010ac <StateController_updateState+0x2b4>)
 8000ea8:	6013      	str	r3, [r2, #0]
			displayedGearCheck = 1;
 8000eaa:	4b7f      	ldr	r3, [pc, #508]	; (80010a8 <StateController_updateState+0x2b0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck == 1 & HAL_GetTick() > gearCheckNotificationStart + gearCheckNotificationLength)
 8000eb0:	4b7d      	ldr	r3, [pc, #500]	; (80010a8 <StateController_updateState+0x2b0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2dc      	uxtb	r4, r3
 8000ebe:	f000 fe93 	bl	8001be8 <HAL_GetTick>
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	4b79      	ldr	r3, [pc, #484]	; (80010ac <StateController_updateState+0x2b4>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b79      	ldr	r3, [pc, #484]	; (80010b0 <StateController_updateState+0x2b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	bf8c      	ite	hi
 8000ed2:	2301      	movhi	r3, #1
 8000ed4:	2300      	movls	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4023      	ands	r3, r4
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <StateController_updateState+0xee>
		{
			StateController_currentState = COLORALTI_DETECT_FREEFALL_START;
 8000ee0:	4b6c      	ldr	r3, [pc, #432]	; (8001094 <StateController_updateState+0x29c>)
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == COLORALTI_DETECT_FREEFALL_START)
 8000ee6:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <StateController_updateState+0x29c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d158      	bne.n	8000fa0 <StateController_updateState+0x1a8>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 8000eee:	4b71      	ldr	r3, [pc, #452]	; (80010b4 <StateController_updateState+0x2bc>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	88fa      	ldrh	r2, [r7, #6]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d244      	bcs.n	8000f82 <StateController_updateState+0x18a>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <StateController_updateState+0x2c0>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10a      	bne.n	8000f16 <StateController_updateState+0x11e>
			{
				freefallTest = 1;
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <StateController_updateState+0x2c0>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
				freefallTestStart = HAL_GetTick();
 8000f06:	f000 fe6f 	bl	8001be8 <HAL_GetTick>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a6b      	ldr	r2, [pc, #428]	; (80010bc <StateController_updateState+0x2c4>)
 8000f0e:	6013      	str	r3, [r2, #0]
				freefallStartAlt = alt;
 8000f10:	4a6b      	ldr	r2, [pc, #428]	; (80010c0 <StateController_updateState+0x2c8>)
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	8013      	strh	r3, [r2, #0]
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + freefallThresholdTime)
 8000f16:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <StateController_updateState+0x2c0>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d131      	bne.n	8000f82 <StateController_updateState+0x18a>
 8000f1e:	f000 fe63 	bl	8001be8 <HAL_GetTick>
 8000f22:	4601      	mov	r1, r0
 8000f24:	4b65      	ldr	r3, [pc, #404]	; (80010bc <StateController_updateState+0x2c4>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b66      	ldr	r3, [pc, #408]	; (80010c4 <StateController_updateState+0x2cc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d927      	bls.n	8000f82 <StateController_updateState+0x18a>
			{
				//If average speed is above 80mph
				if(((double)(freefallStartAlt - alt) / (double)(freefallTestStart - HAL_GetTick())) >= 117.0) //80mph to fps
 8000f32:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <StateController_updateState+0x2c8>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa59 	bl	80003f4 <__aeabi_i2d>
 8000f42:	4604      	mov	r4, r0
 8000f44:	460d      	mov	r5, r1
 8000f46:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <StateController_updateState+0x2c4>)
 8000f48:	681e      	ldr	r6, [r3, #0]
 8000f4a:	f000 fe4d 	bl	8001be8 <HAL_GetTick>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	1af3      	subs	r3, r6, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa3e 	bl	80003d4 <__aeabi_ui2d>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	4629      	mov	r1, r5
 8000f60:	f7ff fbdc 	bl	800071c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <StateController_updateState+0x2d0>)
 8000f72:	f7ff fd2f 	bl	80009d4 <__aeabi_dcmpge>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <StateController_updateState+0x18a>
				{
					StateController_currentState = COLORALTI_FREEFALL;
 8000f7c:	4b45      	ldr	r3, [pc, #276]	; (8001094 <StateController_updateState+0x29c>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <StateController_updateState+0x2bc>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	88fa      	ldrh	r2, [r7, #6]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d906      	bls.n	8000f9a <StateController_updateState+0x1a2>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <StateController_updateState+0x2c0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d102      	bne.n	8000f9a <StateController_updateState+0x1a2>
			{
				freefallTest = 0;
 8000f94:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <StateController_updateState+0x2c0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
			}
		}

		prevAlt = alt;
 8000f9a:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <StateController_updateState+0x2bc>)
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	8013      	strh	r3, [r2, #0]
	}

	if(StateController_currentState == COLORALTI_FREEFALL)
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <StateController_updateState+0x29c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d108      	bne.n	8000fba <StateController_updateState+0x1c2>
	{
		if(alt < breakoff + 1500)
 8000fa8:	89bb      	ldrh	r3, [r7, #12]
 8000faa:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	db02      	blt.n	8000fba <StateController_updateState+0x1c2>
		{
			StateController_currentState = COLORALTI_APPROACHING_BREAKOFF;
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <StateController_updateState+0x29c>)
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == COLORALTI_APPROACHING_BREAKOFF)
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <StateController_updateState+0x29c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d106      	bne.n	8000fd0 <StateController_updateState+0x1d8>
	{
		if(alt < breakoff)
 8000fc2:	88fa      	ldrh	r2, [r7, #6]
 8000fc4:	89bb      	ldrh	r3, [r7, #12]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d202      	bcs.n	8000fd0 <StateController_updateState+0x1d8>
		{
			StateController_currentState = COLORALTI_BREAKOFF;
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <StateController_updateState+0x29c>)
 8000fcc:	2206      	movs	r2, #6
 8000fce:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == COLORALTI_BREAKOFF)
 8000fd0:	4b30      	ldr	r3, [pc, #192]	; (8001094 <StateController_updateState+0x29c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d108      	bne.n	8000fea <StateController_updateState+0x1f2>
	{
		if(alt < breakoff - 500)
 8000fd8:	88fa      	ldrh	r2, [r7, #6]
 8000fda:	89bb      	ldrh	r3, [r7, #12]
 8000fdc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	da02      	bge.n	8000fea <StateController_updateState+0x1f2>
		{
			StateController_currentState = COLORALTI_TRACK;
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <StateController_updateState+0x29c>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == COLORALTI_TRACK)
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <StateController_updateState+0x29c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d106      	bne.n	8001000 <StateController_updateState+0x208>
	{
		if(alt < deploy)
 8000ff2:	88fa      	ldrh	r2, [r7, #6]
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d202      	bcs.n	8001000 <StateController_updateState+0x208>
		{
			StateController_currentState = COLORALTI_DEPLOY;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <StateController_updateState+0x29c>)
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == COLORALTI_DEPLOY)
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <StateController_updateState+0x29c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b08      	cmp	r3, #8
 8001006:	f040 809b 	bne.w	8001140 <StateController_updateState+0x348>
	{

		if(deployTest == 0)
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <StateController_updateState+0x2d4>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d12f      	bne.n	8001072 <StateController_updateState+0x27a>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			if(((double)(deployTestPrevAlt - alt) / (double)(HAL_GetTick() - deployTestPrevTime)) <= 73.0) //50mph to fps
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <StateController_updateState+0x2d8>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9e9 	bl	80003f4 <__aeabi_i2d>
 8001022:	4604      	mov	r4, r0
 8001024:	460d      	mov	r5, r1
 8001026:	f000 fddf 	bl	8001be8 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <StateController_updateState+0x2dc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9ce 	bl	80003d4 <__aeabi_ui2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4620      	mov	r0, r4
 800103e:	4629      	mov	r1, r5
 8001040:	f7ff fb6c 	bl	800071c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <StateController_updateState+0x2e0>)
 8001052:	f7ff fcb5 	bl	80009c0 <__aeabi_dcmple>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00a      	beq.n	8001072 <StateController_updateState+0x27a>
			{
				deployTest = 1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <StateController_updateState+0x2d4>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
				deployTestStart = HAL_GetTick();
 8001062:	f000 fdc1 	bl	8001be8 <HAL_GetTick>
 8001066:	4603      	mov	r3, r0
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <StateController_updateState+0x2e4>)
 800106a:	6013      	str	r3, [r2, #0]
				deployTestStartAlt = alt;
 800106c:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <StateController_updateState+0x2e8>)
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	8013      	strh	r3, [r2, #0]
			}
		}
		if(deployTest == 1)
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <StateController_updateState+0x2d4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d15a      	bne.n	8001130 <StateController_updateState+0x338>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <StateController_updateState+0x2e8>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f9b5 	bl	80003f4 <__aeabi_i2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	f000 fdab 	bl	8001be8 <HAL_GetTick>
 8001092:	e027      	b.n	80010e4 <StateController_updateState+0x2ec>
 8001094:	200000b0 	.word	0x200000b0
 8001098:	20000008 	.word	0x20000008
 800109c:	200000b1 	.word	0x200000b1
 80010a0:	200000b4 	.word	0x200000b4
 80010a4:	2000000a 	.word	0x2000000a
 80010a8:	200000bc 	.word	0x200000bc
 80010ac:	200000b8 	.word	0x200000b8
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	200000be 	.word	0x200000be
 80010b8:	200000c0 	.word	0x200000c0
 80010bc:	200000c4 	.word	0x200000c4
 80010c0:	200000c8 	.word	0x200000c8
 80010c4:	20000010 	.word	0x20000010
 80010c8:	405d4000 	.word	0x405d4000
 80010cc:	200000d0 	.word	0x200000d0
 80010d0:	200000ca 	.word	0x200000ca
 80010d4:	200000cc 	.word	0x200000cc
 80010d8:	40524000 	.word	0x40524000
 80010dc:	200000d4 	.word	0x200000d4
 80010e0:	200000d8 	.word	0x200000d8
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <StateController_updateState+0x364>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f971 	bl	80003d4 <__aeabi_ui2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4620      	mov	r0, r4
 80010f8:	4629      	mov	r1, r5
 80010fa:	f7ff fb0f 	bl	800071c <__aeabi_ddiv>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <StateController_updateState+0x368>)
 800110c:	f7ff fc58 	bl	80009c0 <__aeabi_dcmple>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00c      	beq.n	8001130 <StateController_updateState+0x338>
			{
				if(HAL_GetTick() > deployTestStart + deployTestThresholdTime)
 8001116:	f000 fd67 	bl	8001be8 <HAL_GetTick>
 800111a:	4601      	mov	r1, r0
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <StateController_updateState+0x364>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <StateController_updateState+0x36c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	4299      	cmp	r1, r3
 8001128:	d902      	bls.n	8001130 <StateController_updateState+0x338>
				{
					StateController_currentState = COLORALTI_CANOPY;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <StateController_updateState+0x370>)
 800112c:	2209      	movs	r2, #9
 800112e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 8001130:	f000 fd5a 	bl	8001be8 <HAL_GetTick>
 8001134:	4603      	mov	r3, r0
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <StateController_updateState+0x374>)
 8001138:	6013      	str	r3, [r2, #0]
		deployTestPrevAlt = alt;
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <StateController_updateState+0x378>)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	8013      	strh	r3, [r2, #0]
	}

	if(StateController_currentState == COLORALTI_CANOPY)
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <StateController_updateState+0x370>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b09      	cmp	r3, #9
 8001146:	d105      	bne.n	8001154 <StateController_updateState+0x35c>
	{
		//Go back into standby mode once under 100ft
		if(alt <= 100)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d802      	bhi.n	8001154 <StateController_updateState+0x35c>
		{
			StateController_currentState = COLORALTI_STANDBY;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <StateController_updateState+0x370>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	200000d4 	.word	0x200000d4
 8001160:	40524000 	.word	0x40524000
 8001164:	20000014 	.word	0x20000014
 8001168:	200000b0 	.word	0x200000b0
 800116c:	200000cc 	.word	0x200000cc
 8001170:	200000ca 	.word	0x200000ca

08001174 <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f835 	bl	80011ec <Set_LED_Timer>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	460a      	mov	r2, r1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4613      	mov	r3, r2
 8001198:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 800119a:	f000 f96b 	bl	8001474 <Clear_All_LED>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d901      	bls.n	80011a8 <Strip_Progress_Bar_Single_Color+0x1e>
 80011a4:	230a      	movs	r3, #10
 80011a6:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e008      	b.n	80011c0 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	79ba      	ldrb	r2, [r7, #6]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f932 	bl	800141e <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	3301      	adds	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3f2      	bcc.n	80011ae <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <Strip_Clear>:

void Strip_Clear()
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
	Clear_All_LED();
 80011d6:	f000 f94d 	bl	8001474 <Clear_All_LED>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}

080011de <Strip_Send>:

void Strip_Send()
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
	WS2813_Send();
 80011e2:	f000 f83f 	bl	8001264 <WS2813_Send>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 80011f4:	4a03      	ldr	r2, [pc, #12]	; (8001204 <Set_LED_Timer+0x18>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	200000dc 	.word	0x200000dc

08001208 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	b2d9      	uxtb	r1, r3
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <Set_LED+0x58>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	460a      	mov	r2, r1
 8001224:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	b2d9      	uxtb	r1, r3
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <Set_LED+0x58>)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	460a      	mov	r2, r1
 8001234:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	b2d9      	uxtb	r1, r3
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <Set_LED+0x58>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	460a      	mov	r2, r1
 8001244:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2d9      	uxtb	r1, r3
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <Set_LED+0x58>)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	460a      	mov	r2, r1
 8001254:	71da      	strb	r2, [r3, #7]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	200000dc 	.word	0x200000dc

08001264 <WS2813_Send>:
#endif

}

void WS2813_Send ()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e03d      	b.n	80012f0 <WS2813_Send+0x8c>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8001274:	4a34      	ldr	r2, [pc, #208]	; (8001348 <WS2813_Send+0xe4>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	4931      	ldr	r1, [pc, #196]	; (8001348 <WS2813_Send+0xe4>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	431a      	orrs	r2, r3
 8001292:	492d      	ldr	r1, [pc, #180]	; (8001348 <WS2813_Send+0xe4>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800129e:	4313      	orrs	r3, r2
 80012a0:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80012a2:	2317      	movs	r3, #23
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e01d      	b.n	80012e4 <WS2813_Send+0x80>
		{
			if (color&(1<<i))
 80012a8:	2201      	movs	r2, #1
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <WS2813_Send+0x66>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 80012ba:	4a23      	ldr	r2, [pc, #140]	; (8001348 <WS2813_Send+0xe4>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3328      	adds	r3, #40	; 0x28
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	2230      	movs	r2, #48	; 0x30
 80012c6:	809a      	strh	r2, [r3, #4]
 80012c8:	e006      	b.n	80012d8 <WS2813_Send+0x74>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <WS2813_Send+0xe4>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3328      	adds	r3, #40	; 0x28
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	2214      	movs	r2, #20
 80012d6:	809a      	strh	r2, [r3, #4]

			indx++;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dade      	bge.n	80012a8 <WS2813_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	3301      	adds	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2b09      	cmp	r3, #9
 80012f4:	ddbe      	ble.n	8001274 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	e00c      	b.n	8001316 <WS2813_Send+0xb2>
	{
		ws_config.pwmData[indx] = 0;
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <WS2813_Send+0xe4>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3328      	adds	r3, #40	; 0x28
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	2200      	movs	r2, #0
 8001308:	809a      	strh	r2, [r3, #4]
		indx++;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3301      	adds	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b31      	cmp	r3, #49	; 0x31
 800131a:	ddef      	ble.n	80012fc <WS2813_Send+0x98>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <WS2813_Send+0xe4>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <WS2813_Send+0xe8>)
 8001326:	2104      	movs	r1, #4
 8001328:	f002 ffc8 	bl	80042bc <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 800132c:	bf00      	nop
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <WS2813_Send+0xe4>)
 8001330:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0fa      	beq.n	800132e <WS2813_Send+0xca>
	ws_config.datasentflag = 0;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <WS2813_Send+0xe4>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000dc 	.word	0x200000dc
 800134c:	20000130 	.word	0x20000130

08001350 <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d108      	bne.n	8001374 <Color_To_RGB+0x24>
		rgb->r = 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2214      	movs	r2, #20
 8001372:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d108      	bne.n	800138c <Color_To_RGB+0x3c>
		rgb->r = 255;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d108      	bne.n	80013a4 <Color_To_RGB+0x54>
		rgb->r = 255;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	22ff      	movs	r2, #255	; 0xff
 8001396:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d108      	bne.n	80013bc <Color_To_RGB+0x6c>
		rgb->r = 255;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d108      	bne.n	80013d4 <Color_To_RGB+0x84>
		rgb->r = 0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	22ff      	movs	r2, #255	; 0xff
 80013cc:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	22c8      	movs	r2, #200	; 0xc8
 80013d2:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d108      	bne.n	80013ec <Color_To_RGB+0x9c>
		rgb->r = 0;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	709a      	strb	r2, [r3, #2]
	}
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	461a      	mov	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fef9 	bl	8001208 <Set_LED>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff8c 	bl	8001350 <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffd9 	bl	80013f6 <Set_LED_From_RGB>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2104      	movs	r1, #4
 800145a:	4618      	mov	r0, r3
 800145c:	f003 f8d0 	bl	8004600 <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200000dc 	.word	0x200000dc

08001474 <Clear_All_LED>:

void Clear_All_LED()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	e007      	b.n	8001490 <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2105      	movs	r1, #5
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ffca 	bl	800141e <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	3301      	adds	r3, #1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b09      	cmp	r3, #9
 8001494:	d9f4      	bls.n	8001480 <Clear_All_LED+0xc>
	}
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 fb47 	bl	8001b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 f851 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f000 f9ad 	bl	800180c <MX_GPIO_Init>
  MX_DMA_Init();
 80014b2:	f000 f98d 	bl	80017d0 <MX_DMA_Init>
  MX_I2C1_Init();
 80014b6:	f000 f88d 	bl	80015d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80014ba:	f000 f909 	bl	80016d0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80014be:	f000 f8b7 	bl	8001630 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	Strip_Set_Timer(&htim2);
 80014c2:	4820      	ldr	r0, [pc, #128]	; (8001544 <main+0xa4>)
 80014c4:	f7ff fe56 	bl	8001174 <Strip_Set_Timer>
	Strip_Clear();
 80014c8:	f7ff fe83 	bl	80011d2 <Strip_Clear>

	HAL_Delay(1000);
 80014cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d0:	f000 fb94 	bl	8001bfc <HAL_Delay>
	uint8_t lps_startup_result = LPS_Init(&hi2c1, LPS_DEFAULT_ADDRESS);
 80014d4:	215c      	movs	r1, #92	; 0x5c
 80014d6:	481c      	ldr	r0, [pc, #112]	; (8001548 <main+0xa8>)
 80014d8:	f7ff fac6 	bl	8000a68 <LPS_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	77fb      	strb	r3, [r7, #31]
	double refP = LPS_Get_Pressure();
 80014e0:	f7ff fb84 	bl	8000bec <LPS_Get_Pressure>
 80014e4:	e9c7 0104 	strd	r0, r1, [r7, #16]
	double refT = LPS_Get_Temp();
 80014e8:	f7ff fbb4 	bl	8000c54 <LPS_Get_Temp>
 80014ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
	double alt = 0.0;
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c7 2300 	strd	r2, r3, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	alt = LPS_Get_RelAlt_Ft(refP);
 80014fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001500:	f7ff fa92 	bl	8000a28 <__aeabi_d2uiz>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fbce 	bl	8000ca8 <LPS_Get_RelAlt_Ft>
 800150c:	e9c7 0100 	strd	r0, r1, [r7]
	StateController_updateState(alt);
 8001510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001514:	f7ff fa88 	bl	8000a28 <__aeabi_d2uiz>
 8001518:	4603      	mov	r3, r0
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc6b 	bl	8000df8 <StateController_updateState>
	ColorAlti_displayLeds(StateController_currentState, alt);
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <main+0xac>)
 8001524:	781c      	ldrb	r4, [r3, #0]
 8001526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800152a:	f7ff fa7d 	bl	8000a28 <__aeabi_d2uiz>
 800152e:	4603      	mov	r3, r0
 8001530:	b29b      	uxth	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fc21 	bl	8000d7c <ColorAlti_displayLeds>
	HAL_Delay(100); //10hz
 800153a:	2064      	movs	r0, #100	; 0x64
 800153c:	f000 fb5e 	bl	8001bfc <HAL_Delay>
	alt = LPS_Get_RelAlt_Ft(refP);
 8001540:	e7dc      	b.n	80014fc <main+0x5c>
 8001542:	bf00      	nop
 8001544:	20000414 	.word	0x20000414
 8001548:	20000378 	.word	0x20000378
 800154c:	200000b0 	.word	0x200000b0

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b090      	sub	sp, #64	; 0x40
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	2228      	movs	r2, #40	; 0x28
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 feac 	bl	80052bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157a:	2310      	movs	r3, #16
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157e:	2302      	movs	r3, #2
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001582:	2300      	movs	r3, #0
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001586:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	4618      	mov	r0, r3
 8001592:	f002 f9ef 	bl	8003974 <HAL_RCC_OscConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800159c:	f000 f976 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a0:	230f      	movs	r3, #15
 80015a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a4:	2302      	movs	r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2102      	movs	r1, #2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fc5c 	bl	8003e78 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80015c6:	f000 f961 	bl	800188c <Error_Handler>
  }
}
 80015ca:	bf00      	nop
 80015cc:	3740      	adds	r7, #64	; 0x40
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C1_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C1_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C1_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C1_Init+0x50>)
 8001612:	f001 f827 	bl	8002664 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 f936 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000378 	.word	0x20000378
 8001628:	40005400 	.word	0x40005400
 800162c:	000186a0 	.word	0x000186a0

08001630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_TIM1_Init+0x98>)
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <MX_TIM1_Init+0x9c>)
 8001650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_TIM1_Init+0x98>)
 8001654:	2203      	movs	r2, #3
 8001656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_TIM1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_TIM1_Init+0x98>)
 8001660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_TIM1_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_TIM1_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_TIM1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001678:	4813      	ldr	r0, [pc, #76]	; (80016c8 <MX_TIM1_Init+0x98>)
 800167a:	f002 fd77 	bl	800416c <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001684:	f000 f902 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_TIM1_Init+0x98>)
 8001696:	f003 f93b 	bl	8004910 <HAL_TIM_ConfigClockSource>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016a0:	f000 f8f4 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_TIM1_Init+0x98>)
 80016b2:	f003 fd7b 	bl	80051ac <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016bc:	f000 f8e6 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200003cc 	.word	0x200003cc
 80016cc:	40012c00 	.word	0x40012c00

080016d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	; 0x38
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001700:	4b32      	ldr	r3, [pc, #200]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <MX_TIM2_Init+0xfc>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001716:	223f      	movs	r2, #63	; 0x3f
 8001718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <MX_TIM2_Init+0xfc>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001726:	4829      	ldr	r0, [pc, #164]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001728:	f002 fd20 	bl	800416c <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001732:	f000 f8ab 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001740:	4619      	mov	r1, r3
 8001742:	4822      	ldr	r0, [pc, #136]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001744:	f003 f8e4 	bl	8004910 <HAL_TIM_ConfigClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800174e:	f000 f89d 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001752:	481e      	ldr	r0, [pc, #120]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001754:	f002 fd59 	bl	800420a <HAL_TIM_PWM_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800175e:	f000 f895 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176a:	f107 0320 	add.w	r3, r7, #32
 800176e:	4619      	mov	r1, r3
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001772:	f003 fd1b 	bl	80051ac <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800177c:	f000 f886 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <MX_TIM2_Init+0xfc>)
 8001798:	f002 fff8 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80017a2:	f000 f873 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2204      	movs	r2, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <MX_TIM2_Init+0xfc>)
 80017ae:	f002 ffed 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80017b8:	f000 f868 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_TIM2_Init+0xfc>)
 80017be:	f000 f92d 	bl	8001a1c <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	; 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000414 	.word	0x20000414

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_DMA_Init+0x38>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <MX_DMA_Init+0x38>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_DMA_Init+0x38>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2011      	movs	r0, #17
 80017f4:	f000 fafd 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017f8:	2011      	movs	r0, #17
 80017fa:	f000 fb16 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_GPIO_Init+0x78>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <MX_GPIO_Init+0x78>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_GPIO_Init+0x78>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_GPIO_Init+0x78>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <MX_GPIO_Init+0x78>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_GPIO_Init+0x78>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <MX_GPIO_Init+0x7c>)
 8001858:	f000 feec 	bl	8002634 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800185c:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8001860:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2302      	movs	r3, #2
 800186c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4619      	mov	r1, r3
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_GPIO_Init+0x7c>)
 8001876:	f000 fd59 	bl	800232c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	40010c00 	.word	0x40010c00

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_MspInit+0x40>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_MspInit+0x40>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_MspInit+0x40>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_MspInit+0x40>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_MspInit+0x40>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_MspInit+0x40>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_I2C_MspInit+0x70>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d123      	bne.n	8001944 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_I2C_MspInit+0x74>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_I2C_MspInit+0x74>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_I2C_MspInit+0x74>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001914:	23c0      	movs	r3, #192	; 0xc0
 8001916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	480b      	ldr	r0, [pc, #44]	; (8001954 <HAL_I2C_MspInit+0x78>)
 8001928:	f000 fd00 	bl	800232c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_I2C_MspInit+0x74>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_I2C_MspInit+0x74>)
 8001932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001936:	61d3      	str	r3, [r2, #28]
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_I2C_MspInit+0x74>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	40021000 	.word	0x40021000
 8001954:	40010c00 	.word	0x40010c00

08001958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <HAL_TIM_Base_MspInit+0xb4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10c      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_TIM_Base_MspInit+0xb8>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <HAL_TIM_Base_MspInit+0xb8>)
 8001970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_TIM_Base_MspInit+0xb8>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001982:	e03e      	b.n	8001a02 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198c:	d139      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_TIM_Base_MspInit+0xb8>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_TIM_Base_MspInit+0xb8>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_TIM_Base_MspInit+0xb8>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_TIM_Base_MspInit+0xc0>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019ae:	2210      	movs	r2, #16
 80019b0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80019da:	480e      	ldr	r0, [pc, #56]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019dc:	f000 fa40 	bl	8001e60 <HAL_DMA_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 80019e6:	f7ff ff51 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
 80019f0:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
 80019fc:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <HAL_TIM_Base_MspInit+0xbc>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40012c00 	.word	0x40012c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	2000045c 	.word	0x2000045c
 8001a18:	40020080 	.word	0x40020080

08001a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3a:	d117      	bne.n	8001a6c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_TIM_MspPostInit+0x58>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_TIM_MspPostInit+0x58>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_TIM_MspPostInit+0x58>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a54:	2303      	movs	r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	4804      	ldr	r0, [pc, #16]	; (8001a78 <HAL_TIM_MspPostInit+0x5c>)
 8001a68:	f000 fc60 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010800 	.word	0x40010800

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac2:	f000 f87f 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <DMA1_Channel7_IRQHandler+0x10>)
 8001ad2:	f000 faf7 	bl	80020c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000045c 	.word	0x2000045c

08001ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	; (8001b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	; (8001b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b12:	f7ff ffe5 	bl	8001ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b16:	f003 fbad 	bl	8005274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1a:	f7ff fcc1 	bl	80014a0 <main>
  bx lr
 8001b1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b28:	08006118 	.word	0x08006118
  ldr r2, =_sbss
 8001b2c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b30:	200004a4 	.word	0x200004a4

08001b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_2_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_Init+0x28>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_Init+0x28>)
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f947 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	200f      	movs	r0, #15
 8001b50:	f000 f808 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fea0 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40022000 	.word	0x40022000

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f95f 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 f927 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000018 	.word	0x20000018
 8001bbc:	20000020 	.word	0x20000020
 8001bc0:	2000001c 	.word	0x2000001c

08001bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_IncTick+0x1c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_IncTick+0x20>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <HAL_IncTick+0x20>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000020 	.word	0x20000020
 8001be4:	200004a0 	.word	0x200004a0

08001be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <HAL_GetTick+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	200004a0 	.word	0x200004a0

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff fff0 	bl	8001be8 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffe0 	bl	8001be8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000020 	.word	0x20000020

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <__NVIC_EnableIRQ+0x34>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff90 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff2d 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff42 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff90 	bl	8001d34 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5f 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff35 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e043      	b.n	8001efe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_DMA_Init+0xa8>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_DMA_Init+0xac>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_DMA_Init+0xb0>)
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001eaa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	bffdfff8 	.word	0xbffdfff8
 8001f0c:	cccccccd 	.word	0xcccccccd
 8001f10:	40020000 	.word	0x40020000

08001f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_DMA_Start_IT+0x20>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e04b      	b.n	8001fcc <HAL_DMA_Start_IT+0xb8>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d13a      	bne.n	8001fbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f9af 	bl	80022d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 020e 	orr.w	r2, r2, #14
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e00f      	b.n	8001fac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 020a 	orr.w	r2, r2, #10
 8001faa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e005      	b.n	8001fca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d005      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e051      	b.n	800209c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 020e 	bic.w	r2, r2, #14
 8002006:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <HAL_DMA_Abort_IT+0xd4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d029      	beq.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a21      	ldr	r2, [pc, #132]	; (80020ac <HAL_DMA_Abort_IT+0xd8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_Abort_IT+0x9e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_DMA_Abort_IT+0xdc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01a      	beq.n	800206c <HAL_DMA_Abort_IT+0x98>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_DMA_Abort_IT+0xe0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d012      	beq.n	8002066 <HAL_DMA_Abort_IT+0x92>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <HAL_DMA_Abort_IT+0xe4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00a      	beq.n	8002060 <HAL_DMA_Abort_IT+0x8c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_DMA_Abort_IT+0xe8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d102      	bne.n	800205a <HAL_DMA_Abort_IT+0x86>
 8002054:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002058:	e00e      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 800205a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205e:	e00b      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002064:	e008      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	e005      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 800206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002070:	e002      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002072:	2310      	movs	r3, #16
 8002074:	e000      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002076:	2301      	movs	r3, #1
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <HAL_DMA_Abort_IT+0xec>)
 800207a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
    } 
  }
  return status;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40020008 	.word	0x40020008
 80020ac:	4002001c 	.word	0x4002001c
 80020b0:	40020030 	.word	0x40020030
 80020b4:	40020044 	.word	0x40020044
 80020b8:	40020058 	.word	0x40020058
 80020bc:	4002006c 	.word	0x4002006c
 80020c0:	40020000 	.word	0x40020000

080020c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2204      	movs	r2, #4
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d04f      	beq.n	800218c <HAL_DMA_IRQHandler+0xc8>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d04a      	beq.n	800218c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0204 	bic.w	r2, r2, #4
 8002112:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a66      	ldr	r2, [pc, #408]	; (80022b4 <HAL_DMA_IRQHandler+0x1f0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d029      	beq.n	8002172 <HAL_DMA_IRQHandler+0xae>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_IRQHandler+0xaa>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a63      	ldr	r2, [pc, #396]	; (80022bc <HAL_DMA_IRQHandler+0x1f8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_IRQHandler+0xa4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a62      	ldr	r2, [pc, #392]	; (80022c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d012      	beq.n	8002162 <HAL_DMA_IRQHandler+0x9e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a60      	ldr	r2, [pc, #384]	; (80022c4 <HAL_DMA_IRQHandler+0x200>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00a      	beq.n	800215c <HAL_DMA_IRQHandler+0x98>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5f      	ldr	r2, [pc, #380]	; (80022c8 <HAL_DMA_IRQHandler+0x204>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d102      	bne.n	8002156 <HAL_DMA_IRQHandler+0x92>
 8002150:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002154:	e00e      	b.n	8002174 <HAL_DMA_IRQHandler+0xb0>
 8002156:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800215a:	e00b      	b.n	8002174 <HAL_DMA_IRQHandler+0xb0>
 800215c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002160:	e008      	b.n	8002174 <HAL_DMA_IRQHandler+0xb0>
 8002162:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002166:	e005      	b.n	8002174 <HAL_DMA_IRQHandler+0xb0>
 8002168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216c:	e002      	b.n	8002174 <HAL_DMA_IRQHandler+0xb0>
 800216e:	2340      	movs	r3, #64	; 0x40
 8002170:	e000      	b.n	8002174 <HAL_DMA_IRQHandler+0xb0>
 8002172:	2304      	movs	r3, #4
 8002174:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_DMA_IRQHandler+0x208>)
 8002176:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8094 	beq.w	80022aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800218a:	e08e      	b.n	80022aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	2202      	movs	r2, #2
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d056      	beq.n	800224a <HAL_DMA_IRQHandler+0x186>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d051      	beq.n	800224a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 020a 	bic.w	r2, r2, #10
 80021c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a38      	ldr	r2, [pc, #224]	; (80022b4 <HAL_DMA_IRQHandler+0x1f0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d029      	beq.n	800222a <HAL_DMA_IRQHandler+0x166>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a37      	ldr	r2, [pc, #220]	; (80022b8 <HAL_DMA_IRQHandler+0x1f4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d022      	beq.n	8002226 <HAL_DMA_IRQHandler+0x162>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a35      	ldr	r2, [pc, #212]	; (80022bc <HAL_DMA_IRQHandler+0x1f8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01a      	beq.n	8002220 <HAL_DMA_IRQHandler+0x15c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_DMA_IRQHandler+0x1fc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d012      	beq.n	800221a <HAL_DMA_IRQHandler+0x156>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_DMA_IRQHandler+0x200>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00a      	beq.n	8002214 <HAL_DMA_IRQHandler+0x150>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_DMA_IRQHandler+0x204>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d102      	bne.n	800220e <HAL_DMA_IRQHandler+0x14a>
 8002208:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800220c:	e00e      	b.n	800222c <HAL_DMA_IRQHandler+0x168>
 800220e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002212:	e00b      	b.n	800222c <HAL_DMA_IRQHandler+0x168>
 8002214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002218:	e008      	b.n	800222c <HAL_DMA_IRQHandler+0x168>
 800221a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221e:	e005      	b.n	800222c <HAL_DMA_IRQHandler+0x168>
 8002220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002224:	e002      	b.n	800222c <HAL_DMA_IRQHandler+0x168>
 8002226:	2320      	movs	r3, #32
 8002228:	e000      	b.n	800222c <HAL_DMA_IRQHandler+0x168>
 800222a:	2302      	movs	r3, #2
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_DMA_IRQHandler+0x208>)
 800222e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d034      	beq.n	80022aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002248:	e02f      	b.n	80022aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2208      	movs	r2, #8
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d028      	beq.n	80022ac <HAL_DMA_IRQHandler+0x1e8>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 020e 	bic.w	r2, r2, #14
 8002272:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
    }
  }
  return;
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
}
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40020008 	.word	0x40020008
 80022b8:	4002001c 	.word	0x4002001c
 80022bc:	40020030 	.word	0x40020030
 80022c0:	40020044 	.word	0x40020044
 80022c4:	40020058 	.word	0x40020058
 80022c8:	4002006c 	.word	0x4002006c
 80022cc:	40020000 	.word	0x40020000

080022d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d108      	bne.n	8002310 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800230e:	e007      	b.n	8002320 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
	...

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e169      	b.n	8002614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002340:	2201      	movs	r2, #1
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8158 	bne.w	800260e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a9a      	ldr	r2, [pc, #616]	; (80025cc <HAL_GPIO_Init+0x2a0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d05e      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002368:	4a98      	ldr	r2, [pc, #608]	; (80025cc <HAL_GPIO_Init+0x2a0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d875      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800236e:	4a98      	ldr	r2, [pc, #608]	; (80025d0 <HAL_GPIO_Init+0x2a4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d058      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002374:	4a96      	ldr	r2, [pc, #600]	; (80025d0 <HAL_GPIO_Init+0x2a4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d86f      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800237a:	4a96      	ldr	r2, [pc, #600]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d052      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002380:	4a94      	ldr	r2, [pc, #592]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d869      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002386:	4a94      	ldr	r2, [pc, #592]	; (80025d8 <HAL_GPIO_Init+0x2ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d04c      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 800238c:	4a92      	ldr	r2, [pc, #584]	; (80025d8 <HAL_GPIO_Init+0x2ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d863      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002392:	4a92      	ldr	r2, [pc, #584]	; (80025dc <HAL_GPIO_Init+0x2b0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d046      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002398:	4a90      	ldr	r2, [pc, #576]	; (80025dc <HAL_GPIO_Init+0x2b0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d85d      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d82a      	bhi.n	80023f8 <HAL_GPIO_Init+0xcc>
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d859      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <HAL_GPIO_Init+0x80>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002401 	.word	0x08002401
 80023b4:	08002413 	.word	0x08002413
 80023b8:	08002455 	.word	0x08002455
 80023bc:	0800245b 	.word	0x0800245b
 80023c0:	0800245b 	.word	0x0800245b
 80023c4:	0800245b 	.word	0x0800245b
 80023c8:	0800245b 	.word	0x0800245b
 80023cc:	0800245b 	.word	0x0800245b
 80023d0:	0800245b 	.word	0x0800245b
 80023d4:	0800245b 	.word	0x0800245b
 80023d8:	0800245b 	.word	0x0800245b
 80023dc:	0800245b 	.word	0x0800245b
 80023e0:	0800245b 	.word	0x0800245b
 80023e4:	0800245b 	.word	0x0800245b
 80023e8:	0800245b 	.word	0x0800245b
 80023ec:	0800245b 	.word	0x0800245b
 80023f0:	08002409 	.word	0x08002409
 80023f4:	0800241d 	.word	0x0800241d
 80023f8:	4a79      	ldr	r2, [pc, #484]	; (80025e0 <HAL_GPIO_Init+0x2b4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023fe:	e02c      	b.n	800245a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e029      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	3304      	adds	r3, #4
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e024      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	3308      	adds	r3, #8
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e01f      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	330c      	adds	r3, #12
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e01a      	b.n	800245c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800242e:	2304      	movs	r3, #4
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e013      	b.n	800245c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800243c:	2308      	movs	r3, #8
 800243e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	611a      	str	r2, [r3, #16]
          break;
 8002446:	e009      	b.n	800245c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	615a      	str	r2, [r3, #20]
          break;
 8002452:	e003      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x130>
          break;
 800245a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d801      	bhi.n	8002466 <HAL_GPIO_Init+0x13a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	e001      	b.n	800246a <HAL_GPIO_Init+0x13e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d802      	bhi.n	8002478 <HAL_GPIO_Init+0x14c>
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x152>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3b08      	subs	r3, #8
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	210f      	movs	r1, #15
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80b1 	beq.w	800260e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ac:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a4c      	ldr	r2, [pc, #304]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024c4:	4a48      	ldr	r2, [pc, #288]	; (80025e8 <HAL_GPIO_Init+0x2bc>)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a40      	ldr	r2, [pc, #256]	; (80025ec <HAL_GPIO_Init+0x2c0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_GPIO_Init+0x1ec>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_GPIO_Init+0x2c4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00d      	beq.n	8002514 <HAL_GPIO_Init+0x1e8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3e      	ldr	r2, [pc, #248]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <HAL_GPIO_Init+0x1e4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3d      	ldr	r2, [pc, #244]	; (80025f8 <HAL_GPIO_Init+0x2cc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_GPIO_Init+0x1e0>
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 800250c:	2304      	movs	r3, #4
 800250e:	e004      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002510:	2302      	movs	r3, #2
 8002512:	e002      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002518:	2300      	movs	r3, #0
 800251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800252a:	492f      	ldr	r1, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x2bc>)
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	492c      	ldr	r1, [pc, #176]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002552:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	43db      	mvns	r3, r3
 800255a:	4928      	ldr	r1, [pc, #160]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 800255c:	4013      	ands	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	4922      	ldr	r1, [pc, #136]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	60cb      	str	r3, [r1, #12]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	491e      	ldr	r1, [pc, #120]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 8002584:	4013      	ands	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4918      	ldr	r1, [pc, #96]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4914      	ldr	r1, [pc, #80]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d021      	beq.n	8002600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e021      	b.n	800260e <HAL_GPIO_Init+0x2e2>
 80025ca:	bf00      	nop
 80025cc:	10320000 	.word	0x10320000
 80025d0:	10310000 	.word	0x10310000
 80025d4:	10220000 	.word	0x10220000
 80025d8:	10210000 	.word	0x10210000
 80025dc:	10120000 	.word	0x10120000
 80025e0:	10110000 	.word	0x10110000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40010800 	.word	0x40010800
 80025f0:	40010c00 	.word	0x40010c00
 80025f4:	40011000 	.word	0x40011000
 80025f8:	40011400 	.word	0x40011400
 80025fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_GPIO_Init+0x304>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	43db      	mvns	r3, r3
 8002608:	4909      	ldr	r1, [pc, #36]	; (8002630 <HAL_GPIO_Init+0x304>)
 800260a:	4013      	ands	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	f47f ae8e 	bne.w	8002340 <HAL_GPIO_Init+0x14>
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	372c      	adds	r7, #44	; 0x2c
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	041a      	lsls	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e12b      	b.n	80028ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff f926 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c8:	f001 fd1e 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80026cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a81      	ldr	r2, [pc, #516]	; (80028d8 <HAL_I2C_Init+0x274>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d807      	bhi.n	80026e8 <HAL_I2C_Init+0x84>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a80      	ldr	r2, [pc, #512]	; (80028dc <HAL_I2C_Init+0x278>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e006      	b.n	80026f6 <HAL_I2C_Init+0x92>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a7d      	ldr	r2, [pc, #500]	; (80028e0 <HAL_I2C_Init+0x27c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	bf94      	ite	ls
 80026f0:	2301      	movls	r3, #1
 80026f2:	2300      	movhi	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0e7      	b.n	80028ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a78      	ldr	r2, [pc, #480]	; (80028e4 <HAL_I2C_Init+0x280>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9b      	lsrs	r3, r3, #18
 8002708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a6a      	ldr	r2, [pc, #424]	; (80028d8 <HAL_I2C_Init+0x274>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d802      	bhi.n	8002738 <HAL_I2C_Init+0xd4>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3301      	adds	r3, #1
 8002736:	e009      	b.n	800274c <HAL_I2C_Init+0xe8>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	4a69      	ldr	r2, [pc, #420]	; (80028e8 <HAL_I2C_Init+0x284>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	3301      	adds	r3, #1
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	430b      	orrs	r3, r1
 8002752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800275e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	495c      	ldr	r1, [pc, #368]	; (80028d8 <HAL_I2C_Init+0x274>)
 8002768:	428b      	cmp	r3, r1
 800276a:	d819      	bhi.n	80027a0 <HAL_I2C_Init+0x13c>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e59      	subs	r1, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fbb1 f3f3 	udiv	r3, r1, r3
 800277a:	1c59      	adds	r1, r3, #1
 800277c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002780:	400b      	ands	r3, r1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_I2C_Init+0x138>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e59      	subs	r1, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fbb1 f3f3 	udiv	r3, r1, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279a:	e051      	b.n	8002840 <HAL_I2C_Init+0x1dc>
 800279c:	2304      	movs	r3, #4
 800279e:	e04f      	b.n	8002840 <HAL_I2C_Init+0x1dc>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d111      	bne.n	80027cc <HAL_I2C_Init+0x168>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	440b      	add	r3, r1
 80027b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e012      	b.n	80027f2 <HAL_I2C_Init+0x18e>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1e58      	subs	r0, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	0099      	lsls	r1, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Init+0x196>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e022      	b.n	8002840 <HAL_I2C_Init+0x1dc>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10e      	bne.n	8002820 <HAL_I2C_Init+0x1bc>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1e58      	subs	r0, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	440b      	add	r3, r1
 8002810:	fbb0 f3f3 	udiv	r3, r0, r3
 8002814:	3301      	adds	r3, #1
 8002816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281e:	e00f      	b.n	8002840 <HAL_I2C_Init+0x1dc>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e58      	subs	r0, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	0099      	lsls	r1, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	fbb0 f3f3 	udiv	r3, r0, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	6809      	ldr	r1, [r1, #0]
 8002844:	4313      	orrs	r3, r2
 8002846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800286e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6911      	ldr	r1, [r2, #16]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68d2      	ldr	r2, [r2, #12]
 800287a:	4311      	orrs	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	430b      	orrs	r3, r1
 8002882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	000186a0 	.word	0x000186a0
 80028dc:	001e847f 	.word	0x001e847f
 80028e0:	003d08ff 	.word	0x003d08ff
 80028e4:	431bde83 	.word	0x431bde83
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	817b      	strh	r3, [r7, #10]
 80028fe:	460b      	mov	r3, r1
 8002900:	813b      	strh	r3, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002906:	f7ff f96f 	bl	8001be8 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b20      	cmp	r3, #32
 8002916:	f040 80d9 	bne.w	8002acc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2319      	movs	r3, #25
 8002920:	2201      	movs	r2, #1
 8002922:	496d      	ldr	r1, [pc, #436]	; (8002ad8 <HAL_I2C_Mem_Write+0x1ec>)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fdef 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
 8002932:	e0cc      	b.n	8002ace <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Mem_Write+0x56>
 800293e:	2302      	movs	r3, #2
 8002940:	e0c5      	b.n	8002ace <HAL_I2C_Mem_Write+0x1e2>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d007      	beq.n	8002968 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002976:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2221      	movs	r2, #33	; 0x21
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a4d      	ldr	r2, [pc, #308]	; (8002adc <HAL_I2C_Mem_Write+0x1f0>)
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029aa:	88f8      	ldrh	r0, [r7, #6]
 80029ac:	893a      	ldrh	r2, [r7, #8]
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4603      	mov	r3, r0
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fc26 	bl	800320c <I2C_RequestMemoryWrite>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d052      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e081      	b.n	8002ace <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 feb4 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d107      	bne.n	80029f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06b      	b.n	8002ace <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d11b      	bne.n	8002a6c <HAL_I2C_Mem_Write+0x180>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1aa      	bne.n	80029ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fea7 	bl	80037cc <I2C_WaitOnBTFFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00d      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d107      	bne.n	8002a9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e016      	b.n	8002ace <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	00100002 	.word	0x00100002
 8002adc:	ffff0000 	.word	0xffff0000

08002ae0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	; 0x30
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	460b      	mov	r3, r1
 8002af4:	813b      	strh	r3, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002afe:	f7ff f873 	bl	8001be8 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	f040 8244 	bne.w	8002f9a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2319      	movs	r3, #25
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4982      	ldr	r1, [pc, #520]	; (8002d24 <HAL_I2C_Mem_Read+0x244>)
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fcf3 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e237      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Mem_Read+0x5a>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e230      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d007      	beq.n	8002b60 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2222      	movs	r2, #34	; 0x22
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2240      	movs	r2, #64	; 0x40
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a62      	ldr	r2, [pc, #392]	; (8002d28 <HAL_I2C_Mem_Read+0x248>)
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ba2:	88f8      	ldrh	r0, [r7, #6]
 8002ba4:	893a      	ldrh	r2, [r7, #8]
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fbc0 	bl	8003338 <I2C_RequestMemoryRead>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e1ec      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d113      	bne.n	8002bf2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e1c0      	b.n	8002f74 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d11e      	bne.n	8002c38 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c0a:	b672      	cpsid	i
}
 8002c0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c34:	b662      	cpsie	i
}
 8002c36:	e035      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d11e      	bne.n	8002c7e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c50:	b672      	cpsid	i
}
 8002c52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c7a:	b662      	cpsie	i
}
 8002c7c:	e012      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c8c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ca4:	e166      	b.n	8002f74 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	f200 811f 	bhi.w	8002eee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d123      	bne.n	8002d00 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fdcd 	bl	800385c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e167      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cfe:	e139      	b.n	8002f74 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d152      	bne.n	8002dae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <HAL_I2C_Mem_Read+0x24c>)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fbf8 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e13c      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
 8002d22:	bf00      	nop
 8002d24:	00100002 	.word	0x00100002
 8002d28:	ffff0000 	.word	0xffff0000
 8002d2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d30:	b672      	cpsid	i
}
 8002d32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d76:	b662      	cpsie	i
}
 8002d78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dac:	e0e2      	b.n	8002f74 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	2200      	movs	r2, #0
 8002db6:	497b      	ldr	r1, [pc, #492]	; (8002fa4 <HAL_I2C_Mem_Read+0x4c4>)
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fba5 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0e9      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd8:	b672      	cpsid	i
}
 8002dda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_I2C_Mem_Read+0x4c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_I2C_Mem_Read+0x4cc>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a1a      	lsrs	r2, r3, #8
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00da      	lsls	r2, r3, #3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d118      	bne.n	8002e66 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e56:	b662      	cpsie	i
}
 8002e58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e09a      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d1d9      	bne.n	8002e28 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002eb6:	b662      	cpsie	i
}
 8002eb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eec:	e042      	b.n	8002f74 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fcb2 	bl	800385c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e04c      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d118      	bne.n	8002f74 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f47f ae94 	bne.w	8002ca6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00010004 	.word	0x00010004
 8002fa8:	20000018 	.word	0x20000018
 8002fac:	14f8b589 	.word	0x14f8b589

08002fb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7fe fe12 	bl	8001be8 <HAL_GetTick>
 8002fc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	f040 8111 	bne.w	80031fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2319      	movs	r3, #25
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4988      	ldr	r1, [pc, #544]	; (8003204 <HAL_I2C_IsDeviceReady+0x254>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa90 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e104      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2C_IsDeviceReady+0x50>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0fd      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x24c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d007      	beq.n	8003026 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2224      	movs	r2, #36	; 0x24
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a70      	ldr	r2, [pc, #448]	; (8003208 <HAL_I2C_IsDeviceReady+0x258>)
 8003048:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003058:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2200      	movs	r2, #0
 8003062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fa4e 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003080:	d103      	bne.n	800308a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0b6      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800309c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800309e:	f7fe fda3 	bl	8001be8 <HAL_GetTick>
 80030a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030d2:	e025      	b.n	8003120 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030d4:	f7fe fd88 	bl	8001be8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d302      	bcc.n	80030ea <HAL_I2C_IsDeviceReady+0x13a>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22a0      	movs	r2, #160	; 0xa0
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2ba0      	cmp	r3, #160	; 0xa0
 800312a:	d005      	beq.n	8003138 <HAL_I2C_IsDeviceReady+0x188>
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_I2C_IsDeviceReady+0x188>
 8003132:	7dbb      	ldrb	r3, [r7, #22]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0cd      	beq.n	80030d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d129      	bne.n	80031a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2319      	movs	r3, #25
 800317a:	2201      	movs	r2, #1
 800317c:	4921      	ldr	r1, [pc, #132]	; (8003204 <HAL_I2C_IsDeviceReady+0x254>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f9c2 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e036      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e02c      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2319      	movs	r3, #25
 80031c2:	2201      	movs	r2, #1
 80031c4:	490f      	ldr	r1, [pc, #60]	; (8003204 <HAL_I2C_IsDeviceReady+0x254>)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f99e 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e012      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3301      	adds	r3, #1
 80031da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	f4ff af32 	bcc.w	800304a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00100002 	.word	0x00100002
 8003208:	ffff0000 	.word	0xffff0000

0800320c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	4608      	mov	r0, r1
 8003216:	4611      	mov	r1, r2
 8003218:	461a      	mov	r2, r3
 800321a:	4603      	mov	r3, r0
 800321c:	817b      	strh	r3, [r7, #10]
 800321e:	460b      	mov	r3, r1
 8003220:	813b      	strh	r3, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003234:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	2200      	movs	r2, #0
 800323e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f960 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d103      	bne.n	8003266 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e05f      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003278:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	492d      	ldr	r1, [pc, #180]	; (8003334 <I2C_RequestMemoryWrite+0x128>)
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f9bb 	bl	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e04c      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	6a39      	ldr	r1, [r7, #32]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fa46 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d107      	bne.n	80032ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e02b      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d8:	893b      	ldrh	r3, [r7, #8]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	e021      	b.n	8003328 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032e4:	893b      	ldrh	r3, [r7, #8]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa20 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003318:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e005      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800331e:	893b      	ldrh	r3, [r7, #8]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	00010002 	.word	0x00010002

08003338 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	460b      	mov	r3, r1
 800334c:	813b      	strh	r3, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003360:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	2200      	movs	r2, #0
 800337a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f8c2 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003398:	d103      	bne.n	80033a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0aa      	b.n	80034fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	4952      	ldr	r1, [pc, #328]	; (8003504 <I2C_RequestMemoryRead+0x1cc>)
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f91d 	bl	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e097      	b.n	80034fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	6a39      	ldr	r1, [r7, #32]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f9a8 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d107      	bne.n	800340a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e076      	b.n	80034fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	611a      	str	r2, [r3, #16]
 800341e:	e021      	b.n	8003464 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003420:	893b      	ldrh	r3, [r7, #8]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	b29b      	uxth	r3, r3
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003430:	6a39      	ldr	r1, [r7, #32]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f982 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b04      	cmp	r3, #4
 8003444:	d107      	bne.n	8003456 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e050      	b.n	80034fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800345a:	893b      	ldrh	r3, [r7, #8]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	6a39      	ldr	r1, [r7, #32]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f967 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	2b04      	cmp	r3, #4
 800347a:	d107      	bne.n	800348c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e035      	b.n	80034fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f82b 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c6:	d103      	bne.n	80034d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e013      	b.n	80034fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	6a3a      	ldr	r2, [r7, #32]
 80034e8:	4906      	ldr	r1, [pc, #24]	; (8003504 <I2C_RequestMemoryRead+0x1cc>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f886 	bl	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	00010002 	.word	0x00010002

08003508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003518:	e048      	b.n	80035ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d044      	beq.n	80035ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe fb61 	bl	8001be8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d139      	bne.n	80035ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10d      	bne.n	800355e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	e00c      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x70>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	d116      	bne.n	80035ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e023      	b.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10d      	bne.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	43da      	mvns	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	e00c      	b.n	80035ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	43da      	mvns	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d093      	beq.n	800351a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800360a:	e071      	b.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d123      	bne.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e067      	b.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366a:	d041      	beq.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366c:	f7fe fabc 	bl	8001be8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d302      	bcc.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d136      	bne.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e00b      	b.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e021      	b.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10c      	bne.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	43da      	mvns	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e00b      	b.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f af6d 	bne.w	800360c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003748:	e034      	b.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8e3 	bl	8003916 <I2C_IsAcknowledgeFailed>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e034      	b.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d028      	beq.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003762:	f7fe fa41 	bl	8001be8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d11d      	bne.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d016      	beq.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e007      	b.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d1c3      	bne.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d8:	e034      	b.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f89b 	bl	8003916 <I2C_IsAcknowledgeFailed>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e034      	b.n	8003854 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d028      	beq.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe f9f9 	bl	8001be8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d11d      	bne.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d016      	beq.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d1c3      	bne.n	80037da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003868:	e049      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b10      	cmp	r3, #16
 8003876:	d119      	bne.n	80038ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e030      	b.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f7fe f99c 	bl	8001be8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d11d      	bne.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d016      	beq.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e007      	b.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d1ae      	bne.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392c:	d11b      	bne.n	8003966 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003936:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f043 0204 	orr.w	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
	...

08003974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e272      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8087 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b04      	cmp	r3, #4
 800399e:	d00c      	beq.n	80039ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a0:	4b8f      	ldr	r3, [pc, #572]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d112      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5e>
 80039ac:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ba:	4b89      	ldr	r3, [pc, #548]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d06c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x12c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d168      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e24c      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x76>
 80039dc:	4b80      	ldr	r3, [pc, #512]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7f      	ldr	r2, [pc, #508]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e02e      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b7b      	ldr	r3, [pc, #492]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7a      	ldr	r2, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b78      	ldr	r3, [pc, #480]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a77      	ldr	r2, [pc, #476]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e01d      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0xbc>
 8003a16:	4b72      	ldr	r3, [pc, #456]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a71      	ldr	r2, [pc, #452]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b6f      	ldr	r3, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6e      	ldr	r2, [pc, #440]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 8003a30:	4b6b      	ldr	r3, [pc, #428]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6a      	ldr	r2, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a67      	ldr	r2, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe f8ca 	bl	8001be8 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe f8c6 	bl	8001be8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e200      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe4>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe f8b6 	bl	8001be8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe f8b2 	bl	8001be8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1ec      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x10c>
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d063      	beq.n	8003b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aae:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d11c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x18c>
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_RCC_OscConfig+0x176>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e1c0      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4939      	ldr	r1, [pc, #228]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	e03a      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe f86b 	bl	8001be8 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fe f867 	bl	8001be8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1a1      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4927      	ldr	r1, [pc, #156]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
 8003b48:	e015      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe f84a 	bl	8001be8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fe f846 	bl	8001be8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e180      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03a      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fe f82a 	bl	8001be8 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fe f826 	bl	8001be8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e160      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f000 faba 	bl	8004130 <RCC_Delay>
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc4:	f7fe f810 	bl	8001be8 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fe f80c 	bl	8001be8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d908      	bls.n	8003bec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e146      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	42420000 	.word	0x42420000
 8003be8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b92      	ldr	r3, [pc, #584]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e9      	bne.n	8003bcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a6 	beq.w	8003d52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4a87      	ldr	r2, [pc, #540]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	61d3      	str	r3, [r2, #28]
 8003c22:	4b85      	ldr	r3, [pc, #532]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b7f      	ldr	r3, [pc, #508]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7e      	ldr	r2, [pc, #504]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fd ffcd 	bl	8001be8 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fd ffc9 	bl	8001be8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b64      	cmp	r3, #100	; 0x64
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e103      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x312>
 8003c78:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a6e      	ldr	r2, [pc, #440]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e02d      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x334>
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a69      	ldr	r2, [pc, #420]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	6213      	str	r3, [r2, #32]
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a66      	ldr	r2, [pc, #408]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	6213      	str	r3, [r2, #32]
 8003ca6:	e01c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d10c      	bne.n	8003cca <HAL_RCC_OscConfig+0x356>
 8003cb0:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4a60      	ldr	r2, [pc, #384]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	6213      	str	r3, [r2, #32]
 8003cbc:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a5d      	ldr	r2, [pc, #372]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	e00b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003cca:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4a5a      	ldr	r2, [pc, #360]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	6213      	str	r3, [r2, #32]
 8003cd6:	4b58      	ldr	r3, [pc, #352]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a57      	ldr	r2, [pc, #348]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d015      	beq.n	8003d16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fd ff7d 	bl	8001be8 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd ff79 	bl	8001be8 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0b1      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ee      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x37e>
 8003d14:	e014      	b.n	8003d40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fd ff67 	bl	8001be8 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fd ff63 	bl	8001be8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e09b      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ee      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d46:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8087 	beq.w	8003e6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d5c:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d061      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d146      	bne.n	8003dfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d70:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fd ff37 	bl	8001be8 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd ff33 	bl	8001be8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e06d      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d90:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	4921      	ldr	r1, [pc, #132]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db8:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a19      	ldr	r1, [r3, #32]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	491b      	ldr	r1, [pc, #108]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd ff07 	bl	8001be8 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fd ff03 	bl	8001be8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e03d      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x46a>
 8003dfc:	e035      	b.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd fef0 	bl	8001be8 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd feec 	bl	8001be8 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e026      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x498>
 8003e2a:	e01e      	b.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e019      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_OscConfig+0x500>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0d0      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d910      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b67      	ldr	r3, [pc, #412]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 0207 	bic.w	r2, r3, #7
 8003ea2:	4965      	ldr	r1, [pc, #404]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0b8      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ede:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ef6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	494d      	ldr	r1, [pc, #308]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d040      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d115      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07f      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	4b41      	ldr	r3, [pc, #260]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e073      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e06b      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f56:	4b39      	ldr	r3, [pc, #228]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f023 0203 	bic.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4936      	ldr	r1, [pc, #216]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f68:	f7fd fe3e 	bl	8001be8 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fd fe3a 	bl	8001be8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e053      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	4b2d      	ldr	r3, [pc, #180]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 020c 	and.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1eb      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f98:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d210      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	4922      	ldr	r1, [pc, #136]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4916      	ldr	r1, [pc, #88]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	490e      	ldr	r1, [pc, #56]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004006:	f000 f821 	bl	800404c <HAL_RCC_GetSysClockFreq>
 800400a:	4602      	mov	r2, r0
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	490a      	ldr	r1, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	5ccb      	ldrb	r3, [r1, r3]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1cc>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1d0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fd9c 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40022000 	.word	0x40022000
 800403c:	40021000 	.word	0x40021000
 8004040:	080060b0 	.word	0x080060b0
 8004044:	20000018 	.word	0x20000018
 8004048:	2000001c 	.word	0x2000001c

0800404c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b04      	cmp	r3, #4
 8004074:	d002      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x30>
 8004076:	2b08      	cmp	r3, #8
 8004078:	d003      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x36>
 800407a:	e027      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800407c:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800407e:	613b      	str	r3, [r7, #16]
      break;
 8004080:	e027      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0c9b      	lsrs	r3, r3, #18
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800408c:	5cd3      	ldrb	r3, [r2, r3]
 800408e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	0c5b      	lsrs	r3, r3, #17
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	4a11      	ldr	r2, [pc, #68]	; (80040ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ae:	fb03 f202 	mul.w	r2, r3, r2
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e004      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	613b      	str	r3, [r7, #16]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ce:	613b      	str	r3, [r7, #16]
      break;
 80040d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d2:	693b      	ldr	r3, [r7, #16]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	007a1200 	.word	0x007a1200
 80040e8:	080060c8 	.word	0x080060c8
 80040ec:	080060d8 	.word	0x080060d8
 80040f0:	003d0900 	.word	0x003d0900

080040f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <HAL_RCC_GetHCLKFreq+0x10>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	20000018 	.word	0x20000018

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800410c:	f7ff fff2 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4903      	ldr	r1, [pc, #12]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	080060c0 	.word	0x080060c0

08004130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <RCC_Delay+0x34>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <RCC_Delay+0x38>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800414c:	bf00      	nop
  }
  while (Delay --);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	60fa      	str	r2, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f9      	bne.n	800414c <RCC_Delay+0x1c>
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000018 	.word	0x20000018
 8004168:	10624dd3 	.word	0x10624dd3

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd fbe0 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fd5a 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e041      	b.n	80042a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f839 	bl	80042a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 fd0b 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e022      	b.n	800432e <HAL_TIM_PWM_Start_DMA+0x72>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_PWM_Start_DMA+0x46>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e015      	b.n	800432e <HAL_TIM_PWM_Start_DMA+0x72>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start_DMA+0x60>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e008      	b.n	800432e <HAL_TIM_PWM_Start_DMA+0x72>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
 8004334:	e153      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_TIM_PWM_Start_DMA+0x94>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e022      	b.n	8004396 <HAL_TIM_PWM_Start_DMA+0xda>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d109      	bne.n	800436a <HAL_TIM_PWM_Start_DMA+0xae>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e015      	b.n	8004396 <HAL_TIM_PWM_Start_DMA+0xda>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d109      	bne.n	8004384 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e008      	b.n	8004396 <HAL_TIM_PWM_Start_DMA+0xda>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d024      	beq.n	80043e4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_TIM_PWM_Start_DMA+0xea>
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e119      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_PWM_Start_DMA+0xfe>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b8:	e016      	b.n	80043e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start_DMA+0x10e>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c8:	e00e      	b.n	80043e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d104      	bne.n	80043da <HAL_TIM_PWM_Start_DMA+0x11e>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d8:	e006      	b.n	80043e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e2:	e001      	b.n	80043e8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0fa      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	f200 80ae 	bhi.w	800454c <HAL_TIM_PWM_Start_DMA+0x290>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	0800442d 	.word	0x0800442d
 80043fc:	0800454d 	.word	0x0800454d
 8004400:	0800454d 	.word	0x0800454d
 8004404:	0800454d 	.word	0x0800454d
 8004408:	08004475 	.word	0x08004475
 800440c:	0800454d 	.word	0x0800454d
 8004410:	0800454d 	.word	0x0800454d
 8004414:	0800454d 	.word	0x0800454d
 8004418:	080044bd 	.word	0x080044bd
 800441c:	0800454d 	.word	0x0800454d
 8004420:	0800454d 	.word	0x0800454d
 8004424:	0800454d 	.word	0x0800454d
 8004428:	08004505 	.word	0x08004505
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	4a6d      	ldr	r2, [pc, #436]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	4a6c      	ldr	r2, [pc, #432]	; (80045ec <HAL_TIM_PWM_Start_DMA+0x330>)
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	4a6b      	ldr	r2, [pc, #428]	; (80045f0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004442:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3334      	adds	r3, #52	; 0x34
 8004450:	461a      	mov	r2, r3
 8004452:	887b      	ldrh	r3, [r7, #2]
 8004454:	f7fd fd5e 	bl	8001f14 <HAL_DMA_Start_IT>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0bd      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	60da      	str	r2, [r3, #12]
      break;
 8004472:	e06e      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	4a5b      	ldr	r2, [pc, #364]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	4a5a      	ldr	r2, [pc, #360]	; (80045ec <HAL_TIM_PWM_Start_DMA+0x330>)
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	4a59      	ldr	r2, [pc, #356]	; (80045f0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800448a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3338      	adds	r3, #56	; 0x38
 8004498:	461a      	mov	r2, r3
 800449a:	887b      	ldrh	r3, [r7, #2]
 800449c:	f7fd fd3a 	bl	8001f14 <HAL_DMA_Start_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e099      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b8:	60da      	str	r2, [r3, #12]
      break;
 80044ba:	e04a      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4a49      	ldr	r2, [pc, #292]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_TIM_PWM_Start_DMA+0x330>)
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a47      	ldr	r2, [pc, #284]	; (80045f0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	333c      	adds	r3, #60	; 0x3c
 80044e0:	461a      	mov	r2, r3
 80044e2:	887b      	ldrh	r3, [r7, #2]
 80044e4:	f7fd fd16 	bl	8001f14 <HAL_DMA_Start_IT>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e075      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004500:	60da      	str	r2, [r3, #12]
      break;
 8004502:	e026      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	4a37      	ldr	r2, [pc, #220]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	4a36      	ldr	r2, [pc, #216]	; (80045ec <HAL_TIM_PWM_Start_DMA+0x330>)
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a35      	ldr	r2, [pc, #212]	; (80045f0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800451a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3340      	adds	r3, #64	; 0x40
 8004528:	461a      	mov	r2, r3
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	f7fd fcf2 	bl	8001f14 <HAL_DMA_Start_IT>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e051      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004548:	60da      	str	r2, [r3, #12]
      break;
 800454a:	e002      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	bf00      	nop
  }

  if (status == HAL_OK)
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d141      	bne.n	80045dc <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2201      	movs	r2, #1
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fdff 	bl	8005164 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d107      	bne.n	8004580 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIM_PWM_Start_DMA+0x340>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d010      	beq.n	80045dc <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	e007      	b.n	80045dc <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08004b55 	.word	0x08004b55
 80045ec:	08004bfd 	.word	0x08004bfd
 80045f0:	08004ac3 	.word	0x08004ac3
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800

08004600 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d855      	bhi.n	80046c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004651 	.word	0x08004651
 8004620:	080046c1 	.word	0x080046c1
 8004624:	080046c1 	.word	0x080046c1
 8004628:	080046c1 	.word	0x080046c1
 800462c:	0800466d 	.word	0x0800466d
 8004630:	080046c1 	.word	0x080046c1
 8004634:	080046c1 	.word	0x080046c1
 8004638:	080046c1 	.word	0x080046c1
 800463c:	08004689 	.word	0x08004689
 8004640:	080046c1 	.word	0x080046c1
 8004644:	080046c1 	.word	0x080046c1
 8004648:	080046c1 	.word	0x080046c1
 800464c:	080046a5 	.word	0x080046a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800465e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	4618      	mov	r0, r3
 8004666:	f7fd fcb5 	bl	8001fd4 <HAL_DMA_Abort_IT>
      break;
 800466a:	e02c      	b.n	80046c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	4618      	mov	r0, r3
 8004682:	f7fd fca7 	bl	8001fd4 <HAL_DMA_Abort_IT>
      break;
 8004686:	e01e      	b.n	80046c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004696:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fc99 	bl	8001fd4 <HAL_DMA_Abort_IT>
      break;
 80046a2:	e010      	b.n	80046c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fd fc8b 	bl	8001fd4 <HAL_DMA_Abort_IT>
      break;
 80046be:	e002      	b.n	80046c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d157      	bne.n	800477c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2200      	movs	r2, #0
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fd45 	bl	8005164 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d117      	bne.n	8004714 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10f      	bne.n	8004714 <HAL_TIM_PWM_Stop_DMA+0x114>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	f240 4344 	movw	r3, #1092	; 0x444
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6a1a      	ldr	r2, [r3, #32]
 800471a:	f241 1311 	movw	r3, #4369	; 0x1111
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10f      	bne.n	8004744 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	f240 4344 	movw	r3, #1092	; 0x444
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <HAL_TIM_PWM_Stop_DMA+0x154>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004752:	e013      	b.n	800477c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d104      	bne.n	8004764 <HAL_TIM_PWM_Stop_DMA+0x164>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004762:	e00b      	b.n	800477c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b08      	cmp	r3, #8
 8004768:	d104      	bne.n	8004774 <HAL_TIM_PWM_Stop_DMA+0x174>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004772:	e003      	b.n	800477c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40012c00 	.word	0x40012c00

0800478c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0ae      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	f200 809f 	bhi.w	80048f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047f5 	.word	0x080047f5
 80047c4:	080048f9 	.word	0x080048f9
 80047c8:	080048f9 	.word	0x080048f9
 80047cc:	080048f9 	.word	0x080048f9
 80047d0:	08004835 	.word	0x08004835
 80047d4:	080048f9 	.word	0x080048f9
 80047d8:	080048f9 	.word	0x080048f9
 80047dc:	080048f9 	.word	0x080048f9
 80047e0:	08004877 	.word	0x08004877
 80047e4:	080048f9 	.word	0x080048f9
 80047e8:	080048f9 	.word	0x080048f9
 80047ec:	080048f9 	.word	0x080048f9
 80047f0:	080048b7 	.word	0x080048b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fa94 	bl	8004d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0208 	orr.w	r2, r2, #8
 800480e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0204 	bic.w	r2, r2, #4
 800481e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	619a      	str	r2, [r3, #24]
      break;
 8004832:	e064      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fada 	bl	8004df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	021a      	lsls	r2, r3, #8
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
      break;
 8004874:	e043      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fb23 	bl	8004ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0208 	orr.w	r2, r2, #8
 8004890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0204 	bic.w	r2, r2, #4
 80048a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	61da      	str	r2, [r3, #28]
      break;
 80048b4:	e023      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fb6d 	bl	8004f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69d9      	ldr	r1, [r3, #28]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	021a      	lsls	r2, r3, #8
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	61da      	str	r2, [r3, #28]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	75fb      	strb	r3, [r7, #23]
      break;
 80048fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIM_ConfigClockSource+0x1c>
 8004928:	2302      	movs	r3, #2
 800492a:	e0b4      	b.n	8004a96 <HAL_TIM_ConfigClockSource+0x186>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800494a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004964:	d03e      	beq.n	80049e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496a:	f200 8087 	bhi.w	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	f000 8086 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x172>
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d87f      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b70      	cmp	r3, #112	; 0x70
 800497e:	d01a      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004980:	2b70      	cmp	r3, #112	; 0x70
 8004982:	d87b      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b60      	cmp	r3, #96	; 0x60
 8004986:	d050      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x11a>
 8004988:	2b60      	cmp	r3, #96	; 0x60
 800498a:	d877      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b50      	cmp	r3, #80	; 0x50
 800498e:	d03c      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0xfa>
 8004990:	2b50      	cmp	r3, #80	; 0x50
 8004992:	d873      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d058      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x13a>
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d86f      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d064      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d86b      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d060      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d867      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d05c      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d05a      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049b4:	e062      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6899      	ldr	r1, [r3, #8]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f000 fbae 	bl	8005126 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	609a      	str	r2, [r3, #8]
      break;
 80049e2:	e04f      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6899      	ldr	r1, [r3, #8]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f000 fb97 	bl	8005126 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a06:	609a      	str	r2, [r3, #8]
      break;
 8004a08:	e03c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fb0e 	bl	8005038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2150      	movs	r1, #80	; 0x50
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fb65 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004a28:	e02c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fb2c 	bl	8005094 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2160      	movs	r1, #96	; 0x60
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb55 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004a48:	e01c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 faee 	bl	8005038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2140      	movs	r1, #64	; 0x40
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb45 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004a68:	e00c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f000 fb3c 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004a7a:	e003      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a80:	e000      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr

08004ac2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d107      	bne.n	8004aea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae8:	e02a      	b.n	8004b40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d107      	bne.n	8004b04 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2202      	movs	r2, #2
 8004af8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b02:	e01d      	b.n	8004b40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d107      	bne.n	8004b1e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2204      	movs	r2, #4
 8004b12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b1c:	e010      	b.n	8004b40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d107      	bne.n	8004b38 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b36:	e003      	b.n	8004b40 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ffb5 	bl	8004ab0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d10b      	bne.n	8004b84 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d136      	bne.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b82:	e031      	b.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d10b      	bne.n	8004ba6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2202      	movs	r2, #2
 8004b92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d125      	bne.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba4:	e020      	b.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d10b      	bne.n	8004bc8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d114      	bne.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc6:	e00f      	b.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d10a      	bne.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7fc fc2f 	bl	800144c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d103      	bne.n	8004c1c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	771a      	strb	r2, [r3, #28]
 8004c1a:	e019      	b.n	8004c50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d103      	bne.n	8004c2e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	771a      	strb	r2, [r3, #28]
 8004c2c:	e010      	b.n	8004c50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d103      	bne.n	8004c40 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	771a      	strb	r2, [r3, #28]
 8004c3e:	e007      	b.n	8004c50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d102      	bne.n	8004c50 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff ff24 	bl	8004a9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a29      	ldr	r2, [pc, #164]	; (8004d1c <TIM_Base_SetConfig+0xb8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <TIM_Base_SetConfig+0x30>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c82:	d007      	beq.n	8004c94 <TIM_Base_SetConfig+0x30>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <TIM_Base_SetConfig+0xbc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_Base_SetConfig+0x30>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <TIM_Base_SetConfig+0xc0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <TIM_Base_SetConfig+0xb8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <TIM_Base_SetConfig+0x62>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d007      	beq.n	8004cc6 <TIM_Base_SetConfig+0x62>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <TIM_Base_SetConfig+0xbc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0x62>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <TIM_Base_SetConfig+0xc0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <TIM_Base_SetConfig+0xb8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d103      	bne.n	8004d0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	615a      	str	r2, [r3, #20]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800

08004d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f023 0201 	bic.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0303 	bic.w	r3, r3, #3
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 0302 	bic.w	r3, r3, #2
 8004d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <TIM_OC1_SetConfig+0xc8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d10c      	bne.n	8004d9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0308 	bic.w	r3, r3, #8
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 0304 	bic.w	r3, r3, #4
 8004d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <TIM_OC1_SetConfig+0xc8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d111      	bne.n	8004dca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40012c00 	.word	0x40012c00

08004df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f023 0210 	bic.w	r2, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0320 	bic.w	r3, r3, #32
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <TIM_OC2_SetConfig+0xd0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10d      	bne.n	8004e70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <TIM_OC2_SetConfig+0xd0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d113      	bne.n	8004ea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00

08004ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <TIM_OC3_SetConfig+0xd0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <TIM_OC3_SetConfig+0xd0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d113      	bne.n	8004f72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40012c00 	.word	0x40012c00

08004f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	031b      	lsls	r3, r3, #12
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <TIM_OC4_SetConfig+0x98>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d109      	bne.n	8005010 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	019b      	lsls	r3, r3, #6
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr
 8005034:	40012c00 	.word	0x40012c00

08005038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f023 0201 	bic.w	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 030a 	bic.w	r3, r3, #10
 8005074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0210 	bic.w	r2, r3, #16
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	031b      	lsls	r3, r3, #12
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	f043 0307 	orr.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005140:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	021a      	lsls	r2, r3, #8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	431a      	orrs	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4313      	orrs	r3, r2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	609a      	str	r2, [r3, #8]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2201      	movs	r2, #1
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	43db      	mvns	r3, r3
 8005186:	401a      	ands	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	fa01 f303 	lsl.w	r3, r1, r3
 800519c:	431a      	orrs	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e046      	b.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a16      	ldr	r2, [pc, #88]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d009      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a12      	ldr	r2, [pc, #72]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a10      	ldr	r2, [pc, #64]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d10c      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	4313      	orrs	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800

08005268 <__errno>:
 8005268:	4b01      	ldr	r3, [pc, #4]	; (8005270 <__errno+0x8>)
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000024 	.word	0x20000024

08005274 <__libc_init_array>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	2600      	movs	r6, #0
 8005278:	4d0c      	ldr	r5, [pc, #48]	; (80052ac <__libc_init_array+0x38>)
 800527a:	4c0d      	ldr	r4, [pc, #52]	; (80052b0 <__libc_init_array+0x3c>)
 800527c:	1b64      	subs	r4, r4, r5
 800527e:	10a4      	asrs	r4, r4, #2
 8005280:	42a6      	cmp	r6, r4
 8005282:	d109      	bne.n	8005298 <__libc_init_array+0x24>
 8005284:	f000 ff06 	bl	8006094 <_init>
 8005288:	2600      	movs	r6, #0
 800528a:	4d0a      	ldr	r5, [pc, #40]	; (80052b4 <__libc_init_array+0x40>)
 800528c:	4c0a      	ldr	r4, [pc, #40]	; (80052b8 <__libc_init_array+0x44>)
 800528e:	1b64      	subs	r4, r4, r5
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	42a6      	cmp	r6, r4
 8005294:	d105      	bne.n	80052a2 <__libc_init_array+0x2e>
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	f855 3b04 	ldr.w	r3, [r5], #4
 800529c:	4798      	blx	r3
 800529e:	3601      	adds	r6, #1
 80052a0:	e7ee      	b.n	8005280 <__libc_init_array+0xc>
 80052a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a6:	4798      	blx	r3
 80052a8:	3601      	adds	r6, #1
 80052aa:	e7f2      	b.n	8005292 <__libc_init_array+0x1e>
 80052ac:	08006110 	.word	0x08006110
 80052b0:	08006110 	.word	0x08006110
 80052b4:	08006110 	.word	0x08006110
 80052b8:	08006114 	.word	0x08006114

080052bc <memset>:
 80052bc:	4603      	mov	r3, r0
 80052be:	4402      	add	r2, r0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d100      	bne.n	80052c6 <memset+0xa>
 80052c4:	4770      	bx	lr
 80052c6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ca:	e7f9      	b.n	80052c0 <memset+0x4>

080052cc <pow>:
 80052cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d0:	4614      	mov	r4, r2
 80052d2:	461d      	mov	r5, r3
 80052d4:	4680      	mov	r8, r0
 80052d6:	4689      	mov	r9, r1
 80052d8:	f000 f862 	bl	80053a0 <__ieee754_pow>
 80052dc:	4622      	mov	r2, r4
 80052de:	4606      	mov	r6, r0
 80052e0:	460f      	mov	r7, r1
 80052e2:	462b      	mov	r3, r5
 80052e4:	4620      	mov	r0, r4
 80052e6:	4629      	mov	r1, r5
 80052e8:	f7fb fb88 	bl	80009fc <__aeabi_dcmpun>
 80052ec:	bbc8      	cbnz	r0, 8005362 <pow+0x96>
 80052ee:	2200      	movs	r2, #0
 80052f0:	2300      	movs	r3, #0
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	f7fb fb4f 	bl	8000998 <__aeabi_dcmpeq>
 80052fa:	b1b8      	cbz	r0, 800532c <pow+0x60>
 80052fc:	2200      	movs	r2, #0
 80052fe:	2300      	movs	r3, #0
 8005300:	4620      	mov	r0, r4
 8005302:	4629      	mov	r1, r5
 8005304:	f7fb fb48 	bl	8000998 <__aeabi_dcmpeq>
 8005308:	2800      	cmp	r0, #0
 800530a:	d141      	bne.n	8005390 <pow+0xc4>
 800530c:	4620      	mov	r0, r4
 800530e:	4629      	mov	r1, r5
 8005310:	f000 fe3b 	bl	8005f8a <finite>
 8005314:	b328      	cbz	r0, 8005362 <pow+0x96>
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	4620      	mov	r0, r4
 800531c:	4629      	mov	r1, r5
 800531e:	f7fb fb45 	bl	80009ac <__aeabi_dcmplt>
 8005322:	b1f0      	cbz	r0, 8005362 <pow+0x96>
 8005324:	f7ff ffa0 	bl	8005268 <__errno>
 8005328:	2322      	movs	r3, #34	; 0x22
 800532a:	e019      	b.n	8005360 <pow+0x94>
 800532c:	4630      	mov	r0, r6
 800532e:	4639      	mov	r1, r7
 8005330:	f000 fe2b 	bl	8005f8a <finite>
 8005334:	b9c8      	cbnz	r0, 800536a <pow+0x9e>
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	f000 fe26 	bl	8005f8a <finite>
 800533e:	b1a0      	cbz	r0, 800536a <pow+0x9e>
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f000 fe21 	bl	8005f8a <finite>
 8005348:	b178      	cbz	r0, 800536a <pow+0x9e>
 800534a:	4632      	mov	r2, r6
 800534c:	463b      	mov	r3, r7
 800534e:	4630      	mov	r0, r6
 8005350:	4639      	mov	r1, r7
 8005352:	f7fb fb53 	bl	80009fc <__aeabi_dcmpun>
 8005356:	2800      	cmp	r0, #0
 8005358:	d0e4      	beq.n	8005324 <pow+0x58>
 800535a:	f7ff ff85 	bl	8005268 <__errno>
 800535e:	2321      	movs	r3, #33	; 0x21
 8005360:	6003      	str	r3, [r0, #0]
 8005362:	4630      	mov	r0, r6
 8005364:	4639      	mov	r1, r7
 8005366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536a:	2200      	movs	r2, #0
 800536c:	2300      	movs	r3, #0
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	f7fb fb11 	bl	8000998 <__aeabi_dcmpeq>
 8005376:	2800      	cmp	r0, #0
 8005378:	d0f3      	beq.n	8005362 <pow+0x96>
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	f000 fe04 	bl	8005f8a <finite>
 8005382:	2800      	cmp	r0, #0
 8005384:	d0ed      	beq.n	8005362 <pow+0x96>
 8005386:	4620      	mov	r0, r4
 8005388:	4629      	mov	r1, r5
 800538a:	f000 fdfe 	bl	8005f8a <finite>
 800538e:	e7c8      	b.n	8005322 <pow+0x56>
 8005390:	2600      	movs	r6, #0
 8005392:	4f01      	ldr	r7, [pc, #4]	; (8005398 <pow+0xcc>)
 8005394:	e7e5      	b.n	8005362 <pow+0x96>
 8005396:	bf00      	nop
 8005398:	3ff00000 	.word	0x3ff00000
 800539c:	00000000 	.word	0x00000000

080053a0 <__ieee754_pow>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	b093      	sub	sp, #76	; 0x4c
 80053a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053aa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80053ae:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80053b2:	4689      	mov	r9, r1
 80053b4:	ea56 0102 	orrs.w	r1, r6, r2
 80053b8:	4680      	mov	r8, r0
 80053ba:	d111      	bne.n	80053e0 <__ieee754_pow+0x40>
 80053bc:	1803      	adds	r3, r0, r0
 80053be:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80053c2:	4152      	adcs	r2, r2
 80053c4:	4299      	cmp	r1, r3
 80053c6:	4b82      	ldr	r3, [pc, #520]	; (80055d0 <__ieee754_pow+0x230>)
 80053c8:	4193      	sbcs	r3, r2
 80053ca:	f080 84b9 	bcs.w	8005d40 <__ieee754_pow+0x9a0>
 80053ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053d2:	4640      	mov	r0, r8
 80053d4:	4649      	mov	r1, r9
 80053d6:	f7fa fec1 	bl	800015c <__adddf3>
 80053da:	4683      	mov	fp, r0
 80053dc:	468c      	mov	ip, r1
 80053de:	e06f      	b.n	80054c0 <__ieee754_pow+0x120>
 80053e0:	4b7c      	ldr	r3, [pc, #496]	; (80055d4 <__ieee754_pow+0x234>)
 80053e2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80053e6:	429c      	cmp	r4, r3
 80053e8:	464d      	mov	r5, r9
 80053ea:	4682      	mov	sl, r0
 80053ec:	dc06      	bgt.n	80053fc <__ieee754_pow+0x5c>
 80053ee:	d101      	bne.n	80053f4 <__ieee754_pow+0x54>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1ec      	bne.n	80053ce <__ieee754_pow+0x2e>
 80053f4:	429e      	cmp	r6, r3
 80053f6:	dc01      	bgt.n	80053fc <__ieee754_pow+0x5c>
 80053f8:	d10f      	bne.n	800541a <__ieee754_pow+0x7a>
 80053fa:	b172      	cbz	r2, 800541a <__ieee754_pow+0x7a>
 80053fc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005400:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005404:	ea55 050a 	orrs.w	r5, r5, sl
 8005408:	d1e1      	bne.n	80053ce <__ieee754_pow+0x2e>
 800540a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800540e:	18db      	adds	r3, r3, r3
 8005410:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005414:	4152      	adcs	r2, r2
 8005416:	429d      	cmp	r5, r3
 8005418:	e7d5      	b.n	80053c6 <__ieee754_pow+0x26>
 800541a:	2d00      	cmp	r5, #0
 800541c:	da39      	bge.n	8005492 <__ieee754_pow+0xf2>
 800541e:	4b6e      	ldr	r3, [pc, #440]	; (80055d8 <__ieee754_pow+0x238>)
 8005420:	429e      	cmp	r6, r3
 8005422:	dc52      	bgt.n	80054ca <__ieee754_pow+0x12a>
 8005424:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005428:	429e      	cmp	r6, r3
 800542a:	f340 849c 	ble.w	8005d66 <__ieee754_pow+0x9c6>
 800542e:	1533      	asrs	r3, r6, #20
 8005430:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005434:	2b14      	cmp	r3, #20
 8005436:	dd0f      	ble.n	8005458 <__ieee754_pow+0xb8>
 8005438:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800543c:	fa22 f103 	lsr.w	r1, r2, r3
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	4293      	cmp	r3, r2
 8005446:	f040 848e 	bne.w	8005d66 <__ieee754_pow+0x9c6>
 800544a:	f001 0101 	and.w	r1, r1, #1
 800544e:	f1c1 0302 	rsb	r3, r1, #2
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	b182      	cbz	r2, 8005478 <__ieee754_pow+0xd8>
 8005456:	e05d      	b.n	8005514 <__ieee754_pow+0x174>
 8005458:	2a00      	cmp	r2, #0
 800545a:	d159      	bne.n	8005510 <__ieee754_pow+0x170>
 800545c:	f1c3 0314 	rsb	r3, r3, #20
 8005460:	fa46 f103 	asr.w	r1, r6, r3
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	42b3      	cmp	r3, r6
 800546a:	f040 8479 	bne.w	8005d60 <__ieee754_pow+0x9c0>
 800546e:	f001 0101 	and.w	r1, r1, #1
 8005472:	f1c1 0302 	rsb	r3, r1, #2
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	4b58      	ldr	r3, [pc, #352]	; (80055dc <__ieee754_pow+0x23c>)
 800547a:	429e      	cmp	r6, r3
 800547c:	d132      	bne.n	80054e4 <__ieee754_pow+0x144>
 800547e:	2f00      	cmp	r7, #0
 8005480:	f280 846a 	bge.w	8005d58 <__ieee754_pow+0x9b8>
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	2000      	movs	r0, #0
 800548a:	4954      	ldr	r1, [pc, #336]	; (80055dc <__ieee754_pow+0x23c>)
 800548c:	f7fb f946 	bl	800071c <__aeabi_ddiv>
 8005490:	e7a3      	b.n	80053da <__ieee754_pow+0x3a>
 8005492:	2300      	movs	r3, #0
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2a00      	cmp	r2, #0
 8005498:	d13c      	bne.n	8005514 <__ieee754_pow+0x174>
 800549a:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <__ieee754_pow+0x234>)
 800549c:	429e      	cmp	r6, r3
 800549e:	d1eb      	bne.n	8005478 <__ieee754_pow+0xd8>
 80054a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80054a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80054a8:	ea53 030a 	orrs.w	r3, r3, sl
 80054ac:	f000 8448 	beq.w	8005d40 <__ieee754_pow+0x9a0>
 80054b0:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <__ieee754_pow+0x240>)
 80054b2:	429c      	cmp	r4, r3
 80054b4:	dd0b      	ble.n	80054ce <__ieee754_pow+0x12e>
 80054b6:	2f00      	cmp	r7, #0
 80054b8:	f2c0 8448 	blt.w	8005d4c <__ieee754_pow+0x9ac>
 80054bc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80054c0:	4658      	mov	r0, fp
 80054c2:	4661      	mov	r1, ip
 80054c4:	b013      	add	sp, #76	; 0x4c
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	2302      	movs	r3, #2
 80054cc:	e7e2      	b.n	8005494 <__ieee754_pow+0xf4>
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	f04f 0b00 	mov.w	fp, #0
 80054d4:	f04f 0c00 	mov.w	ip, #0
 80054d8:	daf2      	bge.n	80054c0 <__ieee754_pow+0x120>
 80054da:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80054de:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80054e2:	e7ed      	b.n	80054c0 <__ieee754_pow+0x120>
 80054e4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80054e8:	d106      	bne.n	80054f8 <__ieee754_pow+0x158>
 80054ea:	4642      	mov	r2, r8
 80054ec:	464b      	mov	r3, r9
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fa ffe9 	bl	80004c8 <__aeabi_dmul>
 80054f6:	e770      	b.n	80053da <__ieee754_pow+0x3a>
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <__ieee754_pow+0x244>)
 80054fa:	429f      	cmp	r7, r3
 80054fc:	d10a      	bne.n	8005514 <__ieee754_pow+0x174>
 80054fe:	2d00      	cmp	r5, #0
 8005500:	db08      	blt.n	8005514 <__ieee754_pow+0x174>
 8005502:	4640      	mov	r0, r8
 8005504:	4649      	mov	r1, r9
 8005506:	b013      	add	sp, #76	; 0x4c
 8005508:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	f000 bc5e 	b.w	8005dcc <__ieee754_sqrt>
 8005510:	2300      	movs	r3, #0
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f000 fd34 	bl	8005f84 <fabs>
 800551c:	4683      	mov	fp, r0
 800551e:	468c      	mov	ip, r1
 8005520:	f1ba 0f00 	cmp.w	sl, #0
 8005524:	d128      	bne.n	8005578 <__ieee754_pow+0x1d8>
 8005526:	b124      	cbz	r4, 8005532 <__ieee754_pow+0x192>
 8005528:	4b2c      	ldr	r3, [pc, #176]	; (80055dc <__ieee754_pow+0x23c>)
 800552a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800552e:	429a      	cmp	r2, r3
 8005530:	d122      	bne.n	8005578 <__ieee754_pow+0x1d8>
 8005532:	2f00      	cmp	r7, #0
 8005534:	da07      	bge.n	8005546 <__ieee754_pow+0x1a6>
 8005536:	465a      	mov	r2, fp
 8005538:	4663      	mov	r3, ip
 800553a:	2000      	movs	r0, #0
 800553c:	4927      	ldr	r1, [pc, #156]	; (80055dc <__ieee754_pow+0x23c>)
 800553e:	f7fb f8ed 	bl	800071c <__aeabi_ddiv>
 8005542:	4683      	mov	fp, r0
 8005544:	468c      	mov	ip, r1
 8005546:	2d00      	cmp	r5, #0
 8005548:	daba      	bge.n	80054c0 <__ieee754_pow+0x120>
 800554a:	9b00      	ldr	r3, [sp, #0]
 800554c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005550:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005554:	4323      	orrs	r3, r4
 8005556:	d108      	bne.n	800556a <__ieee754_pow+0x1ca>
 8005558:	465a      	mov	r2, fp
 800555a:	4663      	mov	r3, ip
 800555c:	4658      	mov	r0, fp
 800555e:	4661      	mov	r1, ip
 8005560:	f7fa fdfa 	bl	8000158 <__aeabi_dsub>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	e790      	b.n	800548c <__ieee754_pow+0xec>
 800556a:	9b00      	ldr	r3, [sp, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d1a7      	bne.n	80054c0 <__ieee754_pow+0x120>
 8005570:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005574:	469c      	mov	ip, r3
 8005576:	e7a3      	b.n	80054c0 <__ieee754_pow+0x120>
 8005578:	0feb      	lsrs	r3, r5, #31
 800557a:	3b01      	subs	r3, #1
 800557c:	930c      	str	r3, [sp, #48]	; 0x30
 800557e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005580:	9b00      	ldr	r3, [sp, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	d104      	bne.n	8005590 <__ieee754_pow+0x1f0>
 8005586:	4642      	mov	r2, r8
 8005588:	464b      	mov	r3, r9
 800558a:	4640      	mov	r0, r8
 800558c:	4649      	mov	r1, r9
 800558e:	e7e7      	b.n	8005560 <__ieee754_pow+0x1c0>
 8005590:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <__ieee754_pow+0x248>)
 8005592:	429e      	cmp	r6, r3
 8005594:	f340 80f6 	ble.w	8005784 <__ieee754_pow+0x3e4>
 8005598:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800559c:	429e      	cmp	r6, r3
 800559e:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <__ieee754_pow+0x240>)
 80055a0:	dd09      	ble.n	80055b6 <__ieee754_pow+0x216>
 80055a2:	429c      	cmp	r4, r3
 80055a4:	dc0c      	bgt.n	80055c0 <__ieee754_pow+0x220>
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	da0c      	bge.n	80055c4 <__ieee754_pow+0x224>
 80055aa:	2000      	movs	r0, #0
 80055ac:	b013      	add	sp, #76	; 0x4c
 80055ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b2:	f000 bce2 	b.w	8005f7a <__math_oflow>
 80055b6:	429c      	cmp	r4, r3
 80055b8:	dbf5      	blt.n	80055a6 <__ieee754_pow+0x206>
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <__ieee754_pow+0x23c>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	dd15      	ble.n	80055ec <__ieee754_pow+0x24c>
 80055c0:	2f00      	cmp	r7, #0
 80055c2:	dcf2      	bgt.n	80055aa <__ieee754_pow+0x20a>
 80055c4:	2000      	movs	r0, #0
 80055c6:	b013      	add	sp, #76	; 0x4c
 80055c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	f000 bcd0 	b.w	8005f70 <__math_uflow>
 80055d0:	fff00000 	.word	0xfff00000
 80055d4:	7ff00000 	.word	0x7ff00000
 80055d8:	433fffff 	.word	0x433fffff
 80055dc:	3ff00000 	.word	0x3ff00000
 80055e0:	3fefffff 	.word	0x3fefffff
 80055e4:	3fe00000 	.word	0x3fe00000
 80055e8:	41e00000 	.word	0x41e00000
 80055ec:	4661      	mov	r1, ip
 80055ee:	2200      	movs	r2, #0
 80055f0:	4658      	mov	r0, fp
 80055f2:	4b5f      	ldr	r3, [pc, #380]	; (8005770 <__ieee754_pow+0x3d0>)
 80055f4:	f7fa fdb0 	bl	8000158 <__aeabi_dsub>
 80055f8:	a355      	add	r3, pc, #340	; (adr r3, 8005750 <__ieee754_pow+0x3b0>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	4604      	mov	r4, r0
 8005600:	460d      	mov	r5, r1
 8005602:	f7fa ff61 	bl	80004c8 <__aeabi_dmul>
 8005606:	a354      	add	r3, pc, #336	; (adr r3, 8005758 <__ieee754_pow+0x3b8>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa ff58 	bl	80004c8 <__aeabi_dmul>
 8005618:	2200      	movs	r2, #0
 800561a:	4682      	mov	sl, r0
 800561c:	468b      	mov	fp, r1
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	4b54      	ldr	r3, [pc, #336]	; (8005774 <__ieee754_pow+0x3d4>)
 8005624:	f7fa ff50 	bl	80004c8 <__aeabi_dmul>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	a14c      	add	r1, pc, #304	; (adr r1, 8005760 <__ieee754_pow+0x3c0>)
 800562e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005632:	f7fa fd91 	bl	8000158 <__aeabi_dsub>
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	f7fa ff45 	bl	80004c8 <__aeabi_dmul>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	2000      	movs	r0, #0
 8005644:	494c      	ldr	r1, [pc, #304]	; (8005778 <__ieee754_pow+0x3d8>)
 8005646:	f7fa fd87 	bl	8000158 <__aeabi_dsub>
 800564a:	4622      	mov	r2, r4
 800564c:	462b      	mov	r3, r5
 800564e:	4680      	mov	r8, r0
 8005650:	4689      	mov	r9, r1
 8005652:	4620      	mov	r0, r4
 8005654:	4629      	mov	r1, r5
 8005656:	f7fa ff37 	bl	80004c8 <__aeabi_dmul>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4640      	mov	r0, r8
 8005660:	4649      	mov	r1, r9
 8005662:	f7fa ff31 	bl	80004c8 <__aeabi_dmul>
 8005666:	a340      	add	r3, pc, #256	; (adr r3, 8005768 <__ieee754_pow+0x3c8>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa ff2c 	bl	80004c8 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4650      	mov	r0, sl
 8005676:	4659      	mov	r1, fp
 8005678:	f7fa fd6e 	bl	8000158 <__aeabi_dsub>
 800567c:	f04f 0a00 	mov.w	sl, #0
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4630      	mov	r0, r6
 800568a:	4639      	mov	r1, r7
 800568c:	f7fa fd66 	bl	800015c <__adddf3>
 8005690:	4632      	mov	r2, r6
 8005692:	463b      	mov	r3, r7
 8005694:	4650      	mov	r0, sl
 8005696:	468b      	mov	fp, r1
 8005698:	f7fa fd5e 	bl	8000158 <__aeabi_dsub>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fa fd58 	bl	8000158 <__aeabi_dsub>
 80056a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056ac:	9b00      	ldr	r3, [sp, #0]
 80056ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056b0:	3b01      	subs	r3, #1
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f04f 0600 	mov.w	r6, #0
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	bf0c      	ite	eq
 80056be:	4b2f      	ldreq	r3, [pc, #188]	; (800577c <__ieee754_pow+0x3dc>)
 80056c0:	4b2b      	ldrne	r3, [pc, #172]	; (8005770 <__ieee754_pow+0x3d0>)
 80056c2:	4604      	mov	r4, r0
 80056c4:	460d      	mov	r5, r1
 80056c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ca:	e9cd 2300 	strd	r2, r3, [sp]
 80056ce:	4632      	mov	r2, r6
 80056d0:	463b      	mov	r3, r7
 80056d2:	f7fa fd41 	bl	8000158 <__aeabi_dsub>
 80056d6:	4652      	mov	r2, sl
 80056d8:	465b      	mov	r3, fp
 80056da:	f7fa fef5 	bl	80004c8 <__aeabi_dmul>
 80056de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056e2:	4680      	mov	r8, r0
 80056e4:	4689      	mov	r9, r1
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	f7fa feed 	bl	80004c8 <__aeabi_dmul>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4640      	mov	r0, r8
 80056f4:	4649      	mov	r1, r9
 80056f6:	f7fa fd31 	bl	800015c <__adddf3>
 80056fa:	4632      	mov	r2, r6
 80056fc:	463b      	mov	r3, r7
 80056fe:	4680      	mov	r8, r0
 8005700:	4689      	mov	r9, r1
 8005702:	4650      	mov	r0, sl
 8005704:	4659      	mov	r1, fp
 8005706:	f7fa fedf 	bl	80004c8 <__aeabi_dmul>
 800570a:	4604      	mov	r4, r0
 800570c:	460d      	mov	r5, r1
 800570e:	460b      	mov	r3, r1
 8005710:	4602      	mov	r2, r0
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800571a:	f7fa fd1f 	bl	800015c <__adddf3>
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <__ieee754_pow+0x3e0>)
 8005720:	4682      	mov	sl, r0
 8005722:	4299      	cmp	r1, r3
 8005724:	460f      	mov	r7, r1
 8005726:	460e      	mov	r6, r1
 8005728:	f340 82e5 	ble.w	8005cf6 <__ieee754_pow+0x956>
 800572c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005730:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005734:	4303      	orrs	r3, r0
 8005736:	f000 81df 	beq.w	8005af8 <__ieee754_pow+0x758>
 800573a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800573e:	2200      	movs	r2, #0
 8005740:	2300      	movs	r3, #0
 8005742:	f7fb f933 	bl	80009ac <__aeabi_dcmplt>
 8005746:	3800      	subs	r0, #0
 8005748:	bf18      	it	ne
 800574a:	2001      	movne	r0, #1
 800574c:	e72e      	b.n	80055ac <__ieee754_pow+0x20c>
 800574e:	bf00      	nop
 8005750:	60000000 	.word	0x60000000
 8005754:	3ff71547 	.word	0x3ff71547
 8005758:	f85ddf44 	.word	0xf85ddf44
 800575c:	3e54ae0b 	.word	0x3e54ae0b
 8005760:	55555555 	.word	0x55555555
 8005764:	3fd55555 	.word	0x3fd55555
 8005768:	652b82fe 	.word	0x652b82fe
 800576c:	3ff71547 	.word	0x3ff71547
 8005770:	3ff00000 	.word	0x3ff00000
 8005774:	3fd00000 	.word	0x3fd00000
 8005778:	3fe00000 	.word	0x3fe00000
 800577c:	bff00000 	.word	0xbff00000
 8005780:	408fffff 	.word	0x408fffff
 8005784:	4bd2      	ldr	r3, [pc, #840]	; (8005ad0 <__ieee754_pow+0x730>)
 8005786:	2200      	movs	r2, #0
 8005788:	402b      	ands	r3, r5
 800578a:	b943      	cbnz	r3, 800579e <__ieee754_pow+0x3fe>
 800578c:	4658      	mov	r0, fp
 800578e:	4661      	mov	r1, ip
 8005790:	4bd0      	ldr	r3, [pc, #832]	; (8005ad4 <__ieee754_pow+0x734>)
 8005792:	f7fa fe99 	bl	80004c8 <__aeabi_dmul>
 8005796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800579a:	4683      	mov	fp, r0
 800579c:	460c      	mov	r4, r1
 800579e:	1523      	asrs	r3, r4, #20
 80057a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80057a4:	4413      	add	r3, r2
 80057a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057a8:	4bcb      	ldr	r3, [pc, #812]	; (8005ad8 <__ieee754_pow+0x738>)
 80057aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80057ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80057b2:	429c      	cmp	r4, r3
 80057b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80057b8:	dd08      	ble.n	80057cc <__ieee754_pow+0x42c>
 80057ba:	4bc8      	ldr	r3, [pc, #800]	; (8005adc <__ieee754_pow+0x73c>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	f340 8199 	ble.w	8005af4 <__ieee754_pow+0x754>
 80057c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80057c8:	3301      	adds	r3, #1
 80057ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80057cc:	2600      	movs	r6, #0
 80057ce:	00f3      	lsls	r3, r6, #3
 80057d0:	930d      	str	r3, [sp, #52]	; 0x34
 80057d2:	4bc3      	ldr	r3, [pc, #780]	; (8005ae0 <__ieee754_pow+0x740>)
 80057d4:	4658      	mov	r0, fp
 80057d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057de:	4629      	mov	r1, r5
 80057e0:	461a      	mov	r2, r3
 80057e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80057e6:	4623      	mov	r3, r4
 80057e8:	f7fa fcb6 	bl	8000158 <__aeabi_dsub>
 80057ec:	46da      	mov	sl, fp
 80057ee:	462b      	mov	r3, r5
 80057f0:	4652      	mov	r2, sl
 80057f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80057f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057fa:	f7fa fcaf 	bl	800015c <__adddf3>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	2000      	movs	r0, #0
 8005804:	49b7      	ldr	r1, [pc, #732]	; (8005ae4 <__ieee754_pow+0x744>)
 8005806:	f7fa ff89 	bl	800071c <__aeabi_ddiv>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005812:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005816:	f7fa fe57 	bl	80004c8 <__aeabi_dmul>
 800581a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800581e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005822:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005826:	2300      	movs	r3, #0
 8005828:	2200      	movs	r2, #0
 800582a:	46ab      	mov	fp, r5
 800582c:	106d      	asrs	r5, r5, #1
 800582e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005838:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800583c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	4614      	mov	r4, r2
 8005846:	461d      	mov	r5, r3
 8005848:	f7fa fe3e 	bl	80004c8 <__aeabi_dmul>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005854:	f7fa fc80 	bl	8000158 <__aeabi_dsub>
 8005858:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800585c:	4606      	mov	r6, r0
 800585e:	460f      	mov	r7, r1
 8005860:	4620      	mov	r0, r4
 8005862:	4629      	mov	r1, r5
 8005864:	f7fa fc78 	bl	8000158 <__aeabi_dsub>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4650      	mov	r0, sl
 800586e:	4659      	mov	r1, fp
 8005870:	f7fa fc72 	bl	8000158 <__aeabi_dsub>
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	f7fa fe26 	bl	80004c8 <__aeabi_dmul>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4630      	mov	r0, r6
 8005882:	4639      	mov	r1, r7
 8005884:	f7fa fc68 	bl	8000158 <__aeabi_dsub>
 8005888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800588c:	f7fa fe1c 	bl	80004c8 <__aeabi_dmul>
 8005890:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005894:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005898:	4610      	mov	r0, r2
 800589a:	4619      	mov	r1, r3
 800589c:	f7fa fe14 	bl	80004c8 <__aeabi_dmul>
 80058a0:	a379      	add	r3, pc, #484	; (adr r3, 8005a88 <__ieee754_pow+0x6e8>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	f7fa fe0d 	bl	80004c8 <__aeabi_dmul>
 80058ae:	a378      	add	r3, pc, #480	; (adr r3, 8005a90 <__ieee754_pow+0x6f0>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f7fa fc52 	bl	800015c <__adddf3>
 80058b8:	4622      	mov	r2, r4
 80058ba:	462b      	mov	r3, r5
 80058bc:	f7fa fe04 	bl	80004c8 <__aeabi_dmul>
 80058c0:	a375      	add	r3, pc, #468	; (adr r3, 8005a98 <__ieee754_pow+0x6f8>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fa fc49 	bl	800015c <__adddf3>
 80058ca:	4622      	mov	r2, r4
 80058cc:	462b      	mov	r3, r5
 80058ce:	f7fa fdfb 	bl	80004c8 <__aeabi_dmul>
 80058d2:	a373      	add	r3, pc, #460	; (adr r3, 8005aa0 <__ieee754_pow+0x700>)
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f7fa fc40 	bl	800015c <__adddf3>
 80058dc:	4622      	mov	r2, r4
 80058de:	462b      	mov	r3, r5
 80058e0:	f7fa fdf2 	bl	80004c8 <__aeabi_dmul>
 80058e4:	a370      	add	r3, pc, #448	; (adr r3, 8005aa8 <__ieee754_pow+0x708>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fc37 	bl	800015c <__adddf3>
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	f7fa fde9 	bl	80004c8 <__aeabi_dmul>
 80058f6:	a36e      	add	r3, pc, #440	; (adr r3, 8005ab0 <__ieee754_pow+0x710>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f7fa fc2e 	bl	800015c <__adddf3>
 8005900:	4622      	mov	r2, r4
 8005902:	4606      	mov	r6, r0
 8005904:	460f      	mov	r7, r1
 8005906:	462b      	mov	r3, r5
 8005908:	4620      	mov	r0, r4
 800590a:	4629      	mov	r1, r5
 800590c:	f7fa fddc 	bl	80004c8 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4630      	mov	r0, r6
 8005916:	4639      	mov	r1, r7
 8005918:	f7fa fdd6 	bl	80004c8 <__aeabi_dmul>
 800591c:	4604      	mov	r4, r0
 800591e:	460d      	mov	r5, r1
 8005920:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	f7fa fc18 	bl	800015c <__adddf3>
 800592c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005930:	f7fa fdca 	bl	80004c8 <__aeabi_dmul>
 8005934:	4622      	mov	r2, r4
 8005936:	462b      	mov	r3, r5
 8005938:	f7fa fc10 	bl	800015c <__adddf3>
 800593c:	4642      	mov	r2, r8
 800593e:	4606      	mov	r6, r0
 8005940:	460f      	mov	r7, r1
 8005942:	464b      	mov	r3, r9
 8005944:	4640      	mov	r0, r8
 8005946:	4649      	mov	r1, r9
 8005948:	f7fa fdbe 	bl	80004c8 <__aeabi_dmul>
 800594c:	2200      	movs	r2, #0
 800594e:	4b66      	ldr	r3, [pc, #408]	; (8005ae8 <__ieee754_pow+0x748>)
 8005950:	4682      	mov	sl, r0
 8005952:	468b      	mov	fp, r1
 8005954:	f7fa fc02 	bl	800015c <__adddf3>
 8005958:	4632      	mov	r2, r6
 800595a:	463b      	mov	r3, r7
 800595c:	f7fa fbfe 	bl	800015c <__adddf3>
 8005960:	2400      	movs	r4, #0
 8005962:	460d      	mov	r5, r1
 8005964:	4622      	mov	r2, r4
 8005966:	460b      	mov	r3, r1
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	f7fa fdac 	bl	80004c8 <__aeabi_dmul>
 8005970:	2200      	movs	r2, #0
 8005972:	4680      	mov	r8, r0
 8005974:	4689      	mov	r9, r1
 8005976:	4620      	mov	r0, r4
 8005978:	4629      	mov	r1, r5
 800597a:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <__ieee754_pow+0x748>)
 800597c:	f7fa fbec 	bl	8000158 <__aeabi_dsub>
 8005980:	4652      	mov	r2, sl
 8005982:	465b      	mov	r3, fp
 8005984:	f7fa fbe8 	bl	8000158 <__aeabi_dsub>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4630      	mov	r0, r6
 800598e:	4639      	mov	r1, r7
 8005990:	f7fa fbe2 	bl	8000158 <__aeabi_dsub>
 8005994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005998:	f7fa fd96 	bl	80004c8 <__aeabi_dmul>
 800599c:	4622      	mov	r2, r4
 800599e:	4606      	mov	r6, r0
 80059a0:	460f      	mov	r7, r1
 80059a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059a6:	462b      	mov	r3, r5
 80059a8:	f7fa fd8e 	bl	80004c8 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fa fbd2 	bl	800015c <__adddf3>
 80059b8:	2400      	movs	r4, #0
 80059ba:	4606      	mov	r6, r0
 80059bc:	460f      	mov	r7, r1
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4640      	mov	r0, r8
 80059c4:	4649      	mov	r1, r9
 80059c6:	f7fa fbc9 	bl	800015c <__adddf3>
 80059ca:	a33b      	add	r3, pc, #236	; (adr r3, 8005ab8 <__ieee754_pow+0x718>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	4620      	mov	r0, r4
 80059d2:	460d      	mov	r5, r1
 80059d4:	f7fa fd78 	bl	80004c8 <__aeabi_dmul>
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fa fbb8 	bl	8000158 <__aeabi_dsub>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4630      	mov	r0, r6
 80059ee:	4639      	mov	r1, r7
 80059f0:	f7fa fbb2 	bl	8000158 <__aeabi_dsub>
 80059f4:	a332      	add	r3, pc, #200	; (adr r3, 8005ac0 <__ieee754_pow+0x720>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fd65 	bl	80004c8 <__aeabi_dmul>
 80059fe:	a332      	add	r3, pc, #200	; (adr r3, 8005ac8 <__ieee754_pow+0x728>)
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	4620      	mov	r0, r4
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f7fa fd5c 	bl	80004c8 <__aeabi_dmul>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4630      	mov	r0, r6
 8005a16:	4639      	mov	r1, r7
 8005a18:	f7fa fba0 	bl	800015c <__adddf3>
 8005a1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a1e:	4b33      	ldr	r3, [pc, #204]	; (8005aec <__ieee754_pow+0x74c>)
 8005a20:	f04f 0a00 	mov.w	sl, #0
 8005a24:	4413      	add	r3, r2
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f7fa fb97 	bl	800015c <__adddf3>
 8005a2e:	4680      	mov	r8, r0
 8005a30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a32:	4689      	mov	r9, r1
 8005a34:	f7fa fcde 	bl	80003f4 <__aeabi_i2d>
 8005a38:	4604      	mov	r4, r0
 8005a3a:	460d      	mov	r5, r1
 8005a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <__ieee754_pow+0x750>)
 8005a40:	4413      	add	r3, r2
 8005a42:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005a46:	4642      	mov	r2, r8
 8005a48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	f7fa fb85 	bl	800015c <__adddf3>
 8005a52:	4632      	mov	r2, r6
 8005a54:	463b      	mov	r3, r7
 8005a56:	f7fa fb81 	bl	800015c <__adddf3>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	f7fa fb7d 	bl	800015c <__adddf3>
 8005a62:	4622      	mov	r2, r4
 8005a64:	462b      	mov	r3, r5
 8005a66:	4650      	mov	r0, sl
 8005a68:	468b      	mov	fp, r1
 8005a6a:	f7fa fb75 	bl	8000158 <__aeabi_dsub>
 8005a6e:	4632      	mov	r2, r6
 8005a70:	463b      	mov	r3, r7
 8005a72:	f7fa fb71 	bl	8000158 <__aeabi_dsub>
 8005a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a7a:	f7fa fb6d 	bl	8000158 <__aeabi_dsub>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	e60d      	b.n	80056a4 <__ieee754_pow+0x304>
 8005a88:	4a454eef 	.word	0x4a454eef
 8005a8c:	3fca7e28 	.word	0x3fca7e28
 8005a90:	93c9db65 	.word	0x93c9db65
 8005a94:	3fcd864a 	.word	0x3fcd864a
 8005a98:	a91d4101 	.word	0xa91d4101
 8005a9c:	3fd17460 	.word	0x3fd17460
 8005aa0:	518f264d 	.word	0x518f264d
 8005aa4:	3fd55555 	.word	0x3fd55555
 8005aa8:	db6fabff 	.word	0xdb6fabff
 8005aac:	3fdb6db6 	.word	0x3fdb6db6
 8005ab0:	33333303 	.word	0x33333303
 8005ab4:	3fe33333 	.word	0x3fe33333
 8005ab8:	e0000000 	.word	0xe0000000
 8005abc:	3feec709 	.word	0x3feec709
 8005ac0:	dc3a03fd 	.word	0xdc3a03fd
 8005ac4:	3feec709 	.word	0x3feec709
 8005ac8:	145b01f5 	.word	0x145b01f5
 8005acc:	be3e2fe0 	.word	0xbe3e2fe0
 8005ad0:	7ff00000 	.word	0x7ff00000
 8005ad4:	43400000 	.word	0x43400000
 8005ad8:	0003988e 	.word	0x0003988e
 8005adc:	000bb679 	.word	0x000bb679
 8005ae0:	080060e0 	.word	0x080060e0
 8005ae4:	3ff00000 	.word	0x3ff00000
 8005ae8:	40080000 	.word	0x40080000
 8005aec:	08006100 	.word	0x08006100
 8005af0:	080060f0 	.word	0x080060f0
 8005af4:	2601      	movs	r6, #1
 8005af6:	e66a      	b.n	80057ce <__ieee754_pow+0x42e>
 8005af8:	a39d      	add	r3, pc, #628	; (adr r3, 8005d70 <__ieee754_pow+0x9d0>)
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	4640      	mov	r0, r8
 8005b00:	4649      	mov	r1, r9
 8005b02:	f7fa fb2b 	bl	800015c <__adddf3>
 8005b06:	4622      	mov	r2, r4
 8005b08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	4650      	mov	r0, sl
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa fb21 	bl	8000158 <__aeabi_dsub>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b1e:	f7fa ff63 	bl	80009e8 <__aeabi_dcmpgt>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	f47f ae09 	bne.w	800573a <__ieee754_pow+0x39a>
 8005b28:	4aa3      	ldr	r2, [pc, #652]	; (8005db8 <__ieee754_pow+0xa18>)
 8005b2a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	f340 8101 	ble.w	8005d36 <__ieee754_pow+0x996>
 8005b34:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005b38:	2000      	movs	r0, #0
 8005b3a:	151b      	asrs	r3, r3, #20
 8005b3c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005b40:	fa4a f303 	asr.w	r3, sl, r3
 8005b44:	4433      	add	r3, r6
 8005b46:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005b4a:	4f9c      	ldr	r7, [pc, #624]	; (8005dbc <__ieee754_pow+0xa1c>)
 8005b4c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005b50:	4117      	asrs	r7, r2
 8005b52:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005b56:	ea23 0107 	bic.w	r1, r3, r7
 8005b5a:	f1c2 0214 	rsb	r2, r2, #20
 8005b5e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005b62:	460b      	mov	r3, r1
 8005b64:	fa4a fa02 	asr.w	sl, sl, r2
 8005b68:	2e00      	cmp	r6, #0
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	4620      	mov	r0, r4
 8005b70:	bfb8      	it	lt
 8005b72:	f1ca 0a00 	rsblt	sl, sl, #0
 8005b76:	f7fa faef 	bl	8000158 <__aeabi_dsub>
 8005b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b82:	2400      	movs	r4, #0
 8005b84:	4642      	mov	r2, r8
 8005b86:	464b      	mov	r3, r9
 8005b88:	f7fa fae8 	bl	800015c <__adddf3>
 8005b8c:	a37a      	add	r3, pc, #488	; (adr r3, 8005d78 <__ieee754_pow+0x9d8>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	4620      	mov	r0, r4
 8005b94:	460d      	mov	r5, r1
 8005b96:	f7fa fc97 	bl	80004c8 <__aeabi_dmul>
 8005b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460f      	mov	r7, r1
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f7fa fad7 	bl	8000158 <__aeabi_dsub>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	f7fa fad1 	bl	8000158 <__aeabi_dsub>
 8005bb6:	a372      	add	r3, pc, #456	; (adr r3, 8005d80 <__ieee754_pow+0x9e0>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f7fa fc84 	bl	80004c8 <__aeabi_dmul>
 8005bc0:	a371      	add	r3, pc, #452	; (adr r3, 8005d88 <__ieee754_pow+0x9e8>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	4689      	mov	r9, r1
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	f7fa fc7b 	bl	80004c8 <__aeabi_dmul>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fabf 	bl	800015c <__adddf3>
 8005bde:	4604      	mov	r4, r0
 8005be0:	460d      	mov	r5, r1
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	f7fa fab7 	bl	800015c <__adddf3>
 8005bee:	4632      	mov	r2, r6
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	4680      	mov	r8, r0
 8005bf4:	4689      	mov	r9, r1
 8005bf6:	f7fa faaf 	bl	8000158 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa faa9 	bl	8000158 <__aeabi_dsub>
 8005c06:	4642      	mov	r2, r8
 8005c08:	4606      	mov	r6, r0
 8005c0a:	460f      	mov	r7, r1
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa fc59 	bl	80004c8 <__aeabi_dmul>
 8005c16:	a35e      	add	r3, pc, #376	; (adr r3, 8005d90 <__ieee754_pow+0x9f0>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	460d      	mov	r5, r1
 8005c20:	f7fa fc52 	bl	80004c8 <__aeabi_dmul>
 8005c24:	a35c      	add	r3, pc, #368	; (adr r3, 8005d98 <__ieee754_pow+0x9f8>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fa95 	bl	8000158 <__aeabi_dsub>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	f7fa fc49 	bl	80004c8 <__aeabi_dmul>
 8005c36:	a35a      	add	r3, pc, #360	; (adr r3, 8005da0 <__ieee754_pow+0xa00>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fa8e 	bl	800015c <__adddf3>
 8005c40:	4622      	mov	r2, r4
 8005c42:	462b      	mov	r3, r5
 8005c44:	f7fa fc40 	bl	80004c8 <__aeabi_dmul>
 8005c48:	a357      	add	r3, pc, #348	; (adr r3, 8005da8 <__ieee754_pow+0xa08>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa fa83 	bl	8000158 <__aeabi_dsub>
 8005c52:	4622      	mov	r2, r4
 8005c54:	462b      	mov	r3, r5
 8005c56:	f7fa fc37 	bl	80004c8 <__aeabi_dmul>
 8005c5a:	a355      	add	r3, pc, #340	; (adr r3, 8005db0 <__ieee754_pow+0xa10>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fa7c 	bl	800015c <__adddf3>
 8005c64:	4622      	mov	r2, r4
 8005c66:	462b      	mov	r3, r5
 8005c68:	f7fa fc2e 	bl	80004c8 <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4640      	mov	r0, r8
 8005c72:	4649      	mov	r1, r9
 8005c74:	f7fa fa70 	bl	8000158 <__aeabi_dsub>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	460d      	mov	r5, r1
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f7fa fc20 	bl	80004c8 <__aeabi_dmul>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa fa5f 	bl	8000158 <__aeabi_dsub>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca2:	f7fa fd3b 	bl	800071c <__aeabi_ddiv>
 8005ca6:	4632      	mov	r2, r6
 8005ca8:	4604      	mov	r4, r0
 8005caa:	460d      	mov	r5, r1
 8005cac:	463b      	mov	r3, r7
 8005cae:	4640      	mov	r0, r8
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	f7fa fc09 	bl	80004c8 <__aeabi_dmul>
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	463b      	mov	r3, r7
 8005cba:	f7fa fa4f 	bl	800015c <__adddf3>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f7fa fa47 	bl	8000158 <__aeabi_dsub>
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	f7fa fa43 	bl	8000158 <__aeabi_dsub>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	4939      	ldr	r1, [pc, #228]	; (8005dc0 <__ieee754_pow+0xa20>)
 8005cda:	f7fa fa3d 	bl	8000158 <__aeabi_dsub>
 8005cde:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005ce2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005ce6:	da29      	bge.n	8005d3c <__ieee754_pow+0x99c>
 8005ce8:	4652      	mov	r2, sl
 8005cea:	f000 f955 	bl	8005f98 <scalbn>
 8005cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cf2:	f7ff bbfe 	b.w	80054f2 <__ieee754_pow+0x152>
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <__ieee754_pow+0xa24>)
 8005cf8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005cfc:	429f      	cmp	r7, r3
 8005cfe:	f77f af13 	ble.w	8005b28 <__ieee754_pow+0x788>
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <__ieee754_pow+0xa28>)
 8005d04:	440b      	add	r3, r1
 8005d06:	4303      	orrs	r3, r0
 8005d08:	d009      	beq.n	8005d1e <__ieee754_pow+0x97e>
 8005d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f7fa fe4b 	bl	80009ac <__aeabi_dcmplt>
 8005d16:	3800      	subs	r0, #0
 8005d18:	bf18      	it	ne
 8005d1a:	2001      	movne	r0, #1
 8005d1c:	e453      	b.n	80055c6 <__ieee754_pow+0x226>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f7fa fa19 	bl	8000158 <__aeabi_dsub>
 8005d26:	4642      	mov	r2, r8
 8005d28:	464b      	mov	r3, r9
 8005d2a:	f7fa fe53 	bl	80009d4 <__aeabi_dcmpge>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f43f aefa 	beq.w	8005b28 <__ieee754_pow+0x788>
 8005d34:	e7e9      	b.n	8005d0a <__ieee754_pow+0x96a>
 8005d36:	f04f 0a00 	mov.w	sl, #0
 8005d3a:	e720      	b.n	8005b7e <__ieee754_pow+0x7de>
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	e7d6      	b.n	8005cee <__ieee754_pow+0x94e>
 8005d40:	f04f 0b00 	mov.w	fp, #0
 8005d44:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005dc0 <__ieee754_pow+0xa20>
 8005d48:	f7ff bbba 	b.w	80054c0 <__ieee754_pow+0x120>
 8005d4c:	f04f 0b00 	mov.w	fp, #0
 8005d50:	f04f 0c00 	mov.w	ip, #0
 8005d54:	f7ff bbb4 	b.w	80054c0 <__ieee754_pow+0x120>
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	f7ff bb3d 	b.w	80053da <__ieee754_pow+0x3a>
 8005d60:	9200      	str	r2, [sp, #0]
 8005d62:	f7ff bb89 	b.w	8005478 <__ieee754_pow+0xd8>
 8005d66:	2300      	movs	r3, #0
 8005d68:	f7ff bb73 	b.w	8005452 <__ieee754_pow+0xb2>
 8005d6c:	f3af 8000 	nop.w
 8005d70:	652b82fe 	.word	0x652b82fe
 8005d74:	3c971547 	.word	0x3c971547
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	3fe62e43 	.word	0x3fe62e43
 8005d80:	fefa39ef 	.word	0xfefa39ef
 8005d84:	3fe62e42 	.word	0x3fe62e42
 8005d88:	0ca86c39 	.word	0x0ca86c39
 8005d8c:	be205c61 	.word	0xbe205c61
 8005d90:	72bea4d0 	.word	0x72bea4d0
 8005d94:	3e663769 	.word	0x3e663769
 8005d98:	c5d26bf1 	.word	0xc5d26bf1
 8005d9c:	3ebbbd41 	.word	0x3ebbbd41
 8005da0:	af25de2c 	.word	0xaf25de2c
 8005da4:	3f11566a 	.word	0x3f11566a
 8005da8:	16bebd93 	.word	0x16bebd93
 8005dac:	3f66c16c 	.word	0x3f66c16c
 8005db0:	5555553e 	.word	0x5555553e
 8005db4:	3fc55555 	.word	0x3fc55555
 8005db8:	3fe00000 	.word	0x3fe00000
 8005dbc:	000fffff 	.word	0x000fffff
 8005dc0:	3ff00000 	.word	0x3ff00000
 8005dc4:	4090cbff 	.word	0x4090cbff
 8005dc8:	3f6f3400 	.word	0x3f6f3400

08005dcc <__ieee754_sqrt>:
 8005dcc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005f28 <__ieee754_sqrt+0x15c>
 8005dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd4:	ea3c 0c01 	bics.w	ip, ip, r1
 8005dd8:	4606      	mov	r6, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	460c      	mov	r4, r1
 8005dde:	460a      	mov	r2, r1
 8005de0:	4607      	mov	r7, r0
 8005de2:	4603      	mov	r3, r0
 8005de4:	d10f      	bne.n	8005e06 <__ieee754_sqrt+0x3a>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	f7fa fb6d 	bl	80004c8 <__aeabi_dmul>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4630      	mov	r0, r6
 8005df4:	4629      	mov	r1, r5
 8005df6:	f7fa f9b1 	bl	800015c <__adddf3>
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	4630      	mov	r0, r6
 8005e00:	4629      	mov	r1, r5
 8005e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e06:	2900      	cmp	r1, #0
 8005e08:	dc0e      	bgt.n	8005e28 <__ieee754_sqrt+0x5c>
 8005e0a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005e0e:	ea5c 0707 	orrs.w	r7, ip, r7
 8005e12:	d0f4      	beq.n	8005dfe <__ieee754_sqrt+0x32>
 8005e14:	b141      	cbz	r1, 8005e28 <__ieee754_sqrt+0x5c>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	f7fa f99d 	bl	8000158 <__aeabi_dsub>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	f7fa fc7b 	bl	800071c <__aeabi_ddiv>
 8005e26:	e7e8      	b.n	8005dfa <__ieee754_sqrt+0x2e>
 8005e28:	1521      	asrs	r1, r4, #20
 8005e2a:	d075      	beq.n	8005f18 <__ieee754_sqrt+0x14c>
 8005e2c:	07cc      	lsls	r4, r1, #31
 8005e2e:	f04f 0400 	mov.w	r4, #0
 8005e32:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005e36:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8005e3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e3e:	bf5e      	ittt	pl
 8005e40:	0fd9      	lsrpl	r1, r3, #31
 8005e42:	005b      	lslpl	r3, r3, #1
 8005e44:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005e48:	0fd9      	lsrs	r1, r3, #31
 8005e4a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005e4e:	2516      	movs	r5, #22
 8005e50:	4620      	mov	r0, r4
 8005e52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e56:	107f      	asrs	r7, r7, #1
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	1846      	adds	r6, r0, r1
 8005e5c:	4296      	cmp	r6, r2
 8005e5e:	bfde      	ittt	le
 8005e60:	1b92      	suble	r2, r2, r6
 8005e62:	1870      	addle	r0, r6, r1
 8005e64:	1864      	addle	r4, r4, r1
 8005e66:	0052      	lsls	r2, r2, #1
 8005e68:	3d01      	subs	r5, #1
 8005e6a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005e6e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005e72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e76:	d1f0      	bne.n	8005e5a <__ieee754_sqrt+0x8e>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f04f 0e20 	mov.w	lr, #32
 8005e7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e82:	4282      	cmp	r2, r0
 8005e84:	eb06 0c05 	add.w	ip, r6, r5
 8005e88:	dc02      	bgt.n	8005e90 <__ieee754_sqrt+0xc4>
 8005e8a:	d113      	bne.n	8005eb4 <__ieee754_sqrt+0xe8>
 8005e8c:	459c      	cmp	ip, r3
 8005e8e:	d811      	bhi.n	8005eb4 <__ieee754_sqrt+0xe8>
 8005e90:	f1bc 0f00 	cmp.w	ip, #0
 8005e94:	eb0c 0506 	add.w	r5, ip, r6
 8005e98:	da43      	bge.n	8005f22 <__ieee754_sqrt+0x156>
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	db41      	blt.n	8005f22 <__ieee754_sqrt+0x156>
 8005e9e:	f100 0801 	add.w	r8, r0, #1
 8005ea2:	1a12      	subs	r2, r2, r0
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	459c      	cmp	ip, r3
 8005ea8:	bf88      	it	hi
 8005eaa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005eae:	eba3 030c 	sub.w	r3, r3, ip
 8005eb2:	4431      	add	r1, r6
 8005eb4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005eb8:	f1be 0e01 	subs.w	lr, lr, #1
 8005ebc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ec4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005ec8:	d1db      	bne.n	8005e82 <__ieee754_sqrt+0xb6>
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d006      	beq.n	8005edc <__ieee754_sqrt+0x110>
 8005ece:	1c48      	adds	r0, r1, #1
 8005ed0:	bf0b      	itete	eq
 8005ed2:	4671      	moveq	r1, lr
 8005ed4:	3101      	addne	r1, #1
 8005ed6:	3401      	addeq	r4, #1
 8005ed8:	f021 0101 	bicne.w	r1, r1, #1
 8005edc:	1063      	asrs	r3, r4, #1
 8005ede:	0849      	lsrs	r1, r1, #1
 8005ee0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005ee4:	07e2      	lsls	r2, r4, #31
 8005ee6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005eea:	bf48      	it	mi
 8005eec:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005ef6:	e782      	b.n	8005dfe <__ieee754_sqrt+0x32>
 8005ef8:	0ada      	lsrs	r2, r3, #11
 8005efa:	3815      	subs	r0, #21
 8005efc:	055b      	lsls	r3, r3, #21
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d0fa      	beq.n	8005ef8 <__ieee754_sqrt+0x12c>
 8005f02:	02d5      	lsls	r5, r2, #11
 8005f04:	d50a      	bpl.n	8005f1c <__ieee754_sqrt+0x150>
 8005f06:	f1c1 0420 	rsb	r4, r1, #32
 8005f0a:	fa23 f404 	lsr.w	r4, r3, r4
 8005f0e:	1e4d      	subs	r5, r1, #1
 8005f10:	408b      	lsls	r3, r1
 8005f12:	4322      	orrs	r2, r4
 8005f14:	1b41      	subs	r1, r0, r5
 8005f16:	e789      	b.n	8005e2c <__ieee754_sqrt+0x60>
 8005f18:	4608      	mov	r0, r1
 8005f1a:	e7f0      	b.n	8005efe <__ieee754_sqrt+0x132>
 8005f1c:	0052      	lsls	r2, r2, #1
 8005f1e:	3101      	adds	r1, #1
 8005f20:	e7ef      	b.n	8005f02 <__ieee754_sqrt+0x136>
 8005f22:	4680      	mov	r8, r0
 8005f24:	e7bd      	b.n	8005ea2 <__ieee754_sqrt+0xd6>
 8005f26:	bf00      	nop
 8005f28:	7ff00000 	.word	0x7ff00000

08005f2c <with_errno>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	4616      	mov	r6, r2
 8005f34:	f7ff f998 	bl	8005268 <__errno>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	6006      	str	r6, [r0, #0]
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}

08005f40 <xflow>:
 8005f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f42:	4615      	mov	r5, r2
 8005f44:	461c      	mov	r4, r3
 8005f46:	b180      	cbz	r0, 8005f6a <xflow+0x2a>
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005f4e:	e9cd 0100 	strd	r0, r1, [sp]
 8005f52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f56:	4628      	mov	r0, r5
 8005f58:	4621      	mov	r1, r4
 8005f5a:	f7fa fab5 	bl	80004c8 <__aeabi_dmul>
 8005f5e:	2222      	movs	r2, #34	; 0x22
 8005f60:	b003      	add	sp, #12
 8005f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f66:	f7ff bfe1 	b.w	8005f2c <with_errno>
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	e7ee      	b.n	8005f4e <xflow+0xe>

08005f70 <__math_uflow>:
 8005f70:	2200      	movs	r2, #0
 8005f72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f76:	f7ff bfe3 	b.w	8005f40 <xflow>

08005f7a <__math_oflow>:
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f80:	f7ff bfde 	b.w	8005f40 <xflow>

08005f84 <fabs>:
 8005f84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005f88:	4770      	bx	lr

08005f8a <finite>:
 8005f8a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005f8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005f92:	0fc0      	lsrs	r0, r0, #31
 8005f94:	4770      	bx	lr
	...

08005f98 <scalbn>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	4617      	mov	r7, r2
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	b996      	cbnz	r6, 8005fce <scalbn+0x36>
 8005fa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fac:	4303      	orrs	r3, r0
 8005fae:	d039      	beq.n	8006024 <scalbn+0x8c>
 8005fb0:	4b33      	ldr	r3, [pc, #204]	; (8006080 <scalbn+0xe8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f7fa fa88 	bl	80004c8 <__aeabi_dmul>
 8005fb8:	4b32      	ldr	r3, [pc, #200]	; (8006084 <scalbn+0xec>)
 8005fba:	4604      	mov	r4, r0
 8005fbc:	429f      	cmp	r7, r3
 8005fbe:	460d      	mov	r5, r1
 8005fc0:	da0f      	bge.n	8005fe2 <scalbn+0x4a>
 8005fc2:	a32b      	add	r3, pc, #172	; (adr r3, 8006070 <scalbn+0xd8>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa fa7e 	bl	80004c8 <__aeabi_dmul>
 8005fcc:	e006      	b.n	8005fdc <scalbn+0x44>
 8005fce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005fd2:	4296      	cmp	r6, r2
 8005fd4:	d10a      	bne.n	8005fec <scalbn+0x54>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	f7fa f8c0 	bl	800015c <__adddf3>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	460d      	mov	r5, r1
 8005fe0:	e020      	b.n	8006024 <scalbn+0x8c>
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005fe8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005fec:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005ff0:	19b9      	adds	r1, r7, r6
 8005ff2:	4291      	cmp	r1, r2
 8005ff4:	dd0e      	ble.n	8006014 <scalbn+0x7c>
 8005ff6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005ffa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005ffe:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006002:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006006:	4820      	ldr	r0, [pc, #128]	; (8006088 <scalbn+0xf0>)
 8006008:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800600c:	a31a      	add	r3, pc, #104	; (adr r3, 8006078 <scalbn+0xe0>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	e7d9      	b.n	8005fc8 <scalbn+0x30>
 8006014:	2900      	cmp	r1, #0
 8006016:	dd08      	ble.n	800602a <scalbn+0x92>
 8006018:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800601c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006020:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800602e:	da12      	bge.n	8006056 <scalbn+0xbe>
 8006030:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006034:	429f      	cmp	r7, r3
 8006036:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800603a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800603e:	dcdc      	bgt.n	8005ffa <scalbn+0x62>
 8006040:	a30b      	add	r3, pc, #44	; (adr r3, 8006070 <scalbn+0xd8>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800604a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800604e:	480f      	ldr	r0, [pc, #60]	; (800608c <scalbn+0xf4>)
 8006050:	f041 011f 	orr.w	r1, r1, #31
 8006054:	e7b8      	b.n	8005fc8 <scalbn+0x30>
 8006056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800605a:	3136      	adds	r1, #54	; 0x36
 800605c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006060:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006064:	4620      	mov	r0, r4
 8006066:	4629      	mov	r1, r5
 8006068:	2200      	movs	r2, #0
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <scalbn+0xf8>)
 800606c:	e7ac      	b.n	8005fc8 <scalbn+0x30>
 800606e:	bf00      	nop
 8006070:	c2f8f359 	.word	0xc2f8f359
 8006074:	01a56e1f 	.word	0x01a56e1f
 8006078:	8800759c 	.word	0x8800759c
 800607c:	7e37e43c 	.word	0x7e37e43c
 8006080:	43500000 	.word	0x43500000
 8006084:	ffff3cb0 	.word	0xffff3cb0
 8006088:	8800759c 	.word	0x8800759c
 800608c:	c2f8f359 	.word	0xc2f8f359
 8006090:	3c900000 	.word	0x3c900000

08006094 <_init>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	bf00      	nop
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr

080060a0 <_fini>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr
