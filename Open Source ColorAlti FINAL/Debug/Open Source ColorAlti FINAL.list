
Open Source ColorAlti FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006df0  08006df0  00016df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ff8  08006ff8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ff8  08006ff8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  2000000c  0800700c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800700c  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db95  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235b  00000000  00000000  0002dbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00030ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001818b  00000000  00000000  000319a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010def  00000000  00000000  00049b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a73a  00000000  00000000  0005a922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e505c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  000e50ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dd4 	.word	0x08006dd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08006dd4 	.word	0x08006dd4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_f2uiz>:
 8000fe8:	0042      	lsls	r2, r0, #1
 8000fea:	d20e      	bcs.n	800100a <__aeabi_f2uiz+0x22>
 8000fec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ff0:	d30b      	bcc.n	800100a <__aeabi_f2uiz+0x22>
 8000ff2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffa:	d409      	bmi.n	8001010 <__aeabi_f2uiz+0x28>
 8000ffc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2uiz+0x32>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d102      	bne.n	8001020 <__aeabi_f2uiz+0x38>
 800101a:	f04f 30ff 	mov.w	r0, #4294967295
 800101e:	4770      	bx	lr
 8001020:	f04f 0000 	mov.w	r0, #0
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <LPS_Init>:
#include "LPS22HB.h"

struct LPS_CONFIG lpsConfig;

uint8_t LPS_Init(I2C_HandleTypeDef* i2c_config, uint16_t address)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f001 fb04 	bl	8002644 <HAL_Delay>
	lpsConfig.i2c_config = i2c_config;
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <LPS_Init+0x64>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
	lpsConfig.address = address;
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <LPS_Init+0x64>)
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	8093      	strh	r3, [r2, #4]

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 8001048:	2305      	movs	r3, #5
 800104a:	2203      	movs	r2, #3
 800104c:	21b8      	movs	r1, #184	; 0xb8
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f002 fcd2 	bl	80039f8 <HAL_I2C_IsDeviceReady>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
	if(i2c_status == HAL_BUSY) {
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d101      	bne.n	8001062 <LPS_Init+0x3a>
		return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e00f      	b.n	8001082 <LPS_Init+0x5a>
	}

	//Set the ouptut data rate (odr)
	LPS_Set_Odr(ODR_75hz);
 8001062:	2005      	movs	r0, #5
 8001064:	f000 f832 	bl	80010cc <LPS_Set_Odr>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = LPS_Get_Odr();
 8001068:	f000 f862 	bl	8001130 <LPS_Get_Odr>
 800106c:	4603      	mov	r3, r0
 800106e:	73bb      	strb	r3, [r7, #14]
	if(odr != ODR_75hz) {
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	2b05      	cmp	r3, #5
 8001074:	d001      	beq.n	800107a <LPS_Init+0x52>
		return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e003      	b.n	8001082 <LPS_Init+0x5a>
	}

	//Set FIFO mode to BYPASS
	LPS_Configure_Fifo(BYPASS);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f86a 	bl	8001154 <LPS_Configure_Fifo>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000028 	.word	0x20000028

08001090 <LPS_Reg_Read>:

void LPS_Reg_Read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
 8001096:	4603      	mov	r3, r0
 8001098:	603a      	str	r2, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	460b      	mov	r3, r1
 800109e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), reg_addr, 1, data_output, reg_size, 100);
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <LPS_Reg_Read+0x38>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <LPS_Reg_Read+0x38>)
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	b299      	uxth	r1, r3
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	f002 fa34 	bl	8003528 <HAL_I2C_Mem_Read>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000028 	.word	0x20000028

080010cc <LPS_Set_Odr>:

//Configures the output data rate (ODR)
void LPS_Set_Odr(enum LPS_ODR new_odr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	461a      	mov	r2, r3
 80010dc:	2101      	movs	r1, #1
 80010de:	2010      	movs	r0, #16
 80010e0:	f7ff ffd6 	bl	8001090 <LPS_Reg_Read>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 80010ee:	7a3b      	ldrb	r3, [r7, #8]
 80010f0:	b25a      	sxtb	r2, r3
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <LPS_Set_Odr+0x60>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <LPS_Set_Odr+0x60>)
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	b299      	uxth	r1, r3
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2210      	movs	r2, #16
 800111e:	f002 f909 	bl	8003334 <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000028 	.word	0x20000028

08001130 <LPS_Get_Odr>:

//Reads the sensors odr
enum LPS_ODR LPS_Get_Odr()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	461a      	mov	r2, r3
 800113a:	2101      	movs	r1, #1
 800113c:	2010      	movs	r0, #16
 800113e:	f7ff ffa7 	bl	8001090 <LPS_Reg_Read>
	uint8_t odr_code = (existingConfig[0] >> 4);
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	71fb      	strb	r3, [r7, #7]

	return odr_code;
 8001148:	79fb      	ldrb	r3, [r7, #7]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <LPS_Configure_Fifo>:

//Configures the FIFO for the desired mode
void LPS_Configure_Fifo(enum LPS_FIFO desiredFifo)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af04      	add	r7, sp, #16
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d11d      	bne.n	80011a0 <LPS_Configure_Fifo+0x4c>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	LPS_Reg_Read(FIFO_CTRL, 1, existingConfig);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	461a      	mov	r2, r3
 800116a:	2101      	movs	r1, #1
 800116c:	2014      	movs	r0, #20
 800116e:	f7ff ff8f 	bl	8001090 <LPS_Reg_Read>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 8001172:	7b3b      	ldrb	r3, [r7, #12]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	b2db      	uxtb	r3, r3
 800117a:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t) (lpsConfig.address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <LPS_Configure_Fifo+0x54>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <LPS_Configure_Fifo+0x54>)
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	b299      	uxth	r1, r3
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	2214      	movs	r2, #20
 800119a:	f002 f8cb 	bl	8003334 <HAL_I2C_Mem_Write>
 800119e:	e000      	b.n	80011a2 <LPS_Configure_Fifo+0x4e>
		return;
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000028 	.word	0x20000028

080011ac <LPS_Get_Pressure>:

//Returns the pressure read by the sensor in HPA
double LPS_Get_Pressure()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 4096.0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <LPS_Get_Pressure+0x64>)
 80011b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	LPS_Reg_Read(PRESS_OUT_H, 1, press_out_h);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	461a      	mov	r2, r3
 80011c2:	2101      	movs	r1, #1
 80011c4:	202a      	movs	r0, #42	; 0x2a
 80011c6:	f7ff ff63 	bl	8001090 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_L, 1, press_out_l);
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	461a      	mov	r2, r3
 80011ce:	2101      	movs	r1, #1
 80011d0:	2029      	movs	r0, #41	; 0x29
 80011d2:	f7ff ff5d 	bl	8001090 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_XL, 1, press_out_xl);
 80011d6:	463b      	mov	r3, r7
 80011d8:	461a      	mov	r2, r3
 80011da:	2101      	movs	r1, #1
 80011dc:	2028      	movs	r0, #40	; 0x28
 80011de:	f7ff ff57 	bl	8001090 <LPS_Reg_Read>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 80011e2:	7a3b      	ldrb	r3, [r7, #8]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	793b      	ldrb	r3, [r7, #4]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	4413      	add	r3, r2
 80011ec:	783a      	ldrb	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]

	return pressure / SCALING_FACTOR;
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff f8ee 	bl	80003d4 <__aeabi_ui2d>
 80011f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011fc:	f7ff fa8e 	bl	800071c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
}
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40b00000 	.word	0x40b00000

08001214 <LPS_Get_Temp>:

//Returns the temperature read by the sensor in C
double LPS_Get_Temp()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 100.0;
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <LPS_Get_Temp+0x50>)
 8001220:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

	LPS_Reg_Read(TEMP_OUT_H, 1, temp_out_h);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	461a      	mov	r2, r3
 800122a:	2101      	movs	r1, #1
 800122c:	202c      	movs	r0, #44	; 0x2c
 800122e:	f7ff ff2f 	bl	8001090 <LPS_Reg_Read>
	LPS_Reg_Read(TEMP_OUT_L, 1, temp_out_l);
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	461a      	mov	r2, r3
 8001236:	2101      	movs	r1, #1
 8001238:	202b      	movs	r0, #43	; 0x2b
 800123a:	f7ff ff29 	bl	8001090 <LPS_Reg_Read>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 800123e:	7a3b      	ldrb	r3, [r7, #8]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	793a      	ldrb	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

	return temperature / SCALING_FACTOR;
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff f8c3 	bl	80003d4 <__aeabi_ui2d>
 800124e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001252:	f7ff fa63 	bl	800071c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
}
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40590000 	.word	0x40590000

08001268 <LPS_Get_TempF>:

double LPS_Get_TempF()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	double tempC = LPS_Get_Temp();
 800126e:	f7ff ffd1 	bl	8001214 <LPS_Get_Temp>
 8001272:	e9c7 0100 	strd	r0, r1, [r7]
	return (tempC * (9/5.0)) + 32;
 8001276:	a30c      	add	r3, pc, #48	; (adr r3, 80012a8 <LPS_Get_TempF+0x40>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001280:	f7ff f922 	bl	80004c8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <LPS_Get_TempF+0x48>)
 8001292:	f7fe ff63 	bl	800015c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
}
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	f3af 8000 	nop.w
 80012a8:	cccccccd 	.word	0xcccccccd
 80012ac:	3ffccccc 	.word	0x3ffccccc
 80012b0:	40400000 	.word	0x40400000

080012b4 <Altimex_displayLeds>:

uint32_t standbyLastFlash = 0;
uint32_t lastLedTurnonTime = 0;

void Altimex_displayLeds(enum AltimexState state, uint16_t step, struct AltimexConfig* config, uint16_t alt)
{
 80012b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b8:	b08a      	sub	sp, #40	; 0x28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60ba      	str	r2, [r7, #8]
 80012be:	461a      	mov	r2, r3
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	460b      	mov	r3, r1
 80012c6:	81bb      	strh	r3, [r7, #12]
 80012c8:	4613      	mov	r3, r2
 80012ca:	80fb      	strh	r3, [r7, #6]
	//Periodically flashes ot show that the device is on
	if(state == ALTIMEX_STANDBY)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d152      	bne.n	8001378 <Altimex_displayLeds+0xc4>
	{
		uint32_t standbyFlashLength = config->standbyFlashOnLength + config->standbyFlashOffLength;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4413      	add	r3, r2
 80012dc:	623b      	str	r3, [r7, #32]
		Set_Brightness(config->standbyBrightness);
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fc23 	bl	8001b30 <Set_Brightness>

		//If board has just been turned on
		if(standbyLastFlash == 0 && HAL_GetTick() < 3000)
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <Altimex_displayLeds+0xbc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11d      	bne.n	800132e <Altimex_displayLeds+0x7a>
 80012f2:	f001 f99d 	bl	8002630 <HAL_GetTick>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d816      	bhi.n	800132e <Altimex_displayLeds+0x7a>
		{
			uint8_t on = (step) % 2 == 0;
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	77fb      	strb	r3, [r7, #31]
			uint8_t leds = on * config->numLeds;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131a:	7ffa      	ldrb	r2, [r7, #31]
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	77bb      	strb	r3, [r7, #30]
			Strip_Progress_Bar_Single_Color(leds, PURPLE);
 8001322:	7fbb      	ldrb	r3, [r7, #30]
 8001324:	2103      	movs	r1, #3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fb93 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
		{
 800132c:	e024      	b.n	8001378 <Altimex_displayLeds+0xc4>
		}
		else {
			//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
			if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 800132e:	f001 f97f 	bl	8002630 <HAL_GetTick>
 8001332:	4601      	mov	r1, r0
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <Altimex_displayLeds+0xbc>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	4413      	add	r3, r2
 800133c:	4299      	cmp	r1, r3
 800133e:	d905      	bls.n	800134c <Altimex_displayLeds+0x98>
				standbyLastFlash = HAL_GetTick();
 8001340:	f001 f976 	bl	8002630 <HAL_GetTick>
 8001344:	4603      	mov	r3, r0
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <Altimex_displayLeds+0xbc>)
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e015      	b.n	8001378 <Altimex_displayLeds+0xc4>
			}
			else
			{
				//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
				if(standbyLastFlash + config->standbyFlashOffLength < HAL_GetTick())
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	69da      	ldr	r2, [r3, #28]
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <Altimex_displayLeds+0xbc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	18d4      	adds	r4, r2, r3
 8001356:	f001 f96b 	bl	8002630 <HAL_GetTick>
 800135a:	4603      	mov	r3, r0
 800135c:	429c      	cmp	r4, r3
 800135e:	d209      	bcs.n	8001374 <Altimex_displayLeds+0xc0>
				{
					Strip_Progress_Bar_Single_Color(config->numLeds, GREEN);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fb72 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
 800136e:	e003      	b.n	8001378 <Altimex_displayLeds+0xc4>
 8001370:	20000030 	.word	0x20000030
				}
				else
				{
					Strip_Clear();
 8001374:	f000 fb91 	bl	8001a9a <Strip_Clear>
			}
		}
	}

	//Led bar with top led flashing. Full when at gear check altitude
	if(state == ALTIMEX_ASCENT)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d153      	bne.n	8001426 <Altimex_displayLeds+0x172>
	{
		Set_Brightness(config->brightness);
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fbd3 	bl	8001b30 <Set_Brightness>
		uint8_t flash = (step / 5) % 2 == 0;
 800138a:	89bb      	ldrh	r3, [r7, #12]
 800138c:	4abc      	ldr	r2, [pc, #752]	; (8001680 <Altimex_displayLeds+0x3cc>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	b29b      	uxth	r3, r3
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf0c      	ite	eq
 80013a0:	2301      	moveq	r3, #1
 80013a2:	2300      	movne	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	777b      	strb	r3, [r7, #29]
		uint8_t i = (config->numLeds * (alt / (double)config->gearCheckAlt)) + 1;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f820 	bl	80003f4 <__aeabi_i2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f81a 	bl	80003f4 <__aeabi_i2d>
 80013c0:	4680      	mov	r8, r0
 80013c2:	4689      	mov	r9, r1
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f803 	bl	80003d4 <__aeabi_ui2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4640      	mov	r0, r8
 80013d4:	4649      	mov	r1, r9
 80013d6:	f7ff f9a1 	bl	800071c <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4620      	mov	r0, r4
 80013e0:	4629      	mov	r1, r5
 80013e2:	f7ff f871 	bl	80004c8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	4ba4      	ldr	r3, [pc, #656]	; (8001684 <Altimex_displayLeds+0x3d0>)
 80013f4:	f7fe feb2 	bl	800015c <__adddf3>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb24 	bl	8000a4c <__aeabi_d2uiz>
 8001404:	4603      	mov	r3, r0
 8001406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(flash) i++;
 800140a:	7f7b      	ldrb	r3, [r7, #29]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <Altimex_displayLeds+0x166>
 8001410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001414:	3301      	adds	r3, #1
 8001416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Strip_Progress_Bar_Single_Color(i, GREEN);
 800141a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fb16 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_GEARCHECK)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d122      	bne.n	8001472 <Altimex_displayLeds+0x1be>
	{
		Set_Brightness(config->brightness);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fb7c 	bl	8001b30 <Set_Brightness>
		uint8_t flash = (step / 7) % 2 == 0;
 8001438:	89ba      	ldrh	r2, [r7, #12]
 800143a:	4b93      	ldr	r3, [pc, #588]	; (8001688 <Altimex_displayLeds+0x3d4>)
 800143c:	fba3 1302 	umull	r1, r3, r3, r2
 8001440:	1ad2      	subs	r2, r2, r3
 8001442:	0852      	lsrs	r2, r2, #1
 8001444:	4413      	add	r3, r2
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	b29b      	uxth	r3, r3
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	773b      	strb	r3, [r7, #28]
		Strip_Progress_Bar_Single_Color(flash * config->numLeds, GREEN);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001462:	7f3a      	ldrb	r2, [r7, #28]
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f000 faf0 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//Solid blue while awaiting jump
	if(state == ALTIMEX_DETECT_FREEFALL_START)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d10c      	bne.n	8001492 <Altimex_displayLeds+0x1de>
	{
		Set_Brightness(config->brightness);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fb56 	bl	8001b30 <Set_Brightness>
		Strip_Progress_Bar_Single_Color(config->numLeds, SKYBLUE);
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148a:	2104      	movs	r1, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fae0 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching breakoff altitude + 1500ft
	if(state == ALTIMEX_FREEFALL)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d13e      	bne.n	8001516 <Altimex_displayLeds+0x262>
	{
		Set_Brightness(config->brightness);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fb46 	bl	8001b30 <Set_Brightness>
		uint8_t leds = (config->numLeds) * (1-(float)(alt - (config->breakoff + 1500)) / (config->exit - (config->breakoff + 1500)));
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fbf8 	bl	8000ca0 <__aeabi_i2f>
 80014b0:	4604      	mov	r4, r0
 80014b2:	88fa      	ldrh	r2, [r7, #6]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	8a5b      	ldrh	r3, [r3, #18]
 80014b8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fbee 	bl	8000ca0 <__aeabi_i2f>
 80014c4:	4605      	mov	r5, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	8a1b      	ldrh	r3, [r3, #16]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	8a5b      	ldrh	r3, [r3, #18]
 80014d0:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fbe2 	bl	8000ca0 <__aeabi_i2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	4628      	mov	r0, r5
 80014e2:	f7ff fce5 	bl	8000eb0 <__aeabi_fdiv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014ee:	f7ff fb21 	bl	8000b34 <__aeabi_fsub>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fc26 	bl	8000d48 <__aeabi_fmul>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd72 	bl	8000fe8 <__aeabi_f2uiz>
 8001504:	4603      	mov	r3, r0
 8001506:	76fb      	strb	r3, [r7, #27]
		Strip_Progress_Bar_Single_Color(leds + 1, SKYBLUE);
 8001508:	7efb      	ldrb	r3, [r7, #27]
 800150a:	3301      	adds	r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2104      	movs	r1, #4
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fa9e 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching breakoff altitude
	if(state == ALTIMEX_APPROACHING_BREAKOFF)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b05      	cmp	r3, #5
 800151a:	d129      	bne.n	8001570 <Altimex_displayLeds+0x2bc>
	{
		uint8_t leds = (config->numLeds + 1) * (1-(float)(alt - config->breakoff) / ((config->breakoff + 1500) - config->breakoff));
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001522:	3301      	adds	r3, #1
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbbb 	bl	8000ca0 <__aeabi_i2f>
 800152a:	4604      	mov	r4, r0
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	8a52      	ldrh	r2, [r2, #18]
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbb3 	bl	8000ca0 <__aeabi_i2f>
 800153a:	4603      	mov	r3, r0
 800153c:	4953      	ldr	r1, [pc, #332]	; (800168c <Altimex_displayLeds+0x3d8>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fcb6 	bl	8000eb0 <__aeabi_fdiv>
 8001544:	4603      	mov	r3, r0
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800154c:	f7ff faf2 	bl	8000b34 <__aeabi_fsub>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fbf7 	bl	8000d48 <__aeabi_fmul>
 800155a:	4603      	mov	r3, r0
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd43 	bl	8000fe8 <__aeabi_f2uiz>
 8001562:	4603      	mov	r3, r0
 8001564:	76bb      	strb	r3, [r7, #26]
		Strip_Progress_Bar_Single_Color(leds, GREEN);
 8001566:	7ebb      	ldrb	r3, [r7, #26]
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fa71 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_BREAKOFF)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b06      	cmp	r3, #6
 8001574:	d11b      	bne.n	80015ae <Altimex_displayLeds+0x2fa>
	{
		Set_Brightness(config->brightness);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fad7 	bl	8001b30 <Set_Brightness>
		uint8_t on = (step) % 2 == 0;
 8001582:	89bb      	ldrh	r3, [r7, #12]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	767b      	strb	r3, [r7, #25]
		uint8_t leds = on * config->numLeds;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159c:	7e7a      	ldrb	r2, [r7, #25]
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	763b      	strb	r3, [r7, #24]
		Strip_Progress_Bar_Single_Color(leds, GREEN);
 80015a4:	7e3b      	ldrb	r3, [r7, #24]
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fa52 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching deployment altitude
	if(state == ALTIMEX_TRACK)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	d12f      	bne.n	8001614 <Altimex_displayLeds+0x360>
	{
		Set_Brightness(config->brightness);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fab8 	bl	8001b30 <Set_Brightness>
		uint8_t leds = (config->numLeds + 1) * (1-(float)(alt - config->deploy) / ((config->deploy + 500) - config->deploy));
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fb69 	bl	8000ca0 <__aeabi_i2f>
 80015ce:	4604      	mov	r4, r0
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	8a92      	ldrh	r2, [r2, #20]
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fb61 	bl	8000ca0 <__aeabi_i2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	492b      	ldr	r1, [pc, #172]	; (8001690 <Altimex_displayLeds+0x3dc>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fc64 	bl	8000eb0 <__aeabi_fdiv>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015f0:	f7ff faa0 	bl	8000b34 <__aeabi_fsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fba5 	bl	8000d48 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fcf1 	bl	8000fe8 <__aeabi_f2uiz>
 8001606:	4603      	mov	r3, r0
 8001608:	75fb      	strb	r3, [r7, #23]
		Strip_Progress_Bar_Single_Color(leds, RED);
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fa1f 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//Flashes red until detects canopy deployment
	if(state == ALTIMEX_DEPLOY)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11b      	bne.n	8001652 <Altimex_displayLeds+0x39e>
	{
		Set_Brightness(config->brightness);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fa85 	bl	8001b30 <Set_Brightness>
		uint8_t on = (step) % 2 == 0;
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf0c      	ite	eq
 8001632:	2301      	moveq	r3, #1
 8001634:	2300      	movne	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	75bb      	strb	r3, [r7, #22]
		uint8_t leds = on * config->numLeds;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	7dba      	ldrb	r2, [r7, #22]
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	757b      	strb	r3, [r7, #21]
		Strip_Progress_Bar_Single_Color(leds, RED);
 8001648:	7d7b      	ldrb	r3, [r7, #21]
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fa00 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	//Flashes purple
	if(state == ALTIMEX_CANOPY)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b09      	cmp	r3, #9
 8001656:	d12d      	bne.n	80016b4 <Altimex_displayLeds+0x400>
	{
		Set_Brightness(config->brightness);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fa66 	bl	8001b30 <Set_Brightness>
		uint8_t on = (step/10) % 2 == 0;
 8001664:	89bb      	ldrh	r3, [r7, #12]
 8001666:	4a06      	ldr	r2, [pc, #24]	; (8001680 <Altimex_displayLeds+0x3cc>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	08db      	lsrs	r3, r3, #3
 800166e:	b29b      	uxth	r3, r3
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	b29b      	uxth	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf08      	it	eq
 800167a:	2301      	moveq	r3, #1
 800167c:	e00a      	b.n	8001694 <Altimex_displayLeds+0x3e0>
 800167e:	bf00      	nop
 8001680:	cccccccd 	.word	0xcccccccd
 8001684:	3ff00000 	.word	0x3ff00000
 8001688:	24924925 	.word	0x24924925
 800168c:	44bb8000 	.word	0x44bb8000
 8001690:	43fa0000 	.word	0x43fa0000
 8001694:	bf18      	it	ne
 8001696:	2300      	movne	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	753b      	strb	r3, [r7, #20]
		uint8_t leds = on * config->numLeds;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a2:	7d3a      	ldrb	r2, [r7, #20]
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	74fb      	strb	r3, [r7, #19]
		Strip_Progress_Bar_Single_Color(leds, PURPLE);
 80016aa:	7cfb      	ldrb	r3, [r7, #19]
 80016ac:	2103      	movs	r1, #3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f9cf 	bl	8001a52 <Strip_Progress_Bar_Single_Color>
	}

	Strip_Send();
 80016b4:	f000 f9f7 	bl	8001aa6 <Strip_Send>
}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016c2:	bf00      	nop

080016c4 <StateController_updateState>:
uint8_t deployTest = 0; //1 while validating deployment test
uint32_t deployTestStart = 0; //ms, the timestamp for starting to validate deployment
uint16_t deployTestStartAlt = 0; //ft, altitude at beginning of current deployment test

void StateController_updateState(struct AltimexConfig* config, uint16_t alt)
{
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
	if(StateController_currentState == ALTIMEX_STANDBY)
 80016d0:	4b9c      	ldr	r3, [pc, #624]	; (8001944 <StateController_updateState+0x280>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d12d      	bne.n	8001734 <StateController_updateState+0x70>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > config->ascentThreshold)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	887a      	ldrh	r2, [r7, #2]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d91c      	bls.n	800171c <StateController_updateState+0x58>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 80016e2:	4b99      	ldr	r3, [pc, #612]	; (8001948 <StateController_updateState+0x284>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <StateController_updateState+0x36>
			{
				testingAscent = 1;
 80016ea:	4b97      	ldr	r3, [pc, #604]	; (8001948 <StateController_updateState+0x284>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
				ascentTestStart = HAL_GetTick();
 80016f0:	f000 ff9e 	bl	8002630 <HAL_GetTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a95      	ldr	r2, [pc, #596]	; (800194c <StateController_updateState+0x288>)
 80016f8:	6013      	str	r3, [r2, #0]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 80016fa:	4b93      	ldr	r3, [pc, #588]	; (8001948 <StateController_updateState+0x284>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10c      	bne.n	800171c <StateController_updateState+0x58>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= config->ascentThresholdTime)
 8001702:	f000 ff95 	bl	8002630 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	4b90      	ldr	r3, [pc, #576]	; (800194c <StateController_updateState+0x288>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	8852      	ldrh	r2, [r2, #2]
 8001712:	4293      	cmp	r3, r2
 8001714:	d302      	bcc.n	800171c <StateController_updateState+0x58>
				{
					StateController_currentState = ALTIMEX_ASCENT;
 8001716:	4b8b      	ldr	r3, [pc, #556]	; (8001944 <StateController_updateState+0x280>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < config->ascentThreshold)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	429a      	cmp	r2, r3
 8001724:	d206      	bcs.n	8001734 <StateController_updateState+0x70>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8001726:	4b88      	ldr	r3, [pc, #544]	; (8001948 <StateController_updateState+0x284>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <StateController_updateState+0x70>
			{
				testingAscent = 0;
 800172e:	4b86      	ldr	r3, [pc, #536]	; (8001948 <StateController_updateState+0x284>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(StateController_currentState == ALTIMEX_ASCENT)
 8001734:	4b83      	ldr	r3, [pc, #524]	; (8001944 <StateController_updateState+0x280>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <StateController_updateState+0x88>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > 10000)
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001742:	4293      	cmp	r3, r2
 8001744:	d902      	bls.n	800174c <StateController_updateState+0x88>
		{
			StateController_currentState = ALTIMEX_GEARCHECK;
 8001746:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <StateController_updateState+0x280>)
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_GEARCHECK)
 800174c:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <StateController_updateState+0x280>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d126      	bne.n	80017a2 <StateController_updateState+0xde>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 8001754:	4b7e      	ldr	r3, [pc, #504]	; (8001950 <StateController_updateState+0x28c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <StateController_updateState+0xa8>
		{
			gearCheckNotificationStart = HAL_GetTick();
 800175c:	f000 ff68 	bl	8002630 <HAL_GetTick>
 8001760:	4603      	mov	r3, r0
 8001762:	4a7c      	ldr	r2, [pc, #496]	; (8001954 <StateController_updateState+0x290>)
 8001764:	6013      	str	r3, [r2, #0]
			displayedGearCheck = 1;
 8001766:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <StateController_updateState+0x28c>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck == 1 & HAL_GetTick() > gearCheckNotificationStart + config->gearCheckNotificationLength)
 800176c:	4b78      	ldr	r3, [pc, #480]	; (8001950 <StateController_updateState+0x28c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2dc      	uxtb	r4, r3
 800177a:	f000 ff59 	bl	8002630 <HAL_GetTick>
 800177e:	4601      	mov	r1, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b73      	ldr	r3, [pc, #460]	; (8001954 <StateController_updateState+0x290>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4413      	add	r3, r2
 800178a:	4299      	cmp	r1, r3
 800178c:	bf8c      	ite	hi
 800178e:	2301      	movhi	r3, #1
 8001790:	2300      	movls	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4023      	ands	r3, r4
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <StateController_updateState+0xde>
		{
			StateController_currentState = ALTIMEX_DETECT_FREEFALL_START;
 800179c:	4b69      	ldr	r3, [pc, #420]	; (8001944 <StateController_updateState+0x280>)
 800179e:	2203      	movs	r2, #3
 80017a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_DETECT_FREEFALL_START)
 80017a2:	4b68      	ldr	r3, [pc, #416]	; (8001944 <StateController_updateState+0x280>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d15f      	bne.n	800186a <StateController_updateState+0x1a6>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 80017aa:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <StateController_updateState+0x294>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d24b      	bcs.n	800184c <StateController_updateState+0x188>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 80017b4:	4b69      	ldr	r3, [pc, #420]	; (800195c <StateController_updateState+0x298>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10a      	bne.n	80017d2 <StateController_updateState+0x10e>
			{
				freefallTest = 1;
 80017bc:	4b67      	ldr	r3, [pc, #412]	; (800195c <StateController_updateState+0x298>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
				freefallTestStart = HAL_GetTick();
 80017c2:	f000 ff35 	bl	8002630 <HAL_GetTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a65      	ldr	r2, [pc, #404]	; (8001960 <StateController_updateState+0x29c>)
 80017ca:	6013      	str	r3, [r2, #0]
				freefallStartAlt = alt;
 80017cc:	4a65      	ldr	r2, [pc, #404]	; (8001964 <StateController_updateState+0x2a0>)
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	8013      	strh	r3, [r2, #0]
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + config->freefallThresholdTime)
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <StateController_updateState+0x298>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d138      	bne.n	800184c <StateController_updateState+0x188>
 80017da:	f000 ff29 	bl	8002630 <HAL_GetTick>
 80017de:	4601      	mov	r1, r0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <StateController_updateState+0x29c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	4299      	cmp	r1, r3
 80017ec:	d92e      	bls.n	800184c <StateController_updateState+0x188>
			{
				double elapsedTimeSec = (double)(HAL_GetTick() - freefallTestStart) / 1000;
 80017ee:	f000 ff1f 	bl	8002630 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <StateController_updateState+0x29c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fdea 	bl	80003d4 <__aeabi_ui2d>
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b58      	ldr	r3, [pc, #352]	; (8001968 <StateController_updateState+0x2a4>)
 8001806:	f7fe ff89 	bl	800071c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	e9c7 2308 	strd	r2, r3, [r7, #32]
				double avgSpeedFps = ((double)(freefallStartAlt - alt) / elapsedTimeSec);
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <StateController_updateState+0x2a0>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fde9 	bl	80003f4 <__aeabi_i2d>
 8001822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001826:	f7fe ff79 	bl	800071c <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	e9c7 2306 	strd	r2, r3, [r7, #24]

				//If average speed is above 80mph
				if(avgSpeedFps >= 117.0) //80mph to fps
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <StateController_updateState+0x2a8>)
 8001838:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800183c:	f7ff f8ca 	bl	80009d4 <__aeabi_dcmpge>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <StateController_updateState+0x188>
				{
					StateController_currentState = ALTIMEX_FREEFALL;
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <StateController_updateState+0x280>)
 8001848:	2204      	movs	r2, #4
 800184a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 800184c:	4b42      	ldr	r3, [pc, #264]	; (8001958 <StateController_updateState+0x294>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	887a      	ldrh	r2, [r7, #2]
 8001852:	429a      	cmp	r2, r3
 8001854:	d906      	bls.n	8001864 <StateController_updateState+0x1a0>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <StateController_updateState+0x298>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d102      	bne.n	8001864 <StateController_updateState+0x1a0>
			{
				freefallTest = 0;
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <StateController_updateState+0x298>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
			}
		}

		prevAlt = alt;
 8001864:	4a3c      	ldr	r2, [pc, #240]	; (8001958 <StateController_updateState+0x294>)
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	8013      	strh	r3, [r2, #0]
	}

	if(StateController_currentState == ALTIMEX_FREEFALL)
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <StateController_updateState+0x280>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b04      	cmp	r3, #4
 8001870:	d109      	bne.n	8001886 <StateController_updateState+0x1c2>
	{
		if(alt < config->breakoff + 1500)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	8a5b      	ldrh	r3, [r3, #18]
 8001876:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	429a      	cmp	r2, r3
 800187e:	db02      	blt.n	8001886 <StateController_updateState+0x1c2>
		{
			StateController_currentState = ALTIMEX_APPROACHING_BREAKOFF;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <StateController_updateState+0x280>)
 8001882:	2205      	movs	r2, #5
 8001884:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_APPROACHING_BREAKOFF)
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <StateController_updateState+0x280>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d107      	bne.n	800189e <StateController_updateState+0x1da>
	{
		if(alt < config->breakoff)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	8a5b      	ldrh	r3, [r3, #18]
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	429a      	cmp	r2, r3
 8001896:	d202      	bcs.n	800189e <StateController_updateState+0x1da>
		{
			StateController_currentState = ALTIMEX_BREAKOFF;
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <StateController_updateState+0x280>)
 800189a:	2206      	movs	r2, #6
 800189c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_BREAKOFF)
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <StateController_updateState+0x280>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d109      	bne.n	80018ba <StateController_updateState+0x1f6>
	{
		if(alt < config->breakoff - 500)
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8a5b      	ldrh	r3, [r3, #18]
 80018ac:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80018b0:	429a      	cmp	r2, r3
 80018b2:	da02      	bge.n	80018ba <StateController_updateState+0x1f6>
		{
			StateController_currentState = ALTIMEX_TRACK;
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <StateController_updateState+0x280>)
 80018b6:	2207      	movs	r2, #7
 80018b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_TRACK)
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <StateController_updateState+0x280>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	d107      	bne.n	80018d2 <StateController_updateState+0x20e>
	{
		if(alt < config->deploy)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8a9b      	ldrh	r3, [r3, #20]
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d202      	bcs.n	80018d2 <StateController_updateState+0x20e>
		{
			StateController_currentState = ALTIMEX_DEPLOY;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <StateController_updateState+0x280>)
 80018ce:	2208      	movs	r2, #8
 80018d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_DEPLOY)
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <StateController_updateState+0x280>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	f040 809d 	bne.w	8001a16 <StateController_updateState+0x352>
	{

		if(deployTest == 0)
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <StateController_updateState+0x2ac>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d159      	bne.n	8001998 <StateController_updateState+0x2d4>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			double elapsedTimeSec = (double)(HAL_GetTick() - deployTestStart) / 1000;
 80018e4:	f000 fea4 	bl	8002630 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <StateController_updateState+0x2b0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd6f 	bl	80003d4 <__aeabi_ui2d>
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <StateController_updateState+0x2a4>)
 80018fc:	f7fe ff0e 	bl	800071c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9c7 2304 	strd	r2, r3, [r7, #16]
			double avgSpeedFps = fabs((double)(deployTestStartAlt - alt) / elapsedTimeSec);
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <StateController_updateState+0x2b4>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fd6e 	bl	80003f4 <__aeabi_i2d>
 8001918:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800191c:	f7fe fefe 	bl	800071c <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4611      	mov	r1, r2
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192c:	60fb      	str	r3, [r7, #12]
			if(avgSpeedFps <= 73.0) //50mph to fps
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <StateController_updateState+0x2b8>)
 8001934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001938:	f7ff f842 	bl	80009c0 <__aeabi_dcmple>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	e01e      	b.n	8001980 <StateController_updateState+0x2bc>
 8001942:	bf00      	nop
 8001944:	20000034 	.word	0x20000034
 8001948:	20000035 	.word	0x20000035
 800194c:	20000038 	.word	0x20000038
 8001950:	20000040 	.word	0x20000040
 8001954:	2000003c 	.word	0x2000003c
 8001958:	20000042 	.word	0x20000042
 800195c:	20000044 	.word	0x20000044
 8001960:	20000048 	.word	0x20000048
 8001964:	2000004c 	.word	0x2000004c
 8001968:	408f4000 	.word	0x408f4000
 800196c:	405d4000 	.word	0x405d4000
 8001970:	20000054 	.word	0x20000054
 8001974:	20000058 	.word	0x20000058
 8001978:	2000005c 	.word	0x2000005c
 800197c:	40524000 	.word	0x40524000
 8001980:	d00a      	beq.n	8001998 <StateController_updateState+0x2d4>
			{
				deployTest = 1;
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <StateController_updateState+0x35c>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
				deployTestStart = HAL_GetTick();
 8001988:	f000 fe52 	bl	8002630 <HAL_GetTick>
 800198c:	4603      	mov	r3, r0
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <StateController_updateState+0x360>)
 8001990:	6013      	str	r3, [r2, #0]
				deployTestStartAlt = alt;
 8001992:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <StateController_updateState+0x364>)
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	8013      	strh	r3, [r2, #0]
			}
		}
		if(deployTest == 1)
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <StateController_updateState+0x35c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d132      	bne.n	8001a06 <StateController_updateState+0x342>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <StateController_updateState+0x364>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd22 	bl	80003f4 <__aeabi_i2d>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	f000 fe3c 	bl	8002630 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <StateController_updateState+0x360>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd07 	bl	80003d4 <__aeabi_ui2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7fe fea5 	bl	800071c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <StateController_updateState+0x368>)
 80019e0:	f7fe ffee 	bl	80009c0 <__aeabi_dcmple>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00d      	beq.n	8001a06 <StateController_updateState+0x342>
			{
				if(HAL_GetTick() > deployTestStart + config->deployTestThresholdTime)
 80019ea:	f000 fe21 	bl	8002630 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	889b      	ldrh	r3, [r3, #4]
 80019f4:	4619      	mov	r1, r3
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <StateController_updateState+0x360>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	440b      	add	r3, r1
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d902      	bls.n	8001a06 <StateController_updateState+0x342>
				{
					StateController_currentState = ALTIMEX_CANOPY;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <StateController_updateState+0x36c>)
 8001a02:	2209      	movs	r2, #9
 8001a04:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 8001a06:	f000 fe13 	bl	8002630 <HAL_GetTick>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <StateController_updateState+0x370>)
 8001a0e:	6013      	str	r3, [r2, #0]
		deployTestPrevAlt = alt;
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <StateController_updateState+0x374>)
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	8013      	strh	r3, [r2, #0]
		{
			StateController_currentState = COLORALTI_STANDBY;
		}
		*/
	}
}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000054 	.word	0x20000054
 8001a24:	20000058 	.word	0x20000058
 8001a28:	2000005c 	.word	0x2000005c
 8001a2c:	40524000 	.word	0x40524000
 8001a30:	20000034 	.word	0x20000034
 8001a34:	20000050 	.word	0x20000050
 8001a38:	2000004e 	.word	0x2000004e

08001a3c <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f835 	bl	8001ab4 <Set_LED_Timer>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460a      	mov	r2, r1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 8001a62:	f000 f9f1 	bl	8001e48 <Clear_All_LED>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b0a      	cmp	r3, #10
 8001a6a:	d901      	bls.n	8001a70 <Strip_Progress_Bar_Single_Color+0x1e>
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e008      	b.n	8001a88 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	79ba      	ldrb	r2, [r7, #6]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f9b8 	bl	8001df2 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3f2      	bcc.n	8001a76 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <Strip_Clear>:

void Strip_Clear()
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
	Clear_All_LED();
 8001a9e:	f000 f9d3 	bl	8001e48 <Clear_All_LED>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <Strip_Send>:

void Strip_Send()
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
	WS2813_Send();
 8001aaa:	f000 f8c5 	bl	8001c38 <WS2813_Send>
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <Set_LED_Timer+0x18>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000060 	.word	0x20000060

08001ad0 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	b2d9      	uxtb	r1, r3
 8001ae2:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <Set_LED+0x58>)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	460a      	mov	r2, r1
 8001aec:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	b2d9      	uxtb	r1, r3
 8001af2:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <Set_LED+0x58>)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	460a      	mov	r2, r1
 8001afc:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	b2d9      	uxtb	r1, r3
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <Set_LED+0x58>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2d9      	uxtb	r1, r3
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <Set_LED+0x58>)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	460a      	mov	r2, r1
 8001b1c:	71da      	strb	r2, [r3, #7]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000060 	.word	0x20000060
 8001b2c:	00000000 	.word	0x00000000

08001b30 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8001b3c:	dd01      	ble.n	8001b42 <Set_Brightness+0x12>
 8001b3e:	232d      	movs	r3, #45	; 0x2d
 8001b40:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e065      	b.n	8001c14 <Set_Brightness+0xe4>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 8001b48:	4a39      	ldr	r2, [pc, #228]	; (8001c30 <Set_Brightness+0x100>)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	7919      	ldrb	r1, [r3, #4]
 8001b52:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <Set_Brightness+0x100>)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	330a      	adds	r3, #10
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	711a      	strb	r2, [r3, #4]
		for (int j=1; j<4; j++)
 8001b60:	2301      	movs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	e050      	b.n	8001c08 <Set_Brightness+0xd8>
		{
			float angle = 90-brightness;  // in degrees
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f897 	bl	8000ca0 <__aeabi_i2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7fe fc4e 	bl	8000418 <__aeabi_f2d>
 8001b7c:	a32a      	add	r3, pc, #168	; (adr r3, 8001c28 <Set_Brightness+0xf8>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fca1 	bl	80004c8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <Set_Brightness+0x104>)
 8001b94:	f7fe fdc2 	bl	800071c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe ff74 	bl	8000a8c <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 8001ba8:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <Set_Brightness+0x100>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	441a      	add	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fc1b 	bl	80003f4 <__aeabi_i2d>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	460d      	mov	r5, r1
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7fe fc28 	bl	8000418 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f004 f89a 	bl	8005d08 <tan>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fd9e 	bl	800071c <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff30 	bl	8000a4c <__aeabi_d2uiz>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b2d9      	uxtb	r1, r3
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <Set_Brightness+0x100>)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	441a      	add	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	332c      	adds	r3, #44	; 0x2c
 8001bfe:	460a      	mov	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	3301      	adds	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	ddab      	ble.n	8001b66 <Set_Brightness+0x36>
	for (int i=0; i<MAX_LED; i++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	dd96      	ble.n	8001b48 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}
 8001c24:	f3af 8000 	nop.w
 8001c28:	53c8d4f1 	.word	0x53c8d4f1
 8001c2c:	400921fb 	.word	0x400921fb
 8001c30:	20000060 	.word	0x20000060
 8001c34:	40668000 	.word	0x40668000

08001c38 <WS2813_Send>:

void WS2813_Send ()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e03d      	b.n	8001cc4 <WS2813_Send+0x8c>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8001c48:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <WS2813_Send+0xe4>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	4931      	ldr	r1, [pc, #196]	; (8001d1c <WS2813_Send+0xe4>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	431a      	orrs	r2, r3
 8001c66:	492d      	ldr	r1, [pc, #180]	; (8001d1c <WS2813_Send+0xe4>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001c72:	4313      	orrs	r3, r2
 8001c74:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001c76:	2317      	movs	r3, #23
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e01d      	b.n	8001cb8 <WS2813_Send+0x80>
		{
			if (color&(1<<i))
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <WS2813_Send+0x66>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <WS2813_Send+0xe4>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3328      	adds	r3, #40	; 0x28
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	2230      	movs	r2, #48	; 0x30
 8001c9a:	809a      	strh	r2, [r3, #4]
 8001c9c:	e006      	b.n	8001cac <WS2813_Send+0x74>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <WS2813_Send+0xe4>)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3328      	adds	r3, #40	; 0x28
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2214      	movs	r2, #20
 8001caa:	809a      	strh	r2, [r3, #4]

			indx++;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	dade      	bge.n	8001c7c <WS2813_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	ddbe      	ble.n	8001c48 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	e00c      	b.n	8001cea <WS2813_Send+0xb2>
	{
		ws_config.pwmData[indx] = 0;
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <WS2813_Send+0xe4>)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3328      	adds	r3, #40	; 0x28
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2200      	movs	r2, #0
 8001cdc:	809a      	strh	r2, [r3, #4]
		indx++;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b31      	cmp	r3, #49	; 0x31
 8001cee:	ddef      	ble.n	8001cd0 <WS2813_Send+0x98>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <WS2813_Send+0xe4>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <WS2813_Send+0xe8>)
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	f003 f802 	bl	8004d04 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 8001d00:	bf00      	nop
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <WS2813_Send+0xe4>)
 8001d04:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0fa      	beq.n	8001d02 <WS2813_Send+0xca>
	ws_config.datasentflag = 0;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <WS2813_Send+0xe4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000060 	.word	0x20000060
 8001d20:	200000b4 	.word	0x200000b4

08001d24 <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <Color_To_RGB+0x24>
		rgb->r = 0;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	22ff      	movs	r2, #255	; 0xff
 8001d40:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2214      	movs	r2, #20
 8001d46:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d108      	bne.n	8001d60 <Color_To_RGB+0x3c>
		rgb->r = 255;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	22ff      	movs	r2, #255	; 0xff
 8001d52:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d108      	bne.n	8001d78 <Color_To_RGB+0x54>
		rgb->r = 255;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	22ff      	movs	r2, #255	; 0xff
 8001d6a:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d108      	bne.n	8001d90 <Color_To_RGB+0x6c>
		rgb->r = 255;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	22ff      	movs	r2, #255	; 0xff
 8001d82:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d108      	bne.n	8001da8 <Color_To_RGB+0x84>
		rgb->r = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	22ff      	movs	r2, #255	; 0xff
 8001da0:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	22c8      	movs	r2, #200	; 0xc8
 8001da6:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d108      	bne.n	8001dc0 <Color_To_RGB+0x9c>
		rgb->r = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	709a      	strb	r2, [r3, #2]
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	789b      	ldrb	r3, [r3, #2]
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fe73 	bl	8001ad0 <Set_LED>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff8c 	bl	8001d24 <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffd9 	bl	8001dca <Set_LED_From_RGB>
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f90a 	bl	8005048 <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000060 	.word	0x20000060

08001e48 <Clear_All_LED>:

void Clear_All_LED()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	e007      	b.n	8001e64 <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2105      	movs	r1, #5
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ffca 	bl	8001df2 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	3301      	adds	r3, #1
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	d9f4      	bls.n	8001e54 <Clear_All_LED+0xc>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b092      	sub	sp, #72	; 0x48
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7a:	f000 fb81 	bl	8002580 <HAL_Init>

  /* USER CODE BEGIN Init */
	Strip_Set_Timer(&htim2);
 8001e7e:	4843      	ldr	r0, [pc, #268]	; (8001f8c <main+0x118>)
 8001e80:	f7ff fddc 	bl	8001a3c <Strip_Set_Timer>
	Strip_Clear();
 8001e84:	f7ff fe09 	bl	8001a9a <Strip_Clear>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e88:	f000 f886 	bl	8001f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e8c:	f000 f9e2 	bl	8002254 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e90:	f000 f9c2 	bl	8002218 <MX_DMA_Init>
  MX_I2C1_Init();
 8001e94:	f000 f8c2 	bl	800201c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001e98:	f000 f93e 	bl	8002118 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e9c:	f000 f8ec 	bl	8002078 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 8001ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea4:	f000 fbce 	bl	8002644 <HAL_Delay>
	uint8_t lps_startup_result = LPS_Init(&hi2c1, LPS_DEFAULT_ADDRESS);
 8001ea8:	215c      	movs	r1, #92	; 0x5c
 8001eaa:	4839      	ldr	r0, [pc, #228]	; (8001f90 <main+0x11c>)
 8001eac:	f7ff f8bc 	bl	8001028 <LPS_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	double refP = LPS_Get_Pressure();
 8001eb6:	f7ff f979 	bl	80011ac <LPS_Get_Pressure>
 8001eba:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	double refT = LPS_Get_Temp();
 8001ebe:	f7ff f9a9 	bl	8001214 <LPS_Get_Temp>
 8001ec2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double tempF = LPS_Get_TempF();
 8001ec6:	f7ff f9cf 	bl	8001268 <LPS_Get_TempF>
 8001eca:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	//double alt = 0.0;
	uint16_t alt = 12500;
 8001ece:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8001ed2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	struct AltimexConfig config;
	config.ascentThreshold = 500;              //The altitude you must pass for it to transition into the ascent state
 8001ed6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eda:	803b      	strh	r3, [r7, #0]
	config.ascentThresholdTime = 1000;         //ms that altitude must be above the ascentThreshold before transitioning between states
 8001edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee0:	807b      	strh	r3, [r7, #2]
	config.deployTestThresholdTime = 2000;     //ms, threshold time that vertical speed has to be under 50mph
 8001ee2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ee6:	80bb      	strh	r3, [r7, #4]
	config.gearCheckNotificationLength = 5000; //ms, the length of the gearcheck notification
 8001ee8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001eec:	60bb      	str	r3, [r7, #8]
	config.freefallThresholdTime = 2000;       //ms, the amount of time that the vertical speed must be above the freefall threshold speed to transition into freefall state
 8001eee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ef2:	60fb      	str	r3, [r7, #12]
	config.exit = 12500;                       //Exit altitude
 8001ef4:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8001ef8:	823b      	strh	r3, [r7, #16]
	config.breakoff = 5500;                    //Breakoff altitude
 8001efa:	f241 537c 	movw	r3, #5500	; 0x157c
 8001efe:	827b      	strh	r3, [r7, #18]
	config.deploy = 4500;                      //Deployment altitude
 8001f00:	f241 1394 	movw	r3, #4500	; 0x1194
 8001f04:	82bb      	strh	r3, [r7, #20]
	config.standbyFlashOnLength = 250;         //How long the light is on for when in standby mode
 8001f06:	23fa      	movs	r3, #250	; 0xfa
 8001f08:	61bb      	str	r3, [r7, #24]
	config.standbyFlashOffLength = 5000;       //Period between each flash in standby mode
 8001f0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f0e:	61fb      	str	r3, [r7, #28]
	config.numLeds = 10;                       //The number of leds being used
 8001f10:	230a      	movs	r3, #10
 8001f12:	f887 3020 	strb.w	r3, [r7, #32]
	config.gearCheckAlt = 10000;               //The altitude that the gear check notification is given
 8001f16:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f1a:	847b      	strh	r3, [r7, #34]	; 0x22
	config.brightness = 20;                    //LED brightness
 8001f1c:	2314      	movs	r3, #20
 8001f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.standbyBrightness = 5;              //Brightness of LEDS while in standby mode
 8001f22:	2305      	movs	r3, #5
 8001f24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t step = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  while (1)
  {
    tempF = LPS_Get_TempF();
 8001f2e:	f7ff f99b 	bl	8001268 <LPS_Get_TempF>
 8001f32:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    //if(HAL_GetTick() > 70000) alt -= 29; //Standby for first 10secs. Ascend for next 60 secs. Descend after that
    //if(HAL_GetTick() > 10000 && HAL_GetTick() < 70000) alt = ((HAL_GetTick() - 10000) / (double)60000) * 12500;
    if(alt < 0) alt = 12500;
    if(alt < 2500) alt -= 5;
 8001f36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f3a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d805      	bhi.n	8001f4e <main+0xda>
 8001f42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f46:	3b05      	subs	r3, #5
 8001f48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001f4c:	e004      	b.n	8001f58 <main+0xe4>
    else alt -= 29;
 8001f4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f52:	3b1d      	subs	r3, #29
 8001f54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    //alt = LPS_Get_RelAlt_Ft(refP);
    StateController_updateState(&config, alt);
 8001f58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fbaf 	bl	80016c4 <StateController_updateState>
    Altimex_displayLeds(StateController_currentState, step, &config, alt);
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <main+0x120>)
 8001f68:	7818      	ldrb	r0, [r3, #0]
 8001f6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f6e:	463a      	mov	r2, r7
 8001f70:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8001f74:	f7ff f99e 	bl	80012b4 <Altimex_displayLeds>
    step++;
 8001f78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    HAL_Delay(100); //10hz
 8001f82:	2064      	movs	r0, #100	; 0x64
 8001f84:	f000 fb5e 	bl	8002644 <HAL_Delay>
    tempF = LPS_Get_TempF();
 8001f88:	e7d1      	b.n	8001f2e <main+0xba>
 8001f8a:	bf00      	nop
 8001f8c:	20000398 	.word	0x20000398
 8001f90:	200002fc 	.word	0x200002fc
 8001f94:	20000034 	.word	0x20000034

08001f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b090      	sub	sp, #64	; 0x40
 8001f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	2228      	movs	r2, #40	; 0x28
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fea6 	bl	8005cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001fce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 f9ef 	bl	80043bc <HAL_RCC_OscConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001fe4:	f000 f976 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe8:	230f      	movs	r3, #15
 8001fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fec:	2302      	movs	r3, #2
 8001fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2102      	movs	r1, #2
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fc5c 	bl	80048c0 <HAL_RCC_ClockConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800200e:	f000 f961 	bl	80022d4 <Error_Handler>
  }
}
 8002012:	bf00      	nop
 8002014:	3740      	adds	r7, #64	; 0x40
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_I2C1_Init+0x50>)
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <MX_I2C1_Init+0x54>)
 8002024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_I2C1_Init+0x50>)
 8002028:	4a12      	ldr	r2, [pc, #72]	; (8002074 <MX_I2C1_Init+0x58>)
 800202a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_I2C1_Init+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_I2C1_Init+0x50>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_I2C1_Init+0x50>)
 800203a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800203e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <MX_I2C1_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_I2C1_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <MX_I2C1_Init+0x50>)
 800205a:	f001 f827 	bl	80030ac <HAL_I2C_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002064:	f000 f936 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200002fc 	.word	0x200002fc
 8002070:	40005400 	.word	0x40005400
 8002074:	000186a0 	.word	0x000186a0

08002078 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208c:	463b      	mov	r3, r7
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <MX_TIM1_Init+0x98>)
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <MX_TIM1_Init+0x9c>)
 8002098:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_TIM1_Init+0x98>)
 800209c:	2203      	movs	r2, #3
 800209e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM1_Init+0x98>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_TIM1_Init+0x98>)
 80020a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <MX_TIM1_Init+0x98>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM1_Init+0x98>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <MX_TIM1_Init+0x98>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020c0:	4813      	ldr	r0, [pc, #76]	; (8002110 <MX_TIM1_Init+0x98>)
 80020c2:	f002 fd77 	bl	8004bb4 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020cc:	f000 f902 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <MX_TIM1_Init+0x98>)
 80020de:	f003 f93b 	bl	8005358 <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020e8:	f000 f8f4 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_TIM1_Init+0x98>)
 80020fa:	f003 fd7b 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002104:	f000 f8e6 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000350 	.word	0x20000350
 8002114:	40012c00 	.word	0x40012c00

08002118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08e      	sub	sp, #56	; 0x38
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	f107 0320 	add.w	r3, r7, #32
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
 8002144:	615a      	str	r2, [r3, #20]
 8002146:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <MX_TIM2_Init+0xfc>)
 800214a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800214e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <MX_TIM2_Init+0xfc>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <MX_TIM2_Init+0xfc>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <MX_TIM2_Init+0xfc>)
 800215e:	223f      	movs	r2, #63	; 0x3f
 8002160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <MX_TIM2_Init+0xfc>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <MX_TIM2_Init+0xfc>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800216e:	4829      	ldr	r0, [pc, #164]	; (8002214 <MX_TIM2_Init+0xfc>)
 8002170:	f002 fd20 	bl	8004bb4 <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800217a:	f000 f8ab 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002188:	4619      	mov	r1, r3
 800218a:	4822      	ldr	r0, [pc, #136]	; (8002214 <MX_TIM2_Init+0xfc>)
 800218c:	f003 f8e4 	bl	8005358 <HAL_TIM_ConfigClockSource>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002196:	f000 f89d 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800219a:	481e      	ldr	r0, [pc, #120]	; (8002214 <MX_TIM2_Init+0xfc>)
 800219c:	f002 fd59 	bl	8004c52 <HAL_TIM_PWM_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80021a6:	f000 f895 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b2:	f107 0320 	add.w	r3, r7, #32
 80021b6:	4619      	mov	r1, r3
 80021b8:	4816      	ldr	r0, [pc, #88]	; (8002214 <MX_TIM2_Init+0xfc>)
 80021ba:	f003 fd1b 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80021c4:	f000 f886 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c8:	2360      	movs	r3, #96	; 0x60
 80021ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_TIM2_Init+0xfc>)
 80021e0:	f002 fff8 	bl	80051d4 <HAL_TIM_PWM_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80021ea:	f000 f873 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2204      	movs	r2, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <MX_TIM2_Init+0xfc>)
 80021f6:	f002 ffed 	bl	80051d4 <HAL_TIM_PWM_ConfigChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8002200:	f000 f868 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <MX_TIM2_Init+0xfc>)
 8002206:	f000 f92d 	bl	8002464 <HAL_TIM_MspPostInit>

}
 800220a:	bf00      	nop
 800220c:	3738      	adds	r7, #56	; 0x38
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000398 	.word	0x20000398

08002218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_DMA_Init+0x38>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <MX_DMA_Init+0x38>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6153      	str	r3, [r2, #20]
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <MX_DMA_Init+0x38>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	2011      	movs	r0, #17
 800223c:	f000 fafd 	bl	800283a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002240:	2011      	movs	r0, #17
 8002242:	f000 fb16 	bl	8002872 <HAL_NVIC_EnableIRQ>

}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <MX_GPIO_Init+0x78>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <MX_GPIO_Init+0x78>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <MX_GPIO_Init+0x78>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <MX_GPIO_Init+0x78>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <MX_GPIO_Init+0x78>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_GPIO_Init+0x78>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 800229e:	480c      	ldr	r0, [pc, #48]	; (80022d0 <MX_GPIO_Init+0x7c>)
 80022a0:	f000 feec 	bl	800307c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80022a4:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80022a8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2302      	movs	r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	4804      	ldr	r0, [pc, #16]	; (80022d0 <MX_GPIO_Init+0x7c>)
 80022be:	f000 fd59 	bl	8002d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010c00 	.word	0x40010c00

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022dc:	e7fe      	b.n	80022dc <Error_Handler+0x8>
	...

080022e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_MspInit+0x40>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_MspInit+0x40>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6193      	str	r3, [r2, #24]
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_MspInit+0x40>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_MspInit+0x40>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_MspInit+0x40>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_MspInit+0x40>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <HAL_I2C_MspInit+0x70>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d123      	bne.n	800238c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_I2C_MspInit+0x74>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_I2C_MspInit+0x74>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_I2C_MspInit+0x74>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800235c:	23c0      	movs	r3, #192	; 0xc0
 800235e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002360:	2312      	movs	r3, #18
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	4619      	mov	r1, r3
 800236e:	480b      	ldr	r0, [pc, #44]	; (800239c <HAL_I2C_MspInit+0x78>)
 8002370:	f000 fd00 	bl	8002d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_I2C_MspInit+0x74>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_I2C_MspInit+0x74>)
 800237a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237e:	61d3      	str	r3, [r2, #28]
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_I2C_MspInit+0x74>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800238c:	bf00      	nop
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40005400 	.word	0x40005400
 8002398:	40021000 	.word	0x40021000
 800239c:	40010c00 	.word	0x40010c00

080023a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a29      	ldr	r2, [pc, #164]	; (8002454 <HAL_TIM_Base_MspInit+0xb4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10c      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_TIM_Base_MspInit+0xb8>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4a28      	ldr	r2, [pc, #160]	; (8002458 <HAL_TIM_Base_MspInit+0xb8>)
 80023b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023bc:	6193      	str	r3, [r2, #24]
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_TIM_Base_MspInit+0xb8>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023ca:	e03e      	b.n	800244a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d139      	bne.n	800244a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_TIM_Base_MspInit+0xb8>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_TIM_Base_MspInit+0xb8>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_TIM_Base_MspInit+0xb8>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_TIM_Base_MspInit+0xc0>)
 80023f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 80023f6:	2210      	movs	r2, #16
 80023f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002414:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002424:	f000 fa40 	bl	80028a8 <HAL_DMA_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 800242e:	f7ff ff51 	bl	80022d4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
 8002444:	4a05      	ldr	r2, [pc, #20]	; (800245c <HAL_TIM_Base_MspInit+0xbc>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6253      	str	r3, [r2, #36]	; 0x24
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40021000 	.word	0x40021000
 800245c:	200003e0 	.word	0x200003e0
 8002460:	40020080 	.word	0x40020080

08002464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d117      	bne.n	80024b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_TIM_MspPostInit+0x58>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_TIM_MspPostInit+0x58>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_TIM_MspPostInit+0x58>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800249c:	2303      	movs	r3, #3
 800249e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4619      	mov	r1, r3
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <HAL_TIM_MspPostInit+0x5c>)
 80024b0:	f000 fc60 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024b4:	bf00      	nop
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010800 	.word	0x40010800

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler+0x4>

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <MemManage_Handler+0x4>

080024d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250a:	f000 f87f 	bl	800260c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <DMA1_Channel7_IRQHandler+0x10>)
 800251a:	f000 faf7 	bl	8002b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200003e0 	.word	0x200003e0

08002528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002536:	490d      	ldr	r1, [pc, #52]	; (800256c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800255a:	f7ff ffe5 	bl	8002528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f003 fba7 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002562:	f7ff fc87 	bl	8001e74 <main>
  bx lr
 8002566:	4770      	bx	lr
  ldr r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800256c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002570:	08007000 	.word	0x08007000
  ldr r2, =_sbss
 8002574:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002578:	20000428 	.word	0x20000428

0800257c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC1_2_IRQHandler>
	...

08002580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_Init+0x28>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_Init+0x28>)
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002590:	2003      	movs	r0, #3
 8002592:	f000 f947 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002596:	200f      	movs	r0, #15
 8002598:	f000 f808 	bl	80025ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800259c:	f7ff fea0 	bl	80022e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000

080025ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_InitTick+0x54>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_InitTick+0x58>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f95f 	bl	800288e <HAL_SYSTICK_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00e      	b.n	80025f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0f      	cmp	r3, #15
 80025de:	d80a      	bhi.n	80025f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e0:	2200      	movs	r2, #0
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f000 f927 	bl	800283a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ec:	4a06      	ldr	r2, [pc, #24]	; (8002608 <HAL_InitTick+0x5c>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000000 	.word	0x20000000
 8002604:	20000008 	.word	0x20000008
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_IncTick+0x1c>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_IncTick+0x20>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4413      	add	r3, r2
 800261c:	4a03      	ldr	r2, [pc, #12]	; (800262c <HAL_IncTick+0x20>)
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000008 	.word	0x20000008
 800262c:	20000424 	.word	0x20000424

08002630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return uwTick;
 8002634:	4b02      	ldr	r3, [pc, #8]	; (8002640 <HAL_GetTick+0x10>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000424 	.word	0x20000424

08002644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff fff0 	bl	8002630 <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d005      	beq.n	800266a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_Delay+0x44>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266a:	bf00      	nop
 800266c:	f7ff ffe0 	bl	8002630 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	429a      	cmp	r2, r3
 800267a:	d8f7      	bhi.n	800266c <HAL_Delay+0x28>
  {
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000008 	.word	0x20000008

0800268c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <__NVIC_GetPriorityGrouping+0x18>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0307 	and.w	r3, r3, #7
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0b      	blt.n	800271a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4906      	ldr	r1, [pc, #24]	; (8002724 <__NVIC_EnableIRQ+0x34>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2001      	movs	r0, #1
 8002712:	fa00 f202 	lsl.w	r2, r0, r2
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f0:	d301      	bcc.n	80027f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <SysTick_Config+0x40>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fe:	210f      	movs	r1, #15
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f7ff ff90 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <SysTick_Config+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SysTick_Config+0x40>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff2d 	bl	800268c <__NVIC_SetPriorityGrouping>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800284c:	f7ff ff42 	bl	80026d4 <__NVIC_GetPriorityGrouping>
 8002850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7ff ff90 	bl	800277c <NVIC_EncodePriority>
 800285c:	4602      	mov	r2, r0
 800285e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff5f 	bl	8002728 <__NVIC_SetPriority>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff35 	bl	80026f0 <__NVIC_EnableIRQ>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffa2 	bl	80027e0 <SysTick_Config>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e043      	b.n	8002946 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_DMA_Init+0xa8>)
 80028c6:	4413      	add	r3, r2
 80028c8:	4a22      	ldr	r2, [pc, #136]	; (8002954 <HAL_DMA_Init+0xac>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_DMA_Init+0xb0>)
 80028da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	bffdfff8 	.word	0xbffdfff8
 8002954:	cccccccd 	.word	0xcccccccd
 8002958:	40020000 	.word	0x40020000

0800295c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_DMA_Start_IT+0x20>
 8002978:	2302      	movs	r3, #2
 800297a:	e04b      	b.n	8002a14 <HAL_DMA_Start_IT+0xb8>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d13a      	bne.n	8002a06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f9af 	bl	8002d18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 020e 	orr.w	r2, r2, #14
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e00f      	b.n	80029f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 020a 	orr.w	r2, r2, #10
 80029f2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d005      	beq.n	8002a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2204      	movs	r2, #4
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	e051      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 020e 	bic.w	r2, r2, #14
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_DMA_Abort_IT+0xd4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d029      	beq.n	8002abe <HAL_DMA_Abort_IT+0xa2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_DMA_Abort_IT+0xd8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_Abort_IT+0x9e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_DMA_Abort_IT+0xdc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x98>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_DMA_Abort_IT+0xe0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d012      	beq.n	8002aae <HAL_DMA_Abort_IT+0x92>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_DMA_Abort_IT+0xe4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00a      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x8c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_DMA_Abort_IT+0xe8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d102      	bne.n	8002aa2 <HAL_DMA_Abort_IT+0x86>
 8002a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa0:	e00e      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa6:	e00b      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aac:	e008      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab2:	e005      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab8:	e002      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aba:	2310      	movs	r3, #16
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <HAL_DMA_Abort_IT+0xec>)
 8002ac2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
    } 
  }
  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40020008 	.word	0x40020008
 8002af4:	4002001c 	.word	0x4002001c
 8002af8:	40020030 	.word	0x40020030
 8002afc:	40020044 	.word	0x40020044
 8002b00:	40020058 	.word	0x40020058
 8002b04:	4002006c 	.word	0x4002006c
 8002b08:	40020000 	.word	0x40020000

08002b0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2204      	movs	r2, #4
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d04f      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xc8>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d04a      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a66      	ldr	r2, [pc, #408]	; (8002cfc <HAL_DMA_IRQHandler+0x1f0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d029      	beq.n	8002bba <HAL_DMA_IRQHandler+0xae>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <HAL_DMA_IRQHandler+0x1f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xaa>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <HAL_DMA_IRQHandler+0x1f8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01a      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0xa4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a62      	ldr	r2, [pc, #392]	; (8002d08 <HAL_DMA_IRQHandler+0x1fc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d012      	beq.n	8002baa <HAL_DMA_IRQHandler+0x9e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a60      	ldr	r2, [pc, #384]	; (8002d0c <HAL_DMA_IRQHandler+0x200>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x98>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5f      	ldr	r2, [pc, #380]	; (8002d10 <HAL_DMA_IRQHandler+0x204>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d102      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x92>
 8002b98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b9c:	e00e      	b.n	8002bbc <HAL_DMA_IRQHandler+0xb0>
 8002b9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ba2:	e00b      	b.n	8002bbc <HAL_DMA_IRQHandler+0xb0>
 8002ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ba8:	e008      	b.n	8002bbc <HAL_DMA_IRQHandler+0xb0>
 8002baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bae:	e005      	b.n	8002bbc <HAL_DMA_IRQHandler+0xb0>
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	e002      	b.n	8002bbc <HAL_DMA_IRQHandler+0xb0>
 8002bb6:	2340      	movs	r3, #64	; 0x40
 8002bb8:	e000      	b.n	8002bbc <HAL_DMA_IRQHandler+0xb0>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	4a55      	ldr	r2, [pc, #340]	; (8002d14 <HAL_DMA_IRQHandler+0x208>)
 8002bbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8094 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bd2:	e08e      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2202      	movs	r2, #2
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d056      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x186>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d051      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 020a 	bic.w	r2, r2, #10
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a38      	ldr	r2, [pc, #224]	; (8002cfc <HAL_DMA_IRQHandler+0x1f0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d029      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x166>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_DMA_IRQHandler+0x1f4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x162>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a35      	ldr	r2, [pc, #212]	; (8002d04 <HAL_DMA_IRQHandler+0x1f8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01a      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x15c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_DMA_IRQHandler+0x1fc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d012      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x156>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_DMA_IRQHandler+0x200>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00a      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x150>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <HAL_DMA_IRQHandler+0x204>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d102      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x14a>
 8002c50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c54:	e00e      	b.n	8002c74 <HAL_DMA_IRQHandler+0x168>
 8002c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5a:	e00b      	b.n	8002c74 <HAL_DMA_IRQHandler+0x168>
 8002c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c60:	e008      	b.n	8002c74 <HAL_DMA_IRQHandler+0x168>
 8002c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c66:	e005      	b.n	8002c74 <HAL_DMA_IRQHandler+0x168>
 8002c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6c:	e002      	b.n	8002c74 <HAL_DMA_IRQHandler+0x168>
 8002c6e:	2320      	movs	r3, #32
 8002c70:	e000      	b.n	8002c74 <HAL_DMA_IRQHandler+0x168>
 8002c72:	2302      	movs	r3, #2
 8002c74:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <HAL_DMA_IRQHandler+0x208>)
 8002c76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d034      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c90:	e02f      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2208      	movs	r2, #8
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d028      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x1e8>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 020e 	bic.w	r2, r2, #14
 8002cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
    }
  }
  return;
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
}
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40020008 	.word	0x40020008
 8002d00:	4002001c 	.word	0x4002001c
 8002d04:	40020030 	.word	0x40020030
 8002d08:	40020044 	.word	0x40020044
 8002d0c:	40020058 	.word	0x40020058
 8002d10:	4002006c 	.word	0x4002006c
 8002d14:	40020000 	.word	0x40020000

08002d18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d108      	bne.n	8002d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d56:	e007      	b.n	8002d68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b08b      	sub	sp, #44	; 0x2c
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d86:	e169      	b.n	800305c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d88:	2201      	movs	r2, #1
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f040 8158 	bne.w	8003056 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a9a      	ldr	r2, [pc, #616]	; (8003014 <HAL_GPIO_Init+0x2a0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d05e      	beq.n	8002e6e <HAL_GPIO_Init+0xfa>
 8002db0:	4a98      	ldr	r2, [pc, #608]	; (8003014 <HAL_GPIO_Init+0x2a0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d875      	bhi.n	8002ea2 <HAL_GPIO_Init+0x12e>
 8002db6:	4a98      	ldr	r2, [pc, #608]	; (8003018 <HAL_GPIO_Init+0x2a4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d058      	beq.n	8002e6e <HAL_GPIO_Init+0xfa>
 8002dbc:	4a96      	ldr	r2, [pc, #600]	; (8003018 <HAL_GPIO_Init+0x2a4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d86f      	bhi.n	8002ea2 <HAL_GPIO_Init+0x12e>
 8002dc2:	4a96      	ldr	r2, [pc, #600]	; (800301c <HAL_GPIO_Init+0x2a8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d052      	beq.n	8002e6e <HAL_GPIO_Init+0xfa>
 8002dc8:	4a94      	ldr	r2, [pc, #592]	; (800301c <HAL_GPIO_Init+0x2a8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d869      	bhi.n	8002ea2 <HAL_GPIO_Init+0x12e>
 8002dce:	4a94      	ldr	r2, [pc, #592]	; (8003020 <HAL_GPIO_Init+0x2ac>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d04c      	beq.n	8002e6e <HAL_GPIO_Init+0xfa>
 8002dd4:	4a92      	ldr	r2, [pc, #584]	; (8003020 <HAL_GPIO_Init+0x2ac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d863      	bhi.n	8002ea2 <HAL_GPIO_Init+0x12e>
 8002dda:	4a92      	ldr	r2, [pc, #584]	; (8003024 <HAL_GPIO_Init+0x2b0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d046      	beq.n	8002e6e <HAL_GPIO_Init+0xfa>
 8002de0:	4a90      	ldr	r2, [pc, #576]	; (8003024 <HAL_GPIO_Init+0x2b0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d85d      	bhi.n	8002ea2 <HAL_GPIO_Init+0x12e>
 8002de6:	2b12      	cmp	r3, #18
 8002de8:	d82a      	bhi.n	8002e40 <HAL_GPIO_Init+0xcc>
 8002dea:	2b12      	cmp	r3, #18
 8002dec:	d859      	bhi.n	8002ea2 <HAL_GPIO_Init+0x12e>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <HAL_GPIO_Init+0x80>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e6f 	.word	0x08002e6f
 8002df8:	08002e49 	.word	0x08002e49
 8002dfc:	08002e5b 	.word	0x08002e5b
 8002e00:	08002e9d 	.word	0x08002e9d
 8002e04:	08002ea3 	.word	0x08002ea3
 8002e08:	08002ea3 	.word	0x08002ea3
 8002e0c:	08002ea3 	.word	0x08002ea3
 8002e10:	08002ea3 	.word	0x08002ea3
 8002e14:	08002ea3 	.word	0x08002ea3
 8002e18:	08002ea3 	.word	0x08002ea3
 8002e1c:	08002ea3 	.word	0x08002ea3
 8002e20:	08002ea3 	.word	0x08002ea3
 8002e24:	08002ea3 	.word	0x08002ea3
 8002e28:	08002ea3 	.word	0x08002ea3
 8002e2c:	08002ea3 	.word	0x08002ea3
 8002e30:	08002ea3 	.word	0x08002ea3
 8002e34:	08002ea3 	.word	0x08002ea3
 8002e38:	08002e51 	.word	0x08002e51
 8002e3c:	08002e65 	.word	0x08002e65
 8002e40:	4a79      	ldr	r2, [pc, #484]	; (8003028 <HAL_GPIO_Init+0x2b4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e46:	e02c      	b.n	8002ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	623b      	str	r3, [r7, #32]
          break;
 8002e4e:	e029      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	3304      	adds	r3, #4
 8002e56:	623b      	str	r3, [r7, #32]
          break;
 8002e58:	e024      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	3308      	adds	r3, #8
 8002e60:	623b      	str	r3, [r7, #32]
          break;
 8002e62:	e01f      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	623b      	str	r3, [r7, #32]
          break;
 8002e6c:	e01a      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e76:	2304      	movs	r3, #4
 8002e78:	623b      	str	r3, [r7, #32]
          break;
 8002e7a:	e013      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e84:	2308      	movs	r3, #8
 8002e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	611a      	str	r2, [r3, #16]
          break;
 8002e8e:	e009      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e90:	2308      	movs	r3, #8
 8002e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	615a      	str	r2, [r3, #20]
          break;
 8002e9a:	e003      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	623b      	str	r3, [r7, #32]
          break;
 8002ea0:	e000      	b.n	8002ea4 <HAL_GPIO_Init+0x130>
          break;
 8002ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2bff      	cmp	r3, #255	; 0xff
 8002ea8:	d801      	bhi.n	8002eae <HAL_GPIO_Init+0x13a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	e001      	b.n	8002eb2 <HAL_GPIO_Init+0x13e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2bff      	cmp	r3, #255	; 0xff
 8002eb8:	d802      	bhi.n	8002ec0 <HAL_GPIO_Init+0x14c>
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	e002      	b.n	8002ec6 <HAL_GPIO_Init+0x152>
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	3b08      	subs	r3, #8
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	210f      	movs	r1, #15
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	6a39      	ldr	r1, [r7, #32]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80b1 	beq.w	8003056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_GPIO_Init+0x2b8>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	; (800302c <HAL_GPIO_Init+0x2b8>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6193      	str	r3, [r2, #24]
 8002f00:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_GPIO_Init+0x2b8>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f0c:	4a48      	ldr	r2, [pc, #288]	; (8003030 <HAL_GPIO_Init+0x2bc>)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <HAL_GPIO_Init+0x2c0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_GPIO_Init+0x1ec>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a3f      	ldr	r2, [pc, #252]	; (8003038 <HAL_GPIO_Init+0x2c4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00d      	beq.n	8002f5c <HAL_GPIO_Init+0x1e8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3e      	ldr	r2, [pc, #248]	; (800303c <HAL_GPIO_Init+0x2c8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d007      	beq.n	8002f58 <HAL_GPIO_Init+0x1e4>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a3d      	ldr	r2, [pc, #244]	; (8003040 <HAL_GPIO_Init+0x2cc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d101      	bne.n	8002f54 <HAL_GPIO_Init+0x1e0>
 8002f50:	2303      	movs	r3, #3
 8002f52:	e006      	b.n	8002f62 <HAL_GPIO_Init+0x1ee>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e004      	b.n	8002f62 <HAL_GPIO_Init+0x1ee>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e002      	b.n	8002f62 <HAL_GPIO_Init+0x1ee>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_GPIO_Init+0x1ee>
 8002f60:	2300      	movs	r3, #0
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	f002 0203 	and.w	r2, r2, #3
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	4093      	lsls	r3, r2
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f72:	492f      	ldr	r1, [pc, #188]	; (8003030 <HAL_GPIO_Init+0x2bc>)
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	492c      	ldr	r1, [pc, #176]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4928      	ldr	r1, [pc, #160]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	4922      	ldr	r1, [pc, #136]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60cb      	str	r3, [r1, #12]
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	491e      	ldr	r1, [pc, #120]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4918      	ldr	r1, [pc, #96]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4914      	ldr	r1, [pc, #80]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d021      	beq.n	8003048 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	490e      	ldr	r1, [pc, #56]	; (8003044 <HAL_GPIO_Init+0x2d0>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	e021      	b.n	8003056 <HAL_GPIO_Init+0x2e2>
 8003012:	bf00      	nop
 8003014:	10320000 	.word	0x10320000
 8003018:	10310000 	.word	0x10310000
 800301c:	10220000 	.word	0x10220000
 8003020:	10210000 	.word	0x10210000
 8003024:	10120000 	.word	0x10120000
 8003028:	10110000 	.word	0x10110000
 800302c:	40021000 	.word	0x40021000
 8003030:	40010000 	.word	0x40010000
 8003034:	40010800 	.word	0x40010800
 8003038:	40010c00 	.word	0x40010c00
 800303c:	40011000 	.word	0x40011000
 8003040:	40011400 	.word	0x40011400
 8003044:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_GPIO_Init+0x304>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	43db      	mvns	r3, r3
 8003050:	4909      	ldr	r1, [pc, #36]	; (8003078 <HAL_GPIO_Init+0x304>)
 8003052:	4013      	ands	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	3301      	adds	r3, #1
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	f47f ae8e 	bne.w	8002d88 <HAL_GPIO_Init+0x14>
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	372c      	adds	r7, #44	; 0x2c
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	40010400 	.word	0x40010400

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e12b      	b.n	8003316 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff f926 	bl	8002324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800310e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003110:	f001 fd1e 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8003114:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4a81      	ldr	r2, [pc, #516]	; (8003320 <HAL_I2C_Init+0x274>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d807      	bhi.n	8003130 <HAL_I2C_Init+0x84>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a80      	ldr	r2, [pc, #512]	; (8003324 <HAL_I2C_Init+0x278>)
 8003124:	4293      	cmp	r3, r2
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e006      	b.n	800313e <HAL_I2C_Init+0x92>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a7d      	ldr	r2, [pc, #500]	; (8003328 <HAL_I2C_Init+0x27c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	bf94      	ite	ls
 8003138:	2301      	movls	r3, #1
 800313a:	2300      	movhi	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0e7      	b.n	8003316 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a78      	ldr	r2, [pc, #480]	; (800332c <HAL_I2C_Init+0x280>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	0c9b      	lsrs	r3, r3, #18
 8003150:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a6a      	ldr	r2, [pc, #424]	; (8003320 <HAL_I2C_Init+0x274>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d802      	bhi.n	8003180 <HAL_I2C_Init+0xd4>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3301      	adds	r3, #1
 800317e:	e009      	b.n	8003194 <HAL_I2C_Init+0xe8>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	4a69      	ldr	r2, [pc, #420]	; (8003330 <HAL_I2C_Init+0x284>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	3301      	adds	r3, #1
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	430b      	orrs	r3, r1
 800319a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	495c      	ldr	r1, [pc, #368]	; (8003320 <HAL_I2C_Init+0x274>)
 80031b0:	428b      	cmp	r3, r1
 80031b2:	d819      	bhi.n	80031e8 <HAL_I2C_Init+0x13c>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1e59      	subs	r1, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031c8:	400b      	ands	r3, r1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_I2C_Init+0x138>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e59      	subs	r1, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e2:	e051      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 80031e4:	2304      	movs	r3, #4
 80031e6:	e04f      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d111      	bne.n	8003214 <HAL_I2C_Init+0x168>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e58      	subs	r0, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e012      	b.n	800323a <HAL_I2C_Init+0x18e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	0099      	lsls	r1, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Init+0x196>
 800323e:	2301      	movs	r3, #1
 8003240:	e022      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <HAL_I2C_Init+0x1bc>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1e58      	subs	r0, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	440b      	add	r3, r1
 8003258:	fbb0 f3f3 	udiv	r3, r0, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003266:	e00f      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	0099      	lsls	r1, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	fbb0 f3f3 	udiv	r3, r0, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	6809      	ldr	r1, [r1, #0]
 800328c:	4313      	orrs	r3, r2
 800328e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6911      	ldr	r1, [r2, #16]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	000186a0 	.word	0x000186a0
 8003324:	001e847f 	.word	0x001e847f
 8003328:	003d08ff 	.word	0x003d08ff
 800332c:	431bde83 	.word	0x431bde83
 8003330:	10624dd3 	.word	0x10624dd3

08003334 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4603      	mov	r3, r0
 8003344:	817b      	strh	r3, [r7, #10]
 8003346:	460b      	mov	r3, r1
 8003348:	813b      	strh	r3, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800334e:	f7ff f96f 	bl	8002630 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b20      	cmp	r3, #32
 800335e:	f040 80d9 	bne.w	8003514 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2319      	movs	r3, #25
 8003368:	2201      	movs	r2, #1
 800336a:	496d      	ldr	r1, [pc, #436]	; (8003520 <HAL_I2C_Mem_Write+0x1ec>)
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fdef 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
 800337a:	e0cc      	b.n	8003516 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_I2C_Mem_Write+0x56>
 8003386:	2302      	movs	r3, #2
 8003388:	e0c5      	b.n	8003516 <HAL_I2C_Mem_Write+0x1e2>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d007      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a3a      	ldr	r2, [r7, #32]
 80033da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a4d      	ldr	r2, [pc, #308]	; (8003524 <HAL_I2C_Mem_Write+0x1f0>)
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033f2:	88f8      	ldrh	r0, [r7, #6]
 80033f4:	893a      	ldrh	r2, [r7, #8]
 80033f6:	8979      	ldrh	r1, [r7, #10]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	4603      	mov	r3, r0
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fc26 	bl	8003c54 <I2C_RequestMemoryWrite>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d052      	beq.n	80034b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e081      	b.n	8003516 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 feb4 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b04      	cmp	r3, #4
 8003428:	d107      	bne.n	800343a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003438:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06b      	b.n	8003516 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <HAL_I2C_Mem_Write+0x180>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1aa      	bne.n	8003412 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fea7 	bl	8004214 <I2C_WaitOnBTFFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d107      	bne.n	80034e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e016      	b.n	8003516 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	00100002 	.word	0x00100002
 8003524:	ffff0000 	.word	0xffff0000

08003528 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08c      	sub	sp, #48	; 0x30
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003546:	f7ff f873 	bl	8002630 <HAL_GetTick>
 800354a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	f040 8244 	bne.w	80039e2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2319      	movs	r3, #25
 8003560:	2201      	movs	r2, #1
 8003562:	4982      	ldr	r1, [pc, #520]	; (800376c <HAL_I2C_Mem_Read+0x244>)
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fcf3 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
 8003572:	e237      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Mem_Read+0x5a>
 800357e:	2302      	movs	r3, #2
 8003580:	e230      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d007      	beq.n	80035a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2222      	movs	r2, #34	; 0x22
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2240      	movs	r2, #64	; 0x40
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a62      	ldr	r2, [pc, #392]	; (8003770 <HAL_I2C_Mem_Read+0x248>)
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ea:	88f8      	ldrh	r0, [r7, #6]
 80035ec:	893a      	ldrh	r2, [r7, #8]
 80035ee:	8979      	ldrh	r1, [r7, #10]
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4603      	mov	r3, r0
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fbc0 	bl	8003d80 <I2C_RequestMemoryRead>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e1ec      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d113      	bne.n	800363a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e1c0      	b.n	80039bc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	2b01      	cmp	r3, #1
 8003640:	d11e      	bne.n	8003680 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003652:	b672      	cpsid	i
}
 8003654:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800367c:	b662      	cpsie	i
}
 800367e:	e035      	b.n	80036ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11e      	bne.n	80036c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003698:	b672      	cpsid	i
}
 800369a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036c2:	b662      	cpsie	i
}
 80036c4:	e012      	b.n	80036ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036ec:	e166      	b.n	80039bc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	f200 811f 	bhi.w	8003936 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d123      	bne.n	8003748 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fdcd 	bl	80042a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e167      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003746:	e139      	b.n	80039bc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b02      	cmp	r3, #2
 800374e:	d152      	bne.n	80037f6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	2200      	movs	r2, #0
 8003758:	4906      	ldr	r1, [pc, #24]	; (8003774 <HAL_I2C_Mem_Read+0x24c>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fbf8 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e13c      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
 800376a:	bf00      	nop
 800376c:	00100002 	.word	0x00100002
 8003770:	ffff0000 	.word	0xffff0000
 8003774:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003778:	b672      	cpsid	i
}
 800377a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037be:	b662      	cpsie	i
}
 80037c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f4:	e0e2      	b.n	80039bc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	2200      	movs	r2, #0
 80037fe:	497b      	ldr	r1, [pc, #492]	; (80039ec <HAL_I2C_Mem_Read+0x4c4>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fba5 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0e9      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003820:	b672      	cpsid	i
}
 8003822:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003856:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <HAL_I2C_Mem_Read+0x4c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	08db      	lsrs	r3, r3, #3
 800385c:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <HAL_I2C_Mem_Read+0x4cc>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0a1a      	lsrs	r2, r3, #8
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00da      	lsls	r2, r3, #3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	3b01      	subs	r3, #1
 8003874:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d118      	bne.n	80038ae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800389e:	b662      	cpsie	i
}
 80038a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e09a      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d1d9      	bne.n	8003870 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038fe:	b662      	cpsie	i
}
 8003900:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003934:	e042      	b.n	80039bc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fcb2 	bl	80042a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e04c      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b04      	cmp	r3, #4
 8003988:	d118      	bne.n	80039bc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f ae94 	bne.w	80036ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	00010004 	.word	0x00010004
 80039f0:	20000000 	.word	0x20000000
 80039f4:	14f8b589 	.word	0x14f8b589

080039f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	460b      	mov	r3, r1
 8003a06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7fe fe12 	bl	8002630 <HAL_GetTick>
 8003a0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	f040 8111 	bne.w	8003c42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	2319      	movs	r3, #25
 8003a26:	2201      	movs	r2, #1
 8003a28:	4988      	ldr	r1, [pc, #544]	; (8003c4c <HAL_I2C_IsDeviceReady+0x254>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fa90 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
 8003a38:	e104      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_I2C_IsDeviceReady+0x50>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0fd      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x24c>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d007      	beq.n	8003a6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2224      	movs	r2, #36	; 0x24
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a70      	ldr	r2, [pc, #448]	; (8003c50 <HAL_I2C_IsDeviceReady+0x258>)
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa4e 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac8:	d103      	bne.n	8003ad2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0b6      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ae4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fda3 	bl	8002630 <HAL_GetTick>
 8003aea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b1a:	e025      	b.n	8003b68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b1c:	f7fe fd88 	bl	8002630 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <HAL_I2C_IsDeviceReady+0x13a>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	22a0      	movs	r2, #160	; 0xa0
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2ba0      	cmp	r3, #160	; 0xa0
 8003b72:	d005      	beq.n	8003b80 <HAL_I2C_IsDeviceReady+0x188>
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <HAL_I2C_IsDeviceReady+0x188>
 8003b7a:	7dbb      	ldrb	r3, [r7, #22]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0cd      	beq.n	8003b1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d129      	bne.n	8003bea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4921      	ldr	r1, [pc, #132]	; (8003c4c <HAL_I2C_IsDeviceReady+0x254>)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f9c2 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e036      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e02c      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2319      	movs	r3, #25
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	490f      	ldr	r1, [pc, #60]	; (8003c4c <HAL_I2C_IsDeviceReady+0x254>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f99e 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e012      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	f4ff af32 	bcc.w	8003a92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	00100002 	.word	0x00100002
 8003c50:	ffff0000 	.word	0xffff0000

08003c54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	460b      	mov	r3, r1
 8003c68:	813b      	strh	r3, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f960 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca4:	d103      	bne.n	8003cae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e05f      	b.n	8003d72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cb2:	897b      	ldrh	r3, [r7, #10]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	492d      	ldr	r1, [pc, #180]	; (8003d7c <I2C_RequestMemoryWrite+0x128>)
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f9bb 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e04c      	b.n	8003d72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fa46 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d107      	bne.n	8003d16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e02b      	b.n	8003d72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	611a      	str	r2, [r3, #16]
 8003d2a:	e021      	b.n	8003d70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d2c:	893b      	ldrh	r3, [r7, #8]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa20 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e005      	b.n	8003d72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d66:	893b      	ldrh	r3, [r7, #8]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	00010002 	.word	0x00010002

08003d80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f8c2 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de0:	d103      	bne.n	8003dea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0aa      	b.n	8003f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dee:	897b      	ldrh	r3, [r7, #10]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	4952      	ldr	r1, [pc, #328]	; (8003f4c <I2C_RequestMemoryRead+0x1cc>)
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f91d 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e097      	b.n	8003f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	6a39      	ldr	r1, [r7, #32]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f9a8 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d107      	bne.n	8003e52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e076      	b.n	8003f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5c:	893b      	ldrh	r3, [r7, #8]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	e021      	b.n	8003eac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e68:	893b      	ldrh	r3, [r7, #8]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f982 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d107      	bne.n	8003e9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e050      	b.n	8003f44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea2:	893b      	ldrh	r3, [r7, #8]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eae:	6a39      	ldr	r1, [r7, #32]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f967 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d107      	bne.n	8003ed4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e035      	b.n	8003f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f82b 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00d      	beq.n	8003f1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0e:	d103      	bne.n	8003f18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e013      	b.n	8003f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f1c:	897b      	ldrh	r3, [r7, #10]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	4906      	ldr	r1, [pc, #24]	; (8003f4c <I2C_RequestMemoryRead+0x1cc>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f886 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	00010002 	.word	0x00010002

08003f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f60:	e048      	b.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d044      	beq.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fe fb61 	bl	8002630 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d139      	bne.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10d      	bne.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	e00c      	b.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	43da      	mvns	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d116      	bne.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e023      	b.n	800403c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10d      	bne.n	800401a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	43da      	mvns	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	e00c      	b.n	8004034 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	43da      	mvns	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	429a      	cmp	r2, r3
 8004038:	d093      	beq.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004052:	e071      	b.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d123      	bne.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800407c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0204 	orr.w	r2, r3, #4
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e067      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d041      	beq.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b4:	f7fe fabc 	bl	8002630 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d136      	bne.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10c      	bne.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e00b      	b.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	43da      	mvns	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e021      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d10c      	bne.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	43da      	mvns	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e00b      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	f47f af6d 	bne.w	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004190:	e034      	b.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f8e3 	bl	800435e <I2C_IsAcknowledgeFailed>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e034      	b.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d028      	beq.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fa41 	bl	8002630 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11d      	bne.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d016      	beq.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e007      	b.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d1c3      	bne.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004220:	e034      	b.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f89b 	bl	800435e <I2C_IsAcknowledgeFailed>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e034      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d028      	beq.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fe f9f9 	bl	8002630 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11d      	bne.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d016      	beq.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d1c3      	bne.n	8004222 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b0:	e049      	b.n	8004346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d119      	bne.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0210 	mvn.w	r2, #16
 80042c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e030      	b.n	8004356 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f4:	f7fe f99c 	bl	8002630 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11d      	bne.n	8004346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d016      	beq.n	8004346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e007      	b.n	8004356 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d1ae      	bne.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d11b      	bne.n	80043ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e272      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8087 	beq.w	80044ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043dc:	4b92      	ldr	r3, [pc, #584]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d00c      	beq.n	8004402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043e8:	4b8f      	ldr	r3, [pc, #572]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d112      	bne.n	800441a <HAL_RCC_OscConfig+0x5e>
 80043f4:	4b8c      	ldr	r3, [pc, #560]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d10b      	bne.n	800441a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004402:	4b89      	ldr	r3, [pc, #548]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d06c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x12c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d168      	bne.n	80044e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e24c      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004422:	d106      	bne.n	8004432 <HAL_RCC_OscConfig+0x76>
 8004424:	4b80      	ldr	r3, [pc, #512]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7f      	ldr	r2, [pc, #508]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800442a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e02e      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x98>
 800443a:	4b7b      	ldr	r3, [pc, #492]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a7a      	ldr	r2, [pc, #488]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4b78      	ldr	r3, [pc, #480]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a77      	ldr	r2, [pc, #476]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800444c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e01d      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0xbc>
 800445e:	4b72      	ldr	r3, [pc, #456]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a71      	ldr	r2, [pc, #452]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6e      	ldr	r2, [pc, #440]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 8004478:	4b6b      	ldr	r3, [pc, #428]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6a      	ldr	r2, [pc, #424]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b68      	ldr	r3, [pc, #416]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a67      	ldr	r2, [pc, #412]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe f8ca 	bl	8002630 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fe f8c6 	bl	8002630 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e200      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b5d      	ldr	r3, [pc, #372]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xe4>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fe f8b6 	bl	8002630 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fe f8b2 	bl	8002630 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1ec      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	4b53      	ldr	r3, [pc, #332]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x10c>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d063      	beq.n	80045be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f6:	4b4c      	ldr	r3, [pc, #304]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004502:	4b49      	ldr	r3, [pc, #292]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b08      	cmp	r3, #8
 800450c:	d11c      	bne.n	8004548 <HAL_RCC_OscConfig+0x18c>
 800450e:	4b46      	ldr	r3, [pc, #280]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	4b43      	ldr	r3, [pc, #268]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x176>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e1c0      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4939      	ldr	r1, [pc, #228]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	e03a      	b.n	80045be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	4b36      	ldr	r3, [pc, #216]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fe f86b 	bl	8002630 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fe f867 	bl	8002630 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1a1      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4927      	ldr	r1, [pc, #156]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe f84a 	bl	8002630 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fe f846 	bl	8002630 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e180      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03a      	beq.n	8004640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_RCC_OscConfig+0x274>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d8:	f7fe f82a 	bl	8002630 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fe f826 	bl	8002630 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e160      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045fe:	2001      	movs	r0, #1
 8004600:	f000 faba 	bl	8004b78 <RCC_Delay>
 8004604:	e01c      	b.n	8004640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <HAL_RCC_OscConfig+0x274>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460c:	f7fe f810 	bl	8002630 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004612:	e00f      	b.n	8004634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004614:	f7fe f80c 	bl	8002630 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d908      	bls.n	8004634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e146      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	42420000 	.word	0x42420000
 8004630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	4b92      	ldr	r3, [pc, #584]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e9      	bne.n	8004614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a6 	beq.w	800479a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4b8b      	ldr	r3, [pc, #556]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10d      	bne.n	800467a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4a87      	ldr	r2, [pc, #540]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	61d3      	str	r3, [r2, #28]
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b82      	ldr	r3, [pc, #520]	; (8004884 <HAL_RCC_OscConfig+0x4c8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004686:	4b7f      	ldr	r3, [pc, #508]	; (8004884 <HAL_RCC_OscConfig+0x4c8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7e      	ldr	r2, [pc, #504]	; (8004884 <HAL_RCC_OscConfig+0x4c8>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fd ffcd 	bl	8002630 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fd ffc9 	bl	8002630 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	; 0x64
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e103      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b75      	ldr	r3, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x4c8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x312>
 80046c0:	4b6f      	ldr	r3, [pc, #444]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4a6e      	ldr	r2, [pc, #440]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6213      	str	r3, [r2, #32]
 80046cc:	e02d      	b.n	800472a <HAL_RCC_OscConfig+0x36e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x334>
 80046d6:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4a69      	ldr	r2, [pc, #420]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6213      	str	r3, [r2, #32]
 80046e2:	4b67      	ldr	r3, [pc, #412]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a66      	ldr	r2, [pc, #408]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	6213      	str	r3, [r2, #32]
 80046ee:	e01c      	b.n	800472a <HAL_RCC_OscConfig+0x36e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d10c      	bne.n	8004712 <HAL_RCC_OscConfig+0x356>
 80046f8:	4b61      	ldr	r3, [pc, #388]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4a60      	ldr	r2, [pc, #384]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	6213      	str	r3, [r2, #32]
 8004704:	4b5e      	ldr	r3, [pc, #376]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4a5d      	ldr	r2, [pc, #372]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6213      	str	r3, [r2, #32]
 8004710:	e00b      	b.n	800472a <HAL_RCC_OscConfig+0x36e>
 8004712:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4a5a      	ldr	r2, [pc, #360]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6213      	str	r3, [r2, #32]
 800471e:	4b58      	ldr	r3, [pc, #352]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	4a57      	ldr	r2, [pc, #348]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	f023 0304 	bic.w	r3, r3, #4
 8004728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d015      	beq.n	800475e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fd ff7d 	bl	8002630 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fd ff79 	bl	8002630 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0b1      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004750:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ee      	beq.n	800473a <HAL_RCC_OscConfig+0x37e>
 800475c:	e014      	b.n	8004788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fd ff67 	bl	8002630 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fd ff63 	bl	8002630 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e09b      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477c:	4b40      	ldr	r3, [pc, #256]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ee      	bne.n	8004766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d105      	bne.n	800479a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478e:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4a3b      	ldr	r2, [pc, #236]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8087 	beq.w	80048b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d061      	beq.n	8004874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d146      	bne.n	8004846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b8:	4b33      	ldr	r3, [pc, #204]	; (8004888 <HAL_RCC_OscConfig+0x4cc>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fd ff37 	bl	8002630 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fd ff33 	bl	8002630 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e06d      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d8:	4b29      	ldr	r3, [pc, #164]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d108      	bne.n	8004800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ee:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4921      	ldr	r1, [pc, #132]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004800:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a19      	ldr	r1, [r3, #32]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	430b      	orrs	r3, r1
 8004812:	491b      	ldr	r1, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x4cc>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fd ff07 	bl	8002630 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004826:	f7fd ff03 	bl	8002630 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e03d      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x46a>
 8004844:	e035      	b.n	80048b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCC_OscConfig+0x4cc>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fd fef0 	bl	8002630 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd feec 	bl	8002630 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e026      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x498>
 8004872:	e01e      	b.n	80048b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e019      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
 8004880:	40021000 	.word	0x40021000
 8004884:	40007000 	.word	0x40007000
 8004888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_OscConfig+0x500>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	429a      	cmp	r2, r3
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000

080048c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0d0      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048d4:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d910      	bls.n	8004904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b67      	ldr	r3, [pc, #412]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 0207 	bic.w	r2, r3, #7
 80048ea:	4965      	ldr	r1, [pc, #404]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0b8      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d020      	beq.n	8004952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800491c:	4b59      	ldr	r3, [pc, #356]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4a58      	ldr	r2, [pc, #352]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004934:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800493e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004940:	4b50      	ldr	r3, [pc, #320]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	494d      	ldr	r1, [pc, #308]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	4313      	orrs	r3, r2
 8004950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d040      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	4b47      	ldr	r3, [pc, #284]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d115      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e07f      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497e:	4b41      	ldr	r3, [pc, #260]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e073      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498e:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e06b      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499e:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f023 0203 	bic.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4936      	ldr	r1, [pc, #216]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b0:	f7fd fe3e 	bl	8002630 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b8:	f7fd fe3a 	bl	8002630 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e053      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 020c 	and.w	r2, r3, #12
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1eb      	bne.n	80049b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e0:	4b27      	ldr	r3, [pc, #156]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d210      	bcs.n	8004a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 0207 	bic.w	r2, r3, #7
 80049f6:	4922      	ldr	r1, [pc, #136]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e032      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4916      	ldr	r1, [pc, #88]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	490e      	ldr	r1, [pc, #56]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a4e:	f000 f821 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004a52:	4602      	mov	r2, r0
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	490a      	ldr	r1, [pc, #40]	; (8004a88 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	5ccb      	ldrb	r3, [r1, r3]
 8004a62:	fa22 f303 	lsr.w	r3, r2, r3
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <HAL_RCC_ClockConfig+0x1cc>)
 8004a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HAL_RCC_ClockConfig+0x1d0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fd fd9c 	bl	80025ac <HAL_InitTick>

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40021000 	.word	0x40021000
 8004a88:	08006df0 	.word	0x08006df0
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	20000004 	.word	0x20000004

08004a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0x36>
 8004ac2:	e027      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ac6:	613b      	str	r3, [r7, #16]
      break;
 8004ac8:	e027      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0c9b      	lsrs	r3, r3, #18
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ad4:	5cd3      	ldrb	r3, [r2, r3]
 8004ad6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d010      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	0c5b      	lsrs	r3, r3, #17
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	4a11      	ldr	r2, [pc, #68]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004af6:	fb03 f202 	mul.w	r2, r3, r2
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	e004      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	613b      	str	r3, [r7, #16]
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b16:	613b      	str	r3, [r7, #16]
      break;
 8004b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b1a:	693b      	ldr	r3, [r7, #16]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	007a1200 	.word	0x007a1200
 8004b30:	08006e08 	.word	0x08006e08
 8004b34:	08006e18 	.word	0x08006e18
 8004b38:	003d0900 	.word	0x003d0900

08004b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b40:	4b02      	ldr	r3, [pc, #8]	; (8004b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	20000000 	.word	0x20000000

08004b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b54:	f7ff fff2 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000
 8004b74:	08006e00 	.word	0x08006e00

08004b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <RCC_Delay+0x34>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <RCC_Delay+0x38>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	0a5b      	lsrs	r3, r3, #9
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b94:	bf00      	nop
  }
  while (Delay --);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1e5a      	subs	r2, r3, #1
 8004b9a:	60fa      	str	r2, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f9      	bne.n	8004b94 <RCC_Delay+0x1c>
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	10624dd3 	.word	0x10624dd3

08004bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e041      	b.n	8004c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd fbe0 	bl	80023a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 fd5a 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e041      	b.n	8004ce8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f839 	bl	8004cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 fd0b 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
	...

08004d04 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e022      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0x72>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d109      	bne.n	8004d4a <HAL_TIM_PWM_Start_DMA+0x46>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e015      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0x72>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d109      	bne.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x60>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e008      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0x72>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e153      	b.n	8005026 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <HAL_TIM_PWM_Start_DMA+0x94>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e022      	b.n	8004dde <HAL_TIM_PWM_Start_DMA+0xda>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d109      	bne.n	8004db2 <HAL_TIM_PWM_Start_DMA+0xae>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e015      	b.n	8004dde <HAL_TIM_PWM_Start_DMA+0xda>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start_DMA+0xc8>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e008      	b.n	8004dde <HAL_TIM_PWM_Start_DMA+0xda>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d024      	beq.n	8004e2c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_TIM_PWM_Start_DMA+0xea>
 8004de8:	887b      	ldrh	r3, [r7, #2]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e119      	b.n	8005026 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e00:	e016      	b.n	8004e30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	e00e      	b.n	8004e30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e20:	e006      	b.n	8004e30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e2a:	e001      	b.n	8004e30 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0fa      	b.n	8005026 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	f200 80ae 	bhi.w	8004f94 <HAL_TIM_PWM_Start_DMA+0x290>
 8004e38:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004f95 	.word	0x08004f95
 8004e48:	08004f95 	.word	0x08004f95
 8004e4c:	08004f95 	.word	0x08004f95
 8004e50:	08004ebd 	.word	0x08004ebd
 8004e54:	08004f95 	.word	0x08004f95
 8004e58:	08004f95 	.word	0x08004f95
 8004e5c:	08004f95 	.word	0x08004f95
 8004e60:	08004f05 	.word	0x08004f05
 8004e64:	08004f95 	.word	0x08004f95
 8004e68:	08004f95 	.word	0x08004f95
 8004e6c:	08004f95 	.word	0x08004f95
 8004e70:	08004f4d 	.word	0x08004f4d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	4a6d      	ldr	r2, [pc, #436]	; (8005030 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	4a6c      	ldr	r2, [pc, #432]	; (8005034 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	4a6b      	ldr	r2, [pc, #428]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3334      	adds	r3, #52	; 0x34
 8004e98:	461a      	mov	r2, r3
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	f7fd fd5e 	bl	800295c <HAL_DMA_Start_IT>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0bd      	b.n	8005026 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb8:	60da      	str	r2, [r3, #12]
      break;
 8004eba:	e06e      	b.n	8004f9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	4a5b      	ldr	r2, [pc, #364]	; (8005030 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	4a5a      	ldr	r2, [pc, #360]	; (8005034 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	4a59      	ldr	r2, [pc, #356]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3338      	adds	r3, #56	; 0x38
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	f7fd fd3a 	bl	800295c <HAL_DMA_Start_IT>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e099      	b.n	8005026 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f00:	60da      	str	r2, [r3, #12]
      break;
 8004f02:	e04a      	b.n	8004f9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	4a49      	ldr	r2, [pc, #292]	; (8005030 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	4a48      	ldr	r2, [pc, #288]	; (8005034 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	4a47      	ldr	r2, [pc, #284]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	333c      	adds	r3, #60	; 0x3c
 8004f28:	461a      	mov	r2, r3
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	f7fd fd16 	bl	800295c <HAL_DMA_Start_IT>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e075      	b.n	8005026 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f48:	60da      	str	r2, [r3, #12]
      break;
 8004f4a:	e026      	b.n	8004f9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	4a37      	ldr	r2, [pc, #220]	; (8005030 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	4a36      	ldr	r2, [pc, #216]	; (8005034 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	4a35      	ldr	r2, [pc, #212]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3340      	adds	r3, #64	; 0x40
 8004f70:	461a      	mov	r2, r3
 8004f72:	887b      	ldrh	r3, [r7, #2]
 8004f74:	f7fd fcf2 	bl	800295c <HAL_DMA_Start_IT>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e051      	b.n	8005026 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f90:	60da      	str	r2, [r3, #12]
      break;
 8004f92:	e002      	b.n	8004f9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
      break;
 8004f98:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d141      	bne.n	8005024 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fdff 	bl	8005bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a22      	ldr	r2, [pc, #136]	; (800503c <HAL_TIM_PWM_Start_DMA+0x338>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d107      	bne.n	8004fc8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <HAL_TIM_PWM_Start_DMA+0x338>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d009      	beq.n	8004ff0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a17      	ldr	r2, [pc, #92]	; (8005040 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a16      	ldr	r2, [pc, #88]	; (8005044 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d111      	bne.n	8005014 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d010      	beq.n	8005024 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005012:	e007      	b.n	8005024 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	0800559d 	.word	0x0800559d
 8005034:	08005645 	.word	0x08005645
 8005038:	0800550b 	.word	0x0800550b
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800

08005048 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d855      	bhi.n	8005108 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005099 	.word	0x08005099
 8005068:	08005109 	.word	0x08005109
 800506c:	08005109 	.word	0x08005109
 8005070:	08005109 	.word	0x08005109
 8005074:	080050b5 	.word	0x080050b5
 8005078:	08005109 	.word	0x08005109
 800507c:	08005109 	.word	0x08005109
 8005080:	08005109 	.word	0x08005109
 8005084:	080050d1 	.word	0x080050d1
 8005088:	08005109 	.word	0x08005109
 800508c:	08005109 	.word	0x08005109
 8005090:	08005109 	.word	0x08005109
 8005094:	080050ed 	.word	0x080050ed
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fd fcb5 	bl	8002a1c <HAL_DMA_Abort_IT>
      break;
 80050b2:	e02c      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fd fca7 	bl	8002a1c <HAL_DMA_Abort_IT>
      break;
 80050ce:	e01e      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fd fc99 	bl	8002a1c <HAL_DMA_Abort_IT>
      break;
 80050ea:	e010      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	4618      	mov	r0, r3
 8005102:	f7fd fc8b 	bl	8002a1c <HAL_DMA_Abort_IT>
      break;
 8005106:	e002      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	bf00      	nop
  }

  if (status == HAL_OK)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d157      	bne.n	80051c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2200      	movs	r2, #0
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fd45 	bl	8005bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a2a      	ldr	r2, [pc, #168]	; (80051d0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d117      	bne.n	800515c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	f241 1311 	movw	r3, #4369	; 0x1111
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <HAL_TIM_PWM_Stop_DMA+0x114>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	f240 4344 	movw	r3, #1092	; 0x444
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d107      	bne.n	800515c <HAL_TIM_PWM_Stop_DMA+0x114>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800515a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	f241 1311 	movw	r3, #4369	; 0x1111
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10f      	bne.n	800518c <HAL_TIM_PWM_Stop_DMA+0x144>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	f240 4344 	movw	r3, #1092	; 0x444
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d107      	bne.n	800518c <HAL_TIM_PWM_Stop_DMA+0x144>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <HAL_TIM_PWM_Stop_DMA+0x154>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519a:	e013      	b.n	80051c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d104      	bne.n	80051ac <HAL_TIM_PWM_Stop_DMA+0x164>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051aa:	e00b      	b.n	80051c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d104      	bne.n	80051bc <HAL_TIM_PWM_Stop_DMA+0x174>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ba:	e003      	b.n	80051c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40012c00 	.word	0x40012c00

080051d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e0ae      	b.n	8005350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	f200 809f 	bhi.w	8005340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	0800523d 	.word	0x0800523d
 800520c:	08005341 	.word	0x08005341
 8005210:	08005341 	.word	0x08005341
 8005214:	08005341 	.word	0x08005341
 8005218:	0800527d 	.word	0x0800527d
 800521c:	08005341 	.word	0x08005341
 8005220:	08005341 	.word	0x08005341
 8005224:	08005341 	.word	0x08005341
 8005228:	080052bf 	.word	0x080052bf
 800522c:	08005341 	.word	0x08005341
 8005230:	08005341 	.word	0x08005341
 8005234:	08005341 	.word	0x08005341
 8005238:	080052ff 	.word	0x080052ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fa94 	bl	8005770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0208 	orr.w	r2, r2, #8
 8005256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0204 	bic.w	r2, r2, #4
 8005266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6999      	ldr	r1, [r3, #24]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	619a      	str	r2, [r3, #24]
      break;
 800527a:	e064      	b.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fada 	bl	800583c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6999      	ldr	r1, [r3, #24]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	021a      	lsls	r2, r3, #8
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	619a      	str	r2, [r3, #24]
      break;
 80052bc:	e043      	b.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fb23 	bl	8005910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0208 	orr.w	r2, r2, #8
 80052d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0204 	bic.w	r2, r2, #4
 80052e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	61da      	str	r2, [r3, #28]
      break;
 80052fc:	e023      	b.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fb6d 	bl	80059e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69d9      	ldr	r1, [r3, #28]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	021a      	lsls	r2, r3, #8
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	61da      	str	r2, [r3, #28]
      break;
 800533e:	e002      	b.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
      break;
 8005344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIM_ConfigClockSource+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e0b4      	b.n	80054de <HAL_TIM_ConfigClockSource+0x186>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800539a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ac:	d03e      	beq.n	800542c <HAL_TIM_ConfigClockSource+0xd4>
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b2:	f200 8087 	bhi.w	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	f000 8086 	beq.w	80054ca <HAL_TIM_ConfigClockSource+0x172>
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	d87f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b70      	cmp	r3, #112	; 0x70
 80053c6:	d01a      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0xa6>
 80053c8:	2b70      	cmp	r3, #112	; 0x70
 80053ca:	d87b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d050      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x11a>
 80053d0:	2b60      	cmp	r3, #96	; 0x60
 80053d2:	d877      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b50      	cmp	r3, #80	; 0x50
 80053d6:	d03c      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xfa>
 80053d8:	2b50      	cmp	r3, #80	; 0x50
 80053da:	d873      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d058      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x13a>
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d86f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b30      	cmp	r3, #48	; 0x30
 80053e6:	d064      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b30      	cmp	r3, #48	; 0x30
 80053ea:	d86b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d060      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d867      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d05a      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053fc:	e062      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f000 fbae 	bl	8005b6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	609a      	str	r2, [r3, #8]
      break;
 800542a:	e04f      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f000 fb97 	bl	8005b6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544e:	609a      	str	r2, [r3, #8]
      break;
 8005450:	e03c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	461a      	mov	r2, r3
 8005460:	f000 fb0e 	bl	8005a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2150      	movs	r1, #80	; 0x50
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fb65 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 8005470:	e02c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	461a      	mov	r2, r3
 8005480:	f000 fb2c 	bl	8005adc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2160      	movs	r1, #96	; 0x60
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fb55 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 8005490:	e01c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 faee 	bl	8005a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fb45 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 80054b0:	e00c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f000 fb3c 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 80054c2:	e003      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      break;
 80054c8:	e000      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	d107      	bne.n	8005532 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	e02a      	b.n	8005588 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d107      	bne.n	800554c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2202      	movs	r2, #2
 8005540:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554a:	e01d      	b.n	8005588 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	429a      	cmp	r2, r3
 8005554:	d107      	bne.n	8005566 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2204      	movs	r2, #4
 800555a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	e010      	b.n	8005588 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d107      	bne.n	8005580 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2208      	movs	r2, #8
 8005574:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800557e:	e003      	b.n	8005588 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff ffb5 	bl	80054f8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d10b      	bne.n	80055cc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d136      	bne.n	8005630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ca:	e031      	b.n	8005630 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d10b      	bne.n	80055ee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2202      	movs	r2, #2
 80055da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d125      	bne.n	8005630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ec:	e020      	b.n	8005630 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d10b      	bne.n	8005610 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2204      	movs	r2, #4
 80055fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d114      	bne.n	8005630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560e:	e00f      	b.n	8005630 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d10a      	bne.n	8005630 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2208      	movs	r2, #8
 800561e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7fc fbf5 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d103      	bne.n	8005664 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	771a      	strb	r2, [r3, #28]
 8005662:	e019      	b.n	8005698 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	d103      	bne.n	8005676 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2202      	movs	r2, #2
 8005672:	771a      	strb	r2, [r3, #28]
 8005674:	e010      	b.n	8005698 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d103      	bne.n	8005688 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2204      	movs	r2, #4
 8005684:	771a      	strb	r2, [r3, #28]
 8005686:	e007      	b.n	8005698 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d102      	bne.n	8005698 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2208      	movs	r2, #8
 8005696:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff ff24 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a29      	ldr	r2, [pc, #164]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00b      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d007      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a26      	ldr	r2, [pc, #152]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_Base_SetConfig+0xc0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <TIM_Base_SetConfig+0xc0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800

08005770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f023 0201 	bic.w	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 0302 	bic.w	r3, r3, #2
 80057b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <TIM_OC1_SetConfig+0xc8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10c      	bne.n	80057e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0308 	bic.w	r3, r3, #8
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 0304 	bic.w	r3, r3, #4
 80057e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a13      	ldr	r2, [pc, #76]	; (8005838 <TIM_OC1_SetConfig+0xc8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00

0800583c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f023 0210 	bic.w	r2, r3, #16
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0320 	bic.w	r3, r3, #32
 8005886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <TIM_OC2_SetConfig+0xd0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a14      	ldr	r2, [pc, #80]	; (800590c <TIM_OC2_SetConfig+0xd0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d113      	bne.n	80058e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00

08005910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1d      	ldr	r2, [pc, #116]	; (80059e0 <TIM_OC3_SetConfig+0xd0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10d      	bne.n	800598a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <TIM_OC3_SetConfig+0xd0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d113      	bne.n	80059ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40012c00 	.word	0x40012c00

080059e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <TIM_OC4_SetConfig+0x98>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d109      	bne.n	8005a58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	019b      	lsls	r3, r3, #6
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	40012c00 	.word	0x40012c00

08005a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0201 	bic.w	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 030a 	bic.w	r3, r3, #10
 8005abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0210 	bic.w	r2, r3, #16
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	031b      	lsls	r3, r3, #12
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f043 0307 	orr.w	r3, r3, #7
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	609a      	str	r2, [r3, #8]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	021a      	lsls	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	609a      	str	r2, [r3, #8]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	401a      	ands	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e046      	b.n	8005c9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a16      	ldr	r2, [pc, #88]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c58:	d009      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a12      	ldr	r2, [pc, #72]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a10      	ldr	r2, [pc, #64]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10c      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40000400 	.word	0x40000400
 8005cac:	40000800 	.word	0x40000800

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	2600      	movs	r6, #0
 8005cb4:	4d0c      	ldr	r5, [pc, #48]	; (8005ce8 <__libc_init_array+0x38>)
 8005cb6:	4c0d      	ldr	r4, [pc, #52]	; (8005cec <__libc_init_array+0x3c>)
 8005cb8:	1b64      	subs	r4, r4, r5
 8005cba:	10a4      	asrs	r4, r4, #2
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	f001 f888 	bl	8006dd4 <_init>
 8005cc4:	2600      	movs	r6, #0
 8005cc6:	4d0a      	ldr	r5, [pc, #40]	; (8005cf0 <__libc_init_array+0x40>)
 8005cc8:	4c0a      	ldr	r4, [pc, #40]	; (8005cf4 <__libc_init_array+0x44>)
 8005cca:	1b64      	subs	r4, r4, r5
 8005ccc:	10a4      	asrs	r4, r4, #2
 8005cce:	42a6      	cmp	r6, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce2:	4798      	blx	r3
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	08006ff8 	.word	0x08006ff8
 8005cec:	08006ff8 	.word	0x08006ff8
 8005cf0:	08006ff8 	.word	0x08006ff8
 8005cf4:	08006ffc 	.word	0x08006ffc

08005cf8 <memset>:
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4402      	add	r2, r0
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <memset+0xa>
 8005d00:	4770      	bx	lr
 8005d02:	f803 1b01 	strb.w	r1, [r3], #1
 8005d06:	e7f9      	b.n	8005cfc <memset+0x4>

08005d08 <tan>:
 8005d08:	b530      	push	{r4, r5, lr}
 8005d0a:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <tan+0x4c>)
 8005d0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d10:	4293      	cmp	r3, r2
 8005d12:	b087      	sub	sp, #28
 8005d14:	dc06      	bgt.n	8005d24 <tan+0x1c>
 8005d16:	2301      	movs	r3, #1
 8005d18:	2200      	movs	r2, #0
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f000 fd5b 	bl	80067d8 <__kernel_tan>
 8005d22:	e006      	b.n	8005d32 <tan+0x2a>
 8005d24:	4a0c      	ldr	r2, [pc, #48]	; (8005d58 <tan+0x50>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	dd05      	ble.n	8005d36 <tan+0x2e>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	f7fa fa13 	bl	8000158 <__aeabi_dsub>
 8005d32:	b007      	add	sp, #28
 8005d34:	bd30      	pop	{r4, r5, pc}
 8005d36:	aa02      	add	r2, sp, #8
 8005d38:	f000 f812 	bl	8005d60 <__ieee754_rem_pio2>
 8005d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d40:	0040      	lsls	r0, r0, #1
 8005d42:	f000 0002 	and.w	r0, r0, #2
 8005d46:	f1c0 0001 	rsb	r0, r0, #1
 8005d4a:	9000      	str	r0, [sp, #0]
 8005d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d50:	e7e5      	b.n	8005d1e <tan+0x16>
 8005d52:	bf00      	nop
 8005d54:	3fe921fb 	.word	0x3fe921fb
 8005d58:	7fefffff 	.word	0x7fefffff
 8005d5c:	00000000 	.word	0x00000000

08005d60 <__ieee754_rem_pio2>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	4614      	mov	r4, r2
 8005d66:	4ac4      	ldr	r2, [pc, #784]	; (8006078 <__ieee754_rem_pio2+0x318>)
 8005d68:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005d6c:	b08d      	sub	sp, #52	; 0x34
 8005d6e:	4592      	cmp	sl, r2
 8005d70:	9104      	str	r1, [sp, #16]
 8005d72:	dc07      	bgt.n	8005d84 <__ieee754_rem_pio2+0x24>
 8005d74:	2200      	movs	r2, #0
 8005d76:	2300      	movs	r3, #0
 8005d78:	e9c4 0100 	strd	r0, r1, [r4]
 8005d7c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005d80:	2500      	movs	r5, #0
 8005d82:	e024      	b.n	8005dce <__ieee754_rem_pio2+0x6e>
 8005d84:	4abd      	ldr	r2, [pc, #756]	; (800607c <__ieee754_rem_pio2+0x31c>)
 8005d86:	4592      	cmp	sl, r2
 8005d88:	dc72      	bgt.n	8005e70 <__ieee754_rem_pio2+0x110>
 8005d8a:	9b04      	ldr	r3, [sp, #16]
 8005d8c:	4dbc      	ldr	r5, [pc, #752]	; (8006080 <__ieee754_rem_pio2+0x320>)
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	a3ab      	add	r3, pc, #684	; (adr r3, 8006040 <__ieee754_rem_pio2+0x2e0>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	dd36      	ble.n	8005e06 <__ieee754_rem_pio2+0xa6>
 8005d98:	f7fa f9de 	bl	8000158 <__aeabi_dsub>
 8005d9c:	45aa      	cmp	sl, r5
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460f      	mov	r7, r1
 8005da2:	d018      	beq.n	8005dd6 <__ieee754_rem_pio2+0x76>
 8005da4:	a3a8      	add	r3, pc, #672	; (adr r3, 8006048 <__ieee754_rem_pio2+0x2e8>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa f9d5 	bl	8000158 <__aeabi_dsub>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4630      	mov	r0, r6
 8005db4:	e9c4 2300 	strd	r2, r3, [r4]
 8005db8:	4639      	mov	r1, r7
 8005dba:	f7fa f9cd 	bl	8000158 <__aeabi_dsub>
 8005dbe:	a3a2      	add	r3, pc, #648	; (adr r3, 8006048 <__ieee754_rem_pio2+0x2e8>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa f9c8 	bl	8000158 <__aeabi_dsub>
 8005dc8:	2501      	movs	r5, #1
 8005dca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005dce:	4628      	mov	r0, r5
 8005dd0:	b00d      	add	sp, #52	; 0x34
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	a39e      	add	r3, pc, #632	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2f0>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa f9bc 	bl	8000158 <__aeabi_dsub>
 8005de0:	a39d      	add	r3, pc, #628	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f8>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	4606      	mov	r6, r0
 8005de8:	460f      	mov	r7, r1
 8005dea:	f7fa f9b5 	bl	8000158 <__aeabi_dsub>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4630      	mov	r0, r6
 8005df4:	e9c4 2300 	strd	r2, r3, [r4]
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa f9ad 	bl	8000158 <__aeabi_dsub>
 8005dfe:	a396      	add	r3, pc, #600	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f8>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	e7de      	b.n	8005dc4 <__ieee754_rem_pio2+0x64>
 8005e06:	f7fa f9a9 	bl	800015c <__adddf3>
 8005e0a:	45aa      	cmp	sl, r5
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	d016      	beq.n	8005e40 <__ieee754_rem_pio2+0xe0>
 8005e12:	a38d      	add	r3, pc, #564	; (adr r3, 8006048 <__ieee754_rem_pio2+0x2e8>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f7fa f9a0 	bl	800015c <__adddf3>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4630      	mov	r0, r6
 8005e22:	e9c4 2300 	strd	r2, r3, [r4]
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa f996 	bl	8000158 <__aeabi_dsub>
 8005e2c:	a386      	add	r3, pc, #536	; (adr r3, 8006048 <__ieee754_rem_pio2+0x2e8>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa f993 	bl	800015c <__adddf3>
 8005e36:	f04f 35ff 	mov.w	r5, #4294967295
 8005e3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e3e:	e7c6      	b.n	8005dce <__ieee754_rem_pio2+0x6e>
 8005e40:	a383      	add	r3, pc, #524	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2f0>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa f989 	bl	800015c <__adddf3>
 8005e4a:	a383      	add	r3, pc, #524	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f8>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	4606      	mov	r6, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	f7fa f982 	bl	800015c <__adddf3>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	e9c4 2300 	strd	r2, r3, [r4]
 8005e62:	4639      	mov	r1, r7
 8005e64:	f7fa f978 	bl	8000158 <__aeabi_dsub>
 8005e68:	a37b      	add	r3, pc, #492	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f8>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	e7e0      	b.n	8005e32 <__ieee754_rem_pio2+0xd2>
 8005e70:	4a84      	ldr	r2, [pc, #528]	; (8006084 <__ieee754_rem_pio2+0x324>)
 8005e72:	4592      	cmp	sl, r2
 8005e74:	f300 80d5 	bgt.w	8006022 <__ieee754_rem_pio2+0x2c2>
 8005e78:	f000 feaa 	bl	8006bd0 <fabs>
 8005e7c:	a378      	add	r3, pc, #480	; (adr r3, 8006060 <__ieee754_rem_pio2+0x300>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	4606      	mov	r6, r0
 8005e84:	460f      	mov	r7, r1
 8005e86:	f7fa fb1f 	bl	80004c8 <__aeabi_dmul>
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4b7e      	ldr	r3, [pc, #504]	; (8006088 <__ieee754_rem_pio2+0x328>)
 8005e8e:	f7fa f965 	bl	800015c <__adddf3>
 8005e92:	f7fa fdb3 	bl	80009fc <__aeabi_d2iz>
 8005e96:	4605      	mov	r5, r0
 8005e98:	f7fa faac 	bl	80003f4 <__aeabi_i2d>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ea4:	a366      	add	r3, pc, #408	; (adr r3, 8006040 <__ieee754_rem_pio2+0x2e0>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f7fa fb0d 	bl	80004c8 <__aeabi_dmul>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	f7fa f94f 	bl	8000158 <__aeabi_dsub>
 8005eba:	a363      	add	r3, pc, #396	; (adr r3, 8006048 <__ieee754_rem_pio2+0x2e8>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	4689      	mov	r9, r1
 8005ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ec8:	f7fa fafe 	bl	80004c8 <__aeabi_dmul>
 8005ecc:	2d1f      	cmp	r5, #31
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460f      	mov	r7, r1
 8005ed2:	dc0e      	bgt.n	8005ef2 <__ieee754_rem_pio2+0x192>
 8005ed4:	4b6d      	ldr	r3, [pc, #436]	; (800608c <__ieee754_rem_pio2+0x32c>)
 8005ed6:	1e6a      	subs	r2, r5, #1
 8005ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005edc:	4553      	cmp	r3, sl
 8005ede:	d008      	beq.n	8005ef2 <__ieee754_rem_pio2+0x192>
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	f7fa f936 	bl	8000158 <__aeabi_dsub>
 8005eec:	e9c4 0100 	strd	r0, r1, [r4]
 8005ef0:	e013      	b.n	8005f1a <__ieee754_rem_pio2+0x1ba>
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	4649      	mov	r1, r9
 8005efa:	f7fa f92d 	bl	8000158 <__aeabi_dsub>
 8005efe:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f08:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005f0c:	f1ba 0f10 	cmp.w	sl, #16
 8005f10:	dc1f      	bgt.n	8005f52 <__ieee754_rem_pio2+0x1f2>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	e9c4 2300 	strd	r2, r3, [r4]
 8005f1a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4653      	mov	r3, sl
 8005f22:	4649      	mov	r1, r9
 8005f24:	f7fa f918 	bl	8000158 <__aeabi_dsub>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa f914 	bl	8000158 <__aeabi_dsub>
 8005f30:	460b      	mov	r3, r1
 8005f32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f36:	9904      	ldr	r1, [sp, #16]
 8005f38:	4602      	mov	r2, r0
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	f6bf af47 	bge.w	8005dce <__ieee754_rem_pio2+0x6e>
 8005f40:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8005f44:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005f48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f4c:	60e3      	str	r3, [r4, #12]
 8005f4e:	426d      	negs	r5, r5
 8005f50:	e73d      	b.n	8005dce <__ieee754_rem_pio2+0x6e>
 8005f52:	a33f      	add	r3, pc, #252	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2f0>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5c:	f7fa fab4 	bl	80004c8 <__aeabi_dmul>
 8005f60:	4606      	mov	r6, r0
 8005f62:	460f      	mov	r7, r1
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4640      	mov	r0, r8
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	f7fa f8f4 	bl	8000158 <__aeabi_dsub>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4682      	mov	sl, r0
 8005f76:	468b      	mov	fp, r1
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa f8ec 	bl	8000158 <__aeabi_dsub>
 8005f80:	4632      	mov	r2, r6
 8005f82:	463b      	mov	r3, r7
 8005f84:	f7fa f8e8 	bl	8000158 <__aeabi_dsub>
 8005f88:	a333      	add	r3, pc, #204	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f8>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460f      	mov	r7, r1
 8005f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f96:	f7fa fa97 	bl	80004c8 <__aeabi_dmul>
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	f7fa f8db 	bl	8000158 <__aeabi_dsub>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	4650      	mov	r0, sl
 8005fac:	4659      	mov	r1, fp
 8005fae:	f7fa f8d3 	bl	8000158 <__aeabi_dsub>
 8005fb2:	9a05      	ldr	r2, [sp, #20]
 8005fb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b31      	cmp	r3, #49	; 0x31
 8005fbc:	dc06      	bgt.n	8005fcc <__ieee754_rem_pio2+0x26c>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	46d0      	mov	r8, sl
 8005fc4:	46d9      	mov	r9, fp
 8005fc6:	e9c4 2300 	strd	r2, r3, [r4]
 8005fca:	e7a6      	b.n	8005f1a <__ieee754_rem_pio2+0x1ba>
 8005fcc:	a326      	add	r3, pc, #152	; (adr r3, 8006068 <__ieee754_rem_pio2+0x308>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd6:	f7fa fa77 	bl	80004c8 <__aeabi_dmul>
 8005fda:	4606      	mov	r6, r0
 8005fdc:	460f      	mov	r7, r1
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	f7fa f8b7 	bl	8000158 <__aeabi_dsub>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4680      	mov	r8, r0
 8005ff0:	4689      	mov	r9, r1
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	f7fa f8af 	bl	8000158 <__aeabi_dsub>
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	f7fa f8ab 	bl	8000158 <__aeabi_dsub>
 8006002:	a31b      	add	r3, pc, #108	; (adr r3, 8006070 <__ieee754_rem_pio2+0x310>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	4606      	mov	r6, r0
 800600a:	460f      	mov	r7, r1
 800600c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006010:	f7fa fa5a 	bl	80004c8 <__aeabi_dmul>
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	f7fa f89e 	bl	8000158 <__aeabi_dsub>
 800601c:	4606      	mov	r6, r0
 800601e:	460f      	mov	r7, r1
 8006020:	e75e      	b.n	8005ee0 <__ieee754_rem_pio2+0x180>
 8006022:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <__ieee754_rem_pio2+0x330>)
 8006024:	4592      	cmp	sl, r2
 8006026:	dd35      	ble.n	8006094 <__ieee754_rem_pio2+0x334>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	f7fa f894 	bl	8000158 <__aeabi_dsub>
 8006030:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006034:	e9c4 0100 	strd	r0, r1, [r4]
 8006038:	e6a2      	b.n	8005d80 <__ieee754_rem_pio2+0x20>
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w
 8006040:	54400000 	.word	0x54400000
 8006044:	3ff921fb 	.word	0x3ff921fb
 8006048:	1a626331 	.word	0x1a626331
 800604c:	3dd0b461 	.word	0x3dd0b461
 8006050:	1a600000 	.word	0x1a600000
 8006054:	3dd0b461 	.word	0x3dd0b461
 8006058:	2e037073 	.word	0x2e037073
 800605c:	3ba3198a 	.word	0x3ba3198a
 8006060:	6dc9c883 	.word	0x6dc9c883
 8006064:	3fe45f30 	.word	0x3fe45f30
 8006068:	2e000000 	.word	0x2e000000
 800606c:	3ba3198a 	.word	0x3ba3198a
 8006070:	252049c1 	.word	0x252049c1
 8006074:	397b839a 	.word	0x397b839a
 8006078:	3fe921fb 	.word	0x3fe921fb
 800607c:	4002d97b 	.word	0x4002d97b
 8006080:	3ff921fb 	.word	0x3ff921fb
 8006084:	413921fb 	.word	0x413921fb
 8006088:	3fe00000 	.word	0x3fe00000
 800608c:	08006e1c 	.word	0x08006e1c
 8006090:	7fefffff 	.word	0x7fefffff
 8006094:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006098:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800609c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80060a0:	460f      	mov	r7, r1
 80060a2:	4606      	mov	r6, r0
 80060a4:	f7fa fcaa 	bl	80009fc <__aeabi_d2iz>
 80060a8:	f7fa f9a4 	bl	80003f4 <__aeabi_i2d>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4630      	mov	r0, r6
 80060b2:	4639      	mov	r1, r7
 80060b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80060b8:	f7fa f84e 	bl	8000158 <__aeabi_dsub>
 80060bc:	2200      	movs	r2, #0
 80060be:	4b22      	ldr	r3, [pc, #136]	; (8006148 <__ieee754_rem_pio2+0x3e8>)
 80060c0:	f7fa fa02 	bl	80004c8 <__aeabi_dmul>
 80060c4:	460f      	mov	r7, r1
 80060c6:	4606      	mov	r6, r0
 80060c8:	f7fa fc98 	bl	80009fc <__aeabi_d2iz>
 80060cc:	f7fa f992 	bl	80003f4 <__aeabi_i2d>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4630      	mov	r0, r6
 80060d6:	4639      	mov	r1, r7
 80060d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060dc:	f7fa f83c 	bl	8000158 <__aeabi_dsub>
 80060e0:	2200      	movs	r2, #0
 80060e2:	4b19      	ldr	r3, [pc, #100]	; (8006148 <__ieee754_rem_pio2+0x3e8>)
 80060e4:	f7fa f9f0 	bl	80004c8 <__aeabi_dmul>
 80060e8:	f04f 0803 	mov.w	r8, #3
 80060ec:	2600      	movs	r6, #0
 80060ee:	2700      	movs	r7, #0
 80060f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060f4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80060f8:	4632      	mov	r2, r6
 80060fa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80060fe:	463b      	mov	r3, r7
 8006100:	46c2      	mov	sl, r8
 8006102:	f108 38ff 	add.w	r8, r8, #4294967295
 8006106:	f7fa fc47 	bl	8000998 <__aeabi_dcmpeq>
 800610a:	2800      	cmp	r0, #0
 800610c:	d1f4      	bne.n	80060f8 <__ieee754_rem_pio2+0x398>
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <__ieee754_rem_pio2+0x3ec>)
 8006110:	462a      	mov	r2, r5
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	2302      	movs	r3, #2
 8006116:	4621      	mov	r1, r4
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	a806      	add	r0, sp, #24
 800611c:	4653      	mov	r3, sl
 800611e:	f000 f817 	bl	8006150 <__kernel_rem_pio2>
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	4605      	mov	r5, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	f6bf ae51 	bge.w	8005dce <__ieee754_rem_pio2+0x6e>
 800612c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006134:	e9c4 2300 	strd	r2, r3, [r4]
 8006138:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800613c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006140:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006144:	e703      	b.n	8005f4e <__ieee754_rem_pio2+0x1ee>
 8006146:	bf00      	nop
 8006148:	41700000 	.word	0x41700000
 800614c:	08006e9c 	.word	0x08006e9c

08006150 <__kernel_rem_pio2>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006158:	9308      	str	r3, [sp, #32]
 800615a:	9106      	str	r1, [sp, #24]
 800615c:	4bb6      	ldr	r3, [pc, #728]	; (8006438 <__kernel_rem_pio2+0x2e8>)
 800615e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006160:	f112 0f14 	cmn.w	r2, #20
 8006164:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006168:	bfa8      	it	ge
 800616a:	1ed4      	subge	r4, r2, #3
 800616c:	9302      	str	r3, [sp, #8]
 800616e:	9b08      	ldr	r3, [sp, #32]
 8006170:	bfb8      	it	lt
 8006172:	2400      	movlt	r4, #0
 8006174:	f103 33ff 	add.w	r3, r3, #4294967295
 8006178:	9307      	str	r3, [sp, #28]
 800617a:	bfa4      	itt	ge
 800617c:	2318      	movge	r3, #24
 800617e:	fb94 f4f3 	sdivge	r4, r4, r3
 8006182:	f06f 0317 	mvn.w	r3, #23
 8006186:	fb04 3303 	mla	r3, r4, r3, r3
 800618a:	eb03 0b02 	add.w	fp, r3, r2
 800618e:	9a07      	ldr	r2, [sp, #28]
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	1aa7      	subs	r7, r4, r2
 8006194:	eb03 0802 	add.w	r8, r3, r2
 8006198:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800619a:	2500      	movs	r5, #0
 800619c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80061a0:	2200      	movs	r2, #0
 80061a2:	2300      	movs	r3, #0
 80061a4:	9009      	str	r0, [sp, #36]	; 0x24
 80061a6:	ae20      	add	r6, sp, #128	; 0x80
 80061a8:	4545      	cmp	r5, r8
 80061aa:	dd14      	ble.n	80061d6 <__kernel_rem_pio2+0x86>
 80061ac:	f04f 0800 	mov.w	r8, #0
 80061b0:	9a08      	ldr	r2, [sp, #32]
 80061b2:	ab20      	add	r3, sp, #128	; 0x80
 80061b4:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80061b8:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80061bc:	9b02      	ldr	r3, [sp, #8]
 80061be:	4598      	cmp	r8, r3
 80061c0:	dc35      	bgt.n	800622e <__kernel_rem_pio2+0xde>
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	2200      	movs	r2, #0
 80061c6:	f1a3 0908 	sub.w	r9, r3, #8
 80061ca:	2300      	movs	r3, #0
 80061cc:	462f      	mov	r7, r5
 80061ce:	2600      	movs	r6, #0
 80061d0:	e9cd 2300 	strd	r2, r3, [sp]
 80061d4:	e01f      	b.n	8006216 <__kernel_rem_pio2+0xc6>
 80061d6:	42ef      	cmn	r7, r5
 80061d8:	d40b      	bmi.n	80061f2 <__kernel_rem_pio2+0xa2>
 80061da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80061de:	e9cd 2300 	strd	r2, r3, [sp]
 80061e2:	f7fa f907 	bl	80003f4 <__aeabi_i2d>
 80061e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80061ee:	3501      	adds	r5, #1
 80061f0:	e7da      	b.n	80061a8 <__kernel_rem_pio2+0x58>
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	e7f8      	b.n	80061ea <__kernel_rem_pio2+0x9a>
 80061f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061fc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006200:	f7fa f962 	bl	80004c8 <__aeabi_dmul>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800620c:	f7f9 ffa6 	bl	800015c <__adddf3>
 8006210:	e9cd 0100 	strd	r0, r1, [sp]
 8006214:	3601      	adds	r6, #1
 8006216:	9b07      	ldr	r3, [sp, #28]
 8006218:	3f08      	subs	r7, #8
 800621a:	429e      	cmp	r6, r3
 800621c:	ddec      	ble.n	80061f8 <__kernel_rem_pio2+0xa8>
 800621e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006222:	f108 0801 	add.w	r8, r8, #1
 8006226:	e8ea 2302 	strd	r2, r3, [sl], #8
 800622a:	3508      	adds	r5, #8
 800622c:	e7c6      	b.n	80061bc <__kernel_rem_pio2+0x6c>
 800622e:	9b02      	ldr	r3, [sp, #8]
 8006230:	aa0c      	add	r2, sp, #48	; 0x30
 8006232:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006236:	930b      	str	r3, [sp, #44]	; 0x2c
 8006238:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800623a:	9e02      	ldr	r6, [sp, #8]
 800623c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006240:	930a      	str	r3, [sp, #40]	; 0x28
 8006242:	ab98      	add	r3, sp, #608	; 0x260
 8006244:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006248:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800624c:	ab70      	add	r3, sp, #448	; 0x1c0
 800624e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8006252:	46d0      	mov	r8, sl
 8006254:	46b1      	mov	r9, r6
 8006256:	af0c      	add	r7, sp, #48	; 0x30
 8006258:	9700      	str	r7, [sp, #0]
 800625a:	f1b9 0f00 	cmp.w	r9, #0
 800625e:	f1a8 0808 	sub.w	r8, r8, #8
 8006262:	dc71      	bgt.n	8006348 <__kernel_rem_pio2+0x1f8>
 8006264:	465a      	mov	r2, fp
 8006266:	4620      	mov	r0, r4
 8006268:	4629      	mov	r1, r5
 800626a:	f000 fd35 	bl	8006cd8 <scalbn>
 800626e:	2200      	movs	r2, #0
 8006270:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	f7fa f926 	bl	80004c8 <__aeabi_dmul>
 800627c:	f000 fcac 	bl	8006bd8 <floor>
 8006280:	2200      	movs	r2, #0
 8006282:	4b6e      	ldr	r3, [pc, #440]	; (800643c <__kernel_rem_pio2+0x2ec>)
 8006284:	f7fa f920 	bl	80004c8 <__aeabi_dmul>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7f9 ff62 	bl	8000158 <__aeabi_dsub>
 8006294:	460d      	mov	r5, r1
 8006296:	4604      	mov	r4, r0
 8006298:	f7fa fbb0 	bl	80009fc <__aeabi_d2iz>
 800629c:	9004      	str	r0, [sp, #16]
 800629e:	f7fa f8a9 	bl	80003f4 <__aeabi_i2d>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7f9 ff55 	bl	8000158 <__aeabi_dsub>
 80062ae:	f1bb 0f00 	cmp.w	fp, #0
 80062b2:	4680      	mov	r8, r0
 80062b4:	4689      	mov	r9, r1
 80062b6:	dd70      	ble.n	800639a <__kernel_rem_pio2+0x24a>
 80062b8:	1e72      	subs	r2, r6, #1
 80062ba:	ab0c      	add	r3, sp, #48	; 0x30
 80062bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80062c0:	9c04      	ldr	r4, [sp, #16]
 80062c2:	f1cb 0118 	rsb	r1, fp, #24
 80062c6:	fa40 f301 	asr.w	r3, r0, r1
 80062ca:	441c      	add	r4, r3
 80062cc:	408b      	lsls	r3, r1
 80062ce:	1ac0      	subs	r0, r0, r3
 80062d0:	ab0c      	add	r3, sp, #48	; 0x30
 80062d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80062d6:	f1cb 0317 	rsb	r3, fp, #23
 80062da:	9404      	str	r4, [sp, #16]
 80062dc:	fa40 f303 	asr.w	r3, r0, r3
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	9b00      	ldr	r3, [sp, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dd66      	ble.n	80063b6 <__kernel_rem_pio2+0x266>
 80062e8:	2200      	movs	r2, #0
 80062ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80062ee:	4614      	mov	r4, r2
 80062f0:	9b04      	ldr	r3, [sp, #16]
 80062f2:	3301      	adds	r3, #1
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	4296      	cmp	r6, r2
 80062f8:	f300 80ac 	bgt.w	8006454 <__kernel_rem_pio2+0x304>
 80062fc:	f1bb 0f00 	cmp.w	fp, #0
 8006300:	dd07      	ble.n	8006312 <__kernel_rem_pio2+0x1c2>
 8006302:	f1bb 0f01 	cmp.w	fp, #1
 8006306:	f000 80b4 	beq.w	8006472 <__kernel_rem_pio2+0x322>
 800630a:	f1bb 0f02 	cmp.w	fp, #2
 800630e:	f000 80ba 	beq.w	8006486 <__kernel_rem_pio2+0x336>
 8006312:	9b00      	ldr	r3, [sp, #0]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d14e      	bne.n	80063b6 <__kernel_rem_pio2+0x266>
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	2000      	movs	r0, #0
 800631e:	4948      	ldr	r1, [pc, #288]	; (8006440 <__kernel_rem_pio2+0x2f0>)
 8006320:	f7f9 ff1a 	bl	8000158 <__aeabi_dsub>
 8006324:	4680      	mov	r8, r0
 8006326:	4689      	mov	r9, r1
 8006328:	2c00      	cmp	r4, #0
 800632a:	d044      	beq.n	80063b6 <__kernel_rem_pio2+0x266>
 800632c:	465a      	mov	r2, fp
 800632e:	2000      	movs	r0, #0
 8006330:	4943      	ldr	r1, [pc, #268]	; (8006440 <__kernel_rem_pio2+0x2f0>)
 8006332:	f000 fcd1 	bl	8006cd8 <scalbn>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7f9 ff0b 	bl	8000158 <__aeabi_dsub>
 8006342:	4680      	mov	r8, r0
 8006344:	4689      	mov	r9, r1
 8006346:	e036      	b.n	80063b6 <__kernel_rem_pio2+0x266>
 8006348:	2200      	movs	r2, #0
 800634a:	4b3e      	ldr	r3, [pc, #248]	; (8006444 <__kernel_rem_pio2+0x2f4>)
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	f7fa f8ba 	bl	80004c8 <__aeabi_dmul>
 8006354:	f7fa fb52 	bl	80009fc <__aeabi_d2iz>
 8006358:	f7fa f84c 	bl	80003f4 <__aeabi_i2d>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006364:	2200      	movs	r2, #0
 8006366:	4b38      	ldr	r3, [pc, #224]	; (8006448 <__kernel_rem_pio2+0x2f8>)
 8006368:	f7fa f8ae 	bl	80004c8 <__aeabi_dmul>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7f9 fef0 	bl	8000158 <__aeabi_dsub>
 8006378:	f7fa fb40 	bl	80009fc <__aeabi_d2iz>
 800637c:	9b00      	ldr	r3, [sp, #0]
 800637e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006382:	f843 0b04 	str.w	r0, [r3], #4
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800638c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006390:	f7f9 fee4 	bl	800015c <__adddf3>
 8006394:	4604      	mov	r4, r0
 8006396:	460d      	mov	r5, r1
 8006398:	e75f      	b.n	800625a <__kernel_rem_pio2+0x10a>
 800639a:	d105      	bne.n	80063a8 <__kernel_rem_pio2+0x258>
 800639c:	1e73      	subs	r3, r6, #1
 800639e:	aa0c      	add	r2, sp, #48	; 0x30
 80063a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80063a4:	15c3      	asrs	r3, r0, #23
 80063a6:	e79b      	b.n	80062e0 <__kernel_rem_pio2+0x190>
 80063a8:	2200      	movs	r2, #0
 80063aa:	4b28      	ldr	r3, [pc, #160]	; (800644c <__kernel_rem_pio2+0x2fc>)
 80063ac:	f7fa fb12 	bl	80009d4 <__aeabi_dcmpge>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d13e      	bne.n	8006432 <__kernel_rem_pio2+0x2e2>
 80063b4:	9000      	str	r0, [sp, #0]
 80063b6:	2200      	movs	r2, #0
 80063b8:	2300      	movs	r3, #0
 80063ba:	4640      	mov	r0, r8
 80063bc:	4649      	mov	r1, r9
 80063be:	f7fa faeb 	bl	8000998 <__aeabi_dcmpeq>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f000 80b1 	beq.w	800652a <__kernel_rem_pio2+0x3da>
 80063c8:	1e74      	subs	r4, r6, #1
 80063ca:	4623      	mov	r3, r4
 80063cc:	2200      	movs	r2, #0
 80063ce:	9902      	ldr	r1, [sp, #8]
 80063d0:	428b      	cmp	r3, r1
 80063d2:	da5f      	bge.n	8006494 <__kernel_rem_pio2+0x344>
 80063d4:	2a00      	cmp	r2, #0
 80063d6:	d074      	beq.n	80064c2 <__kernel_rem_pio2+0x372>
 80063d8:	ab0c      	add	r3, sp, #48	; 0x30
 80063da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80063de:	f1ab 0b18 	sub.w	fp, fp, #24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 809f 	beq.w	8006526 <__kernel_rem_pio2+0x3d6>
 80063e8:	465a      	mov	r2, fp
 80063ea:	2000      	movs	r0, #0
 80063ec:	4914      	ldr	r1, [pc, #80]	; (8006440 <__kernel_rem_pio2+0x2f0>)
 80063ee:	f000 fc73 	bl	8006cd8 <scalbn>
 80063f2:	46a2      	mov	sl, r4
 80063f4:	4606      	mov	r6, r0
 80063f6:	460f      	mov	r7, r1
 80063f8:	f04f 0800 	mov.w	r8, #0
 80063fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80063fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006444 <__kernel_rem_pio2+0x2f4>
 8006402:	00e5      	lsls	r5, r4, #3
 8006404:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006408:	f1ba 0f00 	cmp.w	sl, #0
 800640c:	f280 80c3 	bge.w	8006596 <__kernel_rem_pio2+0x446>
 8006410:	4626      	mov	r6, r4
 8006412:	2e00      	cmp	r6, #0
 8006414:	f2c0 80f5 	blt.w	8006602 <__kernel_rem_pio2+0x4b2>
 8006418:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <__kernel_rem_pio2+0x300>)
 800641a:	f04f 0a00 	mov.w	sl, #0
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	ab70      	add	r3, sp, #448	; 0x1c0
 8006422:	f04f 0b00 	mov.w	fp, #0
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800642e:	1ba7      	subs	r7, r4, r6
 8006430:	e0db      	b.n	80065ea <__kernel_rem_pio2+0x49a>
 8006432:	2302      	movs	r3, #2
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	e757      	b.n	80062e8 <__kernel_rem_pio2+0x198>
 8006438:	08006fe8 	.word	0x08006fe8
 800643c:	40200000 	.word	0x40200000
 8006440:	3ff00000 	.word	0x3ff00000
 8006444:	3e700000 	.word	0x3e700000
 8006448:	41700000 	.word	0x41700000
 800644c:	3fe00000 	.word	0x3fe00000
 8006450:	08006fa8 	.word	0x08006fa8
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	b944      	cbnz	r4, 800646a <__kernel_rem_pio2+0x31a>
 8006458:	b11b      	cbz	r3, 8006462 <__kernel_rem_pio2+0x312>
 800645a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	2301      	movs	r3, #1
 8006462:	461c      	mov	r4, r3
 8006464:	3201      	adds	r2, #1
 8006466:	3704      	adds	r7, #4
 8006468:	e745      	b.n	80062f6 <__kernel_rem_pio2+0x1a6>
 800646a:	1acb      	subs	r3, r1, r3
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4623      	mov	r3, r4
 8006470:	e7f7      	b.n	8006462 <__kernel_rem_pio2+0x312>
 8006472:	1e72      	subs	r2, r6, #1
 8006474:	ab0c      	add	r3, sp, #48	; 0x30
 8006476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800647e:	a90c      	add	r1, sp, #48	; 0x30
 8006480:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006484:	e745      	b.n	8006312 <__kernel_rem_pio2+0x1c2>
 8006486:	1e72      	subs	r2, r6, #1
 8006488:	ab0c      	add	r3, sp, #48	; 0x30
 800648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006492:	e7f4      	b.n	800647e <__kernel_rem_pio2+0x32e>
 8006494:	a90c      	add	r1, sp, #48	; 0x30
 8006496:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800649a:	3b01      	subs	r3, #1
 800649c:	430a      	orrs	r2, r1
 800649e:	e796      	b.n	80063ce <__kernel_rem_pio2+0x27e>
 80064a0:	3401      	adds	r4, #1
 80064a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	d0fa      	beq.n	80064a0 <__kernel_rem_pio2+0x350>
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	f106 0801 	add.w	r8, r6, #1
 80064b0:	18f5      	adds	r5, r6, r3
 80064b2:	ab20      	add	r3, sp, #128	; 0x80
 80064b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80064b8:	4434      	add	r4, r6
 80064ba:	4544      	cmp	r4, r8
 80064bc:	da04      	bge.n	80064c8 <__kernel_rem_pio2+0x378>
 80064be:	4626      	mov	r6, r4
 80064c0:	e6bf      	b.n	8006242 <__kernel_rem_pio2+0xf2>
 80064c2:	2401      	movs	r4, #1
 80064c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c6:	e7ec      	b.n	80064a2 <__kernel_rem_pio2+0x352>
 80064c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ca:	f04f 0900 	mov.w	r9, #0
 80064ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80064d2:	f7f9 ff8f 	bl	80003f4 <__aeabi_i2d>
 80064d6:	2600      	movs	r6, #0
 80064d8:	2700      	movs	r7, #0
 80064da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064dc:	e9c5 0100 	strd	r0, r1, [r5]
 80064e0:	3b08      	subs	r3, #8
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9504      	str	r5, [sp, #16]
 80064e6:	9b07      	ldr	r3, [sp, #28]
 80064e8:	4599      	cmp	r9, r3
 80064ea:	dd05      	ble.n	80064f8 <__kernel_rem_pio2+0x3a8>
 80064ec:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80064f0:	f108 0801 	add.w	r8, r8, #1
 80064f4:	3508      	adds	r5, #8
 80064f6:	e7e0      	b.n	80064ba <__kernel_rem_pio2+0x36a>
 80064f8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80064fc:	9900      	ldr	r1, [sp, #0]
 80064fe:	f109 0901 	add.w	r9, r9, #1
 8006502:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006506:	9100      	str	r1, [sp, #0]
 8006508:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800650c:	f8cd c010 	str.w	ip, [sp, #16]
 8006510:	f7f9 ffda 	bl	80004c8 <__aeabi_dmul>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4630      	mov	r0, r6
 800651a:	4639      	mov	r1, r7
 800651c:	f7f9 fe1e 	bl	800015c <__adddf3>
 8006520:	4606      	mov	r6, r0
 8006522:	460f      	mov	r7, r1
 8006524:	e7df      	b.n	80064e6 <__kernel_rem_pio2+0x396>
 8006526:	3c01      	subs	r4, #1
 8006528:	e756      	b.n	80063d8 <__kernel_rem_pio2+0x288>
 800652a:	f1cb 0200 	rsb	r2, fp, #0
 800652e:	4640      	mov	r0, r8
 8006530:	4649      	mov	r1, r9
 8006532:	f000 fbd1 	bl	8006cd8 <scalbn>
 8006536:	2200      	movs	r2, #0
 8006538:	4ba4      	ldr	r3, [pc, #656]	; (80067cc <__kernel_rem_pio2+0x67c>)
 800653a:	4604      	mov	r4, r0
 800653c:	460d      	mov	r5, r1
 800653e:	f7fa fa49 	bl	80009d4 <__aeabi_dcmpge>
 8006542:	b1f8      	cbz	r0, 8006584 <__kernel_rem_pio2+0x434>
 8006544:	2200      	movs	r2, #0
 8006546:	4ba2      	ldr	r3, [pc, #648]	; (80067d0 <__kernel_rem_pio2+0x680>)
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7f9 ffbc 	bl	80004c8 <__aeabi_dmul>
 8006550:	f7fa fa54 	bl	80009fc <__aeabi_d2iz>
 8006554:	4607      	mov	r7, r0
 8006556:	f7f9 ff4d 	bl	80003f4 <__aeabi_i2d>
 800655a:	2200      	movs	r2, #0
 800655c:	4b9b      	ldr	r3, [pc, #620]	; (80067cc <__kernel_rem_pio2+0x67c>)
 800655e:	f7f9 ffb3 	bl	80004c8 <__aeabi_dmul>
 8006562:	460b      	mov	r3, r1
 8006564:	4602      	mov	r2, r0
 8006566:	4629      	mov	r1, r5
 8006568:	4620      	mov	r0, r4
 800656a:	f7f9 fdf5 	bl	8000158 <__aeabi_dsub>
 800656e:	f7fa fa45 	bl	80009fc <__aeabi_d2iz>
 8006572:	1c74      	adds	r4, r6, #1
 8006574:	ab0c      	add	r3, sp, #48	; 0x30
 8006576:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800657a:	f10b 0b18 	add.w	fp, fp, #24
 800657e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8006582:	e731      	b.n	80063e8 <__kernel_rem_pio2+0x298>
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	f7fa fa38 	bl	80009fc <__aeabi_d2iz>
 800658c:	ab0c      	add	r3, sp, #48	; 0x30
 800658e:	4634      	mov	r4, r6
 8006590:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006594:	e728      	b.n	80063e8 <__kernel_rem_pio2+0x298>
 8006596:	ab0c      	add	r3, sp, #48	; 0x30
 8006598:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800659c:	f7f9 ff2a 	bl	80003f4 <__aeabi_i2d>
 80065a0:	4632      	mov	r2, r6
 80065a2:	463b      	mov	r3, r7
 80065a4:	f7f9 ff90 	bl	80004c8 <__aeabi_dmul>
 80065a8:	4642      	mov	r2, r8
 80065aa:	e86b 0102 	strd	r0, r1, [fp], #-8
 80065ae:	464b      	mov	r3, r9
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7f9 ff88 	bl	80004c8 <__aeabi_dmul>
 80065b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065bc:	4606      	mov	r6, r0
 80065be:	460f      	mov	r7, r1
 80065c0:	e722      	b.n	8006408 <__kernel_rem_pio2+0x2b8>
 80065c2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80065c6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80065ca:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80065ce:	f8cd c01c 	str.w	ip, [sp, #28]
 80065d2:	f7f9 ff79 	bl	80004c8 <__aeabi_dmul>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4650      	mov	r0, sl
 80065dc:	4659      	mov	r1, fp
 80065de:	f7f9 fdbd 	bl	800015c <__adddf3>
 80065e2:	4682      	mov	sl, r0
 80065e4:	468b      	mov	fp, r1
 80065e6:	f108 0801 	add.w	r8, r8, #1
 80065ea:	9b02      	ldr	r3, [sp, #8]
 80065ec:	4598      	cmp	r8, r3
 80065ee:	dc01      	bgt.n	80065f4 <__kernel_rem_pio2+0x4a4>
 80065f0:	45b8      	cmp	r8, r7
 80065f2:	dde6      	ble.n	80065c2 <__kernel_rem_pio2+0x472>
 80065f4:	ab48      	add	r3, sp, #288	; 0x120
 80065f6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80065fa:	e9c7 ab00 	strd	sl, fp, [r7]
 80065fe:	3e01      	subs	r6, #1
 8006600:	e707      	b.n	8006412 <__kernel_rem_pio2+0x2c2>
 8006602:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006604:	2b02      	cmp	r3, #2
 8006606:	dc09      	bgt.n	800661c <__kernel_rem_pio2+0x4cc>
 8006608:	2b00      	cmp	r3, #0
 800660a:	dc32      	bgt.n	8006672 <__kernel_rem_pio2+0x522>
 800660c:	d05a      	beq.n	80066c4 <__kernel_rem_pio2+0x574>
 800660e:	9b04      	ldr	r3, [sp, #16]
 8006610:	f003 0007 	and.w	r0, r3, #7
 8006614:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800661e:	2b03      	cmp	r3, #3
 8006620:	d1f5      	bne.n	800660e <__kernel_rem_pio2+0x4be>
 8006622:	ab48      	add	r3, sp, #288	; 0x120
 8006624:	441d      	add	r5, r3
 8006626:	46aa      	mov	sl, r5
 8006628:	46a3      	mov	fp, r4
 800662a:	f1bb 0f00 	cmp.w	fp, #0
 800662e:	dc76      	bgt.n	800671e <__kernel_rem_pio2+0x5ce>
 8006630:	46aa      	mov	sl, r5
 8006632:	46a3      	mov	fp, r4
 8006634:	f1bb 0f01 	cmp.w	fp, #1
 8006638:	f300 8090 	bgt.w	800675c <__kernel_rem_pio2+0x60c>
 800663c:	2700      	movs	r7, #0
 800663e:	463e      	mov	r6, r7
 8006640:	2c01      	cmp	r4, #1
 8006642:	f300 80aa 	bgt.w	800679a <__kernel_rem_pio2+0x64a>
 8006646:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800664a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800664e:	9b00      	ldr	r3, [sp, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 80ac 	bne.w	80067ae <__kernel_rem_pio2+0x65e>
 8006656:	4603      	mov	r3, r0
 8006658:	462a      	mov	r2, r5
 800665a:	9806      	ldr	r0, [sp, #24]
 800665c:	e9c0 2300 	strd	r2, r3, [r0]
 8006660:	4622      	mov	r2, r4
 8006662:	460b      	mov	r3, r1
 8006664:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006668:	463a      	mov	r2, r7
 800666a:	4633      	mov	r3, r6
 800666c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006670:	e7cd      	b.n	800660e <__kernel_rem_pio2+0x4be>
 8006672:	2000      	movs	r0, #0
 8006674:	46a0      	mov	r8, r4
 8006676:	4601      	mov	r1, r0
 8006678:	ab48      	add	r3, sp, #288	; 0x120
 800667a:	441d      	add	r5, r3
 800667c:	f1b8 0f00 	cmp.w	r8, #0
 8006680:	da3a      	bge.n	80066f8 <__kernel_rem_pio2+0x5a8>
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d03e      	beq.n	8006706 <__kernel_rem_pio2+0x5b6>
 8006688:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800668c:	4602      	mov	r2, r0
 800668e:	462b      	mov	r3, r5
 8006690:	9d06      	ldr	r5, [sp, #24]
 8006692:	2601      	movs	r6, #1
 8006694:	e9c5 2300 	strd	r2, r3, [r5]
 8006698:	460b      	mov	r3, r1
 800669a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800669e:	f7f9 fd5b 	bl	8000158 <__aeabi_dsub>
 80066a2:	4684      	mov	ip, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	ad48      	add	r5, sp, #288	; 0x120
 80066a8:	42b4      	cmp	r4, r6
 80066aa:	f105 0508 	add.w	r5, r5, #8
 80066ae:	da2c      	bge.n	800670a <__kernel_rem_pio2+0x5ba>
 80066b0:	9b00      	ldr	r3, [sp, #0]
 80066b2:	b10b      	cbz	r3, 80066b8 <__kernel_rem_pio2+0x568>
 80066b4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80066b8:	4662      	mov	r2, ip
 80066ba:	463b      	mov	r3, r7
 80066bc:	9906      	ldr	r1, [sp, #24]
 80066be:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80066c2:	e7a4      	b.n	800660e <__kernel_rem_pio2+0x4be>
 80066c4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80066c6:	ab48      	add	r3, sp, #288	; 0x120
 80066c8:	4637      	mov	r7, r6
 80066ca:	441d      	add	r5, r3
 80066cc:	2c00      	cmp	r4, #0
 80066ce:	da09      	bge.n	80066e4 <__kernel_rem_pio2+0x594>
 80066d0:	9b00      	ldr	r3, [sp, #0]
 80066d2:	b10b      	cbz	r3, 80066d8 <__kernel_rem_pio2+0x588>
 80066d4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80066d8:	4632      	mov	r2, r6
 80066da:	463b      	mov	r3, r7
 80066dc:	9906      	ldr	r1, [sp, #24]
 80066de:	e9c1 2300 	strd	r2, r3, [r1]
 80066e2:	e794      	b.n	800660e <__kernel_rem_pio2+0x4be>
 80066e4:	4630      	mov	r0, r6
 80066e6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7f9 fd36 	bl	800015c <__adddf3>
 80066f0:	3c01      	subs	r4, #1
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	e7e9      	b.n	80066cc <__kernel_rem_pio2+0x57c>
 80066f8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80066fc:	f7f9 fd2e 	bl	800015c <__adddf3>
 8006700:	f108 38ff 	add.w	r8, r8, #4294967295
 8006704:	e7ba      	b.n	800667c <__kernel_rem_pio2+0x52c>
 8006706:	460d      	mov	r5, r1
 8006708:	e7c0      	b.n	800668c <__kernel_rem_pio2+0x53c>
 800670a:	4660      	mov	r0, ip
 800670c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006710:	4639      	mov	r1, r7
 8006712:	f7f9 fd23 	bl	800015c <__adddf3>
 8006716:	3601      	adds	r6, #1
 8006718:	4684      	mov	ip, r0
 800671a:	460f      	mov	r7, r1
 800671c:	e7c4      	b.n	80066a8 <__kernel_rem_pio2+0x558>
 800671e:	e9da 6700 	ldrd	r6, r7, [sl]
 8006722:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006726:	4632      	mov	r2, r6
 8006728:	463b      	mov	r3, r7
 800672a:	4640      	mov	r0, r8
 800672c:	4649      	mov	r1, r9
 800672e:	f7f9 fd15 	bl	800015c <__adddf3>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 fd0b 	bl	8000158 <__aeabi_dsub>
 8006742:	4632      	mov	r2, r6
 8006744:	463b      	mov	r3, r7
 8006746:	f7f9 fd09 	bl	800015c <__adddf3>
 800674a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800674e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006752:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006756:	e9ca 2300 	strd	r2, r3, [sl]
 800675a:	e766      	b.n	800662a <__kernel_rem_pio2+0x4da>
 800675c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006760:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006764:	4642      	mov	r2, r8
 8006766:	464b      	mov	r3, r9
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 fcf6 	bl	800015c <__adddf3>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7f9 fcec 	bl	8000158 <__aeabi_dsub>
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	f7f9 fcea 	bl	800015c <__adddf3>
 8006788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800678c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006790:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006794:	e9ca 2300 	strd	r2, r3, [sl]
 8006798:	e74c      	b.n	8006634 <__kernel_rem_pio2+0x4e4>
 800679a:	4638      	mov	r0, r7
 800679c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80067a0:	4631      	mov	r1, r6
 80067a2:	f7f9 fcdb 	bl	800015c <__adddf3>
 80067a6:	3c01      	subs	r4, #1
 80067a8:	4607      	mov	r7, r0
 80067aa:	460e      	mov	r6, r1
 80067ac:	e748      	b.n	8006640 <__kernel_rem_pio2+0x4f0>
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80067b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80067b8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80067bc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80067c0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80067c4:	601d      	str	r5, [r3, #0]
 80067c6:	615e      	str	r6, [r3, #20]
 80067c8:	e721      	b.n	800660e <__kernel_rem_pio2+0x4be>
 80067ca:	bf00      	nop
 80067cc:	41700000 	.word	0x41700000
 80067d0:	3e700000 	.word	0x3e700000
 80067d4:	00000000 	.word	0x00000000

080067d8 <__kernel_tan>:
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	b08b      	sub	sp, #44	; 0x2c
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	4bd9      	ldr	r3, [pc, #868]	; (8006b48 <__kernel_tan+0x370>)
 80067e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80067e6:	429e      	cmp	r6, r3
 80067e8:	4604      	mov	r4, r0
 80067ea:	460d      	mov	r5, r1
 80067ec:	4682      	mov	sl, r0
 80067ee:	468b      	mov	fp, r1
 80067f0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80067f2:	9202      	str	r2, [sp, #8]
 80067f4:	9107      	str	r1, [sp, #28]
 80067f6:	dc58      	bgt.n	80068aa <__kernel_tan+0xd2>
 80067f8:	f7fa f900 	bl	80009fc <__aeabi_d2iz>
 80067fc:	4605      	mov	r5, r0
 80067fe:	2800      	cmp	r0, #0
 8006800:	d178      	bne.n	80068f4 <__kernel_tan+0x11c>
 8006802:	1c7b      	adds	r3, r7, #1
 8006804:	4323      	orrs	r3, r4
 8006806:	4333      	orrs	r3, r6
 8006808:	d110      	bne.n	800682c <__kernel_tan+0x54>
 800680a:	4620      	mov	r0, r4
 800680c:	4659      	mov	r1, fp
 800680e:	f000 f9df 	bl	8006bd0 <fabs>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	2000      	movs	r0, #0
 8006818:	49cc      	ldr	r1, [pc, #816]	; (8006b4c <__kernel_tan+0x374>)
 800681a:	f7f9 ff7f 	bl	800071c <__aeabi_ddiv>
 800681e:	4682      	mov	sl, r0
 8006820:	468b      	mov	fp, r1
 8006822:	4650      	mov	r0, sl
 8006824:	4659      	mov	r1, fp
 8006826:	b00b      	add	sp, #44	; 0x2c
 8006828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682c:	2f01      	cmp	r7, #1
 800682e:	d0f8      	beq.n	8006822 <__kernel_tan+0x4a>
 8006830:	4620      	mov	r0, r4
 8006832:	4659      	mov	r1, fp
 8006834:	9a02      	ldr	r2, [sp, #8]
 8006836:	9b00      	ldr	r3, [sp, #0]
 8006838:	f7f9 fc90 	bl	800015c <__adddf3>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	460f      	mov	r7, r1
 8006842:	2000      	movs	r0, #0
 8006844:	49c2      	ldr	r1, [pc, #776]	; (8006b50 <__kernel_tan+0x378>)
 8006846:	f7f9 ff69 	bl	800071c <__aeabi_ddiv>
 800684a:	462e      	mov	r6, r5
 800684c:	4689      	mov	r9, r1
 800684e:	4652      	mov	r2, sl
 8006850:	465b      	mov	r3, fp
 8006852:	4680      	mov	r8, r0
 8006854:	462c      	mov	r4, r5
 8006856:	4630      	mov	r0, r6
 8006858:	460d      	mov	r5, r1
 800685a:	4639      	mov	r1, r7
 800685c:	f7f9 fc7c 	bl	8000158 <__aeabi_dsub>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	9802      	ldr	r0, [sp, #8]
 8006866:	9900      	ldr	r1, [sp, #0]
 8006868:	f7f9 fc76 	bl	8000158 <__aeabi_dsub>
 800686c:	4632      	mov	r2, r6
 800686e:	464b      	mov	r3, r9
 8006870:	f7f9 fe2a 	bl	80004c8 <__aeabi_dmul>
 8006874:	4632      	mov	r2, r6
 8006876:	4682      	mov	sl, r0
 8006878:	468b      	mov	fp, r1
 800687a:	464b      	mov	r3, r9
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 fe22 	bl	80004c8 <__aeabi_dmul>
 8006884:	2200      	movs	r2, #0
 8006886:	4bb1      	ldr	r3, [pc, #708]	; (8006b4c <__kernel_tan+0x374>)
 8006888:	f7f9 fc68 	bl	800015c <__adddf3>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4650      	mov	r0, sl
 8006892:	4659      	mov	r1, fp
 8006894:	f7f9 fc62 	bl	800015c <__adddf3>
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	f7f9 fe14 	bl	80004c8 <__aeabi_dmul>
 80068a0:	4622      	mov	r2, r4
 80068a2:	462b      	mov	r3, r5
 80068a4:	f7f9 fc5a 	bl	800015c <__adddf3>
 80068a8:	e7b9      	b.n	800681e <__kernel_tan+0x46>
 80068aa:	4baa      	ldr	r3, [pc, #680]	; (8006b54 <__kernel_tan+0x37c>)
 80068ac:	429e      	cmp	r6, r3
 80068ae:	dd21      	ble.n	80068f4 <__kernel_tan+0x11c>
 80068b0:	2900      	cmp	r1, #0
 80068b2:	da06      	bge.n	80068c2 <__kernel_tan+0xea>
 80068b4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80068b8:	469b      	mov	fp, r3
 80068ba:	9b00      	ldr	r3, [sp, #0]
 80068bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	4652      	mov	r2, sl
 80068c4:	a182      	add	r1, pc, #520	; (adr r1, 8006ad0 <__kernel_tan+0x2f8>)
 80068c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ca:	465b      	mov	r3, fp
 80068cc:	f7f9 fc44 	bl	8000158 <__aeabi_dsub>
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	a180      	add	r1, pc, #512	; (adr r1, 8006ad8 <__kernel_tan+0x300>)
 80068d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068da:	9a02      	ldr	r2, [sp, #8]
 80068dc:	9b00      	ldr	r3, [sp, #0]
 80068de:	f7f9 fc3b 	bl	8000158 <__aeabi_dsub>
 80068e2:	462b      	mov	r3, r5
 80068e4:	4622      	mov	r2, r4
 80068e6:	f7f9 fc39 	bl	800015c <__adddf3>
 80068ea:	2300      	movs	r3, #0
 80068ec:	4682      	mov	sl, r0
 80068ee:	468b      	mov	fp, r1
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4652      	mov	r2, sl
 80068f6:	465b      	mov	r3, fp
 80068f8:	4650      	mov	r0, sl
 80068fa:	4659      	mov	r1, fp
 80068fc:	f7f9 fde4 	bl	80004c8 <__aeabi_dmul>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4680      	mov	r8, r0
 8006906:	4689      	mov	r9, r1
 8006908:	f7f9 fdde 	bl	80004c8 <__aeabi_dmul>
 800690c:	4642      	mov	r2, r8
 800690e:	4604      	mov	r4, r0
 8006910:	460d      	mov	r5, r1
 8006912:	464b      	mov	r3, r9
 8006914:	4650      	mov	r0, sl
 8006916:	4659      	mov	r1, fp
 8006918:	f7f9 fdd6 	bl	80004c8 <__aeabi_dmul>
 800691c:	a370      	add	r3, pc, #448	; (adr r3, 8006ae0 <__kernel_tan+0x308>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006926:	4620      	mov	r0, r4
 8006928:	4629      	mov	r1, r5
 800692a:	f7f9 fdcd 	bl	80004c8 <__aeabi_dmul>
 800692e:	a36e      	add	r3, pc, #440	; (adr r3, 8006ae8 <__kernel_tan+0x310>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fc12 	bl	800015c <__adddf3>
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	f7f9 fdc4 	bl	80004c8 <__aeabi_dmul>
 8006940:	a36b      	add	r3, pc, #428	; (adr r3, 8006af0 <__kernel_tan+0x318>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fc09 	bl	800015c <__adddf3>
 800694a:	4622      	mov	r2, r4
 800694c:	462b      	mov	r3, r5
 800694e:	f7f9 fdbb 	bl	80004c8 <__aeabi_dmul>
 8006952:	a369      	add	r3, pc, #420	; (adr r3, 8006af8 <__kernel_tan+0x320>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 fc00 	bl	800015c <__adddf3>
 800695c:	4622      	mov	r2, r4
 800695e:	462b      	mov	r3, r5
 8006960:	f7f9 fdb2 	bl	80004c8 <__aeabi_dmul>
 8006964:	a366      	add	r3, pc, #408	; (adr r3, 8006b00 <__kernel_tan+0x328>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f7f9 fbf7 	bl	800015c <__adddf3>
 800696e:	4622      	mov	r2, r4
 8006970:	462b      	mov	r3, r5
 8006972:	f7f9 fda9 	bl	80004c8 <__aeabi_dmul>
 8006976:	a364      	add	r3, pc, #400	; (adr r3, 8006b08 <__kernel_tan+0x330>)
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f7f9 fbee 	bl	800015c <__adddf3>
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	f7f9 fda0 	bl	80004c8 <__aeabi_dmul>
 8006988:	a361      	add	r3, pc, #388	; (adr r3, 8006b10 <__kernel_tan+0x338>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f7f9 fd97 	bl	80004c8 <__aeabi_dmul>
 800699a:	a35f      	add	r3, pc, #380	; (adr r3, 8006b18 <__kernel_tan+0x340>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fbdc 	bl	800015c <__adddf3>
 80069a4:	4622      	mov	r2, r4
 80069a6:	462b      	mov	r3, r5
 80069a8:	f7f9 fd8e 	bl	80004c8 <__aeabi_dmul>
 80069ac:	a35c      	add	r3, pc, #368	; (adr r3, 8006b20 <__kernel_tan+0x348>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fbd3 	bl	800015c <__adddf3>
 80069b6:	4622      	mov	r2, r4
 80069b8:	462b      	mov	r3, r5
 80069ba:	f7f9 fd85 	bl	80004c8 <__aeabi_dmul>
 80069be:	a35a      	add	r3, pc, #360	; (adr r3, 8006b28 <__kernel_tan+0x350>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fbca 	bl	800015c <__adddf3>
 80069c8:	4622      	mov	r2, r4
 80069ca:	462b      	mov	r3, r5
 80069cc:	f7f9 fd7c 	bl	80004c8 <__aeabi_dmul>
 80069d0:	a357      	add	r3, pc, #348	; (adr r3, 8006b30 <__kernel_tan+0x358>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fbc1 	bl	800015c <__adddf3>
 80069da:	4622      	mov	r2, r4
 80069dc:	462b      	mov	r3, r5
 80069de:	f7f9 fd73 	bl	80004c8 <__aeabi_dmul>
 80069e2:	a355      	add	r3, pc, #340	; (adr r3, 8006b38 <__kernel_tan+0x360>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fbb8 	bl	800015c <__adddf3>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069f4:	f7f9 fbb2 	bl	800015c <__adddf3>
 80069f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fc:	f7f9 fd64 	bl	80004c8 <__aeabi_dmul>
 8006a00:	9a02      	ldr	r2, [sp, #8]
 8006a02:	9b00      	ldr	r3, [sp, #0]
 8006a04:	f7f9 fbaa 	bl	800015c <__adddf3>
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	f7f9 fd5c 	bl	80004c8 <__aeabi_dmul>
 8006a10:	9a02      	ldr	r2, [sp, #8]
 8006a12:	9b00      	ldr	r3, [sp, #0]
 8006a14:	f7f9 fba2 	bl	800015c <__adddf3>
 8006a18:	a349      	add	r3, pc, #292	; (adr r3, 8006b40 <__kernel_tan+0x368>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	4604      	mov	r4, r0
 8006a20:	460d      	mov	r5, r1
 8006a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a26:	f7f9 fd4f 	bl	80004c8 <__aeabi_dmul>
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	f7f9 fb95 	bl	800015c <__adddf3>
 8006a32:	460b      	mov	r3, r1
 8006a34:	e9cd 0100 	strd	r0, r1, [sp]
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	4650      	mov	r0, sl
 8006a3e:	f7f9 fb8d 	bl	800015c <__adddf3>
 8006a42:	4b44      	ldr	r3, [pc, #272]	; (8006b54 <__kernel_tan+0x37c>)
 8006a44:	4604      	mov	r4, r0
 8006a46:	429e      	cmp	r6, r3
 8006a48:	460d      	mov	r5, r1
 8006a4a:	f340 8085 	ble.w	8006b58 <__kernel_tan+0x380>
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f7f9 fcd0 	bl	80003f4 <__aeabi_i2d>
 8006a54:	4622      	mov	r2, r4
 8006a56:	4680      	mov	r8, r0
 8006a58:	4689      	mov	r9, r1
 8006a5a:	462b      	mov	r3, r5
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f7f9 fd32 	bl	80004c8 <__aeabi_dmul>
 8006a64:	4642      	mov	r2, r8
 8006a66:	4606      	mov	r6, r0
 8006a68:	460f      	mov	r7, r1
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 fb74 	bl	800015c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 fe4e 	bl	800071c <__aeabi_ddiv>
 8006a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a84:	f7f9 fb68 	bl	8000158 <__aeabi_dsub>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	4659      	mov	r1, fp
 8006a90:	f7f9 fb62 	bl	8000158 <__aeabi_dsub>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	f7f9 fb60 	bl	800015c <__adddf3>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	f7f9 fb58 	bl	8000158 <__aeabi_dsub>
 8006aa8:	9b07      	ldr	r3, [sp, #28]
 8006aaa:	4604      	mov	r4, r0
 8006aac:	179b      	asrs	r3, r3, #30
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	f1c3 0001 	rsb	r0, r3, #1
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	f7f9 fc9c 	bl	80003f4 <__aeabi_i2d>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7f9 fd00 	bl	80004c8 <__aeabi_dmul>
 8006ac8:	e6a9      	b.n	800681e <__kernel_tan+0x46>
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w
 8006ad0:	54442d18 	.word	0x54442d18
 8006ad4:	3fe921fb 	.word	0x3fe921fb
 8006ad8:	33145c07 	.word	0x33145c07
 8006adc:	3c81a626 	.word	0x3c81a626
 8006ae0:	74bf7ad4 	.word	0x74bf7ad4
 8006ae4:	3efb2a70 	.word	0x3efb2a70
 8006ae8:	32f0a7e9 	.word	0x32f0a7e9
 8006aec:	3f12b80f 	.word	0x3f12b80f
 8006af0:	1a8d1068 	.word	0x1a8d1068
 8006af4:	3f3026f7 	.word	0x3f3026f7
 8006af8:	fee08315 	.word	0xfee08315
 8006afc:	3f57dbc8 	.word	0x3f57dbc8
 8006b00:	e96e8493 	.word	0xe96e8493
 8006b04:	3f8226e3 	.word	0x3f8226e3
 8006b08:	1bb341fe 	.word	0x1bb341fe
 8006b0c:	3faba1ba 	.word	0x3faba1ba
 8006b10:	db605373 	.word	0xdb605373
 8006b14:	bef375cb 	.word	0xbef375cb
 8006b18:	a03792a6 	.word	0xa03792a6
 8006b1c:	3f147e88 	.word	0x3f147e88
 8006b20:	f2f26501 	.word	0xf2f26501
 8006b24:	3f4344d8 	.word	0x3f4344d8
 8006b28:	c9560328 	.word	0xc9560328
 8006b2c:	3f6d6d22 	.word	0x3f6d6d22
 8006b30:	8406d637 	.word	0x8406d637
 8006b34:	3f9664f4 	.word	0x3f9664f4
 8006b38:	1110fe7a 	.word	0x1110fe7a
 8006b3c:	3fc11111 	.word	0x3fc11111
 8006b40:	55555563 	.word	0x55555563
 8006b44:	3fd55555 	.word	0x3fd55555
 8006b48:	3e2fffff 	.word	0x3e2fffff
 8006b4c:	3ff00000 	.word	0x3ff00000
 8006b50:	bff00000 	.word	0xbff00000
 8006b54:	3fe59427 	.word	0x3fe59427
 8006b58:	2f01      	cmp	r7, #1
 8006b5a:	d031      	beq.n	8006bc0 <__kernel_tan+0x3e8>
 8006b5c:	460f      	mov	r7, r1
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	2000      	movs	r0, #0
 8006b64:	4918      	ldr	r1, [pc, #96]	; (8006bc8 <__kernel_tan+0x3f0>)
 8006b66:	f7f9 fdd9 	bl	800071c <__aeabi_ddiv>
 8006b6a:	2600      	movs	r6, #0
 8006b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b74:	4652      	mov	r2, sl
 8006b76:	465b      	mov	r3, fp
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	f7f9 faec 	bl	8000158 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b88:	f7f9 fae6 	bl	8000158 <__aeabi_dsub>
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	462b      	mov	r3, r5
 8006b90:	f7f9 fc9a 	bl	80004c8 <__aeabi_dmul>
 8006b94:	4632      	mov	r2, r6
 8006b96:	4682      	mov	sl, r0
 8006b98:	468b      	mov	fp, r1
 8006b9a:	462b      	mov	r3, r5
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	f7f9 fc92 	bl	80004c8 <__aeabi_dmul>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <__kernel_tan+0x3f4>)
 8006ba8:	f7f9 fad8 	bl	800015c <__adddf3>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	f7f9 fad2 	bl	800015c <__adddf3>
 8006bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bbc:	4634      	mov	r4, r6
 8006bbe:	e66d      	b.n	800689c <__kernel_tan+0xc4>
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	468b      	mov	fp, r1
 8006bc4:	e62d      	b.n	8006822 <__kernel_tan+0x4a>
 8006bc6:	bf00      	nop
 8006bc8:	bff00000 	.word	0xbff00000
 8006bcc:	3ff00000 	.word	0x3ff00000

08006bd0 <fabs>:
 8006bd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006bd4:	4770      	bx	lr
	...

08006bd8 <floor>:
 8006bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bdc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006be0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006be4:	2e13      	cmp	r6, #19
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4607      	mov	r7, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	4605      	mov	r5, r0
 8006bf0:	dc33      	bgt.n	8006c5a <floor+0x82>
 8006bf2:	2e00      	cmp	r6, #0
 8006bf4:	da14      	bge.n	8006c20 <floor+0x48>
 8006bf6:	a334      	add	r3, pc, #208	; (adr r3, 8006cc8 <floor+0xf0>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f7f9 faae 	bl	800015c <__adddf3>
 8006c00:	2200      	movs	r2, #0
 8006c02:	2300      	movs	r3, #0
 8006c04:	f7f9 fef0 	bl	80009e8 <__aeabi_dcmpgt>
 8006c08:	b138      	cbz	r0, 8006c1a <floor+0x42>
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	da58      	bge.n	8006cc0 <floor+0xe8>
 8006c0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006c12:	431d      	orrs	r5, r3
 8006c14:	d001      	beq.n	8006c1a <floor+0x42>
 8006c16:	2500      	movs	r5, #0
 8006c18:	4c2d      	ldr	r4, [pc, #180]	; (8006cd0 <floor+0xf8>)
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	462f      	mov	r7, r5
 8006c1e:	e025      	b.n	8006c6c <floor+0x94>
 8006c20:	4a2c      	ldr	r2, [pc, #176]	; (8006cd4 <floor+0xfc>)
 8006c22:	fa42 f806 	asr.w	r8, r2, r6
 8006c26:	ea01 0208 	and.w	r2, r1, r8
 8006c2a:	4302      	orrs	r2, r0
 8006c2c:	d01e      	beq.n	8006c6c <floor+0x94>
 8006c2e:	a326      	add	r3, pc, #152	; (adr r3, 8006cc8 <floor+0xf0>)
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f7f9 fa92 	bl	800015c <__adddf3>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f7f9 fed4 	bl	80009e8 <__aeabi_dcmpgt>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d0ea      	beq.n	8006c1a <floor+0x42>
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	bfbe      	ittt	lt
 8006c48:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006c4c:	fa43 f606 	asrlt.w	r6, r3, r6
 8006c50:	19a4      	addlt	r4, r4, r6
 8006c52:	2500      	movs	r5, #0
 8006c54:	ea24 0408 	bic.w	r4, r4, r8
 8006c58:	e7df      	b.n	8006c1a <floor+0x42>
 8006c5a:	2e33      	cmp	r6, #51	; 0x33
 8006c5c:	dd0a      	ble.n	8006c74 <floor+0x9c>
 8006c5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006c62:	d103      	bne.n	8006c6c <floor+0x94>
 8006c64:	f7f9 fa7a 	bl	800015c <__adddf3>
 8006c68:	4607      	mov	r7, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	4619      	mov	r1, r3
 8006c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c74:	f04f 32ff 	mov.w	r2, #4294967295
 8006c78:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006c7c:	fa22 f808 	lsr.w	r8, r2, r8
 8006c80:	ea18 0f00 	tst.w	r8, r0
 8006c84:	d0f2      	beq.n	8006c6c <floor+0x94>
 8006c86:	a310      	add	r3, pc, #64	; (adr r3, 8006cc8 <floor+0xf0>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 fa66 	bl	800015c <__adddf3>
 8006c90:	2200      	movs	r2, #0
 8006c92:	2300      	movs	r3, #0
 8006c94:	f7f9 fea8 	bl	80009e8 <__aeabi_dcmpgt>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d0be      	beq.n	8006c1a <floor+0x42>
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	da02      	bge.n	8006ca6 <floor+0xce>
 8006ca0:	2e14      	cmp	r6, #20
 8006ca2:	d103      	bne.n	8006cac <floor+0xd4>
 8006ca4:	3401      	adds	r4, #1
 8006ca6:	ea25 0508 	bic.w	r5, r5, r8
 8006caa:	e7b6      	b.n	8006c1a <floor+0x42>
 8006cac:	2301      	movs	r3, #1
 8006cae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006cb2:	fa03 f606 	lsl.w	r6, r3, r6
 8006cb6:	4435      	add	r5, r6
 8006cb8:	42bd      	cmp	r5, r7
 8006cba:	bf38      	it	cc
 8006cbc:	18e4      	addcc	r4, r4, r3
 8006cbe:	e7f2      	b.n	8006ca6 <floor+0xce>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	462c      	mov	r4, r5
 8006cc4:	e7a9      	b.n	8006c1a <floor+0x42>
 8006cc6:	bf00      	nop
 8006cc8:	8800759c 	.word	0x8800759c
 8006ccc:	7e37e43c 	.word	0x7e37e43c
 8006cd0:	bff00000 	.word	0xbff00000
 8006cd4:	000fffff 	.word	0x000fffff

08006cd8 <scalbn>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	4617      	mov	r7, r2
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	b996      	cbnz	r6, 8006d0e <scalbn+0x36>
 8006ce8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cec:	4303      	orrs	r3, r0
 8006cee:	d039      	beq.n	8006d64 <scalbn+0x8c>
 8006cf0:	4b33      	ldr	r3, [pc, #204]	; (8006dc0 <scalbn+0xe8>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f7f9 fbe8 	bl	80004c8 <__aeabi_dmul>
 8006cf8:	4b32      	ldr	r3, [pc, #200]	; (8006dc4 <scalbn+0xec>)
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	429f      	cmp	r7, r3
 8006cfe:	460d      	mov	r5, r1
 8006d00:	da0f      	bge.n	8006d22 <scalbn+0x4a>
 8006d02:	a32b      	add	r3, pc, #172	; (adr r3, 8006db0 <scalbn+0xd8>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f7f9 fbde 	bl	80004c8 <__aeabi_dmul>
 8006d0c:	e006      	b.n	8006d1c <scalbn+0x44>
 8006d0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006d12:	4296      	cmp	r6, r2
 8006d14:	d10a      	bne.n	8006d2c <scalbn+0x54>
 8006d16:	4602      	mov	r2, r0
 8006d18:	f7f9 fa20 	bl	800015c <__adddf3>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	460d      	mov	r5, r1
 8006d20:	e020      	b.n	8006d64 <scalbn+0x8c>
 8006d22:	460b      	mov	r3, r1
 8006d24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006d28:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006d2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006d30:	19b9      	adds	r1, r7, r6
 8006d32:	4291      	cmp	r1, r2
 8006d34:	dd0e      	ble.n	8006d54 <scalbn+0x7c>
 8006d36:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006d3a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006d3e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006d42:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006d46:	4820      	ldr	r0, [pc, #128]	; (8006dc8 <scalbn+0xf0>)
 8006d48:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006d4c:	a31a      	add	r3, pc, #104	; (adr r3, 8006db8 <scalbn+0xe0>)
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	e7d9      	b.n	8006d08 <scalbn+0x30>
 8006d54:	2900      	cmp	r1, #0
 8006d56:	dd08      	ble.n	8006d6a <scalbn+0x92>
 8006d58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006d6e:	da12      	bge.n	8006d96 <scalbn+0xbe>
 8006d70:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d74:	429f      	cmp	r7, r3
 8006d76:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006d7a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006d7e:	dcdc      	bgt.n	8006d3a <scalbn+0x62>
 8006d80:	a30b      	add	r3, pc, #44	; (adr r3, 8006db0 <scalbn+0xd8>)
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006d8a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006d8e:	480f      	ldr	r0, [pc, #60]	; (8006dcc <scalbn+0xf4>)
 8006d90:	f041 011f 	orr.w	r1, r1, #31
 8006d94:	e7b8      	b.n	8006d08 <scalbn+0x30>
 8006d96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d9a:	3136      	adds	r1, #54	; 0x36
 8006d9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006da0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006da4:	4620      	mov	r0, r4
 8006da6:	4629      	mov	r1, r5
 8006da8:	2200      	movs	r2, #0
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <scalbn+0xf8>)
 8006dac:	e7ac      	b.n	8006d08 <scalbn+0x30>
 8006dae:	bf00      	nop
 8006db0:	c2f8f359 	.word	0xc2f8f359
 8006db4:	01a56e1f 	.word	0x01a56e1f
 8006db8:	8800759c 	.word	0x8800759c
 8006dbc:	7e37e43c 	.word	0x7e37e43c
 8006dc0:	43500000 	.word	0x43500000
 8006dc4:	ffff3cb0 	.word	0xffff3cb0
 8006dc8:	8800759c 	.word	0x8800759c
 8006dcc:	c2f8f359 	.word	0xc2f8f359
 8006dd0:	3c900000 	.word	0x3c900000

08006dd4 <_init>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr

08006de0 <_fini>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr
