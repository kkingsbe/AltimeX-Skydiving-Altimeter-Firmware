
AltimeX Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800baf8  0800baf8  0001baf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c188  0800c188  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c188  0800c188  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c188  0800c188  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c18c  0800c18c  0001c18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200001e0  0800c36c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  0800c36c  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013382  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c80  00000000  00000000  00033587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00036208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b64  00000000  00000000  00038328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015432  00000000  00000000  00051e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f456  00000000  00000000  000672be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cdc  00000000  00000000  000f6764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800badc 	.word	0x0800badc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800badc 	.word	0x0800badc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <LPS_Init>:
#include "LPS22HB.h"

struct LPS_CONFIG lpsConfig;

uint8_t LPS_Init(I2C_HandleTypeDef* i2c_config, uint16_t address, UART_HandleTypeDef* uart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	817b      	strh	r3, [r7, #10]
	HAL_Delay(1000);
 8000d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d96:	f001 ff23 	bl	8002be0 <HAL_Delay>
	lpsConfig.i2c_config = i2c_config;
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <LPS_Init+0x6c>)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6013      	str	r3, [r2, #0]
	lpsConfig.address = address;
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <LPS_Init+0x6c>)
 8000da2:	897b      	ldrh	r3, [r7, #10]
 8000da4:	8093      	strh	r3, [r2, #4]
	lpsConfig.uart = uart;
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <LPS_Init+0x6c>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6093      	str	r3, [r2, #8]

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 8000dac:	2305      	movs	r3, #5
 8000dae:	2203      	movs	r2, #3
 8000db0:	21b8      	movs	r1, #184	; 0xb8
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f003 f92a 	bl	800400c <HAL_I2C_IsDeviceReady>
 8000db8:	4603      	mov	r3, r0
 8000dba:	75fb      	strb	r3, [r7, #23]
	if(i2c_status == HAL_BUSY) {
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d101      	bne.n	8000dc6 <LPS_Init+0x42>
		return 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e00f      	b.n	8000de6 <LPS_Init+0x62>
	}

	//Set the ouptut data rate (odr)
	LPS_Set_Odr(ODR_75hz);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f000 f832 	bl	8000e30 <LPS_Set_Odr>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = LPS_Get_Odr();
 8000dcc:	f000 f862 	bl	8000e94 <LPS_Get_Odr>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	75bb      	strb	r3, [r7, #22]
	if(odr != ODR_75hz) {
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d001      	beq.n	8000dde <LPS_Init+0x5a>
		return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e003      	b.n	8000de6 <LPS_Init+0x62>
	}

	//Set FIFO mode to BYPASS
	LPS_Configure_Fifo(BYPASS);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f86a 	bl	8000eb8 <LPS_Configure_Fifo>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001fc 	.word	0x200001fc

08000df4 <LPS_Reg_Read>:

void LPS_Reg_Read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af04      	add	r7, sp, #16
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	460b      	mov	r3, r1
 8000e02:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), reg_addr, 1, data_output, reg_size, 100);
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <LPS_Reg_Read+0x38>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <LPS_Reg_Read+0x38>)
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	b299      	uxth	r1, r3
 8000e10:	88fa      	ldrh	r2, [r7, #6]
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f002 fe8c 	bl	8003b3c <HAL_I2C_Mem_Read>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200001fc 	.word	0x200001fc

08000e30 <LPS_Set_Odr>:

//Configures the output data rate (ODR)
void LPS_Set_Odr(enum LPS_ODR new_odr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2101      	movs	r1, #1
 8000e42:	2010      	movs	r0, #16
 8000e44:	f7ff ffd6 	bl	8000df4 <LPS_Reg_Read>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 8000e52:	7a3b      	ldrb	r3, [r7, #8]
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <LPS_Set_Odr+0x60>)
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <LPS_Set_Odr+0x60>)
 8000e6a:	889b      	ldrh	r3, [r3, #4]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	2301      	movs	r3, #1
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2210      	movs	r2, #16
 8000e82:	f002 fd61 	bl	8003948 <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001fc 	.word	0x200001fc

08000e94 <LPS_Get_Odr>:

//Reads the sensors odr
enum LPS_ODR LPS_Get_Odr()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2010      	movs	r0, #16
 8000ea2:	f7ff ffa7 	bl	8000df4 <LPS_Reg_Read>
	uint8_t odr_code = (existingConfig[0] >> 4);
 8000ea6:	793b      	ldrb	r3, [r7, #4]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	71fb      	strb	r3, [r7, #7]

	return odr_code;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <LPS_Configure_Fifo>:

//Configures the FIFO for the desired mode
void LPS_Configure_Fifo(enum LPS_FIFO desiredFifo)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d11d      	bne.n	8000f04 <LPS_Configure_Fifo+0x4c>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	LPS_Reg_Read(FIFO_CTRL, 1, existingConfig);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2014      	movs	r0, #20
 8000ed2:	f7ff ff8f 	bl	8000df4 <LPS_Reg_Read>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t) (lpsConfig.address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <LPS_Configure_Fifo+0x54>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <LPS_Configure_Fifo+0x54>)
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b299      	uxth	r1, r3
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	2214      	movs	r2, #20
 8000efe:	f002 fd23 	bl	8003948 <HAL_I2C_Mem_Write>
 8000f02:	e000      	b.n	8000f06 <LPS_Configure_Fifo+0x4e>
		return;
 8000f04:	bf00      	nop
}
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001fc 	.word	0x200001fc

08000f10 <LPS_Get_Pressure>:

//Returns the pressure read by the sensor in HPA
double LPS_Get_Pressure()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 4096.0;
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <LPS_Get_Pressure+0x64>)
 8000f1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	LPS_Reg_Read(PRESS_OUT_H, 1, press_out_h);
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	461a      	mov	r2, r3
 8000f26:	2101      	movs	r1, #1
 8000f28:	202a      	movs	r0, #42	; 0x2a
 8000f2a:	f7ff ff63 	bl	8000df4 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_L, 1, press_out_l);
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	461a      	mov	r2, r3
 8000f32:	2101      	movs	r1, #1
 8000f34:	2029      	movs	r0, #41	; 0x29
 8000f36:	f7ff ff5d 	bl	8000df4 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_XL, 1, press_out_xl);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2028      	movs	r0, #40	; 0x28
 8000f42:	f7ff ff57 	bl	8000df4 <LPS_Reg_Read>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 8000f46:	7a3b      	ldrb	r3, [r7, #8]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	793b      	ldrb	r3, [r7, #4]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4413      	add	r3, r2
 8000f50:	783a      	ldrb	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]

	return pressure / SCALING_FACTOR;
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff fa44 	bl	80003e4 <__aeabi_ui2d>
 8000f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f60:	f7ff fbe4 	bl	800072c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
}
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40b00000 	.word	0x40b00000

08000f78 <LPS_Get_Temp>:

//Returns the temperature read by the sensor in C
double LPS_Get_Temp()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 100.0;
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <LPS_Get_Temp+0x50>)
 8000f84:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

	LPS_Reg_Read(TEMP_OUT_H, 1, temp_out_h);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2101      	movs	r1, #1
 8000f90:	202c      	movs	r0, #44	; 0x2c
 8000f92:	f7ff ff2f 	bl	8000df4 <LPS_Reg_Read>
	LPS_Reg_Read(TEMP_OUT_L, 1, temp_out_l);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	202b      	movs	r0, #43	; 0x2b
 8000f9e:	f7ff ff29 	bl	8000df4 <LPS_Reg_Read>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 8000fa2:	7a3b      	ldrb	r3, [r7, #8]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	793a      	ldrb	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

	return temperature / SCALING_FACTOR;
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fa19 	bl	80003e4 <__aeabi_ui2d>
 8000fb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fb6:	f7ff fbb9 	bl	800072c <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
}
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <LPS_Get_TempF>:

double LPS_Get_TempF()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	double tempC = LPS_Get_Temp();
 8000fd6:	f7ff ffcf 	bl	8000f78 <LPS_Get_Temp>
 8000fda:	e9c7 0100 	strd	r0, r1, [r7]
	return (tempC * (9/5.0)) + 32;
 8000fde:	a30c      	add	r3, pc, #48	; (adr r3, 8001010 <LPS_Get_TempF+0x40>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe8:	f7ff fa76 	bl	80004d8 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <LPS_Get_TempF+0x48>)
 8000ffa:	f7ff f8b7 	bl	800016c <__adddf3>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
}
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	f3af 8000 	nop.w
 8001010:	cccccccd 	.word	0xcccccccd
 8001014:	3ffccccc 	.word	0x3ffccccc
 8001018:	40400000 	.word	0x40400000
 800101c:	00000000 	.word	0x00000000

08001020 <LPS_Get_RelAlt_Ft>:
	return pressHPA * 0.0009869233;
}

//Reference pressure is pressure in Pa at surface
double LPS_Get_RelAlt_Ft(double reference_pressure)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	e9c7 0100 	strd	r0, r1, [r7]
	double p = LPS_Get_Pressure();
 800102a:	f7ff ff71 	bl	8000f10 <LPS_Get_Pressure>
 800102e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double t = LPS_Get_Temp();
 8001032:	f7ff ffa1 	bl	8000f78 <LPS_Get_Temp>
 8001036:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)reference_pressure / p;
 800103a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800103e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001042:	f7ff fb73 	bl	800072c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exponential = pow(frac_p, (double)1.0/5.257);
 800104e:	a320      	add	r3, pc, #128	; (adr r3, 80010d0 <LPS_Get_RelAlt_Ft+0xb0>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001058:	f008 fea0 	bl	8009d9c <pow>
 800105c:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double fraction_top = (exponential - 1) * (t + 273.15);
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <LPS_Get_RelAlt_Ft+0xd0>)
 8001066:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800106a:	f7ff f87d 	bl	8000168 <__aeabi_dsub>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4614      	mov	r4, r2
 8001074:	461d      	mov	r5, r3
 8001076:	a318      	add	r3, pc, #96	; (adr r3, 80010d8 <LPS_Get_RelAlt_Ft+0xb8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001080:	f7ff f874 	bl	800016c <__adddf3>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	f7ff fa24 	bl	80004d8 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double alt_m = fraction_top / 0.0065;
 8001098:	a311      	add	r3, pc, #68	; (adr r3, 80010e0 <LPS_Get_RelAlt_Ft+0xc0>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a2:	f7ff fb43 	bl	800072c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return alt_m * 3.281; //Convert to ft and return
 80010ae:	a30e      	add	r3, pc, #56	; (adr r3, 80010e8 <LPS_Get_RelAlt_Ft+0xc8>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b8:	f7ff fa0e 	bl	80004d8 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
}
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	3738      	adds	r7, #56	; 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	f3af 8000 	nop.w
 80010d0:	7dee2d4a 	.word	0x7dee2d4a
 80010d4:	3fc85936 	.word	0x3fc85936
 80010d8:	66666666 	.word	0x66666666
 80010dc:	40711266 	.word	0x40711266
 80010e0:	76c8b439 	.word	0x76c8b439
 80010e4:	3f7a9fbe 	.word	0x3f7a9fbe
 80010e8:	ed916873 	.word	0xed916873
 80010ec:	400a3f7c 	.word	0x400a3f7c
 80010f0:	3ff00000 	.word	0x3ff00000

080010f4 <LPS_Get_Calibration_Temperature>:

double LPS_Get_Calibration_Temperature(uint8_t num_samples, uint8_t sample_time_ms)
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b09a      	sub	sp, #104	; 0x68
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	460a      	mov	r2, r1
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	4613      	mov	r3, r2
 8001102:	71bb      	strb	r3, [r7, #6]
	char msg[] = "\r\n\nCalibrating LPS Temperature:";
 8001104:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <LPS_Get_Calibration_Temperature+0x10c>)
 8001106:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800110a:	461d      	mov	r5, r3
 800110c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001110:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	println(msg, strlen(msg), lpsConfig.uart);
 8001118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f817 	bl	8000150 <strlen>
 8001122:	4601      	mov	r1, r0
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fb94 	bl	800185a <println>

	double cum_val = 0;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double avg_val = 0;
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint8_t sample = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 8001150:	e01d      	b.n	800118e <LPS_Get_Calibration_Temperature+0x9a>
		double _temp = LPS_Get_Temp();
 8001152:	f7ff ff11 	bl	8000f78 <LPS_Get_Temp>
 8001156:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		print(".", 1, lpsConfig.uart);
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	461a      	mov	r2, r3
 8001160:	2101      	movs	r1, #1
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <LPS_Get_Calibration_Temperature+0x114>)
 8001164:	f000 fb68 	bl	8001838 <print>
		cum_val += _temp;
 8001168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800116c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001170:	f7fe fffc 	bl	800016c <__adddf3>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		HAL_Delay(sample_time_ms);
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fd2e 	bl	8002be0 <HAL_Delay>
		sample ++;
 8001184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001188:	3301      	adds	r3, #1
 800118a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 800118e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3dc      	bcc.n	8001152 <LPS_Get_Calibration_Temperature+0x5e>
	}
	avg_val = cum_val / (double)num_samples;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f922 	bl	80003e4 <__aeabi_ui2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011a8:	f7ff fac0 	bl	800072c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	char msg2[] = "\r\nAverage Temperature (C): ";
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <LPS_Get_Calibration_Temperature+0x118>)
 80011b6:	f107 040c 	add.w	r4, r7, #12
 80011ba:	461d      	mov	r5, r3
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	print(msg2, strlen(msg2), lpsConfig.uart);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7fe ffbf 	bl	8000150 <strlen>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb2b 	bl	8001838 <print>
	printd(avg_val, lpsConfig.uart);
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	461a      	mov	r2, r3
 80011e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011ec:	f000 fafa 	bl	80017e4 <printd>
	return avg_val;
 80011f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	3768      	adds	r7, #104	; 0x68
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bdb0      	pop	{r4, r5, r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800bafc 	.word	0x0800bafc
 8001204:	200001fc 	.word	0x200001fc
 8001208:	0800baf8 	.word	0x0800baf8
 800120c:	0800bb1c 	.word	0x0800bb1c

08001210 <LPS_Get_Calibration_Pressure>:

double LPS_Get_Calibration_Pressure(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b09a      	sub	sp, #104	; 0x68
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	4613      	mov	r3, r2
 800121e:	71bb      	strb	r3, [r7, #6]
	char msg[] = "\r\n\nCalibrating LPS Pressure:\n";
 8001220:	4b3e      	ldr	r3, [pc, #248]	; (800131c <LPS_Get_Calibration_Pressure+0x10c>)
 8001222:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001230:	c407      	stmia	r4!, {r0, r1, r2}
 8001232:	8023      	strh	r3, [r4, #0]
	println(msg, strlen(msg), lpsConfig.uart);
 8001234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ff89 	bl	8000150 <strlen>
 800123e:	4601      	mov	r1, r0
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fb06 	bl	800185a <println>

	double cum_val = 0;
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double avg_val = 0;
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint8_t sample = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 800126c:	e01d      	b.n	80012aa <LPS_Get_Calibration_Pressure+0x9a>
		double _temp = LPS_Get_Pressure();
 800126e:	f7ff fe4f 	bl	8000f10 <LPS_Get_Pressure>
 8001272:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		print(".", 1, lpsConfig.uart);
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	461a      	mov	r2, r3
 800127c:	2101      	movs	r1, #1
 800127e:	4829      	ldr	r0, [pc, #164]	; (8001324 <LPS_Get_Calibration_Pressure+0x114>)
 8001280:	f000 fada 	bl	8001838 <print>
		cum_val += _temp;
 8001284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001288:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800128c:	f7fe ff6e 	bl	800016c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		HAL_Delay(sample_time_ms);
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fca0 	bl	8002be0 <HAL_Delay>
		sample ++;
 80012a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012a4:	3301      	adds	r3, #1
 80012a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 80012aa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3dc      	bcc.n	800126e <LPS_Get_Calibration_Pressure+0x5e>
	}
	avg_val = cum_val / (double)num_samples;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f894 	bl	80003e4 <__aeabi_ui2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80012c4:	f7ff fa32 	bl	800072c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	char msg2[] = "\r\nAverage Pressure (PA): ";
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <LPS_Get_Calibration_Pressure+0x118>)
 80012d2:	f107 040c 	add.w	r4, r7, #12
 80012d6:	461d      	mov	r5, r3
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e0:	c403      	stmia	r4!, {r0, r1}
 80012e2:	8022      	strh	r2, [r4, #0]
	print(msg2, strlen(msg2), lpsConfig.uart);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff31 	bl	8000150 <strlen>
 80012ee:	4601      	mov	r1, r0
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fa9d 	bl	8001838 <print>
	printd(avg_val, lpsConfig.uart);
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	461a      	mov	r2, r3
 8001304:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001308:	f000 fa6c 	bl	80017e4 <printd>
	return avg_val;
 800130c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	3768      	adds	r7, #104	; 0x68
 8001316:	46bd      	mov	sp, r7
 8001318:	bdb0      	pop	{r4, r5, r7, pc}
 800131a:	bf00      	nop
 800131c:	0800bb38 	.word	0x0800bb38
 8001320:	200001fc 	.word	0x200001fc
 8001324:	0800baf8 	.word	0x0800baf8
 8001328:	0800bb58 	.word	0x0800bb58
 800132c:	00000000 	.word	0x00000000

08001330 <Altimex_displayLeds>:

uint32_t standbyLastFlash = 0;
uint32_t lastLedTurnonTime = 0;

void Altimex_displayLeds(enum AltimexState state, uint16_t step, struct AltimexConfig* config, uint16_t alt)
{
 8001330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001334:	b08a      	sub	sp, #40	; 0x28
 8001336:	af00      	add	r7, sp, #0
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	461a      	mov	r2, r3
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	460b      	mov	r3, r1
 8001342:	81bb      	strh	r3, [r7, #12]
 8001344:	4613      	mov	r3, r2
 8001346:	80fb      	strh	r3, [r7, #6]
	//Periodically flashes ot show that the device is on
	if(state == ALTIMEX_STANDBY)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d154      	bne.n	80013f8 <Altimex_displayLeds+0xc8>
	{
		uint32_t standbyFlashLength = config->standbyFlashOnLength + config->standbyFlashOffLength;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001356:	4413      	add	r3, r2
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
		Set_Brightness(config->standbyBrightness);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fd31 	bl	8001dc8 <Set_Brightness>

		//If board has just been turned on
		if(standbyLastFlash == 0 && HAL_GetTick() < 3000)
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <Altimex_displayLeds+0x128>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d121      	bne.n	80013b2 <Altimex_displayLeds+0x82>
 800136e:	f001 fc2d 	bl	8002bcc <HAL_GetTick>
 8001372:	4603      	mov	r3, r0
 8001374:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001378:	4293      	cmp	r3, r2
 800137a:	d81a      	bhi.n	80013b2 <Altimex_displayLeds+0x82>
		{
			uint8_t on = (step) % 2 == 0;
 800137c:	89bb      	ldrh	r3, [r7, #12]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t leds = on * config->numLeds;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001398:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			Strip_Progress_Bar_Single_Color(leds, PURPLE);
 80013a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013a8:	2103      	movs	r1, #3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fc9f 	bl	8001cee <Strip_Progress_Bar_Single_Color>
		{
 80013b0:	e022      	b.n	80013f8 <Altimex_displayLeds+0xc8>
		}
		else {
			//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
			if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 80013b2:	f001 fc0b 	bl	8002bcc <HAL_GetTick>
 80013b6:	4601      	mov	r1, r0
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <Altimex_displayLeds+0x128>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	4413      	add	r3, r2
 80013c0:	4299      	cmp	r1, r3
 80013c2:	d905      	bls.n	80013d0 <Altimex_displayLeds+0xa0>
				standbyLastFlash = HAL_GetTick();
 80013c4:	f001 fc02 	bl	8002bcc <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <Altimex_displayLeds+0x128>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e013      	b.n	80013f8 <Altimex_displayLeds+0xc8>
			}
			else
			{
				//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
				if(standbyLastFlash + config->standbyFlashOffLength < HAL_GetTick())
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <Altimex_displayLeds+0x128>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	18d4      	adds	r4, r2, r3
 80013da:	f001 fbf7 	bl	8002bcc <HAL_GetTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	429c      	cmp	r4, r3
 80013e2:	d207      	bcs.n	80013f4 <Altimex_displayLeds+0xc4>
				{
					Strip_Progress_Bar_Single_Color(config->numLeds, GREEN);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fc7e 	bl	8001cee <Strip_Progress_Bar_Single_Color>
 80013f2:	e001      	b.n	80013f8 <Altimex_displayLeds+0xc8>
				}
				else
				{
					Strip_Clear();
 80013f4:	f000 fc9f 	bl	8001d36 <Strip_Clear>
			}
		}
	}

	//Led bar with top led flashing. Full when at gear check altitude
	if(state == ALTIMEX_ASCENT)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d130      	bne.n	8001460 <Altimex_displayLeds+0x130>
	{
		Set_Brightness(config->brightness);
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fcdf 	bl	8001dc8 <Set_Brightness>
		uint32_t standbyFlashLength = config->standbyFlashOnLength + config->standbyFlashOffLength;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	4413      	add	r3, r2
 8001414:	61fb      	str	r3, [r7, #28]

		//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
		if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001416:	f001 fbd9 	bl	8002bcc <HAL_GetTick>
 800141a:	4601      	mov	r1, r0
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <Altimex_displayLeds+0x128>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	4299      	cmp	r1, r3
 8001426:	d905      	bls.n	8001434 <Altimex_displayLeds+0x104>
			standbyLastFlash = HAL_GetTick();
 8001428:	f001 fbd0 	bl	8002bcc <HAL_GetTick>
 800142c:	4603      	mov	r3, r0
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <Altimex_displayLeds+0x128>)
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e015      	b.n	8001460 <Altimex_displayLeds+0x130>
		}
		else
		{
			//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
			if(standbyLastFlash + config->standbyFlashOffLength < HAL_GetTick())
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <Altimex_displayLeds+0x128>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	18d4      	adds	r4, r2, r3
 800143e:	f001 fbc5 	bl	8002bcc <HAL_GetTick>
 8001442:	4603      	mov	r3, r0
 8001444:	429c      	cmp	r4, r3
 8001446:	d209      	bcs.n	800145c <Altimex_displayLeds+0x12c>
			{
				Strip_Progress_Bar_Single_Color(config->numLeds, YELLOW);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800144e:	2101      	movs	r1, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fc4c 	bl	8001cee <Strip_Progress_Bar_Single_Color>
 8001456:	e003      	b.n	8001460 <Altimex_displayLeds+0x130>
 8001458:	20000208 	.word	0x20000208
			}
			else
			{
				Strip_Clear();
 800145c:	f000 fc6b 	bl	8001d36 <Strip_Clear>
		Strip_Progress_Bar_Single_Color(i, GREEN);
		*/
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_GEARCHECK)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d122      	bne.n	80014ac <Altimex_displayLeds+0x17c>
	{
		Set_Brightness(config->brightness);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fcab 	bl	8001dc8 <Set_Brightness>
		uint8_t flash = (step / 7) % 2 == 0;
 8001472:	89ba      	ldrh	r2, [r7, #12]
 8001474:	4bc8      	ldr	r3, [pc, #800]	; (8001798 <Altimex_displayLeds+0x468>)
 8001476:	fba3 1302 	umull	r1, r3, r3, r2
 800147a:	1ad2      	subs	r2, r2, r3
 800147c:	0852      	lsrs	r2, r2, #1
 800147e:	4413      	add	r3, r2
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf0c      	ite	eq
 800148e:	2301      	moveq	r3, #1
 8001490:	2300      	movne	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	76fb      	strb	r3, [r7, #27]
		Strip_Progress_Bar_Single_Color(flash * config->numLeds, GREEN);
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800149c:	7efa      	ldrb	r2, [r7, #27]
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fc21 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	//Solid blue while awaiting jump
	if(state == ALTIMEX_DETECT_FREEFALL_START)
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d10c      	bne.n	80014cc <Altimex_displayLeds+0x19c>
	{
		Set_Brightness(config->brightness);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fc85 	bl	8001dc8 <Set_Brightness>
		Strip_Progress_Bar_Single_Color(config->numLeds, SKYBLUE);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c4:	2104      	movs	r1, #4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fc11 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching breakoff altitude + 1500ft
	if(state == ALTIMEX_FREEFALL)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d160      	bne.n	8001594 <Altimex_displayLeds+0x264>
	{
		Set_Brightness(config->brightness);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fc75 	bl	8001dc8 <Set_Brightness>
		uint8_t leds = (config->numLeds) * (1-(float)(alt - (config->breakoff + 1500)) / (config->exit - (config->breakoff + 1500)));
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ff8d 	bl	8000404 <__aeabi_i2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe ff87 	bl	8000404 <__aeabi_i2d>
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001500:	a3a3      	add	r3, pc, #652	; (adr r3, 8001790 <Altimex_displayLeds+0x460>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fe31 	bl	800016c <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7fe fe29 	bl	8000168 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fad3 	bl	8000ac8 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff7f 	bl	8000428 <__aeabi_f2d>
 800152a:	4682      	mov	sl, r0
 800152c:	468b      	mov	fp, r1
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800153a:	a395      	add	r3, pc, #596	; (adr r3, 8001790 <Altimex_displayLeds+0x460>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7fe fe14 	bl	800016c <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fe0c 	bl	8000168 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4650      	mov	r0, sl
 8001556:	4659      	mov	r1, fp
 8001558:	f7ff f8e8 	bl	800072c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	f04f 0000 	mov.w	r0, #0
 8001564:	498d      	ldr	r1, [pc, #564]	; (800179c <Altimex_displayLeds+0x46c>)
 8001566:	f7fe fdff 	bl	8000168 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4640      	mov	r0, r8
 8001570:	4649      	mov	r1, r9
 8001572:	f7fe ffb1 	bl	80004d8 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fa83 	bl	8000a88 <__aeabi_d2uiz>
 8001582:	4603      	mov	r3, r0
 8001584:	76bb      	strb	r3, [r7, #26]
		Strip_Progress_Bar_Single_Color(leds + 1, SKYBLUE);
 8001586:	7ebb      	ldrb	r3, [r7, #26]
 8001588:	3301      	adds	r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fbad 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching breakoff altitude
	if(state == ALTIMEX_APPROACHING_BREAKOFF)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d154      	bne.n	8001644 <Altimex_displayLeds+0x314>
	{
		Set_Brightness(config->brightness);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fc11 	bl	8001dc8 <Set_Brightness>
		uint8_t leds = (config->numLeds + 1) * (1-(float)(alt - config->breakoff) / ((config->breakoff + 1500) - config->breakoff));
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ac:	3301      	adds	r3, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff28 	bl	8000404 <__aeabi_i2d>
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ff22 	bl	8000404 <__aeabi_i2d>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015c6:	f7fe fdcf 	bl	8000168 <__aeabi_dsub>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa79 	bl	8000ac8 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff25 	bl	8000428 <__aeabi_f2d>
 80015de:	4680      	mov	r8, r0
 80015e0:	4689      	mov	r9, r1
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80015e8:	a369      	add	r3, pc, #420	; (adr r3, 8001790 <Altimex_displayLeds+0x460>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7fe fdbd 	bl	800016c <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001600:	f7fe fdb2 	bl	8000168 <__aeabi_dsub>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4640      	mov	r0, r8
 800160a:	4649      	mov	r1, r9
 800160c:	f7ff f88e 	bl	800072c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	4960      	ldr	r1, [pc, #384]	; (800179c <Altimex_displayLeds+0x46c>)
 800161a:	f7fe fda5 	bl	8000168 <__aeabi_dsub>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7fe ff57 	bl	80004d8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fa29 	bl	8000a88 <__aeabi_d2uiz>
 8001636:	4603      	mov	r3, r0
 8001638:	767b      	strb	r3, [r7, #25]
		Strip_Progress_Bar_Single_Color(leds, GREEN);
 800163a:	7e7b      	ldrb	r3, [r7, #25]
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb55 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_BREAKOFF)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b06      	cmp	r3, #6
 8001648:	d11b      	bne.n	8001682 <Altimex_displayLeds+0x352>
	{
		Set_Brightness(config->brightness);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fbb9 	bl	8001dc8 <Set_Brightness>
		uint8_t on = (step) % 2 == 0;
 8001656:	89bb      	ldrh	r3, [r7, #12]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	b29b      	uxth	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	763b      	strb	r3, [r7, #24]
		uint8_t leds = on * config->numLeds;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001670:	7e3a      	ldrb	r2, [r7, #24]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	75fb      	strb	r3, [r7, #23]
		Strip_Progress_Bar_Single_Color(leds, GREEN);
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fb36 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching deployment altitude
	if(state == ALTIMEX_TRACK)
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	2b07      	cmp	r3, #7
 8001686:	d154      	bne.n	8001732 <Altimex_displayLeds+0x402>
	{
		Set_Brightness(config->brightness);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fb9a 	bl	8001dc8 <Set_Brightness>
		uint8_t leds = (config->numLeds + 1) * (1-(float)(alt - config->deploy) / ((config->deploy + 500) - config->deploy));
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800169a:	3301      	adds	r3, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe feb1 	bl	8000404 <__aeabi_i2d>
 80016a2:	4604      	mov	r4, r0
 80016a4:	460d      	mov	r5, r1
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe feab 	bl	8000404 <__aeabi_i2d>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016b4:	f7fe fd58 	bl	8000168 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa02 	bl	8000ac8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe feae 	bl	8000428 <__aeabi_f2d>
 80016cc:	4680      	mov	r8, r0
 80016ce:	4689      	mov	r9, r1
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <Altimex_displayLeds+0x470>)
 80016dc:	f7fe fd46 	bl	800016c <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016ee:	f7fe fd3b 	bl	8000168 <__aeabi_dsub>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4640      	mov	r0, r8
 80016f8:	4649      	mov	r1, r9
 80016fa:	f7ff f817 	bl	800072c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	4925      	ldr	r1, [pc, #148]	; (800179c <Altimex_displayLeds+0x46c>)
 8001708:	f7fe fd2e 	bl	8000168 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7fe fee0 	bl	80004d8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f9b2 	bl	8000a88 <__aeabi_d2uiz>
 8001724:	4603      	mov	r3, r0
 8001726:	75bb      	strb	r3, [r7, #22]
		Strip_Progress_Bar_Single_Color(leds, RED);
 8001728:	7dbb      	ldrb	r3, [r7, #22]
 800172a:	2102      	movs	r1, #2
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fade 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	//Flashes red until detects canopy deployment
	if(state == ALTIMEX_DEPLOY)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d11b      	bne.n	8001770 <Altimex_displayLeds+0x440>
	{
		Set_Brightness(config->brightness);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fb42 	bl	8001dc8 <Set_Brightness>
		uint8_t on = (step) % 2 == 0;
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	b29b      	uxth	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	757b      	strb	r3, [r7, #21]
		uint8_t leds = on * config->numLeds;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800175e:	7d7a      	ldrb	r2, [r7, #21]
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	753b      	strb	r3, [r7, #20]
		Strip_Progress_Bar_Single_Color(leds, RED);
 8001766:	7d3b      	ldrb	r3, [r7, #20]
 8001768:	2102      	movs	r1, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fabf 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	//Flashes purple
	if(state == ALTIMEX_CANOPY)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b09      	cmp	r3, #9
 8001774:	d12e      	bne.n	80017d4 <Altimex_displayLeds+0x4a4>
	{
		Set_Brightness(config->brightness);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fb23 	bl	8001dc8 <Set_Brightness>
		uint8_t on = (step/10) % 2 == 0;
 8001782:	89bb      	ldrh	r3, [r7, #12]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <Altimex_displayLeds+0x474>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	08db      	lsrs	r3, r3, #3
 800178c:	e00c      	b.n	80017a8 <Altimex_displayLeds+0x478>
 800178e:	bf00      	nop
 8001790:	00000000 	.word	0x00000000
 8001794:	40977000 	.word	0x40977000
 8001798:	24924925 	.word	0x24924925
 800179c:	3ff00000 	.word	0x3ff00000
 80017a0:	407f4000 	.word	0x407f4000
 80017a4:	cccccccd 	.word	0xcccccccd
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	74fb      	strb	r3, [r7, #19]
		uint8_t leds = on * config->numLeds;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017c2:	7cfa      	ldrb	r2, [r7, #19]
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	74bb      	strb	r3, [r7, #18]
		Strip_Progress_Bar_Single_Color(leds, PURPLE);
 80017ca:	7cbb      	ldrb	r3, [r7, #18]
 80017cc:	2103      	movs	r1, #3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fa8d 	bl	8001cee <Strip_Progress_Bar_Single_Color>
	}

	Strip_Send();
 80017d4:	f000 fab5 	bl	8001d42 <Strip_Send>
}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop

080017e4 <printd>:
	size_t len = strlen(charData);
	println(charData, len, uart);
}

void printd(double data, UART_HandleTypeDef* uart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b096      	sub	sp, #88	; 0x58
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	char charData[64] = {'\0'};
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	223c      	movs	r2, #60	; 0x3c
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 fbc3 	bl	8006f88 <memset>
	sprintf(charData, "%f", data);
 8001802:	f107 0014 	add.w	r0, r7, #20
 8001806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800180a:	490a      	ldr	r1, [pc, #40]	; (8001834 <printd+0x50>)
 800180c:	f006 f824 	bl	8007858 <siprintf>
	size_t len = strlen(charData);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fc9b 	bl	8000150 <strlen>
 800181a:	6578      	str	r0, [r7, #84]	; 0x54
	println(charData, len, uart);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f818 	bl	800185a <println>
}
 800182a:	bf00      	nop
 800182c:	3758      	adds	r7, #88	; 0x58
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	0800bb74 	.word	0x0800bb74

08001838 <print>:

void print(char* data, size_t len, UART_HandleTypeDef* uart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, data, len, 100);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	b29a      	uxth	r2, r3
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f004 fd9d 	bl	800638c <HAL_UART_Transmit>
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <println>:

void println(char* data, size_t len, UART_HandleTypeDef* uart)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
	print(data, len, uart);
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff ffe4 	bl	8001838 <print>

	char newline[2] = "\r\n";
 8001870:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001874:	82bb      	strh	r3, [r7, #20]
	print(newline, 2, uart);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffda 	bl	8001838 <print>
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	0000      	movs	r0, r0
	...

08001890 <StateController_updateState>:
uint8_t deployTest = 0; //1 while validating deployment test
uint32_t deployTestStart = 0; //ms, the timestamp for starting to validate deployment
double deployTestStartAlt = 0; //ft, altitude at beginning of current deployment test

void StateController_updateState(struct AltimexConfig* config, double alt)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	e9c7 2300 	strd	r2, r3, [r7]
	if(StateController_currentState == ALTIMEX_STANDBY)
 800189c:	4b9c      	ldr	r3, [pc, #624]	; (8001b10 <StateController_updateState+0x280>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d137      	bne.n	8001914 <StateController_updateState+0x84>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > config->ascentThreshold)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ae:	f7ff f8a3 	bl	80009f8 <__aeabi_dcmpgt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01c      	beq.n	80018f2 <StateController_updateState+0x62>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 80018b8:	4b96      	ldr	r3, [pc, #600]	; (8001b14 <StateController_updateState+0x284>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <StateController_updateState+0x40>
			{
				testingAscent = 1;
 80018c0:	4b94      	ldr	r3, [pc, #592]	; (8001b14 <StateController_updateState+0x284>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
				ascentTestStart = HAL_GetTick();
 80018c6:	f001 f981 	bl	8002bcc <HAL_GetTick>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a92      	ldr	r2, [pc, #584]	; (8001b18 <StateController_updateState+0x288>)
 80018ce:	6013      	str	r3, [r2, #0]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 80018d0:	4b90      	ldr	r3, [pc, #576]	; (8001b14 <StateController_updateState+0x284>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10c      	bne.n	80018f2 <StateController_updateState+0x62>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= config->ascentThresholdTime)
 80018d8:	f001 f978 	bl	8002bcc <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <StateController_updateState+0x288>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	8912      	ldrh	r2, [r2, #8]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d302      	bcc.n	80018f2 <StateController_updateState+0x62>
				{
					StateController_currentState = ALTIMEX_ASCENT;
 80018ec:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <StateController_updateState+0x280>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < config->ascentThreshold)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018fc:	f7ff f85e 	bl	80009bc <__aeabi_dcmplt>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <StateController_updateState+0x84>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8001906:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <StateController_updateState+0x284>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <StateController_updateState+0x84>
			{
				testingAscent = 0;
 800190e:	4b81      	ldr	r3, [pc, #516]	; (8001b14 <StateController_updateState+0x284>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(StateController_currentState == ALTIMEX_ASCENT)
 8001914:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <StateController_updateState+0x280>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10c      	bne.n	8001936 <StateController_updateState+0xa6>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > config->gearCheckAlt)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001926:	f7ff f867 	bl	80009f8 <__aeabi_dcmpgt>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <StateController_updateState+0xa6>
		{
			StateController_currentState = ALTIMEX_GEARCHECK;
 8001930:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <StateController_updateState+0x280>)
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_GEARCHECK)
 8001936:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <StateController_updateState+0x280>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d126      	bne.n	800198c <StateController_updateState+0xfc>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 800193e:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <StateController_updateState+0x28c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <StateController_updateState+0xc6>
		{
			gearCheckNotificationStart = HAL_GetTick();
 8001946:	f001 f941 	bl	8002bcc <HAL_GetTick>
 800194a:	4603      	mov	r3, r0
 800194c:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <StateController_updateState+0x290>)
 800194e:	6013      	str	r3, [r2, #0]
			displayedGearCheck = 1;
 8001950:	4b72      	ldr	r3, [pc, #456]	; (8001b1c <StateController_updateState+0x28c>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck == 1 & HAL_GetTick() > gearCheckNotificationStart + config->gearCheckNotificationLength)
 8001956:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <StateController_updateState+0x28c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2dc      	uxtb	r4, r3
 8001964:	f001 f932 	bl	8002bcc <HAL_GetTick>
 8001968:	4601      	mov	r1, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <StateController_updateState+0x290>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4299      	cmp	r1, r3
 8001976:	bf8c      	ite	hi
 8001978:	2301      	movhi	r3, #1
 800197a:	2300      	movls	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4023      	ands	r3, r4
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <StateController_updateState+0xfc>
		{
			StateController_currentState = ALTIMEX_DETECT_FREEFALL_START;
 8001986:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <StateController_updateState+0x280>)
 8001988:	2203      	movs	r2, #3
 800198a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_DETECT_FREEFALL_START)
 800198c:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <StateController_updateState+0x280>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d170      	bne.n	8001a76 <StateController_updateState+0x1e6>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 8001994:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <StateController_updateState+0x294>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199e:	f7ff f80d 	bl	80009bc <__aeabi_dcmplt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d050      	beq.n	8001a4a <StateController_updateState+0x1ba>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 80019a8:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <StateController_updateState+0x298>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10c      	bne.n	80019ca <StateController_updateState+0x13a>
			{
				freefallTest = 1;
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <StateController_updateState+0x298>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
				freefallTestStart = HAL_GetTick();
 80019b6:	f001 f909 	bl	8002bcc <HAL_GetTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a5b      	ldr	r2, [pc, #364]	; (8001b2c <StateController_updateState+0x29c>)
 80019be:	6013      	str	r3, [r2, #0]
				freefallStartAlt = alt;
 80019c0:	495b      	ldr	r1, [pc, #364]	; (8001b30 <StateController_updateState+0x2a0>)
 80019c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + config->freefallThresholdTime)
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <StateController_updateState+0x298>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d13b      	bne.n	8001a4a <StateController_updateState+0x1ba>
 80019d2:	f001 f8fb 	bl	8002bcc <HAL_GetTick>
 80019d6:	4601      	mov	r1, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <StateController_updateState+0x29c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	4299      	cmp	r1, r3
 80019e4:	d931      	bls.n	8001a4a <StateController_updateState+0x1ba>
			{
				double elapsedTimeSec = (double)(HAL_GetTick() - freefallTestStart) / 1000;
 80019e6:	f001 f8f1 	bl	8002bcc <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <StateController_updateState+0x29c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fcf6 	bl	80003e4 <__aeabi_ui2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <StateController_updateState+0x2a4>)
 80019fe:	f7fe fe95 	bl	800072c <__aeabi_ddiv>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				double avgSpeedFps = ((double)(freefallStartAlt - alt) / elapsedTimeSec);
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <StateController_updateState+0x2a0>)
 8001a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a14:	f7fe fba8 	bl	8000168 <__aeabi_dsub>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a24:	f7fe fe82 	bl	800072c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	e9c7 2308 	strd	r2, r3, [r7, #32]

				//If average speed is above 80mph
				if(avgSpeedFps >= 117.0) //80mph to fps
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <StateController_updateState+0x2a8>)
 8001a36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a3a:	f7fe ffd3 	bl	80009e4 <__aeabi_dcmpge>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <StateController_updateState+0x1ba>
				{
					StateController_currentState = ALTIMEX_FREEFALL;
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <StateController_updateState+0x280>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <StateController_updateState+0x294>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a54:	f7fe ffd0 	bl	80009f8 <__aeabi_dcmpgt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <StateController_updateState+0x1dc>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <StateController_updateState+0x298>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <StateController_updateState+0x1dc>
			{
				freefallTest = 0;
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <StateController_updateState+0x298>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
			}
		}

		prevAlt = alt;
 8001a6c:	492d      	ldr	r1, [pc, #180]	; (8001b24 <StateController_updateState+0x294>)
 8001a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(StateController_currentState == ALTIMEX_FREEFALL)
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <StateController_updateState+0x280>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d113      	bne.n	8001aa6 <StateController_updateState+0x216>
	{
		if(alt < config->breakoff + 1500.0)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a84:	a320      	add	r3, pc, #128	; (adr r3, 8001b08 <StateController_updateState+0x278>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fb6f 	bl	800016c <__adddf3>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a96:	f7fe ff91 	bl	80009bc <__aeabi_dcmplt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <StateController_updateState+0x216>
		{
			StateController_currentState = ALTIMEX_APPROACHING_BREAKOFF;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <StateController_updateState+0x280>)
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_APPROACHING_BREAKOFF)
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <StateController_updateState+0x280>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d10c      	bne.n	8001ac8 <StateController_updateState+0x238>
	{
		if(alt < config->breakoff)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ab8:	f7fe ff80 	bl	80009bc <__aeabi_dcmplt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <StateController_updateState+0x238>
		{
			StateController_currentState = ALTIMEX_BREAKOFF;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <StateController_updateState+0x280>)
 8001ac4:	2206      	movs	r2, #6
 8001ac6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_BREAKOFF)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <StateController_updateState+0x280>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d113      	bne.n	8001af8 <StateController_updateState+0x268>
	{
		if(alt < config->breakoff - 500.0)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <StateController_updateState+0x2ac>)
 8001adc:	f7fe fb44 	bl	8000168 <__aeabi_dsub>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae8:	f7fe ff68 	bl	80009bc <__aeabi_dcmplt>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <StateController_updateState+0x268>
		{
			StateController_currentState = ALTIMEX_TRACK;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <StateController_updateState+0x280>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_TRACK)
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <StateController_updateState+0x280>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d12c      	bne.n	8001b5a <StateController_updateState+0x2ca>
 8001b00:	e01e      	b.n	8001b40 <StateController_updateState+0x2b0>
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40977000 	.word	0x40977000
 8001b10:	2000020c 	.word	0x2000020c
 8001b14:	2000020d 	.word	0x2000020d
 8001b18:	20000210 	.word	0x20000210
 8001b1c:	20000218 	.word	0x20000218
 8001b20:	20000214 	.word	0x20000214
 8001b24:	20000220 	.word	0x20000220
 8001b28:	20000228 	.word	0x20000228
 8001b2c:	2000022c 	.word	0x2000022c
 8001b30:	20000230 	.word	0x20000230
 8001b34:	408f4000 	.word	0x408f4000
 8001b38:	405d4000 	.word	0x405d4000
 8001b3c:	407f4000 	.word	0x407f4000
	{
		if(alt < config->deploy)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b4a:	f7fe ff37 	bl	80009bc <__aeabi_dcmplt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <StateController_updateState+0x2ca>
		{
			StateController_currentState = ALTIMEX_DEPLOY;
 8001b54:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <StateController_updateState+0x3e8>)
 8001b56:	2208      	movs	r2, #8
 8001b58:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_DEPLOY)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <StateController_updateState+0x3e8>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	f040 8085 	bne.w	8001c6e <StateController_updateState+0x3de>
	{

		if(deployTest == 0)
 8001b64:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <StateController_updateState+0x3ec>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d13e      	bne.n	8001bea <StateController_updateState+0x35a>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			double elapsedTimeSec = (double)(HAL_GetTick() - deployTestStart) / 1000;
 8001b6c:	f001 f82e 	bl	8002bcc <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <StateController_updateState+0x3f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc33 	bl	80003e4 <__aeabi_ui2d>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <StateController_updateState+0x3f4>)
 8001b84:	f7fe fdd2 	bl	800072c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double avgSpeedFps = fabs((double)(deployTestStartAlt - alt) / elapsedTimeSec);
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <StateController_updateState+0x3f8>)
 8001b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b9a:	f7fe fae5 	bl	8000168 <__aeabi_dsub>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001baa:	f7fe fdbf 	bl	800072c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	6139      	str	r1, [r7, #16]
 8001bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	617b      	str	r3, [r7, #20]
			if(avgSpeedFps <= 73.0) //50mph to fps
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <StateController_updateState+0x3fc>)
 8001bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bc6:	f7fe ff03 	bl	80009d0 <__aeabi_dcmple>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00c      	beq.n	8001bea <StateController_updateState+0x35a>
			{
				deployTest = 1;
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <StateController_updateState+0x3ec>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
				deployTestStart = HAL_GetTick();
 8001bd6:	f000 fff9 	bl	8002bcc <HAL_GetTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <StateController_updateState+0x3f0>)
 8001bde:	6013      	str	r3, [r2, #0]
				deployTestStartAlt = alt;
 8001be0:	4929      	ldr	r1, [pc, #164]	; (8001c88 <StateController_updateState+0x3f8>)
 8001be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if(deployTest == 1)
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <StateController_updateState+0x3ec>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d133      	bne.n	8001c5a <StateController_updateState+0x3ca>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <StateController_updateState+0x3f8>)
 8001bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bfc:	f7fe fab4 	bl	8000168 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	f000 ffe0 	bl	8002bcc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <StateController_updateState+0x3f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fbe5 	bl	80003e4 <__aeabi_ui2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fd83 	bl	800072c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <StateController_updateState+0x3fc>)
 8001c34:	f7fe fecc 	bl	80009d0 <__aeabi_dcmple>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <StateController_updateState+0x3ca>
			{
				if(HAL_GetTick() > deployTestStart + config->deployTestThresholdTime)
 8001c3e:	f000 ffc5 	bl	8002bcc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	895b      	ldrh	r3, [r3, #10]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <StateController_updateState+0x3f0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	440b      	add	r3, r1
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d902      	bls.n	8001c5a <StateController_updateState+0x3ca>
				{
					StateController_currentState = ALTIMEX_CANOPY;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <StateController_updateState+0x3e8>)
 8001c56:	2209      	movs	r2, #9
 8001c58:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 8001c5a:	f000 ffb7 	bl	8002bcc <HAL_GetTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <StateController_updateState+0x400>)
 8001c62:	6013      	str	r3, [r2, #0]
		deployTestPrevAlt = alt;
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <StateController_updateState+0x404>)
 8001c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c6a:	e9c1 2300 	strd	r2, r3, [r1]
		{
			StateController_currentState = COLORALTI_STANDBY;
		}
		*/
	}
}
 8001c6e:	bf00      	nop
 8001c70:	3730      	adds	r7, #48	; 0x30
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000020c 	.word	0x2000020c
 8001c7c:	20000244 	.word	0x20000244
 8001c80:	20000248 	.word	0x20000248
 8001c84:	408f4000 	.word	0x408f4000
 8001c88:	20000250 	.word	0x20000250
 8001c8c:	40524000 	.word	0x40524000
 8001c90:	20000240 	.word	0x20000240
 8001c94:	20000238 	.word	0x20000238

08001c98 <STORAGE_read>:


#include "altimex_storage.h"

HAL_StatusTypeDef STORAGE_read(I2C_HandleTypeDef* i2cx, uint16_t offset, size_t len, uint8_t* data)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef read_res = HAL_I2C_Mem_Read(i2cx, 0xA0, offset, 2, data, len, 1000);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	897a      	ldrh	r2, [r7, #10]
 8001cae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb2:	9102      	str	r1, [sp, #8]
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	21a0      	movs	r1, #160	; 0xa0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f001 ff3c 	bl	8003b3c <HAL_I2C_Mem_Read>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8001cc8:	2064      	movs	r0, #100	; 0x64
 8001cca:	f000 ff89 	bl	8002be0 <HAL_Delay>
	return read_res;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f835 	bl	8001d50 <Set_LED_Timer>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 8001cfe:	f000 f9ef 	bl	80020e0 <Clear_All_LED>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d901      	bls.n	8001d0c <Strip_Progress_Bar_Single_Color+0x1e>
 8001d08:	230a      	movs	r3, #10
 8001d0a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e008      	b.n	8001d24 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	79ba      	ldrb	r2, [r7, #6]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f9b6 	bl	800208a <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d3f2      	bcc.n	8001d12 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <Strip_Clear>:

void Strip_Clear()
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
	Clear_All_LED();
 8001d3a:	f000 f9d1 	bl	80020e0 <Clear_All_LED>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <Strip_Send>:

void Strip_Send()
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
	WS2813_Send();
 8001d46:	f000 f8c3 	bl	8001ed0 <WS2813_Send>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 8001d58:	4a03      	ldr	r2, [pc, #12]	; (8001d68 <Set_LED_Timer+0x18>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000258 	.word	0x20000258

08001d6c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	b2d9      	uxtb	r1, r3
 8001d7e:	4a11      	ldr	r2, [pc, #68]	; (8001dc4 <Set_LED+0x58>)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	460a      	mov	r2, r1
 8001d88:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	b2d9      	uxtb	r1, r3
 8001d8e:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <Set_LED+0x58>)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	460a      	mov	r2, r1
 8001d98:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	b2d9      	uxtb	r1, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <Set_LED+0x58>)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	460a      	mov	r2, r1
 8001da8:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2d9      	uxtb	r1, r3
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <Set_LED+0x58>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	460a      	mov	r2, r1
 8001db8:	71da      	strb	r2, [r3, #7]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000258 	.word	0x20000258

08001dc8 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b2d      	cmp	r3, #45	; 0x2d
 8001dd4:	dd01      	ble.n	8001dda <Set_Brightness+0x12>
 8001dd6:	232d      	movs	r3, #45	; 0x2d
 8001dd8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e065      	b.n	8001eac <Set_Brightness+0xe4>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 8001de0:	4a39      	ldr	r2, [pc, #228]	; (8001ec8 <Set_Brightness+0x100>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	7919      	ldrb	r1, [r3, #4]
 8001dea:	4a37      	ldr	r2, [pc, #220]	; (8001ec8 <Set_Brightness+0x100>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	330a      	adds	r3, #10
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	460a      	mov	r2, r1
 8001df6:	711a      	strb	r2, [r3, #4]
		for (int j=1; j<4; j++)
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e050      	b.n	8001ea0 <Set_Brightness+0xd8>
		{
			float angle = 90-brightness;  // in degrees
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ff69 	bl	8000cdc <__aeabi_i2f>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7fe fb0a 	bl	8000428 <__aeabi_f2d>
 8001e14:	a32a      	add	r3, pc, #168	; (adr r3, 8001ec0 <Set_Brightness+0xf8>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fb5d 	bl	80004d8 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <Set_Brightness+0x104>)
 8001e2c:	f7fe fc7e 	bl	800072c <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fe46 	bl	8000ac8 <__aeabi_d2f>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <Set_Brightness+0x100>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	441a      	add	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fad7 	bl	8000404 <__aeabi_i2d>
 8001e56:	4604      	mov	r4, r0
 8001e58:	460d      	mov	r5, r1
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7fe fae4 	bl	8000428 <__aeabi_f2d>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f007 ff6e 	bl	8009d48 <tan>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fc5a 	bl	800072c <__aeabi_ddiv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fe02 	bl	8000a88 <__aeabi_d2uiz>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b2d9      	uxtb	r1, r3
 8001e88:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <Set_Brightness+0x100>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	441a      	add	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	332c      	adds	r3, #44	; 0x2c
 8001e96:	460a      	mov	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	ddab      	ble.n	8001dfe <Set_Brightness+0x36>
	for (int i=0; i<MAX_LED; i++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b09      	cmp	r3, #9
 8001eb0:	dd96      	ble.n	8001de0 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	53c8d4f1 	.word	0x53c8d4f1
 8001ec4:	400921fb 	.word	0x400921fb
 8001ec8:	20000258 	.word	0x20000258
 8001ecc:	40668000 	.word	0x40668000

08001ed0 <WS2813_Send>:

void WS2813_Send ()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e03d      	b.n	8001f5c <WS2813_Send+0x8c>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8001ee0:	4a34      	ldr	r2, [pc, #208]	; (8001fb4 <WS2813_Send+0xe4>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	4931      	ldr	r1, [pc, #196]	; (8001fb4 <WS2813_Send+0xe4>)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	431a      	orrs	r2, r3
 8001efe:	492d      	ldr	r1, [pc, #180]	; (8001fb4 <WS2813_Send+0xe4>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001f0e:	2317      	movs	r3, #23
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e01d      	b.n	8001f50 <WS2813_Send+0x80>
		{
			if (color&(1<<i))
 8001f14:	2201      	movs	r2, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <WS2813_Send+0x66>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 8001f26:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <WS2813_Send+0xe4>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3328      	adds	r3, #40	; 0x28
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	2230      	movs	r2, #48	; 0x30
 8001f32:	809a      	strh	r2, [r3, #4]
 8001f34:	e006      	b.n	8001f44 <WS2813_Send+0x74>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <WS2813_Send+0xe4>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	2214      	movs	r2, #20
 8001f42:	809a      	strh	r2, [r3, #4]

			indx++;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	dade      	bge.n	8001f14 <WS2813_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	ddbe      	ble.n	8001ee0 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	e00c      	b.n	8001f82 <WS2813_Send+0xb2>
	{
		ws_config.pwmData[indx] = 0;
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <WS2813_Send+0xe4>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3328      	adds	r3, #40	; 0x28
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	2200      	movs	r2, #0
 8001f74:	809a      	strh	r2, [r3, #4]
		indx++;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b31      	cmp	r3, #49	; 0x31
 8001f86:	ddef      	ble.n	8001f68 <WS2813_Send+0x98>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <WS2813_Send+0xe4>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <WS2813_Send+0xe8>)
 8001f92:	2104      	movs	r1, #4
 8001f94:	f003 f9d4 	bl	8005340 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 8001f98:	bf00      	nop
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <WS2813_Send+0xe4>)
 8001f9c:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0fa      	beq.n	8001f9a <WS2813_Send+0xca>
	ws_config.datasentflag = 0;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <WS2813_Send+0xe4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001fac:	bf00      	nop
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000258 	.word	0x20000258
 8001fb8:	200002ac 	.word	0x200002ac

08001fbc <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <Color_To_RGB+0x24>
		rgb->r = 0;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2214      	movs	r2, #20
 8001fde:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d108      	bne.n	8001ff8 <Color_To_RGB+0x3c>
		rgb->r = 255;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	22ff      	movs	r2, #255	; 0xff
 8001fea:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	22ff      	movs	r2, #255	; 0xff
 8001ff0:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d108      	bne.n	8002010 <Color_To_RGB+0x54>
		rgb->r = 255;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d108      	bne.n	8002028 <Color_To_RGB+0x6c>
		rgb->r = 255;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b04      	cmp	r3, #4
 800202c:	d108      	bne.n	8002040 <Color_To_RGB+0x84>
		rgb->r = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	22ff      	movs	r2, #255	; 0xff
 8002038:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	22c8      	movs	r2, #200	; 0xc8
 800203e:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	2b05      	cmp	r3, #5
 8002044:	d108      	bne.n	8002058 <Color_To_RGB+0x9c>
		rgb->r = 0;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	709a      	strb	r2, [r3, #2]
	}
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	461a      	mov	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	789b      	ldrb	r3, [r3, #2]
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fe75 	bl	8001d6c <Set_LED>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff8c 	bl	8001fbc <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffd9 	bl	8002062 <Set_LED_From_RGB>
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2104      	movs	r1, #4
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fadc 	bl	8005684 <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000258 	.word	0x20000258

080020e0 <Clear_All_LED>:

void Clear_All_LED()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	e007      	b.n	80020fc <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2105      	movs	r1, #5
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ffca 	bl	800208a <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	3301      	adds	r3, #1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b09      	cmp	r3, #9
 8002100:	d9f4      	bls.n	80020ec <Clear_All_LED+0xc>
	}
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	0000      	movs	r0, r0
	...

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b0a1      	sub	sp, #132	; 0x84
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002116:	f000 fd01 	bl	8002b1c <HAL_Init>

  /* USER CODE BEGIN Init */
	Strip_Set_Timer(&htim2);
 800211a:	485d      	ldr	r0, [pc, #372]	; (8002290 <main+0x180>)
 800211c:	f7ff fddc 	bl	8001cd8 <Strip_Set_Timer>
	Strip_Clear();
 8002120:	f7ff fe09 	bl	8001d36 <Strip_Clear>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002124:	f000 f8be 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002128:	f000 fa44 	bl	80025b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800212c:	f000 fa24 	bl	8002578 <MX_DMA_Init>
  MX_I2C1_Init();
 8002130:	f000 f8fa 	bl	8002328 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002134:	f000 f976 	bl	8002424 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002138:	f000 f924 	bl	8002384 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800213c:	f000 f9f2 	bl	8002524 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 8002140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002144:	f000 fd4c 	bl	8002be0 <HAL_Delay>
	uint8_t lps_startup_result = LPS_Init(&hi2c1, LPS_DEFAULT_ADDRESS, &huart1);
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <main+0x184>)
 800214a:	215c      	movs	r1, #92	; 0x5c
 800214c:	4852      	ldr	r0, [pc, #328]	; (8002298 <main+0x188>)
 800214e:	f7fe fe19 	bl	8000d84 <LPS_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	double refP = LPS_Get_Calibration_Pressure(10, 100);
 8002158:	2164      	movs	r1, #100	; 0x64
 800215a:	200a      	movs	r0, #10
 800215c:	f7ff f858 	bl	8001210 <LPS_Get_Calibration_Pressure>
 8002160:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
	double refT = LPS_Get_Calibration_Temperature(10, 100);
 8002164:	2164      	movs	r1, #100	; 0x64
 8002166:	200a      	movs	r0, #10
 8002168:	f7fe ffc4 	bl	80010f4 <LPS_Get_Calibration_Temperature>
 800216c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	double tempF = LPS_Get_TempF();
 8002170:	f7fe ff2e 	bl	8000fd0 <LPS_Get_TempF>
 8002174:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	double alt = 0.0;
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	//uint16_t alt = 0;

	struct AltimexConfig config;
	config.ascentThreshold = 500;              //The altitude you must pass for it to transition into the ascent state
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <main+0x18c>)
 800218a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	config.ascentThresholdTime = 1000;         //ms that altitude must be above the ascentThreshold before transitioning between states
 800218e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002192:	823b      	strh	r3, [r7, #16]
	config.deployTestThresholdTime = 2000;     //ms, threshold time that vertical speed has to be under 50mph
 8002194:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002198:	827b      	strh	r3, [r7, #18]
	config.gearCheckNotificationLength = 5000; //ms, the length of the gearcheck notification
 800219a:	f241 3388 	movw	r3, #5000	; 0x1388
 800219e:	617b      	str	r3, [r7, #20]
	config.freefallThresholdTime = 2000;       //ms, the amount of time that the vertical speed must be above the freefall threshold speed to transition into freefall state
 80021a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021a4:	61bb      	str	r3, [r7, #24]
	config.exit = 12500.0;                       //Exit altitude
 80021a6:	a332      	add	r3, pc, #200	; (adr r3, 8002270 <main+0x160>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	config.breakoff = 5500.0;                    //Breakoff altitude
 80021b0:	a331      	add	r3, pc, #196	; (adr r3, 8002278 <main+0x168>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	config.deploy = 4500.0;                      //Deployment altitude
 80021ba:	a331      	add	r3, pc, #196	; (adr r3, 8002280 <main+0x170>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	config.standbyFlashOnLength = 100;         //How long the light is on for when in standby mode
 80021c4:	2364      	movs	r3, #100	; 0x64
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
	config.standbyFlashOffLength = 10000;       //Period between each flash in standby mode
 80021c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	config.numLeds = 10;                       //The number of leds being used
 80021ce:	230a      	movs	r3, #10
 80021d0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	config.gearCheckAlt = 10000.0;               //The altitude that the gear check notification is given
 80021d4:	a32c      	add	r3, pc, #176	; (adr r3, 8002288 <main+0x178>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	config.brightness = 20;                    //LED brightness
 80021de:	2314      	movs	r3, #20
 80021e0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	config.standbyBrightness = 5;              //Brightness of LEDS while in standby mode
 80021e4:	2305      	movs	r3, #5
 80021e6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t step = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
  while (1)
  {
	//uint8_t data[] = "hello!!!";
	//STORAGE_write(&hi2c1, 0, 8, &data);
	uint8_t data_read[8] = {'\0'};
 80021f0:	2300      	movs	r3, #0
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
	STORAGE_read(&hi2c1, 0, 8, &data_read);
 80021f8:	463b      	mov	r3, r7
 80021fa:	2208      	movs	r2, #8
 80021fc:	2100      	movs	r1, #0
 80021fe:	4826      	ldr	r0, [pc, #152]	; (8002298 <main+0x188>)
 8002200:	f7ff fd4a 	bl	8001c98 <STORAGE_read>
	//println(data_read, strlen(data_read), &huart1);

	tempF = LPS_Get_TempF();
 8002204:	f7fe fee4 	bl	8000fd0 <LPS_Get_TempF>
 8002208:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	printd(tempF, &huart1);
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <main+0x184>)
 800220e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002212:	f7ff fae7 	bl	80017e4 <printd>
    	if(alt < 2500) alt -= 5;
    	else alt -= 29;
    }
	*/

    alt = LPS_Get_RelAlt_Ft(refP);
 8002216:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800221a:	f7fe ff01 	bl	8001020 <LPS_Get_RelAlt_Ft>
 800221e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    StateController_updateState(&config, alt);
 8002222:	f107 0108 	add.w	r1, r7, #8
 8002226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800222a:	4608      	mov	r0, r1
 800222c:	f7ff fb30 	bl	8001890 <StateController_updateState>
    Altimex_displayLeds(StateController_currentState, step, &config, alt);
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <main+0x190>)
 8002232:	781c      	ldrb	r4, [r3, #0]
 8002234:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002238:	f7fe fc26 	bl	8000a88 <__aeabi_d2uiz>
 800223c:	4603      	mov	r3, r0
 800223e:	b29b      	uxth	r3, r3
 8002240:	f107 0208 	add.w	r2, r7, #8
 8002244:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff f871 	bl	8001330 <Altimex_displayLeds>
    step++;
 800224e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002252:	3301      	adds	r3, #1
 8002254:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    if(step > 100) step = 0;
 8002258:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d902      	bls.n	8002266 <main+0x156>
 8002260:	2300      	movs	r3, #0
 8002262:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    //Data is received one byte at a time
    //uint8_t Rx_data[1];
    //HAL_UART_Receive(&huart1, Rx_data, 100, 100);

    HAL_Delay(100); //10hz
 8002266:	2064      	movs	r0, #100	; 0x64
 8002268:	f000 fcba 	bl	8002be0 <HAL_Delay>
  {
 800226c:	e7c0      	b.n	80021f0 <main+0xe0>
 800226e:	bf00      	nop
 8002270:	00000000 	.word	0x00000000
 8002274:	40c86a00 	.word	0x40c86a00
 8002278:	00000000 	.word	0x00000000
 800227c:	40b57c00 	.word	0x40b57c00
 8002280:	00000000 	.word	0x00000000
 8002284:	40b19400 	.word	0x40b19400
 8002288:	00000000 	.word	0x00000000
 800228c:	40c38800 	.word	0x40c38800
 8002290:	20000590 	.word	0x20000590
 8002294:	2000061c 	.word	0x2000061c
 8002298:	200004f4 	.word	0x200004f4
 800229c:	407f4000 	.word	0x407f4000
 80022a0:	2000020c 	.word	0x2000020c

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b090      	sub	sp, #64	; 0x40
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0318 	add.w	r3, r7, #24
 80022ae:	2228      	movs	r2, #40	; 0x28
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fe68 	bl	8006f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ca:	2301      	movs	r3, #1
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ce:	2310      	movs	r3, #16
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d2:	2302      	movs	r3, #2
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80022d6:	2300      	movs	r3, #0
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80022da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e0:	f107 0318 	add.w	r3, r7, #24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fb73 	bl	80049d0 <HAL_RCC_OscConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80022f0:	f000 f9a0 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f4:	230f      	movs	r3, #15
 80022f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f8:	2302      	movs	r3, #2
 80022fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2102      	movs	r1, #2
 800230e:	4618      	mov	r0, r3
 8002310:	f002 fde0 	bl	8004ed4 <HAL_RCC_ClockConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800231a:	f000 f98b 	bl	8002634 <Error_Handler>
  }
}
 800231e:	bf00      	nop
 8002320:	3740      	adds	r7, #64	; 0x40
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_I2C1_Init+0x50>)
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <MX_I2C1_Init+0x54>)
 8002330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_I2C1_Init+0x50>)
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <MX_I2C1_Init+0x58>)
 8002336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_I2C1_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_I2C1_Init+0x50>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_I2C1_Init+0x50>)
 8002346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800234a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <MX_I2C1_Init+0x50>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_I2C1_Init+0x50>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MX_I2C1_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_I2C1_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_I2C1_Init+0x50>)
 8002366:	f001 f9ab 	bl	80036c0 <HAL_I2C_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002370:	f000 f960 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200004f4 	.word	0x200004f4
 800237c:	40005400 	.word	0x40005400
 8002380:	000186a0 	.word	0x000186a0

08002384 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002398:	463b      	mov	r3, r7
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_TIM1_Init+0x98>)
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <MX_TIM1_Init+0x9c>)
 80023a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM1_Init+0x98>)
 80023a8:	2203      	movs	r2, #3
 80023aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_TIM1_Init+0x98>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM1_Init+0x98>)
 80023b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_TIM1_Init+0x98>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_TIM1_Init+0x98>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_TIM1_Init+0x98>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023cc:	4813      	ldr	r0, [pc, #76]	; (800241c <MX_TIM1_Init+0x98>)
 80023ce:	f002 ff0f 	bl	80051f0 <HAL_TIM_Base_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023d8:	f000 f92c 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <MX_TIM1_Init+0x98>)
 80023ea:	f003 fad3 	bl	8005994 <HAL_TIM_ConfigClockSource>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023f4:	f000 f91e 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_TIM1_Init+0x98>)
 8002406:	f003 ff13 	bl	8006230 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002410:	f000 f910 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000548 	.word	0x20000548
 8002420:	40012c00 	.word	0x40012c00

08002424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08e      	sub	sp, #56	; 0x38
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
 8002450:	615a      	str	r2, [r3, #20]
 8002452:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <MX_TIM2_Init+0xfc>)
 8002456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800245a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <MX_TIM2_Init+0xfc>)
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <MX_TIM2_Init+0xfc>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <MX_TIM2_Init+0xfc>)
 800246a:	223f      	movs	r2, #63	; 0x3f
 800246c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <MX_TIM2_Init+0xfc>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <MX_TIM2_Init+0xfc>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247a:	4829      	ldr	r0, [pc, #164]	; (8002520 <MX_TIM2_Init+0xfc>)
 800247c:	f002 feb8 	bl	80051f0 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002486:	f000 f8d5 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002494:	4619      	mov	r1, r3
 8002496:	4822      	ldr	r0, [pc, #136]	; (8002520 <MX_TIM2_Init+0xfc>)
 8002498:	f003 fa7c 	bl	8005994 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80024a2:	f000 f8c7 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024a6:	481e      	ldr	r0, [pc, #120]	; (8002520 <MX_TIM2_Init+0xfc>)
 80024a8:	f002 fef1 	bl	800528e <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80024b2:	f000 f8bf 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024be:	f107 0320 	add.w	r3, r7, #32
 80024c2:	4619      	mov	r1, r3
 80024c4:	4816      	ldr	r0, [pc, #88]	; (8002520 <MX_TIM2_Init+0xfc>)
 80024c6:	f003 feb3 	bl	8006230 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80024d0:	f000 f8b0 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_TIM2_Init+0xfc>)
 80024ec:	f003 f990 	bl	8005810 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80024f6:	f000 f89d 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2204      	movs	r2, #4
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_TIM2_Init+0xfc>)
 8002502:	f003 f985 	bl	8005810 <HAL_TIM_PWM_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800250c:	f000 f892 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_TIM2_Init+0xfc>)
 8002512:	f000 f957 	bl	80027c4 <HAL_TIM_MspPostInit>

}
 8002516:	bf00      	nop
 8002518:	3738      	adds	r7, #56	; 0x38
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000590 	.word	0x20000590

08002524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <MX_USART1_UART_Init+0x50>)
 800252c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002530:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800255c:	f003 fec6 	bl	80062ec <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002566:	f000 f865 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000061c 	.word	0x2000061c
 8002574:	40013800 	.word	0x40013800

08002578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <MX_DMA_Init+0x38>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <MX_DMA_Init+0x38>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6153      	str	r3, [r2, #20]
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <MX_DMA_Init+0x38>)
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2011      	movs	r0, #17
 800259c:	f000 fc1b 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80025a0:	2011      	movs	r0, #17
 80025a2:	f000 fc34 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000

080025b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <MX_GPIO_Init+0x78>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <MX_GPIO_Init+0x78>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <MX_GPIO_Init+0x78>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_GPIO_Init+0x78>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a11      	ldr	r2, [pc, #68]	; (800262c <MX_GPIO_Init+0x78>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_GPIO_Init+0x78>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80025fe:	480c      	ldr	r0, [pc, #48]	; (8002630 <MX_GPIO_Init+0x7c>)
 8002600:	f001 f846 	bl	8003690 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002604:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8002608:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2302      	movs	r3, #2
 8002614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	4619      	mov	r1, r3
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <MX_GPIO_Init+0x7c>)
 800261e:	f000 feb3 	bl	8003388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	40010c00 	.word	0x40010c00

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_MspInit+0x40>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_MspInit+0x40>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6193      	str	r3, [r2, #24]
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_MspInit+0x40>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_MspInit+0x40>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_MspInit+0x40>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_MspInit+0x40>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <HAL_I2C_MspInit+0x70>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d123      	bne.n	80026ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_I2C_MspInit+0x74>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_I2C_MspInit+0x74>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_I2C_MspInit+0x74>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026bc:	23c0      	movs	r3, #192	; 0xc0
 80026be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c0:	2312      	movs	r3, #18
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	4619      	mov	r1, r3
 80026ce:	480b      	ldr	r0, [pc, #44]	; (80026fc <HAL_I2C_MspInit+0x78>)
 80026d0:	f000 fe5a 	bl	8003388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_I2C_MspInit+0x74>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_I2C_MspInit+0x74>)
 80026da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026de:	61d3      	str	r3, [r2, #28]
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_I2C_MspInit+0x74>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026ec:	bf00      	nop
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40005400 	.word	0x40005400
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010c00 	.word	0x40010c00

08002700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_TIM_Base_MspInit+0xb4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10c      	bne.n	800272c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002712:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 8002718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800271c:	6193      	str	r3, [r2, #24]
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800272a:	e03e      	b.n	80027aa <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d139      	bne.n	80027aa <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	61d3      	str	r3, [r2, #28]
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002750:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_TIM_Base_MspInit+0xc0>)
 8002752:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002756:	2210      	movs	r2, #16
 8002758:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800276c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002774:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002782:	480e      	ldr	r0, [pc, #56]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002784:	f000 fb5e 	bl	8002e44 <HAL_DMA_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 800278e:	f7ff ff51 	bl	8002634 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a06      	ldr	r2, [pc, #24]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	200005d8 	.word	0x200005d8
 80027c0:	40020080 	.word	0x40020080

080027c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e2:	d117      	bne.n	8002814 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_TIM_MspPostInit+0x58>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_TIM_MspPostInit+0x58>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_TIM_MspPostInit+0x58>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027fc:	2303      	movs	r3, #3
 80027fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2302      	movs	r3, #2
 8002806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	4619      	mov	r1, r3
 800280e:	4804      	ldr	r0, [pc, #16]	; (8002820 <HAL_TIM_MspPostInit+0x5c>)
 8002810:	f000 fdba 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	40010800 	.word	0x40010800

08002824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_UART_MspInit+0x9c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d139      	bne.n	80028b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_UART_MspInit+0xa0>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_UART_MspInit+0xa0>)
 800284a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_UART_MspInit+0xa0>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_UART_MspInit+0xa0>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_UART_MspInit+0xa0>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6193      	str	r3, [r2, #24]
 8002868:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_UART_MspInit+0xa0>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287e:	2303      	movs	r3, #3
 8002880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	4619      	mov	r1, r3
 8002888:	480f      	ldr	r0, [pc, #60]	; (80028c8 <HAL_UART_MspInit+0xa4>)
 800288a:	f000 fd7d 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800288e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	4809      	ldr	r0, [pc, #36]	; (80028c8 <HAL_UART_MspInit+0xa4>)
 80028a4:	f000 fd70 	bl	8003388 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2025      	movs	r0, #37	; 0x25
 80028ae:	f000 fa92 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028b2:	2025      	movs	r0, #37	; 0x25
 80028b4:	f000 faab 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028b8:	bf00      	nop
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40013800 	.word	0x40013800
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010800 	.word	0x40010800

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002912:	f000 f949 	bl	8002ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <DMA1_Channel7_IRQHandler+0x10>)
 8002922:	f000 fbfd 	bl	8003120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200005d8 	.word	0x200005d8

08002930 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <USART1_IRQHandler+0x10>)
 8002936:	f003 fdad 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000061c 	.word	0x2000061c

08002944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return 1;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <_kill>:

int _kill(int pid, int sig)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800295c:	f004 faea 	bl	8006f34 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	2216      	movs	r2, #22
 8002964:	601a      	str	r2, [r3, #0]
  return -1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_exit>:

void _exit (int status)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800297a:	f04f 31ff 	mov.w	r1, #4294967295
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ffe7 	bl	8002952 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002984:	e7fe      	b.n	8002984 <_exit+0x12>

08002986 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e00a      	b.n	80029ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002998:	f3af 8000 	nop.w
 800299c:	4601      	mov	r1, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	60ba      	str	r2, [r7, #8]
 80029a4:	b2ca      	uxtb	r2, r1
 80029a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	dbf0      	blt.n	8002998 <_read+0x12>
  }

  return len;
 80029b6:	687b      	ldr	r3, [r7, #4]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e009      	b.n	80029e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	60ba      	str	r2, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3301      	adds	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	dbf1      	blt.n	80029d2 <_write+0x12>
  }
  return len;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_close>:

int _close(int file)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <_isatty>:

int _isatty(int file)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a34:	2301      	movs	r3, #1
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <_sbrk+0x5c>)
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <_sbrk+0x60>)
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <_sbrk+0x64>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <_sbrk+0x64>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <_sbrk+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d207      	bcs.n	8002a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a88:	f004 fa54 	bl	8006f34 <__errno>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	220c      	movs	r2, #12
 8002a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e009      	b.n	8002aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <_sbrk+0x64>)
 8002aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20005000 	.word	0x20005000
 8002ab8:	00000400 	.word	0x00000400
 8002abc:	20000664 	.word	0x20000664
 8002ac0:	20000680 	.word	0x20000680

08002ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad0:	480c      	ldr	r0, [pc, #48]	; (8002b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ad2:	490d      	ldr	r1, [pc, #52]	; (8002b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad8:	e002      	b.n	8002ae0 <LoopCopyDataInit>

08002ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ade:	3304      	adds	r3, #4

08002ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae4:	d3f9      	bcc.n	8002ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	; (8002b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aec:	e001      	b.n	8002af2 <LoopFillZerobss>

08002aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af0:	3204      	adds	r2, #4

08002af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af4:	d3fb      	bcc.n	8002aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002af6:	f7ff ffe5 	bl	8002ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002afa:	f004 fa21 	bl	8006f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002afe:	f7ff fb07 	bl	8002110 <main>
  bx lr
 8002b02:	4770      	bx	lr
  ldr r0, =_sdata
 8002b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b08:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b0c:	0800c190 	.word	0x0800c190
  ldr r2, =_sbss
 8002b10:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b14:	2000067c 	.word	0x2000067c

08002b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC1_2_IRQHandler>
	...

08002b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_Init+0x28>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_Init+0x28>)
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	f000 f947 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b32:	200f      	movs	r0, #15
 8002b34:	f000 f808 	bl	8002b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b38:	f7ff fd82 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_InitTick+0x54>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_InitTick+0x58>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f95f 	bl	8002e2a <HAL_SYSTICK_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00e      	b.n	8002b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0f      	cmp	r3, #15
 8002b7a:	d80a      	bhi.n	8002b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f000 f927 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b88:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <HAL_InitTick+0x5c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_IncTick+0x1c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_IncTick+0x20>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <HAL_IncTick+0x20>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	20000668 	.word	0x20000668

08002bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <HAL_GetTick+0x10>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	20000668 	.word	0x20000668

08002be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff fff0 	bl	8002bcc <HAL_GetTick>
 8002bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d005      	beq.n	8002c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_Delay+0x44>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c06:	bf00      	nop
 8002c08:	f7ff ffe0 	bl	8002bcc <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d8f7      	bhi.n	8002c08 <HAL_Delay+0x28>
  {
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000008 	.word	0x20000008

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <__NVIC_EnableIRQ+0x34>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f7ff ff90 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff2d 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff42 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff90 	bl	8002d18 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5f 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff35 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e043      	b.n	8002ee2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_DMA_Init+0xa8>)
 8002e62:	4413      	add	r3, r2
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_DMA_Init+0xac>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_DMA_Init+0xb0>)
 8002e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	bffdfff8 	.word	0xbffdfff8
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Start_IT+0x20>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e04b      	b.n	8002fb0 <HAL_DMA_Start_IT+0xb8>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d13a      	bne.n	8002fa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f9eb 	bl	800332c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 020e 	orr.w	r2, r2, #14
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e00f      	b.n	8002f90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 020a 	orr.w	r2, r2, #10
 8002f8e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d008      	beq.n	8002fe2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e020      	b.n	8003024 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 020e 	bic.w	r2, r2, #14
 8002ff0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
	...

08003030 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d005      	beq.n	8003054 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2204      	movs	r2, #4
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	e051      	b.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 020e 	bic.w	r2, r2, #14
 8003062:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a22      	ldr	r2, [pc, #136]	; (8003104 <HAL_DMA_Abort_IT+0xd4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d029      	beq.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_DMA_Abort_IT+0xd8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <HAL_DMA_Abort_IT+0x9e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1f      	ldr	r2, [pc, #124]	; (800310c <HAL_DMA_Abort_IT+0xdc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01a      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x98>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_DMA_Abort_IT+0xe0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d012      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x92>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <HAL_DMA_Abort_IT+0xe4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00a      	beq.n	80030bc <HAL_DMA_Abort_IT+0x8c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_DMA_Abort_IT+0xe8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d102      	bne.n	80030b6 <HAL_DMA_Abort_IT+0x86>
 80030b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030b4:	e00e      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ba:	e00b      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	e008      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	e005      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030cc:	e002      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030ce:	2310      	movs	r3, #16
 80030d0:	e000      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <HAL_DMA_Abort_IT+0xec>)
 80030d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
    } 
  }
  return status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40020008 	.word	0x40020008
 8003108:	4002001c 	.word	0x4002001c
 800310c:	40020030 	.word	0x40020030
 8003110:	40020044 	.word	0x40020044
 8003114:	40020058 	.word	0x40020058
 8003118:	4002006c 	.word	0x4002006c
 800311c:	40020000 	.word	0x40020000

08003120 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	2204      	movs	r2, #4
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d04f      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xc8>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d04a      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0204 	bic.w	r2, r2, #4
 800316e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a66      	ldr	r2, [pc, #408]	; (8003310 <HAL_DMA_IRQHandler+0x1f0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d029      	beq.n	80031ce <HAL_DMA_IRQHandler+0xae>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_DMA_IRQHandler+0x1f4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <HAL_DMA_IRQHandler+0xaa>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a63      	ldr	r2, [pc, #396]	; (8003318 <HAL_DMA_IRQHandler+0x1f8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01a      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xa4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a62      	ldr	r2, [pc, #392]	; (800331c <HAL_DMA_IRQHandler+0x1fc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d012      	beq.n	80031be <HAL_DMA_IRQHandler+0x9e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a60      	ldr	r2, [pc, #384]	; (8003320 <HAL_DMA_IRQHandler+0x200>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00a      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x98>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5f      	ldr	r2, [pc, #380]	; (8003324 <HAL_DMA_IRQHandler+0x204>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d102      	bne.n	80031b2 <HAL_DMA_IRQHandler+0x92>
 80031ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031b0:	e00e      	b.n	80031d0 <HAL_DMA_IRQHandler+0xb0>
 80031b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031b6:	e00b      	b.n	80031d0 <HAL_DMA_IRQHandler+0xb0>
 80031b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031bc:	e008      	b.n	80031d0 <HAL_DMA_IRQHandler+0xb0>
 80031be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031c2:	e005      	b.n	80031d0 <HAL_DMA_IRQHandler+0xb0>
 80031c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c8:	e002      	b.n	80031d0 <HAL_DMA_IRQHandler+0xb0>
 80031ca:	2340      	movs	r3, #64	; 0x40
 80031cc:	e000      	b.n	80031d0 <HAL_DMA_IRQHandler+0xb0>
 80031ce:	2304      	movs	r3, #4
 80031d0:	4a55      	ldr	r2, [pc, #340]	; (8003328 <HAL_DMA_IRQHandler+0x208>)
 80031d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8094 	beq.w	8003306 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031e6:	e08e      	b.n	8003306 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	2202      	movs	r2, #2
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d056      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x186>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d051      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 020a 	bic.w	r2, r2, #10
 800321e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_DMA_IRQHandler+0x1f0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d029      	beq.n	8003286 <HAL_DMA_IRQHandler+0x166>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a37      	ldr	r2, [pc, #220]	; (8003314 <HAL_DMA_IRQHandler+0x1f4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x162>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a35      	ldr	r2, [pc, #212]	; (8003318 <HAL_DMA_IRQHandler+0x1f8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01a      	beq.n	800327c <HAL_DMA_IRQHandler+0x15c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <HAL_DMA_IRQHandler+0x1fc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d012      	beq.n	8003276 <HAL_DMA_IRQHandler+0x156>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a32      	ldr	r2, [pc, #200]	; (8003320 <HAL_DMA_IRQHandler+0x200>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00a      	beq.n	8003270 <HAL_DMA_IRQHandler+0x150>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a31      	ldr	r2, [pc, #196]	; (8003324 <HAL_DMA_IRQHandler+0x204>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d102      	bne.n	800326a <HAL_DMA_IRQHandler+0x14a>
 8003264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003268:	e00e      	b.n	8003288 <HAL_DMA_IRQHandler+0x168>
 800326a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326e:	e00b      	b.n	8003288 <HAL_DMA_IRQHandler+0x168>
 8003270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003274:	e008      	b.n	8003288 <HAL_DMA_IRQHandler+0x168>
 8003276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800327a:	e005      	b.n	8003288 <HAL_DMA_IRQHandler+0x168>
 800327c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003280:	e002      	b.n	8003288 <HAL_DMA_IRQHandler+0x168>
 8003282:	2320      	movs	r3, #32
 8003284:	e000      	b.n	8003288 <HAL_DMA_IRQHandler+0x168>
 8003286:	2302      	movs	r3, #2
 8003288:	4a27      	ldr	r2, [pc, #156]	; (8003328 <HAL_DMA_IRQHandler+0x208>)
 800328a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d034      	beq.n	8003306 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032a4:	e02f      	b.n	8003306 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2208      	movs	r2, #8
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <HAL_DMA_IRQHandler+0x1e8>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d023      	beq.n	8003308 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 020e 	bic.w	r2, r2, #14
 80032ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d004      	beq.n	8003308 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
    }
  }
  return;
 8003306:	bf00      	nop
 8003308:	bf00      	nop
}
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40020008 	.word	0x40020008
 8003314:	4002001c 	.word	0x4002001c
 8003318:	40020030 	.word	0x40020030
 800331c:	40020044 	.word	0x40020044
 8003320:	40020058 	.word	0x40020058
 8003324:	4002006c 	.word	0x4002006c
 8003328:	40020000 	.word	0x40020000

0800332c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b10      	cmp	r3, #16
 8003358:	d108      	bne.n	800336c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800336a:	e007      	b.n	800337c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
	...

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b08b      	sub	sp, #44	; 0x2c
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800339a:	e169      	b.n	8003670 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800339c:	2201      	movs	r2, #1
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f040 8158 	bne.w	800366a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a9a      	ldr	r2, [pc, #616]	; (8003628 <HAL_GPIO_Init+0x2a0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d05e      	beq.n	8003482 <HAL_GPIO_Init+0xfa>
 80033c4:	4a98      	ldr	r2, [pc, #608]	; (8003628 <HAL_GPIO_Init+0x2a0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d875      	bhi.n	80034b6 <HAL_GPIO_Init+0x12e>
 80033ca:	4a98      	ldr	r2, [pc, #608]	; (800362c <HAL_GPIO_Init+0x2a4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d058      	beq.n	8003482 <HAL_GPIO_Init+0xfa>
 80033d0:	4a96      	ldr	r2, [pc, #600]	; (800362c <HAL_GPIO_Init+0x2a4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d86f      	bhi.n	80034b6 <HAL_GPIO_Init+0x12e>
 80033d6:	4a96      	ldr	r2, [pc, #600]	; (8003630 <HAL_GPIO_Init+0x2a8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d052      	beq.n	8003482 <HAL_GPIO_Init+0xfa>
 80033dc:	4a94      	ldr	r2, [pc, #592]	; (8003630 <HAL_GPIO_Init+0x2a8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d869      	bhi.n	80034b6 <HAL_GPIO_Init+0x12e>
 80033e2:	4a94      	ldr	r2, [pc, #592]	; (8003634 <HAL_GPIO_Init+0x2ac>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d04c      	beq.n	8003482 <HAL_GPIO_Init+0xfa>
 80033e8:	4a92      	ldr	r2, [pc, #584]	; (8003634 <HAL_GPIO_Init+0x2ac>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d863      	bhi.n	80034b6 <HAL_GPIO_Init+0x12e>
 80033ee:	4a92      	ldr	r2, [pc, #584]	; (8003638 <HAL_GPIO_Init+0x2b0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d046      	beq.n	8003482 <HAL_GPIO_Init+0xfa>
 80033f4:	4a90      	ldr	r2, [pc, #576]	; (8003638 <HAL_GPIO_Init+0x2b0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d85d      	bhi.n	80034b6 <HAL_GPIO_Init+0x12e>
 80033fa:	2b12      	cmp	r3, #18
 80033fc:	d82a      	bhi.n	8003454 <HAL_GPIO_Init+0xcc>
 80033fe:	2b12      	cmp	r3, #18
 8003400:	d859      	bhi.n	80034b6 <HAL_GPIO_Init+0x12e>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_GPIO_Init+0x80>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	08003483 	.word	0x08003483
 800340c:	0800345d 	.word	0x0800345d
 8003410:	0800346f 	.word	0x0800346f
 8003414:	080034b1 	.word	0x080034b1
 8003418:	080034b7 	.word	0x080034b7
 800341c:	080034b7 	.word	0x080034b7
 8003420:	080034b7 	.word	0x080034b7
 8003424:	080034b7 	.word	0x080034b7
 8003428:	080034b7 	.word	0x080034b7
 800342c:	080034b7 	.word	0x080034b7
 8003430:	080034b7 	.word	0x080034b7
 8003434:	080034b7 	.word	0x080034b7
 8003438:	080034b7 	.word	0x080034b7
 800343c:	080034b7 	.word	0x080034b7
 8003440:	080034b7 	.word	0x080034b7
 8003444:	080034b7 	.word	0x080034b7
 8003448:	080034b7 	.word	0x080034b7
 800344c:	08003465 	.word	0x08003465
 8003450:	08003479 	.word	0x08003479
 8003454:	4a79      	ldr	r2, [pc, #484]	; (800363c <HAL_GPIO_Init+0x2b4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800345a:	e02c      	b.n	80034b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	623b      	str	r3, [r7, #32]
          break;
 8003462:	e029      	b.n	80034b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	3304      	adds	r3, #4
 800346a:	623b      	str	r3, [r7, #32]
          break;
 800346c:	e024      	b.n	80034b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	3308      	adds	r3, #8
 8003474:	623b      	str	r3, [r7, #32]
          break;
 8003476:	e01f      	b.n	80034b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	330c      	adds	r3, #12
 800347e:	623b      	str	r3, [r7, #32]
          break;
 8003480:	e01a      	b.n	80034b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800348a:	2304      	movs	r3, #4
 800348c:	623b      	str	r3, [r7, #32]
          break;
 800348e:	e013      	b.n	80034b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003498:	2308      	movs	r3, #8
 800349a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	611a      	str	r2, [r3, #16]
          break;
 80034a2:	e009      	b.n	80034b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034a4:	2308      	movs	r3, #8
 80034a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	615a      	str	r2, [r3, #20]
          break;
 80034ae:	e003      	b.n	80034b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]
          break;
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x130>
          break;
 80034b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2bff      	cmp	r3, #255	; 0xff
 80034bc:	d801      	bhi.n	80034c2 <HAL_GPIO_Init+0x13a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	e001      	b.n	80034c6 <HAL_GPIO_Init+0x13e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2bff      	cmp	r3, #255	; 0xff
 80034cc:	d802      	bhi.n	80034d4 <HAL_GPIO_Init+0x14c>
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	e002      	b.n	80034da <HAL_GPIO_Init+0x152>
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	3b08      	subs	r3, #8
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	210f      	movs	r1, #15
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	401a      	ands	r2, r3
 80034ec:	6a39      	ldr	r1, [r7, #32]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80b1 	beq.w	800366a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003508:	4b4d      	ldr	r3, [pc, #308]	; (8003640 <HAL_GPIO_Init+0x2b8>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	4a4c      	ldr	r2, [pc, #304]	; (8003640 <HAL_GPIO_Init+0x2b8>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6193      	str	r3, [r2, #24]
 8003514:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <HAL_GPIO_Init+0x2b8>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003520:	4a48      	ldr	r2, [pc, #288]	; (8003644 <HAL_GPIO_Init+0x2bc>)
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	220f      	movs	r2, #15
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <HAL_GPIO_Init+0x2c0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_GPIO_Init+0x1ec>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3f      	ldr	r2, [pc, #252]	; (800364c <HAL_GPIO_Init+0x2c4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00d      	beq.n	8003570 <HAL_GPIO_Init+0x1e8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3e      	ldr	r2, [pc, #248]	; (8003650 <HAL_GPIO_Init+0x2c8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <HAL_GPIO_Init+0x1e4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <HAL_GPIO_Init+0x2cc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_GPIO_Init+0x1e0>
 8003564:	2303      	movs	r3, #3
 8003566:	e006      	b.n	8003576 <HAL_GPIO_Init+0x1ee>
 8003568:	2304      	movs	r3, #4
 800356a:	e004      	b.n	8003576 <HAL_GPIO_Init+0x1ee>
 800356c:	2302      	movs	r3, #2
 800356e:	e002      	b.n	8003576 <HAL_GPIO_Init+0x1ee>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_GPIO_Init+0x1ee>
 8003574:	2300      	movs	r3, #0
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	f002 0203 	and.w	r2, r2, #3
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	4093      	lsls	r3, r2
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003586:	492f      	ldr	r1, [pc, #188]	; (8003644 <HAL_GPIO_Init+0x2bc>)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	3302      	adds	r3, #2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d006      	beq.n	80035ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035a0:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	492c      	ldr	r1, [pc, #176]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035ae:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	4928      	ldr	r1, [pc, #160]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d006      	beq.n	80035d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035c8:	4b23      	ldr	r3, [pc, #140]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4922      	ldr	r1, [pc, #136]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	43db      	mvns	r3, r3
 80035de:	491e      	ldr	r1, [pc, #120]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d006      	beq.n	80035fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4918      	ldr	r1, [pc, #96]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
 80035fc:	e006      	b.n	800360c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035fe:	4b16      	ldr	r3, [pc, #88]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	43db      	mvns	r3, r3
 8003606:	4914      	ldr	r1, [pc, #80]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 8003608:	4013      	ands	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d021      	beq.n	800365c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_GPIO_Init+0x2d0>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e021      	b.n	800366a <HAL_GPIO_Init+0x2e2>
 8003626:	bf00      	nop
 8003628:	10320000 	.word	0x10320000
 800362c:	10310000 	.word	0x10310000
 8003630:	10220000 	.word	0x10220000
 8003634:	10210000 	.word	0x10210000
 8003638:	10120000 	.word	0x10120000
 800363c:	10110000 	.word	0x10110000
 8003640:	40021000 	.word	0x40021000
 8003644:	40010000 	.word	0x40010000
 8003648:	40010800 	.word	0x40010800
 800364c:	40010c00 	.word	0x40010c00
 8003650:	40011000 	.word	0x40011000
 8003654:	40011400 	.word	0x40011400
 8003658:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_GPIO_Init+0x304>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	43db      	mvns	r3, r3
 8003664:	4909      	ldr	r1, [pc, #36]	; (800368c <HAL_GPIO_Init+0x304>)
 8003666:	4013      	ands	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	3301      	adds	r3, #1
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	f47f ae8e 	bne.w	800339c <HAL_GPIO_Init+0x14>
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	372c      	adds	r7, #44	; 0x2c
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40010400 	.word	0x40010400

08003690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e12b      	b.n	800392a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe ffcc 	bl	8002684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003724:	f001 fd1e 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a81      	ldr	r2, [pc, #516]	; (8003934 <HAL_I2C_Init+0x274>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d807      	bhi.n	8003744 <HAL_I2C_Init+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a80      	ldr	r2, [pc, #512]	; (8003938 <HAL_I2C_Init+0x278>)
 8003738:	4293      	cmp	r3, r2
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e006      	b.n	8003752 <HAL_I2C_Init+0x92>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a7d      	ldr	r2, [pc, #500]	; (800393c <HAL_I2C_Init+0x27c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0e7      	b.n	800392a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a78      	ldr	r2, [pc, #480]	; (8003940 <HAL_I2C_Init+0x280>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_I2C_Init+0x274>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <HAL_I2C_Init+0xd4>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	e009      	b.n	80037a8 <HAL_I2C_Init+0xe8>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_I2C_Init+0x284>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	495c      	ldr	r1, [pc, #368]	; (8003934 <HAL_I2C_Init+0x274>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d819      	bhi.n	80037fc <HAL_I2C_Init+0x13c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e59      	subs	r1, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037dc:	400b      	ands	r3, r1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_I2C_Init+0x138>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e59      	subs	r1, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	e051      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037f8:	2304      	movs	r3, #4
 80037fa:	e04f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <HAL_I2C_Init+0x168>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e012      	b.n	800384e <HAL_I2C_Init+0x18e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x196>
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_I2C_Init+0x1dc>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10e      	bne.n	800387c <HAL_I2C_Init+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	e00f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6809      	ldr	r1, [r1, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6911      	ldr	r1, [r2, #16]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	000186a0 	.word	0x000186a0
 8003938:	001e847f 	.word	0x001e847f
 800393c:	003d08ff 	.word	0x003d08ff
 8003940:	431bde83 	.word	0x431bde83
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003962:	f7ff f933 	bl	8002bcc <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	f040 80d9 	bne.w	8003b28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2319      	movs	r3, #25
 800397c:	2201      	movs	r2, #1
 800397e:	496d      	ldr	r1, [pc, #436]	; (8003b34 <HAL_I2C_Mem_Write+0x1ec>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fdef 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
 800398e:	e0cc      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_I2C_Mem_Write+0x56>
 800399a:	2302      	movs	r3, #2
 800399c:	e0c5      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d007      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2221      	movs	r2, #33	; 0x21
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a4d      	ldr	r2, [pc, #308]	; (8003b38 <HAL_I2C_Mem_Write+0x1f0>)
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a06:	88f8      	ldrh	r0, [r7, #6]
 8003a08:	893a      	ldrh	r2, [r7, #8]
 8003a0a:	8979      	ldrh	r1, [r7, #10]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4603      	mov	r3, r0
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fc26 	bl	8004268 <I2C_RequestMemoryWrite>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d052      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e081      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 feb4 	bl	8004798 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d107      	bne.n	8003a4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e06b      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_I2C_Mem_Write+0x180>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d017      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1aa      	bne.n	8003a26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fea7 	bl	8004828 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d107      	bne.n	8003af8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e016      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	00100002 	.word	0x00100002
 8003b38:	ffff0000 	.word	0xffff0000

08003b3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b5a:	f7ff f837 	bl	8002bcc <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	f040 8244 	bne.w	8003ff6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2319      	movs	r3, #25
 8003b74:	2201      	movs	r2, #1
 8003b76:	4982      	ldr	r1, [pc, #520]	; (8003d80 <HAL_I2C_Mem_Read+0x244>)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fcf3 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	e237      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_I2C_Mem_Read+0x5a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e230      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d007      	beq.n	8003bbc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2222      	movs	r2, #34	; 0x22
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a62      	ldr	r2, [pc, #392]	; (8003d84 <HAL_I2C_Mem_Read+0x248>)
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bfe:	88f8      	ldrh	r0, [r7, #6]
 8003c00:	893a      	ldrh	r2, [r7, #8]
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fbc0 	bl	8004394 <I2C_RequestMemoryRead>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1ec      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e1c0      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d11e      	bne.n	8003c94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c66:	b672      	cpsid	i
}
 8003c68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c90:	b662      	cpsie	i
}
 8003c92:	e035      	b.n	8003d00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d11e      	bne.n	8003cda <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003caa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cac:	b672      	cpsid	i
}
 8003cae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cd6:	b662      	cpsie	i
}
 8003cd8:	e012      	b.n	8003d00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d00:	e166      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	f200 811f 	bhi.w	8003f4a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d123      	bne.n	8003d5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 fdcd 	bl	80048b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e167      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d5a:	e139      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d152      	bne.n	8003e0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	4906      	ldr	r1, [pc, #24]	; (8003d88 <HAL_I2C_Mem_Read+0x24c>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fbf8 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e13c      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
 8003d7e:	bf00      	nop
 8003d80:	00100002 	.word	0x00100002
 8003d84:	ffff0000 	.word	0xffff0000
 8003d88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d8c:	b672      	cpsid	i
}
 8003d8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd2:	b662      	cpsie	i
}
 8003dd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e08:	e0e2      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	2200      	movs	r2, #0
 8003e12:	497b      	ldr	r1, [pc, #492]	; (8004000 <HAL_I2C_Mem_Read+0x4c4>)
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fba5 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0e9      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e34:	b672      	cpsid	i
}
 8003e36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_I2C_Mem_Read+0x4c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	08db      	lsrs	r3, r3, #3
 8003e70:	4a65      	ldr	r2, [pc, #404]	; (8004008 <HAL_I2C_Mem_Read+0x4cc>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0a1a      	lsrs	r2, r3, #8
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00da      	lsls	r2, r3, #3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d118      	bne.n	8003ec2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003eb2:	b662      	cpsie	i
}
 8003eb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e09a      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d1d9      	bne.n	8003e84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f12:	b662      	cpsie	i
}
 8003f14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f48:	e042      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fcb2 	bl	80048b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e04c      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d118      	bne.n	8003fd0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f ae94 	bne.w	8003d02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3728      	adds	r7, #40	; 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	00010004 	.word	0x00010004
 8004004:	20000000 	.word	0x20000000
 8004008:	14f8b589 	.word	0x14f8b589

0800400c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	460b      	mov	r3, r1
 800401a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800401c:	f7fe fdd6 	bl	8002bcc <HAL_GetTick>
 8004020:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	f040 8111 	bne.w	8004256 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2319      	movs	r3, #25
 800403a:	2201      	movs	r2, #1
 800403c:	4988      	ldr	r1, [pc, #544]	; (8004260 <HAL_I2C_IsDeviceReady+0x254>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa90 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
 800404c:	e104      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_I2C_IsDeviceReady+0x50>
 8004058:	2302      	movs	r3, #2
 800405a:	e0fd      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d007      	beq.n	8004082 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2224      	movs	r2, #36	; 0x24
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a70      	ldr	r2, [pc, #448]	; (8004264 <HAL_I2C_IsDeviceReady+0x258>)
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa4e 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d103      	bne.n	80040e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0b6      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ea:	897b      	ldrh	r3, [r7, #10]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fe fd67 	bl	8002bcc <HAL_GetTick>
 80040fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800412e:	e025      	b.n	800417c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fe fd4c 	bl	8002bcc <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <HAL_I2C_IsDeviceReady+0x13a>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22a0      	movs	r2, #160	; 0xa0
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2ba0      	cmp	r3, #160	; 0xa0
 8004186:	d005      	beq.n	8004194 <HAL_I2C_IsDeviceReady+0x188>
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <HAL_I2C_IsDeviceReady+0x188>
 800418e:	7dbb      	ldrb	r3, [r7, #22]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0cd      	beq.n	8004130 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d129      	bne.n	80041fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2319      	movs	r3, #25
 80041d6:	2201      	movs	r2, #1
 80041d8:	4921      	ldr	r1, [pc, #132]	; (8004260 <HAL_I2C_IsDeviceReady+0x254>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f9c2 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e036      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e02c      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004216:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2319      	movs	r3, #25
 800421e:	2201      	movs	r2, #1
 8004220:	490f      	ldr	r1, [pc, #60]	; (8004260 <HAL_I2C_IsDeviceReady+0x254>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f99e 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e012      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	3301      	adds	r3, #1
 8004236:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	f4ff af32 	bcc.w	80040a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	00100002 	.word	0x00100002
 8004264:	ffff0000 	.word	0xffff0000

08004268 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	461a      	mov	r2, r3
 8004276:	4603      	mov	r3, r0
 8004278:	817b      	strh	r3, [r7, #10]
 800427a:	460b      	mov	r3, r1
 800427c:	813b      	strh	r3, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004290:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2200      	movs	r2, #0
 800429a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f960 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b8:	d103      	bne.n	80042c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e05f      	b.n	8004386 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	492d      	ldr	r1, [pc, #180]	; (8004390 <I2C_RequestMemoryWrite+0x128>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f9bb 	bl	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e04c      	b.n	8004386 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	6a39      	ldr	r1, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fa46 	bl	8004798 <I2C_WaitOnTXEFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b04      	cmp	r3, #4
 8004318:	d107      	bne.n	800432a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004328:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e02b      	b.n	8004386 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	e021      	b.n	8004384 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004340:	893b      	ldrh	r3, [r7, #8]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	b29b      	uxth	r3, r3
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	6a39      	ldr	r1, [r7, #32]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fa20 	bl	8004798 <I2C_WaitOnTXEFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2b04      	cmp	r3, #4
 8004364:	d107      	bne.n	8004376 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e005      	b.n	8004386 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800437a:	893b      	ldrh	r3, [r7, #8]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	00010002 	.word	0x00010002

08004394 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	817b      	strh	r3, [r7, #10]
 80043a6:	460b      	mov	r3, r1
 80043a8:	813b      	strh	r3, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f8c2 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f4:	d103      	bne.n	80043fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0aa      	b.n	8004558 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004410:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	4952      	ldr	r1, [pc, #328]	; (8004560 <I2C_RequestMemoryRead+0x1cc>)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f91d 	bl	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e097      	b.n	8004558 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	6a39      	ldr	r1, [r7, #32]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f9a8 	bl	8004798 <I2C_WaitOnTXEFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b04      	cmp	r3, #4
 8004454:	d107      	bne.n	8004466 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004464:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e076      	b.n	8004558 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004470:	893b      	ldrh	r3, [r7, #8]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	611a      	str	r2, [r3, #16]
 800447a:	e021      	b.n	80044c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800447c:	893b      	ldrh	r3, [r7, #8]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	b29b      	uxth	r3, r3
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f982 	bl	8004798 <I2C_WaitOnTXEFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d107      	bne.n	80044b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e050      	b.n	8004558 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b6:	893b      	ldrh	r3, [r7, #8]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	6a39      	ldr	r1, [r7, #32]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f967 	bl	8004798 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d107      	bne.n	80044e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e035      	b.n	8004558 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2200      	movs	r2, #0
 8004504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f82b 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004522:	d103      	bne.n	800452c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e013      	b.n	8004558 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004530:	897b      	ldrh	r3, [r7, #10]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	6a3a      	ldr	r2, [r7, #32]
 8004544:	4906      	ldr	r1, [pc, #24]	; (8004560 <I2C_RequestMemoryRead+0x1cc>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f886 	bl	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	00010002 	.word	0x00010002

08004564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004574:	e048      	b.n	8004608 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d044      	beq.n	8004608 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fb25 	bl	8002bcc <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d139      	bne.n	8004608 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10d      	bne.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	43da      	mvns	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4013      	ands	r3, r2
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bf0c      	ite	eq
 80045b0:	2301      	moveq	r3, #1
 80045b2:	2300      	movne	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	e00c      	b.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d116      	bne.n	8004608 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f043 0220 	orr.w	r2, r3, #32
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e023      	b.n	8004650 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	0c1b      	lsrs	r3, r3, #16
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10d      	bne.n	800462e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	43da      	mvns	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	e00c      	b.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	43da      	mvns	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	429a      	cmp	r2, r3
 800464c:	d093      	beq.n	8004576 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004666:	e071      	b.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	d123      	bne.n	80046c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004690:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f043 0204 	orr.w	r2, r3, #4
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e067      	b.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d041      	beq.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7fe fa80 	bl	8002bcc <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d136      	bne.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10c      	bne.n	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	43da      	mvns	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4013      	ands	r3, r2
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bf14      	ite	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	2300      	moveq	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	e00b      	b.n	800471a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	43da      	mvns	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4013      	ands	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e021      	b.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10c      	bne.n	8004770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	43da      	mvns	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e00b      	b.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	f47f af6d 	bne.w	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a4:	e034      	b.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8e3 	bl	8004972 <I2C_IsAcknowledgeFailed>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e034      	b.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d028      	beq.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fe fa05 	bl	8002bcc <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11d      	bne.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d016      	beq.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e007      	b.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d1c3      	bne.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004834:	e034      	b.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f89b 	bl	8004972 <I2C_IsAcknowledgeFailed>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e034      	b.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d028      	beq.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7fe f9bd 	bl	8002bcc <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d11d      	bne.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d016      	beq.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e007      	b.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d1c3      	bne.n	8004836 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c4:	e049      	b.n	800495a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d119      	bne.n	8004908 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0210 	mvn.w	r2, #16
 80048dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e030      	b.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004908:	f7fe f960 	bl	8002bcc <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11d      	bne.n	800495a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d016      	beq.n	800495a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e007      	b.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d1ae      	bne.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004988:	d11b      	bne.n	80049c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004992:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f043 0204 	orr.w	r2, r3, #4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e272      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8087 	beq.w	8004afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049f0:	4b92      	ldr	r3, [pc, #584]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d00c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049fc:	4b8f      	ldr	r3, [pc, #572]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d112      	bne.n	8004a2e <HAL_RCC_OscConfig+0x5e>
 8004a08:	4b8c      	ldr	r3, [pc, #560]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d10b      	bne.n	8004a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a16:	4b89      	ldr	r3, [pc, #548]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d06c      	beq.n	8004afc <HAL_RCC_OscConfig+0x12c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d168      	bne.n	8004afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e24c      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d106      	bne.n	8004a46 <HAL_RCC_OscConfig+0x76>
 8004a38:	4b80      	ldr	r3, [pc, #512]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a7f      	ldr	r2, [pc, #508]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	e02e      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x98>
 8004a4e:	4b7b      	ldr	r3, [pc, #492]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7a      	ldr	r2, [pc, #488]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b78      	ldr	r3, [pc, #480]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a77      	ldr	r2, [pc, #476]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e01d      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0xbc>
 8004a72:	4b72      	ldr	r3, [pc, #456]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a71      	ldr	r2, [pc, #452]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd4>
 8004a8c:	4b6b      	ldr	r3, [pc, #428]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6a      	ldr	r2, [pc, #424]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b68      	ldr	r3, [pc, #416]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a67      	ldr	r2, [pc, #412]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe f88e 	bl	8002bcc <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fe f88a 	bl	8002bcc <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e200      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe4>
 8004ad2:	e014      	b.n	8004afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fe f87a 	bl	8002bcc <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fe f876 	bl	8002bcc <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1ec      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aee:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x10c>
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d063      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0a:	4b4c      	ldr	r3, [pc, #304]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b16:	4b49      	ldr	r3, [pc, #292]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d11c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x18c>
 8004b22:	4b46      	ldr	r3, [pc, #280]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d116      	bne.n	8004b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_RCC_OscConfig+0x176>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e1c0      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4939      	ldr	r1, [pc, #228]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	e03a      	b.n	8004bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b64:	4b36      	ldr	r3, [pc, #216]	; (8004c40 <HAL_RCC_OscConfig+0x270>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fe f82f 	bl	8002bcc <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b72:	f7fe f82b 	bl	8002bcc <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e1a1      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b84:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b90:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4927      	ldr	r1, [pc, #156]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	600b      	str	r3, [r1, #0]
 8004ba4:	e015      	b.n	8004bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba6:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe f80e 	bl	8002bcc <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fe f80a 	bl	8002bcc <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e180      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d03a      	beq.n	8004c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d019      	beq.n	8004c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_RCC_OscConfig+0x274>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bec:	f7fd ffee 	bl	8002bcc <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf4:	f7fd ffea 	bl	8002bcc <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e160      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c12:	2001      	movs	r0, #1
 8004c14:	f000 face 	bl	80051b4 <RCC_Delay>
 8004c18:	e01c      	b.n	8004c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_RCC_OscConfig+0x274>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c20:	f7fd ffd4 	bl	8002bcc <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c26:	e00f      	b.n	8004c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c28:	f7fd ffd0 	bl	8002bcc <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d908      	bls.n	8004c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e146      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	42420000 	.word	0x42420000
 8004c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c48:	4b92      	ldr	r3, [pc, #584]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e9      	bne.n	8004c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a6 	beq.w	8004dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c66:	4b8b      	ldr	r3, [pc, #556]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10d      	bne.n	8004c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c72:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4a87      	ldr	r2, [pc, #540]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	61d3      	str	r3, [r2, #28]
 8004c7e:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	4b82      	ldr	r3, [pc, #520]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d118      	bne.n	8004ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca6:	f7fd ff91 	bl	8002bcc <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cae:	f7fd ff8d 	bl	8002bcc <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b64      	cmp	r3, #100	; 0x64
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e103      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc0:	4b75      	ldr	r3, [pc, #468]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x312>
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	4a6e      	ldr	r2, [pc, #440]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6213      	str	r3, [r2, #32]
 8004ce0:	e02d      	b.n	8004d3e <HAL_RCC_OscConfig+0x36e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x334>
 8004cea:	4b6a      	ldr	r3, [pc, #424]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	4a69      	ldr	r2, [pc, #420]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	6213      	str	r3, [r2, #32]
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	4a66      	ldr	r2, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	6213      	str	r3, [r2, #32]
 8004d02:	e01c      	b.n	8004d3e <HAL_RCC_OscConfig+0x36e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d10c      	bne.n	8004d26 <HAL_RCC_OscConfig+0x356>
 8004d0c:	4b61      	ldr	r3, [pc, #388]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	4a60      	ldr	r2, [pc, #384]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	f043 0304 	orr.w	r3, r3, #4
 8004d16:	6213      	str	r3, [r2, #32]
 8004d18:	4b5e      	ldr	r3, [pc, #376]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6213      	str	r3, [r2, #32]
 8004d24:	e00b      	b.n	8004d3e <HAL_RCC_OscConfig+0x36e>
 8004d26:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4a5a      	ldr	r2, [pc, #360]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	6213      	str	r3, [r2, #32]
 8004d32:	4b58      	ldr	r3, [pc, #352]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4a57      	ldr	r2, [pc, #348]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d015      	beq.n	8004d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7fd ff41 	bl	8002bcc <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fd ff3d 	bl	8002bcc <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0b1      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	4b4b      	ldr	r3, [pc, #300]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ee      	beq.n	8004d4e <HAL_RCC_OscConfig+0x37e>
 8004d70:	e014      	b.n	8004d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d72:	f7fd ff2b 	bl	8002bcc <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd ff27 	bl	8002bcc <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e09b      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d90:	4b40      	ldr	r3, [pc, #256]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ee      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da2:	4b3c      	ldr	r3, [pc, #240]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4a3b      	ldr	r2, [pc, #236]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8087 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db8:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d061      	beq.n	8004e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d146      	bne.n	8004e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dcc:	4b33      	ldr	r3, [pc, #204]	; (8004e9c <HAL_RCC_OscConfig+0x4cc>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd2:	f7fd fefb 	bl	8002bcc <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dda:	f7fd fef7 	bl	8002bcc <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e06d      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d108      	bne.n	8004e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	4921      	ldr	r1, [pc, #132]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a19      	ldr	r1, [r3, #32]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	430b      	orrs	r3, r1
 8004e26:	491b      	ldr	r1, [pc, #108]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x4cc>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fd fecb 	bl	8002bcc <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3a:	f7fd fec7 	bl	8002bcc <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e03d      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x46a>
 8004e58:	e035      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_RCC_OscConfig+0x4cc>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fd feb4 	bl	8002bcc <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fd feb0 	bl	8002bcc <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e026      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x498>
 8004e86:	e01e      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e019      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40007000 	.word	0x40007000
 8004e9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_OscConfig+0x500>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000

08004ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0d0      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b6a      	ldr	r3, [pc, #424]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d910      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b67      	ldr	r3, [pc, #412]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 0207 	bic.w	r2, r3, #7
 8004efe:	4965      	ldr	r1, [pc, #404]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b63      	ldr	r3, [pc, #396]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0b8      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f30:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a58      	ldr	r2, [pc, #352]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f48:	4b53      	ldr	r3, [pc, #332]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a52      	ldr	r2, [pc, #328]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b50      	ldr	r3, [pc, #320]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	494d      	ldr	r1, [pc, #308]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d040      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d115      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07f      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	4b41      	ldr	r3, [pc, #260]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e073      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e06b      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb2:	4b39      	ldr	r3, [pc, #228]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f023 0203 	bic.w	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4936      	ldr	r1, [pc, #216]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc4:	f7fd fe02 	bl	8002bcc <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fcc:	f7fd fdfe 	bl	8002bcc <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e053      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 020c 	and.w	r2, r3, #12
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1eb      	bne.n	8004fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d210      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 0207 	bic.w	r2, r3, #7
 800500a:	4922      	ldr	r1, [pc, #136]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e032      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4916      	ldr	r1, [pc, #88]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	4313      	orrs	r3, r2
 8005040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	490e      	ldr	r1, [pc, #56]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005062:	f000 f821 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8005066:	4602      	mov	r2, r0
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	490a      	ldr	r1, [pc, #40]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	5ccb      	ldrb	r3, [r1, r3]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1cc>)
 800507c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd fd60 	bl	8002b48 <HAL_InitTick>

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40022000 	.word	0x40022000
 8005098:	40021000 	.word	0x40021000
 800509c:	0800bb78 	.word	0x0800bb78
 80050a0:	20000000 	.word	0x20000000
 80050a4:	20000004 	.word	0x20000004

080050a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	2300      	movs	r3, #0
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <HAL_RCC_GetSysClockFreq+0x94>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d002      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x30>
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d003      	beq.n	80050de <HAL_RCC_GetSysClockFreq+0x36>
 80050d6:	e027      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_RCC_GetSysClockFreq+0x98>)
 80050da:	613b      	str	r3, [r7, #16]
      break;
 80050dc:	e027      	b.n	800512e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	0c9b      	lsrs	r3, r3, #18
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050e8:	5cd3      	ldrb	r3, [r2, r3]
 80050ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d010      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_RCC_GetSysClockFreq+0x94>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	0c5b      	lsrs	r3, r3, #17
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	4a11      	ldr	r2, [pc, #68]	; (8005148 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005102:	5cd3      	ldrb	r3, [r2, r3]
 8005104:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a0d      	ldr	r2, [pc, #52]	; (8005140 <HAL_RCC_GetSysClockFreq+0x98>)
 800510a:	fb03 f202 	mul.w	r2, r3, r2
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e004      	b.n	8005122 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <HAL_RCC_GetSysClockFreq+0xa4>)
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	613b      	str	r3, [r7, #16]
      break;
 8005126:	e002      	b.n	800512e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCC_GetSysClockFreq+0x98>)
 800512a:	613b      	str	r3, [r7, #16]
      break;
 800512c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800512e:	693b      	ldr	r3, [r7, #16]
}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
 8005140:	007a1200 	.word	0x007a1200
 8005144:	0800bb90 	.word	0x0800bb90
 8005148:	0800bba0 	.word	0x0800bba0
 800514c:	003d0900 	.word	0x003d0900

08005150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005154:	4b02      	ldr	r3, [pc, #8]	; (8005160 <HAL_RCC_GetHCLKFreq+0x10>)
 8005156:	681b      	ldr	r3, [r3, #0]
}
 8005158:	4618      	mov	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr
 8005160:	20000000 	.word	0x20000000

08005164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005168:	f7ff fff2 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 800516c:	4602      	mov	r2, r0
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	4903      	ldr	r1, [pc, #12]	; (8005188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40021000 	.word	0x40021000
 8005188:	0800bb88 	.word	0x0800bb88

0800518c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005190:	f7ff ffde 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 8005194:	4602      	mov	r2, r0
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	0adb      	lsrs	r3, r3, #11
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	4903      	ldr	r1, [pc, #12]	; (80051b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051a2:	5ccb      	ldrb	r3, [r1, r3]
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40021000 	.word	0x40021000
 80051b0:	0800bb88 	.word	0x0800bb88

080051b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <RCC_Delay+0x34>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <RCC_Delay+0x38>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	0a5b      	lsrs	r3, r3, #9
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051d0:	bf00      	nop
  }
  while (Delay --);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	60fa      	str	r2, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f9      	bne.n	80051d0 <RCC_Delay+0x1c>
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3

080051f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e041      	b.n	8005286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fd fa72 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 fd5a 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e041      	b.n	8005324 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f839 	bl	800532c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f000 fd0b 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
	...

08005340 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e022      	b.n	80053b2 <HAL_TIM_PWM_Start_DMA+0x72>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b04      	cmp	r3, #4
 8005370:	d109      	bne.n	8005386 <HAL_TIM_PWM_Start_DMA+0x46>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e015      	b.n	80053b2 <HAL_TIM_PWM_Start_DMA+0x72>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d109      	bne.n	80053a0 <HAL_TIM_PWM_Start_DMA+0x60>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e008      	b.n	80053b2 <HAL_TIM_PWM_Start_DMA+0x72>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	bf0c      	ite	eq
 80053ac:	2301      	moveq	r3, #1
 80053ae:	2300      	movne	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
 80053b8:	e153      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d109      	bne.n	80053d4 <HAL_TIM_PWM_Start_DMA+0x94>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e022      	b.n	800541a <HAL_TIM_PWM_Start_DMA+0xda>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d109      	bne.n	80053ee <HAL_TIM_PWM_Start_DMA+0xae>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	e015      	b.n	800541a <HAL_TIM_PWM_Start_DMA+0xda>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d109      	bne.n	8005408 <HAL_TIM_PWM_Start_DMA+0xc8>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e008      	b.n	800541a <HAL_TIM_PWM_Start_DMA+0xda>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d024      	beq.n	8005468 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_TIM_PWM_Start_DMA+0xea>
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e119      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	e016      	b.n	800546c <HAL_TIM_PWM_Start_DMA+0x12c>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start_DMA+0x10e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544c:	e00e      	b.n	800546c <HAL_TIM_PWM_Start_DMA+0x12c>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Start_DMA+0x11e>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545c:	e006      	b.n	800546c <HAL_TIM_PWM_Start_DMA+0x12c>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005466:	e001      	b.n	800546c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0fa      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b0c      	cmp	r3, #12
 8005470:	f200 80ae 	bhi.w	80055d0 <HAL_TIM_PWM_Start_DMA+0x290>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054b1 	.word	0x080054b1
 8005480:	080055d1 	.word	0x080055d1
 8005484:	080055d1 	.word	0x080055d1
 8005488:	080055d1 	.word	0x080055d1
 800548c:	080054f9 	.word	0x080054f9
 8005490:	080055d1 	.word	0x080055d1
 8005494:	080055d1 	.word	0x080055d1
 8005498:	080055d1 	.word	0x080055d1
 800549c:	08005541 	.word	0x08005541
 80054a0:	080055d1 	.word	0x080055d1
 80054a4:	080055d1 	.word	0x080055d1
 80054a8:	080055d1 	.word	0x080055d1
 80054ac:	08005589 	.word	0x08005589
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	4a6d      	ldr	r2, [pc, #436]	; (800566c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	4a6c      	ldr	r2, [pc, #432]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x330>)
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	4a6b      	ldr	r2, [pc, #428]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x334>)
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3334      	adds	r3, #52	; 0x34
 80054d4:	461a      	mov	r2, r3
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	f7fd fd0e 	bl	8002ef8 <HAL_DMA_Start_IT>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0bd      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f4:	60da      	str	r2, [r3, #12]
      break;
 80054f6:	e06e      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	4a5b      	ldr	r2, [pc, #364]	; (800566c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	4a5a      	ldr	r2, [pc, #360]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	4a59      	ldr	r2, [pc, #356]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x334>)
 800550e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3338      	adds	r3, #56	; 0x38
 800551c:	461a      	mov	r2, r3
 800551e:	887b      	ldrh	r3, [r7, #2]
 8005520:	f7fd fcea 	bl	8002ef8 <HAL_DMA_Start_IT>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e099      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800553c:	60da      	str	r2, [r3, #12]
      break;
 800553e:	e04a      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4a49      	ldr	r2, [pc, #292]	; (800566c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a48      	ldr	r2, [pc, #288]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x330>)
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	4a47      	ldr	r2, [pc, #284]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005556:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	333c      	adds	r3, #60	; 0x3c
 8005564:	461a      	mov	r2, r3
 8005566:	887b      	ldrh	r3, [r7, #2]
 8005568:	f7fd fcc6 	bl	8002ef8 <HAL_DMA_Start_IT>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e075      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005584:	60da      	str	r2, [r3, #12]
      break;
 8005586:	e026      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	4a37      	ldr	r2, [pc, #220]	; (800566c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	4a36      	ldr	r2, [pc, #216]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	4a35      	ldr	r2, [pc, #212]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x334>)
 800559e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3340      	adds	r3, #64	; 0x40
 80055ac:	461a      	mov	r2, r3
 80055ae:	887b      	ldrh	r3, [r7, #2]
 80055b0:	f7fd fca2 	bl	8002ef8 <HAL_DMA_Start_IT>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e051      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055cc:	60da      	str	r2, [r3, #12]
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d141      	bne.n	8005660 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fdff 	bl	80061e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a22      	ldr	r2, [pc, #136]	; (8005678 <HAL_TIM_PWM_Start_DMA+0x338>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d107      	bne.n	8005604 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005602:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <HAL_TIM_PWM_Start_DMA+0x338>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d009      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_TIM_PWM_Start_DMA+0x33c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d111      	bne.n	8005650 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b06      	cmp	r3, #6
 800563c:	d010      	beq.n	8005660 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	e007      	b.n	8005660 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08005bd9 	.word	0x08005bd9
 8005670:	08005c81 	.word	0x08005c81
 8005674:	08005b47 	.word	0x08005b47
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800

08005684 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b0c      	cmp	r3, #12
 8005696:	d855      	bhi.n	8005744 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	08005745 	.word	0x08005745
 80056a8:	08005745 	.word	0x08005745
 80056ac:	08005745 	.word	0x08005745
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005745 	.word	0x08005745
 80056bc:	08005745 	.word	0x08005745
 80056c0:	0800570d 	.word	0x0800570d
 80056c4:	08005745 	.word	0x08005745
 80056c8:	08005745 	.word	0x08005745
 80056cc:	08005745 	.word	0x08005745
 80056d0:	08005729 	.word	0x08005729
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fd fca1 	bl	8003030 <HAL_DMA_Abort_IT>
      break;
 80056ee:	e02c      	b.n	800574a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	4618      	mov	r0, r3
 8005706:	f7fd fc93 	bl	8003030 <HAL_DMA_Abort_IT>
      break;
 800570a:	e01e      	b.n	800574a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800571a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	4618      	mov	r0, r3
 8005722:	f7fd fc85 	bl	8003030 <HAL_DMA_Abort_IT>
      break;
 8005726:	e010      	b.n	800574a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005736:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	4618      	mov	r0, r3
 800573e:	f7fd fc77 	bl	8003030 <HAL_DMA_Abort_IT>
      break;
 8005742:	e002      	b.n	800574a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
      break;
 8005748:	bf00      	nop
  }

  if (status == HAL_OK)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d157      	bne.n	8005800 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fd45 	bl	80061e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2a      	ldr	r2, [pc, #168]	; (800580c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d117      	bne.n	8005798 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10f      	bne.n	8005798 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	f240 4344 	movw	r3, #1092	; 0x444
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d107      	bne.n	8005798 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005796:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	f241 1311 	movw	r3, #4369	; 0x1111
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10f      	bne.n	80057c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	f240 4344 	movw	r3, #1092	; 0x444
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d6:	e013      	b.n	8005800 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d104      	bne.n	80057e8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e6:	e00b      	b.n	8005800 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d104      	bne.n	80057f8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f6:	e003      	b.n	8005800 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00

08005810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800582a:	2302      	movs	r3, #2
 800582c:	e0ae      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b0c      	cmp	r3, #12
 800583a:	f200 809f 	bhi.w	800597c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005879 	.word	0x08005879
 8005848:	0800597d 	.word	0x0800597d
 800584c:	0800597d 	.word	0x0800597d
 8005850:	0800597d 	.word	0x0800597d
 8005854:	080058b9 	.word	0x080058b9
 8005858:	0800597d 	.word	0x0800597d
 800585c:	0800597d 	.word	0x0800597d
 8005860:	0800597d 	.word	0x0800597d
 8005864:	080058fb 	.word	0x080058fb
 8005868:	0800597d 	.word	0x0800597d
 800586c:	0800597d 	.word	0x0800597d
 8005870:	0800597d 	.word	0x0800597d
 8005874:	0800593b 	.word	0x0800593b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fa94 	bl	8005dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0208 	orr.w	r2, r2, #8
 8005892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0204 	bic.w	r2, r2, #4
 80058a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6999      	ldr	r1, [r3, #24]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	619a      	str	r2, [r3, #24]
      break;
 80058b6:	e064      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fada 	bl	8005e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6999      	ldr	r1, [r3, #24]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	619a      	str	r2, [r3, #24]
      break;
 80058f8:	e043      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fb23 	bl	8005f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0208 	orr.w	r2, r2, #8
 8005914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0204 	bic.w	r2, r2, #4
 8005924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69d9      	ldr	r1, [r3, #28]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	61da      	str	r2, [r3, #28]
      break;
 8005938:	e023      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fb6d 	bl	8006020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69d9      	ldr	r1, [r3, #28]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	021a      	lsls	r2, r3, #8
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	61da      	str	r2, [r3, #28]
      break;
 800597a:	e002      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
      break;
 8005980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIM_ConfigClockSource+0x1c>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e0b4      	b.n	8005b1a <HAL_TIM_ConfigClockSource+0x186>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e8:	d03e      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0xd4>
 80059ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ee:	f200 8087 	bhi.w	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	f000 8086 	beq.w	8005b06 <HAL_TIM_ConfigClockSource+0x172>
 80059fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fe:	d87f      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 8005a00:	2b70      	cmp	r3, #112	; 0x70
 8005a02:	d01a      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0xa6>
 8005a04:	2b70      	cmp	r3, #112	; 0x70
 8005a06:	d87b      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b60      	cmp	r3, #96	; 0x60
 8005a0a:	d050      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x11a>
 8005a0c:	2b60      	cmp	r3, #96	; 0x60
 8005a0e:	d877      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b50      	cmp	r3, #80	; 0x50
 8005a12:	d03c      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0xfa>
 8005a14:	2b50      	cmp	r3, #80	; 0x50
 8005a16:	d873      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d058      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x13a>
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d86f      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b30      	cmp	r3, #48	; 0x30
 8005a22:	d064      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15a>
 8005a24:	2b30      	cmp	r3, #48	; 0x30
 8005a26:	d86b      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d060      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15a>
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d867      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05c      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15a>
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d05a      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15a>
 8005a38:	e062      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6899      	ldr	r1, [r3, #8]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f000 fbae 	bl	80061aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	609a      	str	r2, [r3, #8]
      break;
 8005a66:	e04f      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	6899      	ldr	r1, [r3, #8]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f000 fb97 	bl	80061aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a8a:	609a      	str	r2, [r3, #8]
      break;
 8005a8c:	e03c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f000 fb0e 	bl	80060bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2150      	movs	r1, #80	; 0x50
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fb65 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005aac:	e02c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6859      	ldr	r1, [r3, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f000 fb2c 	bl	8006118 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2160      	movs	r1, #96	; 0x60
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fb55 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005acc:	e01c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6859      	ldr	r1, [r3, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f000 faee 	bl	80060bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2140      	movs	r1, #64	; 0x40
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fb45 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005aec:	e00c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f000 fb3c 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005afe:	e003      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
      break;
 8005b04:	e000      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d107      	bne.n	8005b6e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b6c:	e02a      	b.n	8005bc4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d107      	bne.n	8005b88 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b86:	e01d      	b.n	8005bc4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d107      	bne.n	8005ba2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2204      	movs	r2, #4
 8005b96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba0:	e010      	b.n	8005bc4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d107      	bne.n	8005bbc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2208      	movs	r2, #8
 8005bb0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bba:	e003      	b.n	8005bc4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff ffb5 	bl	8005b34 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d10b      	bne.n	8005c08 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d136      	bne.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c06:	e031      	b.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d10b      	bne.n	8005c2a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2202      	movs	r2, #2
 8005c16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d125      	bne.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c28:	e020      	b.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d10b      	bne.n	8005c4c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2204      	movs	r2, #4
 8005c38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d114      	bne.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c4a:	e00f      	b.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d10a      	bne.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7fc fa23 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d103      	bne.n	8005ca0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	771a      	strb	r2, [r3, #28]
 8005c9e:	e019      	b.n	8005cd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d103      	bne.n	8005cb2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2202      	movs	r2, #2
 8005cae:	771a      	strb	r2, [r3, #28]
 8005cb0:	e010      	b.n	8005cd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d103      	bne.n	8005cc4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	771a      	strb	r2, [r3, #28]
 8005cc2:	e007      	b.n	8005cd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d102      	bne.n	8005cd4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff ff24 	bl	8005b22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a29      	ldr	r2, [pc, #164]	; (8005da0 <TIM_Base_SetConfig+0xb8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <TIM_Base_SetConfig+0x30>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d007      	beq.n	8005d18 <TIM_Base_SetConfig+0x30>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a26      	ldr	r2, [pc, #152]	; (8005da4 <TIM_Base_SetConfig+0xbc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0x30>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a25      	ldr	r2, [pc, #148]	; (8005da8 <TIM_Base_SetConfig+0xc0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d108      	bne.n	8005d2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <TIM_Base_SetConfig+0xb8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_Base_SetConfig+0x62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d007      	beq.n	8005d4a <TIM_Base_SetConfig+0x62>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a19      	ldr	r2, [pc, #100]	; (8005da4 <TIM_Base_SetConfig+0xbc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_Base_SetConfig+0x62>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <TIM_Base_SetConfig+0xc0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a07      	ldr	r2, [pc, #28]	; (8005da0 <TIM_Base_SetConfig+0xb8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d103      	bne.n	8005d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	615a      	str	r2, [r3, #20]
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800

08005dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0201 	bic.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 0302 	bic.w	r3, r3, #2
 8005df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <TIM_OC1_SetConfig+0xc8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10c      	bne.n	8005e22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0308 	bic.w	r3, r3, #8
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 0304 	bic.w	r3, r3, #4
 8005e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <TIM_OC1_SetConfig+0xc8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00

08005e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 0210 	bic.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0320 	bic.w	r3, r3, #32
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <TIM_OC2_SetConfig+0xd0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d10d      	bne.n	8005ef4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <TIM_OC2_SetConfig+0xd0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d113      	bne.n	8005f24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00

08005f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	; (800601c <TIM_OC3_SetConfig+0xd0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10d      	bne.n	8005fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a14      	ldr	r2, [pc, #80]	; (800601c <TIM_OC3_SetConfig+0xd0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d113      	bne.n	8005ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00

08006020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800606a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	031b      	lsls	r3, r3, #12
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a0f      	ldr	r2, [pc, #60]	; (80060b8 <TIM_OC4_SetConfig+0x98>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d109      	bne.n	8006094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	019b      	lsls	r3, r3, #6
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr
 80060b8:	40012c00 	.word	0x40012c00

080060bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 030a 	bic.w	r3, r3, #10
 80060f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0210 	bic.w	r2, r3, #16
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	031b      	lsls	r3, r3, #12
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006154:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr

08006176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	f043 0307 	orr.w	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b087      	sub	sp, #28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	021a      	lsls	r2, r3, #8
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	609a      	str	r2, [r3, #8]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2201      	movs	r2, #1
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	43db      	mvns	r3, r3
 800620a:	401a      	ands	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	fa01 f303 	lsl.w	r3, r1, r3
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e046      	b.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006294:	d009      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a12      	ldr	r2, [pc, #72]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d10c      	bne.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr
 80062e0:	40012c00 	.word	0x40012c00
 80062e4:	40000400 	.word	0x40000400
 80062e8:	40000800 	.word	0x40000800

080062ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e042      	b.n	8006384 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fc fa86 	bl	8002824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fd71 	bl	8006e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d16d      	bne.n	8006488 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_UART_Transmit+0x2c>
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e066      	b.n	800648a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2221      	movs	r2, #33	; 0x21
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ca:	f7fc fbff 	bl	8002bcc <HAL_GetTick>
 80063ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	88fa      	ldrh	r2, [r7, #6]
 80063d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	88fa      	ldrh	r2, [r7, #6]
 80063da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e4:	d108      	bne.n	80063f8 <HAL_UART_Transmit+0x6c>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e003      	b.n	8006400 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006400:	e02a      	b.n	8006458 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	2180      	movs	r1, #128	; 0x80
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 faf9 	bl	8006a04 <UART_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e036      	b.n	800648a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10b      	bne.n	800643a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	3302      	adds	r3, #2
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e007      	b.n	800644a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1cf      	bne.n	8006402 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fac9 	bl	8006a04 <UART_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b0ba      	sub	sp, #232	; 0xe8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10f      	bne.n	80064fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_UART_IRQHandler+0x66>
 80064e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fbd1 	bl	8006c9a <UART_Receive_IT>
      return;
 80064f8:	e25b      	b.n	80069b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80de 	beq.w	80066c0 <HAL_UART_IRQHandler+0x22c>
 8006504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006514:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80d1 	beq.w	80066c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_UART_IRQHandler+0xae>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_UART_IRQHandler+0xd2>
 800654e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	f043 0202 	orr.w	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <HAL_UART_IRQHandler+0xf6>
 8006572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	f043 0204 	orr.w	r2, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d011      	beq.n	80065ba <HAL_UART_IRQHandler+0x126>
 8006596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d105      	bne.n	80065ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	f043 0208 	orr.w	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 81f2 	beq.w	80069a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_UART_IRQHandler+0x14e>
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb5c 	bl	8006c9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf14      	ite	ne
 80065f0:	2301      	movne	r3, #1
 80065f2:	2300      	moveq	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <HAL_UART_IRQHandler+0x17a>
 8006606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d04f      	beq.n	80066ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa66 	bl	8006ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d041      	beq.n	80066a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800663c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3314      	adds	r3, #20
 800664a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800664e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800665a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1d9      	bne.n	8006622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d013      	beq.n	800669e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	4a7e      	ldr	r2, [pc, #504]	; (8006874 <HAL_UART_IRQHandler+0x3e0>)
 800667c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	4618      	mov	r0, r3
 8006684:	f7fc fcd4 	bl	8003030 <HAL_DMA_Abort_IT>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	e00e      	b.n	80066bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f99c 	bl	80069dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e00a      	b.n	80066bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f998 	bl	80069dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	e006      	b.n	80066bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f994 	bl	80069dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80066ba:	e175      	b.n	80069a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	bf00      	nop
    return;
 80066be:	e173      	b.n	80069a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	f040 814f 	bne.w	8006968 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8148 	beq.w	8006968 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8141 	beq.w	8006968 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80b6 	beq.w	8006878 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8145 	beq.w	80069ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800672a:	429a      	cmp	r2, r3
 800672c:	f080 813e 	bcs.w	80069ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006736:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b20      	cmp	r3, #32
 8006740:	f000 8088 	beq.w	8006854 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800675a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800675e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	330c      	adds	r3, #12
 800676c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006770:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800677c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1d9      	bne.n	8006744 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3314      	adds	r3, #20
 8006796:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a2:	f023 0301 	bic.w	r3, r3, #1
 80067a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3314      	adds	r3, #20
 80067b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e1      	bne.n	8006790 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3314      	adds	r3, #20
 80067d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e3      	bne.n	80067cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	330c      	adds	r3, #12
 8006818:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006824:	f023 0310 	bic.w	r3, r3, #16
 8006828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006836:	65ba      	str	r2, [r7, #88]	; 0x58
 8006838:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800683c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e3      	bne.n	8006812 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	4618      	mov	r0, r3
 8006850:	f7fc fbb2 	bl	8002fb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006862:	b29b      	uxth	r3, r3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	b29b      	uxth	r3, r3
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8bf 	bl	80069ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006870:	e09c      	b.n	80069ac <HAL_UART_IRQHandler+0x518>
 8006872:	bf00      	nop
 8006874:	08006ba5 	.word	0x08006ba5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006880:	b29b      	uxth	r3, r3
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 808e 	beq.w	80069b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8089 	beq.w	80069b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068c2:	647a      	str	r2, [r7, #68]	; 0x44
 80068c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e3      	bne.n	800689e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3314      	adds	r3, #20
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	623b      	str	r3, [r7, #32]
   return(result);
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3314      	adds	r3, #20
 80068f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068fa:	633a      	str	r2, [r7, #48]	; 0x30
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e3      	bne.n	80068d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60fb      	str	r3, [r7, #12]
   return(result);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0310 	bic.w	r3, r3, #16
 8006932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006940:	61fa      	str	r2, [r7, #28]
 8006942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	69b9      	ldr	r1, [r7, #24]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	617b      	str	r3, [r7, #20]
   return(result);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e3      	bne.n	800691c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800695a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f844 	bl	80069ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006966:	e023      	b.n	80069b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <HAL_UART_IRQHandler+0x4f4>
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f923 	bl	8006bcc <UART_Transmit_IT>
    return;
 8006986:	e014      	b.n	80069b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00e      	beq.n	80069b2 <HAL_UART_IRQHandler+0x51e>
 8006994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f962 	bl	8006c6a <UART_EndTransmit_IT>
    return;
 80069a6:	e004      	b.n	80069b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80069a8:	bf00      	nop
 80069aa:	e002      	b.n	80069b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80069ac:	bf00      	nop
 80069ae:	e000      	b.n	80069b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80069b0:	bf00      	nop
  }
}
 80069b2:	37e8      	adds	r7, #232	; 0xe8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr

080069ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b090      	sub	sp, #64	; 0x40
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a14:	e050      	b.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d04c      	beq.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a24:	f7fc f8d2 	bl	8002bcc <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d241      	bcs.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a54:	637a      	str	r2, [r7, #52]	; 0x34
 8006a56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e5      	bne.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	613b      	str	r3, [r7, #16]
   return(result);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a88:	623a      	str	r2, [r7, #32]
 8006a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	69f9      	ldr	r1, [r7, #28]
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e00f      	b.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d09f      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3740      	adds	r7, #64	; 0x40
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b095      	sub	sp, #84	; 0x54
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	330c      	adds	r3, #12
 8006aee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b08:	643a      	str	r2, [r7, #64]	; 0x40
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e5      	bne.n	8006ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3314      	adds	r3, #20
 8006b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3314      	adds	r3, #20
 8006b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d119      	bne.n	8006b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b78:	61ba      	str	r2, [r7, #24]
 8006b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	613b      	str	r3, [r7, #16]
   return(result);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b9a:	bf00      	nop
 8006b9c:	3754      	adds	r7, #84	; 0x54
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr

08006ba4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff ff0c 	bl	80069dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b21      	cmp	r3, #33	; 0x21
 8006bde:	d13e      	bne.n	8006c5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be8:	d114      	bne.n	8006c14 <UART_Transmit_IT+0x48>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d110      	bne.n	8006c14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	621a      	str	r2, [r3, #32]
 8006c12:	e008      	b.n	8006c26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	1c59      	adds	r1, r3, #1
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6211      	str	r1, [r2, #32]
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4619      	mov	r1, r3
 8006c34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10f      	bne.n	8006c5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e000      	b.n	8006c60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
  }
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fe94 	bl	80069b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b08c      	sub	sp, #48	; 0x30
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b22      	cmp	r3, #34	; 0x22
 8006cac:	f040 80ae 	bne.w	8006e0c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d117      	bne.n	8006cea <UART_Receive_IT+0x50>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d113      	bne.n	8006cea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	1c9a      	adds	r2, r3, #2
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ce8:	e026      	b.n	8006d38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfc:	d007      	beq.n	8006d0e <UART_Receive_IT+0x74>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <UART_Receive_IT+0x82>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e008      	b.n	8006d2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4619      	mov	r1, r3
 8006d46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d15d      	bne.n	8006e08 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0220 	bic.w	r2, r2, #32
 8006d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0201 	bic.w	r2, r2, #1
 8006d7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d135      	bne.n	8006dfe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	613b      	str	r3, [r7, #16]
   return(result);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 0310 	bic.w	r3, r3, #16
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	623a      	str	r2, [r7, #32]
 8006dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	d10a      	bne.n	8006df0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fdf9 	bl	80069ee <HAL_UARTEx_RxEventCallback>
 8006dfc:	e002      	b.n	8006e04 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fde3 	bl	80069ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e002      	b.n	8006e0e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e000      	b.n	8006e0e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e0c:	2302      	movs	r3, #2
  }
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3730      	adds	r7, #48	; 0x30
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006e52:	f023 030c 	bic.w	r3, r3, #12
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2c      	ldr	r2, [pc, #176]	; (8006f2c <UART_SetConfig+0x114>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d103      	bne.n	8006e88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e80:	f7fe f984 	bl	800518c <HAL_RCC_GetPCLK2Freq>
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	e002      	b.n	8006e8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e88:	f7fe f96c 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 8006e8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009a      	lsls	r2, r3, #2
 8006e98:	441a      	add	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	4a22      	ldr	r2, [pc, #136]	; (8006f30 <UART_SetConfig+0x118>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	0119      	lsls	r1, r3, #4
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009a      	lsls	r2, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ec4:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <UART_SetConfig+0x118>)
 8006ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	2064      	movs	r0, #100	; 0x64
 8006ece:	fb00 f303 	mul.w	r3, r0, r3
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	3332      	adds	r3, #50	; 0x32
 8006ed8:	4a15      	ldr	r2, [pc, #84]	; (8006f30 <UART_SetConfig+0x118>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ee4:	4419      	add	r1, r3
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009a      	lsls	r2, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006efc:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <UART_SetConfig+0x118>)
 8006efe:	fba3 0302 	umull	r0, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	2064      	movs	r0, #100	; 0x64
 8006f06:	fb00 f303 	mul.w	r3, r0, r3
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	3332      	adds	r3, #50	; 0x32
 8006f10:	4a07      	ldr	r2, [pc, #28]	; (8006f30 <UART_SetConfig+0x118>)
 8006f12:	fba2 2303 	umull	r2, r3, r2, r3
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	440a      	add	r2, r1
 8006f22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40013800 	.word	0x40013800
 8006f30:	51eb851f 	.word	0x51eb851f

08006f34 <__errno>:
 8006f34:	4b01      	ldr	r3, [pc, #4]	; (8006f3c <__errno+0x8>)
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000000c 	.word	0x2000000c

08006f40 <__libc_init_array>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	2600      	movs	r6, #0
 8006f44:	4d0c      	ldr	r5, [pc, #48]	; (8006f78 <__libc_init_array+0x38>)
 8006f46:	4c0d      	ldr	r4, [pc, #52]	; (8006f7c <__libc_init_array+0x3c>)
 8006f48:	1b64      	subs	r4, r4, r5
 8006f4a:	10a4      	asrs	r4, r4, #2
 8006f4c:	42a6      	cmp	r6, r4
 8006f4e:	d109      	bne.n	8006f64 <__libc_init_array+0x24>
 8006f50:	f004 fdc4 	bl	800badc <_init>
 8006f54:	2600      	movs	r6, #0
 8006f56:	4d0a      	ldr	r5, [pc, #40]	; (8006f80 <__libc_init_array+0x40>)
 8006f58:	4c0a      	ldr	r4, [pc, #40]	; (8006f84 <__libc_init_array+0x44>)
 8006f5a:	1b64      	subs	r4, r4, r5
 8006f5c:	10a4      	asrs	r4, r4, #2
 8006f5e:	42a6      	cmp	r6, r4
 8006f60:	d105      	bne.n	8006f6e <__libc_init_array+0x2e>
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f68:	4798      	blx	r3
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	e7ee      	b.n	8006f4c <__libc_init_array+0xc>
 8006f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f72:	4798      	blx	r3
 8006f74:	3601      	adds	r6, #1
 8006f76:	e7f2      	b.n	8006f5e <__libc_init_array+0x1e>
 8006f78:	0800c188 	.word	0x0800c188
 8006f7c:	0800c188 	.word	0x0800c188
 8006f80:	0800c188 	.word	0x0800c188
 8006f84:	0800c18c 	.word	0x0800c18c

08006f88 <memset>:
 8006f88:	4603      	mov	r3, r0
 8006f8a:	4402      	add	r2, r0
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d100      	bne.n	8006f92 <memset+0xa>
 8006f90:	4770      	bx	lr
 8006f92:	f803 1b01 	strb.w	r1, [r3], #1
 8006f96:	e7f9      	b.n	8006f8c <memset+0x4>

08006f98 <__cvt>:
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9e:	461f      	mov	r7, r3
 8006fa0:	bfbb      	ittet	lt
 8006fa2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006fa6:	461f      	movlt	r7, r3
 8006fa8:	2300      	movge	r3, #0
 8006faa:	232d      	movlt	r3, #45	; 0x2d
 8006fac:	b088      	sub	sp, #32
 8006fae:	4614      	mov	r4, r2
 8006fb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006fb4:	7013      	strb	r3, [r2, #0]
 8006fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006fbc:	f023 0820 	bic.w	r8, r3, #32
 8006fc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc4:	d005      	beq.n	8006fd2 <__cvt+0x3a>
 8006fc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fca:	d100      	bne.n	8006fce <__cvt+0x36>
 8006fcc:	3501      	adds	r5, #1
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e000      	b.n	8006fd4 <__cvt+0x3c>
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	aa07      	add	r2, sp, #28
 8006fd6:	9204      	str	r2, [sp, #16]
 8006fd8:	aa06      	add	r2, sp, #24
 8006fda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006fde:	e9cd 3500 	strd	r3, r5, [sp]
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	463b      	mov	r3, r7
 8006fe6:	f000 fce3 	bl	80079b0 <_dtoa_r>
 8006fea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fee:	4606      	mov	r6, r0
 8006ff0:	d102      	bne.n	8006ff8 <__cvt+0x60>
 8006ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ff4:	07db      	lsls	r3, r3, #31
 8006ff6:	d522      	bpl.n	800703e <__cvt+0xa6>
 8006ff8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ffc:	eb06 0905 	add.w	r9, r6, r5
 8007000:	d110      	bne.n	8007024 <__cvt+0x8c>
 8007002:	7833      	ldrb	r3, [r6, #0]
 8007004:	2b30      	cmp	r3, #48	; 0x30
 8007006:	d10a      	bne.n	800701e <__cvt+0x86>
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	4620      	mov	r0, r4
 800700e:	4639      	mov	r1, r7
 8007010:	f7f9 fcca 	bl	80009a8 <__aeabi_dcmpeq>
 8007014:	b918      	cbnz	r0, 800701e <__cvt+0x86>
 8007016:	f1c5 0501 	rsb	r5, r5, #1
 800701a:	f8ca 5000 	str.w	r5, [sl]
 800701e:	f8da 3000 	ldr.w	r3, [sl]
 8007022:	4499      	add	r9, r3
 8007024:	2200      	movs	r2, #0
 8007026:	2300      	movs	r3, #0
 8007028:	4620      	mov	r0, r4
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8007030:	b108      	cbz	r0, 8007036 <__cvt+0x9e>
 8007032:	f8cd 901c 	str.w	r9, [sp, #28]
 8007036:	2230      	movs	r2, #48	; 0x30
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	454b      	cmp	r3, r9
 800703c:	d307      	bcc.n	800704e <__cvt+0xb6>
 800703e:	4630      	mov	r0, r6
 8007040:	9b07      	ldr	r3, [sp, #28]
 8007042:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007044:	1b9b      	subs	r3, r3, r6
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	b008      	add	sp, #32
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	1c59      	adds	r1, r3, #1
 8007050:	9107      	str	r1, [sp, #28]
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e7f0      	b.n	8007038 <__cvt+0xa0>

08007056 <__exponent>:
 8007056:	4603      	mov	r3, r0
 8007058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705a:	2900      	cmp	r1, #0
 800705c:	f803 2b02 	strb.w	r2, [r3], #2
 8007060:	bfb6      	itet	lt
 8007062:	222d      	movlt	r2, #45	; 0x2d
 8007064:	222b      	movge	r2, #43	; 0x2b
 8007066:	4249      	neglt	r1, r1
 8007068:	2909      	cmp	r1, #9
 800706a:	7042      	strb	r2, [r0, #1]
 800706c:	dd2b      	ble.n	80070c6 <__exponent+0x70>
 800706e:	f10d 0407 	add.w	r4, sp, #7
 8007072:	46a4      	mov	ip, r4
 8007074:	270a      	movs	r7, #10
 8007076:	fb91 f6f7 	sdiv	r6, r1, r7
 800707a:	460a      	mov	r2, r1
 800707c:	46a6      	mov	lr, r4
 800707e:	fb07 1516 	mls	r5, r7, r6, r1
 8007082:	2a63      	cmp	r2, #99	; 0x63
 8007084:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007088:	4631      	mov	r1, r6
 800708a:	f104 34ff 	add.w	r4, r4, #4294967295
 800708e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007092:	dcf0      	bgt.n	8007076 <__exponent+0x20>
 8007094:	3130      	adds	r1, #48	; 0x30
 8007096:	f1ae 0502 	sub.w	r5, lr, #2
 800709a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800709e:	4629      	mov	r1, r5
 80070a0:	1c44      	adds	r4, r0, #1
 80070a2:	4561      	cmp	r1, ip
 80070a4:	d30a      	bcc.n	80070bc <__exponent+0x66>
 80070a6:	f10d 0209 	add.w	r2, sp, #9
 80070aa:	eba2 020e 	sub.w	r2, r2, lr
 80070ae:	4565      	cmp	r5, ip
 80070b0:	bf88      	it	hi
 80070b2:	2200      	movhi	r2, #0
 80070b4:	4413      	add	r3, r2
 80070b6:	1a18      	subs	r0, r3, r0
 80070b8:	b003      	add	sp, #12
 80070ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070c4:	e7ed      	b.n	80070a2 <__exponent+0x4c>
 80070c6:	2330      	movs	r3, #48	; 0x30
 80070c8:	3130      	adds	r1, #48	; 0x30
 80070ca:	7083      	strb	r3, [r0, #2]
 80070cc:	70c1      	strb	r1, [r0, #3]
 80070ce:	1d03      	adds	r3, r0, #4
 80070d0:	e7f1      	b.n	80070b6 <__exponent+0x60>
	...

080070d4 <_printf_float>:
 80070d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	b091      	sub	sp, #68	; 0x44
 80070da:	460c      	mov	r4, r1
 80070dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80070e0:	4616      	mov	r6, r2
 80070e2:	461f      	mov	r7, r3
 80070e4:	4605      	mov	r5, r0
 80070e6:	f001 fa51 	bl	800858c <_localeconv_r>
 80070ea:	6803      	ldr	r3, [r0, #0]
 80070ec:	4618      	mov	r0, r3
 80070ee:	9309      	str	r3, [sp, #36]	; 0x24
 80070f0:	f7f9 f82e 	bl	8000150 <strlen>
 80070f4:	2300      	movs	r3, #0
 80070f6:	930e      	str	r3, [sp, #56]	; 0x38
 80070f8:	f8d8 3000 	ldr.w	r3, [r8]
 80070fc:	900a      	str	r0, [sp, #40]	; 0x28
 80070fe:	3307      	adds	r3, #7
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	f103 0208 	add.w	r2, r3, #8
 8007108:	f894 9018 	ldrb.w	r9, [r4, #24]
 800710c:	f8d4 b000 	ldr.w	fp, [r4]
 8007110:	f8c8 2000 	str.w	r2, [r8]
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800711c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007120:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007124:	930b      	str	r3, [sp, #44]	; 0x2c
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	4640      	mov	r0, r8
 800712c:	4b9c      	ldr	r3, [pc, #624]	; (80073a0 <_printf_float+0x2cc>)
 800712e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007130:	f7f9 fc6c 	bl	8000a0c <__aeabi_dcmpun>
 8007134:	bb70      	cbnz	r0, 8007194 <_printf_float+0xc0>
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	4640      	mov	r0, r8
 800713c:	4b98      	ldr	r3, [pc, #608]	; (80073a0 <_printf_float+0x2cc>)
 800713e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007140:	f7f9 fc46 	bl	80009d0 <__aeabi_dcmple>
 8007144:	bb30      	cbnz	r0, 8007194 <_printf_float+0xc0>
 8007146:	2200      	movs	r2, #0
 8007148:	2300      	movs	r3, #0
 800714a:	4640      	mov	r0, r8
 800714c:	4651      	mov	r1, sl
 800714e:	f7f9 fc35 	bl	80009bc <__aeabi_dcmplt>
 8007152:	b110      	cbz	r0, 800715a <_printf_float+0x86>
 8007154:	232d      	movs	r3, #45	; 0x2d
 8007156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715a:	4b92      	ldr	r3, [pc, #584]	; (80073a4 <_printf_float+0x2d0>)
 800715c:	4892      	ldr	r0, [pc, #584]	; (80073a8 <_printf_float+0x2d4>)
 800715e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007162:	bf94      	ite	ls
 8007164:	4698      	movls	r8, r3
 8007166:	4680      	movhi	r8, r0
 8007168:	2303      	movs	r3, #3
 800716a:	f04f 0a00 	mov.w	sl, #0
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	f02b 0304 	bic.w	r3, fp, #4
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	4633      	mov	r3, r6
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	9700      	str	r7, [sp, #0]
 800717e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007180:	f000 f9d4 	bl	800752c <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	f040 8090 	bne.w	80072aa <_printf_float+0x1d6>
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	b011      	add	sp, #68	; 0x44
 8007190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007194:	4642      	mov	r2, r8
 8007196:	4653      	mov	r3, sl
 8007198:	4640      	mov	r0, r8
 800719a:	4651      	mov	r1, sl
 800719c:	f7f9 fc36 	bl	8000a0c <__aeabi_dcmpun>
 80071a0:	b148      	cbz	r0, 80071b6 <_printf_float+0xe2>
 80071a2:	f1ba 0f00 	cmp.w	sl, #0
 80071a6:	bfb8      	it	lt
 80071a8:	232d      	movlt	r3, #45	; 0x2d
 80071aa:	4880      	ldr	r0, [pc, #512]	; (80073ac <_printf_float+0x2d8>)
 80071ac:	bfb8      	it	lt
 80071ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071b2:	4b7f      	ldr	r3, [pc, #508]	; (80073b0 <_printf_float+0x2dc>)
 80071b4:	e7d3      	b.n	800715e <_printf_float+0x8a>
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	d142      	bne.n	8007246 <_printf_float+0x172>
 80071c0:	2306      	movs	r3, #6
 80071c2:	6063      	str	r3, [r4, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	9206      	str	r2, [sp, #24]
 80071c8:	aa0e      	add	r2, sp, #56	; 0x38
 80071ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80071ce:	aa0d      	add	r2, sp, #52	; 0x34
 80071d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80071d4:	9203      	str	r2, [sp, #12]
 80071d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80071da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	4642      	mov	r2, r8
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	4628      	mov	r0, r5
 80071e8:	4653      	mov	r3, sl
 80071ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80071ec:	f7ff fed4 	bl	8006f98 <__cvt>
 80071f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071f2:	4680      	mov	r8, r0
 80071f4:	2947      	cmp	r1, #71	; 0x47
 80071f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071f8:	d108      	bne.n	800720c <_printf_float+0x138>
 80071fa:	1cc8      	adds	r0, r1, #3
 80071fc:	db02      	blt.n	8007204 <_printf_float+0x130>
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	4299      	cmp	r1, r3
 8007202:	dd40      	ble.n	8007286 <_printf_float+0x1b2>
 8007204:	f1a9 0902 	sub.w	r9, r9, #2
 8007208:	fa5f f989 	uxtb.w	r9, r9
 800720c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007210:	d81f      	bhi.n	8007252 <_printf_float+0x17e>
 8007212:	464a      	mov	r2, r9
 8007214:	3901      	subs	r1, #1
 8007216:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800721a:	910d      	str	r1, [sp, #52]	; 0x34
 800721c:	f7ff ff1b 	bl	8007056 <__exponent>
 8007220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007222:	4682      	mov	sl, r0
 8007224:	1813      	adds	r3, r2, r0
 8007226:	2a01      	cmp	r2, #1
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	dc02      	bgt.n	8007232 <_printf_float+0x15e>
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	07d2      	lsls	r2, r2, #31
 8007230:	d501      	bpl.n	8007236 <_printf_float+0x162>
 8007232:	3301      	adds	r3, #1
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800723a:	2b00      	cmp	r3, #0
 800723c:	d09b      	beq.n	8007176 <_printf_float+0xa2>
 800723e:	232d      	movs	r3, #45	; 0x2d
 8007240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007244:	e797      	b.n	8007176 <_printf_float+0xa2>
 8007246:	2947      	cmp	r1, #71	; 0x47
 8007248:	d1bc      	bne.n	80071c4 <_printf_float+0xf0>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1ba      	bne.n	80071c4 <_printf_float+0xf0>
 800724e:	2301      	movs	r3, #1
 8007250:	e7b7      	b.n	80071c2 <_printf_float+0xee>
 8007252:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007256:	d118      	bne.n	800728a <_printf_float+0x1b6>
 8007258:	2900      	cmp	r1, #0
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	dd0b      	ble.n	8007276 <_printf_float+0x1a2>
 800725e:	6121      	str	r1, [r4, #16]
 8007260:	b913      	cbnz	r3, 8007268 <_printf_float+0x194>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	07d0      	lsls	r0, r2, #31
 8007266:	d502      	bpl.n	800726e <_printf_float+0x19a>
 8007268:	3301      	adds	r3, #1
 800726a:	440b      	add	r3, r1
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	f04f 0a00 	mov.w	sl, #0
 8007272:	65a1      	str	r1, [r4, #88]	; 0x58
 8007274:	e7df      	b.n	8007236 <_printf_float+0x162>
 8007276:	b913      	cbnz	r3, 800727e <_printf_float+0x1aa>
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	07d2      	lsls	r2, r2, #31
 800727c:	d501      	bpl.n	8007282 <_printf_float+0x1ae>
 800727e:	3302      	adds	r3, #2
 8007280:	e7f4      	b.n	800726c <_printf_float+0x198>
 8007282:	2301      	movs	r3, #1
 8007284:	e7f2      	b.n	800726c <_printf_float+0x198>
 8007286:	f04f 0967 	mov.w	r9, #103	; 0x67
 800728a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800728c:	4299      	cmp	r1, r3
 800728e:	db05      	blt.n	800729c <_printf_float+0x1c8>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	6121      	str	r1, [r4, #16]
 8007294:	07d8      	lsls	r0, r3, #31
 8007296:	d5ea      	bpl.n	800726e <_printf_float+0x19a>
 8007298:	1c4b      	adds	r3, r1, #1
 800729a:	e7e7      	b.n	800726c <_printf_float+0x198>
 800729c:	2900      	cmp	r1, #0
 800729e:	bfcc      	ite	gt
 80072a0:	2201      	movgt	r2, #1
 80072a2:	f1c1 0202 	rsble	r2, r1, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	e7e0      	b.n	800726c <_printf_float+0x198>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	055a      	lsls	r2, r3, #21
 80072ae:	d407      	bmi.n	80072c0 <_printf_float+0x1ec>
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	4642      	mov	r2, r8
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	d12b      	bne.n	8007316 <_printf_float+0x242>
 80072be:	e764      	b.n	800718a <_printf_float+0xb6>
 80072c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072c4:	f240 80dd 	bls.w	8007482 <_printf_float+0x3ae>
 80072c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	f7f9 fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d033      	beq.n	8007340 <_printf_float+0x26c>
 80072d8:	2301      	movs	r3, #1
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	4a35      	ldr	r2, [pc, #212]	; (80073b4 <_printf_float+0x2e0>)
 80072e0:	47b8      	blx	r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	f43f af51 	beq.w	800718a <_printf_float+0xb6>
 80072e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072ec:	429a      	cmp	r2, r3
 80072ee:	db02      	blt.n	80072f6 <_printf_float+0x222>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	07d8      	lsls	r0, r3, #31
 80072f4:	d50f      	bpl.n	8007316 <_printf_float+0x242>
 80072f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	f43f af42 	beq.w	800718a <_printf_float+0xb6>
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	f104 091a 	add.w	r9, r4, #26
 800730e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007310:	3b01      	subs	r3, #1
 8007312:	4543      	cmp	r3, r8
 8007314:	dc09      	bgt.n	800732a <_printf_float+0x256>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	079b      	lsls	r3, r3, #30
 800731a:	f100 8102 	bmi.w	8007522 <_printf_float+0x44e>
 800731e:	68e0      	ldr	r0, [r4, #12]
 8007320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007322:	4298      	cmp	r0, r3
 8007324:	bfb8      	it	lt
 8007326:	4618      	movlt	r0, r3
 8007328:	e731      	b.n	800718e <_printf_float+0xba>
 800732a:	2301      	movs	r3, #1
 800732c:	464a      	mov	r2, r9
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f af28 	beq.w	800718a <_printf_float+0xb6>
 800733a:	f108 0801 	add.w	r8, r8, #1
 800733e:	e7e6      	b.n	800730e <_printf_float+0x23a>
 8007340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007342:	2b00      	cmp	r3, #0
 8007344:	dc38      	bgt.n	80073b8 <_printf_float+0x2e4>
 8007346:	2301      	movs	r3, #1
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <_printf_float+0x2e0>)
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	f43f af1a 	beq.w	800718a <_printf_float+0xb6>
 8007356:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800735a:	4313      	orrs	r3, r2
 800735c:	d102      	bne.n	8007364 <_printf_float+0x290>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	07d9      	lsls	r1, r3, #31
 8007362:	d5d8      	bpl.n	8007316 <_printf_float+0x242>
 8007364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	47b8      	blx	r7
 800736e:	3001      	adds	r0, #1
 8007370:	f43f af0b 	beq.w	800718a <_printf_float+0xb6>
 8007374:	f04f 0900 	mov.w	r9, #0
 8007378:	f104 0a1a 	add.w	sl, r4, #26
 800737c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800737e:	425b      	negs	r3, r3
 8007380:	454b      	cmp	r3, r9
 8007382:	dc01      	bgt.n	8007388 <_printf_float+0x2b4>
 8007384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007386:	e794      	b.n	80072b2 <_printf_float+0x1de>
 8007388:	2301      	movs	r3, #1
 800738a:	4652      	mov	r2, sl
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f aef9 	beq.w	800718a <_printf_float+0xb6>
 8007398:	f109 0901 	add.w	r9, r9, #1
 800739c:	e7ee      	b.n	800737c <_printf_float+0x2a8>
 800739e:	bf00      	nop
 80073a0:	7fefffff 	.word	0x7fefffff
 80073a4:	0800bba8 	.word	0x0800bba8
 80073a8:	0800bbac 	.word	0x0800bbac
 80073ac:	0800bbb4 	.word	0x0800bbb4
 80073b0:	0800bbb0 	.word	0x0800bbb0
 80073b4:	0800bbb8 	.word	0x0800bbb8
 80073b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073bc:	429a      	cmp	r2, r3
 80073be:	bfa8      	it	ge
 80073c0:	461a      	movge	r2, r3
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	4691      	mov	r9, r2
 80073c6:	dc37      	bgt.n	8007438 <_printf_float+0x364>
 80073c8:	f04f 0b00 	mov.w	fp, #0
 80073cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d0:	f104 021a 	add.w	r2, r4, #26
 80073d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80073d8:	ebaa 0309 	sub.w	r3, sl, r9
 80073dc:	455b      	cmp	r3, fp
 80073de:	dc33      	bgt.n	8007448 <_printf_float+0x374>
 80073e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073e4:	429a      	cmp	r2, r3
 80073e6:	db3b      	blt.n	8007460 <_printf_float+0x38c>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	07da      	lsls	r2, r3, #31
 80073ec:	d438      	bmi.n	8007460 <_printf_float+0x38c>
 80073ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80073f2:	eba3 020a 	sub.w	r2, r3, sl
 80073f6:	eba3 0901 	sub.w	r9, r3, r1
 80073fa:	4591      	cmp	r9, r2
 80073fc:	bfa8      	it	ge
 80073fe:	4691      	movge	r9, r2
 8007400:	f1b9 0f00 	cmp.w	r9, #0
 8007404:	dc34      	bgt.n	8007470 <_printf_float+0x39c>
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800740e:	f104 0a1a 	add.w	sl, r4, #26
 8007412:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	eba3 0309 	sub.w	r3, r3, r9
 800741c:	4543      	cmp	r3, r8
 800741e:	f77f af7a 	ble.w	8007316 <_printf_float+0x242>
 8007422:	2301      	movs	r3, #1
 8007424:	4652      	mov	r2, sl
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	f43f aeac 	beq.w	800718a <_printf_float+0xb6>
 8007432:	f108 0801 	add.w	r8, r8, #1
 8007436:	e7ec      	b.n	8007412 <_printf_float+0x33e>
 8007438:	4613      	mov	r3, r2
 800743a:	4631      	mov	r1, r6
 800743c:	4642      	mov	r2, r8
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	d1c0      	bne.n	80073c8 <_printf_float+0x2f4>
 8007446:	e6a0      	b.n	800718a <_printf_float+0xb6>
 8007448:	2301      	movs	r3, #1
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f ae99 	beq.w	800718a <_printf_float+0xb6>
 8007458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800745a:	f10b 0b01 	add.w	fp, fp, #1
 800745e:	e7b9      	b.n	80073d4 <_printf_float+0x300>
 8007460:	4631      	mov	r1, r6
 8007462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	d1bf      	bne.n	80073ee <_printf_float+0x31a>
 800746e:	e68c      	b.n	800718a <_printf_float+0xb6>
 8007470:	464b      	mov	r3, r9
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	eb08 020a 	add.w	r2, r8, sl
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	d1c2      	bne.n	8007406 <_printf_float+0x332>
 8007480:	e683      	b.n	800718a <_printf_float+0xb6>
 8007482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007484:	2a01      	cmp	r2, #1
 8007486:	dc01      	bgt.n	800748c <_printf_float+0x3b8>
 8007488:	07db      	lsls	r3, r3, #31
 800748a:	d537      	bpl.n	80074fc <_printf_float+0x428>
 800748c:	2301      	movs	r3, #1
 800748e:	4642      	mov	r2, r8
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f ae77 	beq.w	800718a <_printf_float+0xb6>
 800749c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f ae6f 	beq.w	800718a <_printf_float+0xb6>
 80074ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074b0:	2200      	movs	r2, #0
 80074b2:	2300      	movs	r3, #0
 80074b4:	f7f9 fa78 	bl	80009a8 <__aeabi_dcmpeq>
 80074b8:	b9d8      	cbnz	r0, 80074f2 <_printf_float+0x41e>
 80074ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074bc:	f108 0201 	add.w	r2, r8, #1
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	d10e      	bne.n	80074ea <_printf_float+0x416>
 80074cc:	e65d      	b.n	800718a <_printf_float+0xb6>
 80074ce:	2301      	movs	r3, #1
 80074d0:	464a      	mov	r2, r9
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f ae56 	beq.w	800718a <_printf_float+0xb6>
 80074de:	f108 0801 	add.w	r8, r8, #1
 80074e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074e4:	3b01      	subs	r3, #1
 80074e6:	4543      	cmp	r3, r8
 80074e8:	dcf1      	bgt.n	80074ce <_printf_float+0x3fa>
 80074ea:	4653      	mov	r3, sl
 80074ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074f0:	e6e0      	b.n	80072b4 <_printf_float+0x1e0>
 80074f2:	f04f 0800 	mov.w	r8, #0
 80074f6:	f104 091a 	add.w	r9, r4, #26
 80074fa:	e7f2      	b.n	80074e2 <_printf_float+0x40e>
 80074fc:	2301      	movs	r3, #1
 80074fe:	4642      	mov	r2, r8
 8007500:	e7df      	b.n	80074c2 <_printf_float+0x3ee>
 8007502:	2301      	movs	r3, #1
 8007504:	464a      	mov	r2, r9
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	f43f ae3c 	beq.w	800718a <_printf_float+0xb6>
 8007512:	f108 0801 	add.w	r8, r8, #1
 8007516:	68e3      	ldr	r3, [r4, #12]
 8007518:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800751a:	1a5b      	subs	r3, r3, r1
 800751c:	4543      	cmp	r3, r8
 800751e:	dcf0      	bgt.n	8007502 <_printf_float+0x42e>
 8007520:	e6fd      	b.n	800731e <_printf_float+0x24a>
 8007522:	f04f 0800 	mov.w	r8, #0
 8007526:	f104 0919 	add.w	r9, r4, #25
 800752a:	e7f4      	b.n	8007516 <_printf_float+0x442>

0800752c <_printf_common>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	4616      	mov	r6, r2
 8007532:	4699      	mov	r9, r3
 8007534:	688a      	ldr	r2, [r1, #8]
 8007536:	690b      	ldr	r3, [r1, #16]
 8007538:	4607      	mov	r7, r0
 800753a:	4293      	cmp	r3, r2
 800753c:	bfb8      	it	lt
 800753e:	4613      	movlt	r3, r2
 8007540:	6033      	str	r3, [r6, #0]
 8007542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007546:	460c      	mov	r4, r1
 8007548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800754c:	b10a      	cbz	r2, 8007552 <_printf_common+0x26>
 800754e:	3301      	adds	r3, #1
 8007550:	6033      	str	r3, [r6, #0]
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	0699      	lsls	r1, r3, #26
 8007556:	bf42      	ittt	mi
 8007558:	6833      	ldrmi	r3, [r6, #0]
 800755a:	3302      	addmi	r3, #2
 800755c:	6033      	strmi	r3, [r6, #0]
 800755e:	6825      	ldr	r5, [r4, #0]
 8007560:	f015 0506 	ands.w	r5, r5, #6
 8007564:	d106      	bne.n	8007574 <_printf_common+0x48>
 8007566:	f104 0a19 	add.w	sl, r4, #25
 800756a:	68e3      	ldr	r3, [r4, #12]
 800756c:	6832      	ldr	r2, [r6, #0]
 800756e:	1a9b      	subs	r3, r3, r2
 8007570:	42ab      	cmp	r3, r5
 8007572:	dc28      	bgt.n	80075c6 <_printf_common+0x9a>
 8007574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007578:	1e13      	subs	r3, r2, #0
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	bf18      	it	ne
 800757e:	2301      	movne	r3, #1
 8007580:	0692      	lsls	r2, r2, #26
 8007582:	d42d      	bmi.n	80075e0 <_printf_common+0xb4>
 8007584:	4649      	mov	r1, r9
 8007586:	4638      	mov	r0, r7
 8007588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800758c:	47c0      	blx	r8
 800758e:	3001      	adds	r0, #1
 8007590:	d020      	beq.n	80075d4 <_printf_common+0xa8>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	68e5      	ldr	r5, [r4, #12]
 8007596:	f003 0306 	and.w	r3, r3, #6
 800759a:	2b04      	cmp	r3, #4
 800759c:	bf18      	it	ne
 800759e:	2500      	movne	r5, #0
 80075a0:	6832      	ldr	r2, [r6, #0]
 80075a2:	f04f 0600 	mov.w	r6, #0
 80075a6:	68a3      	ldr	r3, [r4, #8]
 80075a8:	bf08      	it	eq
 80075aa:	1aad      	subeq	r5, r5, r2
 80075ac:	6922      	ldr	r2, [r4, #16]
 80075ae:	bf08      	it	eq
 80075b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b4:	4293      	cmp	r3, r2
 80075b6:	bfc4      	itt	gt
 80075b8:	1a9b      	subgt	r3, r3, r2
 80075ba:	18ed      	addgt	r5, r5, r3
 80075bc:	341a      	adds	r4, #26
 80075be:	42b5      	cmp	r5, r6
 80075c0:	d11a      	bne.n	80075f8 <_printf_common+0xcc>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e008      	b.n	80075d8 <_printf_common+0xac>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4649      	mov	r1, r9
 80075cc:	4638      	mov	r0, r7
 80075ce:	47c0      	blx	r8
 80075d0:	3001      	adds	r0, #1
 80075d2:	d103      	bne.n	80075dc <_printf_common+0xb0>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	3501      	adds	r5, #1
 80075de:	e7c4      	b.n	800756a <_printf_common+0x3e>
 80075e0:	2030      	movs	r0, #48	; 0x30
 80075e2:	18e1      	adds	r1, r4, r3
 80075e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ee:	4422      	add	r2, r4
 80075f0:	3302      	adds	r3, #2
 80075f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075f6:	e7c5      	b.n	8007584 <_printf_common+0x58>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4622      	mov	r2, r4
 80075fc:	4649      	mov	r1, r9
 80075fe:	4638      	mov	r0, r7
 8007600:	47c0      	blx	r8
 8007602:	3001      	adds	r0, #1
 8007604:	d0e6      	beq.n	80075d4 <_printf_common+0xa8>
 8007606:	3601      	adds	r6, #1
 8007608:	e7d9      	b.n	80075be <_printf_common+0x92>
	...

0800760c <_printf_i>:
 800760c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	7e0f      	ldrb	r7, [r1, #24]
 8007612:	4691      	mov	r9, r2
 8007614:	2f78      	cmp	r7, #120	; 0x78
 8007616:	4680      	mov	r8, r0
 8007618:	460c      	mov	r4, r1
 800761a:	469a      	mov	sl, r3
 800761c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800761e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007622:	d807      	bhi.n	8007634 <_printf_i+0x28>
 8007624:	2f62      	cmp	r7, #98	; 0x62
 8007626:	d80a      	bhi.n	800763e <_printf_i+0x32>
 8007628:	2f00      	cmp	r7, #0
 800762a:	f000 80d9 	beq.w	80077e0 <_printf_i+0x1d4>
 800762e:	2f58      	cmp	r7, #88	; 0x58
 8007630:	f000 80a4 	beq.w	800777c <_printf_i+0x170>
 8007634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800763c:	e03a      	b.n	80076b4 <_printf_i+0xa8>
 800763e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007642:	2b15      	cmp	r3, #21
 8007644:	d8f6      	bhi.n	8007634 <_printf_i+0x28>
 8007646:	a101      	add	r1, pc, #4	; (adr r1, 800764c <_printf_i+0x40>)
 8007648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800764c:	080076a5 	.word	0x080076a5
 8007650:	080076b9 	.word	0x080076b9
 8007654:	08007635 	.word	0x08007635
 8007658:	08007635 	.word	0x08007635
 800765c:	08007635 	.word	0x08007635
 8007660:	08007635 	.word	0x08007635
 8007664:	080076b9 	.word	0x080076b9
 8007668:	08007635 	.word	0x08007635
 800766c:	08007635 	.word	0x08007635
 8007670:	08007635 	.word	0x08007635
 8007674:	08007635 	.word	0x08007635
 8007678:	080077c7 	.word	0x080077c7
 800767c:	080076e9 	.word	0x080076e9
 8007680:	080077a9 	.word	0x080077a9
 8007684:	08007635 	.word	0x08007635
 8007688:	08007635 	.word	0x08007635
 800768c:	080077e9 	.word	0x080077e9
 8007690:	08007635 	.word	0x08007635
 8007694:	080076e9 	.word	0x080076e9
 8007698:	08007635 	.word	0x08007635
 800769c:	08007635 	.word	0x08007635
 80076a0:	080077b1 	.word	0x080077b1
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	602a      	str	r2, [r5, #0]
 80076ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076b4:	2301      	movs	r3, #1
 80076b6:	e0a4      	b.n	8007802 <_printf_i+0x1f6>
 80076b8:	6820      	ldr	r0, [r4, #0]
 80076ba:	6829      	ldr	r1, [r5, #0]
 80076bc:	0606      	lsls	r6, r0, #24
 80076be:	f101 0304 	add.w	r3, r1, #4
 80076c2:	d50a      	bpl.n	80076da <_printf_i+0xce>
 80076c4:	680e      	ldr	r6, [r1, #0]
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	2e00      	cmp	r6, #0
 80076ca:	da03      	bge.n	80076d4 <_printf_i+0xc8>
 80076cc:	232d      	movs	r3, #45	; 0x2d
 80076ce:	4276      	negs	r6, r6
 80076d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d4:	230a      	movs	r3, #10
 80076d6:	485e      	ldr	r0, [pc, #376]	; (8007850 <_printf_i+0x244>)
 80076d8:	e019      	b.n	800770e <_printf_i+0x102>
 80076da:	680e      	ldr	r6, [r1, #0]
 80076dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	bf18      	it	ne
 80076e4:	b236      	sxthne	r6, r6
 80076e6:	e7ef      	b.n	80076c8 <_printf_i+0xbc>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	6820      	ldr	r0, [r4, #0]
 80076ec:	1d19      	adds	r1, r3, #4
 80076ee:	6029      	str	r1, [r5, #0]
 80076f0:	0601      	lsls	r1, r0, #24
 80076f2:	d501      	bpl.n	80076f8 <_printf_i+0xec>
 80076f4:	681e      	ldr	r6, [r3, #0]
 80076f6:	e002      	b.n	80076fe <_printf_i+0xf2>
 80076f8:	0646      	lsls	r6, r0, #25
 80076fa:	d5fb      	bpl.n	80076f4 <_printf_i+0xe8>
 80076fc:	881e      	ldrh	r6, [r3, #0]
 80076fe:	2f6f      	cmp	r7, #111	; 0x6f
 8007700:	bf0c      	ite	eq
 8007702:	2308      	moveq	r3, #8
 8007704:	230a      	movne	r3, #10
 8007706:	4852      	ldr	r0, [pc, #328]	; (8007850 <_printf_i+0x244>)
 8007708:	2100      	movs	r1, #0
 800770a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800770e:	6865      	ldr	r5, [r4, #4]
 8007710:	2d00      	cmp	r5, #0
 8007712:	bfa8      	it	ge
 8007714:	6821      	ldrge	r1, [r4, #0]
 8007716:	60a5      	str	r5, [r4, #8]
 8007718:	bfa4      	itt	ge
 800771a:	f021 0104 	bicge.w	r1, r1, #4
 800771e:	6021      	strge	r1, [r4, #0]
 8007720:	b90e      	cbnz	r6, 8007726 <_printf_i+0x11a>
 8007722:	2d00      	cmp	r5, #0
 8007724:	d04d      	beq.n	80077c2 <_printf_i+0x1b6>
 8007726:	4615      	mov	r5, r2
 8007728:	fbb6 f1f3 	udiv	r1, r6, r3
 800772c:	fb03 6711 	mls	r7, r3, r1, r6
 8007730:	5dc7      	ldrb	r7, [r0, r7]
 8007732:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007736:	4637      	mov	r7, r6
 8007738:	42bb      	cmp	r3, r7
 800773a:	460e      	mov	r6, r1
 800773c:	d9f4      	bls.n	8007728 <_printf_i+0x11c>
 800773e:	2b08      	cmp	r3, #8
 8007740:	d10b      	bne.n	800775a <_printf_i+0x14e>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	07de      	lsls	r6, r3, #31
 8007746:	d508      	bpl.n	800775a <_printf_i+0x14e>
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	6861      	ldr	r1, [r4, #4]
 800774c:	4299      	cmp	r1, r3
 800774e:	bfde      	ittt	le
 8007750:	2330      	movle	r3, #48	; 0x30
 8007752:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007756:	f105 35ff 	addle.w	r5, r5, #4294967295
 800775a:	1b52      	subs	r2, r2, r5
 800775c:	6122      	str	r2, [r4, #16]
 800775e:	464b      	mov	r3, r9
 8007760:	4621      	mov	r1, r4
 8007762:	4640      	mov	r0, r8
 8007764:	f8cd a000 	str.w	sl, [sp]
 8007768:	aa03      	add	r2, sp, #12
 800776a:	f7ff fedf 	bl	800752c <_printf_common>
 800776e:	3001      	adds	r0, #1
 8007770:	d14c      	bne.n	800780c <_printf_i+0x200>
 8007772:	f04f 30ff 	mov.w	r0, #4294967295
 8007776:	b004      	add	sp, #16
 8007778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777c:	4834      	ldr	r0, [pc, #208]	; (8007850 <_printf_i+0x244>)
 800777e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007782:	6829      	ldr	r1, [r5, #0]
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	f851 6b04 	ldr.w	r6, [r1], #4
 800778a:	6029      	str	r1, [r5, #0]
 800778c:	061d      	lsls	r5, r3, #24
 800778e:	d514      	bpl.n	80077ba <_printf_i+0x1ae>
 8007790:	07df      	lsls	r7, r3, #31
 8007792:	bf44      	itt	mi
 8007794:	f043 0320 	orrmi.w	r3, r3, #32
 8007798:	6023      	strmi	r3, [r4, #0]
 800779a:	b91e      	cbnz	r6, 80077a4 <_printf_i+0x198>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	f023 0320 	bic.w	r3, r3, #32
 80077a2:	6023      	str	r3, [r4, #0]
 80077a4:	2310      	movs	r3, #16
 80077a6:	e7af      	b.n	8007708 <_printf_i+0xfc>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	f043 0320 	orr.w	r3, r3, #32
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	2378      	movs	r3, #120	; 0x78
 80077b2:	4828      	ldr	r0, [pc, #160]	; (8007854 <_printf_i+0x248>)
 80077b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077b8:	e7e3      	b.n	8007782 <_printf_i+0x176>
 80077ba:	0659      	lsls	r1, r3, #25
 80077bc:	bf48      	it	mi
 80077be:	b2b6      	uxthmi	r6, r6
 80077c0:	e7e6      	b.n	8007790 <_printf_i+0x184>
 80077c2:	4615      	mov	r5, r2
 80077c4:	e7bb      	b.n	800773e <_printf_i+0x132>
 80077c6:	682b      	ldr	r3, [r5, #0]
 80077c8:	6826      	ldr	r6, [r4, #0]
 80077ca:	1d18      	adds	r0, r3, #4
 80077cc:	6961      	ldr	r1, [r4, #20]
 80077ce:	6028      	str	r0, [r5, #0]
 80077d0:	0635      	lsls	r5, r6, #24
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	d501      	bpl.n	80077da <_printf_i+0x1ce>
 80077d6:	6019      	str	r1, [r3, #0]
 80077d8:	e002      	b.n	80077e0 <_printf_i+0x1d4>
 80077da:	0670      	lsls	r0, r6, #25
 80077dc:	d5fb      	bpl.n	80077d6 <_printf_i+0x1ca>
 80077de:	8019      	strh	r1, [r3, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	4615      	mov	r5, r2
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	e7ba      	b.n	800775e <_printf_i+0x152>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	2100      	movs	r1, #0
 80077ec:	1d1a      	adds	r2, r3, #4
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 fed5 	bl	80085a4 <memchr>
 80077fa:	b108      	cbz	r0, 8007800 <_printf_i+0x1f4>
 80077fc:	1b40      	subs	r0, r0, r5
 80077fe:	6060      	str	r0, [r4, #4]
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	2300      	movs	r3, #0
 8007806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780a:	e7a8      	b.n	800775e <_printf_i+0x152>
 800780c:	462a      	mov	r2, r5
 800780e:	4649      	mov	r1, r9
 8007810:	4640      	mov	r0, r8
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	47d0      	blx	sl
 8007816:	3001      	adds	r0, #1
 8007818:	d0ab      	beq.n	8007772 <_printf_i+0x166>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	079b      	lsls	r3, r3, #30
 800781e:	d413      	bmi.n	8007848 <_printf_i+0x23c>
 8007820:	68e0      	ldr	r0, [r4, #12]
 8007822:	9b03      	ldr	r3, [sp, #12]
 8007824:	4298      	cmp	r0, r3
 8007826:	bfb8      	it	lt
 8007828:	4618      	movlt	r0, r3
 800782a:	e7a4      	b.n	8007776 <_printf_i+0x16a>
 800782c:	2301      	movs	r3, #1
 800782e:	4632      	mov	r2, r6
 8007830:	4649      	mov	r1, r9
 8007832:	4640      	mov	r0, r8
 8007834:	47d0      	blx	sl
 8007836:	3001      	adds	r0, #1
 8007838:	d09b      	beq.n	8007772 <_printf_i+0x166>
 800783a:	3501      	adds	r5, #1
 800783c:	68e3      	ldr	r3, [r4, #12]
 800783e:	9903      	ldr	r1, [sp, #12]
 8007840:	1a5b      	subs	r3, r3, r1
 8007842:	42ab      	cmp	r3, r5
 8007844:	dcf2      	bgt.n	800782c <_printf_i+0x220>
 8007846:	e7eb      	b.n	8007820 <_printf_i+0x214>
 8007848:	2500      	movs	r5, #0
 800784a:	f104 0619 	add.w	r6, r4, #25
 800784e:	e7f5      	b.n	800783c <_printf_i+0x230>
 8007850:	0800bbba 	.word	0x0800bbba
 8007854:	0800bbcb 	.word	0x0800bbcb

08007858 <siprintf>:
 8007858:	b40e      	push	{r1, r2, r3}
 800785a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800785e:	b500      	push	{lr}
 8007860:	b09c      	sub	sp, #112	; 0x70
 8007862:	ab1d      	add	r3, sp, #116	; 0x74
 8007864:	9002      	str	r0, [sp, #8]
 8007866:	9006      	str	r0, [sp, #24]
 8007868:	9107      	str	r1, [sp, #28]
 800786a:	9104      	str	r1, [sp, #16]
 800786c:	4808      	ldr	r0, [pc, #32]	; (8007890 <siprintf+0x38>)
 800786e:	4909      	ldr	r1, [pc, #36]	; (8007894 <siprintf+0x3c>)
 8007870:	f853 2b04 	ldr.w	r2, [r3], #4
 8007874:	9105      	str	r1, [sp, #20]
 8007876:	6800      	ldr	r0, [r0, #0]
 8007878:	a902      	add	r1, sp, #8
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	f001 fb7c 	bl	8008f78 <_svfiprintf_r>
 8007880:	2200      	movs	r2, #0
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	b01c      	add	sp, #112	; 0x70
 8007888:	f85d eb04 	ldr.w	lr, [sp], #4
 800788c:	b003      	add	sp, #12
 800788e:	4770      	bx	lr
 8007890:	2000000c 	.word	0x2000000c
 8007894:	ffff0208 	.word	0xffff0208

08007898 <quorem>:
 8007898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	6903      	ldr	r3, [r0, #16]
 800789e:	690c      	ldr	r4, [r1, #16]
 80078a0:	4607      	mov	r7, r0
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	f2c0 8082 	blt.w	80079ac <quorem+0x114>
 80078a8:	3c01      	subs	r4, #1
 80078aa:	f100 0514 	add.w	r5, r0, #20
 80078ae:	f101 0814 	add.w	r8, r1, #20
 80078b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078c0:	3301      	adds	r3, #1
 80078c2:	429a      	cmp	r2, r3
 80078c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80078c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078d0:	d331      	bcc.n	8007936 <quorem+0x9e>
 80078d2:	f04f 0e00 	mov.w	lr, #0
 80078d6:	4640      	mov	r0, r8
 80078d8:	46ac      	mov	ip, r5
 80078da:	46f2      	mov	sl, lr
 80078dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80078e0:	b293      	uxth	r3, r2
 80078e2:	fb06 e303 	mla	r3, r6, r3, lr
 80078e6:	0c12      	lsrs	r2, r2, #16
 80078e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	fb06 e202 	mla	r2, r6, r2, lr
 80078f2:	ebaa 0303 	sub.w	r3, sl, r3
 80078f6:	f8dc a000 	ldr.w	sl, [ip]
 80078fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078fe:	fa1f fa8a 	uxth.w	sl, sl
 8007902:	4453      	add	r3, sl
 8007904:	f8dc a000 	ldr.w	sl, [ip]
 8007908:	b292      	uxth	r2, r2
 800790a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800790e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007912:	b29b      	uxth	r3, r3
 8007914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007918:	4581      	cmp	r9, r0
 800791a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800791e:	f84c 3b04 	str.w	r3, [ip], #4
 8007922:	d2db      	bcs.n	80078dc <quorem+0x44>
 8007924:	f855 300b 	ldr.w	r3, [r5, fp]
 8007928:	b92b      	cbnz	r3, 8007936 <quorem+0x9e>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	3b04      	subs	r3, #4
 800792e:	429d      	cmp	r5, r3
 8007930:	461a      	mov	r2, r3
 8007932:	d32f      	bcc.n	8007994 <quorem+0xfc>
 8007934:	613c      	str	r4, [r7, #16]
 8007936:	4638      	mov	r0, r7
 8007938:	f001 f8ce 	bl	8008ad8 <__mcmp>
 800793c:	2800      	cmp	r0, #0
 800793e:	db25      	blt.n	800798c <quorem+0xf4>
 8007940:	4628      	mov	r0, r5
 8007942:	f04f 0c00 	mov.w	ip, #0
 8007946:	3601      	adds	r6, #1
 8007948:	f858 1b04 	ldr.w	r1, [r8], #4
 800794c:	f8d0 e000 	ldr.w	lr, [r0]
 8007950:	b28b      	uxth	r3, r1
 8007952:	ebac 0303 	sub.w	r3, ip, r3
 8007956:	fa1f f28e 	uxth.w	r2, lr
 800795a:	4413      	add	r3, r2
 800795c:	0c0a      	lsrs	r2, r1, #16
 800795e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800796c:	45c1      	cmp	r9, r8
 800796e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007972:	f840 3b04 	str.w	r3, [r0], #4
 8007976:	d2e7      	bcs.n	8007948 <quorem+0xb0>
 8007978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800797c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007980:	b922      	cbnz	r2, 800798c <quorem+0xf4>
 8007982:	3b04      	subs	r3, #4
 8007984:	429d      	cmp	r5, r3
 8007986:	461a      	mov	r2, r3
 8007988:	d30a      	bcc.n	80079a0 <quorem+0x108>
 800798a:	613c      	str	r4, [r7, #16]
 800798c:	4630      	mov	r0, r6
 800798e:	b003      	add	sp, #12
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	3b04      	subs	r3, #4
 8007998:	2a00      	cmp	r2, #0
 800799a:	d1cb      	bne.n	8007934 <quorem+0x9c>
 800799c:	3c01      	subs	r4, #1
 800799e:	e7c6      	b.n	800792e <quorem+0x96>
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	3b04      	subs	r3, #4
 80079a4:	2a00      	cmp	r2, #0
 80079a6:	d1f0      	bne.n	800798a <quorem+0xf2>
 80079a8:	3c01      	subs	r4, #1
 80079aa:	e7eb      	b.n	8007984 <quorem+0xec>
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7ee      	b.n	800798e <quorem+0xf6>

080079b0 <_dtoa_r>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	4616      	mov	r6, r2
 80079b6:	461f      	mov	r7, r3
 80079b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80079ba:	b099      	sub	sp, #100	; 0x64
 80079bc:	4605      	mov	r5, r0
 80079be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80079c6:	b974      	cbnz	r4, 80079e6 <_dtoa_r+0x36>
 80079c8:	2010      	movs	r0, #16
 80079ca:	f000 fde3 	bl	8008594 <malloc>
 80079ce:	4602      	mov	r2, r0
 80079d0:	6268      	str	r0, [r5, #36]	; 0x24
 80079d2:	b920      	cbnz	r0, 80079de <_dtoa_r+0x2e>
 80079d4:	21ea      	movs	r1, #234	; 0xea
 80079d6:	4ba8      	ldr	r3, [pc, #672]	; (8007c78 <_dtoa_r+0x2c8>)
 80079d8:	48a8      	ldr	r0, [pc, #672]	; (8007c7c <_dtoa_r+0x2cc>)
 80079da:	f001 fbdd 	bl	8009198 <__assert_func>
 80079de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079e2:	6004      	str	r4, [r0, #0]
 80079e4:	60c4      	str	r4, [r0, #12]
 80079e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079e8:	6819      	ldr	r1, [r3, #0]
 80079ea:	b151      	cbz	r1, 8007a02 <_dtoa_r+0x52>
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	2301      	movs	r3, #1
 80079f0:	4093      	lsls	r3, r2
 80079f2:	604a      	str	r2, [r1, #4]
 80079f4:	608b      	str	r3, [r1, #8]
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fe30 	bl	800865c <_Bfree>
 80079fc:	2200      	movs	r2, #0
 80079fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	1e3b      	subs	r3, r7, #0
 8007a04:	bfaf      	iteee	ge
 8007a06:	2300      	movge	r3, #0
 8007a08:	2201      	movlt	r2, #1
 8007a0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a0e:	9305      	strlt	r3, [sp, #20]
 8007a10:	bfa8      	it	ge
 8007a12:	f8c8 3000 	strge.w	r3, [r8]
 8007a16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007a1a:	4b99      	ldr	r3, [pc, #612]	; (8007c80 <_dtoa_r+0x2d0>)
 8007a1c:	bfb8      	it	lt
 8007a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8007a22:	ea33 0309 	bics.w	r3, r3, r9
 8007a26:	d119      	bne.n	8007a5c <_dtoa_r+0xac>
 8007a28:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a34:	4333      	orrs	r3, r6
 8007a36:	f000 857f 	beq.w	8008538 <_dtoa_r+0xb88>
 8007a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a3c:	b953      	cbnz	r3, 8007a54 <_dtoa_r+0xa4>
 8007a3e:	4b91      	ldr	r3, [pc, #580]	; (8007c84 <_dtoa_r+0x2d4>)
 8007a40:	e022      	b.n	8007a88 <_dtoa_r+0xd8>
 8007a42:	4b91      	ldr	r3, [pc, #580]	; (8007c88 <_dtoa_r+0x2d8>)
 8007a44:	9303      	str	r3, [sp, #12]
 8007a46:	3308      	adds	r3, #8
 8007a48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	9803      	ldr	r0, [sp, #12]
 8007a4e:	b019      	add	sp, #100	; 0x64
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	4b8b      	ldr	r3, [pc, #556]	; (8007c84 <_dtoa_r+0x2d4>)
 8007a56:	9303      	str	r3, [sp, #12]
 8007a58:	3303      	adds	r3, #3
 8007a5a:	e7f5      	b.n	8007a48 <_dtoa_r+0x98>
 8007a5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f7f8 ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8007a70:	4680      	mov	r8, r0
 8007a72:	b158      	cbz	r0, 8007a8c <_dtoa_r+0xdc>
 8007a74:	2301      	movs	r3, #1
 8007a76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8558 	beq.w	8008532 <_dtoa_r+0xb82>
 8007a82:	4882      	ldr	r0, [pc, #520]	; (8007c8c <_dtoa_r+0x2dc>)
 8007a84:	6018      	str	r0, [r3, #0]
 8007a86:	1e43      	subs	r3, r0, #1
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	e7df      	b.n	8007a4c <_dtoa_r+0x9c>
 8007a8c:	ab16      	add	r3, sp, #88	; 0x58
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	ab17      	add	r3, sp, #92	; 0x5c
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4628      	mov	r0, r5
 8007a96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a9a:	f001 f8c5 	bl	8008c28 <__d2b>
 8007a9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007aa2:	4683      	mov	fp, r0
 8007aa4:	2c00      	cmp	r4, #0
 8007aa6:	d07f      	beq.n	8007ba8 <_dtoa_r+0x1f8>
 8007aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007aba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007abe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4b72      	ldr	r3, [pc, #456]	; (8007c90 <_dtoa_r+0x2e0>)
 8007ac6:	f7f8 fb4f 	bl	8000168 <__aeabi_dsub>
 8007aca:	a365      	add	r3, pc, #404	; (adr r3, 8007c60 <_dtoa_r+0x2b0>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f7f8 fd02 	bl	80004d8 <__aeabi_dmul>
 8007ad4:	a364      	add	r3, pc, #400	; (adr r3, 8007c68 <_dtoa_r+0x2b8>)
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	f7f8 fb47 	bl	800016c <__adddf3>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	460f      	mov	r7, r1
 8007ae4:	f7f8 fc8e 	bl	8000404 <__aeabi_i2d>
 8007ae8:	a361      	add	r3, pc, #388	; (adr r3, 8007c70 <_dtoa_r+0x2c0>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f7f8 fcf3 	bl	80004d8 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4630      	mov	r0, r6
 8007af8:	4639      	mov	r1, r7
 8007afa:	f7f8 fb37 	bl	800016c <__adddf3>
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	f7f8 ff99 	bl	8000a38 <__aeabi_d2iz>
 8007b06:	2200      	movs	r2, #0
 8007b08:	4682      	mov	sl, r0
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f7f8 ff54 	bl	80009bc <__aeabi_dcmplt>
 8007b14:	b148      	cbz	r0, 8007b2a <_dtoa_r+0x17a>
 8007b16:	4650      	mov	r0, sl
 8007b18:	f7f8 fc74 	bl	8000404 <__aeabi_i2d>
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	463b      	mov	r3, r7
 8007b20:	f7f8 ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8007b24:	b908      	cbnz	r0, 8007b2a <_dtoa_r+0x17a>
 8007b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b2a:	f1ba 0f16 	cmp.w	sl, #22
 8007b2e:	d858      	bhi.n	8007be2 <_dtoa_r+0x232>
 8007b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b34:	4b57      	ldr	r3, [pc, #348]	; (8007c94 <_dtoa_r+0x2e4>)
 8007b36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f7f8 ff3d 	bl	80009bc <__aeabi_dcmplt>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d04f      	beq.n	8007be6 <_dtoa_r+0x236>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b50:	1b1c      	subs	r4, r3, r4
 8007b52:	1e63      	subs	r3, r4, #1
 8007b54:	9309      	str	r3, [sp, #36]	; 0x24
 8007b56:	bf49      	itett	mi
 8007b58:	f1c4 0301 	rsbmi	r3, r4, #1
 8007b5c:	2300      	movpl	r3, #0
 8007b5e:	9306      	strmi	r3, [sp, #24]
 8007b60:	2300      	movmi	r3, #0
 8007b62:	bf54      	ite	pl
 8007b64:	9306      	strpl	r3, [sp, #24]
 8007b66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007b68:	f1ba 0f00 	cmp.w	sl, #0
 8007b6c:	db3d      	blt.n	8007bea <_dtoa_r+0x23a>
 8007b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007b74:	4453      	add	r3, sl
 8007b76:	9309      	str	r3, [sp, #36]	; 0x24
 8007b78:	2300      	movs	r3, #0
 8007b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b7e:	2b09      	cmp	r3, #9
 8007b80:	f200 808c 	bhi.w	8007c9c <_dtoa_r+0x2ec>
 8007b84:	2b05      	cmp	r3, #5
 8007b86:	bfc4      	itt	gt
 8007b88:	3b04      	subgt	r3, #4
 8007b8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b8e:	bfc8      	it	gt
 8007b90:	2400      	movgt	r4, #0
 8007b92:	f1a3 0302 	sub.w	r3, r3, #2
 8007b96:	bfd8      	it	le
 8007b98:	2401      	movle	r4, #1
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	f200 808a 	bhi.w	8007cb4 <_dtoa_r+0x304>
 8007ba0:	e8df f003 	tbb	[pc, r3]
 8007ba4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007ba8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007bac:	441c      	add	r4, r3
 8007bae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	bfc3      	ittte	gt
 8007bb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007bbe:	fa09 f303 	lslgt.w	r3, r9, r3
 8007bc2:	f1c3 0320 	rsble	r3, r3, #32
 8007bc6:	bfc6      	itte	gt
 8007bc8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007bcc:	4318      	orrgt	r0, r3
 8007bce:	fa06 f003 	lslle.w	r0, r6, r3
 8007bd2:	f7f8 fc07 	bl	80003e4 <__aeabi_ui2d>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007bdc:	3c01      	subs	r4, #1
 8007bde:	9313      	str	r3, [sp, #76]	; 0x4c
 8007be0:	e76f      	b.n	8007ac2 <_dtoa_r+0x112>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7b2      	b.n	8007b4c <_dtoa_r+0x19c>
 8007be6:	900f      	str	r0, [sp, #60]	; 0x3c
 8007be8:	e7b1      	b.n	8007b4e <_dtoa_r+0x19e>
 8007bea:	9b06      	ldr	r3, [sp, #24]
 8007bec:	eba3 030a 	sub.w	r3, r3, sl
 8007bf0:	9306      	str	r3, [sp, #24]
 8007bf2:	f1ca 0300 	rsb	r3, sl, #0
 8007bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8007bfc:	e7be      	b.n	8007b7c <_dtoa_r+0x1cc>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dc58      	bgt.n	8007cba <_dtoa_r+0x30a>
 8007c08:	f04f 0901 	mov.w	r9, #1
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007c12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007c16:	2200      	movs	r2, #0
 8007c18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007c1a:	6042      	str	r2, [r0, #4]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	f102 0614 	add.w	r6, r2, #20
 8007c22:	429e      	cmp	r6, r3
 8007c24:	6841      	ldr	r1, [r0, #4]
 8007c26:	d94e      	bls.n	8007cc6 <_dtoa_r+0x316>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 fcd7 	bl	80085dc <_Balloc>
 8007c2e:	9003      	str	r0, [sp, #12]
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d14c      	bne.n	8007cce <_dtoa_r+0x31e>
 8007c34:	4602      	mov	r2, r0
 8007c36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c3a:	4b17      	ldr	r3, [pc, #92]	; (8007c98 <_dtoa_r+0x2e8>)
 8007c3c:	e6cc      	b.n	80079d8 <_dtoa_r+0x28>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e7de      	b.n	8007c00 <_dtoa_r+0x250>
 8007c42:	2300      	movs	r3, #0
 8007c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c48:	eb0a 0903 	add.w	r9, sl, r3
 8007c4c:	f109 0301 	add.w	r3, r9, #1
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	9308      	str	r3, [sp, #32]
 8007c54:	bfb8      	it	lt
 8007c56:	2301      	movlt	r3, #1
 8007c58:	e7dd      	b.n	8007c16 <_dtoa_r+0x266>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e7f2      	b.n	8007c44 <_dtoa_r+0x294>
 8007c5e:	bf00      	nop
 8007c60:	636f4361 	.word	0x636f4361
 8007c64:	3fd287a7 	.word	0x3fd287a7
 8007c68:	8b60c8b3 	.word	0x8b60c8b3
 8007c6c:	3fc68a28 	.word	0x3fc68a28
 8007c70:	509f79fb 	.word	0x509f79fb
 8007c74:	3fd34413 	.word	0x3fd34413
 8007c78:	0800bbe9 	.word	0x0800bbe9
 8007c7c:	0800bc00 	.word	0x0800bc00
 8007c80:	7ff00000 	.word	0x7ff00000
 8007c84:	0800bbe5 	.word	0x0800bbe5
 8007c88:	0800bbdc 	.word	0x0800bbdc
 8007c8c:	0800bbb9 	.word	0x0800bbb9
 8007c90:	3ff80000 	.word	0x3ff80000
 8007c94:	0800bcf0 	.word	0x0800bcf0
 8007c98:	0800bc5b 	.word	0x0800bc5b
 8007c9c:	2401      	movs	r4, #1
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ca2:	9322      	str	r3, [sp, #136]	; 0x88
 8007ca4:	f04f 39ff 	mov.w	r9, #4294967295
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2312      	movs	r3, #18
 8007cac:	f8cd 9020 	str.w	r9, [sp, #32]
 8007cb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007cb2:	e7b0      	b.n	8007c16 <_dtoa_r+0x266>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cb8:	e7f4      	b.n	8007ca4 <_dtoa_r+0x2f4>
 8007cba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	f8cd 9020 	str.w	r9, [sp, #32]
 8007cc4:	e7a7      	b.n	8007c16 <_dtoa_r+0x266>
 8007cc6:	3101      	adds	r1, #1
 8007cc8:	6041      	str	r1, [r0, #4]
 8007cca:	0052      	lsls	r2, r2, #1
 8007ccc:	e7a7      	b.n	8007c1e <_dtoa_r+0x26e>
 8007cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cd0:	9a03      	ldr	r2, [sp, #12]
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	9b08      	ldr	r3, [sp, #32]
 8007cd6:	2b0e      	cmp	r3, #14
 8007cd8:	f200 80a8 	bhi.w	8007e2c <_dtoa_r+0x47c>
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	f000 80a5 	beq.w	8007e2c <_dtoa_r+0x47c>
 8007ce2:	f1ba 0f00 	cmp.w	sl, #0
 8007ce6:	dd34      	ble.n	8007d52 <_dtoa_r+0x3a2>
 8007ce8:	4a9a      	ldr	r2, [pc, #616]	; (8007f54 <_dtoa_r+0x5a4>)
 8007cea:	f00a 030f 	and.w	r3, sl, #15
 8007cee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cf2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007cfe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007d02:	d016      	beq.n	8007d32 <_dtoa_r+0x382>
 8007d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d08:	4b93      	ldr	r3, [pc, #588]	; (8007f58 <_dtoa_r+0x5a8>)
 8007d0a:	2703      	movs	r7, #3
 8007d0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d10:	f7f8 fd0c 	bl	800072c <__aeabi_ddiv>
 8007d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d18:	f004 040f 	and.w	r4, r4, #15
 8007d1c:	4e8e      	ldr	r6, [pc, #568]	; (8007f58 <_dtoa_r+0x5a8>)
 8007d1e:	b954      	cbnz	r4, 8007d36 <_dtoa_r+0x386>
 8007d20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d28:	f7f8 fd00 	bl	800072c <__aeabi_ddiv>
 8007d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d30:	e029      	b.n	8007d86 <_dtoa_r+0x3d6>
 8007d32:	2702      	movs	r7, #2
 8007d34:	e7f2      	b.n	8007d1c <_dtoa_r+0x36c>
 8007d36:	07e1      	lsls	r1, r4, #31
 8007d38:	d508      	bpl.n	8007d4c <_dtoa_r+0x39c>
 8007d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d42:	f7f8 fbc9 	bl	80004d8 <__aeabi_dmul>
 8007d46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d4a:	3701      	adds	r7, #1
 8007d4c:	1064      	asrs	r4, r4, #1
 8007d4e:	3608      	adds	r6, #8
 8007d50:	e7e5      	b.n	8007d1e <_dtoa_r+0x36e>
 8007d52:	f000 80a5 	beq.w	8007ea0 <_dtoa_r+0x4f0>
 8007d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d5a:	f1ca 0400 	rsb	r4, sl, #0
 8007d5e:	4b7d      	ldr	r3, [pc, #500]	; (8007f54 <_dtoa_r+0x5a4>)
 8007d60:	f004 020f 	and.w	r2, r4, #15
 8007d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f7f8 fbb4 	bl	80004d8 <__aeabi_dmul>
 8007d70:	2702      	movs	r7, #2
 8007d72:	2300      	movs	r3, #0
 8007d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d78:	4e77      	ldr	r6, [pc, #476]	; (8007f58 <_dtoa_r+0x5a8>)
 8007d7a:	1124      	asrs	r4, r4, #4
 8007d7c:	2c00      	cmp	r4, #0
 8007d7e:	f040 8084 	bne.w	8007e8a <_dtoa_r+0x4da>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1d2      	bne.n	8007d2c <_dtoa_r+0x37c>
 8007d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 808b 	beq.w	8007ea4 <_dtoa_r+0x4f4>
 8007d8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4b6f      	ldr	r3, [pc, #444]	; (8007f5c <_dtoa_r+0x5ac>)
 8007d9e:	f7f8 fe0d 	bl	80009bc <__aeabi_dcmplt>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d07e      	beq.n	8007ea4 <_dtoa_r+0x4f4>
 8007da6:	9b08      	ldr	r3, [sp, #32]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d07b      	beq.n	8007ea4 <_dtoa_r+0x4f4>
 8007dac:	f1b9 0f00 	cmp.w	r9, #0
 8007db0:	dd38      	ble.n	8007e24 <_dtoa_r+0x474>
 8007db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007db6:	2200      	movs	r2, #0
 8007db8:	4b69      	ldr	r3, [pc, #420]	; (8007f60 <_dtoa_r+0x5b0>)
 8007dba:	f7f8 fb8d 	bl	80004d8 <__aeabi_dmul>
 8007dbe:	464c      	mov	r4, r9
 8007dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dc4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007dc8:	3701      	adds	r7, #1
 8007dca:	4638      	mov	r0, r7
 8007dcc:	f7f8 fb1a 	bl	8000404 <__aeabi_i2d>
 8007dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dd4:	f7f8 fb80 	bl	80004d8 <__aeabi_dmul>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4b62      	ldr	r3, [pc, #392]	; (8007f64 <_dtoa_r+0x5b4>)
 8007ddc:	f7f8 f9c6 	bl	800016c <__adddf3>
 8007de0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007de4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007de8:	9611      	str	r6, [sp, #68]	; 0x44
 8007dea:	2c00      	cmp	r4, #0
 8007dec:	d15d      	bne.n	8007eaa <_dtoa_r+0x4fa>
 8007dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007df2:	2200      	movs	r2, #0
 8007df4:	4b5c      	ldr	r3, [pc, #368]	; (8007f68 <_dtoa_r+0x5b8>)
 8007df6:	f7f8 f9b7 	bl	8000168 <__aeabi_dsub>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e02:	4633      	mov	r3, r6
 8007e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e06:	f7f8 fdf7 	bl	80009f8 <__aeabi_dcmpgt>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	f040 829c 	bne.w	8008348 <_dtoa_r+0x998>
 8007e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e1a:	f7f8 fdcf 	bl	80009bc <__aeabi_dcmplt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f040 8290 	bne.w	8008344 <_dtoa_r+0x994>
 8007e24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007e28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f2c0 8152 	blt.w	80080d8 <_dtoa_r+0x728>
 8007e34:	f1ba 0f0e 	cmp.w	sl, #14
 8007e38:	f300 814e 	bgt.w	80080d8 <_dtoa_r+0x728>
 8007e3c:	4b45      	ldr	r3, [pc, #276]	; (8007f54 <_dtoa_r+0x5a4>)
 8007e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f280 80db 	bge.w	8008008 <_dtoa_r+0x658>
 8007e52:	9b08      	ldr	r3, [sp, #32]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f300 80d7 	bgt.w	8008008 <_dtoa_r+0x658>
 8007e5a:	f040 8272 	bne.w	8008342 <_dtoa_r+0x992>
 8007e5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e62:	2200      	movs	r2, #0
 8007e64:	4b40      	ldr	r3, [pc, #256]	; (8007f68 <_dtoa_r+0x5b8>)
 8007e66:	f7f8 fb37 	bl	80004d8 <__aeabi_dmul>
 8007e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e6e:	f7f8 fdb9 	bl	80009e4 <__aeabi_dcmpge>
 8007e72:	9c08      	ldr	r4, [sp, #32]
 8007e74:	4626      	mov	r6, r4
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f040 8248 	bne.w	800830c <_dtoa_r+0x95c>
 8007e7c:	2331      	movs	r3, #49	; 0x31
 8007e7e:	9f03      	ldr	r7, [sp, #12]
 8007e80:	f10a 0a01 	add.w	sl, sl, #1
 8007e84:	f807 3b01 	strb.w	r3, [r7], #1
 8007e88:	e244      	b.n	8008314 <_dtoa_r+0x964>
 8007e8a:	07e2      	lsls	r2, r4, #31
 8007e8c:	d505      	bpl.n	8007e9a <_dtoa_r+0x4ea>
 8007e8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e92:	f7f8 fb21 	bl	80004d8 <__aeabi_dmul>
 8007e96:	2301      	movs	r3, #1
 8007e98:	3701      	adds	r7, #1
 8007e9a:	1064      	asrs	r4, r4, #1
 8007e9c:	3608      	adds	r6, #8
 8007e9e:	e76d      	b.n	8007d7c <_dtoa_r+0x3cc>
 8007ea0:	2702      	movs	r7, #2
 8007ea2:	e770      	b.n	8007d86 <_dtoa_r+0x3d6>
 8007ea4:	46d0      	mov	r8, sl
 8007ea6:	9c08      	ldr	r4, [sp, #32]
 8007ea8:	e78f      	b.n	8007dca <_dtoa_r+0x41a>
 8007eaa:	9903      	ldr	r1, [sp, #12]
 8007eac:	4b29      	ldr	r3, [pc, #164]	; (8007f54 <_dtoa_r+0x5a4>)
 8007eae:	4421      	add	r1, r4
 8007eb0:	9112      	str	r1, [sp, #72]	; 0x48
 8007eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007ebc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	d055      	beq.n	8007f70 <_dtoa_r+0x5c0>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	4929      	ldr	r1, [pc, #164]	; (8007f6c <_dtoa_r+0x5bc>)
 8007ec8:	f7f8 fc30 	bl	800072c <__aeabi_ddiv>
 8007ecc:	463b      	mov	r3, r7
 8007ece:	4632      	mov	r2, r6
 8007ed0:	f7f8 f94a 	bl	8000168 <__aeabi_dsub>
 8007ed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ed8:	9f03      	ldr	r7, [sp, #12]
 8007eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ede:	f7f8 fdab 	bl	8000a38 <__aeabi_d2iz>
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	f7f8 fa8e 	bl	8000404 <__aeabi_i2d>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef0:	f7f8 f93a 	bl	8000168 <__aeabi_dsub>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	3430      	adds	r4, #48	; 0x30
 8007efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007efe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f02:	f807 4b01 	strb.w	r4, [r7], #1
 8007f06:	f7f8 fd59 	bl	80009bc <__aeabi_dcmplt>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d174      	bne.n	8007ff8 <_dtoa_r+0x648>
 8007f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f12:	2000      	movs	r0, #0
 8007f14:	4911      	ldr	r1, [pc, #68]	; (8007f5c <_dtoa_r+0x5ac>)
 8007f16:	f7f8 f927 	bl	8000168 <__aeabi_dsub>
 8007f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f1e:	f7f8 fd4d 	bl	80009bc <__aeabi_dcmplt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 80b7 	bne.w	8008096 <_dtoa_r+0x6e6>
 8007f28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f2a:	429f      	cmp	r7, r3
 8007f2c:	f43f af7a 	beq.w	8007e24 <_dtoa_r+0x474>
 8007f30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f34:	2200      	movs	r2, #0
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <_dtoa_r+0x5b0>)
 8007f38:	f7f8 face 	bl	80004d8 <__aeabi_dmul>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <_dtoa_r+0x5b0>)
 8007f48:	f7f8 fac6 	bl	80004d8 <__aeabi_dmul>
 8007f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f50:	e7c3      	b.n	8007eda <_dtoa_r+0x52a>
 8007f52:	bf00      	nop
 8007f54:	0800bcf0 	.word	0x0800bcf0
 8007f58:	0800bcc8 	.word	0x0800bcc8
 8007f5c:	3ff00000 	.word	0x3ff00000
 8007f60:	40240000 	.word	0x40240000
 8007f64:	401c0000 	.word	0x401c0000
 8007f68:	40140000 	.word	0x40140000
 8007f6c:	3fe00000 	.word	0x3fe00000
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fab0 	bl	80004d8 <__aeabi_dmul>
 8007f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f7e:	9c03      	ldr	r4, [sp, #12]
 8007f80:	9314      	str	r3, [sp, #80]	; 0x50
 8007f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f86:	f7f8 fd57 	bl	8000a38 <__aeabi_d2iz>
 8007f8a:	9015      	str	r0, [sp, #84]	; 0x54
 8007f8c:	f7f8 fa3a 	bl	8000404 <__aeabi_i2d>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f98:	f7f8 f8e6 	bl	8000168 <__aeabi_dsub>
 8007f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	3330      	adds	r3, #48	; 0x30
 8007fa2:	f804 3b01 	strb.w	r3, [r4], #1
 8007fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fa8:	460f      	mov	r7, r1
 8007faa:	429c      	cmp	r4, r3
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	d124      	bne.n	8007ffc <_dtoa_r+0x64c>
 8007fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fb6:	4bb0      	ldr	r3, [pc, #704]	; (8008278 <_dtoa_r+0x8c8>)
 8007fb8:	f7f8 f8d8 	bl	800016c <__adddf3>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	f7f8 fd18 	bl	80009f8 <__aeabi_dcmpgt>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d163      	bne.n	8008094 <_dtoa_r+0x6e4>
 8007fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	49a9      	ldr	r1, [pc, #676]	; (8008278 <_dtoa_r+0x8c8>)
 8007fd4:	f7f8 f8c8 	bl	8000168 <__aeabi_dsub>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 fcec 	bl	80009bc <__aeabi_dcmplt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f43f af1d 	beq.w	8007e24 <_dtoa_r+0x474>
 8007fea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007fec:	1e7b      	subs	r3, r7, #1
 8007fee:	9314      	str	r3, [sp, #80]	; 0x50
 8007ff0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007ff4:	2b30      	cmp	r3, #48	; 0x30
 8007ff6:	d0f8      	beq.n	8007fea <_dtoa_r+0x63a>
 8007ff8:	46c2      	mov	sl, r8
 8007ffa:	e03b      	b.n	8008074 <_dtoa_r+0x6c4>
 8007ffc:	4b9f      	ldr	r3, [pc, #636]	; (800827c <_dtoa_r+0x8cc>)
 8007ffe:	f7f8 fa6b 	bl	80004d8 <__aeabi_dmul>
 8008002:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008006:	e7bc      	b.n	8007f82 <_dtoa_r+0x5d2>
 8008008:	9f03      	ldr	r7, [sp, #12]
 800800a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800800e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008012:	4640      	mov	r0, r8
 8008014:	4649      	mov	r1, r9
 8008016:	f7f8 fb89 	bl	800072c <__aeabi_ddiv>
 800801a:	f7f8 fd0d 	bl	8000a38 <__aeabi_d2iz>
 800801e:	4604      	mov	r4, r0
 8008020:	f7f8 f9f0 	bl	8000404 <__aeabi_i2d>
 8008024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008028:	f7f8 fa56 	bl	80004d8 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4640      	mov	r0, r8
 8008032:	4649      	mov	r1, r9
 8008034:	f7f8 f898 	bl	8000168 <__aeabi_dsub>
 8008038:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800803c:	f807 6b01 	strb.w	r6, [r7], #1
 8008040:	9e03      	ldr	r6, [sp, #12]
 8008042:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008046:	1bbe      	subs	r6, r7, r6
 8008048:	45b4      	cmp	ip, r6
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	d136      	bne.n	80080be <_dtoa_r+0x70e>
 8008050:	f7f8 f88c 	bl	800016c <__adddf3>
 8008054:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008058:	4680      	mov	r8, r0
 800805a:	4689      	mov	r9, r1
 800805c:	f7f8 fccc 	bl	80009f8 <__aeabi_dcmpgt>
 8008060:	bb58      	cbnz	r0, 80080ba <_dtoa_r+0x70a>
 8008062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	f7f8 fc9d 	bl	80009a8 <__aeabi_dcmpeq>
 800806e:	b108      	cbz	r0, 8008074 <_dtoa_r+0x6c4>
 8008070:	07e1      	lsls	r1, r4, #31
 8008072:	d422      	bmi.n	80080ba <_dtoa_r+0x70a>
 8008074:	4628      	mov	r0, r5
 8008076:	4659      	mov	r1, fp
 8008078:	f000 faf0 	bl	800865c <_Bfree>
 800807c:	2300      	movs	r3, #0
 800807e:	703b      	strb	r3, [r7, #0]
 8008080:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008082:	f10a 0001 	add.w	r0, sl, #1
 8008086:	6018      	str	r0, [r3, #0]
 8008088:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800808a:	2b00      	cmp	r3, #0
 800808c:	f43f acde 	beq.w	8007a4c <_dtoa_r+0x9c>
 8008090:	601f      	str	r7, [r3, #0]
 8008092:	e4db      	b.n	8007a4c <_dtoa_r+0x9c>
 8008094:	4627      	mov	r7, r4
 8008096:	463b      	mov	r3, r7
 8008098:	461f      	mov	r7, r3
 800809a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809e:	2a39      	cmp	r2, #57	; 0x39
 80080a0:	d107      	bne.n	80080b2 <_dtoa_r+0x702>
 80080a2:	9a03      	ldr	r2, [sp, #12]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d1f7      	bne.n	8008098 <_dtoa_r+0x6e8>
 80080a8:	2230      	movs	r2, #48	; 0x30
 80080aa:	9903      	ldr	r1, [sp, #12]
 80080ac:	f108 0801 	add.w	r8, r8, #1
 80080b0:	700a      	strb	r2, [r1, #0]
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	3201      	adds	r2, #1
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e79e      	b.n	8007ff8 <_dtoa_r+0x648>
 80080ba:	46d0      	mov	r8, sl
 80080bc:	e7eb      	b.n	8008096 <_dtoa_r+0x6e6>
 80080be:	2200      	movs	r2, #0
 80080c0:	4b6e      	ldr	r3, [pc, #440]	; (800827c <_dtoa_r+0x8cc>)
 80080c2:	f7f8 fa09 	bl	80004d8 <__aeabi_dmul>
 80080c6:	2200      	movs	r2, #0
 80080c8:	2300      	movs	r3, #0
 80080ca:	4680      	mov	r8, r0
 80080cc:	4689      	mov	r9, r1
 80080ce:	f7f8 fc6b 	bl	80009a8 <__aeabi_dcmpeq>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d09b      	beq.n	800800e <_dtoa_r+0x65e>
 80080d6:	e7cd      	b.n	8008074 <_dtoa_r+0x6c4>
 80080d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080da:	2a00      	cmp	r2, #0
 80080dc:	f000 80d0 	beq.w	8008280 <_dtoa_r+0x8d0>
 80080e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80080e2:	2a01      	cmp	r2, #1
 80080e4:	f300 80ae 	bgt.w	8008244 <_dtoa_r+0x894>
 80080e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	f000 80a6 	beq.w	800823c <_dtoa_r+0x88c>
 80080f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80080f6:	9f06      	ldr	r7, [sp, #24]
 80080f8:	9a06      	ldr	r2, [sp, #24]
 80080fa:	2101      	movs	r1, #1
 80080fc:	441a      	add	r2, r3
 80080fe:	9206      	str	r2, [sp, #24]
 8008100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008102:	4628      	mov	r0, r5
 8008104:	441a      	add	r2, r3
 8008106:	9209      	str	r2, [sp, #36]	; 0x24
 8008108:	f000 fb5e 	bl	80087c8 <__i2b>
 800810c:	4606      	mov	r6, r0
 800810e:	2f00      	cmp	r7, #0
 8008110:	dd0c      	ble.n	800812c <_dtoa_r+0x77c>
 8008112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008114:	2b00      	cmp	r3, #0
 8008116:	dd09      	ble.n	800812c <_dtoa_r+0x77c>
 8008118:	42bb      	cmp	r3, r7
 800811a:	bfa8      	it	ge
 800811c:	463b      	movge	r3, r7
 800811e:	9a06      	ldr	r2, [sp, #24]
 8008120:	1aff      	subs	r7, r7, r3
 8008122:	1ad2      	subs	r2, r2, r3
 8008124:	9206      	str	r2, [sp, #24]
 8008126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	9309      	str	r3, [sp, #36]	; 0x24
 800812c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812e:	b1f3      	cbz	r3, 800816e <_dtoa_r+0x7be>
 8008130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 80a8 	beq.w	8008288 <_dtoa_r+0x8d8>
 8008138:	2c00      	cmp	r4, #0
 800813a:	dd10      	ble.n	800815e <_dtoa_r+0x7ae>
 800813c:	4631      	mov	r1, r6
 800813e:	4622      	mov	r2, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fbff 	bl	8008944 <__pow5mult>
 8008146:	465a      	mov	r2, fp
 8008148:	4601      	mov	r1, r0
 800814a:	4606      	mov	r6, r0
 800814c:	4628      	mov	r0, r5
 800814e:	f000 fb51 	bl	80087f4 <__multiply>
 8008152:	4680      	mov	r8, r0
 8008154:	4659      	mov	r1, fp
 8008156:	4628      	mov	r0, r5
 8008158:	f000 fa80 	bl	800865c <_Bfree>
 800815c:	46c3      	mov	fp, r8
 800815e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008160:	1b1a      	subs	r2, r3, r4
 8008162:	d004      	beq.n	800816e <_dtoa_r+0x7be>
 8008164:	4659      	mov	r1, fp
 8008166:	4628      	mov	r0, r5
 8008168:	f000 fbec 	bl	8008944 <__pow5mult>
 800816c:	4683      	mov	fp, r0
 800816e:	2101      	movs	r1, #1
 8008170:	4628      	mov	r0, r5
 8008172:	f000 fb29 	bl	80087c8 <__i2b>
 8008176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008178:	4604      	mov	r4, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	f340 8086 	ble.w	800828c <_dtoa_r+0x8dc>
 8008180:	461a      	mov	r2, r3
 8008182:	4601      	mov	r1, r0
 8008184:	4628      	mov	r0, r5
 8008186:	f000 fbdd 	bl	8008944 <__pow5mult>
 800818a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800818c:	4604      	mov	r4, r0
 800818e:	2b01      	cmp	r3, #1
 8008190:	dd7f      	ble.n	8008292 <_dtoa_r+0x8e2>
 8008192:	f04f 0800 	mov.w	r8, #0
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800819c:	6918      	ldr	r0, [r3, #16]
 800819e:	f000 fac5 	bl	800872c <__hi0bits>
 80081a2:	f1c0 0020 	rsb	r0, r0, #32
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	4418      	add	r0, r3
 80081aa:	f010 001f 	ands.w	r0, r0, #31
 80081ae:	f000 8092 	beq.w	80082d6 <_dtoa_r+0x926>
 80081b2:	f1c0 0320 	rsb	r3, r0, #32
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	f340 808a 	ble.w	80082d0 <_dtoa_r+0x920>
 80081bc:	f1c0 001c 	rsb	r0, r0, #28
 80081c0:	9b06      	ldr	r3, [sp, #24]
 80081c2:	4407      	add	r7, r0
 80081c4:	4403      	add	r3, r0
 80081c6:	9306      	str	r3, [sp, #24]
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	4403      	add	r3, r0
 80081cc:	9309      	str	r3, [sp, #36]	; 0x24
 80081ce:	9b06      	ldr	r3, [sp, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dd05      	ble.n	80081e0 <_dtoa_r+0x830>
 80081d4:	4659      	mov	r1, fp
 80081d6:	461a      	mov	r2, r3
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fc0d 	bl	80089f8 <__lshift>
 80081de:	4683      	mov	fp, r0
 80081e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd05      	ble.n	80081f2 <_dtoa_r+0x842>
 80081e6:	4621      	mov	r1, r4
 80081e8:	461a      	mov	r2, r3
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 fc04 	bl	80089f8 <__lshift>
 80081f0:	4604      	mov	r4, r0
 80081f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d070      	beq.n	80082da <_dtoa_r+0x92a>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4658      	mov	r0, fp
 80081fc:	f000 fc6c 	bl	8008ad8 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	da6a      	bge.n	80082da <_dtoa_r+0x92a>
 8008204:	2300      	movs	r3, #0
 8008206:	4659      	mov	r1, fp
 8008208:	220a      	movs	r2, #10
 800820a:	4628      	mov	r0, r5
 800820c:	f000 fa48 	bl	80086a0 <__multadd>
 8008210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008212:	4683      	mov	fp, r0
 8008214:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 8194 	beq.w	8008546 <_dtoa_r+0xb96>
 800821e:	4631      	mov	r1, r6
 8008220:	2300      	movs	r3, #0
 8008222:	220a      	movs	r2, #10
 8008224:	4628      	mov	r0, r5
 8008226:	f000 fa3b 	bl	80086a0 <__multadd>
 800822a:	f1b9 0f00 	cmp.w	r9, #0
 800822e:	4606      	mov	r6, r0
 8008230:	f300 8093 	bgt.w	800835a <_dtoa_r+0x9aa>
 8008234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008236:	2b02      	cmp	r3, #2
 8008238:	dc57      	bgt.n	80082ea <_dtoa_r+0x93a>
 800823a:	e08e      	b.n	800835a <_dtoa_r+0x9aa>
 800823c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800823e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008242:	e757      	b.n	80080f4 <_dtoa_r+0x744>
 8008244:	9b08      	ldr	r3, [sp, #32]
 8008246:	1e5c      	subs	r4, r3, #1
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	42a3      	cmp	r3, r4
 800824c:	bfb7      	itett	lt
 800824e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008250:	1b1c      	subge	r4, r3, r4
 8008252:	1ae2      	sublt	r2, r4, r3
 8008254:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008256:	bfbe      	ittt	lt
 8008258:	940a      	strlt	r4, [sp, #40]	; 0x28
 800825a:	189b      	addlt	r3, r3, r2
 800825c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800825e:	9b08      	ldr	r3, [sp, #32]
 8008260:	bfb8      	it	lt
 8008262:	2400      	movlt	r4, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfbb      	ittet	lt
 8008268:	9b06      	ldrlt	r3, [sp, #24]
 800826a:	9a08      	ldrlt	r2, [sp, #32]
 800826c:	9f06      	ldrge	r7, [sp, #24]
 800826e:	1a9f      	sublt	r7, r3, r2
 8008270:	bfac      	ite	ge
 8008272:	9b08      	ldrge	r3, [sp, #32]
 8008274:	2300      	movlt	r3, #0
 8008276:	e73f      	b.n	80080f8 <_dtoa_r+0x748>
 8008278:	3fe00000 	.word	0x3fe00000
 800827c:	40240000 	.word	0x40240000
 8008280:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008282:	9f06      	ldr	r7, [sp, #24]
 8008284:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008286:	e742      	b.n	800810e <_dtoa_r+0x75e>
 8008288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828a:	e76b      	b.n	8008164 <_dtoa_r+0x7b4>
 800828c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800828e:	2b01      	cmp	r3, #1
 8008290:	dc19      	bgt.n	80082c6 <_dtoa_r+0x916>
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	b9bb      	cbnz	r3, 80082c6 <_dtoa_r+0x916>
 8008296:	9b05      	ldr	r3, [sp, #20]
 8008298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800829c:	b99b      	cbnz	r3, 80082c6 <_dtoa_r+0x916>
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082a4:	0d1b      	lsrs	r3, r3, #20
 80082a6:	051b      	lsls	r3, r3, #20
 80082a8:	b183      	cbz	r3, 80082cc <_dtoa_r+0x91c>
 80082aa:	f04f 0801 	mov.w	r8, #1
 80082ae:	9b06      	ldr	r3, [sp, #24]
 80082b0:	3301      	adds	r3, #1
 80082b2:	9306      	str	r3, [sp, #24]
 80082b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b6:	3301      	adds	r3, #1
 80082b8:	9309      	str	r3, [sp, #36]	; 0x24
 80082ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f47f af6a 	bne.w	8008196 <_dtoa_r+0x7e6>
 80082c2:	2001      	movs	r0, #1
 80082c4:	e76f      	b.n	80081a6 <_dtoa_r+0x7f6>
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	e7f6      	b.n	80082ba <_dtoa_r+0x90a>
 80082cc:	4698      	mov	r8, r3
 80082ce:	e7f4      	b.n	80082ba <_dtoa_r+0x90a>
 80082d0:	f43f af7d 	beq.w	80081ce <_dtoa_r+0x81e>
 80082d4:	4618      	mov	r0, r3
 80082d6:	301c      	adds	r0, #28
 80082d8:	e772      	b.n	80081c0 <_dtoa_r+0x810>
 80082da:	9b08      	ldr	r3, [sp, #32]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dc36      	bgt.n	800834e <_dtoa_r+0x99e>
 80082e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	dd33      	ble.n	800834e <_dtoa_r+0x99e>
 80082e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082ea:	f1b9 0f00 	cmp.w	r9, #0
 80082ee:	d10d      	bne.n	800830c <_dtoa_r+0x95c>
 80082f0:	4621      	mov	r1, r4
 80082f2:	464b      	mov	r3, r9
 80082f4:	2205      	movs	r2, #5
 80082f6:	4628      	mov	r0, r5
 80082f8:	f000 f9d2 	bl	80086a0 <__multadd>
 80082fc:	4601      	mov	r1, r0
 80082fe:	4604      	mov	r4, r0
 8008300:	4658      	mov	r0, fp
 8008302:	f000 fbe9 	bl	8008ad8 <__mcmp>
 8008306:	2800      	cmp	r0, #0
 8008308:	f73f adb8 	bgt.w	8007e7c <_dtoa_r+0x4cc>
 800830c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800830e:	9f03      	ldr	r7, [sp, #12]
 8008310:	ea6f 0a03 	mvn.w	sl, r3
 8008314:	f04f 0800 	mov.w	r8, #0
 8008318:	4621      	mov	r1, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f99e 	bl	800865c <_Bfree>
 8008320:	2e00      	cmp	r6, #0
 8008322:	f43f aea7 	beq.w	8008074 <_dtoa_r+0x6c4>
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	d005      	beq.n	8008338 <_dtoa_r+0x988>
 800832c:	45b0      	cmp	r8, r6
 800832e:	d003      	beq.n	8008338 <_dtoa_r+0x988>
 8008330:	4641      	mov	r1, r8
 8008332:	4628      	mov	r0, r5
 8008334:	f000 f992 	bl	800865c <_Bfree>
 8008338:	4631      	mov	r1, r6
 800833a:	4628      	mov	r0, r5
 800833c:	f000 f98e 	bl	800865c <_Bfree>
 8008340:	e698      	b.n	8008074 <_dtoa_r+0x6c4>
 8008342:	2400      	movs	r4, #0
 8008344:	4626      	mov	r6, r4
 8008346:	e7e1      	b.n	800830c <_dtoa_r+0x95c>
 8008348:	46c2      	mov	sl, r8
 800834a:	4626      	mov	r6, r4
 800834c:	e596      	b.n	8007e7c <_dtoa_r+0x4cc>
 800834e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80fd 	beq.w	8008554 <_dtoa_r+0xba4>
 800835a:	2f00      	cmp	r7, #0
 800835c:	dd05      	ble.n	800836a <_dtoa_r+0x9ba>
 800835e:	4631      	mov	r1, r6
 8008360:	463a      	mov	r2, r7
 8008362:	4628      	mov	r0, r5
 8008364:	f000 fb48 	bl	80089f8 <__lshift>
 8008368:	4606      	mov	r6, r0
 800836a:	f1b8 0f00 	cmp.w	r8, #0
 800836e:	d05c      	beq.n	800842a <_dtoa_r+0xa7a>
 8008370:	4628      	mov	r0, r5
 8008372:	6871      	ldr	r1, [r6, #4]
 8008374:	f000 f932 	bl	80085dc <_Balloc>
 8008378:	4607      	mov	r7, r0
 800837a:	b928      	cbnz	r0, 8008388 <_dtoa_r+0x9d8>
 800837c:	4602      	mov	r2, r0
 800837e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008382:	4b7f      	ldr	r3, [pc, #508]	; (8008580 <_dtoa_r+0xbd0>)
 8008384:	f7ff bb28 	b.w	80079d8 <_dtoa_r+0x28>
 8008388:	6932      	ldr	r2, [r6, #16]
 800838a:	f106 010c 	add.w	r1, r6, #12
 800838e:	3202      	adds	r2, #2
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	300c      	adds	r0, #12
 8008394:	f000 f914 	bl	80085c0 <memcpy>
 8008398:	2201      	movs	r2, #1
 800839a:	4639      	mov	r1, r7
 800839c:	4628      	mov	r0, r5
 800839e:	f000 fb2b 	bl	80089f8 <__lshift>
 80083a2:	46b0      	mov	r8, r6
 80083a4:	4606      	mov	r6, r0
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	9308      	str	r3, [sp, #32]
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	444b      	add	r3, r9
 80083b0:	930a      	str	r3, [sp, #40]	; 0x28
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	9b08      	ldr	r3, [sp, #32]
 80083bc:	4621      	mov	r1, r4
 80083be:	3b01      	subs	r3, #1
 80083c0:	4658      	mov	r0, fp
 80083c2:	9304      	str	r3, [sp, #16]
 80083c4:	f7ff fa68 	bl	8007898 <quorem>
 80083c8:	4603      	mov	r3, r0
 80083ca:	4641      	mov	r1, r8
 80083cc:	3330      	adds	r3, #48	; 0x30
 80083ce:	9006      	str	r0, [sp, #24]
 80083d0:	4658      	mov	r0, fp
 80083d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80083d4:	f000 fb80 	bl	8008ad8 <__mcmp>
 80083d8:	4632      	mov	r2, r6
 80083da:	4681      	mov	r9, r0
 80083dc:	4621      	mov	r1, r4
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 fb96 	bl	8008b10 <__mdiff>
 80083e4:	68c2      	ldr	r2, [r0, #12]
 80083e6:	4607      	mov	r7, r0
 80083e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ea:	bb02      	cbnz	r2, 800842e <_dtoa_r+0xa7e>
 80083ec:	4601      	mov	r1, r0
 80083ee:	4658      	mov	r0, fp
 80083f0:	f000 fb72 	bl	8008ad8 <__mcmp>
 80083f4:	4602      	mov	r2, r0
 80083f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083f8:	4639      	mov	r1, r7
 80083fa:	4628      	mov	r0, r5
 80083fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008400:	f000 f92c 	bl	800865c <_Bfree>
 8008404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008408:	9f08      	ldr	r7, [sp, #32]
 800840a:	ea43 0102 	orr.w	r1, r3, r2
 800840e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008410:	430b      	orrs	r3, r1
 8008412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008414:	d10d      	bne.n	8008432 <_dtoa_r+0xa82>
 8008416:	2b39      	cmp	r3, #57	; 0x39
 8008418:	d029      	beq.n	800846e <_dtoa_r+0xabe>
 800841a:	f1b9 0f00 	cmp.w	r9, #0
 800841e:	dd01      	ble.n	8008424 <_dtoa_r+0xa74>
 8008420:	9b06      	ldr	r3, [sp, #24]
 8008422:	3331      	adds	r3, #49	; 0x31
 8008424:	9a04      	ldr	r2, [sp, #16]
 8008426:	7013      	strb	r3, [r2, #0]
 8008428:	e776      	b.n	8008318 <_dtoa_r+0x968>
 800842a:	4630      	mov	r0, r6
 800842c:	e7b9      	b.n	80083a2 <_dtoa_r+0x9f2>
 800842e:	2201      	movs	r2, #1
 8008430:	e7e2      	b.n	80083f8 <_dtoa_r+0xa48>
 8008432:	f1b9 0f00 	cmp.w	r9, #0
 8008436:	db06      	blt.n	8008446 <_dtoa_r+0xa96>
 8008438:	9922      	ldr	r1, [sp, #136]	; 0x88
 800843a:	ea41 0909 	orr.w	r9, r1, r9
 800843e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008440:	ea59 0101 	orrs.w	r1, r9, r1
 8008444:	d120      	bne.n	8008488 <_dtoa_r+0xad8>
 8008446:	2a00      	cmp	r2, #0
 8008448:	ddec      	ble.n	8008424 <_dtoa_r+0xa74>
 800844a:	4659      	mov	r1, fp
 800844c:	2201      	movs	r2, #1
 800844e:	4628      	mov	r0, r5
 8008450:	9308      	str	r3, [sp, #32]
 8008452:	f000 fad1 	bl	80089f8 <__lshift>
 8008456:	4621      	mov	r1, r4
 8008458:	4683      	mov	fp, r0
 800845a:	f000 fb3d 	bl	8008ad8 <__mcmp>
 800845e:	2800      	cmp	r0, #0
 8008460:	9b08      	ldr	r3, [sp, #32]
 8008462:	dc02      	bgt.n	800846a <_dtoa_r+0xaba>
 8008464:	d1de      	bne.n	8008424 <_dtoa_r+0xa74>
 8008466:	07da      	lsls	r2, r3, #31
 8008468:	d5dc      	bpl.n	8008424 <_dtoa_r+0xa74>
 800846a:	2b39      	cmp	r3, #57	; 0x39
 800846c:	d1d8      	bne.n	8008420 <_dtoa_r+0xa70>
 800846e:	2339      	movs	r3, #57	; 0x39
 8008470:	9a04      	ldr	r2, [sp, #16]
 8008472:	7013      	strb	r3, [r2, #0]
 8008474:	463b      	mov	r3, r7
 8008476:	461f      	mov	r7, r3
 8008478:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800847c:	3b01      	subs	r3, #1
 800847e:	2a39      	cmp	r2, #57	; 0x39
 8008480:	d050      	beq.n	8008524 <_dtoa_r+0xb74>
 8008482:	3201      	adds	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e747      	b.n	8008318 <_dtoa_r+0x968>
 8008488:	2a00      	cmp	r2, #0
 800848a:	dd03      	ble.n	8008494 <_dtoa_r+0xae4>
 800848c:	2b39      	cmp	r3, #57	; 0x39
 800848e:	d0ee      	beq.n	800846e <_dtoa_r+0xabe>
 8008490:	3301      	adds	r3, #1
 8008492:	e7c7      	b.n	8008424 <_dtoa_r+0xa74>
 8008494:	9a08      	ldr	r2, [sp, #32]
 8008496:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008498:	f802 3c01 	strb.w	r3, [r2, #-1]
 800849c:	428a      	cmp	r2, r1
 800849e:	d02a      	beq.n	80084f6 <_dtoa_r+0xb46>
 80084a0:	4659      	mov	r1, fp
 80084a2:	2300      	movs	r3, #0
 80084a4:	220a      	movs	r2, #10
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 f8fa 	bl	80086a0 <__multadd>
 80084ac:	45b0      	cmp	r8, r6
 80084ae:	4683      	mov	fp, r0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	f04f 020a 	mov.w	r2, #10
 80084b8:	4641      	mov	r1, r8
 80084ba:	4628      	mov	r0, r5
 80084bc:	d107      	bne.n	80084ce <_dtoa_r+0xb1e>
 80084be:	f000 f8ef 	bl	80086a0 <__multadd>
 80084c2:	4680      	mov	r8, r0
 80084c4:	4606      	mov	r6, r0
 80084c6:	9b08      	ldr	r3, [sp, #32]
 80084c8:	3301      	adds	r3, #1
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	e775      	b.n	80083ba <_dtoa_r+0xa0a>
 80084ce:	f000 f8e7 	bl	80086a0 <__multadd>
 80084d2:	4631      	mov	r1, r6
 80084d4:	4680      	mov	r8, r0
 80084d6:	2300      	movs	r3, #0
 80084d8:	220a      	movs	r2, #10
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 f8e0 	bl	80086a0 <__multadd>
 80084e0:	4606      	mov	r6, r0
 80084e2:	e7f0      	b.n	80084c6 <_dtoa_r+0xb16>
 80084e4:	f1b9 0f00 	cmp.w	r9, #0
 80084e8:	bfcc      	ite	gt
 80084ea:	464f      	movgt	r7, r9
 80084ec:	2701      	movle	r7, #1
 80084ee:	f04f 0800 	mov.w	r8, #0
 80084f2:	9a03      	ldr	r2, [sp, #12]
 80084f4:	4417      	add	r7, r2
 80084f6:	4659      	mov	r1, fp
 80084f8:	2201      	movs	r2, #1
 80084fa:	4628      	mov	r0, r5
 80084fc:	9308      	str	r3, [sp, #32]
 80084fe:	f000 fa7b 	bl	80089f8 <__lshift>
 8008502:	4621      	mov	r1, r4
 8008504:	4683      	mov	fp, r0
 8008506:	f000 fae7 	bl	8008ad8 <__mcmp>
 800850a:	2800      	cmp	r0, #0
 800850c:	dcb2      	bgt.n	8008474 <_dtoa_r+0xac4>
 800850e:	d102      	bne.n	8008516 <_dtoa_r+0xb66>
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	07db      	lsls	r3, r3, #31
 8008514:	d4ae      	bmi.n	8008474 <_dtoa_r+0xac4>
 8008516:	463b      	mov	r3, r7
 8008518:	461f      	mov	r7, r3
 800851a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800851e:	2a30      	cmp	r2, #48	; 0x30
 8008520:	d0fa      	beq.n	8008518 <_dtoa_r+0xb68>
 8008522:	e6f9      	b.n	8008318 <_dtoa_r+0x968>
 8008524:	9a03      	ldr	r2, [sp, #12]
 8008526:	429a      	cmp	r2, r3
 8008528:	d1a5      	bne.n	8008476 <_dtoa_r+0xac6>
 800852a:	2331      	movs	r3, #49	; 0x31
 800852c:	f10a 0a01 	add.w	sl, sl, #1
 8008530:	e779      	b.n	8008426 <_dtoa_r+0xa76>
 8008532:	4b14      	ldr	r3, [pc, #80]	; (8008584 <_dtoa_r+0xbd4>)
 8008534:	f7ff baa8 	b.w	8007a88 <_dtoa_r+0xd8>
 8008538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800853a:	2b00      	cmp	r3, #0
 800853c:	f47f aa81 	bne.w	8007a42 <_dtoa_r+0x92>
 8008540:	4b11      	ldr	r3, [pc, #68]	; (8008588 <_dtoa_r+0xbd8>)
 8008542:	f7ff baa1 	b.w	8007a88 <_dtoa_r+0xd8>
 8008546:	f1b9 0f00 	cmp.w	r9, #0
 800854a:	dc03      	bgt.n	8008554 <_dtoa_r+0xba4>
 800854c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800854e:	2b02      	cmp	r3, #2
 8008550:	f73f aecb 	bgt.w	80082ea <_dtoa_r+0x93a>
 8008554:	9f03      	ldr	r7, [sp, #12]
 8008556:	4621      	mov	r1, r4
 8008558:	4658      	mov	r0, fp
 800855a:	f7ff f99d 	bl	8007898 <quorem>
 800855e:	9a03      	ldr	r2, [sp, #12]
 8008560:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008564:	f807 3b01 	strb.w	r3, [r7], #1
 8008568:	1aba      	subs	r2, r7, r2
 800856a:	4591      	cmp	r9, r2
 800856c:	ddba      	ble.n	80084e4 <_dtoa_r+0xb34>
 800856e:	4659      	mov	r1, fp
 8008570:	2300      	movs	r3, #0
 8008572:	220a      	movs	r2, #10
 8008574:	4628      	mov	r0, r5
 8008576:	f000 f893 	bl	80086a0 <__multadd>
 800857a:	4683      	mov	fp, r0
 800857c:	e7eb      	b.n	8008556 <_dtoa_r+0xba6>
 800857e:	bf00      	nop
 8008580:	0800bc5b 	.word	0x0800bc5b
 8008584:	0800bbb8 	.word	0x0800bbb8
 8008588:	0800bbdc 	.word	0x0800bbdc

0800858c <_localeconv_r>:
 800858c:	4800      	ldr	r0, [pc, #0]	; (8008590 <_localeconv_r+0x4>)
 800858e:	4770      	bx	lr
 8008590:	20000160 	.word	0x20000160

08008594 <malloc>:
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <malloc+0xc>)
 8008596:	4601      	mov	r1, r0
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f000 bc1d 	b.w	8008dd8 <_malloc_r>
 800859e:	bf00      	nop
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <memchr>:
 80085a4:	4603      	mov	r3, r0
 80085a6:	b510      	push	{r4, lr}
 80085a8:	b2c9      	uxtb	r1, r1
 80085aa:	4402      	add	r2, r0
 80085ac:	4293      	cmp	r3, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	d101      	bne.n	80085b6 <memchr+0x12>
 80085b2:	2000      	movs	r0, #0
 80085b4:	e003      	b.n	80085be <memchr+0x1a>
 80085b6:	7804      	ldrb	r4, [r0, #0]
 80085b8:	3301      	adds	r3, #1
 80085ba:	428c      	cmp	r4, r1
 80085bc:	d1f6      	bne.n	80085ac <memchr+0x8>
 80085be:	bd10      	pop	{r4, pc}

080085c0 <memcpy>:
 80085c0:	440a      	add	r2, r1
 80085c2:	4291      	cmp	r1, r2
 80085c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085c8:	d100      	bne.n	80085cc <memcpy+0xc>
 80085ca:	4770      	bx	lr
 80085cc:	b510      	push	{r4, lr}
 80085ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d2:	4291      	cmp	r1, r2
 80085d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d8:	d1f9      	bne.n	80085ce <memcpy+0xe>
 80085da:	bd10      	pop	{r4, pc}

080085dc <_Balloc>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085e0:	4604      	mov	r4, r0
 80085e2:	460d      	mov	r5, r1
 80085e4:	b976      	cbnz	r6, 8008604 <_Balloc+0x28>
 80085e6:	2010      	movs	r0, #16
 80085e8:	f7ff ffd4 	bl	8008594 <malloc>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6260      	str	r0, [r4, #36]	; 0x24
 80085f0:	b920      	cbnz	r0, 80085fc <_Balloc+0x20>
 80085f2:	2166      	movs	r1, #102	; 0x66
 80085f4:	4b17      	ldr	r3, [pc, #92]	; (8008654 <_Balloc+0x78>)
 80085f6:	4818      	ldr	r0, [pc, #96]	; (8008658 <_Balloc+0x7c>)
 80085f8:	f000 fdce 	bl	8009198 <__assert_func>
 80085fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008600:	6006      	str	r6, [r0, #0]
 8008602:	60c6      	str	r6, [r0, #12]
 8008604:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008606:	68f3      	ldr	r3, [r6, #12]
 8008608:	b183      	cbz	r3, 800862c <_Balloc+0x50>
 800860a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008612:	b9b8      	cbnz	r0, 8008644 <_Balloc+0x68>
 8008614:	2101      	movs	r1, #1
 8008616:	fa01 f605 	lsl.w	r6, r1, r5
 800861a:	1d72      	adds	r2, r6, #5
 800861c:	4620      	mov	r0, r4
 800861e:	0092      	lsls	r2, r2, #2
 8008620:	f000 fb5e 	bl	8008ce0 <_calloc_r>
 8008624:	b160      	cbz	r0, 8008640 <_Balloc+0x64>
 8008626:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800862a:	e00e      	b.n	800864a <_Balloc+0x6e>
 800862c:	2221      	movs	r2, #33	; 0x21
 800862e:	2104      	movs	r1, #4
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fb55 	bl	8008ce0 <_calloc_r>
 8008636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008638:	60f0      	str	r0, [r6, #12]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e4      	bne.n	800860a <_Balloc+0x2e>
 8008640:	2000      	movs	r0, #0
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	6802      	ldr	r2, [r0, #0]
 8008646:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800864a:	2300      	movs	r3, #0
 800864c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008650:	e7f7      	b.n	8008642 <_Balloc+0x66>
 8008652:	bf00      	nop
 8008654:	0800bbe9 	.word	0x0800bbe9
 8008658:	0800bc6c 	.word	0x0800bc6c

0800865c <_Bfree>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008660:	4605      	mov	r5, r0
 8008662:	460c      	mov	r4, r1
 8008664:	b976      	cbnz	r6, 8008684 <_Bfree+0x28>
 8008666:	2010      	movs	r0, #16
 8008668:	f7ff ff94 	bl	8008594 <malloc>
 800866c:	4602      	mov	r2, r0
 800866e:	6268      	str	r0, [r5, #36]	; 0x24
 8008670:	b920      	cbnz	r0, 800867c <_Bfree+0x20>
 8008672:	218a      	movs	r1, #138	; 0x8a
 8008674:	4b08      	ldr	r3, [pc, #32]	; (8008698 <_Bfree+0x3c>)
 8008676:	4809      	ldr	r0, [pc, #36]	; (800869c <_Bfree+0x40>)
 8008678:	f000 fd8e 	bl	8009198 <__assert_func>
 800867c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008680:	6006      	str	r6, [r0, #0]
 8008682:	60c6      	str	r6, [r0, #12]
 8008684:	b13c      	cbz	r4, 8008696 <_Bfree+0x3a>
 8008686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008688:	6862      	ldr	r2, [r4, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008690:	6021      	str	r1, [r4, #0]
 8008692:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	0800bbe9 	.word	0x0800bbe9
 800869c:	0800bc6c 	.word	0x0800bc6c

080086a0 <__multadd>:
 80086a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a4:	4607      	mov	r7, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	461e      	mov	r6, r3
 80086aa:	2000      	movs	r0, #0
 80086ac:	690d      	ldr	r5, [r1, #16]
 80086ae:	f101 0c14 	add.w	ip, r1, #20
 80086b2:	f8dc 3000 	ldr.w	r3, [ip]
 80086b6:	3001      	adds	r0, #1
 80086b8:	b299      	uxth	r1, r3
 80086ba:	fb02 6101 	mla	r1, r2, r1, r6
 80086be:	0c1e      	lsrs	r6, r3, #16
 80086c0:	0c0b      	lsrs	r3, r1, #16
 80086c2:	fb02 3306 	mla	r3, r2, r6, r3
 80086c6:	b289      	uxth	r1, r1
 80086c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086cc:	4285      	cmp	r5, r0
 80086ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086d2:	f84c 1b04 	str.w	r1, [ip], #4
 80086d6:	dcec      	bgt.n	80086b2 <__multadd+0x12>
 80086d8:	b30e      	cbz	r6, 800871e <__multadd+0x7e>
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	42ab      	cmp	r3, r5
 80086de:	dc19      	bgt.n	8008714 <__multadd+0x74>
 80086e0:	6861      	ldr	r1, [r4, #4]
 80086e2:	4638      	mov	r0, r7
 80086e4:	3101      	adds	r1, #1
 80086e6:	f7ff ff79 	bl	80085dc <_Balloc>
 80086ea:	4680      	mov	r8, r0
 80086ec:	b928      	cbnz	r0, 80086fa <__multadd+0x5a>
 80086ee:	4602      	mov	r2, r0
 80086f0:	21b5      	movs	r1, #181	; 0xb5
 80086f2:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <__multadd+0x84>)
 80086f4:	480c      	ldr	r0, [pc, #48]	; (8008728 <__multadd+0x88>)
 80086f6:	f000 fd4f 	bl	8009198 <__assert_func>
 80086fa:	6922      	ldr	r2, [r4, #16]
 80086fc:	f104 010c 	add.w	r1, r4, #12
 8008700:	3202      	adds	r2, #2
 8008702:	0092      	lsls	r2, r2, #2
 8008704:	300c      	adds	r0, #12
 8008706:	f7ff ff5b 	bl	80085c0 <memcpy>
 800870a:	4621      	mov	r1, r4
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff ffa5 	bl	800865c <_Bfree>
 8008712:	4644      	mov	r4, r8
 8008714:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008718:	3501      	adds	r5, #1
 800871a:	615e      	str	r6, [r3, #20]
 800871c:	6125      	str	r5, [r4, #16]
 800871e:	4620      	mov	r0, r4
 8008720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008724:	0800bc5b 	.word	0x0800bc5b
 8008728:	0800bc6c 	.word	0x0800bc6c

0800872c <__hi0bits>:
 800872c:	0c02      	lsrs	r2, r0, #16
 800872e:	0412      	lsls	r2, r2, #16
 8008730:	4603      	mov	r3, r0
 8008732:	b9ca      	cbnz	r2, 8008768 <__hi0bits+0x3c>
 8008734:	0403      	lsls	r3, r0, #16
 8008736:	2010      	movs	r0, #16
 8008738:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800873c:	bf04      	itt	eq
 800873e:	021b      	lsleq	r3, r3, #8
 8008740:	3008      	addeq	r0, #8
 8008742:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008746:	bf04      	itt	eq
 8008748:	011b      	lsleq	r3, r3, #4
 800874a:	3004      	addeq	r0, #4
 800874c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008750:	bf04      	itt	eq
 8008752:	009b      	lsleq	r3, r3, #2
 8008754:	3002      	addeq	r0, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	db05      	blt.n	8008766 <__hi0bits+0x3a>
 800875a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800875e:	f100 0001 	add.w	r0, r0, #1
 8008762:	bf08      	it	eq
 8008764:	2020      	moveq	r0, #32
 8008766:	4770      	bx	lr
 8008768:	2000      	movs	r0, #0
 800876a:	e7e5      	b.n	8008738 <__hi0bits+0xc>

0800876c <__lo0bits>:
 800876c:	6803      	ldr	r3, [r0, #0]
 800876e:	4602      	mov	r2, r0
 8008770:	f013 0007 	ands.w	r0, r3, #7
 8008774:	d00b      	beq.n	800878e <__lo0bits+0x22>
 8008776:	07d9      	lsls	r1, r3, #31
 8008778:	d421      	bmi.n	80087be <__lo0bits+0x52>
 800877a:	0798      	lsls	r0, r3, #30
 800877c:	bf49      	itett	mi
 800877e:	085b      	lsrmi	r3, r3, #1
 8008780:	089b      	lsrpl	r3, r3, #2
 8008782:	2001      	movmi	r0, #1
 8008784:	6013      	strmi	r3, [r2, #0]
 8008786:	bf5c      	itt	pl
 8008788:	2002      	movpl	r0, #2
 800878a:	6013      	strpl	r3, [r2, #0]
 800878c:	4770      	bx	lr
 800878e:	b299      	uxth	r1, r3
 8008790:	b909      	cbnz	r1, 8008796 <__lo0bits+0x2a>
 8008792:	2010      	movs	r0, #16
 8008794:	0c1b      	lsrs	r3, r3, #16
 8008796:	b2d9      	uxtb	r1, r3
 8008798:	b909      	cbnz	r1, 800879e <__lo0bits+0x32>
 800879a:	3008      	adds	r0, #8
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	0719      	lsls	r1, r3, #28
 80087a0:	bf04      	itt	eq
 80087a2:	091b      	lsreq	r3, r3, #4
 80087a4:	3004      	addeq	r0, #4
 80087a6:	0799      	lsls	r1, r3, #30
 80087a8:	bf04      	itt	eq
 80087aa:	089b      	lsreq	r3, r3, #2
 80087ac:	3002      	addeq	r0, #2
 80087ae:	07d9      	lsls	r1, r3, #31
 80087b0:	d403      	bmi.n	80087ba <__lo0bits+0x4e>
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	f100 0001 	add.w	r0, r0, #1
 80087b8:	d003      	beq.n	80087c2 <__lo0bits+0x56>
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	4770      	bx	lr
 80087be:	2000      	movs	r0, #0
 80087c0:	4770      	bx	lr
 80087c2:	2020      	movs	r0, #32
 80087c4:	4770      	bx	lr
	...

080087c8 <__i2b>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	460c      	mov	r4, r1
 80087cc:	2101      	movs	r1, #1
 80087ce:	f7ff ff05 	bl	80085dc <_Balloc>
 80087d2:	4602      	mov	r2, r0
 80087d4:	b928      	cbnz	r0, 80087e2 <__i2b+0x1a>
 80087d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80087da:	4b04      	ldr	r3, [pc, #16]	; (80087ec <__i2b+0x24>)
 80087dc:	4804      	ldr	r0, [pc, #16]	; (80087f0 <__i2b+0x28>)
 80087de:	f000 fcdb 	bl	8009198 <__assert_func>
 80087e2:	2301      	movs	r3, #1
 80087e4:	6144      	str	r4, [r0, #20]
 80087e6:	6103      	str	r3, [r0, #16]
 80087e8:	bd10      	pop	{r4, pc}
 80087ea:	bf00      	nop
 80087ec:	0800bc5b 	.word	0x0800bc5b
 80087f0:	0800bc6c 	.word	0x0800bc6c

080087f4 <__multiply>:
 80087f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f8:	4691      	mov	r9, r2
 80087fa:	690a      	ldr	r2, [r1, #16]
 80087fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008800:	460c      	mov	r4, r1
 8008802:	429a      	cmp	r2, r3
 8008804:	bfbe      	ittt	lt
 8008806:	460b      	movlt	r3, r1
 8008808:	464c      	movlt	r4, r9
 800880a:	4699      	movlt	r9, r3
 800880c:	6927      	ldr	r7, [r4, #16]
 800880e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	6861      	ldr	r1, [r4, #4]
 8008816:	eb07 060a 	add.w	r6, r7, sl
 800881a:	42b3      	cmp	r3, r6
 800881c:	b085      	sub	sp, #20
 800881e:	bfb8      	it	lt
 8008820:	3101      	addlt	r1, #1
 8008822:	f7ff fedb 	bl	80085dc <_Balloc>
 8008826:	b930      	cbnz	r0, 8008836 <__multiply+0x42>
 8008828:	4602      	mov	r2, r0
 800882a:	f240 115d 	movw	r1, #349	; 0x15d
 800882e:	4b43      	ldr	r3, [pc, #268]	; (800893c <__multiply+0x148>)
 8008830:	4843      	ldr	r0, [pc, #268]	; (8008940 <__multiply+0x14c>)
 8008832:	f000 fcb1 	bl	8009198 <__assert_func>
 8008836:	f100 0514 	add.w	r5, r0, #20
 800883a:	462b      	mov	r3, r5
 800883c:	2200      	movs	r2, #0
 800883e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008842:	4543      	cmp	r3, r8
 8008844:	d321      	bcc.n	800888a <__multiply+0x96>
 8008846:	f104 0314 	add.w	r3, r4, #20
 800884a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800884e:	f109 0314 	add.w	r3, r9, #20
 8008852:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008856:	9202      	str	r2, [sp, #8]
 8008858:	1b3a      	subs	r2, r7, r4
 800885a:	3a15      	subs	r2, #21
 800885c:	f022 0203 	bic.w	r2, r2, #3
 8008860:	3204      	adds	r2, #4
 8008862:	f104 0115 	add.w	r1, r4, #21
 8008866:	428f      	cmp	r7, r1
 8008868:	bf38      	it	cc
 800886a:	2204      	movcc	r2, #4
 800886c:	9201      	str	r2, [sp, #4]
 800886e:	9a02      	ldr	r2, [sp, #8]
 8008870:	9303      	str	r3, [sp, #12]
 8008872:	429a      	cmp	r2, r3
 8008874:	d80c      	bhi.n	8008890 <__multiply+0x9c>
 8008876:	2e00      	cmp	r6, #0
 8008878:	dd03      	ble.n	8008882 <__multiply+0x8e>
 800887a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800887e:	2b00      	cmp	r3, #0
 8008880:	d059      	beq.n	8008936 <__multiply+0x142>
 8008882:	6106      	str	r6, [r0, #16]
 8008884:	b005      	add	sp, #20
 8008886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888a:	f843 2b04 	str.w	r2, [r3], #4
 800888e:	e7d8      	b.n	8008842 <__multiply+0x4e>
 8008890:	f8b3 a000 	ldrh.w	sl, [r3]
 8008894:	f1ba 0f00 	cmp.w	sl, #0
 8008898:	d023      	beq.n	80088e2 <__multiply+0xee>
 800889a:	46a9      	mov	r9, r5
 800889c:	f04f 0c00 	mov.w	ip, #0
 80088a0:	f104 0e14 	add.w	lr, r4, #20
 80088a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088a8:	f8d9 1000 	ldr.w	r1, [r9]
 80088ac:	fa1f fb82 	uxth.w	fp, r2
 80088b0:	b289      	uxth	r1, r1
 80088b2:	fb0a 110b 	mla	r1, sl, fp, r1
 80088b6:	4461      	add	r1, ip
 80088b8:	f8d9 c000 	ldr.w	ip, [r9]
 80088bc:	0c12      	lsrs	r2, r2, #16
 80088be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80088c2:	fb0a c202 	mla	r2, sl, r2, ip
 80088c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088ca:	b289      	uxth	r1, r1
 80088cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088d0:	4577      	cmp	r7, lr
 80088d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088d6:	f849 1b04 	str.w	r1, [r9], #4
 80088da:	d8e3      	bhi.n	80088a4 <__multiply+0xb0>
 80088dc:	9a01      	ldr	r2, [sp, #4]
 80088de:	f845 c002 	str.w	ip, [r5, r2]
 80088e2:	9a03      	ldr	r2, [sp, #12]
 80088e4:	3304      	adds	r3, #4
 80088e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	d020      	beq.n	8008932 <__multiply+0x13e>
 80088f0:	46ae      	mov	lr, r5
 80088f2:	f04f 0a00 	mov.w	sl, #0
 80088f6:	6829      	ldr	r1, [r5, #0]
 80088f8:	f104 0c14 	add.w	ip, r4, #20
 80088fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008900:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008904:	b289      	uxth	r1, r1
 8008906:	fb09 220b 	mla	r2, r9, fp, r2
 800890a:	4492      	add	sl, r2
 800890c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008910:	f84e 1b04 	str.w	r1, [lr], #4
 8008914:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008918:	f8be 1000 	ldrh.w	r1, [lr]
 800891c:	0c12      	lsrs	r2, r2, #16
 800891e:	fb09 1102 	mla	r1, r9, r2, r1
 8008922:	4567      	cmp	r7, ip
 8008924:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008928:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800892c:	d8e6      	bhi.n	80088fc <__multiply+0x108>
 800892e:	9a01      	ldr	r2, [sp, #4]
 8008930:	50a9      	str	r1, [r5, r2]
 8008932:	3504      	adds	r5, #4
 8008934:	e79b      	b.n	800886e <__multiply+0x7a>
 8008936:	3e01      	subs	r6, #1
 8008938:	e79d      	b.n	8008876 <__multiply+0x82>
 800893a:	bf00      	nop
 800893c:	0800bc5b 	.word	0x0800bc5b
 8008940:	0800bc6c 	.word	0x0800bc6c

08008944 <__pow5mult>:
 8008944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008948:	4615      	mov	r5, r2
 800894a:	f012 0203 	ands.w	r2, r2, #3
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	d007      	beq.n	8008964 <__pow5mult+0x20>
 8008954:	4c25      	ldr	r4, [pc, #148]	; (80089ec <__pow5mult+0xa8>)
 8008956:	3a01      	subs	r2, #1
 8008958:	2300      	movs	r3, #0
 800895a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800895e:	f7ff fe9f 	bl	80086a0 <__multadd>
 8008962:	4607      	mov	r7, r0
 8008964:	10ad      	asrs	r5, r5, #2
 8008966:	d03d      	beq.n	80089e4 <__pow5mult+0xa0>
 8008968:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800896a:	b97c      	cbnz	r4, 800898c <__pow5mult+0x48>
 800896c:	2010      	movs	r0, #16
 800896e:	f7ff fe11 	bl	8008594 <malloc>
 8008972:	4602      	mov	r2, r0
 8008974:	6270      	str	r0, [r6, #36]	; 0x24
 8008976:	b928      	cbnz	r0, 8008984 <__pow5mult+0x40>
 8008978:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800897c:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <__pow5mult+0xac>)
 800897e:	481d      	ldr	r0, [pc, #116]	; (80089f4 <__pow5mult+0xb0>)
 8008980:	f000 fc0a 	bl	8009198 <__assert_func>
 8008984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008988:	6004      	str	r4, [r0, #0]
 800898a:	60c4      	str	r4, [r0, #12]
 800898c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008994:	b94c      	cbnz	r4, 80089aa <__pow5mult+0x66>
 8008996:	f240 2171 	movw	r1, #625	; 0x271
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff ff14 	bl	80087c8 <__i2b>
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	f04f 0900 	mov.w	r9, #0
 80089ae:	07eb      	lsls	r3, r5, #31
 80089b0:	d50a      	bpl.n	80089c8 <__pow5mult+0x84>
 80089b2:	4639      	mov	r1, r7
 80089b4:	4622      	mov	r2, r4
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff ff1c 	bl	80087f4 <__multiply>
 80089bc:	4680      	mov	r8, r0
 80089be:	4639      	mov	r1, r7
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff fe4b 	bl	800865c <_Bfree>
 80089c6:	4647      	mov	r7, r8
 80089c8:	106d      	asrs	r5, r5, #1
 80089ca:	d00b      	beq.n	80089e4 <__pow5mult+0xa0>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	b938      	cbnz	r0, 80089e0 <__pow5mult+0x9c>
 80089d0:	4622      	mov	r2, r4
 80089d2:	4621      	mov	r1, r4
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff ff0d 	bl	80087f4 <__multiply>
 80089da:	6020      	str	r0, [r4, #0]
 80089dc:	f8c0 9000 	str.w	r9, [r0]
 80089e0:	4604      	mov	r4, r0
 80089e2:	e7e4      	b.n	80089ae <__pow5mult+0x6a>
 80089e4:	4638      	mov	r0, r7
 80089e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ea:	bf00      	nop
 80089ec:	0800bdb8 	.word	0x0800bdb8
 80089f0:	0800bbe9 	.word	0x0800bbe9
 80089f4:	0800bc6c 	.word	0x0800bc6c

080089f8 <__lshift>:
 80089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089fc:	460c      	mov	r4, r1
 80089fe:	4607      	mov	r7, r0
 8008a00:	4691      	mov	r9, r2
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	6849      	ldr	r1, [r1, #4]
 8008a06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a10:	f108 0601 	add.w	r6, r8, #1
 8008a14:	42b3      	cmp	r3, r6
 8008a16:	db0b      	blt.n	8008a30 <__lshift+0x38>
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7ff fddf 	bl	80085dc <_Balloc>
 8008a1e:	4605      	mov	r5, r0
 8008a20:	b948      	cbnz	r0, 8008a36 <__lshift+0x3e>
 8008a22:	4602      	mov	r2, r0
 8008a24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a28:	4b29      	ldr	r3, [pc, #164]	; (8008ad0 <__lshift+0xd8>)
 8008a2a:	482a      	ldr	r0, [pc, #168]	; (8008ad4 <__lshift+0xdc>)
 8008a2c:	f000 fbb4 	bl	8009198 <__assert_func>
 8008a30:	3101      	adds	r1, #1
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	e7ee      	b.n	8008a14 <__lshift+0x1c>
 8008a36:	2300      	movs	r3, #0
 8008a38:	f100 0114 	add.w	r1, r0, #20
 8008a3c:	f100 0210 	add.w	r2, r0, #16
 8008a40:	4618      	mov	r0, r3
 8008a42:	4553      	cmp	r3, sl
 8008a44:	db37      	blt.n	8008ab6 <__lshift+0xbe>
 8008a46:	6920      	ldr	r0, [r4, #16]
 8008a48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a4c:	f104 0314 	add.w	r3, r4, #20
 8008a50:	f019 091f 	ands.w	r9, r9, #31
 8008a54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a5c:	d02f      	beq.n	8008abe <__lshift+0xc6>
 8008a5e:	468a      	mov	sl, r1
 8008a60:	f04f 0c00 	mov.w	ip, #0
 8008a64:	f1c9 0e20 	rsb	lr, r9, #32
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	fa02 f209 	lsl.w	r2, r2, r9
 8008a6e:	ea42 020c 	orr.w	r2, r2, ip
 8008a72:	f84a 2b04 	str.w	r2, [sl], #4
 8008a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a80:	d8f2      	bhi.n	8008a68 <__lshift+0x70>
 8008a82:	1b03      	subs	r3, r0, r4
 8008a84:	3b15      	subs	r3, #21
 8008a86:	f023 0303 	bic.w	r3, r3, #3
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	f104 0215 	add.w	r2, r4, #21
 8008a90:	4290      	cmp	r0, r2
 8008a92:	bf38      	it	cc
 8008a94:	2304      	movcc	r3, #4
 8008a96:	f841 c003 	str.w	ip, [r1, r3]
 8008a9a:	f1bc 0f00 	cmp.w	ip, #0
 8008a9e:	d001      	beq.n	8008aa4 <__lshift+0xac>
 8008aa0:	f108 0602 	add.w	r6, r8, #2
 8008aa4:	3e01      	subs	r6, #1
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	612e      	str	r6, [r5, #16]
 8008aac:	f7ff fdd6 	bl	800865c <_Bfree>
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aba:	3301      	adds	r3, #1
 8008abc:	e7c1      	b.n	8008a42 <__lshift+0x4a>
 8008abe:	3904      	subs	r1, #4
 8008ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac4:	4298      	cmp	r0, r3
 8008ac6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008aca:	d8f9      	bhi.n	8008ac0 <__lshift+0xc8>
 8008acc:	e7ea      	b.n	8008aa4 <__lshift+0xac>
 8008ace:	bf00      	nop
 8008ad0:	0800bc5b 	.word	0x0800bc5b
 8008ad4:	0800bc6c 	.word	0x0800bc6c

08008ad8 <__mcmp>:
 8008ad8:	4603      	mov	r3, r0
 8008ada:	690a      	ldr	r2, [r1, #16]
 8008adc:	6900      	ldr	r0, [r0, #16]
 8008ade:	b530      	push	{r4, r5, lr}
 8008ae0:	1a80      	subs	r0, r0, r2
 8008ae2:	d10d      	bne.n	8008b00 <__mcmp+0x28>
 8008ae4:	3314      	adds	r3, #20
 8008ae6:	3114      	adds	r1, #20
 8008ae8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008aec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008af0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008af4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008af8:	4295      	cmp	r5, r2
 8008afa:	d002      	beq.n	8008b02 <__mcmp+0x2a>
 8008afc:	d304      	bcc.n	8008b08 <__mcmp+0x30>
 8008afe:	2001      	movs	r0, #1
 8008b00:	bd30      	pop	{r4, r5, pc}
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	d3f4      	bcc.n	8008af0 <__mcmp+0x18>
 8008b06:	e7fb      	b.n	8008b00 <__mcmp+0x28>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e7f8      	b.n	8008b00 <__mcmp+0x28>
	...

08008b10 <__mdiff>:
 8008b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	460d      	mov	r5, r1
 8008b16:	4607      	mov	r7, r0
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	4614      	mov	r4, r2
 8008b1e:	f7ff ffdb 	bl	8008ad8 <__mcmp>
 8008b22:	1e06      	subs	r6, r0, #0
 8008b24:	d111      	bne.n	8008b4a <__mdiff+0x3a>
 8008b26:	4631      	mov	r1, r6
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f7ff fd57 	bl	80085dc <_Balloc>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	b928      	cbnz	r0, 8008b3e <__mdiff+0x2e>
 8008b32:	f240 2132 	movw	r1, #562	; 0x232
 8008b36:	4b3a      	ldr	r3, [pc, #232]	; (8008c20 <__mdiff+0x110>)
 8008b38:	483a      	ldr	r0, [pc, #232]	; (8008c24 <__mdiff+0x114>)
 8008b3a:	f000 fb2d 	bl	8009198 <__assert_func>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b44:	4610      	mov	r0, r2
 8008b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	bfa4      	itt	ge
 8008b4c:	4623      	movge	r3, r4
 8008b4e:	462c      	movge	r4, r5
 8008b50:	4638      	mov	r0, r7
 8008b52:	6861      	ldr	r1, [r4, #4]
 8008b54:	bfa6      	itte	ge
 8008b56:	461d      	movge	r5, r3
 8008b58:	2600      	movge	r6, #0
 8008b5a:	2601      	movlt	r6, #1
 8008b5c:	f7ff fd3e 	bl	80085dc <_Balloc>
 8008b60:	4602      	mov	r2, r0
 8008b62:	b918      	cbnz	r0, 8008b6c <__mdiff+0x5c>
 8008b64:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b68:	4b2d      	ldr	r3, [pc, #180]	; (8008c20 <__mdiff+0x110>)
 8008b6a:	e7e5      	b.n	8008b38 <__mdiff+0x28>
 8008b6c:	f102 0814 	add.w	r8, r2, #20
 8008b70:	46c2      	mov	sl, r8
 8008b72:	f04f 0c00 	mov.w	ip, #0
 8008b76:	6927      	ldr	r7, [r4, #16]
 8008b78:	60c6      	str	r6, [r0, #12]
 8008b7a:	692e      	ldr	r6, [r5, #16]
 8008b7c:	f104 0014 	add.w	r0, r4, #20
 8008b80:	f105 0914 	add.w	r9, r5, #20
 8008b84:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008b88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b8c:	3410      	adds	r4, #16
 8008b8e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008b92:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b96:	fa1f f18b 	uxth.w	r1, fp
 8008b9a:	448c      	add	ip, r1
 8008b9c:	b299      	uxth	r1, r3
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	ebac 0101 	sub.w	r1, ip, r1
 8008ba4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ba8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008bac:	b289      	uxth	r1, r1
 8008bae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008bb2:	454e      	cmp	r6, r9
 8008bb4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008bb8:	f84a 3b04 	str.w	r3, [sl], #4
 8008bbc:	d8e7      	bhi.n	8008b8e <__mdiff+0x7e>
 8008bbe:	1b73      	subs	r3, r6, r5
 8008bc0:	3b15      	subs	r3, #21
 8008bc2:	f023 0303 	bic.w	r3, r3, #3
 8008bc6:	3515      	adds	r5, #21
 8008bc8:	3304      	adds	r3, #4
 8008bca:	42ae      	cmp	r6, r5
 8008bcc:	bf38      	it	cc
 8008bce:	2304      	movcc	r3, #4
 8008bd0:	4418      	add	r0, r3
 8008bd2:	4443      	add	r3, r8
 8008bd4:	461e      	mov	r6, r3
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4575      	cmp	r5, lr
 8008bda:	d30e      	bcc.n	8008bfa <__mdiff+0xea>
 8008bdc:	f10e 0103 	add.w	r1, lr, #3
 8008be0:	1a09      	subs	r1, r1, r0
 8008be2:	f021 0103 	bic.w	r1, r1, #3
 8008be6:	3803      	subs	r0, #3
 8008be8:	4586      	cmp	lr, r0
 8008bea:	bf38      	it	cc
 8008bec:	2100      	movcc	r1, #0
 8008bee:	4419      	add	r1, r3
 8008bf0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008bf4:	b18b      	cbz	r3, 8008c1a <__mdiff+0x10a>
 8008bf6:	6117      	str	r7, [r2, #16]
 8008bf8:	e7a4      	b.n	8008b44 <__mdiff+0x34>
 8008bfa:	f855 8b04 	ldr.w	r8, [r5], #4
 8008bfe:	fa1f f188 	uxth.w	r1, r8
 8008c02:	4461      	add	r1, ip
 8008c04:	140c      	asrs	r4, r1, #16
 8008c06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c0a:	b289      	uxth	r1, r1
 8008c0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c10:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008c14:	f846 1b04 	str.w	r1, [r6], #4
 8008c18:	e7de      	b.n	8008bd8 <__mdiff+0xc8>
 8008c1a:	3f01      	subs	r7, #1
 8008c1c:	e7e8      	b.n	8008bf0 <__mdiff+0xe0>
 8008c1e:	bf00      	nop
 8008c20:	0800bc5b 	.word	0x0800bc5b
 8008c24:	0800bc6c 	.word	0x0800bc6c

08008c28 <__d2b>:
 8008c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008c32:	4690      	mov	r8, r2
 8008c34:	461d      	mov	r5, r3
 8008c36:	f7ff fcd1 	bl	80085dc <_Balloc>
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	b930      	cbnz	r0, 8008c4c <__d2b+0x24>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	f240 310a 	movw	r1, #778	; 0x30a
 8008c44:	4b24      	ldr	r3, [pc, #144]	; (8008cd8 <__d2b+0xb0>)
 8008c46:	4825      	ldr	r0, [pc, #148]	; (8008cdc <__d2b+0xb4>)
 8008c48:	f000 faa6 	bl	8009198 <__assert_func>
 8008c4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008c50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008c54:	bb2d      	cbnz	r5, 8008ca2 <__d2b+0x7a>
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	f1b8 0300 	subs.w	r3, r8, #0
 8008c5c:	d026      	beq.n	8008cac <__d2b+0x84>
 8008c5e:	4668      	mov	r0, sp
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	f7ff fd83 	bl	800876c <__lo0bits>
 8008c66:	9900      	ldr	r1, [sp, #0]
 8008c68:	b1f0      	cbz	r0, 8008ca8 <__d2b+0x80>
 8008c6a:	9a01      	ldr	r2, [sp, #4]
 8008c6c:	f1c0 0320 	rsb	r3, r0, #32
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	430b      	orrs	r3, r1
 8008c76:	40c2      	lsrs	r2, r0
 8008c78:	6163      	str	r3, [r4, #20]
 8008c7a:	9201      	str	r2, [sp, #4]
 8008c7c:	9b01      	ldr	r3, [sp, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bf14      	ite	ne
 8008c82:	2102      	movne	r1, #2
 8008c84:	2101      	moveq	r1, #1
 8008c86:	61a3      	str	r3, [r4, #24]
 8008c88:	6121      	str	r1, [r4, #16]
 8008c8a:	b1c5      	cbz	r5, 8008cbe <__d2b+0x96>
 8008c8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c90:	4405      	add	r5, r0
 8008c92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c96:	603d      	str	r5, [r7, #0]
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	b002      	add	sp, #8
 8008c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ca6:	e7d6      	b.n	8008c56 <__d2b+0x2e>
 8008ca8:	6161      	str	r1, [r4, #20]
 8008caa:	e7e7      	b.n	8008c7c <__d2b+0x54>
 8008cac:	a801      	add	r0, sp, #4
 8008cae:	f7ff fd5d 	bl	800876c <__lo0bits>
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	6121      	str	r1, [r4, #16]
 8008cb8:	6163      	str	r3, [r4, #20]
 8008cba:	3020      	adds	r0, #32
 8008cbc:	e7e5      	b.n	8008c8a <__d2b+0x62>
 8008cbe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008cc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cc6:	6038      	str	r0, [r7, #0]
 8008cc8:	6918      	ldr	r0, [r3, #16]
 8008cca:	f7ff fd2f 	bl	800872c <__hi0bits>
 8008cce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008cd2:	6031      	str	r1, [r6, #0]
 8008cd4:	e7e1      	b.n	8008c9a <__d2b+0x72>
 8008cd6:	bf00      	nop
 8008cd8:	0800bc5b 	.word	0x0800bc5b
 8008cdc:	0800bc6c 	.word	0x0800bc6c

08008ce0 <_calloc_r>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	fba1 5402 	umull	r5, r4, r1, r2
 8008ce6:	b934      	cbnz	r4, 8008cf6 <_calloc_r+0x16>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f000 f875 	bl	8008dd8 <_malloc_r>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	b928      	cbnz	r0, 8008cfe <_calloc_r+0x1e>
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	220c      	movs	r2, #12
 8008cf8:	2600      	movs	r6, #0
 8008cfa:	6002      	str	r2, [r0, #0]
 8008cfc:	e7f9      	b.n	8008cf2 <_calloc_r+0x12>
 8008cfe:	462a      	mov	r2, r5
 8008d00:	4621      	mov	r1, r4
 8008d02:	f7fe f941 	bl	8006f88 <memset>
 8008d06:	e7f4      	b.n	8008cf2 <_calloc_r+0x12>

08008d08 <_free_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	d040      	beq.n	8008d92 <_free_r+0x8a>
 8008d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d14:	1f0c      	subs	r4, r1, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfb8      	it	lt
 8008d1a:	18e4      	addlt	r4, r4, r3
 8008d1c:	f000 fa98 	bl	8009250 <__malloc_lock>
 8008d20:	4a1c      	ldr	r2, [pc, #112]	; (8008d94 <_free_r+0x8c>)
 8008d22:	6813      	ldr	r3, [r2, #0]
 8008d24:	b933      	cbnz	r3, 8008d34 <_free_r+0x2c>
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	6014      	str	r4, [r2, #0]
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d30:	f000 ba94 	b.w	800925c <__malloc_unlock>
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	d908      	bls.n	8008d4a <_free_r+0x42>
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	1821      	adds	r1, r4, r0
 8008d3c:	428b      	cmp	r3, r1
 8008d3e:	bf01      	itttt	eq
 8008d40:	6819      	ldreq	r1, [r3, #0]
 8008d42:	685b      	ldreq	r3, [r3, #4]
 8008d44:	1809      	addeq	r1, r1, r0
 8008d46:	6021      	streq	r1, [r4, #0]
 8008d48:	e7ed      	b.n	8008d26 <_free_r+0x1e>
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b10b      	cbz	r3, 8008d54 <_free_r+0x4c>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d9fa      	bls.n	8008d4a <_free_r+0x42>
 8008d54:	6811      	ldr	r1, [r2, #0]
 8008d56:	1850      	adds	r0, r2, r1
 8008d58:	42a0      	cmp	r0, r4
 8008d5a:	d10b      	bne.n	8008d74 <_free_r+0x6c>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	4401      	add	r1, r0
 8008d60:	1850      	adds	r0, r2, r1
 8008d62:	4283      	cmp	r3, r0
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	d1e0      	bne.n	8008d2a <_free_r+0x22>
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	4401      	add	r1, r0
 8008d6e:	6011      	str	r1, [r2, #0]
 8008d70:	6053      	str	r3, [r2, #4]
 8008d72:	e7da      	b.n	8008d2a <_free_r+0x22>
 8008d74:	d902      	bls.n	8008d7c <_free_r+0x74>
 8008d76:	230c      	movs	r3, #12
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	e7d6      	b.n	8008d2a <_free_r+0x22>
 8008d7c:	6820      	ldr	r0, [r4, #0]
 8008d7e:	1821      	adds	r1, r4, r0
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf01      	itttt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	1809      	addeq	r1, r1, r0
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	6063      	str	r3, [r4, #4]
 8008d8e:	6054      	str	r4, [r2, #4]
 8008d90:	e7cb      	b.n	8008d2a <_free_r+0x22>
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	2000066c 	.word	0x2000066c

08008d98 <sbrk_aligned>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4e0e      	ldr	r6, [pc, #56]	; (8008dd4 <sbrk_aligned+0x3c>)
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	6831      	ldr	r1, [r6, #0]
 8008da0:	4605      	mov	r5, r0
 8008da2:	b911      	cbnz	r1, 8008daa <sbrk_aligned+0x12>
 8008da4:	f000 f9e8 	bl	8009178 <_sbrk_r>
 8008da8:	6030      	str	r0, [r6, #0]
 8008daa:	4621      	mov	r1, r4
 8008dac:	4628      	mov	r0, r5
 8008dae:	f000 f9e3 	bl	8009178 <_sbrk_r>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	d00a      	beq.n	8008dcc <sbrk_aligned+0x34>
 8008db6:	1cc4      	adds	r4, r0, #3
 8008db8:	f024 0403 	bic.w	r4, r4, #3
 8008dbc:	42a0      	cmp	r0, r4
 8008dbe:	d007      	beq.n	8008dd0 <sbrk_aligned+0x38>
 8008dc0:	1a21      	subs	r1, r4, r0
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f000 f9d8 	bl	8009178 <_sbrk_r>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d101      	bne.n	8008dd0 <sbrk_aligned+0x38>
 8008dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}
 8008dd4:	20000670 	.word	0x20000670

08008dd8 <_malloc_r>:
 8008dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ddc:	1ccd      	adds	r5, r1, #3
 8008dde:	f025 0503 	bic.w	r5, r5, #3
 8008de2:	3508      	adds	r5, #8
 8008de4:	2d0c      	cmp	r5, #12
 8008de6:	bf38      	it	cc
 8008de8:	250c      	movcc	r5, #12
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	4607      	mov	r7, r0
 8008dee:	db01      	blt.n	8008df4 <_malloc_r+0x1c>
 8008df0:	42a9      	cmp	r1, r5
 8008df2:	d905      	bls.n	8008e00 <_malloc_r+0x28>
 8008df4:	230c      	movs	r3, #12
 8008df6:	2600      	movs	r6, #0
 8008df8:	603b      	str	r3, [r7, #0]
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e00:	4e2e      	ldr	r6, [pc, #184]	; (8008ebc <_malloc_r+0xe4>)
 8008e02:	f000 fa25 	bl	8009250 <__malloc_lock>
 8008e06:	6833      	ldr	r3, [r6, #0]
 8008e08:	461c      	mov	r4, r3
 8008e0a:	bb34      	cbnz	r4, 8008e5a <_malloc_r+0x82>
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	4638      	mov	r0, r7
 8008e10:	f7ff ffc2 	bl	8008d98 <sbrk_aligned>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	4604      	mov	r4, r0
 8008e18:	d14d      	bne.n	8008eb6 <_malloc_r+0xde>
 8008e1a:	6834      	ldr	r4, [r6, #0]
 8008e1c:	4626      	mov	r6, r4
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	d140      	bne.n	8008ea4 <_malloc_r+0xcc>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	4631      	mov	r1, r6
 8008e26:	4638      	mov	r0, r7
 8008e28:	eb04 0803 	add.w	r8, r4, r3
 8008e2c:	f000 f9a4 	bl	8009178 <_sbrk_r>
 8008e30:	4580      	cmp	r8, r0
 8008e32:	d13a      	bne.n	8008eaa <_malloc_r+0xd2>
 8008e34:	6821      	ldr	r1, [r4, #0]
 8008e36:	3503      	adds	r5, #3
 8008e38:	1a6d      	subs	r5, r5, r1
 8008e3a:	f025 0503 	bic.w	r5, r5, #3
 8008e3e:	3508      	adds	r5, #8
 8008e40:	2d0c      	cmp	r5, #12
 8008e42:	bf38      	it	cc
 8008e44:	250c      	movcc	r5, #12
 8008e46:	4638      	mov	r0, r7
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7ff ffa5 	bl	8008d98 <sbrk_aligned>
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d02b      	beq.n	8008eaa <_malloc_r+0xd2>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	442b      	add	r3, r5
 8008e56:	6023      	str	r3, [r4, #0]
 8008e58:	e00e      	b.n	8008e78 <_malloc_r+0xa0>
 8008e5a:	6822      	ldr	r2, [r4, #0]
 8008e5c:	1b52      	subs	r2, r2, r5
 8008e5e:	d41e      	bmi.n	8008e9e <_malloc_r+0xc6>
 8008e60:	2a0b      	cmp	r2, #11
 8008e62:	d916      	bls.n	8008e92 <_malloc_r+0xba>
 8008e64:	1961      	adds	r1, r4, r5
 8008e66:	42a3      	cmp	r3, r4
 8008e68:	6025      	str	r5, [r4, #0]
 8008e6a:	bf18      	it	ne
 8008e6c:	6059      	strne	r1, [r3, #4]
 8008e6e:	6863      	ldr	r3, [r4, #4]
 8008e70:	bf08      	it	eq
 8008e72:	6031      	streq	r1, [r6, #0]
 8008e74:	5162      	str	r2, [r4, r5]
 8008e76:	604b      	str	r3, [r1, #4]
 8008e78:	4638      	mov	r0, r7
 8008e7a:	f104 060b 	add.w	r6, r4, #11
 8008e7e:	f000 f9ed 	bl	800925c <__malloc_unlock>
 8008e82:	f026 0607 	bic.w	r6, r6, #7
 8008e86:	1d23      	adds	r3, r4, #4
 8008e88:	1af2      	subs	r2, r6, r3
 8008e8a:	d0b6      	beq.n	8008dfa <_malloc_r+0x22>
 8008e8c:	1b9b      	subs	r3, r3, r6
 8008e8e:	50a3      	str	r3, [r4, r2]
 8008e90:	e7b3      	b.n	8008dfa <_malloc_r+0x22>
 8008e92:	6862      	ldr	r2, [r4, #4]
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	bf0c      	ite	eq
 8008e98:	6032      	streq	r2, [r6, #0]
 8008e9a:	605a      	strne	r2, [r3, #4]
 8008e9c:	e7ec      	b.n	8008e78 <_malloc_r+0xa0>
 8008e9e:	4623      	mov	r3, r4
 8008ea0:	6864      	ldr	r4, [r4, #4]
 8008ea2:	e7b2      	b.n	8008e0a <_malloc_r+0x32>
 8008ea4:	4634      	mov	r4, r6
 8008ea6:	6876      	ldr	r6, [r6, #4]
 8008ea8:	e7b9      	b.n	8008e1e <_malloc_r+0x46>
 8008eaa:	230c      	movs	r3, #12
 8008eac:	4638      	mov	r0, r7
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	f000 f9d4 	bl	800925c <__malloc_unlock>
 8008eb4:	e7a1      	b.n	8008dfa <_malloc_r+0x22>
 8008eb6:	6025      	str	r5, [r4, #0]
 8008eb8:	e7de      	b.n	8008e78 <_malloc_r+0xa0>
 8008eba:	bf00      	nop
 8008ebc:	2000066c 	.word	0x2000066c

08008ec0 <__ssputs_r>:
 8008ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	688e      	ldr	r6, [r1, #8]
 8008ec6:	4682      	mov	sl, r0
 8008ec8:	429e      	cmp	r6, r3
 8008eca:	460c      	mov	r4, r1
 8008ecc:	4690      	mov	r8, r2
 8008ece:	461f      	mov	r7, r3
 8008ed0:	d838      	bhi.n	8008f44 <__ssputs_r+0x84>
 8008ed2:	898a      	ldrh	r2, [r1, #12]
 8008ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ed8:	d032      	beq.n	8008f40 <__ssputs_r+0x80>
 8008eda:	6825      	ldr	r5, [r4, #0]
 8008edc:	6909      	ldr	r1, [r1, #16]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	eba5 0901 	sub.w	r9, r5, r1
 8008ee4:	6965      	ldr	r5, [r4, #20]
 8008ee6:	444b      	add	r3, r9
 8008ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ef0:	106d      	asrs	r5, r5, #1
 8008ef2:	429d      	cmp	r5, r3
 8008ef4:	bf38      	it	cc
 8008ef6:	461d      	movcc	r5, r3
 8008ef8:	0553      	lsls	r3, r2, #21
 8008efa:	d531      	bpl.n	8008f60 <__ssputs_r+0xa0>
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7ff ff6b 	bl	8008dd8 <_malloc_r>
 8008f02:	4606      	mov	r6, r0
 8008f04:	b950      	cbnz	r0, 8008f1c <__ssputs_r+0x5c>
 8008f06:	230c      	movs	r3, #12
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	f8ca 3000 	str.w	r3, [sl]
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1c:	464a      	mov	r2, r9
 8008f1e:	6921      	ldr	r1, [r4, #16]
 8008f20:	f7ff fb4e 	bl	80085c0 <memcpy>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	6126      	str	r6, [r4, #16]
 8008f32:	444e      	add	r6, r9
 8008f34:	6026      	str	r6, [r4, #0]
 8008f36:	463e      	mov	r6, r7
 8008f38:	6165      	str	r5, [r4, #20]
 8008f3a:	eba5 0509 	sub.w	r5, r5, r9
 8008f3e:	60a5      	str	r5, [r4, #8]
 8008f40:	42be      	cmp	r6, r7
 8008f42:	d900      	bls.n	8008f46 <__ssputs_r+0x86>
 8008f44:	463e      	mov	r6, r7
 8008f46:	4632      	mov	r2, r6
 8008f48:	4641      	mov	r1, r8
 8008f4a:	6820      	ldr	r0, [r4, #0]
 8008f4c:	f000 f966 	bl	800921c <memmove>
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	2000      	movs	r0, #0
 8008f54:	1b9b      	subs	r3, r3, r6
 8008f56:	60a3      	str	r3, [r4, #8]
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	4433      	add	r3, r6
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	e7db      	b.n	8008f18 <__ssputs_r+0x58>
 8008f60:	462a      	mov	r2, r5
 8008f62:	f000 f981 	bl	8009268 <_realloc_r>
 8008f66:	4606      	mov	r6, r0
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d1e1      	bne.n	8008f30 <__ssputs_r+0x70>
 8008f6c:	4650      	mov	r0, sl
 8008f6e:	6921      	ldr	r1, [r4, #16]
 8008f70:	f7ff feca 	bl	8008d08 <_free_r>
 8008f74:	e7c7      	b.n	8008f06 <__ssputs_r+0x46>
	...

08008f78 <_svfiprintf_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	4698      	mov	r8, r3
 8008f7e:	898b      	ldrh	r3, [r1, #12]
 8008f80:	4607      	mov	r7, r0
 8008f82:	061b      	lsls	r3, r3, #24
 8008f84:	460d      	mov	r5, r1
 8008f86:	4614      	mov	r4, r2
 8008f88:	b09d      	sub	sp, #116	; 0x74
 8008f8a:	d50e      	bpl.n	8008faa <_svfiprintf_r+0x32>
 8008f8c:	690b      	ldr	r3, [r1, #16]
 8008f8e:	b963      	cbnz	r3, 8008faa <_svfiprintf_r+0x32>
 8008f90:	2140      	movs	r1, #64	; 0x40
 8008f92:	f7ff ff21 	bl	8008dd8 <_malloc_r>
 8008f96:	6028      	str	r0, [r5, #0]
 8008f98:	6128      	str	r0, [r5, #16]
 8008f9a:	b920      	cbnz	r0, 8008fa6 <_svfiprintf_r+0x2e>
 8008f9c:	230c      	movs	r3, #12
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	e0d1      	b.n	800914a <_svfiprintf_r+0x1d2>
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	616b      	str	r3, [r5, #20]
 8008faa:	2300      	movs	r3, #0
 8008fac:	9309      	str	r3, [sp, #36]	; 0x24
 8008fae:	2320      	movs	r3, #32
 8008fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fb4:	2330      	movs	r3, #48	; 0x30
 8008fb6:	f04f 0901 	mov.w	r9, #1
 8008fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009164 <_svfiprintf_r+0x1ec>
 8008fc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	469a      	mov	sl, r3
 8008fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fce:	b10a      	cbz	r2, 8008fd4 <_svfiprintf_r+0x5c>
 8008fd0:	2a25      	cmp	r2, #37	; 0x25
 8008fd2:	d1f9      	bne.n	8008fc8 <_svfiprintf_r+0x50>
 8008fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fd8:	d00b      	beq.n	8008ff2 <_svfiprintf_r+0x7a>
 8008fda:	465b      	mov	r3, fp
 8008fdc:	4622      	mov	r2, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f7ff ff6d 	bl	8008ec0 <__ssputs_r>
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	f000 80aa 	beq.w	8009140 <_svfiprintf_r+0x1c8>
 8008fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fee:	445a      	add	r2, fp
 8008ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 80a2 	beq.w	8009140 <_svfiprintf_r+0x1c8>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8009002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009006:	f10a 0a01 	add.w	sl, sl, #1
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	9307      	str	r3, [sp, #28]
 800900e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009012:	931a      	str	r3, [sp, #104]	; 0x68
 8009014:	4654      	mov	r4, sl
 8009016:	2205      	movs	r2, #5
 8009018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901c:	4851      	ldr	r0, [pc, #324]	; (8009164 <_svfiprintf_r+0x1ec>)
 800901e:	f7ff fac1 	bl	80085a4 <memchr>
 8009022:	9a04      	ldr	r2, [sp, #16]
 8009024:	b9d8      	cbnz	r0, 800905e <_svfiprintf_r+0xe6>
 8009026:	06d0      	lsls	r0, r2, #27
 8009028:	bf44      	itt	mi
 800902a:	2320      	movmi	r3, #32
 800902c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009030:	0711      	lsls	r1, r2, #28
 8009032:	bf44      	itt	mi
 8009034:	232b      	movmi	r3, #43	; 0x2b
 8009036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800903a:	f89a 3000 	ldrb.w	r3, [sl]
 800903e:	2b2a      	cmp	r3, #42	; 0x2a
 8009040:	d015      	beq.n	800906e <_svfiprintf_r+0xf6>
 8009042:	4654      	mov	r4, sl
 8009044:	2000      	movs	r0, #0
 8009046:	f04f 0c0a 	mov.w	ip, #10
 800904a:	9a07      	ldr	r2, [sp, #28]
 800904c:	4621      	mov	r1, r4
 800904e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009052:	3b30      	subs	r3, #48	; 0x30
 8009054:	2b09      	cmp	r3, #9
 8009056:	d94e      	bls.n	80090f6 <_svfiprintf_r+0x17e>
 8009058:	b1b0      	cbz	r0, 8009088 <_svfiprintf_r+0x110>
 800905a:	9207      	str	r2, [sp, #28]
 800905c:	e014      	b.n	8009088 <_svfiprintf_r+0x110>
 800905e:	eba0 0308 	sub.w	r3, r0, r8
 8009062:	fa09 f303 	lsl.w	r3, r9, r3
 8009066:	4313      	orrs	r3, r2
 8009068:	46a2      	mov	sl, r4
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	e7d2      	b.n	8009014 <_svfiprintf_r+0x9c>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	1d19      	adds	r1, r3, #4
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	9103      	str	r1, [sp, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfbb      	ittet	lt
 800907a:	425b      	neglt	r3, r3
 800907c:	f042 0202 	orrlt.w	r2, r2, #2
 8009080:	9307      	strge	r3, [sp, #28]
 8009082:	9307      	strlt	r3, [sp, #28]
 8009084:	bfb8      	it	lt
 8009086:	9204      	strlt	r2, [sp, #16]
 8009088:	7823      	ldrb	r3, [r4, #0]
 800908a:	2b2e      	cmp	r3, #46	; 0x2e
 800908c:	d10c      	bne.n	80090a8 <_svfiprintf_r+0x130>
 800908e:	7863      	ldrb	r3, [r4, #1]
 8009090:	2b2a      	cmp	r3, #42	; 0x2a
 8009092:	d135      	bne.n	8009100 <_svfiprintf_r+0x188>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	3402      	adds	r4, #2
 8009098:	1d1a      	adds	r2, r3, #4
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	9203      	str	r2, [sp, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bfb8      	it	lt
 80090a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009168 <_svfiprintf_r+0x1f0>
 80090ac:	2203      	movs	r2, #3
 80090ae:	4650      	mov	r0, sl
 80090b0:	7821      	ldrb	r1, [r4, #0]
 80090b2:	f7ff fa77 	bl	80085a4 <memchr>
 80090b6:	b140      	cbz	r0, 80090ca <_svfiprintf_r+0x152>
 80090b8:	2340      	movs	r3, #64	; 0x40
 80090ba:	eba0 000a 	sub.w	r0, r0, sl
 80090be:	fa03 f000 	lsl.w	r0, r3, r0
 80090c2:	9b04      	ldr	r3, [sp, #16]
 80090c4:	3401      	adds	r4, #1
 80090c6:	4303      	orrs	r3, r0
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ce:	2206      	movs	r2, #6
 80090d0:	4826      	ldr	r0, [pc, #152]	; (800916c <_svfiprintf_r+0x1f4>)
 80090d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090d6:	f7ff fa65 	bl	80085a4 <memchr>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d038      	beq.n	8009150 <_svfiprintf_r+0x1d8>
 80090de:	4b24      	ldr	r3, [pc, #144]	; (8009170 <_svfiprintf_r+0x1f8>)
 80090e0:	bb1b      	cbnz	r3, 800912a <_svfiprintf_r+0x1b2>
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	3307      	adds	r3, #7
 80090e6:	f023 0307 	bic.w	r3, r3, #7
 80090ea:	3308      	adds	r3, #8
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f0:	4433      	add	r3, r6
 80090f2:	9309      	str	r3, [sp, #36]	; 0x24
 80090f4:	e767      	b.n	8008fc6 <_svfiprintf_r+0x4e>
 80090f6:	460c      	mov	r4, r1
 80090f8:	2001      	movs	r0, #1
 80090fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80090fe:	e7a5      	b.n	800904c <_svfiprintf_r+0xd4>
 8009100:	2300      	movs	r3, #0
 8009102:	f04f 0c0a 	mov.w	ip, #10
 8009106:	4619      	mov	r1, r3
 8009108:	3401      	adds	r4, #1
 800910a:	9305      	str	r3, [sp, #20]
 800910c:	4620      	mov	r0, r4
 800910e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009112:	3a30      	subs	r2, #48	; 0x30
 8009114:	2a09      	cmp	r2, #9
 8009116:	d903      	bls.n	8009120 <_svfiprintf_r+0x1a8>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d0c5      	beq.n	80090a8 <_svfiprintf_r+0x130>
 800911c:	9105      	str	r1, [sp, #20]
 800911e:	e7c3      	b.n	80090a8 <_svfiprintf_r+0x130>
 8009120:	4604      	mov	r4, r0
 8009122:	2301      	movs	r3, #1
 8009124:	fb0c 2101 	mla	r1, ip, r1, r2
 8009128:	e7f0      	b.n	800910c <_svfiprintf_r+0x194>
 800912a:	ab03      	add	r3, sp, #12
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	462a      	mov	r2, r5
 8009130:	4638      	mov	r0, r7
 8009132:	4b10      	ldr	r3, [pc, #64]	; (8009174 <_svfiprintf_r+0x1fc>)
 8009134:	a904      	add	r1, sp, #16
 8009136:	f7fd ffcd 	bl	80070d4 <_printf_float>
 800913a:	1c42      	adds	r2, r0, #1
 800913c:	4606      	mov	r6, r0
 800913e:	d1d6      	bne.n	80090ee <_svfiprintf_r+0x176>
 8009140:	89ab      	ldrh	r3, [r5, #12]
 8009142:	065b      	lsls	r3, r3, #25
 8009144:	f53f af2c 	bmi.w	8008fa0 <_svfiprintf_r+0x28>
 8009148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800914a:	b01d      	add	sp, #116	; 0x74
 800914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009150:	ab03      	add	r3, sp, #12
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	462a      	mov	r2, r5
 8009156:	4638      	mov	r0, r7
 8009158:	4b06      	ldr	r3, [pc, #24]	; (8009174 <_svfiprintf_r+0x1fc>)
 800915a:	a904      	add	r1, sp, #16
 800915c:	f7fe fa56 	bl	800760c <_printf_i>
 8009160:	e7eb      	b.n	800913a <_svfiprintf_r+0x1c2>
 8009162:	bf00      	nop
 8009164:	0800bdc4 	.word	0x0800bdc4
 8009168:	0800bdca 	.word	0x0800bdca
 800916c:	0800bdce 	.word	0x0800bdce
 8009170:	080070d5 	.word	0x080070d5
 8009174:	08008ec1 	.word	0x08008ec1

08009178 <_sbrk_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	2300      	movs	r3, #0
 800917c:	4d05      	ldr	r5, [pc, #20]	; (8009194 <_sbrk_r+0x1c>)
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f9 fc68 	bl	8002a58 <_sbrk>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_sbrk_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_sbrk_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000674 	.word	0x20000674

08009198 <__assert_func>:
 8009198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800919a:	4614      	mov	r4, r2
 800919c:	461a      	mov	r2, r3
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <__assert_func+0x2c>)
 80091a0:	4605      	mov	r5, r0
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68d8      	ldr	r0, [r3, #12]
 80091a6:	b14c      	cbz	r4, 80091bc <__assert_func+0x24>
 80091a8:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <__assert_func+0x30>)
 80091aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091ae:	9100      	str	r1, [sp, #0]
 80091b0:	462b      	mov	r3, r5
 80091b2:	4906      	ldr	r1, [pc, #24]	; (80091cc <__assert_func+0x34>)
 80091b4:	f000 f80e 	bl	80091d4 <fiprintf>
 80091b8:	f000 faaa 	bl	8009710 <abort>
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <__assert_func+0x38>)
 80091be:	461c      	mov	r4, r3
 80091c0:	e7f3      	b.n	80091aa <__assert_func+0x12>
 80091c2:	bf00      	nop
 80091c4:	2000000c 	.word	0x2000000c
 80091c8:	0800bdd5 	.word	0x0800bdd5
 80091cc:	0800bde2 	.word	0x0800bde2
 80091d0:	0800be10 	.word	0x0800be10

080091d4 <fiprintf>:
 80091d4:	b40e      	push	{r1, r2, r3}
 80091d6:	b503      	push	{r0, r1, lr}
 80091d8:	4601      	mov	r1, r0
 80091da:	ab03      	add	r3, sp, #12
 80091dc:	4805      	ldr	r0, [pc, #20]	; (80091f4 <fiprintf+0x20>)
 80091de:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e2:	6800      	ldr	r0, [r0, #0]
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	f000 f895 	bl	8009314 <_vfiprintf_r>
 80091ea:	b002      	add	sp, #8
 80091ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80091f0:	b003      	add	sp, #12
 80091f2:	4770      	bx	lr
 80091f4:	2000000c 	.word	0x2000000c

080091f8 <__ascii_mbtowc>:
 80091f8:	b082      	sub	sp, #8
 80091fa:	b901      	cbnz	r1, 80091fe <__ascii_mbtowc+0x6>
 80091fc:	a901      	add	r1, sp, #4
 80091fe:	b142      	cbz	r2, 8009212 <__ascii_mbtowc+0x1a>
 8009200:	b14b      	cbz	r3, 8009216 <__ascii_mbtowc+0x1e>
 8009202:	7813      	ldrb	r3, [r2, #0]
 8009204:	600b      	str	r3, [r1, #0]
 8009206:	7812      	ldrb	r2, [r2, #0]
 8009208:	1e10      	subs	r0, r2, #0
 800920a:	bf18      	it	ne
 800920c:	2001      	movne	r0, #1
 800920e:	b002      	add	sp, #8
 8009210:	4770      	bx	lr
 8009212:	4610      	mov	r0, r2
 8009214:	e7fb      	b.n	800920e <__ascii_mbtowc+0x16>
 8009216:	f06f 0001 	mvn.w	r0, #1
 800921a:	e7f8      	b.n	800920e <__ascii_mbtowc+0x16>

0800921c <memmove>:
 800921c:	4288      	cmp	r0, r1
 800921e:	b510      	push	{r4, lr}
 8009220:	eb01 0402 	add.w	r4, r1, r2
 8009224:	d902      	bls.n	800922c <memmove+0x10>
 8009226:	4284      	cmp	r4, r0
 8009228:	4623      	mov	r3, r4
 800922a:	d807      	bhi.n	800923c <memmove+0x20>
 800922c:	1e43      	subs	r3, r0, #1
 800922e:	42a1      	cmp	r1, r4
 8009230:	d008      	beq.n	8009244 <memmove+0x28>
 8009232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800923a:	e7f8      	b.n	800922e <memmove+0x12>
 800923c:	4601      	mov	r1, r0
 800923e:	4402      	add	r2, r0
 8009240:	428a      	cmp	r2, r1
 8009242:	d100      	bne.n	8009246 <memmove+0x2a>
 8009244:	bd10      	pop	{r4, pc}
 8009246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800924a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800924e:	e7f7      	b.n	8009240 <memmove+0x24>

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__malloc_lock+0x8>)
 8009252:	f000 bc19 	b.w	8009a88 <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	20000678 	.word	0x20000678

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	; (8009264 <__malloc_unlock+0x8>)
 800925e:	f000 bc14 	b.w	8009a8a <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	20000678 	.word	0x20000678

08009268 <_realloc_r>:
 8009268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926c:	4680      	mov	r8, r0
 800926e:	4614      	mov	r4, r2
 8009270:	460e      	mov	r6, r1
 8009272:	b921      	cbnz	r1, 800927e <_realloc_r+0x16>
 8009274:	4611      	mov	r1, r2
 8009276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	f7ff bdad 	b.w	8008dd8 <_malloc_r>
 800927e:	b92a      	cbnz	r2, 800928c <_realloc_r+0x24>
 8009280:	f7ff fd42 	bl	8008d08 <_free_r>
 8009284:	4625      	mov	r5, r4
 8009286:	4628      	mov	r0, r5
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	f000 fc64 	bl	8009b58 <_malloc_usable_size_r>
 8009290:	4284      	cmp	r4, r0
 8009292:	4607      	mov	r7, r0
 8009294:	d802      	bhi.n	800929c <_realloc_r+0x34>
 8009296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800929a:	d812      	bhi.n	80092c2 <_realloc_r+0x5a>
 800929c:	4621      	mov	r1, r4
 800929e:	4640      	mov	r0, r8
 80092a0:	f7ff fd9a 	bl	8008dd8 <_malloc_r>
 80092a4:	4605      	mov	r5, r0
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d0ed      	beq.n	8009286 <_realloc_r+0x1e>
 80092aa:	42bc      	cmp	r4, r7
 80092ac:	4622      	mov	r2, r4
 80092ae:	4631      	mov	r1, r6
 80092b0:	bf28      	it	cs
 80092b2:	463a      	movcs	r2, r7
 80092b4:	f7ff f984 	bl	80085c0 <memcpy>
 80092b8:	4631      	mov	r1, r6
 80092ba:	4640      	mov	r0, r8
 80092bc:	f7ff fd24 	bl	8008d08 <_free_r>
 80092c0:	e7e1      	b.n	8009286 <_realloc_r+0x1e>
 80092c2:	4635      	mov	r5, r6
 80092c4:	e7df      	b.n	8009286 <_realloc_r+0x1e>

080092c6 <__sfputc_r>:
 80092c6:	6893      	ldr	r3, [r2, #8]
 80092c8:	b410      	push	{r4}
 80092ca:	3b01      	subs	r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	6093      	str	r3, [r2, #8]
 80092d0:	da07      	bge.n	80092e2 <__sfputc_r+0x1c>
 80092d2:	6994      	ldr	r4, [r2, #24]
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	db01      	blt.n	80092dc <__sfputc_r+0x16>
 80092d8:	290a      	cmp	r1, #10
 80092da:	d102      	bne.n	80092e2 <__sfputc_r+0x1c>
 80092dc:	bc10      	pop	{r4}
 80092de:	f000 b949 	b.w	8009574 <__swbuf_r>
 80092e2:	6813      	ldr	r3, [r2, #0]
 80092e4:	1c58      	adds	r0, r3, #1
 80092e6:	6010      	str	r0, [r2, #0]
 80092e8:	7019      	strb	r1, [r3, #0]
 80092ea:	4608      	mov	r0, r1
 80092ec:	bc10      	pop	{r4}
 80092ee:	4770      	bx	lr

080092f0 <__sfputs_r>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	4606      	mov	r6, r0
 80092f4:	460f      	mov	r7, r1
 80092f6:	4614      	mov	r4, r2
 80092f8:	18d5      	adds	r5, r2, r3
 80092fa:	42ac      	cmp	r4, r5
 80092fc:	d101      	bne.n	8009302 <__sfputs_r+0x12>
 80092fe:	2000      	movs	r0, #0
 8009300:	e007      	b.n	8009312 <__sfputs_r+0x22>
 8009302:	463a      	mov	r2, r7
 8009304:	4630      	mov	r0, r6
 8009306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930a:	f7ff ffdc 	bl	80092c6 <__sfputc_r>
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	d1f3      	bne.n	80092fa <__sfputs_r+0xa>
 8009312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009314 <_vfiprintf_r>:
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	460d      	mov	r5, r1
 800931a:	4614      	mov	r4, r2
 800931c:	4698      	mov	r8, r3
 800931e:	4606      	mov	r6, r0
 8009320:	b09d      	sub	sp, #116	; 0x74
 8009322:	b118      	cbz	r0, 800932c <_vfiprintf_r+0x18>
 8009324:	6983      	ldr	r3, [r0, #24]
 8009326:	b90b      	cbnz	r3, 800932c <_vfiprintf_r+0x18>
 8009328:	f000 fb10 	bl	800994c <__sinit>
 800932c:	4b89      	ldr	r3, [pc, #548]	; (8009554 <_vfiprintf_r+0x240>)
 800932e:	429d      	cmp	r5, r3
 8009330:	d11b      	bne.n	800936a <_vfiprintf_r+0x56>
 8009332:	6875      	ldr	r5, [r6, #4]
 8009334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d405      	bmi.n	8009346 <_vfiprintf_r+0x32>
 800933a:	89ab      	ldrh	r3, [r5, #12]
 800933c:	059a      	lsls	r2, r3, #22
 800933e:	d402      	bmi.n	8009346 <_vfiprintf_r+0x32>
 8009340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009342:	f000 fba1 	bl	8009a88 <__retarget_lock_acquire_recursive>
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	071b      	lsls	r3, r3, #28
 800934a:	d501      	bpl.n	8009350 <_vfiprintf_r+0x3c>
 800934c:	692b      	ldr	r3, [r5, #16]
 800934e:	b9eb      	cbnz	r3, 800938c <_vfiprintf_r+0x78>
 8009350:	4629      	mov	r1, r5
 8009352:	4630      	mov	r0, r6
 8009354:	f000 f96e 	bl	8009634 <__swsetup_r>
 8009358:	b1c0      	cbz	r0, 800938c <_vfiprintf_r+0x78>
 800935a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800935c:	07dc      	lsls	r4, r3, #31
 800935e:	d50e      	bpl.n	800937e <_vfiprintf_r+0x6a>
 8009360:	f04f 30ff 	mov.w	r0, #4294967295
 8009364:	b01d      	add	sp, #116	; 0x74
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	4b7b      	ldr	r3, [pc, #492]	; (8009558 <_vfiprintf_r+0x244>)
 800936c:	429d      	cmp	r5, r3
 800936e:	d101      	bne.n	8009374 <_vfiprintf_r+0x60>
 8009370:	68b5      	ldr	r5, [r6, #8]
 8009372:	e7df      	b.n	8009334 <_vfiprintf_r+0x20>
 8009374:	4b79      	ldr	r3, [pc, #484]	; (800955c <_vfiprintf_r+0x248>)
 8009376:	429d      	cmp	r5, r3
 8009378:	bf08      	it	eq
 800937a:	68f5      	ldreq	r5, [r6, #12]
 800937c:	e7da      	b.n	8009334 <_vfiprintf_r+0x20>
 800937e:	89ab      	ldrh	r3, [r5, #12]
 8009380:	0598      	lsls	r0, r3, #22
 8009382:	d4ed      	bmi.n	8009360 <_vfiprintf_r+0x4c>
 8009384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009386:	f000 fb80 	bl	8009a8a <__retarget_lock_release_recursive>
 800938a:	e7e9      	b.n	8009360 <_vfiprintf_r+0x4c>
 800938c:	2300      	movs	r3, #0
 800938e:	9309      	str	r3, [sp, #36]	; 0x24
 8009390:	2320      	movs	r3, #32
 8009392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009396:	2330      	movs	r3, #48	; 0x30
 8009398:	f04f 0901 	mov.w	r9, #1
 800939c:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009560 <_vfiprintf_r+0x24c>
 80093a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093a8:	4623      	mov	r3, r4
 80093aa:	469a      	mov	sl, r3
 80093ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b0:	b10a      	cbz	r2, 80093b6 <_vfiprintf_r+0xa2>
 80093b2:	2a25      	cmp	r2, #37	; 0x25
 80093b4:	d1f9      	bne.n	80093aa <_vfiprintf_r+0x96>
 80093b6:	ebba 0b04 	subs.w	fp, sl, r4
 80093ba:	d00b      	beq.n	80093d4 <_vfiprintf_r+0xc0>
 80093bc:	465b      	mov	r3, fp
 80093be:	4622      	mov	r2, r4
 80093c0:	4629      	mov	r1, r5
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7ff ff94 	bl	80092f0 <__sfputs_r>
 80093c8:	3001      	adds	r0, #1
 80093ca:	f000 80aa 	beq.w	8009522 <_vfiprintf_r+0x20e>
 80093ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d0:	445a      	add	r2, fp
 80093d2:	9209      	str	r2, [sp, #36]	; 0x24
 80093d4:	f89a 3000 	ldrb.w	r3, [sl]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 80a2 	beq.w	8009522 <_vfiprintf_r+0x20e>
 80093de:	2300      	movs	r3, #0
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e8:	f10a 0a01 	add.w	sl, sl, #1
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	9307      	str	r3, [sp, #28]
 80093f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093f4:	931a      	str	r3, [sp, #104]	; 0x68
 80093f6:	4654      	mov	r4, sl
 80093f8:	2205      	movs	r2, #5
 80093fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fe:	4858      	ldr	r0, [pc, #352]	; (8009560 <_vfiprintf_r+0x24c>)
 8009400:	f7ff f8d0 	bl	80085a4 <memchr>
 8009404:	9a04      	ldr	r2, [sp, #16]
 8009406:	b9d8      	cbnz	r0, 8009440 <_vfiprintf_r+0x12c>
 8009408:	06d1      	lsls	r1, r2, #27
 800940a:	bf44      	itt	mi
 800940c:	2320      	movmi	r3, #32
 800940e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009412:	0713      	lsls	r3, r2, #28
 8009414:	bf44      	itt	mi
 8009416:	232b      	movmi	r3, #43	; 0x2b
 8009418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800941c:	f89a 3000 	ldrb.w	r3, [sl]
 8009420:	2b2a      	cmp	r3, #42	; 0x2a
 8009422:	d015      	beq.n	8009450 <_vfiprintf_r+0x13c>
 8009424:	4654      	mov	r4, sl
 8009426:	2000      	movs	r0, #0
 8009428:	f04f 0c0a 	mov.w	ip, #10
 800942c:	9a07      	ldr	r2, [sp, #28]
 800942e:	4621      	mov	r1, r4
 8009430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009434:	3b30      	subs	r3, #48	; 0x30
 8009436:	2b09      	cmp	r3, #9
 8009438:	d94e      	bls.n	80094d8 <_vfiprintf_r+0x1c4>
 800943a:	b1b0      	cbz	r0, 800946a <_vfiprintf_r+0x156>
 800943c:	9207      	str	r2, [sp, #28]
 800943e:	e014      	b.n	800946a <_vfiprintf_r+0x156>
 8009440:	eba0 0308 	sub.w	r3, r0, r8
 8009444:	fa09 f303 	lsl.w	r3, r9, r3
 8009448:	4313      	orrs	r3, r2
 800944a:	46a2      	mov	sl, r4
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	e7d2      	b.n	80093f6 <_vfiprintf_r+0xe2>
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	1d19      	adds	r1, r3, #4
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	9103      	str	r1, [sp, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	bfbb      	ittet	lt
 800945c:	425b      	neglt	r3, r3
 800945e:	f042 0202 	orrlt.w	r2, r2, #2
 8009462:	9307      	strge	r3, [sp, #28]
 8009464:	9307      	strlt	r3, [sp, #28]
 8009466:	bfb8      	it	lt
 8009468:	9204      	strlt	r2, [sp, #16]
 800946a:	7823      	ldrb	r3, [r4, #0]
 800946c:	2b2e      	cmp	r3, #46	; 0x2e
 800946e:	d10c      	bne.n	800948a <_vfiprintf_r+0x176>
 8009470:	7863      	ldrb	r3, [r4, #1]
 8009472:	2b2a      	cmp	r3, #42	; 0x2a
 8009474:	d135      	bne.n	80094e2 <_vfiprintf_r+0x1ce>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	3402      	adds	r4, #2
 800947a:	1d1a      	adds	r2, r3, #4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	9203      	str	r2, [sp, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	bfb8      	it	lt
 8009484:	f04f 33ff 	movlt.w	r3, #4294967295
 8009488:	9305      	str	r3, [sp, #20]
 800948a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009564 <_vfiprintf_r+0x250>
 800948e:	2203      	movs	r2, #3
 8009490:	4650      	mov	r0, sl
 8009492:	7821      	ldrb	r1, [r4, #0]
 8009494:	f7ff f886 	bl	80085a4 <memchr>
 8009498:	b140      	cbz	r0, 80094ac <_vfiprintf_r+0x198>
 800949a:	2340      	movs	r3, #64	; 0x40
 800949c:	eba0 000a 	sub.w	r0, r0, sl
 80094a0:	fa03 f000 	lsl.w	r0, r3, r0
 80094a4:	9b04      	ldr	r3, [sp, #16]
 80094a6:	3401      	adds	r4, #1
 80094a8:	4303      	orrs	r3, r0
 80094aa:	9304      	str	r3, [sp, #16]
 80094ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b0:	2206      	movs	r2, #6
 80094b2:	482d      	ldr	r0, [pc, #180]	; (8009568 <_vfiprintf_r+0x254>)
 80094b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094b8:	f7ff f874 	bl	80085a4 <memchr>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d03f      	beq.n	8009540 <_vfiprintf_r+0x22c>
 80094c0:	4b2a      	ldr	r3, [pc, #168]	; (800956c <_vfiprintf_r+0x258>)
 80094c2:	bb1b      	cbnz	r3, 800950c <_vfiprintf_r+0x1f8>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	3307      	adds	r3, #7
 80094c8:	f023 0307 	bic.w	r3, r3, #7
 80094cc:	3308      	adds	r3, #8
 80094ce:	9303      	str	r3, [sp, #12]
 80094d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d2:	443b      	add	r3, r7
 80094d4:	9309      	str	r3, [sp, #36]	; 0x24
 80094d6:	e767      	b.n	80093a8 <_vfiprintf_r+0x94>
 80094d8:	460c      	mov	r4, r1
 80094da:	2001      	movs	r0, #1
 80094dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e0:	e7a5      	b.n	800942e <_vfiprintf_r+0x11a>
 80094e2:	2300      	movs	r3, #0
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4619      	mov	r1, r3
 80094ea:	3401      	adds	r4, #1
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	4620      	mov	r0, r4
 80094f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094f4:	3a30      	subs	r2, #48	; 0x30
 80094f6:	2a09      	cmp	r2, #9
 80094f8:	d903      	bls.n	8009502 <_vfiprintf_r+0x1ee>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0c5      	beq.n	800948a <_vfiprintf_r+0x176>
 80094fe:	9105      	str	r1, [sp, #20]
 8009500:	e7c3      	b.n	800948a <_vfiprintf_r+0x176>
 8009502:	4604      	mov	r4, r0
 8009504:	2301      	movs	r3, #1
 8009506:	fb0c 2101 	mla	r1, ip, r1, r2
 800950a:	e7f0      	b.n	80094ee <_vfiprintf_r+0x1da>
 800950c:	ab03      	add	r3, sp, #12
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	462a      	mov	r2, r5
 8009512:	4630      	mov	r0, r6
 8009514:	4b16      	ldr	r3, [pc, #88]	; (8009570 <_vfiprintf_r+0x25c>)
 8009516:	a904      	add	r1, sp, #16
 8009518:	f7fd fddc 	bl	80070d4 <_printf_float>
 800951c:	4607      	mov	r7, r0
 800951e:	1c78      	adds	r0, r7, #1
 8009520:	d1d6      	bne.n	80094d0 <_vfiprintf_r+0x1bc>
 8009522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009524:	07d9      	lsls	r1, r3, #31
 8009526:	d405      	bmi.n	8009534 <_vfiprintf_r+0x220>
 8009528:	89ab      	ldrh	r3, [r5, #12]
 800952a:	059a      	lsls	r2, r3, #22
 800952c:	d402      	bmi.n	8009534 <_vfiprintf_r+0x220>
 800952e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009530:	f000 faab 	bl	8009a8a <__retarget_lock_release_recursive>
 8009534:	89ab      	ldrh	r3, [r5, #12]
 8009536:	065b      	lsls	r3, r3, #25
 8009538:	f53f af12 	bmi.w	8009360 <_vfiprintf_r+0x4c>
 800953c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800953e:	e711      	b.n	8009364 <_vfiprintf_r+0x50>
 8009540:	ab03      	add	r3, sp, #12
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	462a      	mov	r2, r5
 8009546:	4630      	mov	r0, r6
 8009548:	4b09      	ldr	r3, [pc, #36]	; (8009570 <_vfiprintf_r+0x25c>)
 800954a:	a904      	add	r1, sp, #16
 800954c:	f7fe f85e 	bl	800760c <_printf_i>
 8009550:	e7e4      	b.n	800951c <_vfiprintf_r+0x208>
 8009552:	bf00      	nop
 8009554:	0800bf3c 	.word	0x0800bf3c
 8009558:	0800bf5c 	.word	0x0800bf5c
 800955c:	0800bf1c 	.word	0x0800bf1c
 8009560:	0800bdc4 	.word	0x0800bdc4
 8009564:	0800bdca 	.word	0x0800bdca
 8009568:	0800bdce 	.word	0x0800bdce
 800956c:	080070d5 	.word	0x080070d5
 8009570:	080092f1 	.word	0x080092f1

08009574 <__swbuf_r>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	460e      	mov	r6, r1
 8009578:	4614      	mov	r4, r2
 800957a:	4605      	mov	r5, r0
 800957c:	b118      	cbz	r0, 8009586 <__swbuf_r+0x12>
 800957e:	6983      	ldr	r3, [r0, #24]
 8009580:	b90b      	cbnz	r3, 8009586 <__swbuf_r+0x12>
 8009582:	f000 f9e3 	bl	800994c <__sinit>
 8009586:	4b21      	ldr	r3, [pc, #132]	; (800960c <__swbuf_r+0x98>)
 8009588:	429c      	cmp	r4, r3
 800958a:	d12b      	bne.n	80095e4 <__swbuf_r+0x70>
 800958c:	686c      	ldr	r4, [r5, #4]
 800958e:	69a3      	ldr	r3, [r4, #24]
 8009590:	60a3      	str	r3, [r4, #8]
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	071a      	lsls	r2, r3, #28
 8009596:	d52f      	bpl.n	80095f8 <__swbuf_r+0x84>
 8009598:	6923      	ldr	r3, [r4, #16]
 800959a:	b36b      	cbz	r3, 80095f8 <__swbuf_r+0x84>
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	b2f6      	uxtb	r6, r6
 80095a2:	1ac0      	subs	r0, r0, r3
 80095a4:	6963      	ldr	r3, [r4, #20]
 80095a6:	4637      	mov	r7, r6
 80095a8:	4283      	cmp	r3, r0
 80095aa:	dc04      	bgt.n	80095b6 <__swbuf_r+0x42>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f938 	bl	8009824 <_fflush_r>
 80095b4:	bb30      	cbnz	r0, 8009604 <__swbuf_r+0x90>
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	3001      	adds	r0, #1
 80095ba:	3b01      	subs	r3, #1
 80095bc:	60a3      	str	r3, [r4, #8]
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	6022      	str	r2, [r4, #0]
 80095c4:	701e      	strb	r6, [r3, #0]
 80095c6:	6963      	ldr	r3, [r4, #20]
 80095c8:	4283      	cmp	r3, r0
 80095ca:	d004      	beq.n	80095d6 <__swbuf_r+0x62>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	07db      	lsls	r3, r3, #31
 80095d0:	d506      	bpl.n	80095e0 <__swbuf_r+0x6c>
 80095d2:	2e0a      	cmp	r6, #10
 80095d4:	d104      	bne.n	80095e0 <__swbuf_r+0x6c>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 f923 	bl	8009824 <_fflush_r>
 80095de:	b988      	cbnz	r0, 8009604 <__swbuf_r+0x90>
 80095e0:	4638      	mov	r0, r7
 80095e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <__swbuf_r+0x9c>)
 80095e6:	429c      	cmp	r4, r3
 80095e8:	d101      	bne.n	80095ee <__swbuf_r+0x7a>
 80095ea:	68ac      	ldr	r4, [r5, #8]
 80095ec:	e7cf      	b.n	800958e <__swbuf_r+0x1a>
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <__swbuf_r+0xa0>)
 80095f0:	429c      	cmp	r4, r3
 80095f2:	bf08      	it	eq
 80095f4:	68ec      	ldreq	r4, [r5, #12]
 80095f6:	e7ca      	b.n	800958e <__swbuf_r+0x1a>
 80095f8:	4621      	mov	r1, r4
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 f81a 	bl	8009634 <__swsetup_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	d0cb      	beq.n	800959c <__swbuf_r+0x28>
 8009604:	f04f 37ff 	mov.w	r7, #4294967295
 8009608:	e7ea      	b.n	80095e0 <__swbuf_r+0x6c>
 800960a:	bf00      	nop
 800960c:	0800bf3c 	.word	0x0800bf3c
 8009610:	0800bf5c 	.word	0x0800bf5c
 8009614:	0800bf1c 	.word	0x0800bf1c

08009618 <__ascii_wctomb>:
 8009618:	4603      	mov	r3, r0
 800961a:	4608      	mov	r0, r1
 800961c:	b141      	cbz	r1, 8009630 <__ascii_wctomb+0x18>
 800961e:	2aff      	cmp	r2, #255	; 0xff
 8009620:	d904      	bls.n	800962c <__ascii_wctomb+0x14>
 8009622:	228a      	movs	r2, #138	; 0x8a
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	4770      	bx	lr
 800962c:	2001      	movs	r0, #1
 800962e:	700a      	strb	r2, [r1, #0]
 8009630:	4770      	bx	lr
	...

08009634 <__swsetup_r>:
 8009634:	4b32      	ldr	r3, [pc, #200]	; (8009700 <__swsetup_r+0xcc>)
 8009636:	b570      	push	{r4, r5, r6, lr}
 8009638:	681d      	ldr	r5, [r3, #0]
 800963a:	4606      	mov	r6, r0
 800963c:	460c      	mov	r4, r1
 800963e:	b125      	cbz	r5, 800964a <__swsetup_r+0x16>
 8009640:	69ab      	ldr	r3, [r5, #24]
 8009642:	b913      	cbnz	r3, 800964a <__swsetup_r+0x16>
 8009644:	4628      	mov	r0, r5
 8009646:	f000 f981 	bl	800994c <__sinit>
 800964a:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <__swsetup_r+0xd0>)
 800964c:	429c      	cmp	r4, r3
 800964e:	d10f      	bne.n	8009670 <__swsetup_r+0x3c>
 8009650:	686c      	ldr	r4, [r5, #4]
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009658:	0719      	lsls	r1, r3, #28
 800965a:	d42c      	bmi.n	80096b6 <__swsetup_r+0x82>
 800965c:	06dd      	lsls	r5, r3, #27
 800965e:	d411      	bmi.n	8009684 <__swsetup_r+0x50>
 8009660:	2309      	movs	r3, #9
 8009662:	6033      	str	r3, [r6, #0]
 8009664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	e03e      	b.n	80096ee <__swsetup_r+0xba>
 8009670:	4b25      	ldr	r3, [pc, #148]	; (8009708 <__swsetup_r+0xd4>)
 8009672:	429c      	cmp	r4, r3
 8009674:	d101      	bne.n	800967a <__swsetup_r+0x46>
 8009676:	68ac      	ldr	r4, [r5, #8]
 8009678:	e7eb      	b.n	8009652 <__swsetup_r+0x1e>
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <__swsetup_r+0xd8>)
 800967c:	429c      	cmp	r4, r3
 800967e:	bf08      	it	eq
 8009680:	68ec      	ldreq	r4, [r5, #12]
 8009682:	e7e6      	b.n	8009652 <__swsetup_r+0x1e>
 8009684:	0758      	lsls	r0, r3, #29
 8009686:	d512      	bpl.n	80096ae <__swsetup_r+0x7a>
 8009688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800968a:	b141      	cbz	r1, 800969e <__swsetup_r+0x6a>
 800968c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009690:	4299      	cmp	r1, r3
 8009692:	d002      	beq.n	800969a <__swsetup_r+0x66>
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff fb37 	bl	8008d08 <_free_r>
 800969a:	2300      	movs	r3, #0
 800969c:	6363      	str	r3, [r4, #52]	; 0x34
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	2300      	movs	r3, #0
 80096a8:	6063      	str	r3, [r4, #4]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	f043 0308 	orr.w	r3, r3, #8
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	6923      	ldr	r3, [r4, #16]
 80096b8:	b94b      	cbnz	r3, 80096ce <__swsetup_r+0x9a>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096c4:	d003      	beq.n	80096ce <__swsetup_r+0x9a>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 fa05 	bl	8009ad8 <__smakebuf_r>
 80096ce:	89a0      	ldrh	r0, [r4, #12]
 80096d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096d4:	f010 0301 	ands.w	r3, r0, #1
 80096d8:	d00a      	beq.n	80096f0 <__swsetup_r+0xbc>
 80096da:	2300      	movs	r3, #0
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	6963      	ldr	r3, [r4, #20]
 80096e0:	425b      	negs	r3, r3
 80096e2:	61a3      	str	r3, [r4, #24]
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	b943      	cbnz	r3, 80096fa <__swsetup_r+0xc6>
 80096e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096ec:	d1ba      	bne.n	8009664 <__swsetup_r+0x30>
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	0781      	lsls	r1, r0, #30
 80096f2:	bf58      	it	pl
 80096f4:	6963      	ldrpl	r3, [r4, #20]
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	e7f4      	b.n	80096e4 <__swsetup_r+0xb0>
 80096fa:	2000      	movs	r0, #0
 80096fc:	e7f7      	b.n	80096ee <__swsetup_r+0xba>
 80096fe:	bf00      	nop
 8009700:	2000000c 	.word	0x2000000c
 8009704:	0800bf3c 	.word	0x0800bf3c
 8009708:	0800bf5c 	.word	0x0800bf5c
 800970c:	0800bf1c 	.word	0x0800bf1c

08009710 <abort>:
 8009710:	2006      	movs	r0, #6
 8009712:	b508      	push	{r3, lr}
 8009714:	f000 fa50 	bl	8009bb8 <raise>
 8009718:	2001      	movs	r0, #1
 800971a:	f7f9 f92a 	bl	8002972 <_exit>
	...

08009720 <__sflush_r>:
 8009720:	898a      	ldrh	r2, [r1, #12]
 8009722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009724:	4605      	mov	r5, r0
 8009726:	0710      	lsls	r0, r2, #28
 8009728:	460c      	mov	r4, r1
 800972a:	d457      	bmi.n	80097dc <__sflush_r+0xbc>
 800972c:	684b      	ldr	r3, [r1, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	dc04      	bgt.n	800973c <__sflush_r+0x1c>
 8009732:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009734:	2b00      	cmp	r3, #0
 8009736:	dc01      	bgt.n	800973c <__sflush_r+0x1c>
 8009738:	2000      	movs	r0, #0
 800973a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800973c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800973e:	2e00      	cmp	r6, #0
 8009740:	d0fa      	beq.n	8009738 <__sflush_r+0x18>
 8009742:	2300      	movs	r3, #0
 8009744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009748:	682f      	ldr	r7, [r5, #0]
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	d032      	beq.n	80097b4 <__sflush_r+0x94>
 800974e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	075a      	lsls	r2, r3, #29
 8009754:	d505      	bpl.n	8009762 <__sflush_r+0x42>
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	1ac0      	subs	r0, r0, r3
 800975a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800975c:	b10b      	cbz	r3, 8009762 <__sflush_r+0x42>
 800975e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009760:	1ac0      	subs	r0, r0, r3
 8009762:	2300      	movs	r3, #0
 8009764:	4602      	mov	r2, r0
 8009766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009768:	4628      	mov	r0, r5
 800976a:	6a21      	ldr	r1, [r4, #32]
 800976c:	47b0      	blx	r6
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	d106      	bne.n	8009782 <__sflush_r+0x62>
 8009774:	6829      	ldr	r1, [r5, #0]
 8009776:	291d      	cmp	r1, #29
 8009778:	d82c      	bhi.n	80097d4 <__sflush_r+0xb4>
 800977a:	4a29      	ldr	r2, [pc, #164]	; (8009820 <__sflush_r+0x100>)
 800977c:	40ca      	lsrs	r2, r1
 800977e:	07d6      	lsls	r6, r2, #31
 8009780:	d528      	bpl.n	80097d4 <__sflush_r+0xb4>
 8009782:	2200      	movs	r2, #0
 8009784:	6062      	str	r2, [r4, #4]
 8009786:	6922      	ldr	r2, [r4, #16]
 8009788:	04d9      	lsls	r1, r3, #19
 800978a:	6022      	str	r2, [r4, #0]
 800978c:	d504      	bpl.n	8009798 <__sflush_r+0x78>
 800978e:	1c42      	adds	r2, r0, #1
 8009790:	d101      	bne.n	8009796 <__sflush_r+0x76>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	b903      	cbnz	r3, 8009798 <__sflush_r+0x78>
 8009796:	6560      	str	r0, [r4, #84]	; 0x54
 8009798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800979a:	602f      	str	r7, [r5, #0]
 800979c:	2900      	cmp	r1, #0
 800979e:	d0cb      	beq.n	8009738 <__sflush_r+0x18>
 80097a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a4:	4299      	cmp	r1, r3
 80097a6:	d002      	beq.n	80097ae <__sflush_r+0x8e>
 80097a8:	4628      	mov	r0, r5
 80097aa:	f7ff faad 	bl	8008d08 <_free_r>
 80097ae:	2000      	movs	r0, #0
 80097b0:	6360      	str	r0, [r4, #52]	; 0x34
 80097b2:	e7c2      	b.n	800973a <__sflush_r+0x1a>
 80097b4:	6a21      	ldr	r1, [r4, #32]
 80097b6:	2301      	movs	r3, #1
 80097b8:	4628      	mov	r0, r5
 80097ba:	47b0      	blx	r6
 80097bc:	1c41      	adds	r1, r0, #1
 80097be:	d1c7      	bne.n	8009750 <__sflush_r+0x30>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0c4      	beq.n	8009750 <__sflush_r+0x30>
 80097c6:	2b1d      	cmp	r3, #29
 80097c8:	d001      	beq.n	80097ce <__sflush_r+0xae>
 80097ca:	2b16      	cmp	r3, #22
 80097cc:	d101      	bne.n	80097d2 <__sflush_r+0xb2>
 80097ce:	602f      	str	r7, [r5, #0]
 80097d0:	e7b2      	b.n	8009738 <__sflush_r+0x18>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	e7ae      	b.n	800973a <__sflush_r+0x1a>
 80097dc:	690f      	ldr	r7, [r1, #16]
 80097de:	2f00      	cmp	r7, #0
 80097e0:	d0aa      	beq.n	8009738 <__sflush_r+0x18>
 80097e2:	0793      	lsls	r3, r2, #30
 80097e4:	bf18      	it	ne
 80097e6:	2300      	movne	r3, #0
 80097e8:	680e      	ldr	r6, [r1, #0]
 80097ea:	bf08      	it	eq
 80097ec:	694b      	ldreq	r3, [r1, #20]
 80097ee:	1bf6      	subs	r6, r6, r7
 80097f0:	600f      	str	r7, [r1, #0]
 80097f2:	608b      	str	r3, [r1, #8]
 80097f4:	2e00      	cmp	r6, #0
 80097f6:	dd9f      	ble.n	8009738 <__sflush_r+0x18>
 80097f8:	4633      	mov	r3, r6
 80097fa:	463a      	mov	r2, r7
 80097fc:	4628      	mov	r0, r5
 80097fe:	6a21      	ldr	r1, [r4, #32]
 8009800:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009804:	47e0      	blx	ip
 8009806:	2800      	cmp	r0, #0
 8009808:	dc06      	bgt.n	8009818 <__sflush_r+0xf8>
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	e790      	b.n	800973a <__sflush_r+0x1a>
 8009818:	4407      	add	r7, r0
 800981a:	1a36      	subs	r6, r6, r0
 800981c:	e7ea      	b.n	80097f4 <__sflush_r+0xd4>
 800981e:	bf00      	nop
 8009820:	20400001 	.word	0x20400001

08009824 <_fflush_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	690b      	ldr	r3, [r1, #16]
 8009828:	4605      	mov	r5, r0
 800982a:	460c      	mov	r4, r1
 800982c:	b913      	cbnz	r3, 8009834 <_fflush_r+0x10>
 800982e:	2500      	movs	r5, #0
 8009830:	4628      	mov	r0, r5
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	b118      	cbz	r0, 800983e <_fflush_r+0x1a>
 8009836:	6983      	ldr	r3, [r0, #24]
 8009838:	b90b      	cbnz	r3, 800983e <_fflush_r+0x1a>
 800983a:	f000 f887 	bl	800994c <__sinit>
 800983e:	4b14      	ldr	r3, [pc, #80]	; (8009890 <_fflush_r+0x6c>)
 8009840:	429c      	cmp	r4, r3
 8009842:	d11b      	bne.n	800987c <_fflush_r+0x58>
 8009844:	686c      	ldr	r4, [r5, #4]
 8009846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0ef      	beq.n	800982e <_fflush_r+0xa>
 800984e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009850:	07d0      	lsls	r0, r2, #31
 8009852:	d404      	bmi.n	800985e <_fflush_r+0x3a>
 8009854:	0599      	lsls	r1, r3, #22
 8009856:	d402      	bmi.n	800985e <_fflush_r+0x3a>
 8009858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800985a:	f000 f915 	bl	8009a88 <__retarget_lock_acquire_recursive>
 800985e:	4628      	mov	r0, r5
 8009860:	4621      	mov	r1, r4
 8009862:	f7ff ff5d 	bl	8009720 <__sflush_r>
 8009866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009868:	4605      	mov	r5, r0
 800986a:	07da      	lsls	r2, r3, #31
 800986c:	d4e0      	bmi.n	8009830 <_fflush_r+0xc>
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	059b      	lsls	r3, r3, #22
 8009872:	d4dd      	bmi.n	8009830 <_fflush_r+0xc>
 8009874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009876:	f000 f908 	bl	8009a8a <__retarget_lock_release_recursive>
 800987a:	e7d9      	b.n	8009830 <_fflush_r+0xc>
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <_fflush_r+0x70>)
 800987e:	429c      	cmp	r4, r3
 8009880:	d101      	bne.n	8009886 <_fflush_r+0x62>
 8009882:	68ac      	ldr	r4, [r5, #8]
 8009884:	e7df      	b.n	8009846 <_fflush_r+0x22>
 8009886:	4b04      	ldr	r3, [pc, #16]	; (8009898 <_fflush_r+0x74>)
 8009888:	429c      	cmp	r4, r3
 800988a:	bf08      	it	eq
 800988c:	68ec      	ldreq	r4, [r5, #12]
 800988e:	e7da      	b.n	8009846 <_fflush_r+0x22>
 8009890:	0800bf3c 	.word	0x0800bf3c
 8009894:	0800bf5c 	.word	0x0800bf5c
 8009898:	0800bf1c 	.word	0x0800bf1c

0800989c <std>:
 800989c:	2300      	movs	r3, #0
 800989e:	b510      	push	{r4, lr}
 80098a0:	4604      	mov	r4, r0
 80098a2:	e9c0 3300 	strd	r3, r3, [r0]
 80098a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098aa:	6083      	str	r3, [r0, #8]
 80098ac:	8181      	strh	r1, [r0, #12]
 80098ae:	6643      	str	r3, [r0, #100]	; 0x64
 80098b0:	81c2      	strh	r2, [r0, #14]
 80098b2:	6183      	str	r3, [r0, #24]
 80098b4:	4619      	mov	r1, r3
 80098b6:	2208      	movs	r2, #8
 80098b8:	305c      	adds	r0, #92	; 0x5c
 80098ba:	f7fd fb65 	bl	8006f88 <memset>
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <std+0x38>)
 80098c0:	6224      	str	r4, [r4, #32]
 80098c2:	6263      	str	r3, [r4, #36]	; 0x24
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <std+0x3c>)
 80098c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <std+0x40>)
 80098ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098cc:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <std+0x44>)
 80098ce:	6323      	str	r3, [r4, #48]	; 0x30
 80098d0:	bd10      	pop	{r4, pc}
 80098d2:	bf00      	nop
 80098d4:	08009bf1 	.word	0x08009bf1
 80098d8:	08009c13 	.word	0x08009c13
 80098dc:	08009c4b 	.word	0x08009c4b
 80098e0:	08009c6f 	.word	0x08009c6f

080098e4 <_cleanup_r>:
 80098e4:	4901      	ldr	r1, [pc, #4]	; (80098ec <_cleanup_r+0x8>)
 80098e6:	f000 b8af 	b.w	8009a48 <_fwalk_reent>
 80098ea:	bf00      	nop
 80098ec:	08009825 	.word	0x08009825

080098f0 <__sfmoreglue>:
 80098f0:	2268      	movs	r2, #104	; 0x68
 80098f2:	b570      	push	{r4, r5, r6, lr}
 80098f4:	1e4d      	subs	r5, r1, #1
 80098f6:	4355      	muls	r5, r2
 80098f8:	460e      	mov	r6, r1
 80098fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098fe:	f7ff fa6b 	bl	8008dd8 <_malloc_r>
 8009902:	4604      	mov	r4, r0
 8009904:	b140      	cbz	r0, 8009918 <__sfmoreglue+0x28>
 8009906:	2100      	movs	r1, #0
 8009908:	e9c0 1600 	strd	r1, r6, [r0]
 800990c:	300c      	adds	r0, #12
 800990e:	60a0      	str	r0, [r4, #8]
 8009910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009914:	f7fd fb38 	bl	8006f88 <memset>
 8009918:	4620      	mov	r0, r4
 800991a:	bd70      	pop	{r4, r5, r6, pc}

0800991c <__sfp_lock_acquire>:
 800991c:	4801      	ldr	r0, [pc, #4]	; (8009924 <__sfp_lock_acquire+0x8>)
 800991e:	f000 b8b3 	b.w	8009a88 <__retarget_lock_acquire_recursive>
 8009922:	bf00      	nop
 8009924:	20000679 	.word	0x20000679

08009928 <__sfp_lock_release>:
 8009928:	4801      	ldr	r0, [pc, #4]	; (8009930 <__sfp_lock_release+0x8>)
 800992a:	f000 b8ae 	b.w	8009a8a <__retarget_lock_release_recursive>
 800992e:	bf00      	nop
 8009930:	20000679 	.word	0x20000679

08009934 <__sinit_lock_acquire>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__sinit_lock_acquire+0x8>)
 8009936:	f000 b8a7 	b.w	8009a88 <__retarget_lock_acquire_recursive>
 800993a:	bf00      	nop
 800993c:	2000067a 	.word	0x2000067a

08009940 <__sinit_lock_release>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__sinit_lock_release+0x8>)
 8009942:	f000 b8a2 	b.w	8009a8a <__retarget_lock_release_recursive>
 8009946:	bf00      	nop
 8009948:	2000067a 	.word	0x2000067a

0800994c <__sinit>:
 800994c:	b510      	push	{r4, lr}
 800994e:	4604      	mov	r4, r0
 8009950:	f7ff fff0 	bl	8009934 <__sinit_lock_acquire>
 8009954:	69a3      	ldr	r3, [r4, #24]
 8009956:	b11b      	cbz	r3, 8009960 <__sinit+0x14>
 8009958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800995c:	f7ff bff0 	b.w	8009940 <__sinit_lock_release>
 8009960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009964:	6523      	str	r3, [r4, #80]	; 0x50
 8009966:	4b13      	ldr	r3, [pc, #76]	; (80099b4 <__sinit+0x68>)
 8009968:	4a13      	ldr	r2, [pc, #76]	; (80099b8 <__sinit+0x6c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	62a2      	str	r2, [r4, #40]	; 0x28
 800996e:	42a3      	cmp	r3, r4
 8009970:	bf08      	it	eq
 8009972:	2301      	moveq	r3, #1
 8009974:	4620      	mov	r0, r4
 8009976:	bf08      	it	eq
 8009978:	61a3      	streq	r3, [r4, #24]
 800997a:	f000 f81f 	bl	80099bc <__sfp>
 800997e:	6060      	str	r0, [r4, #4]
 8009980:	4620      	mov	r0, r4
 8009982:	f000 f81b 	bl	80099bc <__sfp>
 8009986:	60a0      	str	r0, [r4, #8]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 f817 	bl	80099bc <__sfp>
 800998e:	2200      	movs	r2, #0
 8009990:	2104      	movs	r1, #4
 8009992:	60e0      	str	r0, [r4, #12]
 8009994:	6860      	ldr	r0, [r4, #4]
 8009996:	f7ff ff81 	bl	800989c <std>
 800999a:	2201      	movs	r2, #1
 800999c:	2109      	movs	r1, #9
 800999e:	68a0      	ldr	r0, [r4, #8]
 80099a0:	f7ff ff7c 	bl	800989c <std>
 80099a4:	2202      	movs	r2, #2
 80099a6:	2112      	movs	r1, #18
 80099a8:	68e0      	ldr	r0, [r4, #12]
 80099aa:	f7ff ff77 	bl	800989c <std>
 80099ae:	2301      	movs	r3, #1
 80099b0:	61a3      	str	r3, [r4, #24]
 80099b2:	e7d1      	b.n	8009958 <__sinit+0xc>
 80099b4:	0800bba4 	.word	0x0800bba4
 80099b8:	080098e5 	.word	0x080098e5

080099bc <__sfp>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	4607      	mov	r7, r0
 80099c0:	f7ff ffac 	bl	800991c <__sfp_lock_acquire>
 80099c4:	4b1e      	ldr	r3, [pc, #120]	; (8009a40 <__sfp+0x84>)
 80099c6:	681e      	ldr	r6, [r3, #0]
 80099c8:	69b3      	ldr	r3, [r6, #24]
 80099ca:	b913      	cbnz	r3, 80099d2 <__sfp+0x16>
 80099cc:	4630      	mov	r0, r6
 80099ce:	f7ff ffbd 	bl	800994c <__sinit>
 80099d2:	3648      	adds	r6, #72	; 0x48
 80099d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099d8:	3b01      	subs	r3, #1
 80099da:	d503      	bpl.n	80099e4 <__sfp+0x28>
 80099dc:	6833      	ldr	r3, [r6, #0]
 80099de:	b30b      	cbz	r3, 8009a24 <__sfp+0x68>
 80099e0:	6836      	ldr	r6, [r6, #0]
 80099e2:	e7f7      	b.n	80099d4 <__sfp+0x18>
 80099e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099e8:	b9d5      	cbnz	r5, 8009a20 <__sfp+0x64>
 80099ea:	4b16      	ldr	r3, [pc, #88]	; (8009a44 <__sfp+0x88>)
 80099ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099f0:	60e3      	str	r3, [r4, #12]
 80099f2:	6665      	str	r5, [r4, #100]	; 0x64
 80099f4:	f000 f847 	bl	8009a86 <__retarget_lock_init_recursive>
 80099f8:	f7ff ff96 	bl	8009928 <__sfp_lock_release>
 80099fc:	2208      	movs	r2, #8
 80099fe:	4629      	mov	r1, r5
 8009a00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a08:	6025      	str	r5, [r4, #0]
 8009a0a:	61a5      	str	r5, [r4, #24]
 8009a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a10:	f7fd faba 	bl	8006f88 <memset>
 8009a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a20:	3468      	adds	r4, #104	; 0x68
 8009a22:	e7d9      	b.n	80099d8 <__sfp+0x1c>
 8009a24:	2104      	movs	r1, #4
 8009a26:	4638      	mov	r0, r7
 8009a28:	f7ff ff62 	bl	80098f0 <__sfmoreglue>
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	6030      	str	r0, [r6, #0]
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d1d5      	bne.n	80099e0 <__sfp+0x24>
 8009a34:	f7ff ff78 	bl	8009928 <__sfp_lock_release>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	e7ee      	b.n	8009a1c <__sfp+0x60>
 8009a3e:	bf00      	nop
 8009a40:	0800bba4 	.word	0x0800bba4
 8009a44:	ffff0001 	.word	0xffff0001

08009a48 <_fwalk_reent>:
 8009a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	4688      	mov	r8, r1
 8009a50:	2700      	movs	r7, #0
 8009a52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8009a5e:	d505      	bpl.n	8009a6c <_fwalk_reent+0x24>
 8009a60:	6824      	ldr	r4, [r4, #0]
 8009a62:	2c00      	cmp	r4, #0
 8009a64:	d1f7      	bne.n	8009a56 <_fwalk_reent+0xe>
 8009a66:	4638      	mov	r0, r7
 8009a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6c:	89ab      	ldrh	r3, [r5, #12]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d907      	bls.n	8009a82 <_fwalk_reent+0x3a>
 8009a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a76:	3301      	adds	r3, #1
 8009a78:	d003      	beq.n	8009a82 <_fwalk_reent+0x3a>
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	47c0      	blx	r8
 8009a80:	4307      	orrs	r7, r0
 8009a82:	3568      	adds	r5, #104	; 0x68
 8009a84:	e7e9      	b.n	8009a5a <_fwalk_reent+0x12>

08009a86 <__retarget_lock_init_recursive>:
 8009a86:	4770      	bx	lr

08009a88 <__retarget_lock_acquire_recursive>:
 8009a88:	4770      	bx	lr

08009a8a <__retarget_lock_release_recursive>:
 8009a8a:	4770      	bx	lr

08009a8c <__swhatbuf_r>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	460e      	mov	r6, r1
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	4614      	mov	r4, r2
 8009a96:	2900      	cmp	r1, #0
 8009a98:	461d      	mov	r5, r3
 8009a9a:	b096      	sub	sp, #88	; 0x58
 8009a9c:	da08      	bge.n	8009ab0 <__swhatbuf_r+0x24>
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009aa4:	602a      	str	r2, [r5, #0]
 8009aa6:	061a      	lsls	r2, r3, #24
 8009aa8:	d410      	bmi.n	8009acc <__swhatbuf_r+0x40>
 8009aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aae:	e00e      	b.n	8009ace <__swhatbuf_r+0x42>
 8009ab0:	466a      	mov	r2, sp
 8009ab2:	f000 f903 	bl	8009cbc <_fstat_r>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	dbf1      	blt.n	8009a9e <__swhatbuf_r+0x12>
 8009aba:	9a01      	ldr	r2, [sp, #4]
 8009abc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ac0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ac4:	425a      	negs	r2, r3
 8009ac6:	415a      	adcs	r2, r3
 8009ac8:	602a      	str	r2, [r5, #0]
 8009aca:	e7ee      	b.n	8009aaa <__swhatbuf_r+0x1e>
 8009acc:	2340      	movs	r3, #64	; 0x40
 8009ace:	2000      	movs	r0, #0
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	b016      	add	sp, #88	; 0x58
 8009ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ad8 <__smakebuf_r>:
 8009ad8:	898b      	ldrh	r3, [r1, #12]
 8009ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009adc:	079d      	lsls	r5, r3, #30
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	d507      	bpl.n	8009af4 <__smakebuf_r+0x1c>
 8009ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	2301      	movs	r3, #1
 8009aee:	6163      	str	r3, [r4, #20]
 8009af0:	b002      	add	sp, #8
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	466a      	mov	r2, sp
 8009af6:	ab01      	add	r3, sp, #4
 8009af8:	f7ff ffc8 	bl	8009a8c <__swhatbuf_r>
 8009afc:	9900      	ldr	r1, [sp, #0]
 8009afe:	4605      	mov	r5, r0
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7ff f969 	bl	8008dd8 <_malloc_r>
 8009b06:	b948      	cbnz	r0, 8009b1c <__smakebuf_r+0x44>
 8009b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b0c:	059a      	lsls	r2, r3, #22
 8009b0e:	d4ef      	bmi.n	8009af0 <__smakebuf_r+0x18>
 8009b10:	f023 0303 	bic.w	r3, r3, #3
 8009b14:	f043 0302 	orr.w	r3, r3, #2
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	e7e3      	b.n	8009ae4 <__smakebuf_r+0xc>
 8009b1c:	4b0d      	ldr	r3, [pc, #52]	; (8009b54 <__smakebuf_r+0x7c>)
 8009b1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	6020      	str	r0, [r4, #0]
 8009b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	9b00      	ldr	r3, [sp, #0]
 8009b2c:	6120      	str	r0, [r4, #16]
 8009b2e:	6163      	str	r3, [r4, #20]
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	b15b      	cbz	r3, 8009b4c <__smakebuf_r+0x74>
 8009b34:	4630      	mov	r0, r6
 8009b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3a:	f000 f8d1 	bl	8009ce0 <_isatty_r>
 8009b3e:	b128      	cbz	r0, 8009b4c <__smakebuf_r+0x74>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f023 0303 	bic.w	r3, r3, #3
 8009b46:	f043 0301 	orr.w	r3, r3, #1
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	89a0      	ldrh	r0, [r4, #12]
 8009b4e:	4305      	orrs	r5, r0
 8009b50:	81a5      	strh	r5, [r4, #12]
 8009b52:	e7cd      	b.n	8009af0 <__smakebuf_r+0x18>
 8009b54:	080098e5 	.word	0x080098e5

08009b58 <_malloc_usable_size_r>:
 8009b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b5c:	1f18      	subs	r0, r3, #4
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	bfbc      	itt	lt
 8009b62:	580b      	ldrlt	r3, [r1, r0]
 8009b64:	18c0      	addlt	r0, r0, r3
 8009b66:	4770      	bx	lr

08009b68 <_raise_r>:
 8009b68:	291f      	cmp	r1, #31
 8009b6a:	b538      	push	{r3, r4, r5, lr}
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	460d      	mov	r5, r1
 8009b70:	d904      	bls.n	8009b7c <_raise_r+0x14>
 8009b72:	2316      	movs	r3, #22
 8009b74:	6003      	str	r3, [r0, #0]
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b7e:	b112      	cbz	r2, 8009b86 <_raise_r+0x1e>
 8009b80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b84:	b94b      	cbnz	r3, 8009b9a <_raise_r+0x32>
 8009b86:	4620      	mov	r0, r4
 8009b88:	f000 f830 	bl	8009bec <_getpid_r>
 8009b8c:	462a      	mov	r2, r5
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4620      	mov	r0, r4
 8009b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b96:	f000 b817 	b.w	8009bc8 <_kill_r>
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d00a      	beq.n	8009bb4 <_raise_r+0x4c>
 8009b9e:	1c59      	adds	r1, r3, #1
 8009ba0:	d103      	bne.n	8009baa <_raise_r+0x42>
 8009ba2:	2316      	movs	r3, #22
 8009ba4:	6003      	str	r3, [r0, #0]
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	e7e7      	b.n	8009b7a <_raise_r+0x12>
 8009baa:	2400      	movs	r4, #0
 8009bac:	4628      	mov	r0, r5
 8009bae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bb2:	4798      	blx	r3
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e7e0      	b.n	8009b7a <_raise_r+0x12>

08009bb8 <raise>:
 8009bb8:	4b02      	ldr	r3, [pc, #8]	; (8009bc4 <raise+0xc>)
 8009bba:	4601      	mov	r1, r0
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	f7ff bfd3 	b.w	8009b68 <_raise_r>
 8009bc2:	bf00      	nop
 8009bc4:	2000000c 	.word	0x2000000c

08009bc8 <_kill_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4d06      	ldr	r5, [pc, #24]	; (8009be8 <_kill_r+0x20>)
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	602b      	str	r3, [r5, #0]
 8009bd6:	f7f8 febc 	bl	8002952 <_kill>
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	d102      	bne.n	8009be4 <_kill_r+0x1c>
 8009bde:	682b      	ldr	r3, [r5, #0]
 8009be0:	b103      	cbz	r3, 8009be4 <_kill_r+0x1c>
 8009be2:	6023      	str	r3, [r4, #0]
 8009be4:	bd38      	pop	{r3, r4, r5, pc}
 8009be6:	bf00      	nop
 8009be8:	20000674 	.word	0x20000674

08009bec <_getpid_r>:
 8009bec:	f7f8 beaa 	b.w	8002944 <_getpid>

08009bf0 <__sread>:
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf8:	f000 f894 	bl	8009d24 <_read_r>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	bfab      	itete	ge
 8009c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c02:	89a3      	ldrhlt	r3, [r4, #12]
 8009c04:	181b      	addge	r3, r3, r0
 8009c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c0a:	bfac      	ite	ge
 8009c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c0e:	81a3      	strhlt	r3, [r4, #12]
 8009c10:	bd10      	pop	{r4, pc}

08009c12 <__swrite>:
 8009c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c16:	461f      	mov	r7, r3
 8009c18:	898b      	ldrh	r3, [r1, #12]
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	05db      	lsls	r3, r3, #23
 8009c1e:	460c      	mov	r4, r1
 8009c20:	4616      	mov	r6, r2
 8009c22:	d505      	bpl.n	8009c30 <__swrite+0x1e>
 8009c24:	2302      	movs	r3, #2
 8009c26:	2200      	movs	r2, #0
 8009c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2c:	f000 f868 	bl	8009d00 <_lseek_r>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	4632      	mov	r2, r6
 8009c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	463b      	mov	r3, r7
 8009c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c46:	f000 b817 	b.w	8009c78 <_write_r>

08009c4a <__sseek>:
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c52:	f000 f855 	bl	8009d00 <_lseek_r>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	bf15      	itete	ne
 8009c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c66:	81a3      	strheq	r3, [r4, #12]
 8009c68:	bf18      	it	ne
 8009c6a:	81a3      	strhne	r3, [r4, #12]
 8009c6c:	bd10      	pop	{r4, pc}

08009c6e <__sclose>:
 8009c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c72:	f000 b813 	b.w	8009c9c <_close_r>
	...

08009c78 <_write_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	4611      	mov	r1, r2
 8009c80:	2200      	movs	r2, #0
 8009c82:	4d05      	ldr	r5, [pc, #20]	; (8009c98 <_write_r+0x20>)
 8009c84:	602a      	str	r2, [r5, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	f7f8 fe9a 	bl	80029c0 <_write>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_write_r+0x1e>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_write_r+0x1e>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20000674 	.word	0x20000674

08009c9c <_close_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	4d05      	ldr	r5, [pc, #20]	; (8009cb8 <_close_r+0x1c>)
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	f7f8 fea6 	bl	80029f8 <_close>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_close_r+0x1a>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_close_r+0x1a>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	20000674 	.word	0x20000674

08009cbc <_fstat_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4d06      	ldr	r5, [pc, #24]	; (8009cdc <_fstat_r+0x20>)
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	f7f8 fea0 	bl	8002a0e <_fstat>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d102      	bne.n	8009cd8 <_fstat_r+0x1c>
 8009cd2:	682b      	ldr	r3, [r5, #0]
 8009cd4:	b103      	cbz	r3, 8009cd8 <_fstat_r+0x1c>
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	bd38      	pop	{r3, r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000674 	.word	0x20000674

08009ce0 <_isatty_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4d05      	ldr	r5, [pc, #20]	; (8009cfc <_isatty_r+0x1c>)
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	602b      	str	r3, [r5, #0]
 8009cec:	f7f8 fe9e 	bl	8002a2c <_isatty>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_isatty_r+0x1a>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_isatty_r+0x1a>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	20000674 	.word	0x20000674

08009d00 <_lseek_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4604      	mov	r4, r0
 8009d04:	4608      	mov	r0, r1
 8009d06:	4611      	mov	r1, r2
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4d05      	ldr	r5, [pc, #20]	; (8009d20 <_lseek_r+0x20>)
 8009d0c:	602a      	str	r2, [r5, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f7f8 fe96 	bl	8002a40 <_lseek>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d102      	bne.n	8009d1e <_lseek_r+0x1e>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	b103      	cbz	r3, 8009d1e <_lseek_r+0x1e>
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	20000674 	.word	0x20000674

08009d24 <_read_r>:
 8009d24:	b538      	push	{r3, r4, r5, lr}
 8009d26:	4604      	mov	r4, r0
 8009d28:	4608      	mov	r0, r1
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4d05      	ldr	r5, [pc, #20]	; (8009d44 <_read_r+0x20>)
 8009d30:	602a      	str	r2, [r5, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	f7f8 fe27 	bl	8002986 <_read>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d102      	bne.n	8009d42 <_read_r+0x1e>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <_read_r+0x1e>
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	20000674 	.word	0x20000674

08009d48 <tan>:
 8009d48:	b530      	push	{r4, r5, lr}
 8009d4a:	4a12      	ldr	r2, [pc, #72]	; (8009d94 <tan+0x4c>)
 8009d4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d50:	4293      	cmp	r3, r2
 8009d52:	b087      	sub	sp, #28
 8009d54:	dc06      	bgt.n	8009d64 <tan+0x1c>
 8009d56:	2301      	movs	r3, #1
 8009d58:	2200      	movs	r2, #0
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f001 fb8b 	bl	800b478 <__kernel_tan>
 8009d62:	e006      	b.n	8009d72 <tan+0x2a>
 8009d64:	4a0c      	ldr	r2, [pc, #48]	; (8009d98 <tan+0x50>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	dd05      	ble.n	8009d76 <tan+0x2e>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	f7f6 f9fb 	bl	8000168 <__aeabi_dsub>
 8009d72:	b007      	add	sp, #28
 8009d74:	bd30      	pop	{r4, r5, pc}
 8009d76:	aa02      	add	r2, sp, #8
 8009d78:	f000 fd92 	bl	800a8a0 <__ieee754_rem_pio2>
 8009d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d80:	0040      	lsls	r0, r0, #1
 8009d82:	f000 0002 	and.w	r0, r0, #2
 8009d86:	f1c0 0001 	rsb	r0, r0, #1
 8009d8a:	9000      	str	r0, [sp, #0]
 8009d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d90:	e7e5      	b.n	8009d5e <tan+0x16>
 8009d92:	bf00      	nop
 8009d94:	3fe921fb 	.word	0x3fe921fb
 8009d98:	7fefffff 	.word	0x7fefffff

08009d9c <pow>:
 8009d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da0:	4614      	mov	r4, r2
 8009da2:	461d      	mov	r5, r3
 8009da4:	4680      	mov	r8, r0
 8009da6:	4689      	mov	r9, r1
 8009da8:	f000 f862 	bl	8009e70 <__ieee754_pow>
 8009dac:	4622      	mov	r2, r4
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	462b      	mov	r3, r5
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fe28 	bl	8000a0c <__aeabi_dcmpun>
 8009dbc:	bbc8      	cbnz	r0, 8009e32 <pow+0x96>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	f7f6 fdef 	bl	80009a8 <__aeabi_dcmpeq>
 8009dca:	b1b8      	cbz	r0, 8009dfc <pow+0x60>
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	f7f6 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d141      	bne.n	8009e60 <pow+0xc4>
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f001 fd75 	bl	800b8ce <finite>
 8009de4:	b328      	cbz	r0, 8009e32 <pow+0x96>
 8009de6:	2200      	movs	r2, #0
 8009de8:	2300      	movs	r3, #0
 8009dea:	4620      	mov	r0, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 fde5 	bl	80009bc <__aeabi_dcmplt>
 8009df2:	b1f0      	cbz	r0, 8009e32 <pow+0x96>
 8009df4:	f7fd f89e 	bl	8006f34 <__errno>
 8009df8:	2322      	movs	r3, #34	; 0x22
 8009dfa:	e019      	b.n	8009e30 <pow+0x94>
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f001 fd65 	bl	800b8ce <finite>
 8009e04:	b9c8      	cbnz	r0, 8009e3a <pow+0x9e>
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f001 fd60 	bl	800b8ce <finite>
 8009e0e:	b1a0      	cbz	r0, 8009e3a <pow+0x9e>
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f001 fd5b 	bl	800b8ce <finite>
 8009e18:	b178      	cbz	r0, 8009e3a <pow+0x9e>
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	463b      	mov	r3, r7
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fdf3 	bl	8000a0c <__aeabi_dcmpun>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d0e4      	beq.n	8009df4 <pow+0x58>
 8009e2a:	f7fd f883 	bl	8006f34 <__errno>
 8009e2e:	2321      	movs	r3, #33	; 0x21
 8009e30:	6003      	str	r3, [r0, #0]
 8009e32:	4630      	mov	r0, r6
 8009e34:	4639      	mov	r1, r7
 8009e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0f3      	beq.n	8009e32 <pow+0x96>
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f001 fd3e 	bl	800b8ce <finite>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d0ed      	beq.n	8009e32 <pow+0x96>
 8009e56:	4620      	mov	r0, r4
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f001 fd38 	bl	800b8ce <finite>
 8009e5e:	e7c8      	b.n	8009df2 <pow+0x56>
 8009e60:	2600      	movs	r6, #0
 8009e62:	4f01      	ldr	r7, [pc, #4]	; (8009e68 <pow+0xcc>)
 8009e64:	e7e5      	b.n	8009e32 <pow+0x96>
 8009e66:	bf00      	nop
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	00000000 	.word	0x00000000

08009e70 <__ieee754_pow>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	b093      	sub	sp, #76	; 0x4c
 8009e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e7a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009e7e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009e82:	4689      	mov	r9, r1
 8009e84:	ea56 0102 	orrs.w	r1, r6, r2
 8009e88:	4680      	mov	r8, r0
 8009e8a:	d111      	bne.n	8009eb0 <__ieee754_pow+0x40>
 8009e8c:	1803      	adds	r3, r0, r0
 8009e8e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009e92:	4152      	adcs	r2, r2
 8009e94:	4299      	cmp	r1, r3
 8009e96:	4b82      	ldr	r3, [pc, #520]	; (800a0a0 <__ieee754_pow+0x230>)
 8009e98:	4193      	sbcs	r3, r2
 8009e9a:	f080 84b9 	bcs.w	800a810 <__ieee754_pow+0x9a0>
 8009e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	f7f6 f961 	bl	800016c <__adddf3>
 8009eaa:	4683      	mov	fp, r0
 8009eac:	468c      	mov	ip, r1
 8009eae:	e06f      	b.n	8009f90 <__ieee754_pow+0x120>
 8009eb0:	4b7c      	ldr	r3, [pc, #496]	; (800a0a4 <__ieee754_pow+0x234>)
 8009eb2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	464d      	mov	r5, r9
 8009eba:	4682      	mov	sl, r0
 8009ebc:	dc06      	bgt.n	8009ecc <__ieee754_pow+0x5c>
 8009ebe:	d101      	bne.n	8009ec4 <__ieee754_pow+0x54>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d1ec      	bne.n	8009e9e <__ieee754_pow+0x2e>
 8009ec4:	429e      	cmp	r6, r3
 8009ec6:	dc01      	bgt.n	8009ecc <__ieee754_pow+0x5c>
 8009ec8:	d10f      	bne.n	8009eea <__ieee754_pow+0x7a>
 8009eca:	b172      	cbz	r2, 8009eea <__ieee754_pow+0x7a>
 8009ecc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009ed0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009ed4:	ea55 050a 	orrs.w	r5, r5, sl
 8009ed8:	d1e1      	bne.n	8009e9e <__ieee754_pow+0x2e>
 8009eda:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ede:	18db      	adds	r3, r3, r3
 8009ee0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009ee4:	4152      	adcs	r2, r2
 8009ee6:	429d      	cmp	r5, r3
 8009ee8:	e7d5      	b.n	8009e96 <__ieee754_pow+0x26>
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	da39      	bge.n	8009f62 <__ieee754_pow+0xf2>
 8009eee:	4b6e      	ldr	r3, [pc, #440]	; (800a0a8 <__ieee754_pow+0x238>)
 8009ef0:	429e      	cmp	r6, r3
 8009ef2:	dc52      	bgt.n	8009f9a <__ieee754_pow+0x12a>
 8009ef4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009ef8:	429e      	cmp	r6, r3
 8009efa:	f340 849c 	ble.w	800a836 <__ieee754_pow+0x9c6>
 8009efe:	1533      	asrs	r3, r6, #20
 8009f00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f04:	2b14      	cmp	r3, #20
 8009f06:	dd0f      	ble.n	8009f28 <__ieee754_pow+0xb8>
 8009f08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009f0c:	fa22 f103 	lsr.w	r1, r2, r3
 8009f10:	fa01 f303 	lsl.w	r3, r1, r3
 8009f14:	4293      	cmp	r3, r2
 8009f16:	f040 848e 	bne.w	800a836 <__ieee754_pow+0x9c6>
 8009f1a:	f001 0101 	and.w	r1, r1, #1
 8009f1e:	f1c1 0302 	rsb	r3, r1, #2
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	b182      	cbz	r2, 8009f48 <__ieee754_pow+0xd8>
 8009f26:	e05d      	b.n	8009fe4 <__ieee754_pow+0x174>
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	d159      	bne.n	8009fe0 <__ieee754_pow+0x170>
 8009f2c:	f1c3 0314 	rsb	r3, r3, #20
 8009f30:	fa46 f103 	asr.w	r1, r6, r3
 8009f34:	fa01 f303 	lsl.w	r3, r1, r3
 8009f38:	42b3      	cmp	r3, r6
 8009f3a:	f040 8479 	bne.w	800a830 <__ieee754_pow+0x9c0>
 8009f3e:	f001 0101 	and.w	r1, r1, #1
 8009f42:	f1c1 0302 	rsb	r3, r1, #2
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	4b58      	ldr	r3, [pc, #352]	; (800a0ac <__ieee754_pow+0x23c>)
 8009f4a:	429e      	cmp	r6, r3
 8009f4c:	d132      	bne.n	8009fb4 <__ieee754_pow+0x144>
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	f280 846a 	bge.w	800a828 <__ieee754_pow+0x9b8>
 8009f54:	4642      	mov	r2, r8
 8009f56:	464b      	mov	r3, r9
 8009f58:	2000      	movs	r0, #0
 8009f5a:	4954      	ldr	r1, [pc, #336]	; (800a0ac <__ieee754_pow+0x23c>)
 8009f5c:	f7f6 fbe6 	bl	800072c <__aeabi_ddiv>
 8009f60:	e7a3      	b.n	8009eaa <__ieee754_pow+0x3a>
 8009f62:	2300      	movs	r3, #0
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	d13c      	bne.n	8009fe4 <__ieee754_pow+0x174>
 8009f6a:	4b4e      	ldr	r3, [pc, #312]	; (800a0a4 <__ieee754_pow+0x234>)
 8009f6c:	429e      	cmp	r6, r3
 8009f6e:	d1eb      	bne.n	8009f48 <__ieee754_pow+0xd8>
 8009f70:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009f74:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009f78:	ea53 030a 	orrs.w	r3, r3, sl
 8009f7c:	f000 8448 	beq.w	800a810 <__ieee754_pow+0x9a0>
 8009f80:	4b4b      	ldr	r3, [pc, #300]	; (800a0b0 <__ieee754_pow+0x240>)
 8009f82:	429c      	cmp	r4, r3
 8009f84:	dd0b      	ble.n	8009f9e <__ieee754_pow+0x12e>
 8009f86:	2f00      	cmp	r7, #0
 8009f88:	f2c0 8448 	blt.w	800a81c <__ieee754_pow+0x9ac>
 8009f8c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009f90:	4658      	mov	r0, fp
 8009f92:	4661      	mov	r1, ip
 8009f94:	b013      	add	sp, #76	; 0x4c
 8009f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e7e2      	b.n	8009f64 <__ieee754_pow+0xf4>
 8009f9e:	2f00      	cmp	r7, #0
 8009fa0:	f04f 0b00 	mov.w	fp, #0
 8009fa4:	f04f 0c00 	mov.w	ip, #0
 8009fa8:	daf2      	bge.n	8009f90 <__ieee754_pow+0x120>
 8009faa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009fae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009fb2:	e7ed      	b.n	8009f90 <__ieee754_pow+0x120>
 8009fb4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009fb8:	d106      	bne.n	8009fc8 <__ieee754_pow+0x158>
 8009fba:	4642      	mov	r2, r8
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	f7f6 fa89 	bl	80004d8 <__aeabi_dmul>
 8009fc6:	e770      	b.n	8009eaa <__ieee754_pow+0x3a>
 8009fc8:	4b3a      	ldr	r3, [pc, #232]	; (800a0b4 <__ieee754_pow+0x244>)
 8009fca:	429f      	cmp	r7, r3
 8009fcc:	d10a      	bne.n	8009fe4 <__ieee754_pow+0x174>
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	db08      	blt.n	8009fe4 <__ieee754_pow+0x174>
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	b013      	add	sp, #76	; 0x4c
 8009fd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	f000 be58 	b.w	800ac90 <__ieee754_sqrt>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	f001 fc6e 	bl	800b8c8 <fabs>
 8009fec:	4683      	mov	fp, r0
 8009fee:	468c      	mov	ip, r1
 8009ff0:	f1ba 0f00 	cmp.w	sl, #0
 8009ff4:	d128      	bne.n	800a048 <__ieee754_pow+0x1d8>
 8009ff6:	b124      	cbz	r4, 800a002 <__ieee754_pow+0x192>
 8009ff8:	4b2c      	ldr	r3, [pc, #176]	; (800a0ac <__ieee754_pow+0x23c>)
 8009ffa:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d122      	bne.n	800a048 <__ieee754_pow+0x1d8>
 800a002:	2f00      	cmp	r7, #0
 800a004:	da07      	bge.n	800a016 <__ieee754_pow+0x1a6>
 800a006:	465a      	mov	r2, fp
 800a008:	4663      	mov	r3, ip
 800a00a:	2000      	movs	r0, #0
 800a00c:	4927      	ldr	r1, [pc, #156]	; (800a0ac <__ieee754_pow+0x23c>)
 800a00e:	f7f6 fb8d 	bl	800072c <__aeabi_ddiv>
 800a012:	4683      	mov	fp, r0
 800a014:	468c      	mov	ip, r1
 800a016:	2d00      	cmp	r5, #0
 800a018:	daba      	bge.n	8009f90 <__ieee754_pow+0x120>
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a020:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a024:	4323      	orrs	r3, r4
 800a026:	d108      	bne.n	800a03a <__ieee754_pow+0x1ca>
 800a028:	465a      	mov	r2, fp
 800a02a:	4663      	mov	r3, ip
 800a02c:	4658      	mov	r0, fp
 800a02e:	4661      	mov	r1, ip
 800a030:	f7f6 f89a 	bl	8000168 <__aeabi_dsub>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	e790      	b.n	8009f5c <__ieee754_pow+0xec>
 800a03a:	9b00      	ldr	r3, [sp, #0]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d1a7      	bne.n	8009f90 <__ieee754_pow+0x120>
 800a040:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a044:	469c      	mov	ip, r3
 800a046:	e7a3      	b.n	8009f90 <__ieee754_pow+0x120>
 800a048:	0feb      	lsrs	r3, r5, #31
 800a04a:	3b01      	subs	r3, #1
 800a04c:	930c      	str	r3, [sp, #48]	; 0x30
 800a04e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	4313      	orrs	r3, r2
 800a054:	d104      	bne.n	800a060 <__ieee754_pow+0x1f0>
 800a056:	4642      	mov	r2, r8
 800a058:	464b      	mov	r3, r9
 800a05a:	4640      	mov	r0, r8
 800a05c:	4649      	mov	r1, r9
 800a05e:	e7e7      	b.n	800a030 <__ieee754_pow+0x1c0>
 800a060:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <__ieee754_pow+0x248>)
 800a062:	429e      	cmp	r6, r3
 800a064:	f340 80f6 	ble.w	800a254 <__ieee754_pow+0x3e4>
 800a068:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a06c:	429e      	cmp	r6, r3
 800a06e:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <__ieee754_pow+0x240>)
 800a070:	dd09      	ble.n	800a086 <__ieee754_pow+0x216>
 800a072:	429c      	cmp	r4, r3
 800a074:	dc0c      	bgt.n	800a090 <__ieee754_pow+0x220>
 800a076:	2f00      	cmp	r7, #0
 800a078:	da0c      	bge.n	800a094 <__ieee754_pow+0x224>
 800a07a:	2000      	movs	r0, #0
 800a07c:	b013      	add	sp, #76	; 0x4c
 800a07e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a082:	f001 bc1c 	b.w	800b8be <__math_oflow>
 800a086:	429c      	cmp	r4, r3
 800a088:	dbf5      	blt.n	800a076 <__ieee754_pow+0x206>
 800a08a:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <__ieee754_pow+0x23c>)
 800a08c:	429c      	cmp	r4, r3
 800a08e:	dd15      	ble.n	800a0bc <__ieee754_pow+0x24c>
 800a090:	2f00      	cmp	r7, #0
 800a092:	dcf2      	bgt.n	800a07a <__ieee754_pow+0x20a>
 800a094:	2000      	movs	r0, #0
 800a096:	b013      	add	sp, #76	; 0x4c
 800a098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	f001 bc0a 	b.w	800b8b4 <__math_uflow>
 800a0a0:	fff00000 	.word	0xfff00000
 800a0a4:	7ff00000 	.word	0x7ff00000
 800a0a8:	433fffff 	.word	0x433fffff
 800a0ac:	3ff00000 	.word	0x3ff00000
 800a0b0:	3fefffff 	.word	0x3fefffff
 800a0b4:	3fe00000 	.word	0x3fe00000
 800a0b8:	41e00000 	.word	0x41e00000
 800a0bc:	4661      	mov	r1, ip
 800a0be:	2200      	movs	r2, #0
 800a0c0:	4658      	mov	r0, fp
 800a0c2:	4b5f      	ldr	r3, [pc, #380]	; (800a240 <__ieee754_pow+0x3d0>)
 800a0c4:	f7f6 f850 	bl	8000168 <__aeabi_dsub>
 800a0c8:	a355      	add	r3, pc, #340	; (adr r3, 800a220 <__ieee754_pow+0x3b0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	f7f6 fa01 	bl	80004d8 <__aeabi_dmul>
 800a0d6:	a354      	add	r3, pc, #336	; (adr r3, 800a228 <__ieee754_pow+0x3b8>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	4606      	mov	r6, r0
 800a0de:	460f      	mov	r7, r1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 f9f8 	bl	80004d8 <__aeabi_dmul>
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4682      	mov	sl, r0
 800a0ec:	468b      	mov	fp, r1
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4b54      	ldr	r3, [pc, #336]	; (800a244 <__ieee754_pow+0x3d4>)
 800a0f4:	f7f6 f9f0 	bl	80004d8 <__aeabi_dmul>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	a14c      	add	r1, pc, #304	; (adr r1, 800a230 <__ieee754_pow+0x3c0>)
 800a0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a102:	f7f6 f831 	bl	8000168 <__aeabi_dsub>
 800a106:	4622      	mov	r2, r4
 800a108:	462b      	mov	r3, r5
 800a10a:	f7f6 f9e5 	bl	80004d8 <__aeabi_dmul>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	2000      	movs	r0, #0
 800a114:	494c      	ldr	r1, [pc, #304]	; (800a248 <__ieee754_pow+0x3d8>)
 800a116:	f7f6 f827 	bl	8000168 <__aeabi_dsub>
 800a11a:	4622      	mov	r2, r4
 800a11c:	462b      	mov	r3, r5
 800a11e:	4680      	mov	r8, r0
 800a120:	4689      	mov	r9, r1
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 f9d7 	bl	80004d8 <__aeabi_dmul>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4640      	mov	r0, r8
 800a130:	4649      	mov	r1, r9
 800a132:	f7f6 f9d1 	bl	80004d8 <__aeabi_dmul>
 800a136:	a340      	add	r3, pc, #256	; (adr r3, 800a238 <__ieee754_pow+0x3c8>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 f9cc 	bl	80004d8 <__aeabi_dmul>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4650      	mov	r0, sl
 800a146:	4659      	mov	r1, fp
 800a148:	f7f6 f80e 	bl	8000168 <__aeabi_dsub>
 800a14c:	f04f 0a00 	mov.w	sl, #0
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4604      	mov	r4, r0
 800a156:	460d      	mov	r5, r1
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 f806 	bl	800016c <__adddf3>
 800a160:	4632      	mov	r2, r6
 800a162:	463b      	mov	r3, r7
 800a164:	4650      	mov	r0, sl
 800a166:	468b      	mov	fp, r1
 800a168:	f7f5 fffe 	bl	8000168 <__aeabi_dsub>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4620      	mov	r0, r4
 800a172:	4629      	mov	r1, r5
 800a174:	f7f5 fff8 	bl	8000168 <__aeabi_dsub>
 800a178:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a17c:	9b00      	ldr	r3, [sp, #0]
 800a17e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a180:	3b01      	subs	r3, #1
 800a182:	4313      	orrs	r3, r2
 800a184:	f04f 0600 	mov.w	r6, #0
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	bf0c      	ite	eq
 800a18e:	4b2f      	ldreq	r3, [pc, #188]	; (800a24c <__ieee754_pow+0x3dc>)
 800a190:	4b2b      	ldrne	r3, [pc, #172]	; (800a240 <__ieee754_pow+0x3d0>)
 800a192:	4604      	mov	r4, r0
 800a194:	460d      	mov	r5, r1
 800a196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a19a:	e9cd 2300 	strd	r2, r3, [sp]
 800a19e:	4632      	mov	r2, r6
 800a1a0:	463b      	mov	r3, r7
 800a1a2:	f7f5 ffe1 	bl	8000168 <__aeabi_dsub>
 800a1a6:	4652      	mov	r2, sl
 800a1a8:	465b      	mov	r3, fp
 800a1aa:	f7f6 f995 	bl	80004d8 <__aeabi_dmul>
 800a1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	4689      	mov	r9, r1
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 f98d 	bl	80004d8 <__aeabi_dmul>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	f7f5 ffd1 	bl	800016c <__adddf3>
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	4689      	mov	r9, r1
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	f7f6 f97f 	bl	80004d8 <__aeabi_dmul>
 800a1da:	4604      	mov	r4, r0
 800a1dc:	460d      	mov	r5, r1
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a1ea:	f7f5 ffbf 	bl	800016c <__adddf3>
 800a1ee:	4b18      	ldr	r3, [pc, #96]	; (800a250 <__ieee754_pow+0x3e0>)
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	4299      	cmp	r1, r3
 800a1f4:	460f      	mov	r7, r1
 800a1f6:	460e      	mov	r6, r1
 800a1f8:	f340 82e5 	ble.w	800a7c6 <__ieee754_pow+0x956>
 800a1fc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a200:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a204:	4303      	orrs	r3, r0
 800a206:	f000 81df 	beq.w	800a5c8 <__ieee754_pow+0x758>
 800a20a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a20e:	2200      	movs	r2, #0
 800a210:	2300      	movs	r3, #0
 800a212:	f7f6 fbd3 	bl	80009bc <__aeabi_dcmplt>
 800a216:	3800      	subs	r0, #0
 800a218:	bf18      	it	ne
 800a21a:	2001      	movne	r0, #1
 800a21c:	e72e      	b.n	800a07c <__ieee754_pow+0x20c>
 800a21e:	bf00      	nop
 800a220:	60000000 	.word	0x60000000
 800a224:	3ff71547 	.word	0x3ff71547
 800a228:	f85ddf44 	.word	0xf85ddf44
 800a22c:	3e54ae0b 	.word	0x3e54ae0b
 800a230:	55555555 	.word	0x55555555
 800a234:	3fd55555 	.word	0x3fd55555
 800a238:	652b82fe 	.word	0x652b82fe
 800a23c:	3ff71547 	.word	0x3ff71547
 800a240:	3ff00000 	.word	0x3ff00000
 800a244:	3fd00000 	.word	0x3fd00000
 800a248:	3fe00000 	.word	0x3fe00000
 800a24c:	bff00000 	.word	0xbff00000
 800a250:	408fffff 	.word	0x408fffff
 800a254:	4bd2      	ldr	r3, [pc, #840]	; (800a5a0 <__ieee754_pow+0x730>)
 800a256:	2200      	movs	r2, #0
 800a258:	402b      	ands	r3, r5
 800a25a:	b943      	cbnz	r3, 800a26e <__ieee754_pow+0x3fe>
 800a25c:	4658      	mov	r0, fp
 800a25e:	4661      	mov	r1, ip
 800a260:	4bd0      	ldr	r3, [pc, #832]	; (800a5a4 <__ieee754_pow+0x734>)
 800a262:	f7f6 f939 	bl	80004d8 <__aeabi_dmul>
 800a266:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a26a:	4683      	mov	fp, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	1523      	asrs	r3, r4, #20
 800a270:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a274:	4413      	add	r3, r2
 800a276:	930b      	str	r3, [sp, #44]	; 0x2c
 800a278:	4bcb      	ldr	r3, [pc, #812]	; (800a5a8 <__ieee754_pow+0x738>)
 800a27a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a27e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a282:	429c      	cmp	r4, r3
 800a284:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a288:	dd08      	ble.n	800a29c <__ieee754_pow+0x42c>
 800a28a:	4bc8      	ldr	r3, [pc, #800]	; (800a5ac <__ieee754_pow+0x73c>)
 800a28c:	429c      	cmp	r4, r3
 800a28e:	f340 8199 	ble.w	800a5c4 <__ieee754_pow+0x754>
 800a292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a294:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a298:	3301      	adds	r3, #1
 800a29a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a29c:	2600      	movs	r6, #0
 800a29e:	00f3      	lsls	r3, r6, #3
 800a2a0:	930d      	str	r3, [sp, #52]	; 0x34
 800a2a2:	4bc3      	ldr	r3, [pc, #780]	; (800a5b0 <__ieee754_pow+0x740>)
 800a2a4:	4658      	mov	r0, fp
 800a2a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a2b6:	4623      	mov	r3, r4
 800a2b8:	f7f5 ff56 	bl	8000168 <__aeabi_dsub>
 800a2bc:	46da      	mov	sl, fp
 800a2be:	462b      	mov	r3, r5
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a2c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2ca:	f7f5 ff4f 	bl	800016c <__adddf3>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	49b7      	ldr	r1, [pc, #732]	; (800a5b4 <__ieee754_pow+0x744>)
 800a2d6:	f7f6 fa29 	bl	800072c <__aeabi_ddiv>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a2e6:	f7f6 f8f7 	bl	80004d8 <__aeabi_dmul>
 800a2ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a2ee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a2f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	46ab      	mov	fp, r5
 800a2fc:	106d      	asrs	r5, r5, #1
 800a2fe:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a308:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a30c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a310:	4640      	mov	r0, r8
 800a312:	4649      	mov	r1, r9
 800a314:	4614      	mov	r4, r2
 800a316:	461d      	mov	r5, r3
 800a318:	f7f6 f8de 	bl	80004d8 <__aeabi_dmul>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a324:	f7f5 ff20 	bl	8000168 <__aeabi_dsub>
 800a328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a32c:	4606      	mov	r6, r0
 800a32e:	460f      	mov	r7, r1
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f5 ff18 	bl	8000168 <__aeabi_dsub>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4650      	mov	r0, sl
 800a33e:	4659      	mov	r1, fp
 800a340:	f7f5 ff12 	bl	8000168 <__aeabi_dsub>
 800a344:	4642      	mov	r2, r8
 800a346:	464b      	mov	r3, r9
 800a348:	f7f6 f8c6 	bl	80004d8 <__aeabi_dmul>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f5 ff08 	bl	8000168 <__aeabi_dsub>
 800a358:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a35c:	f7f6 f8bc 	bl	80004d8 <__aeabi_dmul>
 800a360:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a364:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a368:	4610      	mov	r0, r2
 800a36a:	4619      	mov	r1, r3
 800a36c:	f7f6 f8b4 	bl	80004d8 <__aeabi_dmul>
 800a370:	a379      	add	r3, pc, #484	; (adr r3, 800a558 <__ieee754_pow+0x6e8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	f7f6 f8ad 	bl	80004d8 <__aeabi_dmul>
 800a37e:	a378      	add	r3, pc, #480	; (adr r3, 800a560 <__ieee754_pow+0x6f0>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f7f5 fef2 	bl	800016c <__adddf3>
 800a388:	4622      	mov	r2, r4
 800a38a:	462b      	mov	r3, r5
 800a38c:	f7f6 f8a4 	bl	80004d8 <__aeabi_dmul>
 800a390:	a375      	add	r3, pc, #468	; (adr r3, 800a568 <__ieee754_pow+0x6f8>)
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f7f5 fee9 	bl	800016c <__adddf3>
 800a39a:	4622      	mov	r2, r4
 800a39c:	462b      	mov	r3, r5
 800a39e:	f7f6 f89b 	bl	80004d8 <__aeabi_dmul>
 800a3a2:	a373      	add	r3, pc, #460	; (adr r3, 800a570 <__ieee754_pow+0x700>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f5 fee0 	bl	800016c <__adddf3>
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	f7f6 f892 	bl	80004d8 <__aeabi_dmul>
 800a3b4:	a370      	add	r3, pc, #448	; (adr r3, 800a578 <__ieee754_pow+0x708>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	f7f5 fed7 	bl	800016c <__adddf3>
 800a3be:	4622      	mov	r2, r4
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	f7f6 f889 	bl	80004d8 <__aeabi_dmul>
 800a3c6:	a36e      	add	r3, pc, #440	; (adr r3, 800a580 <__ieee754_pow+0x710>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f5 fece 	bl	800016c <__adddf3>
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	460f      	mov	r7, r1
 800a3d6:	462b      	mov	r3, r5
 800a3d8:	4620      	mov	r0, r4
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7f6 f87c 	bl	80004d8 <__aeabi_dmul>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	f7f6 f876 	bl	80004d8 <__aeabi_dmul>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3f4:	4642      	mov	r2, r8
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	f7f5 feb8 	bl	800016c <__adddf3>
 800a3fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a400:	f7f6 f86a 	bl	80004d8 <__aeabi_dmul>
 800a404:	4622      	mov	r2, r4
 800a406:	462b      	mov	r3, r5
 800a408:	f7f5 feb0 	bl	800016c <__adddf3>
 800a40c:	4642      	mov	r2, r8
 800a40e:	4606      	mov	r6, r0
 800a410:	460f      	mov	r7, r1
 800a412:	464b      	mov	r3, r9
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f6 f85e 	bl	80004d8 <__aeabi_dmul>
 800a41c:	2200      	movs	r2, #0
 800a41e:	4b66      	ldr	r3, [pc, #408]	; (800a5b8 <__ieee754_pow+0x748>)
 800a420:	4682      	mov	sl, r0
 800a422:	468b      	mov	fp, r1
 800a424:	f7f5 fea2 	bl	800016c <__adddf3>
 800a428:	4632      	mov	r2, r6
 800a42a:	463b      	mov	r3, r7
 800a42c:	f7f5 fe9e 	bl	800016c <__adddf3>
 800a430:	2400      	movs	r4, #0
 800a432:	460d      	mov	r5, r1
 800a434:	4622      	mov	r2, r4
 800a436:	460b      	mov	r3, r1
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	f7f6 f84c 	bl	80004d8 <__aeabi_dmul>
 800a440:	2200      	movs	r2, #0
 800a442:	4680      	mov	r8, r0
 800a444:	4689      	mov	r9, r1
 800a446:	4620      	mov	r0, r4
 800a448:	4629      	mov	r1, r5
 800a44a:	4b5b      	ldr	r3, [pc, #364]	; (800a5b8 <__ieee754_pow+0x748>)
 800a44c:	f7f5 fe8c 	bl	8000168 <__aeabi_dsub>
 800a450:	4652      	mov	r2, sl
 800a452:	465b      	mov	r3, fp
 800a454:	f7f5 fe88 	bl	8000168 <__aeabi_dsub>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	4630      	mov	r0, r6
 800a45e:	4639      	mov	r1, r7
 800a460:	f7f5 fe82 	bl	8000168 <__aeabi_dsub>
 800a464:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a468:	f7f6 f836 	bl	80004d8 <__aeabi_dmul>
 800a46c:	4622      	mov	r2, r4
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a476:	462b      	mov	r3, r5
 800a478:	f7f6 f82e 	bl	80004d8 <__aeabi_dmul>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4630      	mov	r0, r6
 800a482:	4639      	mov	r1, r7
 800a484:	f7f5 fe72 	bl	800016c <__adddf3>
 800a488:	2400      	movs	r4, #0
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4640      	mov	r0, r8
 800a494:	4649      	mov	r1, r9
 800a496:	f7f5 fe69 	bl	800016c <__adddf3>
 800a49a:	a33b      	add	r3, pc, #236	; (adr r3, 800a588 <__ieee754_pow+0x718>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	f7f6 f818 	bl	80004d8 <__aeabi_dmul>
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	464b      	mov	r3, r9
 800a4ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	f7f5 fe58 	bl	8000168 <__aeabi_dsub>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4630      	mov	r0, r6
 800a4be:	4639      	mov	r1, r7
 800a4c0:	f7f5 fe52 	bl	8000168 <__aeabi_dsub>
 800a4c4:	a332      	add	r3, pc, #200	; (adr r3, 800a590 <__ieee754_pow+0x720>)
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f7f6 f805 	bl	80004d8 <__aeabi_dmul>
 800a4ce:	a332      	add	r3, pc, #200	; (adr r3, 800a598 <__ieee754_pow+0x728>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7f5 fffc 	bl	80004d8 <__aeabi_dmul>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	f7f5 fe40 	bl	800016c <__adddf3>
 800a4ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4ee:	4b33      	ldr	r3, [pc, #204]	; (800a5bc <__ieee754_pow+0x74c>)
 800a4f0:	f04f 0a00 	mov.w	sl, #0
 800a4f4:	4413      	add	r3, r2
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f7f5 fe37 	bl	800016c <__adddf3>
 800a4fe:	4680      	mov	r8, r0
 800a500:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a502:	4689      	mov	r9, r1
 800a504:	f7f5 ff7e 	bl	8000404 <__aeabi_i2d>
 800a508:	4604      	mov	r4, r0
 800a50a:	460d      	mov	r5, r1
 800a50c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a50e:	4b2c      	ldr	r3, [pc, #176]	; (800a5c0 <__ieee754_pow+0x750>)
 800a510:	4413      	add	r3, r2
 800a512:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a516:	4642      	mov	r2, r8
 800a518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a51c:	464b      	mov	r3, r9
 800a51e:	f7f5 fe25 	bl	800016c <__adddf3>
 800a522:	4632      	mov	r2, r6
 800a524:	463b      	mov	r3, r7
 800a526:	f7f5 fe21 	bl	800016c <__adddf3>
 800a52a:	4622      	mov	r2, r4
 800a52c:	462b      	mov	r3, r5
 800a52e:	f7f5 fe1d 	bl	800016c <__adddf3>
 800a532:	4622      	mov	r2, r4
 800a534:	462b      	mov	r3, r5
 800a536:	4650      	mov	r0, sl
 800a538:	468b      	mov	fp, r1
 800a53a:	f7f5 fe15 	bl	8000168 <__aeabi_dsub>
 800a53e:	4632      	mov	r2, r6
 800a540:	463b      	mov	r3, r7
 800a542:	f7f5 fe11 	bl	8000168 <__aeabi_dsub>
 800a546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a54a:	f7f5 fe0d 	bl	8000168 <__aeabi_dsub>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	e60d      	b.n	800a174 <__ieee754_pow+0x304>
 800a558:	4a454eef 	.word	0x4a454eef
 800a55c:	3fca7e28 	.word	0x3fca7e28
 800a560:	93c9db65 	.word	0x93c9db65
 800a564:	3fcd864a 	.word	0x3fcd864a
 800a568:	a91d4101 	.word	0xa91d4101
 800a56c:	3fd17460 	.word	0x3fd17460
 800a570:	518f264d 	.word	0x518f264d
 800a574:	3fd55555 	.word	0x3fd55555
 800a578:	db6fabff 	.word	0xdb6fabff
 800a57c:	3fdb6db6 	.word	0x3fdb6db6
 800a580:	33333303 	.word	0x33333303
 800a584:	3fe33333 	.word	0x3fe33333
 800a588:	e0000000 	.word	0xe0000000
 800a58c:	3feec709 	.word	0x3feec709
 800a590:	dc3a03fd 	.word	0xdc3a03fd
 800a594:	3feec709 	.word	0x3feec709
 800a598:	145b01f5 	.word	0x145b01f5
 800a59c:	be3e2fe0 	.word	0xbe3e2fe0
 800a5a0:	7ff00000 	.word	0x7ff00000
 800a5a4:	43400000 	.word	0x43400000
 800a5a8:	0003988e 	.word	0x0003988e
 800a5ac:	000bb679 	.word	0x000bb679
 800a5b0:	0800bf80 	.word	0x0800bf80
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	40080000 	.word	0x40080000
 800a5bc:	0800bfa0 	.word	0x0800bfa0
 800a5c0:	0800bf90 	.word	0x0800bf90
 800a5c4:	2601      	movs	r6, #1
 800a5c6:	e66a      	b.n	800a29e <__ieee754_pow+0x42e>
 800a5c8:	a39d      	add	r3, pc, #628	; (adr r3, 800a840 <__ieee754_pow+0x9d0>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f5 fdcb 	bl	800016c <__adddf3>
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5dc:	462b      	mov	r3, r5
 800a5de:	4650      	mov	r0, sl
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	f7f5 fdc1 	bl	8000168 <__aeabi_dsub>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ee:	f7f6 fa03 	bl	80009f8 <__aeabi_dcmpgt>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f47f ae09 	bne.w	800a20a <__ieee754_pow+0x39a>
 800a5f8:	4aa3      	ldr	r2, [pc, #652]	; (800a888 <__ieee754_pow+0xa18>)
 800a5fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a5fe:	4293      	cmp	r3, r2
 800a600:	f340 8101 	ble.w	800a806 <__ieee754_pow+0x996>
 800a604:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a608:	2000      	movs	r0, #0
 800a60a:	151b      	asrs	r3, r3, #20
 800a60c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a610:	fa4a f303 	asr.w	r3, sl, r3
 800a614:	4433      	add	r3, r6
 800a616:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a61a:	4f9c      	ldr	r7, [pc, #624]	; (800a88c <__ieee754_pow+0xa1c>)
 800a61c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a620:	4117      	asrs	r7, r2
 800a622:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a626:	ea23 0107 	bic.w	r1, r3, r7
 800a62a:	f1c2 0214 	rsb	r2, r2, #20
 800a62e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a632:	460b      	mov	r3, r1
 800a634:	fa4a fa02 	asr.w	sl, sl, r2
 800a638:	2e00      	cmp	r6, #0
 800a63a:	4602      	mov	r2, r0
 800a63c:	4629      	mov	r1, r5
 800a63e:	4620      	mov	r0, r4
 800a640:	bfb8      	it	lt
 800a642:	f1ca 0a00 	rsblt	sl, sl, #0
 800a646:	f7f5 fd8f 	bl	8000168 <__aeabi_dsub>
 800a64a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a652:	2400      	movs	r4, #0
 800a654:	4642      	mov	r2, r8
 800a656:	464b      	mov	r3, r9
 800a658:	f7f5 fd88 	bl	800016c <__adddf3>
 800a65c:	a37a      	add	r3, pc, #488	; (adr r3, 800a848 <__ieee754_pow+0x9d8>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	4620      	mov	r0, r4
 800a664:	460d      	mov	r5, r1
 800a666:	f7f5 ff37 	bl	80004d8 <__aeabi_dmul>
 800a66a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a66e:	4606      	mov	r6, r0
 800a670:	460f      	mov	r7, r1
 800a672:	4620      	mov	r0, r4
 800a674:	4629      	mov	r1, r5
 800a676:	f7f5 fd77 	bl	8000168 <__aeabi_dsub>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4640      	mov	r0, r8
 800a680:	4649      	mov	r1, r9
 800a682:	f7f5 fd71 	bl	8000168 <__aeabi_dsub>
 800a686:	a372      	add	r3, pc, #456	; (adr r3, 800a850 <__ieee754_pow+0x9e0>)
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f7f5 ff24 	bl	80004d8 <__aeabi_dmul>
 800a690:	a371      	add	r3, pc, #452	; (adr r3, 800a858 <__ieee754_pow+0x9e8>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	4680      	mov	r8, r0
 800a698:	4689      	mov	r9, r1
 800a69a:	4620      	mov	r0, r4
 800a69c:	4629      	mov	r1, r5
 800a69e:	f7f5 ff1b 	bl	80004d8 <__aeabi_dmul>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7f5 fd5f 	bl	800016c <__adddf3>
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	f7f5 fd57 	bl	800016c <__adddf3>
 800a6be:	4632      	mov	r2, r6
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	4680      	mov	r8, r0
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	f7f5 fd4f 	bl	8000168 <__aeabi_dsub>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f7f5 fd49 	bl	8000168 <__aeabi_dsub>
 800a6d6:	4642      	mov	r2, r8
 800a6d8:	4606      	mov	r6, r0
 800a6da:	460f      	mov	r7, r1
 800a6dc:	464b      	mov	r3, r9
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 fef9 	bl	80004d8 <__aeabi_dmul>
 800a6e6:	a35e      	add	r3, pc, #376	; (adr r3, 800a860 <__ieee754_pow+0x9f0>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	460d      	mov	r5, r1
 800a6f0:	f7f5 fef2 	bl	80004d8 <__aeabi_dmul>
 800a6f4:	a35c      	add	r3, pc, #368	; (adr r3, 800a868 <__ieee754_pow+0x9f8>)
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f7f5 fd35 	bl	8000168 <__aeabi_dsub>
 800a6fe:	4622      	mov	r2, r4
 800a700:	462b      	mov	r3, r5
 800a702:	f7f5 fee9 	bl	80004d8 <__aeabi_dmul>
 800a706:	a35a      	add	r3, pc, #360	; (adr r3, 800a870 <__ieee754_pow+0xa00>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f7f5 fd2e 	bl	800016c <__adddf3>
 800a710:	4622      	mov	r2, r4
 800a712:	462b      	mov	r3, r5
 800a714:	f7f5 fee0 	bl	80004d8 <__aeabi_dmul>
 800a718:	a357      	add	r3, pc, #348	; (adr r3, 800a878 <__ieee754_pow+0xa08>)
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f7f5 fd23 	bl	8000168 <__aeabi_dsub>
 800a722:	4622      	mov	r2, r4
 800a724:	462b      	mov	r3, r5
 800a726:	f7f5 fed7 	bl	80004d8 <__aeabi_dmul>
 800a72a:	a355      	add	r3, pc, #340	; (adr r3, 800a880 <__ieee754_pow+0xa10>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f5 fd1c 	bl	800016c <__adddf3>
 800a734:	4622      	mov	r2, r4
 800a736:	462b      	mov	r3, r5
 800a738:	f7f5 fece 	bl	80004d8 <__aeabi_dmul>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4640      	mov	r0, r8
 800a742:	4649      	mov	r1, r9
 800a744:	f7f5 fd10 	bl	8000168 <__aeabi_dsub>
 800a748:	4604      	mov	r4, r0
 800a74a:	460d      	mov	r5, r1
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4640      	mov	r0, r8
 800a752:	4649      	mov	r1, r9
 800a754:	f7f5 fec0 	bl	80004d8 <__aeabi_dmul>
 800a758:	2200      	movs	r2, #0
 800a75a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a75e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a762:	4620      	mov	r0, r4
 800a764:	4629      	mov	r1, r5
 800a766:	f7f5 fcff 	bl	8000168 <__aeabi_dsub>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a772:	f7f5 ffdb 	bl	800072c <__aeabi_ddiv>
 800a776:	4632      	mov	r2, r6
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	463b      	mov	r3, r7
 800a77e:	4640      	mov	r0, r8
 800a780:	4649      	mov	r1, r9
 800a782:	f7f5 fea9 	bl	80004d8 <__aeabi_dmul>
 800a786:	4632      	mov	r2, r6
 800a788:	463b      	mov	r3, r7
 800a78a:	f7f5 fcef 	bl	800016c <__adddf3>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f7f5 fce7 	bl	8000168 <__aeabi_dsub>
 800a79a:	4642      	mov	r2, r8
 800a79c:	464b      	mov	r3, r9
 800a79e:	f7f5 fce3 	bl	8000168 <__aeabi_dsub>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	4939      	ldr	r1, [pc, #228]	; (800a890 <__ieee754_pow+0xa20>)
 800a7aa:	f7f5 fcdd 	bl	8000168 <__aeabi_dsub>
 800a7ae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a7b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a7b6:	da29      	bge.n	800a80c <__ieee754_pow+0x99c>
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	f001 f911 	bl	800b9e0 <scalbn>
 800a7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7c2:	f7ff bbfe 	b.w	8009fc2 <__ieee754_pow+0x152>
 800a7c6:	4b33      	ldr	r3, [pc, #204]	; (800a894 <__ieee754_pow+0xa24>)
 800a7c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a7cc:	429f      	cmp	r7, r3
 800a7ce:	f77f af13 	ble.w	800a5f8 <__ieee754_pow+0x788>
 800a7d2:	4b31      	ldr	r3, [pc, #196]	; (800a898 <__ieee754_pow+0xa28>)
 800a7d4:	440b      	add	r3, r1
 800a7d6:	4303      	orrs	r3, r0
 800a7d8:	d009      	beq.n	800a7ee <__ieee754_pow+0x97e>
 800a7da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f7f6 f8eb 	bl	80009bc <__aeabi_dcmplt>
 800a7e6:	3800      	subs	r0, #0
 800a7e8:	bf18      	it	ne
 800a7ea:	2001      	movne	r0, #1
 800a7ec:	e453      	b.n	800a096 <__ieee754_pow+0x226>
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	f7f5 fcb9 	bl	8000168 <__aeabi_dsub>
 800a7f6:	4642      	mov	r2, r8
 800a7f8:	464b      	mov	r3, r9
 800a7fa:	f7f6 f8f3 	bl	80009e4 <__aeabi_dcmpge>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f43f aefa 	beq.w	800a5f8 <__ieee754_pow+0x788>
 800a804:	e7e9      	b.n	800a7da <__ieee754_pow+0x96a>
 800a806:	f04f 0a00 	mov.w	sl, #0
 800a80a:	e720      	b.n	800a64e <__ieee754_pow+0x7de>
 800a80c:	4621      	mov	r1, r4
 800a80e:	e7d6      	b.n	800a7be <__ieee754_pow+0x94e>
 800a810:	f04f 0b00 	mov.w	fp, #0
 800a814:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a890 <__ieee754_pow+0xa20>
 800a818:	f7ff bbba 	b.w	8009f90 <__ieee754_pow+0x120>
 800a81c:	f04f 0b00 	mov.w	fp, #0
 800a820:	f04f 0c00 	mov.w	ip, #0
 800a824:	f7ff bbb4 	b.w	8009f90 <__ieee754_pow+0x120>
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7ff bb3d 	b.w	8009eaa <__ieee754_pow+0x3a>
 800a830:	9200      	str	r2, [sp, #0]
 800a832:	f7ff bb89 	b.w	8009f48 <__ieee754_pow+0xd8>
 800a836:	2300      	movs	r3, #0
 800a838:	f7ff bb73 	b.w	8009f22 <__ieee754_pow+0xb2>
 800a83c:	f3af 8000 	nop.w
 800a840:	652b82fe 	.word	0x652b82fe
 800a844:	3c971547 	.word	0x3c971547
 800a848:	00000000 	.word	0x00000000
 800a84c:	3fe62e43 	.word	0x3fe62e43
 800a850:	fefa39ef 	.word	0xfefa39ef
 800a854:	3fe62e42 	.word	0x3fe62e42
 800a858:	0ca86c39 	.word	0x0ca86c39
 800a85c:	be205c61 	.word	0xbe205c61
 800a860:	72bea4d0 	.word	0x72bea4d0
 800a864:	3e663769 	.word	0x3e663769
 800a868:	c5d26bf1 	.word	0xc5d26bf1
 800a86c:	3ebbbd41 	.word	0x3ebbbd41
 800a870:	af25de2c 	.word	0xaf25de2c
 800a874:	3f11566a 	.word	0x3f11566a
 800a878:	16bebd93 	.word	0x16bebd93
 800a87c:	3f66c16c 	.word	0x3f66c16c
 800a880:	5555553e 	.word	0x5555553e
 800a884:	3fc55555 	.word	0x3fc55555
 800a888:	3fe00000 	.word	0x3fe00000
 800a88c:	000fffff 	.word	0x000fffff
 800a890:	3ff00000 	.word	0x3ff00000
 800a894:	4090cbff 	.word	0x4090cbff
 800a898:	3f6f3400 	.word	0x3f6f3400
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <__ieee754_rem_pio2>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	4ac4      	ldr	r2, [pc, #784]	; (800abb8 <__ieee754_rem_pio2+0x318>)
 800a8a8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a8ac:	b08d      	sub	sp, #52	; 0x34
 800a8ae:	4592      	cmp	sl, r2
 800a8b0:	9104      	str	r1, [sp, #16]
 800a8b2:	dc07      	bgt.n	800a8c4 <__ieee754_rem_pio2+0x24>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e9c4 0100 	strd	r0, r1, [r4]
 800a8bc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	e024      	b.n	800a90e <__ieee754_rem_pio2+0x6e>
 800a8c4:	4abd      	ldr	r2, [pc, #756]	; (800abbc <__ieee754_rem_pio2+0x31c>)
 800a8c6:	4592      	cmp	sl, r2
 800a8c8:	dc72      	bgt.n	800a9b0 <__ieee754_rem_pio2+0x110>
 800a8ca:	9b04      	ldr	r3, [sp, #16]
 800a8cc:	4dbc      	ldr	r5, [pc, #752]	; (800abc0 <__ieee754_rem_pio2+0x320>)
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	a3ab      	add	r3, pc, #684	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x2e0>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	dd36      	ble.n	800a946 <__ieee754_rem_pio2+0xa6>
 800a8d8:	f7f5 fc46 	bl	8000168 <__aeabi_dsub>
 800a8dc:	45aa      	cmp	sl, r5
 800a8de:	4606      	mov	r6, r0
 800a8e0:	460f      	mov	r7, r1
 800a8e2:	d018      	beq.n	800a916 <__ieee754_rem_pio2+0x76>
 800a8e4:	a3a8      	add	r3, pc, #672	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x2e8>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f7f5 fc3d 	bl	8000168 <__aeabi_dsub>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	e9c4 2300 	strd	r2, r3, [r4]
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	f7f5 fc35 	bl	8000168 <__aeabi_dsub>
 800a8fe:	a3a2      	add	r3, pc, #648	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x2e8>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	f7f5 fc30 	bl	8000168 <__aeabi_dsub>
 800a908:	2501      	movs	r5, #1
 800a90a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a90e:	4628      	mov	r0, r5
 800a910:	b00d      	add	sp, #52	; 0x34
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a916:	a39e      	add	r3, pc, #632	; (adr r3, 800ab90 <__ieee754_rem_pio2+0x2f0>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fc24 	bl	8000168 <__aeabi_dsub>
 800a920:	a39d      	add	r3, pc, #628	; (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f8>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	f7f5 fc1d 	bl	8000168 <__aeabi_dsub>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	4630      	mov	r0, r6
 800a934:	e9c4 2300 	strd	r2, r3, [r4]
 800a938:	4639      	mov	r1, r7
 800a93a:	f7f5 fc15 	bl	8000168 <__aeabi_dsub>
 800a93e:	a396      	add	r3, pc, #600	; (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f8>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	e7de      	b.n	800a904 <__ieee754_rem_pio2+0x64>
 800a946:	f7f5 fc11 	bl	800016c <__adddf3>
 800a94a:	45aa      	cmp	sl, r5
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	d016      	beq.n	800a980 <__ieee754_rem_pio2+0xe0>
 800a952:	a38d      	add	r3, pc, #564	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x2e8>)
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f7f5 fc08 	bl	800016c <__adddf3>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4630      	mov	r0, r6
 800a962:	e9c4 2300 	strd	r2, r3, [r4]
 800a966:	4639      	mov	r1, r7
 800a968:	f7f5 fbfe 	bl	8000168 <__aeabi_dsub>
 800a96c:	a386      	add	r3, pc, #536	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x2e8>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fbfb 	bl	800016c <__adddf3>
 800a976:	f04f 35ff 	mov.w	r5, #4294967295
 800a97a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a97e:	e7c6      	b.n	800a90e <__ieee754_rem_pio2+0x6e>
 800a980:	a383      	add	r3, pc, #524	; (adr r3, 800ab90 <__ieee754_rem_pio2+0x2f0>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fbf1 	bl	800016c <__adddf3>
 800a98a:	a383      	add	r3, pc, #524	; (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f8>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	4606      	mov	r6, r0
 800a992:	460f      	mov	r7, r1
 800a994:	f7f5 fbea 	bl	800016c <__adddf3>
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4630      	mov	r0, r6
 800a99e:	e9c4 2300 	strd	r2, r3, [r4]
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f5 fbe0 	bl	8000168 <__aeabi_dsub>
 800a9a8:	a37b      	add	r3, pc, #492	; (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f8>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	e7e0      	b.n	800a972 <__ieee754_rem_pio2+0xd2>
 800a9b0:	4a84      	ldr	r2, [pc, #528]	; (800abc4 <__ieee754_rem_pio2+0x324>)
 800a9b2:	4592      	cmp	sl, r2
 800a9b4:	f300 80d5 	bgt.w	800ab62 <__ieee754_rem_pio2+0x2c2>
 800a9b8:	f000 ff86 	bl	800b8c8 <fabs>
 800a9bc:	a378      	add	r3, pc, #480	; (adr r3, 800aba0 <__ieee754_rem_pio2+0x300>)
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	f7f5 fd87 	bl	80004d8 <__aeabi_dmul>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	4b7e      	ldr	r3, [pc, #504]	; (800abc8 <__ieee754_rem_pio2+0x328>)
 800a9ce:	f7f5 fbcd 	bl	800016c <__adddf3>
 800a9d2:	f7f6 f831 	bl	8000a38 <__aeabi_d2iz>
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	f7f5 fd14 	bl	8000404 <__aeabi_i2d>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9e4:	a366      	add	r3, pc, #408	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x2e0>)
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	f7f5 fbb7 	bl	8000168 <__aeabi_dsub>
 800a9fa:	a363      	add	r3, pc, #396	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x2e8>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	4680      	mov	r8, r0
 800aa02:	4689      	mov	r9, r1
 800aa04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa08:	f7f5 fd66 	bl	80004d8 <__aeabi_dmul>
 800aa0c:	2d1f      	cmp	r5, #31
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	dc0e      	bgt.n	800aa32 <__ieee754_rem_pio2+0x192>
 800aa14:	4b6d      	ldr	r3, [pc, #436]	; (800abcc <__ieee754_rem_pio2+0x32c>)
 800aa16:	1e6a      	subs	r2, r5, #1
 800aa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1c:	4553      	cmp	r3, sl
 800aa1e:	d008      	beq.n	800aa32 <__ieee754_rem_pio2+0x192>
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	4640      	mov	r0, r8
 800aa26:	4649      	mov	r1, r9
 800aa28:	f7f5 fb9e 	bl	8000168 <__aeabi_dsub>
 800aa2c:	e9c4 0100 	strd	r0, r1, [r4]
 800aa30:	e013      	b.n	800aa5a <__ieee754_rem_pio2+0x1ba>
 800aa32:	463b      	mov	r3, r7
 800aa34:	4632      	mov	r2, r6
 800aa36:	4640      	mov	r0, r8
 800aa38:	4649      	mov	r1, r9
 800aa3a:	f7f5 fb95 	bl	8000168 <__aeabi_dsub>
 800aa3e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa48:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800aa4c:	f1ba 0f10 	cmp.w	sl, #16
 800aa50:	dc1f      	bgt.n	800aa92 <__ieee754_rem_pio2+0x1f2>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	e9c4 2300 	strd	r2, r3, [r4]
 800aa5a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800aa5e:	4640      	mov	r0, r8
 800aa60:	4653      	mov	r3, sl
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f5 fb80 	bl	8000168 <__aeabi_dsub>
 800aa68:	4632      	mov	r2, r6
 800aa6a:	463b      	mov	r3, r7
 800aa6c:	f7f5 fb7c 	bl	8000168 <__aeabi_dsub>
 800aa70:	460b      	mov	r3, r1
 800aa72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa76:	9904      	ldr	r1, [sp, #16]
 800aa78:	4602      	mov	r2, r0
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	f6bf af47 	bge.w	800a90e <__ieee754_rem_pio2+0x6e>
 800aa80:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800aa84:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800aa88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa8c:	60e3      	str	r3, [r4, #12]
 800aa8e:	426d      	negs	r5, r5
 800aa90:	e73d      	b.n	800a90e <__ieee754_rem_pio2+0x6e>
 800aa92:	a33f      	add	r3, pc, #252	; (adr r3, 800ab90 <__ieee754_rem_pio2+0x2f0>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	4649      	mov	r1, r9
 800aaac:	f7f5 fb5c 	bl	8000168 <__aeabi_dsub>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	4682      	mov	sl, r0
 800aab6:	468b      	mov	fp, r1
 800aab8:	4640      	mov	r0, r8
 800aaba:	4649      	mov	r1, r9
 800aabc:	f7f5 fb54 	bl	8000168 <__aeabi_dsub>
 800aac0:	4632      	mov	r2, r6
 800aac2:	463b      	mov	r3, r7
 800aac4:	f7f5 fb50 	bl	8000168 <__aeabi_dsub>
 800aac8:	a333      	add	r3, pc, #204	; (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f8>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	4606      	mov	r6, r0
 800aad0:	460f      	mov	r7, r1
 800aad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aad6:	f7f5 fcff 	bl	80004d8 <__aeabi_dmul>
 800aada:	4632      	mov	r2, r6
 800aadc:	463b      	mov	r3, r7
 800aade:	f7f5 fb43 	bl	8000168 <__aeabi_dsub>
 800aae2:	4602      	mov	r2, r0
 800aae4:	460b      	mov	r3, r1
 800aae6:	4606      	mov	r6, r0
 800aae8:	460f      	mov	r7, r1
 800aaea:	4650      	mov	r0, sl
 800aaec:	4659      	mov	r1, fp
 800aaee:	f7f5 fb3b 	bl	8000168 <__aeabi_dsub>
 800aaf2:	9a05      	ldr	r2, [sp, #20]
 800aaf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b31      	cmp	r3, #49	; 0x31
 800aafc:	dc06      	bgt.n	800ab0c <__ieee754_rem_pio2+0x26c>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	46d0      	mov	r8, sl
 800ab04:	46d9      	mov	r9, fp
 800ab06:	e9c4 2300 	strd	r2, r3, [r4]
 800ab0a:	e7a6      	b.n	800aa5a <__ieee754_rem_pio2+0x1ba>
 800ab0c:	a326      	add	r3, pc, #152	; (adr r3, 800aba8 <__ieee754_rem_pio2+0x308>)
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab16:	f7f5 fcdf 	bl	80004d8 <__aeabi_dmul>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4650      	mov	r0, sl
 800ab24:	4659      	mov	r1, fp
 800ab26:	f7f5 fb1f 	bl	8000168 <__aeabi_dsub>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4680      	mov	r8, r0
 800ab30:	4689      	mov	r9, r1
 800ab32:	4650      	mov	r0, sl
 800ab34:	4659      	mov	r1, fp
 800ab36:	f7f5 fb17 	bl	8000168 <__aeabi_dsub>
 800ab3a:	4632      	mov	r2, r6
 800ab3c:	463b      	mov	r3, r7
 800ab3e:	f7f5 fb13 	bl	8000168 <__aeabi_dsub>
 800ab42:	a31b      	add	r3, pc, #108	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x310>)
 800ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab48:	4606      	mov	r6, r0
 800ab4a:	460f      	mov	r7, r1
 800ab4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab50:	f7f5 fcc2 	bl	80004d8 <__aeabi_dmul>
 800ab54:	4632      	mov	r2, r6
 800ab56:	463b      	mov	r3, r7
 800ab58:	f7f5 fb06 	bl	8000168 <__aeabi_dsub>
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	460f      	mov	r7, r1
 800ab60:	e75e      	b.n	800aa20 <__ieee754_rem_pio2+0x180>
 800ab62:	4a1b      	ldr	r2, [pc, #108]	; (800abd0 <__ieee754_rem_pio2+0x330>)
 800ab64:	4592      	cmp	sl, r2
 800ab66:	dd35      	ble.n	800abd4 <__ieee754_rem_pio2+0x334>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	f7f5 fafc 	bl	8000168 <__aeabi_dsub>
 800ab70:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab74:	e9c4 0100 	strd	r0, r1, [r4]
 800ab78:	e6a2      	b.n	800a8c0 <__ieee754_rem_pio2+0x20>
 800ab7a:	bf00      	nop
 800ab7c:	f3af 8000 	nop.w
 800ab80:	54400000 	.word	0x54400000
 800ab84:	3ff921fb 	.word	0x3ff921fb
 800ab88:	1a626331 	.word	0x1a626331
 800ab8c:	3dd0b461 	.word	0x3dd0b461
 800ab90:	1a600000 	.word	0x1a600000
 800ab94:	3dd0b461 	.word	0x3dd0b461
 800ab98:	2e037073 	.word	0x2e037073
 800ab9c:	3ba3198a 	.word	0x3ba3198a
 800aba0:	6dc9c883 	.word	0x6dc9c883
 800aba4:	3fe45f30 	.word	0x3fe45f30
 800aba8:	2e000000 	.word	0x2e000000
 800abac:	3ba3198a 	.word	0x3ba3198a
 800abb0:	252049c1 	.word	0x252049c1
 800abb4:	397b839a 	.word	0x397b839a
 800abb8:	3fe921fb 	.word	0x3fe921fb
 800abbc:	4002d97b 	.word	0x4002d97b
 800abc0:	3ff921fb 	.word	0x3ff921fb
 800abc4:	413921fb 	.word	0x413921fb
 800abc8:	3fe00000 	.word	0x3fe00000
 800abcc:	0800bfb0 	.word	0x0800bfb0
 800abd0:	7fefffff 	.word	0x7fefffff
 800abd4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800abd8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800abdc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800abe0:	460f      	mov	r7, r1
 800abe2:	4606      	mov	r6, r0
 800abe4:	f7f5 ff28 	bl	8000a38 <__aeabi_d2iz>
 800abe8:	f7f5 fc0c 	bl	8000404 <__aeabi_i2d>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abf8:	f7f5 fab6 	bl	8000168 <__aeabi_dsub>
 800abfc:	2200      	movs	r2, #0
 800abfe:	4b22      	ldr	r3, [pc, #136]	; (800ac88 <__ieee754_rem_pio2+0x3e8>)
 800ac00:	f7f5 fc6a 	bl	80004d8 <__aeabi_dmul>
 800ac04:	460f      	mov	r7, r1
 800ac06:	4606      	mov	r6, r0
 800ac08:	f7f5 ff16 	bl	8000a38 <__aeabi_d2iz>
 800ac0c:	f7f5 fbfa 	bl	8000404 <__aeabi_i2d>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac1c:	f7f5 faa4 	bl	8000168 <__aeabi_dsub>
 800ac20:	2200      	movs	r2, #0
 800ac22:	4b19      	ldr	r3, [pc, #100]	; (800ac88 <__ieee754_rem_pio2+0x3e8>)
 800ac24:	f7f5 fc58 	bl	80004d8 <__aeabi_dmul>
 800ac28:	f04f 0803 	mov.w	r8, #3
 800ac2c:	2600      	movs	r6, #0
 800ac2e:	2700      	movs	r7, #0
 800ac30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac34:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800ac38:	4632      	mov	r2, r6
 800ac3a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800ac3e:	463b      	mov	r3, r7
 800ac40:	46c2      	mov	sl, r8
 800ac42:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac46:	f7f5 feaf 	bl	80009a8 <__aeabi_dcmpeq>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d1f4      	bne.n	800ac38 <__ieee754_rem_pio2+0x398>
 800ac4e:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <__ieee754_rem_pio2+0x3ec>)
 800ac50:	462a      	mov	r2, r5
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	2302      	movs	r3, #2
 800ac56:	4621      	mov	r1, r4
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	a806      	add	r0, sp, #24
 800ac5c:	4653      	mov	r3, sl
 800ac5e:	f000 f8c7 	bl	800adf0 <__kernel_rem_pio2>
 800ac62:	9b04      	ldr	r3, [sp, #16]
 800ac64:	4605      	mov	r5, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f6bf ae51 	bge.w	800a90e <__ieee754_rem_pio2+0x6e>
 800ac6c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ac70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac74:	e9c4 2300 	strd	r2, r3, [r4]
 800ac78:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ac7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac80:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac84:	e703      	b.n	800aa8e <__ieee754_rem_pio2+0x1ee>
 800ac86:	bf00      	nop
 800ac88:	41700000 	.word	0x41700000
 800ac8c:	0800c030 	.word	0x0800c030

0800ac90 <__ieee754_sqrt>:
 800ac90:	f8df c158 	ldr.w	ip, [pc, #344]	; 800adec <__ieee754_sqrt+0x15c>
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	ea3c 0c01 	bics.w	ip, ip, r1
 800ac9c:	4606      	mov	r6, r0
 800ac9e:	460d      	mov	r5, r1
 800aca0:	460c      	mov	r4, r1
 800aca2:	460a      	mov	r2, r1
 800aca4:	4607      	mov	r7, r0
 800aca6:	4603      	mov	r3, r0
 800aca8:	d10f      	bne.n	800acca <__ieee754_sqrt+0x3a>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	f7f5 fc13 	bl	80004d8 <__aeabi_dmul>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	4630      	mov	r0, r6
 800acb8:	4629      	mov	r1, r5
 800acba:	f7f5 fa57 	bl	800016c <__adddf3>
 800acbe:	4606      	mov	r6, r0
 800acc0:	460d      	mov	r5, r1
 800acc2:	4630      	mov	r0, r6
 800acc4:	4629      	mov	r1, r5
 800acc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acca:	2900      	cmp	r1, #0
 800accc:	dc0e      	bgt.n	800acec <__ieee754_sqrt+0x5c>
 800acce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800acd2:	ea5c 0707 	orrs.w	r7, ip, r7
 800acd6:	d0f4      	beq.n	800acc2 <__ieee754_sqrt+0x32>
 800acd8:	b141      	cbz	r1, 800acec <__ieee754_sqrt+0x5c>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	f7f5 fa43 	bl	8000168 <__aeabi_dsub>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	f7f5 fd21 	bl	800072c <__aeabi_ddiv>
 800acea:	e7e8      	b.n	800acbe <__ieee754_sqrt+0x2e>
 800acec:	1521      	asrs	r1, r4, #20
 800acee:	d075      	beq.n	800addc <__ieee754_sqrt+0x14c>
 800acf0:	07cc      	lsls	r4, r1, #31
 800acf2:	f04f 0400 	mov.w	r4, #0
 800acf6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800acfa:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800acfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ad02:	bf5e      	ittt	pl
 800ad04:	0fd9      	lsrpl	r1, r3, #31
 800ad06:	005b      	lslpl	r3, r3, #1
 800ad08:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800ad0c:	0fd9      	lsrs	r1, r3, #31
 800ad0e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ad12:	2516      	movs	r5, #22
 800ad14:	4620      	mov	r0, r4
 800ad16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad1a:	107f      	asrs	r7, r7, #1
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	1846      	adds	r6, r0, r1
 800ad20:	4296      	cmp	r6, r2
 800ad22:	bfde      	ittt	le
 800ad24:	1b92      	suble	r2, r2, r6
 800ad26:	1870      	addle	r0, r6, r1
 800ad28:	1864      	addle	r4, r4, r1
 800ad2a:	0052      	lsls	r2, r2, #1
 800ad2c:	3d01      	subs	r5, #1
 800ad2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ad32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ad36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad3a:	d1f0      	bne.n	800ad1e <__ieee754_sqrt+0x8e>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f04f 0e20 	mov.w	lr, #32
 800ad42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ad46:	4282      	cmp	r2, r0
 800ad48:	eb06 0c05 	add.w	ip, r6, r5
 800ad4c:	dc02      	bgt.n	800ad54 <__ieee754_sqrt+0xc4>
 800ad4e:	d113      	bne.n	800ad78 <__ieee754_sqrt+0xe8>
 800ad50:	459c      	cmp	ip, r3
 800ad52:	d811      	bhi.n	800ad78 <__ieee754_sqrt+0xe8>
 800ad54:	f1bc 0f00 	cmp.w	ip, #0
 800ad58:	eb0c 0506 	add.w	r5, ip, r6
 800ad5c:	da43      	bge.n	800ade6 <__ieee754_sqrt+0x156>
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	db41      	blt.n	800ade6 <__ieee754_sqrt+0x156>
 800ad62:	f100 0801 	add.w	r8, r0, #1
 800ad66:	1a12      	subs	r2, r2, r0
 800ad68:	4640      	mov	r0, r8
 800ad6a:	459c      	cmp	ip, r3
 800ad6c:	bf88      	it	hi
 800ad6e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ad72:	eba3 030c 	sub.w	r3, r3, ip
 800ad76:	4431      	add	r1, r6
 800ad78:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ad7c:	f1be 0e01 	subs.w	lr, lr, #1
 800ad80:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800ad84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ad8c:	d1db      	bne.n	800ad46 <__ieee754_sqrt+0xb6>
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	d006      	beq.n	800ada0 <__ieee754_sqrt+0x110>
 800ad92:	1c48      	adds	r0, r1, #1
 800ad94:	bf0b      	itete	eq
 800ad96:	4671      	moveq	r1, lr
 800ad98:	3101      	addne	r1, #1
 800ad9a:	3401      	addeq	r4, #1
 800ad9c:	f021 0101 	bicne.w	r1, r1, #1
 800ada0:	1063      	asrs	r3, r4, #1
 800ada2:	0849      	lsrs	r1, r1, #1
 800ada4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ada8:	07e2      	lsls	r2, r4, #31
 800adaa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800adae:	bf48      	it	mi
 800adb0:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800adb4:	460e      	mov	r6, r1
 800adb6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800adba:	e782      	b.n	800acc2 <__ieee754_sqrt+0x32>
 800adbc:	0ada      	lsrs	r2, r3, #11
 800adbe:	3815      	subs	r0, #21
 800adc0:	055b      	lsls	r3, r3, #21
 800adc2:	2a00      	cmp	r2, #0
 800adc4:	d0fa      	beq.n	800adbc <__ieee754_sqrt+0x12c>
 800adc6:	02d5      	lsls	r5, r2, #11
 800adc8:	d50a      	bpl.n	800ade0 <__ieee754_sqrt+0x150>
 800adca:	f1c1 0420 	rsb	r4, r1, #32
 800adce:	fa23 f404 	lsr.w	r4, r3, r4
 800add2:	1e4d      	subs	r5, r1, #1
 800add4:	408b      	lsls	r3, r1
 800add6:	4322      	orrs	r2, r4
 800add8:	1b41      	subs	r1, r0, r5
 800adda:	e789      	b.n	800acf0 <__ieee754_sqrt+0x60>
 800addc:	4608      	mov	r0, r1
 800adde:	e7f0      	b.n	800adc2 <__ieee754_sqrt+0x132>
 800ade0:	0052      	lsls	r2, r2, #1
 800ade2:	3101      	adds	r1, #1
 800ade4:	e7ef      	b.n	800adc6 <__ieee754_sqrt+0x136>
 800ade6:	4680      	mov	r8, r0
 800ade8:	e7bd      	b.n	800ad66 <__ieee754_sqrt+0xd6>
 800adea:	bf00      	nop
 800adec:	7ff00000 	.word	0x7ff00000

0800adf0 <__kernel_rem_pio2>:
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800adf8:	9308      	str	r3, [sp, #32]
 800adfa:	9106      	str	r1, [sp, #24]
 800adfc:	4bb6      	ldr	r3, [pc, #728]	; (800b0d8 <__kernel_rem_pio2+0x2e8>)
 800adfe:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ae00:	f112 0f14 	cmn.w	r2, #20
 800ae04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae08:	bfa8      	it	ge
 800ae0a:	1ed4      	subge	r4, r2, #3
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	9b08      	ldr	r3, [sp, #32]
 800ae10:	bfb8      	it	lt
 800ae12:	2400      	movlt	r4, #0
 800ae14:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae18:	9307      	str	r3, [sp, #28]
 800ae1a:	bfa4      	itt	ge
 800ae1c:	2318      	movge	r3, #24
 800ae1e:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae22:	f06f 0317 	mvn.w	r3, #23
 800ae26:	fb04 3303 	mla	r3, r4, r3, r3
 800ae2a:	eb03 0b02 	add.w	fp, r3, r2
 800ae2e:	9a07      	ldr	r2, [sp, #28]
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	1aa7      	subs	r7, r4, r2
 800ae34:	eb03 0802 	add.w	r8, r3, r2
 800ae38:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae40:	2200      	movs	r2, #0
 800ae42:	2300      	movs	r3, #0
 800ae44:	9009      	str	r0, [sp, #36]	; 0x24
 800ae46:	ae20      	add	r6, sp, #128	; 0x80
 800ae48:	4545      	cmp	r5, r8
 800ae4a:	dd14      	ble.n	800ae76 <__kernel_rem_pio2+0x86>
 800ae4c:	f04f 0800 	mov.w	r8, #0
 800ae50:	9a08      	ldr	r2, [sp, #32]
 800ae52:	ab20      	add	r3, sp, #128	; 0x80
 800ae54:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ae58:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800ae5c:	9b02      	ldr	r3, [sp, #8]
 800ae5e:	4598      	cmp	r8, r3
 800ae60:	dc35      	bgt.n	800aece <__kernel_rem_pio2+0xde>
 800ae62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae64:	2200      	movs	r2, #0
 800ae66:	f1a3 0908 	sub.w	r9, r3, #8
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	462f      	mov	r7, r5
 800ae6e:	2600      	movs	r6, #0
 800ae70:	e9cd 2300 	strd	r2, r3, [sp]
 800ae74:	e01f      	b.n	800aeb6 <__kernel_rem_pio2+0xc6>
 800ae76:	42ef      	cmn	r7, r5
 800ae78:	d40b      	bmi.n	800ae92 <__kernel_rem_pio2+0xa2>
 800ae7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae7e:	e9cd 2300 	strd	r2, r3, [sp]
 800ae82:	f7f5 fabf 	bl	8000404 <__aeabi_i2d>
 800ae86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae8e:	3501      	adds	r5, #1
 800ae90:	e7da      	b.n	800ae48 <__kernel_rem_pio2+0x58>
 800ae92:	4610      	mov	r0, r2
 800ae94:	4619      	mov	r1, r3
 800ae96:	e7f8      	b.n	800ae8a <__kernel_rem_pio2+0x9a>
 800ae98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae9c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800aea0:	f7f5 fb1a 	bl	80004d8 <__aeabi_dmul>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeac:	f7f5 f95e 	bl	800016c <__adddf3>
 800aeb0:	e9cd 0100 	strd	r0, r1, [sp]
 800aeb4:	3601      	adds	r6, #1
 800aeb6:	9b07      	ldr	r3, [sp, #28]
 800aeb8:	3f08      	subs	r7, #8
 800aeba:	429e      	cmp	r6, r3
 800aebc:	ddec      	ble.n	800ae98 <__kernel_rem_pio2+0xa8>
 800aebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aec2:	f108 0801 	add.w	r8, r8, #1
 800aec6:	e8ea 2302 	strd	r2, r3, [sl], #8
 800aeca:	3508      	adds	r5, #8
 800aecc:	e7c6      	b.n	800ae5c <__kernel_rem_pio2+0x6c>
 800aece:	9b02      	ldr	r3, [sp, #8]
 800aed0:	aa0c      	add	r2, sp, #48	; 0x30
 800aed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aed6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aed8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aeda:	9e02      	ldr	r6, [sp, #8]
 800aedc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aee0:	930a      	str	r3, [sp, #40]	; 0x28
 800aee2:	ab98      	add	r3, sp, #608	; 0x260
 800aee4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aee8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800aeec:	ab70      	add	r3, sp, #448	; 0x1c0
 800aeee:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800aef2:	46d0      	mov	r8, sl
 800aef4:	46b1      	mov	r9, r6
 800aef6:	af0c      	add	r7, sp, #48	; 0x30
 800aef8:	9700      	str	r7, [sp, #0]
 800aefa:	f1b9 0f00 	cmp.w	r9, #0
 800aefe:	f1a8 0808 	sub.w	r8, r8, #8
 800af02:	dc71      	bgt.n	800afe8 <__kernel_rem_pio2+0x1f8>
 800af04:	465a      	mov	r2, fp
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	f000 fd69 	bl	800b9e0 <scalbn>
 800af0e:	2200      	movs	r2, #0
 800af10:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	f7f5 fade 	bl	80004d8 <__aeabi_dmul>
 800af1c:	f000 fce0 	bl	800b8e0 <floor>
 800af20:	2200      	movs	r2, #0
 800af22:	4b6e      	ldr	r3, [pc, #440]	; (800b0dc <__kernel_rem_pio2+0x2ec>)
 800af24:	f7f5 fad8 	bl	80004d8 <__aeabi_dmul>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4620      	mov	r0, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	f7f5 f91a 	bl	8000168 <__aeabi_dsub>
 800af34:	460d      	mov	r5, r1
 800af36:	4604      	mov	r4, r0
 800af38:	f7f5 fd7e 	bl	8000a38 <__aeabi_d2iz>
 800af3c:	9004      	str	r0, [sp, #16]
 800af3e:	f7f5 fa61 	bl	8000404 <__aeabi_i2d>
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
 800af46:	4620      	mov	r0, r4
 800af48:	4629      	mov	r1, r5
 800af4a:	f7f5 f90d 	bl	8000168 <__aeabi_dsub>
 800af4e:	f1bb 0f00 	cmp.w	fp, #0
 800af52:	4680      	mov	r8, r0
 800af54:	4689      	mov	r9, r1
 800af56:	dd70      	ble.n	800b03a <__kernel_rem_pio2+0x24a>
 800af58:	1e72      	subs	r2, r6, #1
 800af5a:	ab0c      	add	r3, sp, #48	; 0x30
 800af5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af60:	9c04      	ldr	r4, [sp, #16]
 800af62:	f1cb 0118 	rsb	r1, fp, #24
 800af66:	fa40 f301 	asr.w	r3, r0, r1
 800af6a:	441c      	add	r4, r3
 800af6c:	408b      	lsls	r3, r1
 800af6e:	1ac0      	subs	r0, r0, r3
 800af70:	ab0c      	add	r3, sp, #48	; 0x30
 800af72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800af76:	f1cb 0317 	rsb	r3, fp, #23
 800af7a:	9404      	str	r4, [sp, #16]
 800af7c:	fa40 f303 	asr.w	r3, r0, r3
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd66      	ble.n	800b056 <__kernel_rem_pio2+0x266>
 800af88:	2200      	movs	r2, #0
 800af8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800af8e:	4614      	mov	r4, r2
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	3301      	adds	r3, #1
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	4296      	cmp	r6, r2
 800af98:	f300 80ac 	bgt.w	800b0f4 <__kernel_rem_pio2+0x304>
 800af9c:	f1bb 0f00 	cmp.w	fp, #0
 800afa0:	dd07      	ble.n	800afb2 <__kernel_rem_pio2+0x1c2>
 800afa2:	f1bb 0f01 	cmp.w	fp, #1
 800afa6:	f000 80b4 	beq.w	800b112 <__kernel_rem_pio2+0x322>
 800afaa:	f1bb 0f02 	cmp.w	fp, #2
 800afae:	f000 80ba 	beq.w	800b126 <__kernel_rem_pio2+0x336>
 800afb2:	9b00      	ldr	r3, [sp, #0]
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d14e      	bne.n	800b056 <__kernel_rem_pio2+0x266>
 800afb8:	4642      	mov	r2, r8
 800afba:	464b      	mov	r3, r9
 800afbc:	2000      	movs	r0, #0
 800afbe:	4948      	ldr	r1, [pc, #288]	; (800b0e0 <__kernel_rem_pio2+0x2f0>)
 800afc0:	f7f5 f8d2 	bl	8000168 <__aeabi_dsub>
 800afc4:	4680      	mov	r8, r0
 800afc6:	4689      	mov	r9, r1
 800afc8:	2c00      	cmp	r4, #0
 800afca:	d044      	beq.n	800b056 <__kernel_rem_pio2+0x266>
 800afcc:	465a      	mov	r2, fp
 800afce:	2000      	movs	r0, #0
 800afd0:	4943      	ldr	r1, [pc, #268]	; (800b0e0 <__kernel_rem_pio2+0x2f0>)
 800afd2:	f000 fd05 	bl	800b9e0 <scalbn>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 f8c3 	bl	8000168 <__aeabi_dsub>
 800afe2:	4680      	mov	r8, r0
 800afe4:	4689      	mov	r9, r1
 800afe6:	e036      	b.n	800b056 <__kernel_rem_pio2+0x266>
 800afe8:	2200      	movs	r2, #0
 800afea:	4b3e      	ldr	r3, [pc, #248]	; (800b0e4 <__kernel_rem_pio2+0x2f4>)
 800afec:	4620      	mov	r0, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	f7f5 fa72 	bl	80004d8 <__aeabi_dmul>
 800aff4:	f7f5 fd20 	bl	8000a38 <__aeabi_d2iz>
 800aff8:	f7f5 fa04 	bl	8000404 <__aeabi_i2d>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b004:	2200      	movs	r2, #0
 800b006:	4b38      	ldr	r3, [pc, #224]	; (800b0e8 <__kernel_rem_pio2+0x2f8>)
 800b008:	f7f5 fa66 	bl	80004d8 <__aeabi_dmul>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4620      	mov	r0, r4
 800b012:	4629      	mov	r1, r5
 800b014:	f7f5 f8a8 	bl	8000168 <__aeabi_dsub>
 800b018:	f7f5 fd0e 	bl	8000a38 <__aeabi_d2iz>
 800b01c:	9b00      	ldr	r3, [sp, #0]
 800b01e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b022:	f843 0b04 	str.w	r0, [r3], #4
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b02c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b030:	f7f5 f89c 	bl	800016c <__adddf3>
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	e75f      	b.n	800aefa <__kernel_rem_pio2+0x10a>
 800b03a:	d105      	bne.n	800b048 <__kernel_rem_pio2+0x258>
 800b03c:	1e73      	subs	r3, r6, #1
 800b03e:	aa0c      	add	r2, sp, #48	; 0x30
 800b040:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b044:	15c3      	asrs	r3, r0, #23
 800b046:	e79b      	b.n	800af80 <__kernel_rem_pio2+0x190>
 800b048:	2200      	movs	r2, #0
 800b04a:	4b28      	ldr	r3, [pc, #160]	; (800b0ec <__kernel_rem_pio2+0x2fc>)
 800b04c:	f7f5 fcca 	bl	80009e4 <__aeabi_dcmpge>
 800b050:	2800      	cmp	r0, #0
 800b052:	d13e      	bne.n	800b0d2 <__kernel_rem_pio2+0x2e2>
 800b054:	9000      	str	r0, [sp, #0]
 800b056:	2200      	movs	r2, #0
 800b058:	2300      	movs	r3, #0
 800b05a:	4640      	mov	r0, r8
 800b05c:	4649      	mov	r1, r9
 800b05e:	f7f5 fca3 	bl	80009a8 <__aeabi_dcmpeq>
 800b062:	2800      	cmp	r0, #0
 800b064:	f000 80b1 	beq.w	800b1ca <__kernel_rem_pio2+0x3da>
 800b068:	1e74      	subs	r4, r6, #1
 800b06a:	4623      	mov	r3, r4
 800b06c:	2200      	movs	r2, #0
 800b06e:	9902      	ldr	r1, [sp, #8]
 800b070:	428b      	cmp	r3, r1
 800b072:	da5f      	bge.n	800b134 <__kernel_rem_pio2+0x344>
 800b074:	2a00      	cmp	r2, #0
 800b076:	d074      	beq.n	800b162 <__kernel_rem_pio2+0x372>
 800b078:	ab0c      	add	r3, sp, #48	; 0x30
 800b07a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b07e:	f1ab 0b18 	sub.w	fp, fp, #24
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 809f 	beq.w	800b1c6 <__kernel_rem_pio2+0x3d6>
 800b088:	465a      	mov	r2, fp
 800b08a:	2000      	movs	r0, #0
 800b08c:	4914      	ldr	r1, [pc, #80]	; (800b0e0 <__kernel_rem_pio2+0x2f0>)
 800b08e:	f000 fca7 	bl	800b9e0 <scalbn>
 800b092:	46a2      	mov	sl, r4
 800b094:	4606      	mov	r6, r0
 800b096:	460f      	mov	r7, r1
 800b098:	f04f 0800 	mov.w	r8, #0
 800b09c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b09e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b0e4 <__kernel_rem_pio2+0x2f4>
 800b0a2:	00e5      	lsls	r5, r4, #3
 800b0a4:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b0a8:	f1ba 0f00 	cmp.w	sl, #0
 800b0ac:	f280 80c3 	bge.w	800b236 <__kernel_rem_pio2+0x446>
 800b0b0:	4626      	mov	r6, r4
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	f2c0 80f5 	blt.w	800b2a2 <__kernel_rem_pio2+0x4b2>
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <__kernel_rem_pio2+0x300>)
 800b0ba:	f04f 0a00 	mov.w	sl, #0
 800b0be:	9307      	str	r3, [sp, #28]
 800b0c0:	ab70      	add	r3, sp, #448	; 0x1c0
 800b0c2:	f04f 0b00 	mov.w	fp, #0
 800b0c6:	f04f 0800 	mov.w	r8, #0
 800b0ca:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b0ce:	1ba7      	subs	r7, r4, r6
 800b0d0:	e0db      	b.n	800b28a <__kernel_rem_pio2+0x49a>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	e757      	b.n	800af88 <__kernel_rem_pio2+0x198>
 800b0d8:	0800c178 	.word	0x0800c178
 800b0dc:	40200000 	.word	0x40200000
 800b0e0:	3ff00000 	.word	0x3ff00000
 800b0e4:	3e700000 	.word	0x3e700000
 800b0e8:	41700000 	.word	0x41700000
 800b0ec:	3fe00000 	.word	0x3fe00000
 800b0f0:	0800c138 	.word	0x0800c138
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	b944      	cbnz	r4, 800b10a <__kernel_rem_pio2+0x31a>
 800b0f8:	b11b      	cbz	r3, 800b102 <__kernel_rem_pio2+0x312>
 800b0fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	2301      	movs	r3, #1
 800b102:	461c      	mov	r4, r3
 800b104:	3201      	adds	r2, #1
 800b106:	3704      	adds	r7, #4
 800b108:	e745      	b.n	800af96 <__kernel_rem_pio2+0x1a6>
 800b10a:	1acb      	subs	r3, r1, r3
 800b10c:	603b      	str	r3, [r7, #0]
 800b10e:	4623      	mov	r3, r4
 800b110:	e7f7      	b.n	800b102 <__kernel_rem_pio2+0x312>
 800b112:	1e72      	subs	r2, r6, #1
 800b114:	ab0c      	add	r3, sp, #48	; 0x30
 800b116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b11e:	a90c      	add	r1, sp, #48	; 0x30
 800b120:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b124:	e745      	b.n	800afb2 <__kernel_rem_pio2+0x1c2>
 800b126:	1e72      	subs	r2, r6, #1
 800b128:	ab0c      	add	r3, sp, #48	; 0x30
 800b12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b132:	e7f4      	b.n	800b11e <__kernel_rem_pio2+0x32e>
 800b134:	a90c      	add	r1, sp, #48	; 0x30
 800b136:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	430a      	orrs	r2, r1
 800b13e:	e796      	b.n	800b06e <__kernel_rem_pio2+0x27e>
 800b140:	3401      	adds	r4, #1
 800b142:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b146:	2a00      	cmp	r2, #0
 800b148:	d0fa      	beq.n	800b140 <__kernel_rem_pio2+0x350>
 800b14a:	9b08      	ldr	r3, [sp, #32]
 800b14c:	f106 0801 	add.w	r8, r6, #1
 800b150:	18f5      	adds	r5, r6, r3
 800b152:	ab20      	add	r3, sp, #128	; 0x80
 800b154:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b158:	4434      	add	r4, r6
 800b15a:	4544      	cmp	r4, r8
 800b15c:	da04      	bge.n	800b168 <__kernel_rem_pio2+0x378>
 800b15e:	4626      	mov	r6, r4
 800b160:	e6bf      	b.n	800aee2 <__kernel_rem_pio2+0xf2>
 800b162:	2401      	movs	r4, #1
 800b164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b166:	e7ec      	b.n	800b142 <__kernel_rem_pio2+0x352>
 800b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16a:	f04f 0900 	mov.w	r9, #0
 800b16e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b172:	f7f5 f947 	bl	8000404 <__aeabi_i2d>
 800b176:	2600      	movs	r6, #0
 800b178:	2700      	movs	r7, #0
 800b17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17c:	e9c5 0100 	strd	r0, r1, [r5]
 800b180:	3b08      	subs	r3, #8
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	9504      	str	r5, [sp, #16]
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	4599      	cmp	r9, r3
 800b18a:	dd05      	ble.n	800b198 <__kernel_rem_pio2+0x3a8>
 800b18c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b190:	f108 0801 	add.w	r8, r8, #1
 800b194:	3508      	adds	r5, #8
 800b196:	e7e0      	b.n	800b15a <__kernel_rem_pio2+0x36a>
 800b198:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b19c:	9900      	ldr	r1, [sp, #0]
 800b19e:	f109 0901 	add.w	r9, r9, #1
 800b1a2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b1a6:	9100      	str	r1, [sp, #0]
 800b1a8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b1ac:	f8cd c010 	str.w	ip, [sp, #16]
 800b1b0:	f7f5 f992 	bl	80004d8 <__aeabi_dmul>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	f7f4 ffd6 	bl	800016c <__adddf3>
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	460f      	mov	r7, r1
 800b1c4:	e7df      	b.n	800b186 <__kernel_rem_pio2+0x396>
 800b1c6:	3c01      	subs	r4, #1
 800b1c8:	e756      	b.n	800b078 <__kernel_rem_pio2+0x288>
 800b1ca:	f1cb 0200 	rsb	r2, fp, #0
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	f000 fc05 	bl	800b9e0 <scalbn>
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4ba4      	ldr	r3, [pc, #656]	; (800b46c <__kernel_rem_pio2+0x67c>)
 800b1da:	4604      	mov	r4, r0
 800b1dc:	460d      	mov	r5, r1
 800b1de:	f7f5 fc01 	bl	80009e4 <__aeabi_dcmpge>
 800b1e2:	b1f8      	cbz	r0, 800b224 <__kernel_rem_pio2+0x434>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4ba2      	ldr	r3, [pc, #648]	; (800b470 <__kernel_rem_pio2+0x680>)
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	f7f5 f974 	bl	80004d8 <__aeabi_dmul>
 800b1f0:	f7f5 fc22 	bl	8000a38 <__aeabi_d2iz>
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	f7f5 f905 	bl	8000404 <__aeabi_i2d>
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	4b9b      	ldr	r3, [pc, #620]	; (800b46c <__kernel_rem_pio2+0x67c>)
 800b1fe:	f7f5 f96b 	bl	80004d8 <__aeabi_dmul>
 800b202:	460b      	mov	r3, r1
 800b204:	4602      	mov	r2, r0
 800b206:	4629      	mov	r1, r5
 800b208:	4620      	mov	r0, r4
 800b20a:	f7f4 ffad 	bl	8000168 <__aeabi_dsub>
 800b20e:	f7f5 fc13 	bl	8000a38 <__aeabi_d2iz>
 800b212:	1c74      	adds	r4, r6, #1
 800b214:	ab0c      	add	r3, sp, #48	; 0x30
 800b216:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b21a:	f10b 0b18 	add.w	fp, fp, #24
 800b21e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b222:	e731      	b.n	800b088 <__kernel_rem_pio2+0x298>
 800b224:	4620      	mov	r0, r4
 800b226:	4629      	mov	r1, r5
 800b228:	f7f5 fc06 	bl	8000a38 <__aeabi_d2iz>
 800b22c:	ab0c      	add	r3, sp, #48	; 0x30
 800b22e:	4634      	mov	r4, r6
 800b230:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b234:	e728      	b.n	800b088 <__kernel_rem_pio2+0x298>
 800b236:	ab0c      	add	r3, sp, #48	; 0x30
 800b238:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b23c:	f7f5 f8e2 	bl	8000404 <__aeabi_i2d>
 800b240:	4632      	mov	r2, r6
 800b242:	463b      	mov	r3, r7
 800b244:	f7f5 f948 	bl	80004d8 <__aeabi_dmul>
 800b248:	4642      	mov	r2, r8
 800b24a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b24e:	464b      	mov	r3, r9
 800b250:	4630      	mov	r0, r6
 800b252:	4639      	mov	r1, r7
 800b254:	f7f5 f940 	bl	80004d8 <__aeabi_dmul>
 800b258:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b25c:	4606      	mov	r6, r0
 800b25e:	460f      	mov	r7, r1
 800b260:	e722      	b.n	800b0a8 <__kernel_rem_pio2+0x2b8>
 800b262:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b266:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b26a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b26e:	f8cd c01c 	str.w	ip, [sp, #28]
 800b272:	f7f5 f931 	bl	80004d8 <__aeabi_dmul>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	4650      	mov	r0, sl
 800b27c:	4659      	mov	r1, fp
 800b27e:	f7f4 ff75 	bl	800016c <__adddf3>
 800b282:	4682      	mov	sl, r0
 800b284:	468b      	mov	fp, r1
 800b286:	f108 0801 	add.w	r8, r8, #1
 800b28a:	9b02      	ldr	r3, [sp, #8]
 800b28c:	4598      	cmp	r8, r3
 800b28e:	dc01      	bgt.n	800b294 <__kernel_rem_pio2+0x4a4>
 800b290:	45b8      	cmp	r8, r7
 800b292:	dde6      	ble.n	800b262 <__kernel_rem_pio2+0x472>
 800b294:	ab48      	add	r3, sp, #288	; 0x120
 800b296:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b29a:	e9c7 ab00 	strd	sl, fp, [r7]
 800b29e:	3e01      	subs	r6, #1
 800b2a0:	e707      	b.n	800b0b2 <__kernel_rem_pio2+0x2c2>
 800b2a2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	dc09      	bgt.n	800b2bc <__kernel_rem_pio2+0x4cc>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dc32      	bgt.n	800b312 <__kernel_rem_pio2+0x522>
 800b2ac:	d05a      	beq.n	800b364 <__kernel_rem_pio2+0x574>
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	f003 0007 	and.w	r0, r3, #7
 800b2b4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d1f5      	bne.n	800b2ae <__kernel_rem_pio2+0x4be>
 800b2c2:	ab48      	add	r3, sp, #288	; 0x120
 800b2c4:	441d      	add	r5, r3
 800b2c6:	46aa      	mov	sl, r5
 800b2c8:	46a3      	mov	fp, r4
 800b2ca:	f1bb 0f00 	cmp.w	fp, #0
 800b2ce:	dc76      	bgt.n	800b3be <__kernel_rem_pio2+0x5ce>
 800b2d0:	46aa      	mov	sl, r5
 800b2d2:	46a3      	mov	fp, r4
 800b2d4:	f1bb 0f01 	cmp.w	fp, #1
 800b2d8:	f300 8090 	bgt.w	800b3fc <__kernel_rem_pio2+0x60c>
 800b2dc:	2700      	movs	r7, #0
 800b2de:	463e      	mov	r6, r7
 800b2e0:	2c01      	cmp	r4, #1
 800b2e2:	f300 80aa 	bgt.w	800b43a <__kernel_rem_pio2+0x64a>
 800b2e6:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b2ea:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b2ee:	9b00      	ldr	r3, [sp, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f040 80ac 	bne.w	800b44e <__kernel_rem_pio2+0x65e>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	9806      	ldr	r0, [sp, #24]
 800b2fc:	e9c0 2300 	strd	r2, r3, [r0]
 800b300:	4622      	mov	r2, r4
 800b302:	460b      	mov	r3, r1
 800b304:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b308:	463a      	mov	r2, r7
 800b30a:	4633      	mov	r3, r6
 800b30c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b310:	e7cd      	b.n	800b2ae <__kernel_rem_pio2+0x4be>
 800b312:	2000      	movs	r0, #0
 800b314:	46a0      	mov	r8, r4
 800b316:	4601      	mov	r1, r0
 800b318:	ab48      	add	r3, sp, #288	; 0x120
 800b31a:	441d      	add	r5, r3
 800b31c:	f1b8 0f00 	cmp.w	r8, #0
 800b320:	da3a      	bge.n	800b398 <__kernel_rem_pio2+0x5a8>
 800b322:	9b00      	ldr	r3, [sp, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d03e      	beq.n	800b3a6 <__kernel_rem_pio2+0x5b6>
 800b328:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b32c:	4602      	mov	r2, r0
 800b32e:	462b      	mov	r3, r5
 800b330:	9d06      	ldr	r5, [sp, #24]
 800b332:	2601      	movs	r6, #1
 800b334:	e9c5 2300 	strd	r2, r3, [r5]
 800b338:	460b      	mov	r3, r1
 800b33a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b33e:	f7f4 ff13 	bl	8000168 <__aeabi_dsub>
 800b342:	4684      	mov	ip, r0
 800b344:	460f      	mov	r7, r1
 800b346:	ad48      	add	r5, sp, #288	; 0x120
 800b348:	42b4      	cmp	r4, r6
 800b34a:	f105 0508 	add.w	r5, r5, #8
 800b34e:	da2c      	bge.n	800b3aa <__kernel_rem_pio2+0x5ba>
 800b350:	9b00      	ldr	r3, [sp, #0]
 800b352:	b10b      	cbz	r3, 800b358 <__kernel_rem_pio2+0x568>
 800b354:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b358:	4662      	mov	r2, ip
 800b35a:	463b      	mov	r3, r7
 800b35c:	9906      	ldr	r1, [sp, #24]
 800b35e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b362:	e7a4      	b.n	800b2ae <__kernel_rem_pio2+0x4be>
 800b364:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b366:	ab48      	add	r3, sp, #288	; 0x120
 800b368:	4637      	mov	r7, r6
 800b36a:	441d      	add	r5, r3
 800b36c:	2c00      	cmp	r4, #0
 800b36e:	da09      	bge.n	800b384 <__kernel_rem_pio2+0x594>
 800b370:	9b00      	ldr	r3, [sp, #0]
 800b372:	b10b      	cbz	r3, 800b378 <__kernel_rem_pio2+0x588>
 800b374:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	9906      	ldr	r1, [sp, #24]
 800b37e:	e9c1 2300 	strd	r2, r3, [r1]
 800b382:	e794      	b.n	800b2ae <__kernel_rem_pio2+0x4be>
 800b384:	4630      	mov	r0, r6
 800b386:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f4 feee 	bl	800016c <__adddf3>
 800b390:	3c01      	subs	r4, #1
 800b392:	4606      	mov	r6, r0
 800b394:	460f      	mov	r7, r1
 800b396:	e7e9      	b.n	800b36c <__kernel_rem_pio2+0x57c>
 800b398:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b39c:	f7f4 fee6 	bl	800016c <__adddf3>
 800b3a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3a4:	e7ba      	b.n	800b31c <__kernel_rem_pio2+0x52c>
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	e7c0      	b.n	800b32c <__kernel_rem_pio2+0x53c>
 800b3aa:	4660      	mov	r0, ip
 800b3ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	f7f4 fedb 	bl	800016c <__adddf3>
 800b3b6:	3601      	adds	r6, #1
 800b3b8:	4684      	mov	ip, r0
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	e7c4      	b.n	800b348 <__kernel_rem_pio2+0x558>
 800b3be:	e9da 6700 	ldrd	r6, r7, [sl]
 800b3c2:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b3c6:	4632      	mov	r2, r6
 800b3c8:	463b      	mov	r3, r7
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	f7f4 fecd 	bl	800016c <__adddf3>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3da:	4640      	mov	r0, r8
 800b3dc:	4649      	mov	r1, r9
 800b3de:	f7f4 fec3 	bl	8000168 <__aeabi_dsub>
 800b3e2:	4632      	mov	r2, r6
 800b3e4:	463b      	mov	r3, r7
 800b3e6:	f7f4 fec1 	bl	800016c <__adddf3>
 800b3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ee:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b3f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3f6:	e9ca 2300 	strd	r2, r3, [sl]
 800b3fa:	e766      	b.n	800b2ca <__kernel_rem_pio2+0x4da>
 800b3fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b400:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b404:	4642      	mov	r2, r8
 800b406:	464b      	mov	r3, r9
 800b408:	4630      	mov	r0, r6
 800b40a:	4639      	mov	r1, r7
 800b40c:	f7f4 feae 	bl	800016c <__adddf3>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b418:	4630      	mov	r0, r6
 800b41a:	4639      	mov	r1, r7
 800b41c:	f7f4 fea4 	bl	8000168 <__aeabi_dsub>
 800b420:	4642      	mov	r2, r8
 800b422:	464b      	mov	r3, r9
 800b424:	f7f4 fea2 	bl	800016c <__adddf3>
 800b428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b42c:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b430:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b434:	e9ca 2300 	strd	r2, r3, [sl]
 800b438:	e74c      	b.n	800b2d4 <__kernel_rem_pio2+0x4e4>
 800b43a:	4638      	mov	r0, r7
 800b43c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b440:	4631      	mov	r1, r6
 800b442:	f7f4 fe93 	bl	800016c <__adddf3>
 800b446:	3c01      	subs	r4, #1
 800b448:	4607      	mov	r7, r0
 800b44a:	460e      	mov	r6, r1
 800b44c:	e748      	b.n	800b2e0 <__kernel_rem_pio2+0x4f0>
 800b44e:	9b06      	ldr	r3, [sp, #24]
 800b450:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b454:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b458:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b45c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b460:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b464:	601d      	str	r5, [r3, #0]
 800b466:	615e      	str	r6, [r3, #20]
 800b468:	e721      	b.n	800b2ae <__kernel_rem_pio2+0x4be>
 800b46a:	bf00      	nop
 800b46c:	41700000 	.word	0x41700000
 800b470:	3e700000 	.word	0x3e700000
 800b474:	00000000 	.word	0x00000000

0800b478 <__kernel_tan>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	b08b      	sub	sp, #44	; 0x2c
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	4bd9      	ldr	r3, [pc, #868]	; (800b7e8 <__kernel_tan+0x370>)
 800b482:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b486:	429e      	cmp	r6, r3
 800b488:	4604      	mov	r4, r0
 800b48a:	460d      	mov	r5, r1
 800b48c:	4682      	mov	sl, r0
 800b48e:	468b      	mov	fp, r1
 800b490:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b492:	9202      	str	r2, [sp, #8]
 800b494:	9107      	str	r1, [sp, #28]
 800b496:	dc58      	bgt.n	800b54a <__kernel_tan+0xd2>
 800b498:	f7f5 face 	bl	8000a38 <__aeabi_d2iz>
 800b49c:	4605      	mov	r5, r0
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d178      	bne.n	800b594 <__kernel_tan+0x11c>
 800b4a2:	1c7b      	adds	r3, r7, #1
 800b4a4:	4323      	orrs	r3, r4
 800b4a6:	4333      	orrs	r3, r6
 800b4a8:	d110      	bne.n	800b4cc <__kernel_tan+0x54>
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f000 fa0b 	bl	800b8c8 <fabs>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	49cc      	ldr	r1, [pc, #816]	; (800b7ec <__kernel_tan+0x374>)
 800b4ba:	f7f5 f937 	bl	800072c <__aeabi_ddiv>
 800b4be:	4682      	mov	sl, r0
 800b4c0:	468b      	mov	fp, r1
 800b4c2:	4650      	mov	r0, sl
 800b4c4:	4659      	mov	r1, fp
 800b4c6:	b00b      	add	sp, #44	; 0x2c
 800b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	2f01      	cmp	r7, #1
 800b4ce:	d0f8      	beq.n	800b4c2 <__kernel_tan+0x4a>
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4659      	mov	r1, fp
 800b4d4:	9a02      	ldr	r2, [sp, #8]
 800b4d6:	9b00      	ldr	r3, [sp, #0]
 800b4d8:	f7f4 fe48 	bl	800016c <__adddf3>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	49c2      	ldr	r1, [pc, #776]	; (800b7f0 <__kernel_tan+0x378>)
 800b4e6:	f7f5 f921 	bl	800072c <__aeabi_ddiv>
 800b4ea:	462e      	mov	r6, r5
 800b4ec:	4689      	mov	r9, r1
 800b4ee:	4652      	mov	r2, sl
 800b4f0:	465b      	mov	r3, fp
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	462c      	mov	r4, r5
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	460d      	mov	r5, r1
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	f7f4 fe34 	bl	8000168 <__aeabi_dsub>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	9802      	ldr	r0, [sp, #8]
 800b506:	9900      	ldr	r1, [sp, #0]
 800b508:	f7f4 fe2e 	bl	8000168 <__aeabi_dsub>
 800b50c:	4632      	mov	r2, r6
 800b50e:	464b      	mov	r3, r9
 800b510:	f7f4 ffe2 	bl	80004d8 <__aeabi_dmul>
 800b514:	4632      	mov	r2, r6
 800b516:	4682      	mov	sl, r0
 800b518:	468b      	mov	fp, r1
 800b51a:	464b      	mov	r3, r9
 800b51c:	4630      	mov	r0, r6
 800b51e:	4639      	mov	r1, r7
 800b520:	f7f4 ffda 	bl	80004d8 <__aeabi_dmul>
 800b524:	2200      	movs	r2, #0
 800b526:	4bb1      	ldr	r3, [pc, #708]	; (800b7ec <__kernel_tan+0x374>)
 800b528:	f7f4 fe20 	bl	800016c <__adddf3>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4650      	mov	r0, sl
 800b532:	4659      	mov	r1, fp
 800b534:	f7f4 fe1a 	bl	800016c <__adddf3>
 800b538:	4642      	mov	r2, r8
 800b53a:	464b      	mov	r3, r9
 800b53c:	f7f4 ffcc 	bl	80004d8 <__aeabi_dmul>
 800b540:	4622      	mov	r2, r4
 800b542:	462b      	mov	r3, r5
 800b544:	f7f4 fe12 	bl	800016c <__adddf3>
 800b548:	e7b9      	b.n	800b4be <__kernel_tan+0x46>
 800b54a:	4baa      	ldr	r3, [pc, #680]	; (800b7f4 <__kernel_tan+0x37c>)
 800b54c:	429e      	cmp	r6, r3
 800b54e:	dd21      	ble.n	800b594 <__kernel_tan+0x11c>
 800b550:	2900      	cmp	r1, #0
 800b552:	da06      	bge.n	800b562 <__kernel_tan+0xea>
 800b554:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b558:	469b      	mov	fp, r3
 800b55a:	9b00      	ldr	r3, [sp, #0]
 800b55c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	4652      	mov	r2, sl
 800b564:	a182      	add	r1, pc, #520	; (adr r1, 800b770 <__kernel_tan+0x2f8>)
 800b566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56a:	465b      	mov	r3, fp
 800b56c:	f7f4 fdfc 	bl	8000168 <__aeabi_dsub>
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	a180      	add	r1, pc, #512	; (adr r1, 800b778 <__kernel_tan+0x300>)
 800b576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b57a:	9a02      	ldr	r2, [sp, #8]
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	f7f4 fdf3 	bl	8000168 <__aeabi_dsub>
 800b582:	462b      	mov	r3, r5
 800b584:	4622      	mov	r2, r4
 800b586:	f7f4 fdf1 	bl	800016c <__adddf3>
 800b58a:	2300      	movs	r3, #0
 800b58c:	4682      	mov	sl, r0
 800b58e:	468b      	mov	fp, r1
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	4652      	mov	r2, sl
 800b596:	465b      	mov	r3, fp
 800b598:	4650      	mov	r0, sl
 800b59a:	4659      	mov	r1, fp
 800b59c:	f7f4 ff9c 	bl	80004d8 <__aeabi_dmul>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	f7f4 ff96 	bl	80004d8 <__aeabi_dmul>
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	4650      	mov	r0, sl
 800b5b6:	4659      	mov	r1, fp
 800b5b8:	f7f4 ff8e 	bl	80004d8 <__aeabi_dmul>
 800b5bc:	a370      	add	r3, pc, #448	; (adr r3, 800b780 <__kernel_tan+0x308>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7f4 ff85 	bl	80004d8 <__aeabi_dmul>
 800b5ce:	a36e      	add	r3, pc, #440	; (adr r3, 800b788 <__kernel_tan+0x310>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f4 fdca 	bl	800016c <__adddf3>
 800b5d8:	4622      	mov	r2, r4
 800b5da:	462b      	mov	r3, r5
 800b5dc:	f7f4 ff7c 	bl	80004d8 <__aeabi_dmul>
 800b5e0:	a36b      	add	r3, pc, #428	; (adr r3, 800b790 <__kernel_tan+0x318>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	f7f4 fdc1 	bl	800016c <__adddf3>
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	f7f4 ff73 	bl	80004d8 <__aeabi_dmul>
 800b5f2:	a369      	add	r3, pc, #420	; (adr r3, 800b798 <__kernel_tan+0x320>)
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	f7f4 fdb8 	bl	800016c <__adddf3>
 800b5fc:	4622      	mov	r2, r4
 800b5fe:	462b      	mov	r3, r5
 800b600:	f7f4 ff6a 	bl	80004d8 <__aeabi_dmul>
 800b604:	a366      	add	r3, pc, #408	; (adr r3, 800b7a0 <__kernel_tan+0x328>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f4 fdaf 	bl	800016c <__adddf3>
 800b60e:	4622      	mov	r2, r4
 800b610:	462b      	mov	r3, r5
 800b612:	f7f4 ff61 	bl	80004d8 <__aeabi_dmul>
 800b616:	a364      	add	r3, pc, #400	; (adr r3, 800b7a8 <__kernel_tan+0x330>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f4 fda6 	bl	800016c <__adddf3>
 800b620:	4642      	mov	r2, r8
 800b622:	464b      	mov	r3, r9
 800b624:	f7f4 ff58 	bl	80004d8 <__aeabi_dmul>
 800b628:	a361      	add	r3, pc, #388	; (adr r3, 800b7b0 <__kernel_tan+0x338>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	f7f4 ff4f 	bl	80004d8 <__aeabi_dmul>
 800b63a:	a35f      	add	r3, pc, #380	; (adr r3, 800b7b8 <__kernel_tan+0x340>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	f7f4 fd94 	bl	800016c <__adddf3>
 800b644:	4622      	mov	r2, r4
 800b646:	462b      	mov	r3, r5
 800b648:	f7f4 ff46 	bl	80004d8 <__aeabi_dmul>
 800b64c:	a35c      	add	r3, pc, #368	; (adr r3, 800b7c0 <__kernel_tan+0x348>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f7f4 fd8b 	bl	800016c <__adddf3>
 800b656:	4622      	mov	r2, r4
 800b658:	462b      	mov	r3, r5
 800b65a:	f7f4 ff3d 	bl	80004d8 <__aeabi_dmul>
 800b65e:	a35a      	add	r3, pc, #360	; (adr r3, 800b7c8 <__kernel_tan+0x350>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f7f4 fd82 	bl	800016c <__adddf3>
 800b668:	4622      	mov	r2, r4
 800b66a:	462b      	mov	r3, r5
 800b66c:	f7f4 ff34 	bl	80004d8 <__aeabi_dmul>
 800b670:	a357      	add	r3, pc, #348	; (adr r3, 800b7d0 <__kernel_tan+0x358>)
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	f7f4 fd79 	bl	800016c <__adddf3>
 800b67a:	4622      	mov	r2, r4
 800b67c:	462b      	mov	r3, r5
 800b67e:	f7f4 ff2b 	bl	80004d8 <__aeabi_dmul>
 800b682:	a355      	add	r3, pc, #340	; (adr r3, 800b7d8 <__kernel_tan+0x360>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 fd70 	bl	800016c <__adddf3>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b694:	f7f4 fd6a 	bl	800016c <__adddf3>
 800b698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69c:	f7f4 ff1c 	bl	80004d8 <__aeabi_dmul>
 800b6a0:	9a02      	ldr	r2, [sp, #8]
 800b6a2:	9b00      	ldr	r3, [sp, #0]
 800b6a4:	f7f4 fd62 	bl	800016c <__adddf3>
 800b6a8:	4642      	mov	r2, r8
 800b6aa:	464b      	mov	r3, r9
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	9a02      	ldr	r2, [sp, #8]
 800b6b2:	9b00      	ldr	r3, [sp, #0]
 800b6b4:	f7f4 fd5a 	bl	800016c <__adddf3>
 800b6b8:	a349      	add	r3, pc, #292	; (adr r3, 800b7e0 <__kernel_tan+0x368>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	4604      	mov	r4, r0
 800b6c0:	460d      	mov	r5, r1
 800b6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6c6:	f7f4 ff07 	bl	80004d8 <__aeabi_dmul>
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	462b      	mov	r3, r5
 800b6ce:	f7f4 fd4d 	bl	800016c <__adddf3>
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	e9cd 0100 	strd	r0, r1, [sp]
 800b6d8:	4602      	mov	r2, r0
 800b6da:	4659      	mov	r1, fp
 800b6dc:	4650      	mov	r0, sl
 800b6de:	f7f4 fd45 	bl	800016c <__adddf3>
 800b6e2:	4b44      	ldr	r3, [pc, #272]	; (800b7f4 <__kernel_tan+0x37c>)
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	429e      	cmp	r6, r3
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	f340 8085 	ble.w	800b7f8 <__kernel_tan+0x380>
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	f7f4 fe88 	bl	8000404 <__aeabi_i2d>
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	4680      	mov	r8, r0
 800b6f8:	4689      	mov	r9, r1
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	4629      	mov	r1, r5
 800b700:	f7f4 feea 	bl	80004d8 <__aeabi_dmul>
 800b704:	4642      	mov	r2, r8
 800b706:	4606      	mov	r6, r0
 800b708:	460f      	mov	r7, r1
 800b70a:	464b      	mov	r3, r9
 800b70c:	4620      	mov	r0, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	f7f4 fd2c 	bl	800016c <__adddf3>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	f7f5 f806 	bl	800072c <__aeabi_ddiv>
 800b720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b724:	f7f4 fd20 	bl	8000168 <__aeabi_dsub>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4650      	mov	r0, sl
 800b72e:	4659      	mov	r1, fp
 800b730:	f7f4 fd1a 	bl	8000168 <__aeabi_dsub>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	f7f4 fd18 	bl	800016c <__adddf3>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4640      	mov	r0, r8
 800b742:	4649      	mov	r1, r9
 800b744:	f7f4 fd10 	bl	8000168 <__aeabi_dsub>
 800b748:	9b07      	ldr	r3, [sp, #28]
 800b74a:	4604      	mov	r4, r0
 800b74c:	179b      	asrs	r3, r3, #30
 800b74e:	f003 0302 	and.w	r3, r3, #2
 800b752:	f1c3 0001 	rsb	r0, r3, #1
 800b756:	460d      	mov	r5, r1
 800b758:	f7f4 fe54 	bl	8000404 <__aeabi_i2d>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f4 feb8 	bl	80004d8 <__aeabi_dmul>
 800b768:	e6a9      	b.n	800b4be <__kernel_tan+0x46>
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w
 800b770:	54442d18 	.word	0x54442d18
 800b774:	3fe921fb 	.word	0x3fe921fb
 800b778:	33145c07 	.word	0x33145c07
 800b77c:	3c81a626 	.word	0x3c81a626
 800b780:	74bf7ad4 	.word	0x74bf7ad4
 800b784:	3efb2a70 	.word	0x3efb2a70
 800b788:	32f0a7e9 	.word	0x32f0a7e9
 800b78c:	3f12b80f 	.word	0x3f12b80f
 800b790:	1a8d1068 	.word	0x1a8d1068
 800b794:	3f3026f7 	.word	0x3f3026f7
 800b798:	fee08315 	.word	0xfee08315
 800b79c:	3f57dbc8 	.word	0x3f57dbc8
 800b7a0:	e96e8493 	.word	0xe96e8493
 800b7a4:	3f8226e3 	.word	0x3f8226e3
 800b7a8:	1bb341fe 	.word	0x1bb341fe
 800b7ac:	3faba1ba 	.word	0x3faba1ba
 800b7b0:	db605373 	.word	0xdb605373
 800b7b4:	bef375cb 	.word	0xbef375cb
 800b7b8:	a03792a6 	.word	0xa03792a6
 800b7bc:	3f147e88 	.word	0x3f147e88
 800b7c0:	f2f26501 	.word	0xf2f26501
 800b7c4:	3f4344d8 	.word	0x3f4344d8
 800b7c8:	c9560328 	.word	0xc9560328
 800b7cc:	3f6d6d22 	.word	0x3f6d6d22
 800b7d0:	8406d637 	.word	0x8406d637
 800b7d4:	3f9664f4 	.word	0x3f9664f4
 800b7d8:	1110fe7a 	.word	0x1110fe7a
 800b7dc:	3fc11111 	.word	0x3fc11111
 800b7e0:	55555563 	.word	0x55555563
 800b7e4:	3fd55555 	.word	0x3fd55555
 800b7e8:	3e2fffff 	.word	0x3e2fffff
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	bff00000 	.word	0xbff00000
 800b7f4:	3fe59427 	.word	0x3fe59427
 800b7f8:	2f01      	cmp	r7, #1
 800b7fa:	d031      	beq.n	800b860 <__kernel_tan+0x3e8>
 800b7fc:	460f      	mov	r7, r1
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	2000      	movs	r0, #0
 800b804:	4918      	ldr	r1, [pc, #96]	; (800b868 <__kernel_tan+0x3f0>)
 800b806:	f7f4 ff91 	bl	800072c <__aeabi_ddiv>
 800b80a:	2600      	movs	r6, #0
 800b80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b814:	4652      	mov	r2, sl
 800b816:	465b      	mov	r3, fp
 800b818:	4630      	mov	r0, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	f7f4 fca4 	bl	8000168 <__aeabi_dsub>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b828:	f7f4 fc9e 	bl	8000168 <__aeabi_dsub>
 800b82c:	4632      	mov	r2, r6
 800b82e:	462b      	mov	r3, r5
 800b830:	f7f4 fe52 	bl	80004d8 <__aeabi_dmul>
 800b834:	4632      	mov	r2, r6
 800b836:	4682      	mov	sl, r0
 800b838:	468b      	mov	fp, r1
 800b83a:	462b      	mov	r3, r5
 800b83c:	4630      	mov	r0, r6
 800b83e:	4639      	mov	r1, r7
 800b840:	f7f4 fe4a 	bl	80004d8 <__aeabi_dmul>
 800b844:	2200      	movs	r2, #0
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <__kernel_tan+0x3f4>)
 800b848:	f7f4 fc90 	bl	800016c <__adddf3>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4650      	mov	r0, sl
 800b852:	4659      	mov	r1, fp
 800b854:	f7f4 fc8a 	bl	800016c <__adddf3>
 800b858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b85c:	4634      	mov	r4, r6
 800b85e:	e66d      	b.n	800b53c <__kernel_tan+0xc4>
 800b860:	4682      	mov	sl, r0
 800b862:	468b      	mov	fp, r1
 800b864:	e62d      	b.n	800b4c2 <__kernel_tan+0x4a>
 800b866:	bf00      	nop
 800b868:	bff00000 	.word	0xbff00000
 800b86c:	3ff00000 	.word	0x3ff00000

0800b870 <with_errno>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4604      	mov	r4, r0
 800b874:	460d      	mov	r5, r1
 800b876:	4616      	mov	r6, r2
 800b878:	f7fb fb5c 	bl	8006f34 <__errno>
 800b87c:	4629      	mov	r1, r5
 800b87e:	6006      	str	r6, [r0, #0]
 800b880:	4620      	mov	r0, r4
 800b882:	bd70      	pop	{r4, r5, r6, pc}

0800b884 <xflow>:
 800b884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b886:	4615      	mov	r5, r2
 800b888:	461c      	mov	r4, r3
 800b88a:	b180      	cbz	r0, 800b8ae <xflow+0x2a>
 800b88c:	4610      	mov	r0, r2
 800b88e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b892:	e9cd 0100 	strd	r0, r1, [sp]
 800b896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b89a:	4628      	mov	r0, r5
 800b89c:	4621      	mov	r1, r4
 800b89e:	f7f4 fe1b 	bl	80004d8 <__aeabi_dmul>
 800b8a2:	2222      	movs	r2, #34	; 0x22
 800b8a4:	b003      	add	sp, #12
 800b8a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8aa:	f7ff bfe1 	b.w	800b870 <with_errno>
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	e7ee      	b.n	800b892 <xflow+0xe>

0800b8b4 <__math_uflow>:
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8ba:	f7ff bfe3 	b.w	800b884 <xflow>

0800b8be <__math_oflow>:
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b8c4:	f7ff bfde 	b.w	800b884 <xflow>

0800b8c8 <fabs>:
 800b8c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b8cc:	4770      	bx	lr

0800b8ce <finite>:
 800b8ce:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b8d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b8d6:	0fc0      	lsrs	r0, r0, #31
 800b8d8:	4770      	bx	lr
 800b8da:	0000      	movs	r0, r0
 800b8dc:	0000      	movs	r0, r0
	...

0800b8e0 <floor>:
 800b8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b8e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b8ec:	2e13      	cmp	r6, #19
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4607      	mov	r7, r0
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	dc33      	bgt.n	800b962 <floor+0x82>
 800b8fa:	2e00      	cmp	r6, #0
 800b8fc:	da14      	bge.n	800b928 <floor+0x48>
 800b8fe:	a334      	add	r3, pc, #208	; (adr r3, 800b9d0 <floor+0xf0>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f4 fc32 	bl	800016c <__adddf3>
 800b908:	2200      	movs	r2, #0
 800b90a:	2300      	movs	r3, #0
 800b90c:	f7f5 f874 	bl	80009f8 <__aeabi_dcmpgt>
 800b910:	b138      	cbz	r0, 800b922 <floor+0x42>
 800b912:	2c00      	cmp	r4, #0
 800b914:	da58      	bge.n	800b9c8 <floor+0xe8>
 800b916:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b91a:	431d      	orrs	r5, r3
 800b91c:	d001      	beq.n	800b922 <floor+0x42>
 800b91e:	2500      	movs	r5, #0
 800b920:	4c2d      	ldr	r4, [pc, #180]	; (800b9d8 <floor+0xf8>)
 800b922:	4623      	mov	r3, r4
 800b924:	462f      	mov	r7, r5
 800b926:	e025      	b.n	800b974 <floor+0x94>
 800b928:	4a2c      	ldr	r2, [pc, #176]	; (800b9dc <floor+0xfc>)
 800b92a:	fa42 f806 	asr.w	r8, r2, r6
 800b92e:	ea01 0208 	and.w	r2, r1, r8
 800b932:	4302      	orrs	r2, r0
 800b934:	d01e      	beq.n	800b974 <floor+0x94>
 800b936:	a326      	add	r3, pc, #152	; (adr r3, 800b9d0 <floor+0xf0>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 fc16 	bl	800016c <__adddf3>
 800b940:	2200      	movs	r2, #0
 800b942:	2300      	movs	r3, #0
 800b944:	f7f5 f858 	bl	80009f8 <__aeabi_dcmpgt>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d0ea      	beq.n	800b922 <floor+0x42>
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	bfbe      	ittt	lt
 800b950:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b954:	fa43 f606 	asrlt.w	r6, r3, r6
 800b958:	19a4      	addlt	r4, r4, r6
 800b95a:	2500      	movs	r5, #0
 800b95c:	ea24 0408 	bic.w	r4, r4, r8
 800b960:	e7df      	b.n	800b922 <floor+0x42>
 800b962:	2e33      	cmp	r6, #51	; 0x33
 800b964:	dd0a      	ble.n	800b97c <floor+0x9c>
 800b966:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b96a:	d103      	bne.n	800b974 <floor+0x94>
 800b96c:	f7f4 fbfe 	bl	800016c <__adddf3>
 800b970:	4607      	mov	r7, r0
 800b972:	460b      	mov	r3, r1
 800b974:	4638      	mov	r0, r7
 800b976:	4619      	mov	r1, r3
 800b978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97c:	f04f 32ff 	mov.w	r2, #4294967295
 800b980:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b984:	fa22 f808 	lsr.w	r8, r2, r8
 800b988:	ea18 0f00 	tst.w	r8, r0
 800b98c:	d0f2      	beq.n	800b974 <floor+0x94>
 800b98e:	a310      	add	r3, pc, #64	; (adr r3, 800b9d0 <floor+0xf0>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f7f4 fbea 	bl	800016c <__adddf3>
 800b998:	2200      	movs	r2, #0
 800b99a:	2300      	movs	r3, #0
 800b99c:	f7f5 f82c 	bl	80009f8 <__aeabi_dcmpgt>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d0be      	beq.n	800b922 <floor+0x42>
 800b9a4:	2c00      	cmp	r4, #0
 800b9a6:	da02      	bge.n	800b9ae <floor+0xce>
 800b9a8:	2e14      	cmp	r6, #20
 800b9aa:	d103      	bne.n	800b9b4 <floor+0xd4>
 800b9ac:	3401      	adds	r4, #1
 800b9ae:	ea25 0508 	bic.w	r5, r5, r8
 800b9b2:	e7b6      	b.n	800b922 <floor+0x42>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9ba:	fa03 f606 	lsl.w	r6, r3, r6
 800b9be:	4435      	add	r5, r6
 800b9c0:	42bd      	cmp	r5, r7
 800b9c2:	bf38      	it	cc
 800b9c4:	18e4      	addcc	r4, r4, r3
 800b9c6:	e7f2      	b.n	800b9ae <floor+0xce>
 800b9c8:	2500      	movs	r5, #0
 800b9ca:	462c      	mov	r4, r5
 800b9cc:	e7a9      	b.n	800b922 <floor+0x42>
 800b9ce:	bf00      	nop
 800b9d0:	8800759c 	.word	0x8800759c
 800b9d4:	7e37e43c 	.word	0x7e37e43c
 800b9d8:	bff00000 	.word	0xbff00000
 800b9dc:	000fffff 	.word	0x000fffff

0800b9e0 <scalbn>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	460d      	mov	r5, r1
 800b9ea:	4617      	mov	r7, r2
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	b996      	cbnz	r6, 800ba16 <scalbn+0x36>
 800b9f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9f4:	4303      	orrs	r3, r0
 800b9f6:	d039      	beq.n	800ba6c <scalbn+0x8c>
 800b9f8:	4b33      	ldr	r3, [pc, #204]	; (800bac8 <scalbn+0xe8>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f7f4 fd6c 	bl	80004d8 <__aeabi_dmul>
 800ba00:	4b32      	ldr	r3, [pc, #200]	; (800bacc <scalbn+0xec>)
 800ba02:	4604      	mov	r4, r0
 800ba04:	429f      	cmp	r7, r3
 800ba06:	460d      	mov	r5, r1
 800ba08:	da0f      	bge.n	800ba2a <scalbn+0x4a>
 800ba0a:	a32b      	add	r3, pc, #172	; (adr r3, 800bab8 <scalbn+0xd8>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fd62 	bl	80004d8 <__aeabi_dmul>
 800ba14:	e006      	b.n	800ba24 <scalbn+0x44>
 800ba16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ba1a:	4296      	cmp	r6, r2
 800ba1c:	d10a      	bne.n	800ba34 <scalbn+0x54>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	f7f4 fba4 	bl	800016c <__adddf3>
 800ba24:	4604      	mov	r4, r0
 800ba26:	460d      	mov	r5, r1
 800ba28:	e020      	b.n	800ba6c <scalbn+0x8c>
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ba30:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ba34:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ba38:	19b9      	adds	r1, r7, r6
 800ba3a:	4291      	cmp	r1, r2
 800ba3c:	dd0e      	ble.n	800ba5c <scalbn+0x7c>
 800ba3e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ba42:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ba46:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ba4a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ba4e:	4820      	ldr	r0, [pc, #128]	; (800bad0 <scalbn+0xf0>)
 800ba50:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ba54:	a31a      	add	r3, pc, #104	; (adr r3, 800bac0 <scalbn+0xe0>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	e7d9      	b.n	800ba10 <scalbn+0x30>
 800ba5c:	2900      	cmp	r1, #0
 800ba5e:	dd08      	ble.n	800ba72 <scalbn+0x92>
 800ba60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba68:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba72:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ba76:	da12      	bge.n	800ba9e <scalbn+0xbe>
 800ba78:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba7c:	429f      	cmp	r7, r3
 800ba7e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ba82:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800ba86:	dcdc      	bgt.n	800ba42 <scalbn+0x62>
 800ba88:	a30b      	add	r3, pc, #44	; (adr r3, 800bab8 <scalbn+0xd8>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ba92:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ba96:	480f      	ldr	r0, [pc, #60]	; (800bad4 <scalbn+0xf4>)
 800ba98:	f041 011f 	orr.w	r1, r1, #31
 800ba9c:	e7b8      	b.n	800ba10 <scalbn+0x30>
 800ba9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baa2:	3136      	adds	r1, #54	; 0x36
 800baa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baa8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800baac:	4620      	mov	r0, r4
 800baae:	4629      	mov	r1, r5
 800bab0:	2200      	movs	r2, #0
 800bab2:	4b09      	ldr	r3, [pc, #36]	; (800bad8 <scalbn+0xf8>)
 800bab4:	e7ac      	b.n	800ba10 <scalbn+0x30>
 800bab6:	bf00      	nop
 800bab8:	c2f8f359 	.word	0xc2f8f359
 800babc:	01a56e1f 	.word	0x01a56e1f
 800bac0:	8800759c 	.word	0x8800759c
 800bac4:	7e37e43c 	.word	0x7e37e43c
 800bac8:	43500000 	.word	0x43500000
 800bacc:	ffff3cb0 	.word	0xffff3cb0
 800bad0:	8800759c 	.word	0x8800759c
 800bad4:	c2f8f359 	.word	0xc2f8f359
 800bad8:	3c900000 	.word	0x3c900000

0800badc <_init>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr

0800bae8 <_fini>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr
