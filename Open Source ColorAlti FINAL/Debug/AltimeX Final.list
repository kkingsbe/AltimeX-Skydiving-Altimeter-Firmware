
AltimeX Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b98c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800baa0  0800baa0  0001baa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c130  0800c130  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c130  0800c130  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c130  0800c130  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c130  0800c130  0001c130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c134  0800c134  0001c134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200001e0  0800c314  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  0800c314  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bf2  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b11  00000000  00000000  00032df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00035908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00036a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199a3  00000000  00000000  000379e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d58  00000000  00000000  0005138b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3ec  00000000  00000000  000660e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f54cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  000f5520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba84 	.word	0x0800ba84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800ba84 	.word	0x0800ba84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <LPS_Init>:
#include "LPS22HB.h"

struct LPS_CONFIG lpsConfig;

uint8_t LPS_Init(I2C_HandleTypeDef* i2c_config, uint16_t address, UART_HandleTypeDef* uart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	817b      	strh	r3, [r7, #10]
	HAL_Delay(1000);
 8000d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d96:	f001 fef7 	bl	8002b88 <HAL_Delay>
	lpsConfig.i2c_config = i2c_config;
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <LPS_Init+0x6c>)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6013      	str	r3, [r2, #0]
	lpsConfig.address = address;
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <LPS_Init+0x6c>)
 8000da2:	897b      	ldrh	r3, [r7, #10]
 8000da4:	8093      	strh	r3, [r2, #4]
	lpsConfig.uart = uart;
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <LPS_Init+0x6c>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6093      	str	r3, [r2, #8]

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 8000dac:	2305      	movs	r3, #5
 8000dae:	2203      	movs	r2, #3
 8000db0:	21b8      	movs	r1, #184	; 0xb8
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f003 f8fe 	bl	8003fb4 <HAL_I2C_IsDeviceReady>
 8000db8:	4603      	mov	r3, r0
 8000dba:	75fb      	strb	r3, [r7, #23]
	if(i2c_status == HAL_BUSY) {
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d101      	bne.n	8000dc6 <LPS_Init+0x42>
		return 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e00f      	b.n	8000de6 <LPS_Init+0x62>
	}

	//Set the ouptut data rate (odr)
	LPS_Set_Odr(ODR_75hz);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f000 f832 	bl	8000e30 <LPS_Set_Odr>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = LPS_Get_Odr();
 8000dcc:	f000 f862 	bl	8000e94 <LPS_Get_Odr>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	75bb      	strb	r3, [r7, #22]
	if(odr != ODR_75hz) {
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d001      	beq.n	8000dde <LPS_Init+0x5a>
		return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e003      	b.n	8000de6 <LPS_Init+0x62>
	}

	//Set FIFO mode to BYPASS
	LPS_Configure_Fifo(BYPASS);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f86a 	bl	8000eb8 <LPS_Configure_Fifo>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001fc 	.word	0x200001fc

08000df4 <LPS_Reg_Read>:

void LPS_Reg_Read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af04      	add	r7, sp, #16
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	460b      	mov	r3, r1
 8000e02:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), reg_addr, 1, data_output, reg_size, 100);
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <LPS_Reg_Read+0x38>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <LPS_Reg_Read+0x38>)
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	b299      	uxth	r1, r3
 8000e10:	88fa      	ldrh	r2, [r7, #6]
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f002 fe60 	bl	8003ae4 <HAL_I2C_Mem_Read>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200001fc 	.word	0x200001fc

08000e30 <LPS_Set_Odr>:

//Configures the output data rate (ODR)
void LPS_Set_Odr(enum LPS_ODR new_odr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2101      	movs	r1, #1
 8000e42:	2010      	movs	r0, #16
 8000e44:	f7ff ffd6 	bl	8000df4 <LPS_Reg_Read>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 8000e52:	7a3b      	ldrb	r3, [r7, #8]
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t)(lpsConfig.address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <LPS_Set_Odr+0x60>)
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <LPS_Set_Odr+0x60>)
 8000e6a:	889b      	ldrh	r3, [r3, #4]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	2301      	movs	r3, #1
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2210      	movs	r2, #16
 8000e82:	f002 fd35 	bl	80038f0 <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001fc 	.word	0x200001fc

08000e94 <LPS_Get_Odr>:

//Reads the sensors odr
enum LPS_ODR LPS_Get_Odr()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	uint8_t existingConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, existingConfig);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2010      	movs	r0, #16
 8000ea2:	f7ff ffa7 	bl	8000df4 <LPS_Reg_Read>
	uint8_t odr_code = (existingConfig[0] >> 4);
 8000ea6:	793b      	ldrb	r3, [r7, #4]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	71fb      	strb	r3, [r7, #7]

	return odr_code;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <LPS_Configure_Fifo>:

//Configures the FIFO for the desired mode
void LPS_Configure_Fifo(enum LPS_FIFO desiredFifo)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d11d      	bne.n	8000f04 <LPS_Configure_Fifo+0x4c>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	LPS_Reg_Read(FIFO_CTRL, 1, existingConfig);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2014      	movs	r0, #20
 8000ed2:	f7ff ff8f 	bl	8000df4 <LPS_Reg_Read>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(lpsConfig.i2c_config, (uint16_t) (lpsConfig.address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <LPS_Configure_Fifo+0x54>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <LPS_Configure_Fifo+0x54>)
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b299      	uxth	r1, r3
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	2214      	movs	r2, #20
 8000efe:	f002 fcf7 	bl	80038f0 <HAL_I2C_Mem_Write>
 8000f02:	e000      	b.n	8000f06 <LPS_Configure_Fifo+0x4e>
		return;
 8000f04:	bf00      	nop
}
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001fc 	.word	0x200001fc

08000f10 <LPS_Get_Pressure>:

//Returns the pressure read by the sensor in HPA
double LPS_Get_Pressure()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 4096.0;
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <LPS_Get_Pressure+0x64>)
 8000f1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	LPS_Reg_Read(PRESS_OUT_H, 1, press_out_h);
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	461a      	mov	r2, r3
 8000f26:	2101      	movs	r1, #1
 8000f28:	202a      	movs	r0, #42	; 0x2a
 8000f2a:	f7ff ff63 	bl	8000df4 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_L, 1, press_out_l);
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	461a      	mov	r2, r3
 8000f32:	2101      	movs	r1, #1
 8000f34:	2029      	movs	r0, #41	; 0x29
 8000f36:	f7ff ff5d 	bl	8000df4 <LPS_Reg_Read>
	LPS_Reg_Read(PRESS_OUT_XL, 1, press_out_xl);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2028      	movs	r0, #40	; 0x28
 8000f42:	f7ff ff57 	bl	8000df4 <LPS_Reg_Read>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 8000f46:	7a3b      	ldrb	r3, [r7, #8]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	793b      	ldrb	r3, [r7, #4]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4413      	add	r3, r2
 8000f50:	783a      	ldrb	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]

	return pressure / SCALING_FACTOR;
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff fa44 	bl	80003e4 <__aeabi_ui2d>
 8000f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f60:	f7ff fbe4 	bl	800072c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
}
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40b00000 	.word	0x40b00000

08000f78 <LPS_Get_Temp>:

//Returns the temperature read by the sensor in C
double LPS_Get_Temp()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
	double SCALING_FACTOR = 100.0;
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <LPS_Get_Temp+0x50>)
 8000f84:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

	LPS_Reg_Read(TEMP_OUT_H, 1, temp_out_h);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2101      	movs	r1, #1
 8000f90:	202c      	movs	r0, #44	; 0x2c
 8000f92:	f7ff ff2f 	bl	8000df4 <LPS_Reg_Read>
	LPS_Reg_Read(TEMP_OUT_L, 1, temp_out_l);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	202b      	movs	r0, #43	; 0x2b
 8000f9e:	f7ff ff29 	bl	8000df4 <LPS_Reg_Read>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 8000fa2:	7a3b      	ldrb	r3, [r7, #8]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	793a      	ldrb	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

	return temperature / SCALING_FACTOR;
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fa19 	bl	80003e4 <__aeabi_ui2d>
 8000fb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fb6:	f7ff fbb9 	bl	800072c <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
}
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <LPS_Get_TempF>:

double LPS_Get_TempF()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	double tempC = LPS_Get_Temp();
 8000fd6:	f7ff ffcf 	bl	8000f78 <LPS_Get_Temp>
 8000fda:	e9c7 0100 	strd	r0, r1, [r7]
	return (tempC * (9/5.0)) + 32;
 8000fde:	a30c      	add	r3, pc, #48	; (adr r3, 8001010 <LPS_Get_TempF+0x40>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe8:	f7ff fa76 	bl	80004d8 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <LPS_Get_TempF+0x48>)
 8000ffa:	f7ff f8b7 	bl	800016c <__adddf3>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
}
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	f3af 8000 	nop.w
 8001010:	cccccccd 	.word	0xcccccccd
 8001014:	3ffccccc 	.word	0x3ffccccc
 8001018:	40400000 	.word	0x40400000
 800101c:	00000000 	.word	0x00000000

08001020 <LPS_Get_RelAlt_Ft>:
	return pressHPA * 0.0009869233;
}

//Reference pressure is pressure in Pa at surface
double LPS_Get_RelAlt_Ft(double reference_pressure)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	e9c7 0100 	strd	r0, r1, [r7]
	double p = LPS_Get_Pressure();
 800102a:	f7ff ff71 	bl	8000f10 <LPS_Get_Pressure>
 800102e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double t = LPS_Get_Temp();
 8001032:	f7ff ffa1 	bl	8000f78 <LPS_Get_Temp>
 8001036:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)reference_pressure / p;
 800103a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800103e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001042:	f7ff fb73 	bl	800072c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exponential = pow(frac_p, (double)1.0/5.257);
 800104e:	a320      	add	r3, pc, #128	; (adr r3, 80010d0 <LPS_Get_RelAlt_Ft+0xb0>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001058:	f008 fe74 	bl	8009d44 <pow>
 800105c:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double fraction_top = (exponential - 1) * (t + 273.15);
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <LPS_Get_RelAlt_Ft+0xd0>)
 8001066:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800106a:	f7ff f87d 	bl	8000168 <__aeabi_dsub>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4614      	mov	r4, r2
 8001074:	461d      	mov	r5, r3
 8001076:	a318      	add	r3, pc, #96	; (adr r3, 80010d8 <LPS_Get_RelAlt_Ft+0xb8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001080:	f7ff f874 	bl	800016c <__adddf3>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	f7ff fa24 	bl	80004d8 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double alt_m = fraction_top / 0.0065;
 8001098:	a311      	add	r3, pc, #68	; (adr r3, 80010e0 <LPS_Get_RelAlt_Ft+0xc0>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a2:	f7ff fb43 	bl	800072c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return alt_m * 3.281; //Convert to ft and return
 80010ae:	a30e      	add	r3, pc, #56	; (adr r3, 80010e8 <LPS_Get_RelAlt_Ft+0xc8>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b8:	f7ff fa0e 	bl	80004d8 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
}
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	3738      	adds	r7, #56	; 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	f3af 8000 	nop.w
 80010d0:	7dee2d4a 	.word	0x7dee2d4a
 80010d4:	3fc85936 	.word	0x3fc85936
 80010d8:	66666666 	.word	0x66666666
 80010dc:	40711266 	.word	0x40711266
 80010e0:	76c8b439 	.word	0x76c8b439
 80010e4:	3f7a9fbe 	.word	0x3f7a9fbe
 80010e8:	ed916873 	.word	0xed916873
 80010ec:	400a3f7c 	.word	0x400a3f7c
 80010f0:	3ff00000 	.word	0x3ff00000

080010f4 <LPS_Get_Calibration_Temperature>:

double LPS_Get_Calibration_Temperature(uint8_t num_samples, uint8_t sample_time_ms)
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b09a      	sub	sp, #104	; 0x68
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	460a      	mov	r2, r1
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	4613      	mov	r3, r2
 8001102:	71bb      	strb	r3, [r7, #6]
	char msg[] = "\r\n\nCalibrating LPS Temperature:";
 8001104:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <LPS_Get_Calibration_Temperature+0x10c>)
 8001106:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800110a:	461d      	mov	r5, r3
 800110c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001110:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	println(msg, strlen(msg), lpsConfig.uart);
 8001118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f817 	bl	8000150 <strlen>
 8001122:	4601      	mov	r1, r0
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fb94 	bl	800185a <println>

	double cum_val = 0;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double avg_val = 0;
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint8_t sample = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 8001150:	e01d      	b.n	800118e <LPS_Get_Calibration_Temperature+0x9a>
		double _temp = LPS_Get_Temp();
 8001152:	f7ff ff11 	bl	8000f78 <LPS_Get_Temp>
 8001156:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		print(".", 1, lpsConfig.uart);
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	461a      	mov	r2, r3
 8001160:	2101      	movs	r1, #1
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <LPS_Get_Calibration_Temperature+0x114>)
 8001164:	f000 fb68 	bl	8001838 <print>
		cum_val += _temp;
 8001168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800116c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001170:	f7fe fffc 	bl	800016c <__adddf3>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		HAL_Delay(sample_time_ms);
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fd02 	bl	8002b88 <HAL_Delay>
		sample ++;
 8001184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001188:	3301      	adds	r3, #1
 800118a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 800118e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3dc      	bcc.n	8001152 <LPS_Get_Calibration_Temperature+0x5e>
	}
	avg_val = cum_val / (double)num_samples;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f922 	bl	80003e4 <__aeabi_ui2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011a8:	f7ff fac0 	bl	800072c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	char msg2[] = "\r\nAverage Temperature (C): ";
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <LPS_Get_Calibration_Temperature+0x118>)
 80011b6:	f107 040c 	add.w	r4, r7, #12
 80011ba:	461d      	mov	r5, r3
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	print(msg2, strlen(msg2), lpsConfig.uart);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7fe ffbf 	bl	8000150 <strlen>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb2b 	bl	8001838 <print>
	printd(avg_val, lpsConfig.uart);
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <LPS_Get_Calibration_Temperature+0x110>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	461a      	mov	r2, r3
 80011e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011ec:	f000 fafa 	bl	80017e4 <printd>
	return avg_val;
 80011f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	3768      	adds	r7, #104	; 0x68
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bdb0      	pop	{r4, r5, r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800baa4 	.word	0x0800baa4
 8001204:	200001fc 	.word	0x200001fc
 8001208:	0800baa0 	.word	0x0800baa0
 800120c:	0800bac4 	.word	0x0800bac4

08001210 <LPS_Get_Calibration_Pressure>:

double LPS_Get_Calibration_Pressure(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b09a      	sub	sp, #104	; 0x68
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	4613      	mov	r3, r2
 800121e:	71bb      	strb	r3, [r7, #6]
	char msg[] = "\r\n\nCalibrating LPS Pressure:\n";
 8001220:	4b3e      	ldr	r3, [pc, #248]	; (800131c <LPS_Get_Calibration_Pressure+0x10c>)
 8001222:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001230:	c407      	stmia	r4!, {r0, r1, r2}
 8001232:	8023      	strh	r3, [r4, #0]
	println(msg, strlen(msg), lpsConfig.uart);
 8001234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ff89 	bl	8000150 <strlen>
 800123e:	4601      	mov	r1, r0
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fb06 	bl	800185a <println>

	double cum_val = 0;
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double avg_val = 0;
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint8_t sample = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 800126c:	e01d      	b.n	80012aa <LPS_Get_Calibration_Pressure+0x9a>
		double _temp = LPS_Get_Pressure();
 800126e:	f7ff fe4f 	bl	8000f10 <LPS_Get_Pressure>
 8001272:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		print(".", 1, lpsConfig.uart);
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	461a      	mov	r2, r3
 800127c:	2101      	movs	r1, #1
 800127e:	4829      	ldr	r0, [pc, #164]	; (8001324 <LPS_Get_Calibration_Pressure+0x114>)
 8001280:	f000 fada 	bl	8001838 <print>
		cum_val += _temp;
 8001284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001288:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800128c:	f7fe ff6e 	bl	800016c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		HAL_Delay(sample_time_ms);
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fc74 	bl	8002b88 <HAL_Delay>
		sample ++;
 80012a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012a4:	3301      	adds	r3, #1
 80012a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 80012aa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3dc      	bcc.n	800126e <LPS_Get_Calibration_Pressure+0x5e>
	}
	avg_val = cum_val / (double)num_samples;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f894 	bl	80003e4 <__aeabi_ui2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80012c4:	f7ff fa32 	bl	800072c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	char msg2[] = "\r\nAverage Pressure (PA): ";
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <LPS_Get_Calibration_Pressure+0x118>)
 80012d2:	f107 040c 	add.w	r4, r7, #12
 80012d6:	461d      	mov	r5, r3
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e0:	c403      	stmia	r4!, {r0, r1}
 80012e2:	8022      	strh	r2, [r4, #0]
	print(msg2, strlen(msg2), lpsConfig.uart);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff31 	bl	8000150 <strlen>
 80012ee:	4601      	mov	r1, r0
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fa9d 	bl	8001838 <print>
	printd(avg_val, lpsConfig.uart);
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <LPS_Get_Calibration_Pressure+0x110>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	461a      	mov	r2, r3
 8001304:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001308:	f000 fa6c 	bl	80017e4 <printd>
	return avg_val;
 800130c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	3768      	adds	r7, #104	; 0x68
 8001316:	46bd      	mov	sp, r7
 8001318:	bdb0      	pop	{r4, r5, r7, pc}
 800131a:	bf00      	nop
 800131c:	0800bae0 	.word	0x0800bae0
 8001320:	200001fc 	.word	0x200001fc
 8001324:	0800baa0 	.word	0x0800baa0
 8001328:	0800bb00 	.word	0x0800bb00
 800132c:	00000000 	.word	0x00000000

08001330 <Altimex_displayLeds>:

uint32_t standbyLastFlash = 0;
uint32_t lastLedTurnonTime = 0;

void Altimex_displayLeds(enum AltimexState state, uint16_t step, struct AltimexConfig* config, uint16_t alt)
{
 8001330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001334:	b08a      	sub	sp, #40	; 0x28
 8001336:	af00      	add	r7, sp, #0
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	461a      	mov	r2, r3
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	460b      	mov	r3, r1
 8001342:	81bb      	strh	r3, [r7, #12]
 8001344:	4613      	mov	r3, r2
 8001346:	80fb      	strh	r3, [r7, #6]
	//Periodically flashes ot show that the device is on
	if(state == ALTIMEX_STANDBY)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d154      	bne.n	80013f8 <Altimex_displayLeds+0xc8>
	{
		uint32_t standbyFlashLength = config->standbyFlashOnLength + config->standbyFlashOffLength;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001356:	4413      	add	r3, r2
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
		Set_Brightness(config->standbyBrightness);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fd11 	bl	8001d88 <Set_Brightness>

		//If board has just been turned on
		if(standbyLastFlash == 0 && HAL_GetTick() < 3000)
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <Altimex_displayLeds+0x128>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d121      	bne.n	80013b2 <Altimex_displayLeds+0x82>
 800136e:	f001 fc01 	bl	8002b74 <HAL_GetTick>
 8001372:	4603      	mov	r3, r0
 8001374:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001378:	4293      	cmp	r3, r2
 800137a:	d81a      	bhi.n	80013b2 <Altimex_displayLeds+0x82>
		{
			uint8_t on = (step) % 2 == 0;
 800137c:	89bb      	ldrh	r3, [r7, #12]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t leds = on * config->numLeds;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001398:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			Strip_Progress_Bar_Single_Color(leds, PURPLE);
 80013a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013a8:	2103      	movs	r1, #3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fc7f 	bl	8001cae <Strip_Progress_Bar_Single_Color>
		{
 80013b0:	e022      	b.n	80013f8 <Altimex_displayLeds+0xc8>
		}
		else {
			//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
			if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 80013b2:	f001 fbdf 	bl	8002b74 <HAL_GetTick>
 80013b6:	4601      	mov	r1, r0
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <Altimex_displayLeds+0x128>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	4413      	add	r3, r2
 80013c0:	4299      	cmp	r1, r3
 80013c2:	d905      	bls.n	80013d0 <Altimex_displayLeds+0xa0>
				standbyLastFlash = HAL_GetTick();
 80013c4:	f001 fbd6 	bl	8002b74 <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <Altimex_displayLeds+0x128>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e013      	b.n	80013f8 <Altimex_displayLeds+0xc8>
			}
			else
			{
				//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
				if(standbyLastFlash + config->standbyFlashOffLength < HAL_GetTick())
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <Altimex_displayLeds+0x128>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	18d4      	adds	r4, r2, r3
 80013da:	f001 fbcb 	bl	8002b74 <HAL_GetTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	429c      	cmp	r4, r3
 80013e2:	d207      	bcs.n	80013f4 <Altimex_displayLeds+0xc4>
				{
					Strip_Progress_Bar_Single_Color(config->numLeds, GREEN);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fc5e 	bl	8001cae <Strip_Progress_Bar_Single_Color>
 80013f2:	e001      	b.n	80013f8 <Altimex_displayLeds+0xc8>
				}
				else
				{
					Strip_Clear();
 80013f4:	f000 fc7f 	bl	8001cf6 <Strip_Clear>
			}
		}
	}

	//Led bar with top led flashing. Full when at gear check altitude
	if(state == ALTIMEX_ASCENT)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d130      	bne.n	8001460 <Altimex_displayLeds+0x130>
	{
		Set_Brightness(config->brightness);
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fcbf 	bl	8001d88 <Set_Brightness>
		uint32_t standbyFlashLength = config->standbyFlashOnLength + config->standbyFlashOffLength;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	4413      	add	r3, r2
 8001414:	61fb      	str	r3, [r7, #28]

		//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
		if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001416:	f001 fbad 	bl	8002b74 <HAL_GetTick>
 800141a:	4601      	mov	r1, r0
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <Altimex_displayLeds+0x128>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	4299      	cmp	r1, r3
 8001426:	d905      	bls.n	8001434 <Altimex_displayLeds+0x104>
			standbyLastFlash = HAL_GetTick();
 8001428:	f001 fba4 	bl	8002b74 <HAL_GetTick>
 800142c:	4603      	mov	r3, r0
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <Altimex_displayLeds+0x128>)
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e015      	b.n	8001460 <Altimex_displayLeds+0x130>
		}
		else
		{
			//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
			if(standbyLastFlash + config->standbyFlashOffLength < HAL_GetTick())
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <Altimex_displayLeds+0x128>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	18d4      	adds	r4, r2, r3
 800143e:	f001 fb99 	bl	8002b74 <HAL_GetTick>
 8001442:	4603      	mov	r3, r0
 8001444:	429c      	cmp	r4, r3
 8001446:	d209      	bcs.n	800145c <Altimex_displayLeds+0x12c>
			{
				Strip_Progress_Bar_Single_Color(config->numLeds, YELLOW);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800144e:	2101      	movs	r1, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fc2c 	bl	8001cae <Strip_Progress_Bar_Single_Color>
 8001456:	e003      	b.n	8001460 <Altimex_displayLeds+0x130>
 8001458:	20000208 	.word	0x20000208
			}
			else
			{
				Strip_Clear();
 800145c:	f000 fc4b 	bl	8001cf6 <Strip_Clear>
		Strip_Progress_Bar_Single_Color(i, GREEN);
		*/
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_GEARCHECK)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d122      	bne.n	80014ac <Altimex_displayLeds+0x17c>
	{
		Set_Brightness(config->brightness);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fc8b 	bl	8001d88 <Set_Brightness>
		uint8_t flash = (step / 7) % 2 == 0;
 8001472:	89ba      	ldrh	r2, [r7, #12]
 8001474:	4bc8      	ldr	r3, [pc, #800]	; (8001798 <Altimex_displayLeds+0x468>)
 8001476:	fba3 1302 	umull	r1, r3, r3, r2
 800147a:	1ad2      	subs	r2, r2, r3
 800147c:	0852      	lsrs	r2, r2, #1
 800147e:	4413      	add	r3, r2
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf0c      	ite	eq
 800148e:	2301      	moveq	r3, #1
 8001490:	2300      	movne	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	76fb      	strb	r3, [r7, #27]
		Strip_Progress_Bar_Single_Color(flash * config->numLeds, GREEN);
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800149c:	7efa      	ldrb	r2, [r7, #27]
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fc01 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	//Solid blue while awaiting jump
	if(state == ALTIMEX_DETECT_FREEFALL_START)
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d10c      	bne.n	80014cc <Altimex_displayLeds+0x19c>
	{
		Set_Brightness(config->brightness);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fc65 	bl	8001d88 <Set_Brightness>
		Strip_Progress_Bar_Single_Color(config->numLeds, SKYBLUE);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c4:	2104      	movs	r1, #4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fbf1 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching breakoff altitude + 1500ft
	if(state == ALTIMEX_FREEFALL)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d160      	bne.n	8001594 <Altimex_displayLeds+0x264>
	{
		Set_Brightness(config->brightness);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fc55 	bl	8001d88 <Set_Brightness>
		uint8_t leds = (config->numLeds) * (1-(float)(alt - (config->breakoff + 1500)) / (config->exit - (config->breakoff + 1500)));
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ff8d 	bl	8000404 <__aeabi_i2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe ff87 	bl	8000404 <__aeabi_i2d>
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001500:	a3a3      	add	r3, pc, #652	; (adr r3, 8001790 <Altimex_displayLeds+0x460>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fe31 	bl	800016c <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7fe fe29 	bl	8000168 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fad3 	bl	8000ac8 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff7f 	bl	8000428 <__aeabi_f2d>
 800152a:	4682      	mov	sl, r0
 800152c:	468b      	mov	fp, r1
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800153a:	a395      	add	r3, pc, #596	; (adr r3, 8001790 <Altimex_displayLeds+0x460>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7fe fe14 	bl	800016c <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fe0c 	bl	8000168 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4650      	mov	r0, sl
 8001556:	4659      	mov	r1, fp
 8001558:	f7ff f8e8 	bl	800072c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	f04f 0000 	mov.w	r0, #0
 8001564:	498d      	ldr	r1, [pc, #564]	; (800179c <Altimex_displayLeds+0x46c>)
 8001566:	f7fe fdff 	bl	8000168 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4640      	mov	r0, r8
 8001570:	4649      	mov	r1, r9
 8001572:	f7fe ffb1 	bl	80004d8 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fa83 	bl	8000a88 <__aeabi_d2uiz>
 8001582:	4603      	mov	r3, r0
 8001584:	76bb      	strb	r3, [r7, #26]
		Strip_Progress_Bar_Single_Color(leds + 1, SKYBLUE);
 8001586:	7ebb      	ldrb	r3, [r7, #26]
 8001588:	3301      	adds	r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fb8d 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching breakoff altitude
	if(state == ALTIMEX_APPROACHING_BREAKOFF)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d154      	bne.n	8001644 <Altimex_displayLeds+0x314>
	{
		Set_Brightness(config->brightness);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fbf1 	bl	8001d88 <Set_Brightness>
		uint8_t leds = (config->numLeds + 1) * (1-(float)(alt - config->breakoff) / ((config->breakoff + 1500) - config->breakoff));
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ac:	3301      	adds	r3, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff28 	bl	8000404 <__aeabi_i2d>
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ff22 	bl	8000404 <__aeabi_i2d>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015c6:	f7fe fdcf 	bl	8000168 <__aeabi_dsub>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa79 	bl	8000ac8 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff25 	bl	8000428 <__aeabi_f2d>
 80015de:	4680      	mov	r8, r0
 80015e0:	4689      	mov	r9, r1
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80015e8:	a369      	add	r3, pc, #420	; (adr r3, 8001790 <Altimex_displayLeds+0x460>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7fe fdbd 	bl	800016c <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001600:	f7fe fdb2 	bl	8000168 <__aeabi_dsub>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4640      	mov	r0, r8
 800160a:	4649      	mov	r1, r9
 800160c:	f7ff f88e 	bl	800072c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	4960      	ldr	r1, [pc, #384]	; (800179c <Altimex_displayLeds+0x46c>)
 800161a:	f7fe fda5 	bl	8000168 <__aeabi_dsub>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7fe ff57 	bl	80004d8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fa29 	bl	8000a88 <__aeabi_d2uiz>
 8001636:	4603      	mov	r3, r0
 8001638:	767b      	strb	r3, [r7, #25]
		Strip_Progress_Bar_Single_Color(leds, GREEN);
 800163a:	7e7b      	ldrb	r3, [r7, #25]
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb35 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_BREAKOFF)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b06      	cmp	r3, #6
 8001648:	d11b      	bne.n	8001682 <Altimex_displayLeds+0x352>
	{
		Set_Brightness(config->brightness);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fb99 	bl	8001d88 <Set_Brightness>
		uint8_t on = (step) % 2 == 0;
 8001656:	89bb      	ldrh	r3, [r7, #12]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	b29b      	uxth	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	763b      	strb	r3, [r7, #24]
		uint8_t leds = on * config->numLeds;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001670:	7e3a      	ldrb	r2, [r7, #24]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	75fb      	strb	r3, [r7, #23]
		Strip_Progress_Bar_Single_Color(leds, GREEN);
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fb16 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	//LED bar fills up approaching deployment altitude
	if(state == ALTIMEX_TRACK)
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	2b07      	cmp	r3, #7
 8001686:	d154      	bne.n	8001732 <Altimex_displayLeds+0x402>
	{
		Set_Brightness(config->brightness);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fb7a 	bl	8001d88 <Set_Brightness>
		uint8_t leds = (config->numLeds + 1) * (1-(float)(alt - config->deploy) / ((config->deploy + 500) - config->deploy));
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800169a:	3301      	adds	r3, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe feb1 	bl	8000404 <__aeabi_i2d>
 80016a2:	4604      	mov	r4, r0
 80016a4:	460d      	mov	r5, r1
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe feab 	bl	8000404 <__aeabi_i2d>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016b4:	f7fe fd58 	bl	8000168 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa02 	bl	8000ac8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe feae 	bl	8000428 <__aeabi_f2d>
 80016cc:	4680      	mov	r8, r0
 80016ce:	4689      	mov	r9, r1
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <Altimex_displayLeds+0x470>)
 80016dc:	f7fe fd46 	bl	800016c <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016ee:	f7fe fd3b 	bl	8000168 <__aeabi_dsub>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4640      	mov	r0, r8
 80016f8:	4649      	mov	r1, r9
 80016fa:	f7ff f817 	bl	800072c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	4925      	ldr	r1, [pc, #148]	; (800179c <Altimex_displayLeds+0x46c>)
 8001708:	f7fe fd2e 	bl	8000168 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7fe fee0 	bl	80004d8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f9b2 	bl	8000a88 <__aeabi_d2uiz>
 8001724:	4603      	mov	r3, r0
 8001726:	75bb      	strb	r3, [r7, #22]
		Strip_Progress_Bar_Single_Color(leds, RED);
 8001728:	7dbb      	ldrb	r3, [r7, #22]
 800172a:	2102      	movs	r1, #2
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fabe 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	//Flashes red until detects canopy deployment
	if(state == ALTIMEX_DEPLOY)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d11b      	bne.n	8001770 <Altimex_displayLeds+0x440>
	{
		Set_Brightness(config->brightness);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fb22 	bl	8001d88 <Set_Brightness>
		uint8_t on = (step) % 2 == 0;
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	b29b      	uxth	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	757b      	strb	r3, [r7, #21]
		uint8_t leds = on * config->numLeds;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800175e:	7d7a      	ldrb	r2, [r7, #21]
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	753b      	strb	r3, [r7, #20]
		Strip_Progress_Bar_Single_Color(leds, RED);
 8001766:	7d3b      	ldrb	r3, [r7, #20]
 8001768:	2102      	movs	r1, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fa9f 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	//Flashes purple
	if(state == ALTIMEX_CANOPY)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b09      	cmp	r3, #9
 8001774:	d12e      	bne.n	80017d4 <Altimex_displayLeds+0x4a4>
	{
		Set_Brightness(config->brightness);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fb03 	bl	8001d88 <Set_Brightness>
		uint8_t on = (step/10) % 2 == 0;
 8001782:	89bb      	ldrh	r3, [r7, #12]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <Altimex_displayLeds+0x474>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	08db      	lsrs	r3, r3, #3
 800178c:	e00c      	b.n	80017a8 <Altimex_displayLeds+0x478>
 800178e:	bf00      	nop
 8001790:	00000000 	.word	0x00000000
 8001794:	40977000 	.word	0x40977000
 8001798:	24924925 	.word	0x24924925
 800179c:	3ff00000 	.word	0x3ff00000
 80017a0:	407f4000 	.word	0x407f4000
 80017a4:	cccccccd 	.word	0xcccccccd
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	74fb      	strb	r3, [r7, #19]
		uint8_t leds = on * config->numLeds;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017c2:	7cfa      	ldrb	r2, [r7, #19]
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	74bb      	strb	r3, [r7, #18]
		Strip_Progress_Bar_Single_Color(leds, PURPLE);
 80017ca:	7cbb      	ldrb	r3, [r7, #18]
 80017cc:	2103      	movs	r1, #3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fa6d 	bl	8001cae <Strip_Progress_Bar_Single_Color>
	}

	Strip_Send();
 80017d4:	f000 fa95 	bl	8001d02 <Strip_Send>
}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop

080017e4 <printd>:
	size_t len = strlen(charData);
	println(charData, len, uart);
}

void printd(double data, UART_HandleTypeDef* uart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b096      	sub	sp, #88	; 0x58
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	char charData[64] = {'\0'};
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	223c      	movs	r2, #60	; 0x3c
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 fb97 	bl	8006f30 <memset>
	sprintf(charData, "%f", data);
 8001802:	f107 0014 	add.w	r0, r7, #20
 8001806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800180a:	490a      	ldr	r1, [pc, #40]	; (8001834 <printd+0x50>)
 800180c:	f005 fff8 	bl	8007800 <siprintf>
	size_t len = strlen(charData);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fc9b 	bl	8000150 <strlen>
 800181a:	6578      	str	r0, [r7, #84]	; 0x54
	println(charData, len, uart);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f818 	bl	800185a <println>
}
 800182a:	bf00      	nop
 800182c:	3758      	adds	r7, #88	; 0x58
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	0800bb1c 	.word	0x0800bb1c

08001838 <print>:

void print(char* data, size_t len, UART_HandleTypeDef* uart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, data, len, 100);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	b29a      	uxth	r2, r3
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f004 fd71 	bl	8006334 <HAL_UART_Transmit>
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <println>:

void println(char* data, size_t len, UART_HandleTypeDef* uart)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
	print(data, len, uart);
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff ffe4 	bl	8001838 <print>

	char newline[2] = "\r\n";
 8001870:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001874:	82bb      	strh	r3, [r7, #20]
	print(newline, 2, uart);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffda 	bl	8001838 <print>
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	0000      	movs	r0, r0
	...

08001890 <StateController_updateState>:
uint8_t deployTest = 0; //1 while validating deployment test
uint32_t deployTestStart = 0; //ms, the timestamp for starting to validate deployment
double deployTestStartAlt = 0; //ft, altitude at beginning of current deployment test

void StateController_updateState(struct AltimexConfig* config, double alt)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	e9c7 2300 	strd	r2, r3, [r7]
	if(StateController_currentState == ALTIMEX_STANDBY)
 800189c:	4b9c      	ldr	r3, [pc, #624]	; (8001b10 <StateController_updateState+0x280>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d137      	bne.n	8001914 <StateController_updateState+0x84>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > config->ascentThreshold)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ae:	f7ff f8a3 	bl	80009f8 <__aeabi_dcmpgt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01c      	beq.n	80018f2 <StateController_updateState+0x62>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 80018b8:	4b96      	ldr	r3, [pc, #600]	; (8001b14 <StateController_updateState+0x284>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <StateController_updateState+0x40>
			{
				testingAscent = 1;
 80018c0:	4b94      	ldr	r3, [pc, #592]	; (8001b14 <StateController_updateState+0x284>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
				ascentTestStart = HAL_GetTick();
 80018c6:	f001 f955 	bl	8002b74 <HAL_GetTick>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a92      	ldr	r2, [pc, #584]	; (8001b18 <StateController_updateState+0x288>)
 80018ce:	6013      	str	r3, [r2, #0]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 80018d0:	4b90      	ldr	r3, [pc, #576]	; (8001b14 <StateController_updateState+0x284>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10c      	bne.n	80018f2 <StateController_updateState+0x62>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= config->ascentThresholdTime)
 80018d8:	f001 f94c 	bl	8002b74 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <StateController_updateState+0x288>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	8912      	ldrh	r2, [r2, #8]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d302      	bcc.n	80018f2 <StateController_updateState+0x62>
				{
					StateController_currentState = ALTIMEX_ASCENT;
 80018ec:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <StateController_updateState+0x280>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < config->ascentThreshold)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018fc:	f7ff f85e 	bl	80009bc <__aeabi_dcmplt>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <StateController_updateState+0x84>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8001906:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <StateController_updateState+0x284>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <StateController_updateState+0x84>
			{
				testingAscent = 0;
 800190e:	4b81      	ldr	r3, [pc, #516]	; (8001b14 <StateController_updateState+0x284>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(StateController_currentState == ALTIMEX_ASCENT)
 8001914:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <StateController_updateState+0x280>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10c      	bne.n	8001936 <StateController_updateState+0xa6>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > config->gearCheckAlt)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001926:	f7ff f867 	bl	80009f8 <__aeabi_dcmpgt>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <StateController_updateState+0xa6>
		{
			StateController_currentState = ALTIMEX_GEARCHECK;
 8001930:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <StateController_updateState+0x280>)
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_GEARCHECK)
 8001936:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <StateController_updateState+0x280>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d126      	bne.n	800198c <StateController_updateState+0xfc>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 800193e:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <StateController_updateState+0x28c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <StateController_updateState+0xc6>
		{
			gearCheckNotificationStart = HAL_GetTick();
 8001946:	f001 f915 	bl	8002b74 <HAL_GetTick>
 800194a:	4603      	mov	r3, r0
 800194c:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <StateController_updateState+0x290>)
 800194e:	6013      	str	r3, [r2, #0]
			displayedGearCheck = 1;
 8001950:	4b72      	ldr	r3, [pc, #456]	; (8001b1c <StateController_updateState+0x28c>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck == 1 & HAL_GetTick() > gearCheckNotificationStart + config->gearCheckNotificationLength)
 8001956:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <StateController_updateState+0x28c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2dc      	uxtb	r4, r3
 8001964:	f001 f906 	bl	8002b74 <HAL_GetTick>
 8001968:	4601      	mov	r1, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <StateController_updateState+0x290>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4299      	cmp	r1, r3
 8001976:	bf8c      	ite	hi
 8001978:	2301      	movhi	r3, #1
 800197a:	2300      	movls	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4023      	ands	r3, r4
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <StateController_updateState+0xfc>
		{
			StateController_currentState = ALTIMEX_DETECT_FREEFALL_START;
 8001986:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <StateController_updateState+0x280>)
 8001988:	2203      	movs	r2, #3
 800198a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_DETECT_FREEFALL_START)
 800198c:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <StateController_updateState+0x280>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d170      	bne.n	8001a76 <StateController_updateState+0x1e6>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 8001994:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <StateController_updateState+0x294>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199e:	f7ff f80d 	bl	80009bc <__aeabi_dcmplt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d050      	beq.n	8001a4a <StateController_updateState+0x1ba>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 80019a8:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <StateController_updateState+0x298>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10c      	bne.n	80019ca <StateController_updateState+0x13a>
			{
				freefallTest = 1;
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <StateController_updateState+0x298>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
				freefallTestStart = HAL_GetTick();
 80019b6:	f001 f8dd 	bl	8002b74 <HAL_GetTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a5b      	ldr	r2, [pc, #364]	; (8001b2c <StateController_updateState+0x29c>)
 80019be:	6013      	str	r3, [r2, #0]
				freefallStartAlt = alt;
 80019c0:	495b      	ldr	r1, [pc, #364]	; (8001b30 <StateController_updateState+0x2a0>)
 80019c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + config->freefallThresholdTime)
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <StateController_updateState+0x298>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d13b      	bne.n	8001a4a <StateController_updateState+0x1ba>
 80019d2:	f001 f8cf 	bl	8002b74 <HAL_GetTick>
 80019d6:	4601      	mov	r1, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <StateController_updateState+0x29c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	4299      	cmp	r1, r3
 80019e4:	d931      	bls.n	8001a4a <StateController_updateState+0x1ba>
			{
				double elapsedTimeSec = (double)(HAL_GetTick() - freefallTestStart) / 1000;
 80019e6:	f001 f8c5 	bl	8002b74 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <StateController_updateState+0x29c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fcf6 	bl	80003e4 <__aeabi_ui2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <StateController_updateState+0x2a4>)
 80019fe:	f7fe fe95 	bl	800072c <__aeabi_ddiv>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				double avgSpeedFps = ((double)(freefallStartAlt - alt) / elapsedTimeSec);
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <StateController_updateState+0x2a0>)
 8001a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a14:	f7fe fba8 	bl	8000168 <__aeabi_dsub>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a24:	f7fe fe82 	bl	800072c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	e9c7 2308 	strd	r2, r3, [r7, #32]

				//If average speed is above 80mph
				if(avgSpeedFps >= 117.0) //80mph to fps
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <StateController_updateState+0x2a8>)
 8001a36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a3a:	f7fe ffd3 	bl	80009e4 <__aeabi_dcmpge>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <StateController_updateState+0x1ba>
				{
					StateController_currentState = ALTIMEX_FREEFALL;
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <StateController_updateState+0x280>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <StateController_updateState+0x294>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a54:	f7fe ffd0 	bl	80009f8 <__aeabi_dcmpgt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <StateController_updateState+0x1dc>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <StateController_updateState+0x298>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <StateController_updateState+0x1dc>
			{
				freefallTest = 0;
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <StateController_updateState+0x298>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
			}
		}

		prevAlt = alt;
 8001a6c:	492d      	ldr	r1, [pc, #180]	; (8001b24 <StateController_updateState+0x294>)
 8001a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(StateController_currentState == ALTIMEX_FREEFALL)
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <StateController_updateState+0x280>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d113      	bne.n	8001aa6 <StateController_updateState+0x216>
	{
		if(alt < config->breakoff + 1500.0)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a84:	a320      	add	r3, pc, #128	; (adr r3, 8001b08 <StateController_updateState+0x278>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fb6f 	bl	800016c <__adddf3>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a96:	f7fe ff91 	bl	80009bc <__aeabi_dcmplt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <StateController_updateState+0x216>
		{
			StateController_currentState = ALTIMEX_APPROACHING_BREAKOFF;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <StateController_updateState+0x280>)
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_APPROACHING_BREAKOFF)
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <StateController_updateState+0x280>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d10c      	bne.n	8001ac8 <StateController_updateState+0x238>
	{
		if(alt < config->breakoff)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ab8:	f7fe ff80 	bl	80009bc <__aeabi_dcmplt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <StateController_updateState+0x238>
		{
			StateController_currentState = ALTIMEX_BREAKOFF;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <StateController_updateState+0x280>)
 8001ac4:	2206      	movs	r2, #6
 8001ac6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_BREAKOFF)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <StateController_updateState+0x280>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d113      	bne.n	8001af8 <StateController_updateState+0x268>
	{
		if(alt < config->breakoff - 500.0)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <StateController_updateState+0x2ac>)
 8001adc:	f7fe fb44 	bl	8000168 <__aeabi_dsub>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae8:	f7fe ff68 	bl	80009bc <__aeabi_dcmplt>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <StateController_updateState+0x268>
		{
			StateController_currentState = ALTIMEX_TRACK;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <StateController_updateState+0x280>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_TRACK)
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <StateController_updateState+0x280>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d12c      	bne.n	8001b5a <StateController_updateState+0x2ca>
 8001b00:	e01e      	b.n	8001b40 <StateController_updateState+0x2b0>
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40977000 	.word	0x40977000
 8001b10:	2000020c 	.word	0x2000020c
 8001b14:	2000020d 	.word	0x2000020d
 8001b18:	20000210 	.word	0x20000210
 8001b1c:	20000218 	.word	0x20000218
 8001b20:	20000214 	.word	0x20000214
 8001b24:	20000220 	.word	0x20000220
 8001b28:	20000228 	.word	0x20000228
 8001b2c:	2000022c 	.word	0x2000022c
 8001b30:	20000230 	.word	0x20000230
 8001b34:	408f4000 	.word	0x408f4000
 8001b38:	405d4000 	.word	0x405d4000
 8001b3c:	407f4000 	.word	0x407f4000
	{
		if(alt < config->deploy)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b4a:	f7fe ff37 	bl	80009bc <__aeabi_dcmplt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <StateController_updateState+0x2ca>
		{
			StateController_currentState = ALTIMEX_DEPLOY;
 8001b54:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <StateController_updateState+0x3e8>)
 8001b56:	2208      	movs	r2, #8
 8001b58:	701a      	strb	r2, [r3, #0]
		}
	}

	if(StateController_currentState == ALTIMEX_DEPLOY)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <StateController_updateState+0x3e8>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	f040 8085 	bne.w	8001c6e <StateController_updateState+0x3de>
	{

		if(deployTest == 0)
 8001b64:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <StateController_updateState+0x3ec>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d13e      	bne.n	8001bea <StateController_updateState+0x35a>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			double elapsedTimeSec = (double)(HAL_GetTick() - deployTestStart) / 1000;
 8001b6c:	f001 f802 	bl	8002b74 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <StateController_updateState+0x3f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc33 	bl	80003e4 <__aeabi_ui2d>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <StateController_updateState+0x3f4>)
 8001b84:	f7fe fdd2 	bl	800072c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double avgSpeedFps = fabs((double)(deployTestStartAlt - alt) / elapsedTimeSec);
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <StateController_updateState+0x3f8>)
 8001b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b9a:	f7fe fae5 	bl	8000168 <__aeabi_dsub>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001baa:	f7fe fdbf 	bl	800072c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	6139      	str	r1, [r7, #16]
 8001bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	617b      	str	r3, [r7, #20]
			if(avgSpeedFps <= 73.0) //50mph to fps
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <StateController_updateState+0x3fc>)
 8001bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bc6:	f7fe ff03 	bl	80009d0 <__aeabi_dcmple>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00c      	beq.n	8001bea <StateController_updateState+0x35a>
			{
				deployTest = 1;
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <StateController_updateState+0x3ec>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
				deployTestStart = HAL_GetTick();
 8001bd6:	f000 ffcd 	bl	8002b74 <HAL_GetTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <StateController_updateState+0x3f0>)
 8001bde:	6013      	str	r3, [r2, #0]
				deployTestStartAlt = alt;
 8001be0:	4929      	ldr	r1, [pc, #164]	; (8001c88 <StateController_updateState+0x3f8>)
 8001be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if(deployTest == 1)
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <StateController_updateState+0x3ec>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d133      	bne.n	8001c5a <StateController_updateState+0x3ca>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <StateController_updateState+0x3f8>)
 8001bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bfc:	f7fe fab4 	bl	8000168 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	f000 ffb4 	bl	8002b74 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <StateController_updateState+0x3f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fbe5 	bl	80003e4 <__aeabi_ui2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fd83 	bl	800072c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <StateController_updateState+0x3fc>)
 8001c34:	f7fe fecc 	bl	80009d0 <__aeabi_dcmple>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <StateController_updateState+0x3ca>
			{
				if(HAL_GetTick() > deployTestStart + config->deployTestThresholdTime)
 8001c3e:	f000 ff99 	bl	8002b74 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	895b      	ldrh	r3, [r3, #10]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <StateController_updateState+0x3f0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	440b      	add	r3, r1
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d902      	bls.n	8001c5a <StateController_updateState+0x3ca>
				{
					StateController_currentState = ALTIMEX_CANOPY;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <StateController_updateState+0x3e8>)
 8001c56:	2209      	movs	r2, #9
 8001c58:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 8001c5a:	f000 ff8b 	bl	8002b74 <HAL_GetTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <StateController_updateState+0x400>)
 8001c62:	6013      	str	r3, [r2, #0]
		deployTestPrevAlt = alt;
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <StateController_updateState+0x404>)
 8001c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c6a:	e9c1 2300 	strd	r2, r3, [r1]
		{
			StateController_currentState = COLORALTI_STANDBY;
		}
		*/
	}
}
 8001c6e:	bf00      	nop
 8001c70:	3730      	adds	r7, #48	; 0x30
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000020c 	.word	0x2000020c
 8001c7c:	20000244 	.word	0x20000244
 8001c80:	20000248 	.word	0x20000248
 8001c84:	408f4000 	.word	0x408f4000
 8001c88:	20000250 	.word	0x20000250
 8001c8c:	40524000 	.word	0x40524000
 8001c90:	20000240 	.word	0x20000240
 8001c94:	20000238 	.word	0x20000238

08001c98 <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f835 	bl	8001d10 <Set_LED_Timer>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 8001cbe:	f000 f9ef 	bl	80020a0 <Clear_All_LED>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b0a      	cmp	r3, #10
 8001cc6:	d901      	bls.n	8001ccc <Strip_Progress_Bar_Single_Color+0x1e>
 8001cc8:	230a      	movs	r3, #10
 8001cca:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e008      	b.n	8001ce4 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	79ba      	ldrb	r2, [r7, #6]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f9b6 	bl	800204a <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d3f2      	bcc.n	8001cd2 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <Strip_Clear>:

void Strip_Clear()
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
	Clear_All_LED();
 8001cfa:	f000 f9d1 	bl	80020a0 <Clear_All_LED>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <Strip_Send>:

void Strip_Send()
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
	WS2813_Send();
 8001d06:	f000 f8c3 	bl	8001e90 <WS2813_Send>
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 8001d18:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <Set_LED_Timer+0x18>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20000258 	.word	0x20000258

08001d2c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	b2d9      	uxtb	r1, r3
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <Set_LED+0x58>)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	460a      	mov	r2, r1
 8001d48:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <Set_LED+0x58>)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	460a      	mov	r2, r1
 8001d58:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	b2d9      	uxtb	r1, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <Set_LED+0x58>)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	460a      	mov	r2, r1
 8001d68:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2d9      	uxtb	r1, r3
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <Set_LED+0x58>)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	460a      	mov	r2, r1
 8001d78:	71da      	strb	r2, [r3, #7]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000258 	.word	0x20000258

08001d88 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b2d      	cmp	r3, #45	; 0x2d
 8001d94:	dd01      	ble.n	8001d9a <Set_Brightness+0x12>
 8001d96:	232d      	movs	r3, #45	; 0x2d
 8001d98:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e065      	b.n	8001e6c <Set_Brightness+0xe4>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 8001da0:	4a39      	ldr	r2, [pc, #228]	; (8001e88 <Set_Brightness+0x100>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	7919      	ldrb	r1, [r3, #4]
 8001daa:	4a37      	ldr	r2, [pc, #220]	; (8001e88 <Set_Brightness+0x100>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	330a      	adds	r3, #10
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	711a      	strb	r2, [r3, #4]
		for (int j=1; j<4; j++)
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e050      	b.n	8001e60 <Set_Brightness+0xd8>
		{
			float angle = 90-brightness;  // in degrees
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff89 	bl	8000cdc <__aeabi_i2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7fe fb2a 	bl	8000428 <__aeabi_f2d>
 8001dd4:	a32a      	add	r3, pc, #168	; (adr r3, 8001e80 <Set_Brightness+0xf8>)
 8001dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dda:	f7fe fb7d 	bl	80004d8 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <Set_Brightness+0x104>)
 8001dec:	f7fe fc9e 	bl	800072c <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fe66 	bl	8000ac8 <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <Set_Brightness+0x100>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	441a      	add	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe faf7 	bl	8000404 <__aeabi_i2d>
 8001e16:	4604      	mov	r4, r0
 8001e18:	460d      	mov	r5, r1
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7fe fb04 	bl	8000428 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f007 ff62 	bl	8009cf0 <tan>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe fc7a 	bl	800072c <__aeabi_ddiv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe fe22 	bl	8000a88 <__aeabi_d2uiz>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b2d9      	uxtb	r1, r3
 8001e48:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <Set_Brightness+0x100>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	441a      	add	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	332c      	adds	r3, #44	; 0x2c
 8001e56:	460a      	mov	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	ddab      	ble.n	8001dbe <Set_Brightness+0x36>
	for (int i=0; i<MAX_LED; i++)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b09      	cmp	r3, #9
 8001e70:	dd96      	ble.n	8001da0 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7c:	f3af 8000 	nop.w
 8001e80:	53c8d4f1 	.word	0x53c8d4f1
 8001e84:	400921fb 	.word	0x400921fb
 8001e88:	20000258 	.word	0x20000258
 8001e8c:	40668000 	.word	0x40668000

08001e90 <WS2813_Send>:

void WS2813_Send ()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e03d      	b.n	8001f1c <WS2813_Send+0x8c>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <WS2813_Send+0xe4>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	4931      	ldr	r1, [pc, #196]	; (8001f74 <WS2813_Send+0xe4>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	492d      	ldr	r1, [pc, #180]	; (8001f74 <WS2813_Send+0xe4>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001ece:	2317      	movs	r3, #23
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	e01d      	b.n	8001f10 <WS2813_Send+0x80>
		{
			if (color&(1<<i))
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <WS2813_Send+0x66>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 8001ee6:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <WS2813_Send+0xe4>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3328      	adds	r3, #40	; 0x28
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	2230      	movs	r2, #48	; 0x30
 8001ef2:	809a      	strh	r2, [r3, #4]
 8001ef4:	e006      	b.n	8001f04 <WS2813_Send+0x74>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <WS2813_Send+0xe4>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3328      	adds	r3, #40	; 0x28
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	2214      	movs	r2, #20
 8001f02:	809a      	strh	r2, [r3, #4]

			indx++;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	dade      	bge.n	8001ed4 <WS2813_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	ddbe      	ble.n	8001ea0 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	e00c      	b.n	8001f42 <WS2813_Send+0xb2>
	{
		ws_config.pwmData[indx] = 0;
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <WS2813_Send+0xe4>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3328      	adds	r3, #40	; 0x28
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	2200      	movs	r2, #0
 8001f34:	809a      	strh	r2, [r3, #4]
		indx++;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b31      	cmp	r3, #49	; 0x31
 8001f46:	ddef      	ble.n	8001f28 <WS2813_Send+0x98>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <WS2813_Send+0xe4>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <WS2813_Send+0xe8>)
 8001f52:	2104      	movs	r1, #4
 8001f54:	f003 f9c8 	bl	80052e8 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 8001f58:	bf00      	nop
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <WS2813_Send+0xe4>)
 8001f5c:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0fa      	beq.n	8001f5a <WS2813_Send+0xca>
	ws_config.datasentflag = 0;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <WS2813_Send+0xe4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000258 	.word	0x20000258
 8001f78:	200002ac 	.word	0x200002ac

08001f7c <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <Color_To_RGB+0x24>
		rgb->r = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2214      	movs	r2, #20
 8001f9e:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <Color_To_RGB+0x3c>
		rgb->r = 255;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	22ff      	movs	r2, #255	; 0xff
 8001faa:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d108      	bne.n	8001fd0 <Color_To_RGB+0x54>
		rgb->r = 255;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	22ff      	movs	r2, #255	; 0xff
 8001fc2:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d108      	bne.n	8001fe8 <Color_To_RGB+0x6c>
		rgb->r = 255;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	22ff      	movs	r2, #255	; 0xff
 8001fda:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d108      	bne.n	8002000 <Color_To_RGB+0x84>
		rgb->r = 0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	22c8      	movs	r2, #200	; 0xc8
 8001ffe:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d108      	bne.n	8002018 <Color_To_RGB+0x9c>
		rgb->r = 0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	709a      	strb	r2, [r3, #2]
	}
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	785b      	ldrb	r3, [r3, #1]
 8002036:	461a      	mov	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	789b      	ldrb	r3, [r3, #2]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fe75 	bl	8001d2c <Set_LED>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff8c 	bl	8001f7c <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffd9 	bl	8002022 <Set_LED_From_RGB>
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2104      	movs	r1, #4
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fad0 	bl	800562c <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000258 	.word	0x20000258

080020a0 <Clear_All_LED>:

void Clear_All_LED()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	e007      	b.n	80020bc <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	2105      	movs	r1, #5
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ffca 	bl	800204a <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	3301      	adds	r3, #1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	2b09      	cmp	r3, #9
 80020c0:	d9f4      	bls.n	80020ac <Clear_All_LED+0xc>
	}
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0000      	movs	r0, r0
	...

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b09f      	sub	sp, #124	; 0x7c
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d6:	f000 fcf5 	bl	8002ac4 <HAL_Init>

  /* USER CODE BEGIN Init */
	Strip_Set_Timer(&htim2);
 80020da:	4857      	ldr	r0, [pc, #348]	; (8002238 <main+0x168>)
 80020dc:	f7ff fddc 	bl	8001c98 <Strip_Set_Timer>
	Strip_Clear();
 80020e0:	f7ff fe09 	bl	8001cf6 <Strip_Clear>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f8b2 	bl	800224c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f000 fa38 	bl	800255c <MX_GPIO_Init>
  MX_DMA_Init();
 80020ec:	f000 fa18 	bl	8002520 <MX_DMA_Init>
  MX_I2C1_Init();
 80020f0:	f000 f8ee 	bl	80022d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80020f4:	f000 f96a 	bl	80023cc <MX_TIM2_Init>
  MX_TIM1_Init();
 80020f8:	f000 f918 	bl	800232c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80020fc:	f000 f9e6 	bl	80024cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 8002100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002104:	f000 fd40 	bl	8002b88 <HAL_Delay>
	uint8_t lps_startup_result = LPS_Init(&hi2c1, LPS_DEFAULT_ADDRESS, &huart1);
 8002108:	4a4c      	ldr	r2, [pc, #304]	; (800223c <main+0x16c>)
 800210a:	215c      	movs	r1, #92	; 0x5c
 800210c:	484c      	ldr	r0, [pc, #304]	; (8002240 <main+0x170>)
 800210e:	f7fe fe39 	bl	8000d84 <LPS_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	double refP = LPS_Get_Calibration_Pressure(10, 100);
 8002118:	2164      	movs	r1, #100	; 0x64
 800211a:	200a      	movs	r0, #10
 800211c:	f7ff f878 	bl	8001210 <LPS_Get_Calibration_Pressure>
 8002120:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	double refT = LPS_Get_Calibration_Temperature(10, 100);
 8002124:	2164      	movs	r1, #100	; 0x64
 8002126:	200a      	movs	r0, #10
 8002128:	f7fe ffe4 	bl	80010f4 <LPS_Get_Calibration_Temperature>
 800212c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	double tempF = LPS_Get_TempF();
 8002130:	f7fe ff4e 	bl	8000fd0 <LPS_Get_TempF>
 8002134:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	double alt = 0.0;
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	//uint16_t alt = 0;

	struct AltimexConfig config;
	config.ascentThreshold = 500;              //The altitude you must pass for it to transition into the ascent state
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4b3e      	ldr	r3, [pc, #248]	; (8002244 <main+0x174>)
 800214a:	e9c7 2300 	strd	r2, r3, [r7]
	config.ascentThresholdTime = 1000;         //ms that altitude must be above the ascentThreshold before transitioning between states
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	813b      	strh	r3, [r7, #8]
	config.deployTestThresholdTime = 2000;     //ms, threshold time that vertical speed has to be under 50mph
 8002154:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002158:	817b      	strh	r3, [r7, #10]
	config.gearCheckNotificationLength = 5000; //ms, the length of the gearcheck notification
 800215a:	f241 3388 	movw	r3, #5000	; 0x1388
 800215e:	60fb      	str	r3, [r7, #12]
	config.freefallThresholdTime = 2000;       //ms, the amount of time that the vertical speed must be above the freefall threshold speed to transition into freefall state
 8002160:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002164:	613b      	str	r3, [r7, #16]
	config.exit = 12500.0;                       //Exit altitude
 8002166:	a32c      	add	r3, pc, #176	; (adr r3, 8002218 <main+0x148>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	config.breakoff = 5500.0;                    //Breakoff altitude
 8002170:	a32b      	add	r3, pc, #172	; (adr r3, 8002220 <main+0x150>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	e9c7 2308 	strd	r2, r3, [r7, #32]
	config.deploy = 4500.0;                      //Deployment altitude
 800217a:	a32b      	add	r3, pc, #172	; (adr r3, 8002228 <main+0x158>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	config.standbyFlashOnLength = 100;         //How long the light is on for when in standby mode
 8002184:	2364      	movs	r3, #100	; 0x64
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
	config.standbyFlashOffLength = 10000;       //Period between each flash in standby mode
 8002188:	f242 7310 	movw	r3, #10000	; 0x2710
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
	config.numLeds = 10;                       //The number of leds being used
 800218e:	230a      	movs	r3, #10
 8002190:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	config.gearCheckAlt = 10000.0;               //The altitude that the gear check notification is given
 8002194:	a326      	add	r3, pc, #152	; (adr r3, 8002230 <main+0x160>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	config.brightness = 20;                    //LED brightness
 800219e:	2314      	movs	r3, #20
 80021a0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	config.standbyBrightness = 5;              //Brightness of LEDS while in standby mode
 80021a4:	2305      	movs	r3, #5
 80021a6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t step = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  while (1)
  {
    tempF = LPS_Get_TempF();
 80021b0:	f7fe ff0e 	bl	8000fd0 <LPS_Get_TempF>
 80021b4:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    	if(alt < 2500) alt -= 5;
    	else alt -= 29;
    }
	*/

    alt = LPS_Get_RelAlt_Ft(refP);
 80021b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021bc:	f7fe ff30 	bl	8001020 <LPS_Get_RelAlt_Ft>
 80021c0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    StateController_updateState(&config, alt);
 80021c4:	4639      	mov	r1, r7
 80021c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021ca:	4608      	mov	r0, r1
 80021cc:	f7ff fb60 	bl	8001890 <StateController_updateState>
    Altimex_displayLeds(StateController_currentState, step, &config, alt);
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <main+0x178>)
 80021d2:	781c      	ldrb	r4, [r3, #0]
 80021d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021d8:	f7fe fc56 	bl	8000a88 <__aeabi_d2uiz>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29b      	uxth	r3, r3
 80021e0:	463a      	mov	r2, r7
 80021e2:	f8b7 1076 	ldrh.w	r1, [r7, #118]	; 0x76
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff f8a2 	bl	8001330 <Altimex_displayLeds>
    step++;
 80021ec:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80021f0:	3301      	adds	r3, #1
 80021f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if(step > 100) step = 0;
 80021f6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d902      	bls.n	8002204 <main+0x134>
 80021fe:	2300      	movs	r3, #0
 8002200:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    char data[10];
    sprintf(data, "%f", alt);
    HAL_UART_Transmit(&huart1, data, sizeof(data), 100);
    */

    printd(alt, &huart1);
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <main+0x16c>)
 8002206:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800220a:	f7ff faeb 	bl	80017e4 <printd>

    //Data is received one byte at a time
    //uint8_t Rx_data[1];
    //HAL_UART_Receive(&huart1, Rx_data, 100, 100);

    HAL_Delay(100); //10hz
 800220e:	2064      	movs	r0, #100	; 0x64
 8002210:	f000 fcba 	bl	8002b88 <HAL_Delay>
    tempF = LPS_Get_TempF();
 8002214:	e7cc      	b.n	80021b0 <main+0xe0>
 8002216:	bf00      	nop
 8002218:	00000000 	.word	0x00000000
 800221c:	40c86a00 	.word	0x40c86a00
 8002220:	00000000 	.word	0x00000000
 8002224:	40b57c00 	.word	0x40b57c00
 8002228:	00000000 	.word	0x00000000
 800222c:	40b19400 	.word	0x40b19400
 8002230:	00000000 	.word	0x00000000
 8002234:	40c38800 	.word	0x40c38800
 8002238:	20000590 	.word	0x20000590
 800223c:	2000061c 	.word	0x2000061c
 8002240:	200004f4 	.word	0x200004f4
 8002244:	407f4000 	.word	0x407f4000
 8002248:	2000020c 	.word	0x2000020c

0800224c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b090      	sub	sp, #64	; 0x40
 8002250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002252:	f107 0318 	add.w	r3, r7, #24
 8002256:	2228      	movs	r2, #40	; 0x28
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fe68 	bl	8006f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002272:	2301      	movs	r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002276:	2310      	movs	r3, #16
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800227a:	2302      	movs	r3, #2
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800227e:	2300      	movs	r3, #0
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002282:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fb73 	bl	8004978 <HAL_RCC_OscConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002298:	f000 f9a0 	bl	80025dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229c:	230f      	movs	r3, #15
 800229e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a0:	2302      	movs	r3, #2
 80022a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2102      	movs	r1, #2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 fde0 	bl	8004e7c <HAL_RCC_ClockConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80022c2:	f000 f98b 	bl	80025dc <Error_Handler>
  }
}
 80022c6:	bf00      	nop
 80022c8:	3740      	adds	r7, #64	; 0x40
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <MX_I2C1_Init+0x50>)
 80022d6:	4a13      	ldr	r2, [pc, #76]	; (8002324 <MX_I2C1_Init+0x54>)
 80022d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <MX_I2C1_Init+0x50>)
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <MX_I2C1_Init+0x58>)
 80022de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <MX_I2C1_Init+0x50>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MX_I2C1_Init+0x50>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_I2C1_Init+0x50>)
 80022ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <MX_I2C1_Init+0x50>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_I2C1_Init+0x50>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <MX_I2C1_Init+0x50>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_I2C1_Init+0x50>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <MX_I2C1_Init+0x50>)
 800230e:	f001 f9ab 	bl	8003668 <HAL_I2C_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002318:	f000 f960 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200004f4 	.word	0x200004f4
 8002324:	40005400 	.word	0x40005400
 8002328:	000186a0 	.word	0x000186a0

0800232c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002340:	463b      	mov	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_TIM1_Init+0x98>)
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <MX_TIM1_Init+0x9c>)
 800234c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MX_TIM1_Init+0x98>)
 8002350:	2203      	movs	r2, #3
 8002352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_TIM1_Init+0x98>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_TIM1_Init+0x98>)
 800235c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <MX_TIM1_Init+0x98>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_TIM1_Init+0x98>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_TIM1_Init+0x98>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002374:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_TIM1_Init+0x98>)
 8002376:	f002 ff0f 	bl	8005198 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002380:	f000 f92c 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4619      	mov	r1, r3
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <MX_TIM1_Init+0x98>)
 8002392:	f003 fad3 	bl	800593c <HAL_TIM_ConfigClockSource>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800239c:	f000 f91e 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM1_Init+0x98>)
 80023ae:	f003 ff13 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023b8:	f000 f910 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000548 	.word	0x20000548
 80023c8:	40012c00 	.word	0x40012c00

080023cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	; 0x38
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e0:	f107 0320 	add.w	r3, r7, #32
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
 80023f8:	615a      	str	r2, [r3, #20]
 80023fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023fc:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <MX_TIM2_Init+0xfc>)
 80023fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <MX_TIM2_Init+0xfc>)
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <MX_TIM2_Init+0xfc>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <MX_TIM2_Init+0xfc>)
 8002412:	223f      	movs	r2, #63	; 0x3f
 8002414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <MX_TIM2_Init+0xfc>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <MX_TIM2_Init+0xfc>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002422:	4829      	ldr	r0, [pc, #164]	; (80024c8 <MX_TIM2_Init+0xfc>)
 8002424:	f002 feb8 	bl	8005198 <HAL_TIM_Base_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800242e:	f000 f8d5 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243c:	4619      	mov	r1, r3
 800243e:	4822      	ldr	r0, [pc, #136]	; (80024c8 <MX_TIM2_Init+0xfc>)
 8002440:	f003 fa7c 	bl	800593c <HAL_TIM_ConfigClockSource>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800244a:	f000 f8c7 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800244e:	481e      	ldr	r0, [pc, #120]	; (80024c8 <MX_TIM2_Init+0xfc>)
 8002450:	f002 fef1 	bl	8005236 <HAL_TIM_PWM_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800245a:	f000 f8bf 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002466:	f107 0320 	add.w	r3, r7, #32
 800246a:	4619      	mov	r1, r3
 800246c:	4816      	ldr	r0, [pc, #88]	; (80024c8 <MX_TIM2_Init+0xfc>)
 800246e:	f003 feb3 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002478:	f000 f8b0 	bl	80025dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247c:	2360      	movs	r3, #96	; 0x60
 800247e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	2200      	movs	r2, #0
 8002490:	4619      	mov	r1, r3
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <MX_TIM2_Init+0xfc>)
 8002494:	f003 f990 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800249e:	f000 f89d 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2204      	movs	r2, #4
 80024a6:	4619      	mov	r1, r3
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <MX_TIM2_Init+0xfc>)
 80024aa:	f003 f985 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80024b4:	f000 f892 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <MX_TIM2_Init+0xfc>)
 80024ba:	f000 f957 	bl	800276c <HAL_TIM_MspPostInit>

}
 80024be:	bf00      	nop
 80024c0:	3738      	adds	r7, #56	; 0x38
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000590 	.word	0x20000590

080024cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <MX_USART1_UART_Init+0x50>)
 80024d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024f2:	220c      	movs	r2, #12
 80024f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_USART1_UART_Init+0x4c>)
 8002504:	f003 fec6 	bl	8006294 <HAL_UART_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800250e:	f000 f865 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000061c 	.word	0x2000061c
 800251c:	40013800 	.word	0x40013800

08002520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_DMA_Init+0x38>)
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <MX_DMA_Init+0x38>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6153      	str	r3, [r2, #20]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_DMA_Init+0x38>)
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	2011      	movs	r0, #17
 8002544:	f000 fc1b 	bl	8002d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002548:	2011      	movs	r0, #17
 800254a:	f000 fc34 	bl	8002db6 <HAL_NVIC_EnableIRQ>

}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <MX_GPIO_Init+0x78>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <MX_GPIO_Init+0x78>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <MX_GPIO_Init+0x78>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <MX_GPIO_Init+0x78>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <MX_GPIO_Init+0x78>)
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <MX_GPIO_Init+0x78>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80025a6:	480c      	ldr	r0, [pc, #48]	; (80025d8 <MX_GPIO_Init+0x7c>)
 80025a8:	f001 f846 	bl	8003638 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80025ac:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80025b0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2302      	movs	r3, #2
 80025bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4619      	mov	r1, r3
 80025c4:	4804      	ldr	r0, [pc, #16]	; (80025d8 <MX_GPIO_Init+0x7c>)
 80025c6:	f000 feb3 	bl	8003330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010c00 	.word	0x40010c00

080025dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
}
 80025e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <Error_Handler+0x8>
	...

080025e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_MspInit+0x40>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_MspInit+0x40>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6193      	str	r3, [r2, #24]
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_MspInit+0x40>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_MspInit+0x40>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_MspInit+0x40>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_MspInit+0x40>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <HAL_I2C_MspInit+0x70>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d123      	bne.n	8002694 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002664:	23c0      	movs	r3, #192	; 0xc0
 8002666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	4619      	mov	r1, r3
 8002676:	480b      	ldr	r0, [pc, #44]	; (80026a4 <HAL_I2C_MspInit+0x78>)
 8002678:	f000 fe5a 	bl	8003330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 8002682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002686:	61d3      	str	r3, [r2, #28]
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002694:	bf00      	nop
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40005400 	.word	0x40005400
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40010c00 	.word	0x40010c00

080026a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a29      	ldr	r2, [pc, #164]	; (800275c <HAL_TIM_Base_MspInit+0xb4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10c      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ba:	4b29      	ldr	r3, [pc, #164]	; (8002760 <HAL_TIM_Base_MspInit+0xb8>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4a28      	ldr	r2, [pc, #160]	; (8002760 <HAL_TIM_Base_MspInit+0xb8>)
 80026c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026c4:	6193      	str	r3, [r2, #24]
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_TIM_Base_MspInit+0xb8>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026d2:	e03e      	b.n	8002752 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d139      	bne.n	8002752 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_TIM_Base_MspInit+0xb8>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_TIM_Base_MspInit+0xb8>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_TIM_Base_MspInit+0xb8>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 80026f8:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <HAL_TIM_Base_MspInit+0xc0>)
 80026fa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 80026fe:	2210      	movs	r2, #16
 8002700:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 8002710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002714:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 8002718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800271c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800272a:	480e      	ldr	r0, [pc, #56]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 800272c:	f000 fb5e 	bl	8002dec <HAL_DMA_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8002736:	f7ff ff51 	bl	80025dc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a09      	ldr	r2, [pc, #36]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
 8002740:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
 800274c:	4a05      	ldr	r2, [pc, #20]	; (8002764 <HAL_TIM_Base_MspInit+0xbc>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40021000 	.word	0x40021000
 8002764:	200005d8 	.word	0x200005d8
 8002768:	40020080 	.word	0x40020080

0800276c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278a:	d117      	bne.n	80027bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_TIM_MspPostInit+0x58>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_TIM_MspPostInit+0x58>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_TIM_MspPostInit+0x58>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027a4:	2303      	movs	r3, #3
 80027a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2302      	movs	r3, #2
 80027ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4619      	mov	r1, r3
 80027b6:	4804      	ldr	r0, [pc, #16]	; (80027c8 <HAL_TIM_MspPostInit+0x5c>)
 80027b8:	f000 fdba 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010800 	.word	0x40010800

080027cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_UART_MspInit+0x9c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d139      	bne.n	8002860 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <HAL_UART_MspInit+0xa0>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_UART_MspInit+0xa0>)
 80027f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f6:	6193      	str	r3, [r2, #24]
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HAL_UART_MspInit+0xa0>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_UART_MspInit+0xa0>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_UART_MspInit+0xa0>)
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	6193      	str	r3, [r2, #24]
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_UART_MspInit+0xa0>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800281c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	4619      	mov	r1, r3
 8002830:	480f      	ldr	r0, [pc, #60]	; (8002870 <HAL_UART_MspInit+0xa4>)
 8002832:	f000 fd7d 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800283a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	4619      	mov	r1, r3
 800284a:	4809      	ldr	r0, [pc, #36]	; (8002870 <HAL_UART_MspInit+0xa4>)
 800284c:	f000 fd70 	bl	8003330 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2025      	movs	r0, #37	; 0x25
 8002856:	f000 fa92 	bl	8002d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800285a:	2025      	movs	r0, #37	; 0x25
 800285c:	f000 faab 	bl	8002db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013800 	.word	0x40013800
 800286c:	40021000 	.word	0x40021000
 8002870:	40010800 	.word	0x40010800

08002874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <NMI_Handler+0x4>

0800287a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <HardFault_Handler+0x4>

08002880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <MemManage_Handler+0x4>

08002886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800288a:	e7fe      	b.n	800288a <BusFault_Handler+0x4>

0800288c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <UsageFault_Handler+0x4>

08002892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ba:	f000 f949 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA1_Channel7_IRQHandler+0x10>)
 80028ca:	f000 fbfd 	bl	80030c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200005d8 	.word	0x200005d8

080028d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <USART1_IRQHandler+0x10>)
 80028de:	f003 fdad 	bl	800643c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000061c 	.word	0x2000061c

080028ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return 1;
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <_kill>:

int _kill(int pid, int sig)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002904:	f004 faea 	bl	8006edc <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	2216      	movs	r2, #22
 800290c:	601a      	str	r2, [r3, #0]
  return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_exit>:

void _exit (int status)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002922:	f04f 31ff 	mov.w	r1, #4294967295
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffe7 	bl	80028fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800292c:	e7fe      	b.n	800292c <_exit+0x12>

0800292e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e00a      	b.n	8002956 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002940:	f3af 8000 	nop.w
 8002944:	4601      	mov	r1, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	60ba      	str	r2, [r7, #8]
 800294c:	b2ca      	uxtb	r2, r1
 800294e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3301      	adds	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	dbf0      	blt.n	8002940 <_read+0x12>
  }

  return len;
 800295e:	687b      	ldr	r3, [r7, #4]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e009      	b.n	800298e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	60ba      	str	r2, [r7, #8]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3301      	adds	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	dbf1      	blt.n	800297a <_write+0x12>
  }
  return len;
 8002996:	687b      	ldr	r3, [r7, #4]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_close>:

int _close(int file)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c6:	605a      	str	r2, [r3, #4]
  return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <_isatty>:

int _isatty(int file)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <_sbrk+0x5c>)
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <_sbrk+0x60>)
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <_sbrk+0x64>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <_sbrk+0x64>)
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <_sbrk+0x68>)
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <_sbrk+0x64>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d207      	bcs.n	8002a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a30:	f004 fa54 	bl	8006edc <__errno>
 8002a34:	4603      	mov	r3, r0
 8002a36:	220c      	movs	r2, #12
 8002a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	e009      	b.n	8002a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <_sbrk+0x64>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <_sbrk+0x64>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <_sbrk+0x64>)
 8002a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20005000 	.word	0x20005000
 8002a60:	00000400 	.word	0x00000400
 8002a64:	20000664 	.word	0x20000664
 8002a68:	20000680 	.word	0x20000680

08002a6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a78:	480c      	ldr	r0, [pc, #48]	; (8002aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a7a:	490d      	ldr	r1, [pc, #52]	; (8002ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a80:	e002      	b.n	8002a88 <LoopCopyDataInit>

08002a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a86:	3304      	adds	r3, #4

08002a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a8c:	d3f9      	bcc.n	8002a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a90:	4c0a      	ldr	r4, [pc, #40]	; (8002abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a94:	e001      	b.n	8002a9a <LoopFillZerobss>

08002a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a98:	3204      	adds	r2, #4

08002a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a9c:	d3fb      	bcc.n	8002a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a9e:	f7ff ffe5 	bl	8002a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f004 fa21 	bl	8006ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aa6:	f7ff fb13 	bl	80020d0 <main>
  bx lr
 8002aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ab4:	0800c138 	.word	0x0800c138
  ldr r2, =_sbss
 8002ab8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002abc:	2000067c 	.word	0x2000067c

08002ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC1_2_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_Init+0x28>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <HAL_Init+0x28>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f000 f947 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ada:	200f      	movs	r0, #15
 8002adc:	f000 f808 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fd82 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_InitTick+0x54>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x58>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f95f 	bl	8002dd2 <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00e      	b.n	8002b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d80a      	bhi.n	8002b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f000 f927 	bl	8002d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b30:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <HAL_InitTick+0x5c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	20000004 	.word	0x20000004

08002b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_IncTick+0x1c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_IncTick+0x20>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_IncTick+0x20>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000008 	.word	0x20000008
 8002b70:	20000668 	.word	0x20000668

08002b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return uwTick;
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <HAL_GetTick+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20000668 	.word	0x20000668

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffe0 	bl	8002b74 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000008 	.word	0x20000008

08002bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60d3      	str	r3, [r2, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db0b      	blt.n	8002c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4906      	ldr	r1, [pc, #24]	; (8002c68 <__NVIC_EnableIRQ+0x34>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2001      	movs	r0, #1
 8002c56:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d34:	d301      	bcc.n	8002d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00f      	b.n	8002d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <SysTick_Config+0x40>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d42:	210f      	movs	r1, #15
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f7ff ff90 	bl	8002c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <SysTick_Config+0x40>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <SysTick_Config+0x40>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	e000e010 	.word	0xe000e010

08002d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff2d 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d90:	f7ff ff42 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7ff ff90 	bl	8002cc0 <NVIC_EncodePriority>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff5f 	bl	8002c6c <__NVIC_SetPriority>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff35 	bl	8002c34 <__NVIC_EnableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ffa2 	bl	8002d24 <SysTick_Config>
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e043      	b.n	8002e8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_DMA_Init+0xa8>)
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <HAL_DMA_Init+0xac>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	009a      	lsls	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_DMA_Init+0xb0>)
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	bffdfff8 	.word	0xbffdfff8
 8002e98:	cccccccd 	.word	0xcccccccd
 8002e9c:	40020000 	.word	0x40020000

08002ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_DMA_Start_IT+0x20>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e04b      	b.n	8002f58 <HAL_DMA_Start_IT+0xb8>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d13a      	bne.n	8002f4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f9eb 	bl	80032d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 020e 	orr.w	r2, r2, #14
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e00f      	b.n	8002f38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 020a 	orr.w	r2, r2, #10
 8002f36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e005      	b.n	8002f56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e020      	b.n	8002fcc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020e 	bic.w	r2, r2, #14
 8002f98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d005      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	e051      	b.n	80030a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 020e 	bic.w	r2, r2, #14
 800300a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <HAL_DMA_Abort_IT+0xd4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d029      	beq.n	800307a <HAL_DMA_Abort_IT+0xa2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_DMA_Abort_IT+0xd8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMA_Abort_IT+0x9e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_DMA_Abort_IT+0xdc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01a      	beq.n	8003070 <HAL_DMA_Abort_IT+0x98>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_DMA_Abort_IT+0xe0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d012      	beq.n	800306a <HAL_DMA_Abort_IT+0x92>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_DMA_Abort_IT+0xe4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00a      	beq.n	8003064 <HAL_DMA_Abort_IT+0x8c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_DMA_Abort_IT+0xe8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d102      	bne.n	800305e <HAL_DMA_Abort_IT+0x86>
 8003058:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800305c:	e00e      	b.n	800307c <HAL_DMA_Abort_IT+0xa4>
 800305e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003062:	e00b      	b.n	800307c <HAL_DMA_Abort_IT+0xa4>
 8003064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003068:	e008      	b.n	800307c <HAL_DMA_Abort_IT+0xa4>
 800306a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306e:	e005      	b.n	800307c <HAL_DMA_Abort_IT+0xa4>
 8003070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003074:	e002      	b.n	800307c <HAL_DMA_Abort_IT+0xa4>
 8003076:	2310      	movs	r3, #16
 8003078:	e000      	b.n	800307c <HAL_DMA_Abort_IT+0xa4>
 800307a:	2301      	movs	r3, #1
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_DMA_Abort_IT+0xec>)
 800307e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    } 
  }
  return status;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40020008 	.word	0x40020008
 80030b0:	4002001c 	.word	0x4002001c
 80030b4:	40020030 	.word	0x40020030
 80030b8:	40020044 	.word	0x40020044
 80030bc:	40020058 	.word	0x40020058
 80030c0:	4002006c 	.word	0x4002006c
 80030c4:	40020000 	.word	0x40020000

080030c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2204      	movs	r2, #4
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d04f      	beq.n	8003190 <HAL_DMA_IRQHandler+0xc8>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d04a      	beq.n	8003190 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0204 	bic.w	r2, r2, #4
 8003116:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a66      	ldr	r2, [pc, #408]	; (80032b8 <HAL_DMA_IRQHandler+0x1f0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d029      	beq.n	8003176 <HAL_DMA_IRQHandler+0xae>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a65      	ldr	r2, [pc, #404]	; (80032bc <HAL_DMA_IRQHandler+0x1f4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d022      	beq.n	8003172 <HAL_DMA_IRQHandler+0xaa>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a63      	ldr	r2, [pc, #396]	; (80032c0 <HAL_DMA_IRQHandler+0x1f8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01a      	beq.n	800316c <HAL_DMA_IRQHandler+0xa4>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a62      	ldr	r2, [pc, #392]	; (80032c4 <HAL_DMA_IRQHandler+0x1fc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d012      	beq.n	8003166 <HAL_DMA_IRQHandler+0x9e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a60      	ldr	r2, [pc, #384]	; (80032c8 <HAL_DMA_IRQHandler+0x200>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00a      	beq.n	8003160 <HAL_DMA_IRQHandler+0x98>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a5f      	ldr	r2, [pc, #380]	; (80032cc <HAL_DMA_IRQHandler+0x204>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d102      	bne.n	800315a <HAL_DMA_IRQHandler+0x92>
 8003154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003158:	e00e      	b.n	8003178 <HAL_DMA_IRQHandler+0xb0>
 800315a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800315e:	e00b      	b.n	8003178 <HAL_DMA_IRQHandler+0xb0>
 8003160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003164:	e008      	b.n	8003178 <HAL_DMA_IRQHandler+0xb0>
 8003166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800316a:	e005      	b.n	8003178 <HAL_DMA_IRQHandler+0xb0>
 800316c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003170:	e002      	b.n	8003178 <HAL_DMA_IRQHandler+0xb0>
 8003172:	2340      	movs	r3, #64	; 0x40
 8003174:	e000      	b.n	8003178 <HAL_DMA_IRQHandler+0xb0>
 8003176:	2304      	movs	r3, #4
 8003178:	4a55      	ldr	r2, [pc, #340]	; (80032d0 <HAL_DMA_IRQHandler+0x208>)
 800317a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8094 	beq.w	80032ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800318e:	e08e      	b.n	80032ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2202      	movs	r2, #2
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d056      	beq.n	800324e <HAL_DMA_IRQHandler+0x186>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d051      	beq.n	800324e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 020a 	bic.w	r2, r2, #10
 80031c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_DMA_IRQHandler+0x1f0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d029      	beq.n	800322e <HAL_DMA_IRQHandler+0x166>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a37      	ldr	r2, [pc, #220]	; (80032bc <HAL_DMA_IRQHandler+0x1f4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_IRQHandler+0x162>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_DMA_IRQHandler+0x1f8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x15c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_DMA_IRQHandler+0x1fc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d012      	beq.n	800321e <HAL_DMA_IRQHandler+0x156>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <HAL_DMA_IRQHandler+0x200>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00a      	beq.n	8003218 <HAL_DMA_IRQHandler+0x150>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <HAL_DMA_IRQHandler+0x204>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d102      	bne.n	8003212 <HAL_DMA_IRQHandler+0x14a>
 800320c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003210:	e00e      	b.n	8003230 <HAL_DMA_IRQHandler+0x168>
 8003212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003216:	e00b      	b.n	8003230 <HAL_DMA_IRQHandler+0x168>
 8003218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321c:	e008      	b.n	8003230 <HAL_DMA_IRQHandler+0x168>
 800321e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003222:	e005      	b.n	8003230 <HAL_DMA_IRQHandler+0x168>
 8003224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003228:	e002      	b.n	8003230 <HAL_DMA_IRQHandler+0x168>
 800322a:	2320      	movs	r3, #32
 800322c:	e000      	b.n	8003230 <HAL_DMA_IRQHandler+0x168>
 800322e:	2302      	movs	r3, #2
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_DMA_IRQHandler+0x208>)
 8003232:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d034      	beq.n	80032ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800324c:	e02f      	b.n	80032ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2208      	movs	r2, #8
 8003254:	409a      	lsls	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d028      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x1e8>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d023      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 020e 	bic.w	r2, r2, #14
 8003276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    }
  }
  return;
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
}
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40020008 	.word	0x40020008
 80032bc:	4002001c 	.word	0x4002001c
 80032c0:	40020030 	.word	0x40020030
 80032c4:	40020044 	.word	0x40020044
 80032c8:	40020058 	.word	0x40020058
 80032cc:	4002006c 	.word	0x4002006c
 80032d0:	40020000 	.word	0x40020000

080032d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d108      	bne.n	8003314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003312:	e007      	b.n	8003324 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	60da      	str	r2, [r3, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
	...

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b08b      	sub	sp, #44	; 0x2c
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003342:	e169      	b.n	8003618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003344:	2201      	movs	r2, #1
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	f040 8158 	bne.w	8003612 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a9a      	ldr	r2, [pc, #616]	; (80035d0 <HAL_GPIO_Init+0x2a0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d05e      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 800336c:	4a98      	ldr	r2, [pc, #608]	; (80035d0 <HAL_GPIO_Init+0x2a0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d875      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 8003372:	4a98      	ldr	r2, [pc, #608]	; (80035d4 <HAL_GPIO_Init+0x2a4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d058      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 8003378:	4a96      	ldr	r2, [pc, #600]	; (80035d4 <HAL_GPIO_Init+0x2a4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d86f      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 800337e:	4a96      	ldr	r2, [pc, #600]	; (80035d8 <HAL_GPIO_Init+0x2a8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d052      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 8003384:	4a94      	ldr	r2, [pc, #592]	; (80035d8 <HAL_GPIO_Init+0x2a8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d869      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 800338a:	4a94      	ldr	r2, [pc, #592]	; (80035dc <HAL_GPIO_Init+0x2ac>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d04c      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 8003390:	4a92      	ldr	r2, [pc, #584]	; (80035dc <HAL_GPIO_Init+0x2ac>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d863      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 8003396:	4a92      	ldr	r2, [pc, #584]	; (80035e0 <HAL_GPIO_Init+0x2b0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d046      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 800339c:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <HAL_GPIO_Init+0x2b0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d85d      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 80033a2:	2b12      	cmp	r3, #18
 80033a4:	d82a      	bhi.n	80033fc <HAL_GPIO_Init+0xcc>
 80033a6:	2b12      	cmp	r3, #18
 80033a8:	d859      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_GPIO_Init+0x80>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	0800342b 	.word	0x0800342b
 80033b4:	08003405 	.word	0x08003405
 80033b8:	08003417 	.word	0x08003417
 80033bc:	08003459 	.word	0x08003459
 80033c0:	0800345f 	.word	0x0800345f
 80033c4:	0800345f 	.word	0x0800345f
 80033c8:	0800345f 	.word	0x0800345f
 80033cc:	0800345f 	.word	0x0800345f
 80033d0:	0800345f 	.word	0x0800345f
 80033d4:	0800345f 	.word	0x0800345f
 80033d8:	0800345f 	.word	0x0800345f
 80033dc:	0800345f 	.word	0x0800345f
 80033e0:	0800345f 	.word	0x0800345f
 80033e4:	0800345f 	.word	0x0800345f
 80033e8:	0800345f 	.word	0x0800345f
 80033ec:	0800345f 	.word	0x0800345f
 80033f0:	0800345f 	.word	0x0800345f
 80033f4:	0800340d 	.word	0x0800340d
 80033f8:	08003421 	.word	0x08003421
 80033fc:	4a79      	ldr	r2, [pc, #484]	; (80035e4 <HAL_GPIO_Init+0x2b4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003402:	e02c      	b.n	800345e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	623b      	str	r3, [r7, #32]
          break;
 800340a:	e029      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	3304      	adds	r3, #4
 8003412:	623b      	str	r3, [r7, #32]
          break;
 8003414:	e024      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	3308      	adds	r3, #8
 800341c:	623b      	str	r3, [r7, #32]
          break;
 800341e:	e01f      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	330c      	adds	r3, #12
 8003426:	623b      	str	r3, [r7, #32]
          break;
 8003428:	e01a      	b.n	8003460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003432:	2304      	movs	r3, #4
 8003434:	623b      	str	r3, [r7, #32]
          break;
 8003436:	e013      	b.n	8003460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003440:	2308      	movs	r3, #8
 8003442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	611a      	str	r2, [r3, #16]
          break;
 800344a:	e009      	b.n	8003460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800344c:	2308      	movs	r3, #8
 800344e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	615a      	str	r2, [r3, #20]
          break;
 8003456:	e003      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
          break;
 800345c:	e000      	b.n	8003460 <HAL_GPIO_Init+0x130>
          break;
 800345e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2bff      	cmp	r3, #255	; 0xff
 8003464:	d801      	bhi.n	800346a <HAL_GPIO_Init+0x13a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	e001      	b.n	800346e <HAL_GPIO_Init+0x13e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2bff      	cmp	r3, #255	; 0xff
 8003474:	d802      	bhi.n	800347c <HAL_GPIO_Init+0x14c>
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x152>
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	3b08      	subs	r3, #8
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	210f      	movs	r1, #15
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	431a      	orrs	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80b1 	beq.w	8003612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034b0:	4b4d      	ldr	r3, [pc, #308]	; (80035e8 <HAL_GPIO_Init+0x2b8>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4a4c      	ldr	r2, [pc, #304]	; (80035e8 <HAL_GPIO_Init+0x2b8>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6193      	str	r3, [r2, #24]
 80034bc:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_GPIO_Init+0x2b8>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034c8:	4a48      	ldr	r2, [pc, #288]	; (80035ec <HAL_GPIO_Init+0x2bc>)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a40      	ldr	r2, [pc, #256]	; (80035f0 <HAL_GPIO_Init+0x2c0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_GPIO_Init+0x1ec>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3f      	ldr	r2, [pc, #252]	; (80035f4 <HAL_GPIO_Init+0x2c4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00d      	beq.n	8003518 <HAL_GPIO_Init+0x1e8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3e      	ldr	r2, [pc, #248]	; (80035f8 <HAL_GPIO_Init+0x2c8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <HAL_GPIO_Init+0x1e4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <HAL_GPIO_Init+0x2cc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_GPIO_Init+0x1e0>
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_GPIO_Init+0x1ee>
 8003510:	2304      	movs	r3, #4
 8003512:	e004      	b.n	800351e <HAL_GPIO_Init+0x1ee>
 8003514:	2302      	movs	r3, #2
 8003516:	e002      	b.n	800351e <HAL_GPIO_Init+0x1ee>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_GPIO_Init+0x1ee>
 800351c:	2300      	movs	r3, #0
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	f002 0203 	and.w	r2, r2, #3
 8003524:	0092      	lsls	r2, r2, #2
 8003526:	4093      	lsls	r3, r2
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800352e:	492f      	ldr	r1, [pc, #188]	; (80035ec <HAL_GPIO_Init+0x2bc>)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d006      	beq.n	8003556 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003548:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	492c      	ldr	r1, [pc, #176]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	608b      	str	r3, [r1, #8]
 8003554:	e006      	b.n	8003564 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	43db      	mvns	r3, r3
 800355e:	4928      	ldr	r1, [pc, #160]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 8003560:	4013      	ands	r3, r2
 8003562:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	4922      	ldr	r1, [pc, #136]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	60cb      	str	r3, [r1, #12]
 800357c:	e006      	b.n	800358c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	43db      	mvns	r3, r3
 8003586:	491e      	ldr	r1, [pc, #120]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 8003588:	4013      	ands	r3, r2
 800358a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d006      	beq.n	80035a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4918      	ldr	r1, [pc, #96]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	4914      	ldr	r1, [pc, #80]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d021      	beq.n	8003604 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	490e      	ldr	r1, [pc, #56]	; (8003600 <HAL_GPIO_Init+0x2d0>)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	e021      	b.n	8003612 <HAL_GPIO_Init+0x2e2>
 80035ce:	bf00      	nop
 80035d0:	10320000 	.word	0x10320000
 80035d4:	10310000 	.word	0x10310000
 80035d8:	10220000 	.word	0x10220000
 80035dc:	10210000 	.word	0x10210000
 80035e0:	10120000 	.word	0x10120000
 80035e4:	10110000 	.word	0x10110000
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40010800 	.word	0x40010800
 80035f4:	40010c00 	.word	0x40010c00
 80035f8:	40011000 	.word	0x40011000
 80035fc:	40011400 	.word	0x40011400
 8003600:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_GPIO_Init+0x304>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	43db      	mvns	r3, r3
 800360c:	4909      	ldr	r1, [pc, #36]	; (8003634 <HAL_GPIO_Init+0x304>)
 800360e:	4013      	ands	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	3301      	adds	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	f47f ae8e 	bne.w	8003344 <HAL_GPIO_Init+0x14>
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	372c      	adds	r7, #44	; 0x2c
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40010400 	.word	0x40010400

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003654:	e003      	b.n	800365e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e12b      	b.n	80038d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fe ffcc 	bl	800262c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036cc:	f001 fd1e 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 80036d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4a81      	ldr	r2, [pc, #516]	; (80038dc <HAL_I2C_Init+0x274>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d807      	bhi.n	80036ec <HAL_I2C_Init+0x84>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4a80      	ldr	r2, [pc, #512]	; (80038e0 <HAL_I2C_Init+0x278>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	bf94      	ite	ls
 80036e4:	2301      	movls	r3, #1
 80036e6:	2300      	movhi	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e006      	b.n	80036fa <HAL_I2C_Init+0x92>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a7d      	ldr	r2, [pc, #500]	; (80038e4 <HAL_I2C_Init+0x27c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	bf94      	ite	ls
 80036f4:	2301      	movls	r3, #1
 80036f6:	2300      	movhi	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0e7      	b.n	80038d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a78      	ldr	r2, [pc, #480]	; (80038e8 <HAL_I2C_Init+0x280>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0c9b      	lsrs	r3, r3, #18
 800370c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4a6a      	ldr	r2, [pc, #424]	; (80038dc <HAL_I2C_Init+0x274>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d802      	bhi.n	800373c <HAL_I2C_Init+0xd4>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3301      	adds	r3, #1
 800373a:	e009      	b.n	8003750 <HAL_I2C_Init+0xe8>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	4a69      	ldr	r2, [pc, #420]	; (80038ec <HAL_I2C_Init+0x284>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	3301      	adds	r3, #1
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	430b      	orrs	r3, r1
 8003756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003762:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	495c      	ldr	r1, [pc, #368]	; (80038dc <HAL_I2C_Init+0x274>)
 800376c:	428b      	cmp	r3, r1
 800376e:	d819      	bhi.n	80037a4 <HAL_I2C_Init+0x13c>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e59      	subs	r1, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fbb1 f3f3 	udiv	r3, r1, r3
 800377e:	1c59      	adds	r1, r3, #1
 8003780:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003784:	400b      	ands	r3, r1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_I2C_Init+0x138>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1e59      	subs	r1, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fbb1 f3f3 	udiv	r3, r1, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379e:	e051      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 80037a0:	2304      	movs	r3, #4
 80037a2:	e04f      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d111      	bne.n	80037d0 <HAL_I2C_Init+0x168>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	440b      	add	r3, r1
 80037ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e012      	b.n	80037f6 <HAL_I2C_Init+0x18e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	0099      	lsls	r1, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x196>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e022      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10e      	bne.n	8003824 <HAL_I2C_Init+0x1bc>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e58      	subs	r0, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	fbb0 f3f3 	udiv	r3, r0, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003822:	e00f      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e58      	subs	r0, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	0099      	lsls	r1, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	fbb0 f3f3 	udiv	r3, r0, r3
 800383a:	3301      	adds	r3, #1
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	6809      	ldr	r1, [r1, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6911      	ldr	r1, [r2, #16]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68d2      	ldr	r2, [r2, #12]
 800387e:	4311      	orrs	r1, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	000186a0 	.word	0x000186a0
 80038e0:	001e847f 	.word	0x001e847f
 80038e4:	003d08ff 	.word	0x003d08ff
 80038e8:	431bde83 	.word	0x431bde83
 80038ec:	10624dd3 	.word	0x10624dd3

080038f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800390a:	f7ff f933 	bl	8002b74 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b20      	cmp	r3, #32
 800391a:	f040 80d9 	bne.w	8003ad0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2319      	movs	r3, #25
 8003924:	2201      	movs	r2, #1
 8003926:	496d      	ldr	r1, [pc, #436]	; (8003adc <HAL_I2C_Mem_Write+0x1ec>)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fdef 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
 8003936:	e0cc      	b.n	8003ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_I2C_Mem_Write+0x56>
 8003942:	2302      	movs	r3, #2
 8003944:	e0c5      	b.n	8003ad2 <HAL_I2C_Mem_Write+0x1e2>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d007      	beq.n	800396c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800397a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2221      	movs	r2, #33	; 0x21
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2240      	movs	r2, #64	; 0x40
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a4d      	ldr	r2, [pc, #308]	; (8003ae0 <HAL_I2C_Mem_Write+0x1f0>)
 80039ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ae:	88f8      	ldrh	r0, [r7, #6]
 80039b0:	893a      	ldrh	r2, [r7, #8]
 80039b2:	8979      	ldrh	r1, [r7, #10]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4603      	mov	r3, r0
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc26 	bl	8004210 <I2C_RequestMemoryWrite>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d052      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e081      	b.n	8003ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 feb4 	bl	8004740 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d107      	bne.n	80039f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e06b      	b.n	8003ad2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d11b      	bne.n	8003a70 <HAL_I2C_Mem_Write+0x180>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d017      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1aa      	bne.n	80039ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fea7 	bl	80047d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d107      	bne.n	8003aa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e016      	b.n	8003ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	00100002 	.word	0x00100002
 8003ae0:	ffff0000 	.word	0xffff0000

08003ae4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	461a      	mov	r2, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	817b      	strh	r3, [r7, #10]
 8003af6:	460b      	mov	r3, r1
 8003af8:	813b      	strh	r3, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b02:	f7ff f837 	bl	8002b74 <HAL_GetTick>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	f040 8244 	bne.w	8003f9e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	2319      	movs	r3, #25
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4982      	ldr	r1, [pc, #520]	; (8003d28 <HAL_I2C_Mem_Read+0x244>)
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fcf3 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e237      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Mem_Read+0x5a>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e230      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d007      	beq.n	8003b64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2222      	movs	r2, #34	; 0x22
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2240      	movs	r2, #64	; 0x40
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a62      	ldr	r2, [pc, #392]	; (8003d2c <HAL_I2C_Mem_Read+0x248>)
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba6:	88f8      	ldrh	r0, [r7, #6]
 8003ba8:	893a      	ldrh	r2, [r7, #8]
 8003baa:	8979      	ldrh	r1, [r7, #10]
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fbc0 	bl	800433c <I2C_RequestMemoryRead>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1ec      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e1c0      	b.n	8003f78 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d11e      	bne.n	8003c3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c0e:	b672      	cpsid	i
}
 8003c10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c38:	b662      	cpsie	i
}
 8003c3a:	e035      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d11e      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c54:	b672      	cpsid	i
}
 8003c56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c7e:	b662      	cpsie	i
}
 8003c80:	e012      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ca8:	e166      	b.n	8003f78 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	f200 811f 	bhi.w	8003ef2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d123      	bne.n	8003d04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fdcd 	bl	8004860 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e167      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d02:	e139      	b.n	8003f78 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d152      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	2200      	movs	r2, #0
 8003d14:	4906      	ldr	r1, [pc, #24]	; (8003d30 <HAL_I2C_Mem_Read+0x24c>)
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fbf8 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e13c      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
 8003d26:	bf00      	nop
 8003d28:	00100002 	.word	0x00100002
 8003d2c:	ffff0000 	.word	0xffff0000
 8003d30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d34:	b672      	cpsid	i
}
 8003d36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7a:	b662      	cpsie	i
}
 8003d7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003db0:	e0e2      	b.n	8003f78 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	2200      	movs	r2, #0
 8003dba:	497b      	ldr	r1, [pc, #492]	; (8003fa8 <HAL_I2C_Mem_Read+0x4c4>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fba5 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0e9      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ddc:	b672      	cpsid	i
}
 8003dde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e12:	4b66      	ldr	r3, [pc, #408]	; (8003fac <HAL_I2C_Mem_Read+0x4c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	4a65      	ldr	r2, [pc, #404]	; (8003fb0 <HAL_I2C_Mem_Read+0x4cc>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0a1a      	lsrs	r2, r3, #8
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00da      	lsls	r2, r3, #3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d118      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e5a:	b662      	cpsie	i
}
 8003e5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e09a      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d1d9      	bne.n	8003e2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003eba:	b662      	cpsie	i
}
 8003ebc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ef0:	e042      	b.n	8003f78 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fcb2 	bl	8004860 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e04c      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d118      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f ae94 	bne.w	8003caa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	00010004 	.word	0x00010004
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	14f8b589 	.word	0x14f8b589

08003fb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7fe fdd6 	bl	8002b74 <HAL_GetTick>
 8003fc8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	f040 8111 	bne.w	80041fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2319      	movs	r3, #25
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4988      	ldr	r1, [pc, #544]	; (8004208 <HAL_I2C_IsDeviceReady+0x254>)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fa90 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e104      	b.n	8004200 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_I2C_IsDeviceReady+0x50>
 8004000:	2302      	movs	r3, #2
 8004002:	e0fd      	b.n	8004200 <HAL_I2C_IsDeviceReady+0x24c>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d007      	beq.n	800402a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2224      	movs	r2, #36	; 0x24
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a70      	ldr	r2, [pc, #448]	; (800420c <HAL_I2C_IsDeviceReady+0x258>)
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fa4e 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004084:	d103      	bne.n	800408e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0b6      	b.n	8004200 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fe fd67 	bl	8002b74 <HAL_GetTick>
 80040a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	bf0c      	ite	eq
 80040b6:	2301      	moveq	r3, #1
 80040b8:	2300      	movne	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040cc:	bf0c      	ite	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	2300      	movne	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040d6:	e025      	b.n	8004124 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7fe fd4c 	bl	8002b74 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d302      	bcc.n	80040ee <HAL_I2C_IsDeviceReady+0x13a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	22a0      	movs	r2, #160	; 0xa0
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2ba0      	cmp	r3, #160	; 0xa0
 800412e:	d005      	beq.n	800413c <HAL_I2C_IsDeviceReady+0x188>
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_I2C_IsDeviceReady+0x188>
 8004136:	7dbb      	ldrb	r3, [r7, #22]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0cd      	beq.n	80040d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d129      	bne.n	80041a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004160:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2319      	movs	r3, #25
 800417e:	2201      	movs	r2, #1
 8004180:	4921      	ldr	r1, [pc, #132]	; (8004208 <HAL_I2C_IsDeviceReady+0x254>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f9c2 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e036      	b.n	8004200 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e02c      	b.n	8004200 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2319      	movs	r3, #25
 80041c6:	2201      	movs	r2, #1
 80041c8:	490f      	ldr	r1, [pc, #60]	; (8004208 <HAL_I2C_IsDeviceReady+0x254>)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f99e 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e012      	b.n	8004200 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	3301      	adds	r3, #1
 80041de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	f4ff af32 	bcc.w	800404e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	00100002 	.word	0x00100002
 800420c:	ffff0000 	.word	0xffff0000

08004210 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	461a      	mov	r2, r3
 800421e:	4603      	mov	r3, r0
 8004220:	817b      	strh	r3, [r7, #10]
 8004222:	460b      	mov	r3, r1
 8004224:	813b      	strh	r3, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	2200      	movs	r2, #0
 8004242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f960 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004260:	d103      	bne.n	800426a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e05f      	b.n	800432e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800427c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	6a3a      	ldr	r2, [r7, #32]
 8004282:	492d      	ldr	r1, [pc, #180]	; (8004338 <I2C_RequestMemoryWrite+0x128>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f9bb 	bl	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e04c      	b.n	800432e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	6a39      	ldr	r1, [r7, #32]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fa46 	bl	8004740 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d107      	bne.n	80042d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e02b      	b.n	800432e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042dc:	893b      	ldrh	r3, [r7, #8]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	611a      	str	r2, [r3, #16]
 80042e6:	e021      	b.n	800432c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042e8:	893b      	ldrh	r3, [r7, #8]
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	6a39      	ldr	r1, [r7, #32]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fa20 	bl	8004740 <I2C_WaitOnTXEFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b04      	cmp	r3, #4
 800430c:	d107      	bne.n	800431e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e005      	b.n	800432e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004322:	893b      	ldrh	r3, [r7, #8]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	00010002 	.word	0x00010002

0800433c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	461a      	mov	r2, r3
 800434a:	4603      	mov	r3, r0
 800434c:	817b      	strh	r3, [r7, #10]
 800434e:	460b      	mov	r3, r1
 8004350:	813b      	strh	r3, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2200      	movs	r2, #0
 800437e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8c2 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439c:	d103      	bne.n	80043a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0aa      	b.n	8004500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043aa:	897b      	ldrh	r3, [r7, #10]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	4952      	ldr	r1, [pc, #328]	; (8004508 <I2C_RequestMemoryRead+0x1cc>)
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f91d 	bl	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e097      	b.n	8004500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	6a39      	ldr	r1, [r7, #32]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f9a8 	bl	8004740 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00d      	beq.n	8004412 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d107      	bne.n	800440e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e076      	b.n	8004500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d105      	bne.n	8004424 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004418:	893b      	ldrh	r3, [r7, #8]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]
 8004422:	e021      	b.n	8004468 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004424:	893b      	ldrh	r3, [r7, #8]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	b29b      	uxth	r3, r3
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	6a39      	ldr	r1, [r7, #32]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f982 	bl	8004740 <I2C_WaitOnTXEFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2b04      	cmp	r3, #4
 8004448:	d107      	bne.n	800445a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e050      	b.n	8004500 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445e:	893b      	ldrh	r3, [r7, #8]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	6a39      	ldr	r1, [r7, #32]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f967 	bl	8004740 <I2C_WaitOnTXEFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	2b04      	cmp	r3, #4
 800447e:	d107      	bne.n	8004490 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e035      	b.n	8004500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f82b 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ca:	d103      	bne.n	80044d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e013      	b.n	8004500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044d8:	897b      	ldrh	r3, [r7, #10]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	6a3a      	ldr	r2, [r7, #32]
 80044ec:	4906      	ldr	r1, [pc, #24]	; (8004508 <I2C_RequestMemoryRead+0x1cc>)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f886 	bl	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	00010002 	.word	0x00010002

0800450c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800451c:	e048      	b.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d044      	beq.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fe fb25 	bl	8002b74 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d139      	bne.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10d      	bne.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	43da      	mvns	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4013      	ands	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	e00c      	b.n	800457c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	43da      	mvns	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4013      	ands	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf0c      	ite	eq
 8004574:	2301      	moveq	r3, #1
 8004576:	2300      	movne	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	429a      	cmp	r2, r3
 8004580:	d116      	bne.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e023      	b.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10d      	bne.n	80045d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	e00c      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	43da      	mvns	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d093      	beq.n	800451e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800460e:	e071      	b.n	80046f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d123      	bne.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f043 0204 	orr.w	r2, r3, #4
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e067      	b.n	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d041      	beq.n	80046f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004670:	f7fe fa80 	bl	8002b74 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d136      	bne.n	80046f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10c      	bne.n	80046aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	43da      	mvns	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf14      	ite	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	2300      	moveq	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e00b      	b.n	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	43da      	mvns	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4013      	ands	r3, r2
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f043 0220 	orr.w	r2, r3, #32
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e021      	b.n	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10c      	bne.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	43da      	mvns	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e00b      	b.n	8004730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	f47f af6d 	bne.w	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800474c:	e034      	b.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f8e3 	bl	800491a <I2C_IsAcknowledgeFailed>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e034      	b.n	80047c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d028      	beq.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004766:	f7fe fa05 	bl	8002b74 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11d      	bne.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d016      	beq.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d1c3      	bne.n	800474e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047dc:	e034      	b.n	8004848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f89b 	bl	800491a <I2C_IsAcknowledgeFailed>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e034      	b.n	8004858 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d028      	beq.n	8004848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fe f9bd 	bl	8002b74 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11d      	bne.n	8004848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d016      	beq.n	8004848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e007      	b.n	8004858 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b04      	cmp	r3, #4
 8004854:	d1c3      	bne.n	80047de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800486c:	e049      	b.n	8004902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b10      	cmp	r3, #16
 800487a:	d119      	bne.n	80048b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0210 	mvn.w	r2, #16
 8004884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e030      	b.n	8004912 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b0:	f7fe f960 	bl	8002b74 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d302      	bcc.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11d      	bne.n	8004902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d016      	beq.n	8004902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e007      	b.n	8004912 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d1ae      	bne.n	800486e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004930:	d11b      	bne.n	800496a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800493a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0204 	orr.w	r2, r3, #4
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
	...

08004978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e272      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8087 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004998:	4b92      	ldr	r3, [pc, #584]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d00c      	beq.n	80049be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049a4:	4b8f      	ldr	r3, [pc, #572]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d112      	bne.n	80049d6 <HAL_RCC_OscConfig+0x5e>
 80049b0:	4b8c      	ldr	r3, [pc, #560]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d10b      	bne.n	80049d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049be:	4b89      	ldr	r3, [pc, #548]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d06c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x12c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d168      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e24c      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x76>
 80049e0:	4b80      	ldr	r3, [pc, #512]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a7f      	ldr	r2, [pc, #508]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e02e      	b.n	8004a4c <HAL_RCC_OscConfig+0xd4>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x98>
 80049f6:	4b7b      	ldr	r3, [pc, #492]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7a      	ldr	r2, [pc, #488]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4b78      	ldr	r3, [pc, #480]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a77      	ldr	r2, [pc, #476]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xd4>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0xbc>
 8004a1a:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a71      	ldr	r2, [pc, #452]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b6f      	ldr	r3, [pc, #444]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6e      	ldr	r2, [pc, #440]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xd4>
 8004a34:	4b6b      	ldr	r3, [pc, #428]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b68      	ldr	r3, [pc, #416]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a67      	ldr	r2, [pc, #412]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe f88e 	bl	8002b74 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe f88a 	bl	8002b74 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e200      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xe4>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe f87a 	bl	8002b74 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe f876 	bl	8002b74 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1ec      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x10c>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d063      	beq.n	8004b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab2:	4b4c      	ldr	r3, [pc, #304]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004abe:	4b49      	ldr	r3, [pc, #292]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d11c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x18c>
 8004aca:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_RCC_OscConfig+0x176>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d001      	beq.n	8004aee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e1c0      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4939      	ldr	r1, [pc, #228]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	e03a      	b.n	8004b7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b0c:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fe f82f 	bl	8002b74 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fe f82b 	bl	8002b74 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1a1      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4927      	ldr	r1, [pc, #156]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fe f80e 	bl	8002b74 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fe f80a 	bl	8002b74 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e180      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d03a      	beq.n	8004bfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d019      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <HAL_RCC_OscConfig+0x274>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f7fd ffee 	bl	8002b74 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fd ffea 	bl	8002b74 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e160      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bba:	2001      	movs	r0, #1
 8004bbc:	f000 face 	bl	800515c <RCC_Delay>
 8004bc0:	e01c      	b.n	8004bfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_OscConfig+0x274>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc8:	f7fd ffd4 	bl	8002b74 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bce:	e00f      	b.n	8004bf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd0:	f7fd ffd0 	bl	8002b74 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d908      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e146      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	42420000 	.word	0x42420000
 8004bec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf0:	4b92      	ldr	r3, [pc, #584]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e9      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a6 	beq.w	8004d56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0e:	4b8b      	ldr	r3, [pc, #556]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10d      	bne.n	8004c36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	4b88      	ldr	r3, [pc, #544]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	4a87      	ldr	r2, [pc, #540]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c24:	61d3      	str	r3, [r2, #28]
 8004c26:	4b85      	ldr	r3, [pc, #532]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c32:	2301      	movs	r3, #1
 8004c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c36:	4b82      	ldr	r3, [pc, #520]	; (8004e40 <HAL_RCC_OscConfig+0x4c8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d118      	bne.n	8004c74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c42:	4b7f      	ldr	r3, [pc, #508]	; (8004e40 <HAL_RCC_OscConfig+0x4c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a7e      	ldr	r2, [pc, #504]	; (8004e40 <HAL_RCC_OscConfig+0x4c8>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c4e:	f7fd ff91 	bl	8002b74 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c56:	f7fd ff8d 	bl	8002b74 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b64      	cmp	r3, #100	; 0x64
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e103      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c68:	4b75      	ldr	r3, [pc, #468]	; (8004e40 <HAL_RCC_OscConfig+0x4c8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x312>
 8004c7c:	4b6f      	ldr	r3, [pc, #444]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4a6e      	ldr	r2, [pc, #440]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6213      	str	r3, [r2, #32]
 8004c88:	e02d      	b.n	8004ce6 <HAL_RCC_OscConfig+0x36e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x334>
 8004c92:	4b6a      	ldr	r3, [pc, #424]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	4a69      	ldr	r2, [pc, #420]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	6213      	str	r3, [r2, #32]
 8004c9e:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	4a66      	ldr	r2, [pc, #408]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	f023 0304 	bic.w	r3, r3, #4
 8004ca8:	6213      	str	r3, [r2, #32]
 8004caa:	e01c      	b.n	8004ce6 <HAL_RCC_OscConfig+0x36e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d10c      	bne.n	8004cce <HAL_RCC_OscConfig+0x356>
 8004cb4:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	4a60      	ldr	r2, [pc, #384]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004cba:	f043 0304 	orr.w	r3, r3, #4
 8004cbe:	6213      	str	r3, [r2, #32]
 8004cc0:	4b5e      	ldr	r3, [pc, #376]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	4a5d      	ldr	r2, [pc, #372]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6213      	str	r3, [r2, #32]
 8004ccc:	e00b      	b.n	8004ce6 <HAL_RCC_OscConfig+0x36e>
 8004cce:	4b5b      	ldr	r3, [pc, #364]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	4a5a      	ldr	r2, [pc, #360]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	6213      	str	r3, [r2, #32]
 8004cda:	4b58      	ldr	r3, [pc, #352]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	4a57      	ldr	r2, [pc, #348]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	f023 0304 	bic.w	r3, r3, #4
 8004ce4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d015      	beq.n	8004d1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fd ff41 	bl	8002b74 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fd ff3d 	bl	8002b74 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e0b1      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ee      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x37e>
 8004d18:	e014      	b.n	8004d44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1a:	f7fd ff2b 	bl	8002b74 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d22:	f7fd ff27 	bl	8002b74 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e09b      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d38:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ee      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4a:	4b3c      	ldr	r3, [pc, #240]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	4a3b      	ldr	r2, [pc, #236]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8087 	beq.w	8004e6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d60:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d061      	beq.n	8004e30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d146      	bne.n	8004e02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d74:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <HAL_RCC_OscConfig+0x4cc>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fd fefb 	bl	8002b74 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d82:	f7fd fef7 	bl	8002b74 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e06d      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d94:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da8:	d108      	bne.n	8004dbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	4921      	ldr	r1, [pc, #132]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a19      	ldr	r1, [r3, #32]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	491b      	ldr	r1, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCC_OscConfig+0x4cc>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fd fecb 	bl	8002b74 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de2:	f7fd fec7 	bl	8002b74 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e03d      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x46a>
 8004e00:	e035      	b.n	8004e6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCC_OscConfig+0x4cc>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fd feb4 	bl	8002b74 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fd feb0 	bl	8002b74 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e026      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x498>
 8004e2e:	e01e      	b.n	8004e6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e019      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40007000 	.word	0x40007000
 8004e44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_OscConfig+0x500>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d001      	beq.n	8004e6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000

08004e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0d0      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e90:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d910      	bls.n	8004ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b67      	ldr	r3, [pc, #412]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 0207 	bic.w	r2, r3, #7
 8004ea6:	4965      	ldr	r1, [pc, #404]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b63      	ldr	r3, [pc, #396]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0b8      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a58      	ldr	r2, [pc, #352]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	494d      	ldr	r1, [pc, #308]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d040      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d115      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b41      	ldr	r3, [pc, #260]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e073      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e06b      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5a:	4b39      	ldr	r3, [pc, #228]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f023 0203 	bic.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4936      	ldr	r1, [pc, #216]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fe02 	bl	8002b74 <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f74:	f7fd fdfe 	bl	8002b74 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e053      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8a:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 020c 	and.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d1eb      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d210      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 0207 	bic.w	r2, r3, #7
 8004fb2:	4922      	ldr	r1, [pc, #136]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e032      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4916      	ldr	r1, [pc, #88]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800500a:	f000 f821 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800500e:	4602      	mov	r2, r0
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	490a      	ldr	r1, [pc, #40]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 800501c:	5ccb      	ldrb	r3, [r1, r3]
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1cc>)
 8005024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_ClockConfig+0x1d0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd fd60 	bl	8002af0 <HAL_InitTick>

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40022000 	.word	0x40022000
 8005040:	40021000 	.word	0x40021000
 8005044:	0800bb20 	.word	0x0800bb20
 8005048:	20000000 	.word	0x20000000
 800504c:	20000004 	.word	0x20000004

08005050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b04      	cmp	r3, #4
 8005078:	d002      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x30>
 800507a:	2b08      	cmp	r3, #8
 800507c:	d003      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x36>
 800507e:	e027      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005082:	613b      	str	r3, [r7, #16]
      break;
 8005084:	e027      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	0c9b      	lsrs	r3, r3, #18
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	4a17      	ldr	r2, [pc, #92]	; (80050ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8005090:	5cd3      	ldrb	r3, [r2, r3]
 8005092:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	0c5b      	lsrs	r3, r3, #17
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050aa:	5cd3      	ldrb	r3, [r2, r3]
 80050ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a0d      	ldr	r2, [pc, #52]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80050b2:	fb03 f202 	mul.w	r2, r3, r2
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	e004      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	613b      	str	r3, [r7, #16]
      break;
 80050ce:	e002      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80050d2:	613b      	str	r3, [r7, #16]
      break;
 80050d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d6:	693b      	ldr	r3, [r7, #16]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	007a1200 	.word	0x007a1200
 80050ec:	0800bb38 	.word	0x0800bb38
 80050f0:	0800bb48 	.word	0x0800bb48
 80050f4:	003d0900 	.word	0x003d0900

080050f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050fc:	4b02      	ldr	r3, [pc, #8]	; (8005108 <HAL_RCC_GetHCLKFreq+0x10>)
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	20000000 	.word	0x20000000

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005110:	f7ff fff2 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021000 	.word	0x40021000
 8005130:	0800bb30 	.word	0x0800bb30

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005138:	f7ff ffde 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	0adb      	lsrs	r3, r3, #11
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4903      	ldr	r1, [pc, #12]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40021000 	.word	0x40021000
 8005158:	0800bb30 	.word	0x0800bb30

0800515c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <RCC_Delay+0x34>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <RCC_Delay+0x38>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	0a5b      	lsrs	r3, r3, #9
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005178:	bf00      	nop
  }
  while (Delay --);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1e5a      	subs	r2, r3, #1
 800517e:	60fa      	str	r2, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f9      	bne.n	8005178 <RCC_Delay+0x1c>
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	20000000 	.word	0x20000000
 8005194:	10624dd3 	.word	0x10624dd3

08005198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e041      	b.n	800522e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fd fa72 	bl	80026a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f000 fd5a 	bl	8005c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e041      	b.n	80052cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f839 	bl	80052d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f000 fd0b 	bl	8005c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e022      	b.n	800535a <HAL_TIM_PWM_Start_DMA+0x72>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d109      	bne.n	800532e <HAL_TIM_PWM_Start_DMA+0x46>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e015      	b.n	800535a <HAL_TIM_PWM_Start_DMA+0x72>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d109      	bne.n	8005348 <HAL_TIM_PWM_Start_DMA+0x60>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e008      	b.n	800535a <HAL_TIM_PWM_Start_DMA+0x72>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	e153      	b.n	800560a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <HAL_TIM_PWM_Start_DMA+0x94>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e022      	b.n	80053c2 <HAL_TIM_PWM_Start_DMA+0xda>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d109      	bne.n	8005396 <HAL_TIM_PWM_Start_DMA+0xae>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	e015      	b.n	80053c2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d109      	bne.n	80053b0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e008      	b.n	80053c2 <HAL_TIM_PWM_Start_DMA+0xda>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d024      	beq.n	8005410 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_TIM_PWM_Start_DMA+0xea>
 80053cc:	887b      	ldrh	r3, [r7, #2]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e119      	b.n	800560a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e4:	e016      	b.n	8005414 <HAL_TIM_PWM_Start_DMA+0x12c>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f4:	e00e      	b.n	8005414 <HAL_TIM_PWM_Start_DMA+0x12c>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Start_DMA+0x11e>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005404:	e006      	b.n	8005414 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800540e:	e001      	b.n	8005414 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0fa      	b.n	800560a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b0c      	cmp	r3, #12
 8005418:	f200 80ae 	bhi.w	8005578 <HAL_TIM_PWM_Start_DMA+0x290>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005459 	.word	0x08005459
 8005428:	08005579 	.word	0x08005579
 800542c:	08005579 	.word	0x08005579
 8005430:	08005579 	.word	0x08005579
 8005434:	080054a1 	.word	0x080054a1
 8005438:	08005579 	.word	0x08005579
 800543c:	08005579 	.word	0x08005579
 8005440:	08005579 	.word	0x08005579
 8005444:	080054e9 	.word	0x080054e9
 8005448:	08005579 	.word	0x08005579
 800544c:	08005579 	.word	0x08005579
 8005450:	08005579 	.word	0x08005579
 8005454:	08005531 	.word	0x08005531
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	4a6d      	ldr	r2, [pc, #436]	; (8005614 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	4a6c      	ldr	r2, [pc, #432]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005466:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	4a6b      	ldr	r2, [pc, #428]	; (800561c <HAL_TIM_PWM_Start_DMA+0x334>)
 800546e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3334      	adds	r3, #52	; 0x34
 800547c:	461a      	mov	r2, r3
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	f7fd fd0e 	bl	8002ea0 <HAL_DMA_Start_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e0bd      	b.n	800560a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	60da      	str	r2, [r3, #12]
      break;
 800549e:	e06e      	b.n	800557e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	4a5b      	ldr	r2, [pc, #364]	; (8005614 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	4a5a      	ldr	r2, [pc, #360]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x330>)
 80054ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	4a59      	ldr	r2, [pc, #356]	; (800561c <HAL_TIM_PWM_Start_DMA+0x334>)
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3338      	adds	r3, #56	; 0x38
 80054c4:	461a      	mov	r2, r3
 80054c6:	887b      	ldrh	r3, [r7, #2]
 80054c8:	f7fd fcea 	bl	8002ea0 <HAL_DMA_Start_IT>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e099      	b.n	800560a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e4:	60da      	str	r2, [r3, #12]
      break;
 80054e6:	e04a      	b.n	800557e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	4a49      	ldr	r2, [pc, #292]	; (8005614 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	4a48      	ldr	r2, [pc, #288]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x330>)
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4a47      	ldr	r2, [pc, #284]	; (800561c <HAL_TIM_PWM_Start_DMA+0x334>)
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	333c      	adds	r3, #60	; 0x3c
 800550c:	461a      	mov	r2, r3
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	f7fd fcc6 	bl	8002ea0 <HAL_DMA_Start_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e075      	b.n	800560a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552c:	60da      	str	r2, [r3, #12]
      break;
 800552e:	e026      	b.n	800557e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	4a37      	ldr	r2, [pc, #220]	; (8005614 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005536:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	4a36      	ldr	r2, [pc, #216]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x330>)
 800553e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	4a35      	ldr	r2, [pc, #212]	; (800561c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005546:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3340      	adds	r3, #64	; 0x40
 8005554:	461a      	mov	r2, r3
 8005556:	887b      	ldrh	r3, [r7, #2]
 8005558:	f7fd fca2 	bl	8002ea0 <HAL_DMA_Start_IT>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e051      	b.n	800560a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005574:	60da      	str	r2, [r3, #12]
      break;
 8005576:	e002      	b.n	800557e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	75fb      	strb	r3, [r7, #23]
      break;
 800557c:	bf00      	nop
  }

  if (status == HAL_OK)
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d141      	bne.n	8005608 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fdff 	bl	8006190 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a22      	ldr	r2, [pc, #136]	; (8005620 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d107      	bne.n	80055ac <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <HAL_TIM_PWM_Start_DMA+0x338>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00e      	beq.n	80055d4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055be:	d009      	beq.n	80055d4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a16      	ldr	r2, [pc, #88]	; (8005628 <HAL_TIM_PWM_Start_DMA+0x340>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d111      	bne.n	80055f8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d010      	beq.n	8005608 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f6:	e007      	b.n	8005608 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	08005b81 	.word	0x08005b81
 8005618:	08005c29 	.word	0x08005c29
 800561c:	08005aef 	.word	0x08005aef
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800

0800562c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d855      	bhi.n	80056ec <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	0800567d 	.word	0x0800567d
 800564c:	080056ed 	.word	0x080056ed
 8005650:	080056ed 	.word	0x080056ed
 8005654:	080056ed 	.word	0x080056ed
 8005658:	08005699 	.word	0x08005699
 800565c:	080056ed 	.word	0x080056ed
 8005660:	080056ed 	.word	0x080056ed
 8005664:	080056ed 	.word	0x080056ed
 8005668:	080056b5 	.word	0x080056b5
 800566c:	080056ed 	.word	0x080056ed
 8005670:	080056ed 	.word	0x080056ed
 8005674:	080056ed 	.word	0x080056ed
 8005678:	080056d1 	.word	0x080056d1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800568a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	4618      	mov	r0, r3
 8005692:	f7fd fca1 	bl	8002fd8 <HAL_DMA_Abort_IT>
      break;
 8005696:	e02c      	b.n	80056f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fd fc93 	bl	8002fd8 <HAL_DMA_Abort_IT>
      break;
 80056b2:	e01e      	b.n	80056f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd fc85 	bl	8002fd8 <HAL_DMA_Abort_IT>
      break;
 80056ce:	e010      	b.n	80056f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fd fc77 	bl	8002fd8 <HAL_DMA_Abort_IT>
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d157      	bne.n	80057a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2200      	movs	r2, #0
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fd45 	bl	8006190 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d117      	bne.n	8005740 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	f241 1311 	movw	r3, #4369	; 0x1111
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10f      	bne.n	8005740 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	f240 4344 	movw	r3, #1092	; 0x444
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d107      	bne.n	8005740 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800573e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	f241 1311 	movw	r3, #4369	; 0x1111
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10f      	bne.n	8005770 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	f240 4344 	movw	r3, #1092	; 0x444
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0201 	bic.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577e:	e013      	b.n	80057a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d104      	bne.n	8005790 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800578e:	e00b      	b.n	80057a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b08      	cmp	r3, #8
 8005794:	d104      	bne.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800579e:	e003      	b.n	80057a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40012c00 	.word	0x40012c00

080057b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0ae      	b.n	8005934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	f200 809f 	bhi.w	8005924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005925 	.word	0x08005925
 80057f4:	08005925 	.word	0x08005925
 80057f8:	08005925 	.word	0x08005925
 80057fc:	08005861 	.word	0x08005861
 8005800:	08005925 	.word	0x08005925
 8005804:	08005925 	.word	0x08005925
 8005808:	08005925 	.word	0x08005925
 800580c:	080058a3 	.word	0x080058a3
 8005810:	08005925 	.word	0x08005925
 8005814:	08005925 	.word	0x08005925
 8005818:	08005925 	.word	0x08005925
 800581c:	080058e3 	.word	0x080058e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fa94 	bl	8005d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0208 	orr.w	r2, r2, #8
 800583a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0204 	bic.w	r2, r2, #4
 800584a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6999      	ldr	r1, [r3, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	619a      	str	r2, [r3, #24]
      break;
 800585e:	e064      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fada 	bl	8005e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6999      	ldr	r1, [r3, #24]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	021a      	lsls	r2, r3, #8
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	619a      	str	r2, [r3, #24]
      break;
 80058a0:	e043      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fb23 	bl	8005ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0208 	orr.w	r2, r2, #8
 80058bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0204 	bic.w	r2, r2, #4
 80058cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69d9      	ldr	r1, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	61da      	str	r2, [r3, #28]
      break;
 80058e0:	e023      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fb6d 	bl	8005fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69d9      	ldr	r1, [r3, #28]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	021a      	lsls	r2, r3, #8
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	61da      	str	r2, [r3, #28]
      break;
 8005922:	e002      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIM_ConfigClockSource+0x1c>
 8005954:	2302      	movs	r3, #2
 8005956:	e0b4      	b.n	8005ac2 <HAL_TIM_ConfigClockSource+0x186>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005990:	d03e      	beq.n	8005a10 <HAL_TIM_ConfigClockSource+0xd4>
 8005992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005996:	f200 8087 	bhi.w	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	f000 8086 	beq.w	8005aae <HAL_TIM_ConfigClockSource+0x172>
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a6:	d87f      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b70      	cmp	r3, #112	; 0x70
 80059aa:	d01a      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xa6>
 80059ac:	2b70      	cmp	r3, #112	; 0x70
 80059ae:	d87b      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b60      	cmp	r3, #96	; 0x60
 80059b2:	d050      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x11a>
 80059b4:	2b60      	cmp	r3, #96	; 0x60
 80059b6:	d877      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b50      	cmp	r3, #80	; 0x50
 80059ba:	d03c      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0xfa>
 80059bc:	2b50      	cmp	r3, #80	; 0x50
 80059be:	d873      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d058      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x13a>
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d86f      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b30      	cmp	r3, #48	; 0x30
 80059ca:	d064      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059cc:	2b30      	cmp	r3, #48	; 0x30
 80059ce:	d86b      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d060      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d867      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d05c      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d05a      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059e0:	e062      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 fbae 	bl	8006152 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	609a      	str	r2, [r3, #8]
      break;
 8005a0e:	e04f      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	6899      	ldr	r1, [r3, #8]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f000 fb97 	bl	8006152 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a32:	609a      	str	r2, [r3, #8]
      break;
 8005a34:	e03c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fb0e 	bl	8006064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2150      	movs	r1, #80	; 0x50
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fb65 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005a54:	e02c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6859      	ldr	r1, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f000 fb2c 	bl	80060c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2160      	movs	r1, #96	; 0x60
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fb55 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005a74:	e01c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6859      	ldr	r1, [r3, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f000 faee 	bl	8006064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2140      	movs	r1, #64	; 0x40
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fb45 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005a94:	e00c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f000 fb3c 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005aa6:	e003      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e000      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr

08005aee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d107      	bne.n	8005b16 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b14:	e02a      	b.n	8005b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d107      	bne.n	8005b30 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2202      	movs	r2, #2
 8005b24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2e:	e01d      	b.n	8005b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d107      	bne.n	8005b4a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b48:	e010      	b.n	8005b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d107      	bne.n	8005b64 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2208      	movs	r2, #8
 8005b58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b62:	e003      	b.n	8005b6c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff ffb5 	bl	8005adc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d10b      	bne.n	8005bb0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d136      	bne.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bae:	e031      	b.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d10b      	bne.n	8005bd2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d125      	bne.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd0:	e020      	b.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d10b      	bne.n	8005bf4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2204      	movs	r2, #4
 8005be0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d114      	bne.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf2:	e00f      	b.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d10a      	bne.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2208      	movs	r2, #8
 8005c02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d103      	bne.n	8005c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7fc fa2f 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	771a      	strb	r2, [r3, #28]
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d103      	bne.n	8005c48 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	771a      	strb	r2, [r3, #28]
 8005c46:	e019      	b.n	8005c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d103      	bne.n	8005c5a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2202      	movs	r2, #2
 8005c56:	771a      	strb	r2, [r3, #28]
 8005c58:	e010      	b.n	8005c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d103      	bne.n	8005c6c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2204      	movs	r2, #4
 8005c68:	771a      	strb	r2, [r3, #28]
 8005c6a:	e007      	b.n	8005c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d102      	bne.n	8005c7c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2208      	movs	r2, #8
 8005c7a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff ff24 	bl	8005aca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <TIM_Base_SetConfig+0xb8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_Base_SetConfig+0x30>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d007      	beq.n	8005cc0 <TIM_Base_SetConfig+0x30>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <TIM_Base_SetConfig+0xbc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_Base_SetConfig+0x30>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <TIM_Base_SetConfig+0xc0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <TIM_Base_SetConfig+0xb8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_Base_SetConfig+0x62>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce0:	d007      	beq.n	8005cf2 <TIM_Base_SetConfig+0x62>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <TIM_Base_SetConfig+0xbc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0x62>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <TIM_Base_SetConfig+0xc0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <TIM_Base_SetConfig+0xb8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d103      	bne.n	8005d38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	615a      	str	r2, [r3, #20]
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800

08005d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f023 0201 	bic.w	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 0302 	bic.w	r3, r3, #2
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <TIM_OC1_SetConfig+0xc8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10c      	bne.n	8005dca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0308 	bic.w	r3, r3, #8
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 0304 	bic.w	r3, r3, #4
 8005dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <TIM_OC1_SetConfig+0xc8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d111      	bne.n	8005df6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40012c00 	.word	0x40012c00

08005e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f023 0210 	bic.w	r2, r3, #16
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0320 	bic.w	r3, r3, #32
 8005e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <TIM_OC2_SetConfig+0xd0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10d      	bne.n	8005e9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <TIM_OC2_SetConfig+0xd0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d113      	bne.n	8005ecc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00

08005ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <TIM_OC3_SetConfig+0xd0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d10d      	bne.n	8005f6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <TIM_OC3_SetConfig+0xd0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d113      	bne.n	8005f9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	621a      	str	r2, [r3, #32]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00

08005fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	031b      	lsls	r3, r3, #12
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a0f      	ldr	r2, [pc, #60]	; (8006060 <TIM_OC4_SetConfig+0x98>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d109      	bne.n	800603c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800602e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	019b      	lsls	r3, r3, #6
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr
 8006060:	40012c00 	.word	0x40012c00

08006064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0201 	bic.w	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 030a 	bic.w	r3, r3, #10
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0210 	bic.w	r2, r3, #16
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	031b      	lsls	r3, r3, #12
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	f043 0307 	orr.w	r3, r3, #7
 8006140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	bc80      	pop	{r7}
 8006150:	4770      	bx	lr

08006152 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	021a      	lsls	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	431a      	orrs	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4313      	orrs	r3, r2
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	609a      	str	r2, [r3, #8]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr

08006190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2201      	movs	r2, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1a      	ldr	r2, [r3, #32]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e046      	b.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a16      	ldr	r2, [pc, #88]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623c:	d009      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a12      	ldr	r2, [pc, #72]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a10      	ldr	r2, [pc, #64]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10c      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr
 8006288:	40012c00 	.word	0x40012c00
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800

08006294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e042      	b.n	800632c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fc fa86 	bl	80027cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2224      	movs	r2, #36	; 0x24
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fd71 	bl	8006dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800630c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	4613      	mov	r3, r2
 8006342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b20      	cmp	r3, #32
 8006352:	d16d      	bne.n	8006430 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <HAL_UART_Transmit+0x2c>
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e066      	b.n	8006432 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2221      	movs	r2, #33	; 0x21
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006372:	f7fc fbff 	bl	8002b74 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638c:	d108      	bne.n	80063a0 <HAL_UART_Transmit+0x6c>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	e003      	b.n	80063a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063a8:	e02a      	b.n	8006400 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2200      	movs	r2, #0
 80063b2:	2180      	movs	r1, #128	; 0x80
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 faf9 	bl	80069ac <UART_WaitOnFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e036      	b.n	8006432 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10b      	bne.n	80063e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	3302      	adds	r3, #2
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e007      	b.n	80063f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	781a      	ldrb	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1cf      	bne.n	80063aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2200      	movs	r2, #0
 8006412:	2140      	movs	r1, #64	; 0x40
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fac9 	bl	80069ac <UART_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e006      	b.n	8006432 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b0ba      	sub	sp, #232	; 0xe8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006462:	2300      	movs	r3, #0
 8006464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800646e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800647a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10f      	bne.n	80064a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_UART_IRQHandler+0x66>
 800648e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fbd1 	bl	8006c42 <UART_Receive_IT>
      return;
 80064a0:	e25b      	b.n	800695a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80de 	beq.w	8006668 <HAL_UART_IRQHandler+0x22c>
 80064ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80d1 	beq.w	8006668 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <HAL_UART_IRQHandler+0xae>
 80064d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e2:	f043 0201 	orr.w	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_UART_IRQHandler+0xd2>
 80064f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f043 0202 	orr.w	r2, r3, #2
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <HAL_UART_IRQHandler+0xf6>
 800651a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	f043 0204 	orr.w	r2, r3, #4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d011      	beq.n	8006562 <HAL_UART_IRQHandler+0x126>
 800653e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800654a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	f043 0208 	orr.w	r2, r3, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 81f2 	beq.w	8006950 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800656c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_UART_IRQHandler+0x14e>
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb5c 	bl	8006c42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <HAL_UART_IRQHandler+0x17a>
 80065ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d04f      	beq.n	8006656 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa66 	bl	8006a88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d041      	beq.n	800664e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3314      	adds	r3, #20
 80065f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800660e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1d9      	bne.n	80065ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d013      	beq.n	8006646 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	4a7e      	ldr	r2, [pc, #504]	; (800681c <HAL_UART_IRQHandler+0x3e0>)
 8006624:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	4618      	mov	r0, r3
 800662c:	f7fc fcd4 	bl	8002fd8 <HAL_DMA_Abort_IT>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d016      	beq.n	8006664 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006644:	e00e      	b.n	8006664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f99c 	bl	8006984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	e00a      	b.n	8006664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f998 	bl	8006984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	e006      	b.n	8006664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f994 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006662:	e175      	b.n	8006950 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	bf00      	nop
    return;
 8006666:	e173      	b.n	8006950 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	2b01      	cmp	r3, #1
 800666e:	f040 814f 	bne.w	8006910 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 8148 	beq.w	8006910 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8141 	beq.w	8006910 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80b6 	beq.w	8006820 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8145 	beq.w	8006954 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066d2:	429a      	cmp	r2, r3
 80066d4:	f080 813e 	bcs.w	8006954 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	f000 8088 	beq.w	80067fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800670a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006718:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800671c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006724:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1d9      	bne.n	80066ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3314      	adds	r3, #20
 800673e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800675c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006760:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006764:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800676e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e1      	bne.n	8006738 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3314      	adds	r3, #20
 8006794:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006798:	66fa      	str	r2, [r7, #108]	; 0x6c
 800679a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800679e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e3      	bne.n	8006774 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	330c      	adds	r3, #12
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067cc:	f023 0310 	bic.w	r3, r3, #16
 80067d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067de:	65ba      	str	r2, [r7, #88]	; 0x58
 80067e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e3      	bne.n	80067ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fc fbb2 	bl	8002f60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800680a:	b29b      	uxth	r3, r3
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	b29b      	uxth	r3, r3
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f8bf 	bl	8006996 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006818:	e09c      	b.n	8006954 <HAL_UART_IRQHandler+0x518>
 800681a:	bf00      	nop
 800681c:	08006b4d 	.word	0x08006b4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006828:	b29b      	uxth	r3, r3
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 808e 	beq.w	8006958 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800683c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8089 	beq.w	8006958 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800685c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800686a:	647a      	str	r2, [r7, #68]	; 0x44
 800686c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e3      	bne.n	8006846 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3314      	adds	r3, #20
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	623b      	str	r3, [r7, #32]
   return(result);
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3314      	adds	r3, #20
 800689e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068a2:	633a      	str	r2, [r7, #48]	; 0x30
 80068a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e3      	bne.n	800687e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068e8:	61fa      	str	r2, [r7, #28]
 80068ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	69b9      	ldr	r1, [r7, #24]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	617b      	str	r3, [r7, #20]
   return(result);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e3      	bne.n	80068c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f844 	bl	8006996 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800690e:	e023      	b.n	8006958 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006918:	2b00      	cmp	r3, #0
 800691a:	d009      	beq.n	8006930 <HAL_UART_IRQHandler+0x4f4>
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f923 	bl	8006b74 <UART_Transmit_IT>
    return;
 800692e:	e014      	b.n	800695a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00e      	beq.n	800695a <HAL_UART_IRQHandler+0x51e>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f962 	bl	8006c12 <UART_EndTransmit_IT>
    return;
 800694e:	e004      	b.n	800695a <HAL_UART_IRQHandler+0x51e>
    return;
 8006950:	bf00      	nop
 8006952:	e002      	b.n	800695a <HAL_UART_IRQHandler+0x51e>
      return;
 8006954:	bf00      	nop
 8006956:	e000      	b.n	800695a <HAL_UART_IRQHandler+0x51e>
      return;
 8006958:	bf00      	nop
  }
}
 800695a:	37e8      	adds	r7, #232	; 0xe8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr

08006972 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b090      	sub	sp, #64	; 0x40
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069bc:	e050      	b.n	8006a60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d04c      	beq.n	8006a60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <UART_WaitOnFlagUntilTimeout+0x30>
 80069cc:	f7fc f8d2 	bl	8002b74 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d8:	429a      	cmp	r2, r3
 80069da:	d241      	bcs.n	8006a60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069fc:	637a      	str	r2, [r7, #52]	; 0x34
 80069fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e5      	bne.n	80069dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3314      	adds	r3, #20
 8006a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a30:	623a      	str	r2, [r7, #32]
 8006a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	69f9      	ldr	r1, [r7, #28]
 8006a36:	6a3a      	ldr	r2, [r7, #32]
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e5      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e00f      	b.n	8006a80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d09f      	beq.n	80069be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3740      	adds	r7, #64	; 0x40
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b095      	sub	sp, #84	; 0x54
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ab0:	643a      	str	r2, [r7, #64]	; 0x40
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e5      	bne.n	8006a90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3314      	adds	r3, #20
 8006aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d119      	bne.n	8006b34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f023 0310 	bic.w	r3, r3, #16
 8006b16:	647b      	str	r3, [r7, #68]	; 0x44
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b20:	61ba      	str	r2, [r7, #24]
 8006b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6979      	ldr	r1, [r7, #20]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e5      	bne.n	8006b00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b42:	bf00      	nop
 8006b44:	3754      	adds	r7, #84	; 0x54
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff ff0c 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b21      	cmp	r3, #33	; 0x21
 8006b86:	d13e      	bne.n	8006c06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b90:	d114      	bne.n	8006bbc <UART_Transmit_IT+0x48>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d110      	bne.n	8006bbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	1c9a      	adds	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	621a      	str	r2, [r3, #32]
 8006bba:	e008      	b.n	8006bce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	1c59      	adds	r1, r3, #1
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6211      	str	r1, [r2, #32]
 8006bc6:	781a      	ldrb	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10f      	bne.n	8006c02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e000      	b.n	8006c08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c06:	2302      	movs	r3, #2
  }
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bc80      	pop	{r7}
 8006c10:	4770      	bx	lr

08006c12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fe94 	bl	8006960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b08c      	sub	sp, #48	; 0x30
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b22      	cmp	r3, #34	; 0x22
 8006c54:	f040 80ae 	bne.w	8006db4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c60:	d117      	bne.n	8006c92 <UART_Receive_IT+0x50>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d113      	bne.n	8006c92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c90:	e026      	b.n	8006ce0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca4:	d007      	beq.n	8006cb6 <UART_Receive_IT+0x74>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <UART_Receive_IT+0x82>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e008      	b.n	8006cd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	4619      	mov	r1, r3
 8006cee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d15d      	bne.n	8006db0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0220 	bic.w	r2, r2, #32
 8006d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d135      	bne.n	8006da6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	623a      	str	r2, [r7, #32]
 8006d62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	69f9      	ldr	r1, [r7, #28]
 8006d66:	6a3a      	ldr	r2, [r7, #32]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e5      	bne.n	8006d40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d10a      	bne.n	8006d98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff fdf9 	bl	8006996 <HAL_UARTEx_RxEventCallback>
 8006da4:	e002      	b.n	8006dac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff fde3 	bl	8006972 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e002      	b.n	8006db6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3730      	adds	r7, #48	; 0x30
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006dfa:	f023 030c 	bic.w	r3, r3, #12
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	430b      	orrs	r3, r1
 8006e06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <UART_SetConfig+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d103      	bne.n	8006e30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e28:	f7fe f984 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	e002      	b.n	8006e36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e30:	f7fe f96c 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006e34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009a      	lsls	r2, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4c:	4a22      	ldr	r2, [pc, #136]	; (8006ed8 <UART_SetConfig+0x118>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	0119      	lsls	r1, r3, #4
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009a      	lsls	r2, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <UART_SetConfig+0x118>)
 8006e6e:	fba3 0302 	umull	r0, r3, r3, r2
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2064      	movs	r0, #100	; 0x64
 8006e76:	fb00 f303 	mul.w	r3, r0, r3
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	3332      	adds	r3, #50	; 0x32
 8006e80:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <UART_SetConfig+0x118>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e8c:	4419      	add	r1, r3
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009a      	lsls	r2, r3, #2
 8006e98:	441a      	add	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <UART_SetConfig+0x118>)
 8006ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	2064      	movs	r0, #100	; 0x64
 8006eae:	fb00 f303 	mul.w	r3, r0, r3
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	011b      	lsls	r3, r3, #4
 8006eb6:	3332      	adds	r3, #50	; 0x32
 8006eb8:	4a07      	ldr	r2, [pc, #28]	; (8006ed8 <UART_SetConfig+0x118>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	440a      	add	r2, r1
 8006eca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40013800 	.word	0x40013800
 8006ed8:	51eb851f 	.word	0x51eb851f

08006edc <__errno>:
 8006edc:	4b01      	ldr	r3, [pc, #4]	; (8006ee4 <__errno+0x8>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	2000000c 	.word	0x2000000c

08006ee8 <__libc_init_array>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	2600      	movs	r6, #0
 8006eec:	4d0c      	ldr	r5, [pc, #48]	; (8006f20 <__libc_init_array+0x38>)
 8006eee:	4c0d      	ldr	r4, [pc, #52]	; (8006f24 <__libc_init_array+0x3c>)
 8006ef0:	1b64      	subs	r4, r4, r5
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	d109      	bne.n	8006f0c <__libc_init_array+0x24>
 8006ef8:	f004 fdc4 	bl	800ba84 <_init>
 8006efc:	2600      	movs	r6, #0
 8006efe:	4d0a      	ldr	r5, [pc, #40]	; (8006f28 <__libc_init_array+0x40>)
 8006f00:	4c0a      	ldr	r4, [pc, #40]	; (8006f2c <__libc_init_array+0x44>)
 8006f02:	1b64      	subs	r4, r4, r5
 8006f04:	10a4      	asrs	r4, r4, #2
 8006f06:	42a6      	cmp	r6, r4
 8006f08:	d105      	bne.n	8006f16 <__libc_init_array+0x2e>
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f10:	4798      	blx	r3
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7ee      	b.n	8006ef4 <__libc_init_array+0xc>
 8006f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1a:	4798      	blx	r3
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	e7f2      	b.n	8006f06 <__libc_init_array+0x1e>
 8006f20:	0800c130 	.word	0x0800c130
 8006f24:	0800c130 	.word	0x0800c130
 8006f28:	0800c130 	.word	0x0800c130
 8006f2c:	0800c134 	.word	0x0800c134

08006f30 <memset>:
 8006f30:	4603      	mov	r3, r0
 8006f32:	4402      	add	r2, r0
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d100      	bne.n	8006f3a <memset+0xa>
 8006f38:	4770      	bx	lr
 8006f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3e:	e7f9      	b.n	8006f34 <memset+0x4>

08006f40 <__cvt>:
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f46:	461f      	mov	r7, r3
 8006f48:	bfbb      	ittet	lt
 8006f4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f4e:	461f      	movlt	r7, r3
 8006f50:	2300      	movge	r3, #0
 8006f52:	232d      	movlt	r3, #45	; 0x2d
 8006f54:	b088      	sub	sp, #32
 8006f56:	4614      	mov	r4, r2
 8006f58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f5c:	7013      	strb	r3, [r2, #0]
 8006f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f60:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006f64:	f023 0820 	bic.w	r8, r3, #32
 8006f68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6c:	d005      	beq.n	8006f7a <__cvt+0x3a>
 8006f6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f72:	d100      	bne.n	8006f76 <__cvt+0x36>
 8006f74:	3501      	adds	r5, #1
 8006f76:	2302      	movs	r3, #2
 8006f78:	e000      	b.n	8006f7c <__cvt+0x3c>
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	aa07      	add	r2, sp, #28
 8006f7e:	9204      	str	r2, [sp, #16]
 8006f80:	aa06      	add	r2, sp, #24
 8006f82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f86:	e9cd 3500 	strd	r3, r5, [sp]
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	f000 fce3 	bl	8007958 <_dtoa_r>
 8006f92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f96:	4606      	mov	r6, r0
 8006f98:	d102      	bne.n	8006fa0 <__cvt+0x60>
 8006f9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f9c:	07db      	lsls	r3, r3, #31
 8006f9e:	d522      	bpl.n	8006fe6 <__cvt+0xa6>
 8006fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fa4:	eb06 0905 	add.w	r9, r6, r5
 8006fa8:	d110      	bne.n	8006fcc <__cvt+0x8c>
 8006faa:	7833      	ldrb	r3, [r6, #0]
 8006fac:	2b30      	cmp	r3, #48	; 0x30
 8006fae:	d10a      	bne.n	8006fc6 <__cvt+0x86>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 fcf6 	bl	80009a8 <__aeabi_dcmpeq>
 8006fbc:	b918      	cbnz	r0, 8006fc6 <__cvt+0x86>
 8006fbe:	f1c5 0501 	rsb	r5, r5, #1
 8006fc2:	f8ca 5000 	str.w	r5, [sl]
 8006fc6:	f8da 3000 	ldr.w	r3, [sl]
 8006fca:	4499      	add	r9, r3
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f7f9 fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8006fd8:	b108      	cbz	r0, 8006fde <__cvt+0x9e>
 8006fda:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fde:	2230      	movs	r2, #48	; 0x30
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	454b      	cmp	r3, r9
 8006fe4:	d307      	bcc.n	8006ff6 <__cvt+0xb6>
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	9b07      	ldr	r3, [sp, #28]
 8006fea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fec:	1b9b      	subs	r3, r3, r6
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	b008      	add	sp, #32
 8006ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	9107      	str	r1, [sp, #28]
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e7f0      	b.n	8006fe0 <__cvt+0xa0>

08006ffe <__exponent>:
 8006ffe:	4603      	mov	r3, r0
 8007000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007002:	2900      	cmp	r1, #0
 8007004:	f803 2b02 	strb.w	r2, [r3], #2
 8007008:	bfb6      	itet	lt
 800700a:	222d      	movlt	r2, #45	; 0x2d
 800700c:	222b      	movge	r2, #43	; 0x2b
 800700e:	4249      	neglt	r1, r1
 8007010:	2909      	cmp	r1, #9
 8007012:	7042      	strb	r2, [r0, #1]
 8007014:	dd2b      	ble.n	800706e <__exponent+0x70>
 8007016:	f10d 0407 	add.w	r4, sp, #7
 800701a:	46a4      	mov	ip, r4
 800701c:	270a      	movs	r7, #10
 800701e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007022:	460a      	mov	r2, r1
 8007024:	46a6      	mov	lr, r4
 8007026:	fb07 1516 	mls	r5, r7, r6, r1
 800702a:	2a63      	cmp	r2, #99	; 0x63
 800702c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007030:	4631      	mov	r1, r6
 8007032:	f104 34ff 	add.w	r4, r4, #4294967295
 8007036:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800703a:	dcf0      	bgt.n	800701e <__exponent+0x20>
 800703c:	3130      	adds	r1, #48	; 0x30
 800703e:	f1ae 0502 	sub.w	r5, lr, #2
 8007042:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007046:	4629      	mov	r1, r5
 8007048:	1c44      	adds	r4, r0, #1
 800704a:	4561      	cmp	r1, ip
 800704c:	d30a      	bcc.n	8007064 <__exponent+0x66>
 800704e:	f10d 0209 	add.w	r2, sp, #9
 8007052:	eba2 020e 	sub.w	r2, r2, lr
 8007056:	4565      	cmp	r5, ip
 8007058:	bf88      	it	hi
 800705a:	2200      	movhi	r2, #0
 800705c:	4413      	add	r3, r2
 800705e:	1a18      	subs	r0, r3, r0
 8007060:	b003      	add	sp, #12
 8007062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007064:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007068:	f804 2f01 	strb.w	r2, [r4, #1]!
 800706c:	e7ed      	b.n	800704a <__exponent+0x4c>
 800706e:	2330      	movs	r3, #48	; 0x30
 8007070:	3130      	adds	r1, #48	; 0x30
 8007072:	7083      	strb	r3, [r0, #2]
 8007074:	70c1      	strb	r1, [r0, #3]
 8007076:	1d03      	adds	r3, r0, #4
 8007078:	e7f1      	b.n	800705e <__exponent+0x60>
	...

0800707c <_printf_float>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	b091      	sub	sp, #68	; 0x44
 8007082:	460c      	mov	r4, r1
 8007084:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007088:	4616      	mov	r6, r2
 800708a:	461f      	mov	r7, r3
 800708c:	4605      	mov	r5, r0
 800708e:	f001 fa51 	bl	8008534 <_localeconv_r>
 8007092:	6803      	ldr	r3, [r0, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	9309      	str	r3, [sp, #36]	; 0x24
 8007098:	f7f9 f85a 	bl	8000150 <strlen>
 800709c:	2300      	movs	r3, #0
 800709e:	930e      	str	r3, [sp, #56]	; 0x38
 80070a0:	f8d8 3000 	ldr.w	r3, [r8]
 80070a4:	900a      	str	r0, [sp, #40]	; 0x28
 80070a6:	3307      	adds	r3, #7
 80070a8:	f023 0307 	bic.w	r3, r3, #7
 80070ac:	f103 0208 	add.w	r2, r3, #8
 80070b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80070b4:	f8d4 b000 	ldr.w	fp, [r4]
 80070b8:	f8c8 2000 	str.w	r2, [r8]
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80070c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80070cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	4640      	mov	r0, r8
 80070d4:	4b9c      	ldr	r3, [pc, #624]	; (8007348 <_printf_float+0x2cc>)
 80070d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070d8:	f7f9 fc98 	bl	8000a0c <__aeabi_dcmpun>
 80070dc:	bb70      	cbnz	r0, 800713c <_printf_float+0xc0>
 80070de:	f04f 32ff 	mov.w	r2, #4294967295
 80070e2:	4640      	mov	r0, r8
 80070e4:	4b98      	ldr	r3, [pc, #608]	; (8007348 <_printf_float+0x2cc>)
 80070e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070e8:	f7f9 fc72 	bl	80009d0 <__aeabi_dcmple>
 80070ec:	bb30      	cbnz	r0, 800713c <_printf_float+0xc0>
 80070ee:	2200      	movs	r2, #0
 80070f0:	2300      	movs	r3, #0
 80070f2:	4640      	mov	r0, r8
 80070f4:	4651      	mov	r1, sl
 80070f6:	f7f9 fc61 	bl	80009bc <__aeabi_dcmplt>
 80070fa:	b110      	cbz	r0, 8007102 <_printf_float+0x86>
 80070fc:	232d      	movs	r3, #45	; 0x2d
 80070fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007102:	4b92      	ldr	r3, [pc, #584]	; (800734c <_printf_float+0x2d0>)
 8007104:	4892      	ldr	r0, [pc, #584]	; (8007350 <_printf_float+0x2d4>)
 8007106:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800710a:	bf94      	ite	ls
 800710c:	4698      	movls	r8, r3
 800710e:	4680      	movhi	r8, r0
 8007110:	2303      	movs	r3, #3
 8007112:	f04f 0a00 	mov.w	sl, #0
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	f02b 0304 	bic.w	r3, fp, #4
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	4633      	mov	r3, r6
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	9700      	str	r7, [sp, #0]
 8007126:	aa0f      	add	r2, sp, #60	; 0x3c
 8007128:	f000 f9d4 	bl	80074d4 <_printf_common>
 800712c:	3001      	adds	r0, #1
 800712e:	f040 8090 	bne.w	8007252 <_printf_float+0x1d6>
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	b011      	add	sp, #68	; 0x44
 8007138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	4642      	mov	r2, r8
 800713e:	4653      	mov	r3, sl
 8007140:	4640      	mov	r0, r8
 8007142:	4651      	mov	r1, sl
 8007144:	f7f9 fc62 	bl	8000a0c <__aeabi_dcmpun>
 8007148:	b148      	cbz	r0, 800715e <_printf_float+0xe2>
 800714a:	f1ba 0f00 	cmp.w	sl, #0
 800714e:	bfb8      	it	lt
 8007150:	232d      	movlt	r3, #45	; 0x2d
 8007152:	4880      	ldr	r0, [pc, #512]	; (8007354 <_printf_float+0x2d8>)
 8007154:	bfb8      	it	lt
 8007156:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800715a:	4b7f      	ldr	r3, [pc, #508]	; (8007358 <_printf_float+0x2dc>)
 800715c:	e7d3      	b.n	8007106 <_printf_float+0x8a>
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	d142      	bne.n	80071ee <_printf_float+0x172>
 8007168:	2306      	movs	r3, #6
 800716a:	6063      	str	r3, [r4, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	9206      	str	r2, [sp, #24]
 8007170:	aa0e      	add	r2, sp, #56	; 0x38
 8007172:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007176:	aa0d      	add	r2, sp, #52	; 0x34
 8007178:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800717c:	9203      	str	r2, [sp, #12]
 800717e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007182:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	4642      	mov	r2, r8
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	4628      	mov	r0, r5
 8007190:	4653      	mov	r3, sl
 8007192:	910b      	str	r1, [sp, #44]	; 0x2c
 8007194:	f7ff fed4 	bl	8006f40 <__cvt>
 8007198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800719a:	4680      	mov	r8, r0
 800719c:	2947      	cmp	r1, #71	; 0x47
 800719e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071a0:	d108      	bne.n	80071b4 <_printf_float+0x138>
 80071a2:	1cc8      	adds	r0, r1, #3
 80071a4:	db02      	blt.n	80071ac <_printf_float+0x130>
 80071a6:	6863      	ldr	r3, [r4, #4]
 80071a8:	4299      	cmp	r1, r3
 80071aa:	dd40      	ble.n	800722e <_printf_float+0x1b2>
 80071ac:	f1a9 0902 	sub.w	r9, r9, #2
 80071b0:	fa5f f989 	uxtb.w	r9, r9
 80071b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80071b8:	d81f      	bhi.n	80071fa <_printf_float+0x17e>
 80071ba:	464a      	mov	r2, r9
 80071bc:	3901      	subs	r1, #1
 80071be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071c2:	910d      	str	r1, [sp, #52]	; 0x34
 80071c4:	f7ff ff1b 	bl	8006ffe <__exponent>
 80071c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ca:	4682      	mov	sl, r0
 80071cc:	1813      	adds	r3, r2, r0
 80071ce:	2a01      	cmp	r2, #1
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	dc02      	bgt.n	80071da <_printf_float+0x15e>
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	07d2      	lsls	r2, r2, #31
 80071d8:	d501      	bpl.n	80071de <_printf_float+0x162>
 80071da:	3301      	adds	r3, #1
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d09b      	beq.n	800711e <_printf_float+0xa2>
 80071e6:	232d      	movs	r3, #45	; 0x2d
 80071e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ec:	e797      	b.n	800711e <_printf_float+0xa2>
 80071ee:	2947      	cmp	r1, #71	; 0x47
 80071f0:	d1bc      	bne.n	800716c <_printf_float+0xf0>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1ba      	bne.n	800716c <_printf_float+0xf0>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e7b7      	b.n	800716a <_printf_float+0xee>
 80071fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80071fe:	d118      	bne.n	8007232 <_printf_float+0x1b6>
 8007200:	2900      	cmp	r1, #0
 8007202:	6863      	ldr	r3, [r4, #4]
 8007204:	dd0b      	ble.n	800721e <_printf_float+0x1a2>
 8007206:	6121      	str	r1, [r4, #16]
 8007208:	b913      	cbnz	r3, 8007210 <_printf_float+0x194>
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	07d0      	lsls	r0, r2, #31
 800720e:	d502      	bpl.n	8007216 <_printf_float+0x19a>
 8007210:	3301      	adds	r3, #1
 8007212:	440b      	add	r3, r1
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	f04f 0a00 	mov.w	sl, #0
 800721a:	65a1      	str	r1, [r4, #88]	; 0x58
 800721c:	e7df      	b.n	80071de <_printf_float+0x162>
 800721e:	b913      	cbnz	r3, 8007226 <_printf_float+0x1aa>
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	07d2      	lsls	r2, r2, #31
 8007224:	d501      	bpl.n	800722a <_printf_float+0x1ae>
 8007226:	3302      	adds	r3, #2
 8007228:	e7f4      	b.n	8007214 <_printf_float+0x198>
 800722a:	2301      	movs	r3, #1
 800722c:	e7f2      	b.n	8007214 <_printf_float+0x198>
 800722e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007234:	4299      	cmp	r1, r3
 8007236:	db05      	blt.n	8007244 <_printf_float+0x1c8>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	6121      	str	r1, [r4, #16]
 800723c:	07d8      	lsls	r0, r3, #31
 800723e:	d5ea      	bpl.n	8007216 <_printf_float+0x19a>
 8007240:	1c4b      	adds	r3, r1, #1
 8007242:	e7e7      	b.n	8007214 <_printf_float+0x198>
 8007244:	2900      	cmp	r1, #0
 8007246:	bfcc      	ite	gt
 8007248:	2201      	movgt	r2, #1
 800724a:	f1c1 0202 	rsble	r2, r1, #2
 800724e:	4413      	add	r3, r2
 8007250:	e7e0      	b.n	8007214 <_printf_float+0x198>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	055a      	lsls	r2, r3, #21
 8007256:	d407      	bmi.n	8007268 <_printf_float+0x1ec>
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	4642      	mov	r2, r8
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	d12b      	bne.n	80072be <_printf_float+0x242>
 8007266:	e764      	b.n	8007132 <_printf_float+0xb6>
 8007268:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800726c:	f240 80dd 	bls.w	800742a <_printf_float+0x3ae>
 8007270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007274:	2200      	movs	r2, #0
 8007276:	2300      	movs	r3, #0
 8007278:	f7f9 fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800727c:	2800      	cmp	r0, #0
 800727e:	d033      	beq.n	80072e8 <_printf_float+0x26c>
 8007280:	2301      	movs	r3, #1
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	4a35      	ldr	r2, [pc, #212]	; (800735c <_printf_float+0x2e0>)
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f af51 	beq.w	8007132 <_printf_float+0xb6>
 8007290:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007294:	429a      	cmp	r2, r3
 8007296:	db02      	blt.n	800729e <_printf_float+0x222>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	07d8      	lsls	r0, r3, #31
 800729c:	d50f      	bpl.n	80072be <_printf_float+0x242>
 800729e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f af42 	beq.w	8007132 <_printf_float+0xb6>
 80072ae:	f04f 0800 	mov.w	r8, #0
 80072b2:	f104 091a 	add.w	r9, r4, #26
 80072b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072b8:	3b01      	subs	r3, #1
 80072ba:	4543      	cmp	r3, r8
 80072bc:	dc09      	bgt.n	80072d2 <_printf_float+0x256>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	079b      	lsls	r3, r3, #30
 80072c2:	f100 8102 	bmi.w	80074ca <_printf_float+0x44e>
 80072c6:	68e0      	ldr	r0, [r4, #12]
 80072c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072ca:	4298      	cmp	r0, r3
 80072cc:	bfb8      	it	lt
 80072ce:	4618      	movlt	r0, r3
 80072d0:	e731      	b.n	8007136 <_printf_float+0xba>
 80072d2:	2301      	movs	r3, #1
 80072d4:	464a      	mov	r2, r9
 80072d6:	4631      	mov	r1, r6
 80072d8:	4628      	mov	r0, r5
 80072da:	47b8      	blx	r7
 80072dc:	3001      	adds	r0, #1
 80072de:	f43f af28 	beq.w	8007132 <_printf_float+0xb6>
 80072e2:	f108 0801 	add.w	r8, r8, #1
 80072e6:	e7e6      	b.n	80072b6 <_printf_float+0x23a>
 80072e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dc38      	bgt.n	8007360 <_printf_float+0x2e4>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4631      	mov	r1, r6
 80072f2:	4628      	mov	r0, r5
 80072f4:	4a19      	ldr	r2, [pc, #100]	; (800735c <_printf_float+0x2e0>)
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f af1a 	beq.w	8007132 <_printf_float+0xb6>
 80072fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007302:	4313      	orrs	r3, r2
 8007304:	d102      	bne.n	800730c <_printf_float+0x290>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	07d9      	lsls	r1, r3, #31
 800730a:	d5d8      	bpl.n	80072be <_printf_float+0x242>
 800730c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007310:	4631      	mov	r1, r6
 8007312:	4628      	mov	r0, r5
 8007314:	47b8      	blx	r7
 8007316:	3001      	adds	r0, #1
 8007318:	f43f af0b 	beq.w	8007132 <_printf_float+0xb6>
 800731c:	f04f 0900 	mov.w	r9, #0
 8007320:	f104 0a1a 	add.w	sl, r4, #26
 8007324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007326:	425b      	negs	r3, r3
 8007328:	454b      	cmp	r3, r9
 800732a:	dc01      	bgt.n	8007330 <_printf_float+0x2b4>
 800732c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800732e:	e794      	b.n	800725a <_printf_float+0x1de>
 8007330:	2301      	movs	r3, #1
 8007332:	4652      	mov	r2, sl
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	f43f aef9 	beq.w	8007132 <_printf_float+0xb6>
 8007340:	f109 0901 	add.w	r9, r9, #1
 8007344:	e7ee      	b.n	8007324 <_printf_float+0x2a8>
 8007346:	bf00      	nop
 8007348:	7fefffff 	.word	0x7fefffff
 800734c:	0800bb50 	.word	0x0800bb50
 8007350:	0800bb54 	.word	0x0800bb54
 8007354:	0800bb5c 	.word	0x0800bb5c
 8007358:	0800bb58 	.word	0x0800bb58
 800735c:	0800bb60 	.word	0x0800bb60
 8007360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007364:	429a      	cmp	r2, r3
 8007366:	bfa8      	it	ge
 8007368:	461a      	movge	r2, r3
 800736a:	2a00      	cmp	r2, #0
 800736c:	4691      	mov	r9, r2
 800736e:	dc37      	bgt.n	80073e0 <_printf_float+0x364>
 8007370:	f04f 0b00 	mov.w	fp, #0
 8007374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007378:	f104 021a 	add.w	r2, r4, #26
 800737c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007380:	ebaa 0309 	sub.w	r3, sl, r9
 8007384:	455b      	cmp	r3, fp
 8007386:	dc33      	bgt.n	80073f0 <_printf_float+0x374>
 8007388:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800738c:	429a      	cmp	r2, r3
 800738e:	db3b      	blt.n	8007408 <_printf_float+0x38c>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	07da      	lsls	r2, r3, #31
 8007394:	d438      	bmi.n	8007408 <_printf_float+0x38c>
 8007396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007398:	990d      	ldr	r1, [sp, #52]	; 0x34
 800739a:	eba3 020a 	sub.w	r2, r3, sl
 800739e:	eba3 0901 	sub.w	r9, r3, r1
 80073a2:	4591      	cmp	r9, r2
 80073a4:	bfa8      	it	ge
 80073a6:	4691      	movge	r9, r2
 80073a8:	f1b9 0f00 	cmp.w	r9, #0
 80073ac:	dc34      	bgt.n	8007418 <_printf_float+0x39c>
 80073ae:	f04f 0800 	mov.w	r8, #0
 80073b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073b6:	f104 0a1a 	add.w	sl, r4, #26
 80073ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	eba3 0309 	sub.w	r3, r3, r9
 80073c4:	4543      	cmp	r3, r8
 80073c6:	f77f af7a 	ble.w	80072be <_printf_float+0x242>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4652      	mov	r2, sl
 80073ce:	4631      	mov	r1, r6
 80073d0:	4628      	mov	r0, r5
 80073d2:	47b8      	blx	r7
 80073d4:	3001      	adds	r0, #1
 80073d6:	f43f aeac 	beq.w	8007132 <_printf_float+0xb6>
 80073da:	f108 0801 	add.w	r8, r8, #1
 80073de:	e7ec      	b.n	80073ba <_printf_float+0x33e>
 80073e0:	4613      	mov	r3, r2
 80073e2:	4631      	mov	r1, r6
 80073e4:	4642      	mov	r2, r8
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	d1c0      	bne.n	8007370 <_printf_float+0x2f4>
 80073ee:	e6a0      	b.n	8007132 <_printf_float+0xb6>
 80073f0:	2301      	movs	r3, #1
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	f43f ae99 	beq.w	8007132 <_printf_float+0xb6>
 8007400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007402:	f10b 0b01 	add.w	fp, fp, #1
 8007406:	e7b9      	b.n	800737c <_printf_float+0x300>
 8007408:	4631      	mov	r1, r6
 800740a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740e:	4628      	mov	r0, r5
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	d1bf      	bne.n	8007396 <_printf_float+0x31a>
 8007416:	e68c      	b.n	8007132 <_printf_float+0xb6>
 8007418:	464b      	mov	r3, r9
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	eb08 020a 	add.w	r2, r8, sl
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	d1c2      	bne.n	80073ae <_printf_float+0x332>
 8007428:	e683      	b.n	8007132 <_printf_float+0xb6>
 800742a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800742c:	2a01      	cmp	r2, #1
 800742e:	dc01      	bgt.n	8007434 <_printf_float+0x3b8>
 8007430:	07db      	lsls	r3, r3, #31
 8007432:	d537      	bpl.n	80074a4 <_printf_float+0x428>
 8007434:	2301      	movs	r3, #1
 8007436:	4642      	mov	r2, r8
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f ae77 	beq.w	8007132 <_printf_float+0xb6>
 8007444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007448:	4631      	mov	r1, r6
 800744a:	4628      	mov	r0, r5
 800744c:	47b8      	blx	r7
 800744e:	3001      	adds	r0, #1
 8007450:	f43f ae6f 	beq.w	8007132 <_printf_float+0xb6>
 8007454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007458:	2200      	movs	r2, #0
 800745a:	2300      	movs	r3, #0
 800745c:	f7f9 faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8007460:	b9d8      	cbnz	r0, 800749a <_printf_float+0x41e>
 8007462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007464:	f108 0201 	add.w	r2, r8, #1
 8007468:	3b01      	subs	r3, #1
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	d10e      	bne.n	8007492 <_printf_float+0x416>
 8007474:	e65d      	b.n	8007132 <_printf_float+0xb6>
 8007476:	2301      	movs	r3, #1
 8007478:	464a      	mov	r2, r9
 800747a:	4631      	mov	r1, r6
 800747c:	4628      	mov	r0, r5
 800747e:	47b8      	blx	r7
 8007480:	3001      	adds	r0, #1
 8007482:	f43f ae56 	beq.w	8007132 <_printf_float+0xb6>
 8007486:	f108 0801 	add.w	r8, r8, #1
 800748a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800748c:	3b01      	subs	r3, #1
 800748e:	4543      	cmp	r3, r8
 8007490:	dcf1      	bgt.n	8007476 <_printf_float+0x3fa>
 8007492:	4653      	mov	r3, sl
 8007494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007498:	e6e0      	b.n	800725c <_printf_float+0x1e0>
 800749a:	f04f 0800 	mov.w	r8, #0
 800749e:	f104 091a 	add.w	r9, r4, #26
 80074a2:	e7f2      	b.n	800748a <_printf_float+0x40e>
 80074a4:	2301      	movs	r3, #1
 80074a6:	4642      	mov	r2, r8
 80074a8:	e7df      	b.n	800746a <_printf_float+0x3ee>
 80074aa:	2301      	movs	r3, #1
 80074ac:	464a      	mov	r2, r9
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae3c 	beq.w	8007132 <_printf_float+0xb6>
 80074ba:	f108 0801 	add.w	r8, r8, #1
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074c2:	1a5b      	subs	r3, r3, r1
 80074c4:	4543      	cmp	r3, r8
 80074c6:	dcf0      	bgt.n	80074aa <_printf_float+0x42e>
 80074c8:	e6fd      	b.n	80072c6 <_printf_float+0x24a>
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	f104 0919 	add.w	r9, r4, #25
 80074d2:	e7f4      	b.n	80074be <_printf_float+0x442>

080074d4 <_printf_common>:
 80074d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d8:	4616      	mov	r6, r2
 80074da:	4699      	mov	r9, r3
 80074dc:	688a      	ldr	r2, [r1, #8]
 80074de:	690b      	ldr	r3, [r1, #16]
 80074e0:	4607      	mov	r7, r0
 80074e2:	4293      	cmp	r3, r2
 80074e4:	bfb8      	it	lt
 80074e6:	4613      	movlt	r3, r2
 80074e8:	6033      	str	r3, [r6, #0]
 80074ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074ee:	460c      	mov	r4, r1
 80074f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074f4:	b10a      	cbz	r2, 80074fa <_printf_common+0x26>
 80074f6:	3301      	adds	r3, #1
 80074f8:	6033      	str	r3, [r6, #0]
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	0699      	lsls	r1, r3, #26
 80074fe:	bf42      	ittt	mi
 8007500:	6833      	ldrmi	r3, [r6, #0]
 8007502:	3302      	addmi	r3, #2
 8007504:	6033      	strmi	r3, [r6, #0]
 8007506:	6825      	ldr	r5, [r4, #0]
 8007508:	f015 0506 	ands.w	r5, r5, #6
 800750c:	d106      	bne.n	800751c <_printf_common+0x48>
 800750e:	f104 0a19 	add.w	sl, r4, #25
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	6832      	ldr	r2, [r6, #0]
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	42ab      	cmp	r3, r5
 800751a:	dc28      	bgt.n	800756e <_printf_common+0x9a>
 800751c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007520:	1e13      	subs	r3, r2, #0
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	bf18      	it	ne
 8007526:	2301      	movne	r3, #1
 8007528:	0692      	lsls	r2, r2, #26
 800752a:	d42d      	bmi.n	8007588 <_printf_common+0xb4>
 800752c:	4649      	mov	r1, r9
 800752e:	4638      	mov	r0, r7
 8007530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007534:	47c0      	blx	r8
 8007536:	3001      	adds	r0, #1
 8007538:	d020      	beq.n	800757c <_printf_common+0xa8>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	68e5      	ldr	r5, [r4, #12]
 800753e:	f003 0306 	and.w	r3, r3, #6
 8007542:	2b04      	cmp	r3, #4
 8007544:	bf18      	it	ne
 8007546:	2500      	movne	r5, #0
 8007548:	6832      	ldr	r2, [r6, #0]
 800754a:	f04f 0600 	mov.w	r6, #0
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	bf08      	it	eq
 8007552:	1aad      	subeq	r5, r5, r2
 8007554:	6922      	ldr	r2, [r4, #16]
 8007556:	bf08      	it	eq
 8007558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800755c:	4293      	cmp	r3, r2
 800755e:	bfc4      	itt	gt
 8007560:	1a9b      	subgt	r3, r3, r2
 8007562:	18ed      	addgt	r5, r5, r3
 8007564:	341a      	adds	r4, #26
 8007566:	42b5      	cmp	r5, r6
 8007568:	d11a      	bne.n	80075a0 <_printf_common+0xcc>
 800756a:	2000      	movs	r0, #0
 800756c:	e008      	b.n	8007580 <_printf_common+0xac>
 800756e:	2301      	movs	r3, #1
 8007570:	4652      	mov	r2, sl
 8007572:	4649      	mov	r1, r9
 8007574:	4638      	mov	r0, r7
 8007576:	47c0      	blx	r8
 8007578:	3001      	adds	r0, #1
 800757a:	d103      	bne.n	8007584 <_printf_common+0xb0>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	3501      	adds	r5, #1
 8007586:	e7c4      	b.n	8007512 <_printf_common+0x3e>
 8007588:	2030      	movs	r0, #48	; 0x30
 800758a:	18e1      	adds	r1, r4, r3
 800758c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007596:	4422      	add	r2, r4
 8007598:	3302      	adds	r3, #2
 800759a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800759e:	e7c5      	b.n	800752c <_printf_common+0x58>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4622      	mov	r2, r4
 80075a4:	4649      	mov	r1, r9
 80075a6:	4638      	mov	r0, r7
 80075a8:	47c0      	blx	r8
 80075aa:	3001      	adds	r0, #1
 80075ac:	d0e6      	beq.n	800757c <_printf_common+0xa8>
 80075ae:	3601      	adds	r6, #1
 80075b0:	e7d9      	b.n	8007566 <_printf_common+0x92>
	...

080075b4 <_printf_i>:
 80075b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	7e0f      	ldrb	r7, [r1, #24]
 80075ba:	4691      	mov	r9, r2
 80075bc:	2f78      	cmp	r7, #120	; 0x78
 80075be:	4680      	mov	r8, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	469a      	mov	sl, r3
 80075c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ca:	d807      	bhi.n	80075dc <_printf_i+0x28>
 80075cc:	2f62      	cmp	r7, #98	; 0x62
 80075ce:	d80a      	bhi.n	80075e6 <_printf_i+0x32>
 80075d0:	2f00      	cmp	r7, #0
 80075d2:	f000 80d9 	beq.w	8007788 <_printf_i+0x1d4>
 80075d6:	2f58      	cmp	r7, #88	; 0x58
 80075d8:	f000 80a4 	beq.w	8007724 <_printf_i+0x170>
 80075dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075e4:	e03a      	b.n	800765c <_printf_i+0xa8>
 80075e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ea:	2b15      	cmp	r3, #21
 80075ec:	d8f6      	bhi.n	80075dc <_printf_i+0x28>
 80075ee:	a101      	add	r1, pc, #4	; (adr r1, 80075f4 <_printf_i+0x40>)
 80075f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075f4:	0800764d 	.word	0x0800764d
 80075f8:	08007661 	.word	0x08007661
 80075fc:	080075dd 	.word	0x080075dd
 8007600:	080075dd 	.word	0x080075dd
 8007604:	080075dd 	.word	0x080075dd
 8007608:	080075dd 	.word	0x080075dd
 800760c:	08007661 	.word	0x08007661
 8007610:	080075dd 	.word	0x080075dd
 8007614:	080075dd 	.word	0x080075dd
 8007618:	080075dd 	.word	0x080075dd
 800761c:	080075dd 	.word	0x080075dd
 8007620:	0800776f 	.word	0x0800776f
 8007624:	08007691 	.word	0x08007691
 8007628:	08007751 	.word	0x08007751
 800762c:	080075dd 	.word	0x080075dd
 8007630:	080075dd 	.word	0x080075dd
 8007634:	08007791 	.word	0x08007791
 8007638:	080075dd 	.word	0x080075dd
 800763c:	08007691 	.word	0x08007691
 8007640:	080075dd 	.word	0x080075dd
 8007644:	080075dd 	.word	0x080075dd
 8007648:	08007759 	.word	0x08007759
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	602a      	str	r2, [r5, #0]
 8007654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800765c:	2301      	movs	r3, #1
 800765e:	e0a4      	b.n	80077aa <_printf_i+0x1f6>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	6829      	ldr	r1, [r5, #0]
 8007664:	0606      	lsls	r6, r0, #24
 8007666:	f101 0304 	add.w	r3, r1, #4
 800766a:	d50a      	bpl.n	8007682 <_printf_i+0xce>
 800766c:	680e      	ldr	r6, [r1, #0]
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	2e00      	cmp	r6, #0
 8007672:	da03      	bge.n	800767c <_printf_i+0xc8>
 8007674:	232d      	movs	r3, #45	; 0x2d
 8007676:	4276      	negs	r6, r6
 8007678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800767c:	230a      	movs	r3, #10
 800767e:	485e      	ldr	r0, [pc, #376]	; (80077f8 <_printf_i+0x244>)
 8007680:	e019      	b.n	80076b6 <_printf_i+0x102>
 8007682:	680e      	ldr	r6, [r1, #0]
 8007684:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	bf18      	it	ne
 800768c:	b236      	sxthne	r6, r6
 800768e:	e7ef      	b.n	8007670 <_printf_i+0xbc>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	1d19      	adds	r1, r3, #4
 8007696:	6029      	str	r1, [r5, #0]
 8007698:	0601      	lsls	r1, r0, #24
 800769a:	d501      	bpl.n	80076a0 <_printf_i+0xec>
 800769c:	681e      	ldr	r6, [r3, #0]
 800769e:	e002      	b.n	80076a6 <_printf_i+0xf2>
 80076a0:	0646      	lsls	r6, r0, #25
 80076a2:	d5fb      	bpl.n	800769c <_printf_i+0xe8>
 80076a4:	881e      	ldrh	r6, [r3, #0]
 80076a6:	2f6f      	cmp	r7, #111	; 0x6f
 80076a8:	bf0c      	ite	eq
 80076aa:	2308      	moveq	r3, #8
 80076ac:	230a      	movne	r3, #10
 80076ae:	4852      	ldr	r0, [pc, #328]	; (80077f8 <_printf_i+0x244>)
 80076b0:	2100      	movs	r1, #0
 80076b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076b6:	6865      	ldr	r5, [r4, #4]
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	bfa8      	it	ge
 80076bc:	6821      	ldrge	r1, [r4, #0]
 80076be:	60a5      	str	r5, [r4, #8]
 80076c0:	bfa4      	itt	ge
 80076c2:	f021 0104 	bicge.w	r1, r1, #4
 80076c6:	6021      	strge	r1, [r4, #0]
 80076c8:	b90e      	cbnz	r6, 80076ce <_printf_i+0x11a>
 80076ca:	2d00      	cmp	r5, #0
 80076cc:	d04d      	beq.n	800776a <_printf_i+0x1b6>
 80076ce:	4615      	mov	r5, r2
 80076d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80076d4:	fb03 6711 	mls	r7, r3, r1, r6
 80076d8:	5dc7      	ldrb	r7, [r0, r7]
 80076da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076de:	4637      	mov	r7, r6
 80076e0:	42bb      	cmp	r3, r7
 80076e2:	460e      	mov	r6, r1
 80076e4:	d9f4      	bls.n	80076d0 <_printf_i+0x11c>
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d10b      	bne.n	8007702 <_printf_i+0x14e>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	07de      	lsls	r6, r3, #31
 80076ee:	d508      	bpl.n	8007702 <_printf_i+0x14e>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	6861      	ldr	r1, [r4, #4]
 80076f4:	4299      	cmp	r1, r3
 80076f6:	bfde      	ittt	le
 80076f8:	2330      	movle	r3, #48	; 0x30
 80076fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007702:	1b52      	subs	r2, r2, r5
 8007704:	6122      	str	r2, [r4, #16]
 8007706:	464b      	mov	r3, r9
 8007708:	4621      	mov	r1, r4
 800770a:	4640      	mov	r0, r8
 800770c:	f8cd a000 	str.w	sl, [sp]
 8007710:	aa03      	add	r2, sp, #12
 8007712:	f7ff fedf 	bl	80074d4 <_printf_common>
 8007716:	3001      	adds	r0, #1
 8007718:	d14c      	bne.n	80077b4 <_printf_i+0x200>
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
 800771e:	b004      	add	sp, #16
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	4834      	ldr	r0, [pc, #208]	; (80077f8 <_printf_i+0x244>)
 8007726:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800772a:	6829      	ldr	r1, [r5, #0]
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007732:	6029      	str	r1, [r5, #0]
 8007734:	061d      	lsls	r5, r3, #24
 8007736:	d514      	bpl.n	8007762 <_printf_i+0x1ae>
 8007738:	07df      	lsls	r7, r3, #31
 800773a:	bf44      	itt	mi
 800773c:	f043 0320 	orrmi.w	r3, r3, #32
 8007740:	6023      	strmi	r3, [r4, #0]
 8007742:	b91e      	cbnz	r6, 800774c <_printf_i+0x198>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	f023 0320 	bic.w	r3, r3, #32
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	2310      	movs	r3, #16
 800774e:	e7af      	b.n	80076b0 <_printf_i+0xfc>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	f043 0320 	orr.w	r3, r3, #32
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	2378      	movs	r3, #120	; 0x78
 800775a:	4828      	ldr	r0, [pc, #160]	; (80077fc <_printf_i+0x248>)
 800775c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007760:	e7e3      	b.n	800772a <_printf_i+0x176>
 8007762:	0659      	lsls	r1, r3, #25
 8007764:	bf48      	it	mi
 8007766:	b2b6      	uxthmi	r6, r6
 8007768:	e7e6      	b.n	8007738 <_printf_i+0x184>
 800776a:	4615      	mov	r5, r2
 800776c:	e7bb      	b.n	80076e6 <_printf_i+0x132>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	6826      	ldr	r6, [r4, #0]
 8007772:	1d18      	adds	r0, r3, #4
 8007774:	6961      	ldr	r1, [r4, #20]
 8007776:	6028      	str	r0, [r5, #0]
 8007778:	0635      	lsls	r5, r6, #24
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	d501      	bpl.n	8007782 <_printf_i+0x1ce>
 800777e:	6019      	str	r1, [r3, #0]
 8007780:	e002      	b.n	8007788 <_printf_i+0x1d4>
 8007782:	0670      	lsls	r0, r6, #25
 8007784:	d5fb      	bpl.n	800777e <_printf_i+0x1ca>
 8007786:	8019      	strh	r1, [r3, #0]
 8007788:	2300      	movs	r3, #0
 800778a:	4615      	mov	r5, r2
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	e7ba      	b.n	8007706 <_printf_i+0x152>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	2100      	movs	r1, #0
 8007794:	1d1a      	adds	r2, r3, #4
 8007796:	602a      	str	r2, [r5, #0]
 8007798:	681d      	ldr	r5, [r3, #0]
 800779a:	6862      	ldr	r2, [r4, #4]
 800779c:	4628      	mov	r0, r5
 800779e:	f000 fed5 	bl	800854c <memchr>
 80077a2:	b108      	cbz	r0, 80077a8 <_printf_i+0x1f4>
 80077a4:	1b40      	subs	r0, r0, r5
 80077a6:	6060      	str	r0, [r4, #4]
 80077a8:	6863      	ldr	r3, [r4, #4]
 80077aa:	6123      	str	r3, [r4, #16]
 80077ac:	2300      	movs	r3, #0
 80077ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b2:	e7a8      	b.n	8007706 <_printf_i+0x152>
 80077b4:	462a      	mov	r2, r5
 80077b6:	4649      	mov	r1, r9
 80077b8:	4640      	mov	r0, r8
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	47d0      	blx	sl
 80077be:	3001      	adds	r0, #1
 80077c0:	d0ab      	beq.n	800771a <_printf_i+0x166>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	079b      	lsls	r3, r3, #30
 80077c6:	d413      	bmi.n	80077f0 <_printf_i+0x23c>
 80077c8:	68e0      	ldr	r0, [r4, #12]
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	4298      	cmp	r0, r3
 80077ce:	bfb8      	it	lt
 80077d0:	4618      	movlt	r0, r3
 80077d2:	e7a4      	b.n	800771e <_printf_i+0x16a>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4632      	mov	r2, r6
 80077d8:	4649      	mov	r1, r9
 80077da:	4640      	mov	r0, r8
 80077dc:	47d0      	blx	sl
 80077de:	3001      	adds	r0, #1
 80077e0:	d09b      	beq.n	800771a <_printf_i+0x166>
 80077e2:	3501      	adds	r5, #1
 80077e4:	68e3      	ldr	r3, [r4, #12]
 80077e6:	9903      	ldr	r1, [sp, #12]
 80077e8:	1a5b      	subs	r3, r3, r1
 80077ea:	42ab      	cmp	r3, r5
 80077ec:	dcf2      	bgt.n	80077d4 <_printf_i+0x220>
 80077ee:	e7eb      	b.n	80077c8 <_printf_i+0x214>
 80077f0:	2500      	movs	r5, #0
 80077f2:	f104 0619 	add.w	r6, r4, #25
 80077f6:	e7f5      	b.n	80077e4 <_printf_i+0x230>
 80077f8:	0800bb62 	.word	0x0800bb62
 80077fc:	0800bb73 	.word	0x0800bb73

08007800 <siprintf>:
 8007800:	b40e      	push	{r1, r2, r3}
 8007802:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007806:	b500      	push	{lr}
 8007808:	b09c      	sub	sp, #112	; 0x70
 800780a:	ab1d      	add	r3, sp, #116	; 0x74
 800780c:	9002      	str	r0, [sp, #8]
 800780e:	9006      	str	r0, [sp, #24]
 8007810:	9107      	str	r1, [sp, #28]
 8007812:	9104      	str	r1, [sp, #16]
 8007814:	4808      	ldr	r0, [pc, #32]	; (8007838 <siprintf+0x38>)
 8007816:	4909      	ldr	r1, [pc, #36]	; (800783c <siprintf+0x3c>)
 8007818:	f853 2b04 	ldr.w	r2, [r3], #4
 800781c:	9105      	str	r1, [sp, #20]
 800781e:	6800      	ldr	r0, [r0, #0]
 8007820:	a902      	add	r1, sp, #8
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	f001 fb7c 	bl	8008f20 <_svfiprintf_r>
 8007828:	2200      	movs	r2, #0
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	b01c      	add	sp, #112	; 0x70
 8007830:	f85d eb04 	ldr.w	lr, [sp], #4
 8007834:	b003      	add	sp, #12
 8007836:	4770      	bx	lr
 8007838:	2000000c 	.word	0x2000000c
 800783c:	ffff0208 	.word	0xffff0208

08007840 <quorem>:
 8007840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	6903      	ldr	r3, [r0, #16]
 8007846:	690c      	ldr	r4, [r1, #16]
 8007848:	4607      	mov	r7, r0
 800784a:	42a3      	cmp	r3, r4
 800784c:	f2c0 8082 	blt.w	8007954 <quorem+0x114>
 8007850:	3c01      	subs	r4, #1
 8007852:	f100 0514 	add.w	r5, r0, #20
 8007856:	f101 0814 	add.w	r8, r1, #20
 800785a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007868:	3301      	adds	r3, #1
 800786a:	429a      	cmp	r2, r3
 800786c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007870:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007878:	d331      	bcc.n	80078de <quorem+0x9e>
 800787a:	f04f 0e00 	mov.w	lr, #0
 800787e:	4640      	mov	r0, r8
 8007880:	46ac      	mov	ip, r5
 8007882:	46f2      	mov	sl, lr
 8007884:	f850 2b04 	ldr.w	r2, [r0], #4
 8007888:	b293      	uxth	r3, r2
 800788a:	fb06 e303 	mla	r3, r6, r3, lr
 800788e:	0c12      	lsrs	r2, r2, #16
 8007890:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007894:	b29b      	uxth	r3, r3
 8007896:	fb06 e202 	mla	r2, r6, r2, lr
 800789a:	ebaa 0303 	sub.w	r3, sl, r3
 800789e:	f8dc a000 	ldr.w	sl, [ip]
 80078a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078a6:	fa1f fa8a 	uxth.w	sl, sl
 80078aa:	4453      	add	r3, sl
 80078ac:	f8dc a000 	ldr.w	sl, [ip]
 80078b0:	b292      	uxth	r2, r2
 80078b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078c0:	4581      	cmp	r9, r0
 80078c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078c6:	f84c 3b04 	str.w	r3, [ip], #4
 80078ca:	d2db      	bcs.n	8007884 <quorem+0x44>
 80078cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80078d0:	b92b      	cbnz	r3, 80078de <quorem+0x9e>
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	429d      	cmp	r5, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	d32f      	bcc.n	800793c <quorem+0xfc>
 80078dc:	613c      	str	r4, [r7, #16]
 80078de:	4638      	mov	r0, r7
 80078e0:	f001 f8ce 	bl	8008a80 <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	db25      	blt.n	8007934 <quorem+0xf4>
 80078e8:	4628      	mov	r0, r5
 80078ea:	f04f 0c00 	mov.w	ip, #0
 80078ee:	3601      	adds	r6, #1
 80078f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80078f4:	f8d0 e000 	ldr.w	lr, [r0]
 80078f8:	b28b      	uxth	r3, r1
 80078fa:	ebac 0303 	sub.w	r3, ip, r3
 80078fe:	fa1f f28e 	uxth.w	r2, lr
 8007902:	4413      	add	r3, r2
 8007904:	0c0a      	lsrs	r2, r1, #16
 8007906:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800790a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800790e:	b29b      	uxth	r3, r3
 8007910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007914:	45c1      	cmp	r9, r8
 8007916:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800791a:	f840 3b04 	str.w	r3, [r0], #4
 800791e:	d2e7      	bcs.n	80078f0 <quorem+0xb0>
 8007920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007924:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007928:	b922      	cbnz	r2, 8007934 <quorem+0xf4>
 800792a:	3b04      	subs	r3, #4
 800792c:	429d      	cmp	r5, r3
 800792e:	461a      	mov	r2, r3
 8007930:	d30a      	bcc.n	8007948 <quorem+0x108>
 8007932:	613c      	str	r4, [r7, #16]
 8007934:	4630      	mov	r0, r6
 8007936:	b003      	add	sp, #12
 8007938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	3b04      	subs	r3, #4
 8007940:	2a00      	cmp	r2, #0
 8007942:	d1cb      	bne.n	80078dc <quorem+0x9c>
 8007944:	3c01      	subs	r4, #1
 8007946:	e7c6      	b.n	80078d6 <quorem+0x96>
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	3b04      	subs	r3, #4
 800794c:	2a00      	cmp	r2, #0
 800794e:	d1f0      	bne.n	8007932 <quorem+0xf2>
 8007950:	3c01      	subs	r4, #1
 8007952:	e7eb      	b.n	800792c <quorem+0xec>
 8007954:	2000      	movs	r0, #0
 8007956:	e7ee      	b.n	8007936 <quorem+0xf6>

08007958 <_dtoa_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	4616      	mov	r6, r2
 800795e:	461f      	mov	r7, r3
 8007960:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007962:	b099      	sub	sp, #100	; 0x64
 8007964:	4605      	mov	r5, r0
 8007966:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800796a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800796e:	b974      	cbnz	r4, 800798e <_dtoa_r+0x36>
 8007970:	2010      	movs	r0, #16
 8007972:	f000 fde3 	bl	800853c <malloc>
 8007976:	4602      	mov	r2, r0
 8007978:	6268      	str	r0, [r5, #36]	; 0x24
 800797a:	b920      	cbnz	r0, 8007986 <_dtoa_r+0x2e>
 800797c:	21ea      	movs	r1, #234	; 0xea
 800797e:	4ba8      	ldr	r3, [pc, #672]	; (8007c20 <_dtoa_r+0x2c8>)
 8007980:	48a8      	ldr	r0, [pc, #672]	; (8007c24 <_dtoa_r+0x2cc>)
 8007982:	f001 fbdd 	bl	8009140 <__assert_func>
 8007986:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800798a:	6004      	str	r4, [r0, #0]
 800798c:	60c4      	str	r4, [r0, #12]
 800798e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007990:	6819      	ldr	r1, [r3, #0]
 8007992:	b151      	cbz	r1, 80079aa <_dtoa_r+0x52>
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	2301      	movs	r3, #1
 8007998:	4093      	lsls	r3, r2
 800799a:	604a      	str	r2, [r1, #4]
 800799c:	608b      	str	r3, [r1, #8]
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 fe30 	bl	8008604 <_Bfree>
 80079a4:	2200      	movs	r2, #0
 80079a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	1e3b      	subs	r3, r7, #0
 80079ac:	bfaf      	iteee	ge
 80079ae:	2300      	movge	r3, #0
 80079b0:	2201      	movlt	r2, #1
 80079b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079b6:	9305      	strlt	r3, [sp, #20]
 80079b8:	bfa8      	it	ge
 80079ba:	f8c8 3000 	strge.w	r3, [r8]
 80079be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80079c2:	4b99      	ldr	r3, [pc, #612]	; (8007c28 <_dtoa_r+0x2d0>)
 80079c4:	bfb8      	it	lt
 80079c6:	f8c8 2000 	strlt.w	r2, [r8]
 80079ca:	ea33 0309 	bics.w	r3, r3, r9
 80079ce:	d119      	bne.n	8007a04 <_dtoa_r+0xac>
 80079d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80079d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079dc:	4333      	orrs	r3, r6
 80079de:	f000 857f 	beq.w	80084e0 <_dtoa_r+0xb88>
 80079e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079e4:	b953      	cbnz	r3, 80079fc <_dtoa_r+0xa4>
 80079e6:	4b91      	ldr	r3, [pc, #580]	; (8007c2c <_dtoa_r+0x2d4>)
 80079e8:	e022      	b.n	8007a30 <_dtoa_r+0xd8>
 80079ea:	4b91      	ldr	r3, [pc, #580]	; (8007c30 <_dtoa_r+0x2d8>)
 80079ec:	9303      	str	r3, [sp, #12]
 80079ee:	3308      	adds	r3, #8
 80079f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	9803      	ldr	r0, [sp, #12]
 80079f6:	b019      	add	sp, #100	; 0x64
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	4b8b      	ldr	r3, [pc, #556]	; (8007c2c <_dtoa_r+0x2d4>)
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	3303      	adds	r3, #3
 8007a02:	e7f5      	b.n	80079f0 <_dtoa_r+0x98>
 8007a04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	f7f8 ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007a18:	4680      	mov	r8, r0
 8007a1a:	b158      	cbz	r0, 8007a34 <_dtoa_r+0xdc>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8558 	beq.w	80084da <_dtoa_r+0xb82>
 8007a2a:	4882      	ldr	r0, [pc, #520]	; (8007c34 <_dtoa_r+0x2dc>)
 8007a2c:	6018      	str	r0, [r3, #0]
 8007a2e:	1e43      	subs	r3, r0, #1
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	e7df      	b.n	80079f4 <_dtoa_r+0x9c>
 8007a34:	ab16      	add	r3, sp, #88	; 0x58
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	ab17      	add	r3, sp, #92	; 0x5c
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a42:	f001 f8c5 	bl	8008bd0 <__d2b>
 8007a46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007a4a:	4683      	mov	fp, r0
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	d07f      	beq.n	8007b50 <_dtoa_r+0x1f8>
 8007a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a56:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a5e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007a62:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007a66:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4b72      	ldr	r3, [pc, #456]	; (8007c38 <_dtoa_r+0x2e0>)
 8007a6e:	f7f8 fb7b 	bl	8000168 <__aeabi_dsub>
 8007a72:	a365      	add	r3, pc, #404	; (adr r3, 8007c08 <_dtoa_r+0x2b0>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f7f8 fd2e 	bl	80004d8 <__aeabi_dmul>
 8007a7c:	a364      	add	r3, pc, #400	; (adr r3, 8007c10 <_dtoa_r+0x2b8>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fb73 	bl	800016c <__adddf3>
 8007a86:	4606      	mov	r6, r0
 8007a88:	4620      	mov	r0, r4
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	f7f8 fcba 	bl	8000404 <__aeabi_i2d>
 8007a90:	a361      	add	r3, pc, #388	; (adr r3, 8007c18 <_dtoa_r+0x2c0>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 fd1f 	bl	80004d8 <__aeabi_dmul>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	f7f8 fb63 	bl	800016c <__adddf3>
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	f7f8 ffc5 	bl	8000a38 <__aeabi_d2iz>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	f7f8 ff80 	bl	80009bc <__aeabi_dcmplt>
 8007abc:	b148      	cbz	r0, 8007ad2 <_dtoa_r+0x17a>
 8007abe:	4650      	mov	r0, sl
 8007ac0:	f7f8 fca0 	bl	8000404 <__aeabi_i2d>
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	f7f8 ff6e 	bl	80009a8 <__aeabi_dcmpeq>
 8007acc:	b908      	cbnz	r0, 8007ad2 <_dtoa_r+0x17a>
 8007ace:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ad2:	f1ba 0f16 	cmp.w	sl, #22
 8007ad6:	d858      	bhi.n	8007b8a <_dtoa_r+0x232>
 8007ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007adc:	4b57      	ldr	r3, [pc, #348]	; (8007c3c <_dtoa_r+0x2e4>)
 8007ade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 ff69 	bl	80009bc <__aeabi_dcmplt>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d04f      	beq.n	8007b8e <_dtoa_r+0x236>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007af4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007af6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007af8:	1b1c      	subs	r4, r3, r4
 8007afa:	1e63      	subs	r3, r4, #1
 8007afc:	9309      	str	r3, [sp, #36]	; 0x24
 8007afe:	bf49      	itett	mi
 8007b00:	f1c4 0301 	rsbmi	r3, r4, #1
 8007b04:	2300      	movpl	r3, #0
 8007b06:	9306      	strmi	r3, [sp, #24]
 8007b08:	2300      	movmi	r3, #0
 8007b0a:	bf54      	ite	pl
 8007b0c:	9306      	strpl	r3, [sp, #24]
 8007b0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007b10:	f1ba 0f00 	cmp.w	sl, #0
 8007b14:	db3d      	blt.n	8007b92 <_dtoa_r+0x23a>
 8007b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007b1c:	4453      	add	r3, sl
 8007b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b20:	2300      	movs	r3, #0
 8007b22:	930a      	str	r3, [sp, #40]	; 0x28
 8007b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b26:	2b09      	cmp	r3, #9
 8007b28:	f200 808c 	bhi.w	8007c44 <_dtoa_r+0x2ec>
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	bfc4      	itt	gt
 8007b30:	3b04      	subgt	r3, #4
 8007b32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007b34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b36:	bfc8      	it	gt
 8007b38:	2400      	movgt	r4, #0
 8007b3a:	f1a3 0302 	sub.w	r3, r3, #2
 8007b3e:	bfd8      	it	le
 8007b40:	2401      	movle	r4, #1
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	f200 808a 	bhi.w	8007c5c <_dtoa_r+0x304>
 8007b48:	e8df f003 	tbb	[pc, r3]
 8007b4c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007b50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007b54:	441c      	add	r4, r3
 8007b56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	bfc3      	ittte	gt
 8007b5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b62:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007b66:	fa09 f303 	lslgt.w	r3, r9, r3
 8007b6a:	f1c3 0320 	rsble	r3, r3, #32
 8007b6e:	bfc6      	itte	gt
 8007b70:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b74:	4318      	orrgt	r0, r3
 8007b76:	fa06 f003 	lslle.w	r0, r6, r3
 8007b7a:	f7f8 fc33 	bl	80003e4 <__aeabi_ui2d>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007b84:	3c01      	subs	r4, #1
 8007b86:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b88:	e76f      	b.n	8007a6a <_dtoa_r+0x112>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e7b2      	b.n	8007af4 <_dtoa_r+0x19c>
 8007b8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b90:	e7b1      	b.n	8007af6 <_dtoa_r+0x19e>
 8007b92:	9b06      	ldr	r3, [sp, #24]
 8007b94:	eba3 030a 	sub.w	r3, r3, sl
 8007b98:	9306      	str	r3, [sp, #24]
 8007b9a:	f1ca 0300 	rsb	r3, sl, #0
 8007b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	930e      	str	r3, [sp, #56]	; 0x38
 8007ba4:	e7be      	b.n	8007b24 <_dtoa_r+0x1cc>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc58      	bgt.n	8007c62 <_dtoa_r+0x30a>
 8007bb0:	f04f 0901 	mov.w	r9, #1
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	f8cd 9020 	str.w	r9, [sp, #32]
 8007bba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007bc2:	6042      	str	r2, [r0, #4]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	f102 0614 	add.w	r6, r2, #20
 8007bca:	429e      	cmp	r6, r3
 8007bcc:	6841      	ldr	r1, [r0, #4]
 8007bce:	d94e      	bls.n	8007c6e <_dtoa_r+0x316>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 fcd7 	bl	8008584 <_Balloc>
 8007bd6:	9003      	str	r0, [sp, #12]
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d14c      	bne.n	8007c76 <_dtoa_r+0x31e>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007be2:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <_dtoa_r+0x2e8>)
 8007be4:	e6cc      	b.n	8007980 <_dtoa_r+0x28>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e7de      	b.n	8007ba8 <_dtoa_r+0x250>
 8007bea:	2300      	movs	r3, #0
 8007bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bf0:	eb0a 0903 	add.w	r9, sl, r3
 8007bf4:	f109 0301 	add.w	r3, r9, #1
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	9308      	str	r3, [sp, #32]
 8007bfc:	bfb8      	it	lt
 8007bfe:	2301      	movlt	r3, #1
 8007c00:	e7dd      	b.n	8007bbe <_dtoa_r+0x266>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e7f2      	b.n	8007bec <_dtoa_r+0x294>
 8007c06:	bf00      	nop
 8007c08:	636f4361 	.word	0x636f4361
 8007c0c:	3fd287a7 	.word	0x3fd287a7
 8007c10:	8b60c8b3 	.word	0x8b60c8b3
 8007c14:	3fc68a28 	.word	0x3fc68a28
 8007c18:	509f79fb 	.word	0x509f79fb
 8007c1c:	3fd34413 	.word	0x3fd34413
 8007c20:	0800bb91 	.word	0x0800bb91
 8007c24:	0800bba8 	.word	0x0800bba8
 8007c28:	7ff00000 	.word	0x7ff00000
 8007c2c:	0800bb8d 	.word	0x0800bb8d
 8007c30:	0800bb84 	.word	0x0800bb84
 8007c34:	0800bb61 	.word	0x0800bb61
 8007c38:	3ff80000 	.word	0x3ff80000
 8007c3c:	0800bc98 	.word	0x0800bc98
 8007c40:	0800bc03 	.word	0x0800bc03
 8007c44:	2401      	movs	r4, #1
 8007c46:	2300      	movs	r3, #0
 8007c48:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c4a:	9322      	str	r3, [sp, #136]	; 0x88
 8007c4c:	f04f 39ff 	mov.w	r9, #4294967295
 8007c50:	2200      	movs	r2, #0
 8007c52:	2312      	movs	r3, #18
 8007c54:	f8cd 9020 	str.w	r9, [sp, #32]
 8007c58:	9223      	str	r2, [sp, #140]	; 0x8c
 8007c5a:	e7b0      	b.n	8007bbe <_dtoa_r+0x266>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c60:	e7f4      	b.n	8007c4c <_dtoa_r+0x2f4>
 8007c62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007c66:	464b      	mov	r3, r9
 8007c68:	f8cd 9020 	str.w	r9, [sp, #32]
 8007c6c:	e7a7      	b.n	8007bbe <_dtoa_r+0x266>
 8007c6e:	3101      	adds	r1, #1
 8007c70:	6041      	str	r1, [r0, #4]
 8007c72:	0052      	lsls	r2, r2, #1
 8007c74:	e7a7      	b.n	8007bc6 <_dtoa_r+0x26e>
 8007c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c78:	9a03      	ldr	r2, [sp, #12]
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	2b0e      	cmp	r3, #14
 8007c80:	f200 80a8 	bhi.w	8007dd4 <_dtoa_r+0x47c>
 8007c84:	2c00      	cmp	r4, #0
 8007c86:	f000 80a5 	beq.w	8007dd4 <_dtoa_r+0x47c>
 8007c8a:	f1ba 0f00 	cmp.w	sl, #0
 8007c8e:	dd34      	ble.n	8007cfa <_dtoa_r+0x3a2>
 8007c90:	4a9a      	ldr	r2, [pc, #616]	; (8007efc <_dtoa_r+0x5a4>)
 8007c92:	f00a 030f 	and.w	r3, sl, #15
 8007c96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c9a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007c9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ca2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ca6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007caa:	d016      	beq.n	8007cda <_dtoa_r+0x382>
 8007cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cb0:	4b93      	ldr	r3, [pc, #588]	; (8007f00 <_dtoa_r+0x5a8>)
 8007cb2:	2703      	movs	r7, #3
 8007cb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cb8:	f7f8 fd38 	bl	800072c <__aeabi_ddiv>
 8007cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cc0:	f004 040f 	and.w	r4, r4, #15
 8007cc4:	4e8e      	ldr	r6, [pc, #568]	; (8007f00 <_dtoa_r+0x5a8>)
 8007cc6:	b954      	cbnz	r4, 8007cde <_dtoa_r+0x386>
 8007cc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd0:	f7f8 fd2c 	bl	800072c <__aeabi_ddiv>
 8007cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cd8:	e029      	b.n	8007d2e <_dtoa_r+0x3d6>
 8007cda:	2702      	movs	r7, #2
 8007cdc:	e7f2      	b.n	8007cc4 <_dtoa_r+0x36c>
 8007cde:	07e1      	lsls	r1, r4, #31
 8007ce0:	d508      	bpl.n	8007cf4 <_dtoa_r+0x39c>
 8007ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ce6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007cea:	f7f8 fbf5 	bl	80004d8 <__aeabi_dmul>
 8007cee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cf2:	3701      	adds	r7, #1
 8007cf4:	1064      	asrs	r4, r4, #1
 8007cf6:	3608      	adds	r6, #8
 8007cf8:	e7e5      	b.n	8007cc6 <_dtoa_r+0x36e>
 8007cfa:	f000 80a5 	beq.w	8007e48 <_dtoa_r+0x4f0>
 8007cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d02:	f1ca 0400 	rsb	r4, sl, #0
 8007d06:	4b7d      	ldr	r3, [pc, #500]	; (8007efc <_dtoa_r+0x5a4>)
 8007d08:	f004 020f 	and.w	r2, r4, #15
 8007d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fbe0 	bl	80004d8 <__aeabi_dmul>
 8007d18:	2702      	movs	r7, #2
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d20:	4e77      	ldr	r6, [pc, #476]	; (8007f00 <_dtoa_r+0x5a8>)
 8007d22:	1124      	asrs	r4, r4, #4
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	f040 8084 	bne.w	8007e32 <_dtoa_r+0x4da>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1d2      	bne.n	8007cd4 <_dtoa_r+0x37c>
 8007d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 808b 	beq.w	8007e4c <_dtoa_r+0x4f4>
 8007d36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d42:	2200      	movs	r2, #0
 8007d44:	4b6f      	ldr	r3, [pc, #444]	; (8007f04 <_dtoa_r+0x5ac>)
 8007d46:	f7f8 fe39 	bl	80009bc <__aeabi_dcmplt>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d07e      	beq.n	8007e4c <_dtoa_r+0x4f4>
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d07b      	beq.n	8007e4c <_dtoa_r+0x4f4>
 8007d54:	f1b9 0f00 	cmp.w	r9, #0
 8007d58:	dd38      	ble.n	8007dcc <_dtoa_r+0x474>
 8007d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4b69      	ldr	r3, [pc, #420]	; (8007f08 <_dtoa_r+0x5b0>)
 8007d62:	f7f8 fbb9 	bl	80004d8 <__aeabi_dmul>
 8007d66:	464c      	mov	r4, r9
 8007d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007d70:	3701      	adds	r7, #1
 8007d72:	4638      	mov	r0, r7
 8007d74:	f7f8 fb46 	bl	8000404 <__aeabi_i2d>
 8007d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d7c:	f7f8 fbac 	bl	80004d8 <__aeabi_dmul>
 8007d80:	2200      	movs	r2, #0
 8007d82:	4b62      	ldr	r3, [pc, #392]	; (8007f0c <_dtoa_r+0x5b4>)
 8007d84:	f7f8 f9f2 	bl	800016c <__adddf3>
 8007d88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007d8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d90:	9611      	str	r6, [sp, #68]	; 0x44
 8007d92:	2c00      	cmp	r4, #0
 8007d94:	d15d      	bne.n	8007e52 <_dtoa_r+0x4fa>
 8007d96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4b5c      	ldr	r3, [pc, #368]	; (8007f10 <_dtoa_r+0x5b8>)
 8007d9e:	f7f8 f9e3 	bl	8000168 <__aeabi_dsub>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007daa:	4633      	mov	r3, r6
 8007dac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dae:	f7f8 fe23 	bl	80009f8 <__aeabi_dcmpgt>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	f040 829c 	bne.w	80082f0 <_dtoa_r+0x998>
 8007db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007dc2:	f7f8 fdfb 	bl	80009bc <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f040 8290 	bne.w	80082ec <_dtoa_r+0x994>
 8007dcc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007dd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f2c0 8152 	blt.w	8008080 <_dtoa_r+0x728>
 8007ddc:	f1ba 0f0e 	cmp.w	sl, #14
 8007de0:	f300 814e 	bgt.w	8008080 <_dtoa_r+0x728>
 8007de4:	4b45      	ldr	r3, [pc, #276]	; (8007efc <_dtoa_r+0x5a4>)
 8007de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007dea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007df2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f280 80db 	bge.w	8007fb0 <_dtoa_r+0x658>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f300 80d7 	bgt.w	8007fb0 <_dtoa_r+0x658>
 8007e02:	f040 8272 	bne.w	80082ea <_dtoa_r+0x992>
 8007e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	4b40      	ldr	r3, [pc, #256]	; (8007f10 <_dtoa_r+0x5b8>)
 8007e0e:	f7f8 fb63 	bl	80004d8 <__aeabi_dmul>
 8007e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e16:	f7f8 fde5 	bl	80009e4 <__aeabi_dcmpge>
 8007e1a:	9c08      	ldr	r4, [sp, #32]
 8007e1c:	4626      	mov	r6, r4
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f040 8248 	bne.w	80082b4 <_dtoa_r+0x95c>
 8007e24:	2331      	movs	r3, #49	; 0x31
 8007e26:	9f03      	ldr	r7, [sp, #12]
 8007e28:	f10a 0a01 	add.w	sl, sl, #1
 8007e2c:	f807 3b01 	strb.w	r3, [r7], #1
 8007e30:	e244      	b.n	80082bc <_dtoa_r+0x964>
 8007e32:	07e2      	lsls	r2, r4, #31
 8007e34:	d505      	bpl.n	8007e42 <_dtoa_r+0x4ea>
 8007e36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e3a:	f7f8 fb4d 	bl	80004d8 <__aeabi_dmul>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	3701      	adds	r7, #1
 8007e42:	1064      	asrs	r4, r4, #1
 8007e44:	3608      	adds	r6, #8
 8007e46:	e76d      	b.n	8007d24 <_dtoa_r+0x3cc>
 8007e48:	2702      	movs	r7, #2
 8007e4a:	e770      	b.n	8007d2e <_dtoa_r+0x3d6>
 8007e4c:	46d0      	mov	r8, sl
 8007e4e:	9c08      	ldr	r4, [sp, #32]
 8007e50:	e78f      	b.n	8007d72 <_dtoa_r+0x41a>
 8007e52:	9903      	ldr	r1, [sp, #12]
 8007e54:	4b29      	ldr	r3, [pc, #164]	; (8007efc <_dtoa_r+0x5a4>)
 8007e56:	4421      	add	r1, r4
 8007e58:	9112      	str	r1, [sp, #72]	; 0x48
 8007e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	d055      	beq.n	8007f18 <_dtoa_r+0x5c0>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	4929      	ldr	r1, [pc, #164]	; (8007f14 <_dtoa_r+0x5bc>)
 8007e70:	f7f8 fc5c 	bl	800072c <__aeabi_ddiv>
 8007e74:	463b      	mov	r3, r7
 8007e76:	4632      	mov	r2, r6
 8007e78:	f7f8 f976 	bl	8000168 <__aeabi_dsub>
 8007e7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e80:	9f03      	ldr	r7, [sp, #12]
 8007e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e86:	f7f8 fdd7 	bl	8000a38 <__aeabi_d2iz>
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	f7f8 faba 	bl	8000404 <__aeabi_i2d>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e98:	f7f8 f966 	bl	8000168 <__aeabi_dsub>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	3430      	adds	r4, #48	; 0x30
 8007ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007eaa:	f807 4b01 	strb.w	r4, [r7], #1
 8007eae:	f7f8 fd85 	bl	80009bc <__aeabi_dcmplt>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d174      	bne.n	8007fa0 <_dtoa_r+0x648>
 8007eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eba:	2000      	movs	r0, #0
 8007ebc:	4911      	ldr	r1, [pc, #68]	; (8007f04 <_dtoa_r+0x5ac>)
 8007ebe:	f7f8 f953 	bl	8000168 <__aeabi_dsub>
 8007ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ec6:	f7f8 fd79 	bl	80009bc <__aeabi_dcmplt>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f040 80b7 	bne.w	800803e <_dtoa_r+0x6e6>
 8007ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ed2:	429f      	cmp	r7, r3
 8007ed4:	f43f af7a 	beq.w	8007dcc <_dtoa_r+0x474>
 8007ed8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007edc:	2200      	movs	r2, #0
 8007ede:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <_dtoa_r+0x5b0>)
 8007ee0:	f7f8 fafa 	bl	80004d8 <__aeabi_dmul>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eee:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <_dtoa_r+0x5b0>)
 8007ef0:	f7f8 faf2 	bl	80004d8 <__aeabi_dmul>
 8007ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ef8:	e7c3      	b.n	8007e82 <_dtoa_r+0x52a>
 8007efa:	bf00      	nop
 8007efc:	0800bc98 	.word	0x0800bc98
 8007f00:	0800bc70 	.word	0x0800bc70
 8007f04:	3ff00000 	.word	0x3ff00000
 8007f08:	40240000 	.word	0x40240000
 8007f0c:	401c0000 	.word	0x401c0000
 8007f10:	40140000 	.word	0x40140000
 8007f14:	3fe00000 	.word	0x3fe00000
 8007f18:	4630      	mov	r0, r6
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	f7f8 fadc 	bl	80004d8 <__aeabi_dmul>
 8007f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f26:	9c03      	ldr	r4, [sp, #12]
 8007f28:	9314      	str	r3, [sp, #80]	; 0x50
 8007f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f2e:	f7f8 fd83 	bl	8000a38 <__aeabi_d2iz>
 8007f32:	9015      	str	r0, [sp, #84]	; 0x54
 8007f34:	f7f8 fa66 	bl	8000404 <__aeabi_i2d>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f40:	f7f8 f912 	bl	8000168 <__aeabi_dsub>
 8007f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f46:	4606      	mov	r6, r0
 8007f48:	3330      	adds	r3, #48	; 0x30
 8007f4a:	f804 3b01 	strb.w	r3, [r4], #1
 8007f4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f50:	460f      	mov	r7, r1
 8007f52:	429c      	cmp	r4, r3
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	d124      	bne.n	8007fa4 <_dtoa_r+0x64c>
 8007f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f5e:	4bb0      	ldr	r3, [pc, #704]	; (8008220 <_dtoa_r+0x8c8>)
 8007f60:	f7f8 f904 	bl	800016c <__adddf3>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4630      	mov	r0, r6
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	f7f8 fd44 	bl	80009f8 <__aeabi_dcmpgt>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d163      	bne.n	800803c <_dtoa_r+0x6e4>
 8007f74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f78:	2000      	movs	r0, #0
 8007f7a:	49a9      	ldr	r1, [pc, #676]	; (8008220 <_dtoa_r+0x8c8>)
 8007f7c:	f7f8 f8f4 	bl	8000168 <__aeabi_dsub>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 fd18 	bl	80009bc <__aeabi_dcmplt>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f43f af1d 	beq.w	8007dcc <_dtoa_r+0x474>
 8007f92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007f94:	1e7b      	subs	r3, r7, #1
 8007f96:	9314      	str	r3, [sp, #80]	; 0x50
 8007f98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007f9c:	2b30      	cmp	r3, #48	; 0x30
 8007f9e:	d0f8      	beq.n	8007f92 <_dtoa_r+0x63a>
 8007fa0:	46c2      	mov	sl, r8
 8007fa2:	e03b      	b.n	800801c <_dtoa_r+0x6c4>
 8007fa4:	4b9f      	ldr	r3, [pc, #636]	; (8008224 <_dtoa_r+0x8cc>)
 8007fa6:	f7f8 fa97 	bl	80004d8 <__aeabi_dmul>
 8007faa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fae:	e7bc      	b.n	8007f2a <_dtoa_r+0x5d2>
 8007fb0:	9f03      	ldr	r7, [sp, #12]
 8007fb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 fbb5 	bl	800072c <__aeabi_ddiv>
 8007fc2:	f7f8 fd39 	bl	8000a38 <__aeabi_d2iz>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	f7f8 fa1c 	bl	8000404 <__aeabi_i2d>
 8007fcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fd0:	f7f8 fa82 	bl	80004d8 <__aeabi_dmul>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 f8c4 	bl	8000168 <__aeabi_dsub>
 8007fe0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007fe4:	f807 6b01 	strb.w	r6, [r7], #1
 8007fe8:	9e03      	ldr	r6, [sp, #12]
 8007fea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007fee:	1bbe      	subs	r6, r7, r6
 8007ff0:	45b4      	cmp	ip, r6
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	d136      	bne.n	8008066 <_dtoa_r+0x70e>
 8007ff8:	f7f8 f8b8 	bl	800016c <__adddf3>
 8007ffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008000:	4680      	mov	r8, r0
 8008002:	4689      	mov	r9, r1
 8008004:	f7f8 fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8008008:	bb58      	cbnz	r0, 8008062 <_dtoa_r+0x70a>
 800800a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8008016:	b108      	cbz	r0, 800801c <_dtoa_r+0x6c4>
 8008018:	07e1      	lsls	r1, r4, #31
 800801a:	d422      	bmi.n	8008062 <_dtoa_r+0x70a>
 800801c:	4628      	mov	r0, r5
 800801e:	4659      	mov	r1, fp
 8008020:	f000 faf0 	bl	8008604 <_Bfree>
 8008024:	2300      	movs	r3, #0
 8008026:	703b      	strb	r3, [r7, #0]
 8008028:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800802a:	f10a 0001 	add.w	r0, sl, #1
 800802e:	6018      	str	r0, [r3, #0]
 8008030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008032:	2b00      	cmp	r3, #0
 8008034:	f43f acde 	beq.w	80079f4 <_dtoa_r+0x9c>
 8008038:	601f      	str	r7, [r3, #0]
 800803a:	e4db      	b.n	80079f4 <_dtoa_r+0x9c>
 800803c:	4627      	mov	r7, r4
 800803e:	463b      	mov	r3, r7
 8008040:	461f      	mov	r7, r3
 8008042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008046:	2a39      	cmp	r2, #57	; 0x39
 8008048:	d107      	bne.n	800805a <_dtoa_r+0x702>
 800804a:	9a03      	ldr	r2, [sp, #12]
 800804c:	429a      	cmp	r2, r3
 800804e:	d1f7      	bne.n	8008040 <_dtoa_r+0x6e8>
 8008050:	2230      	movs	r2, #48	; 0x30
 8008052:	9903      	ldr	r1, [sp, #12]
 8008054:	f108 0801 	add.w	r8, r8, #1
 8008058:	700a      	strb	r2, [r1, #0]
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	3201      	adds	r2, #1
 800805e:	701a      	strb	r2, [r3, #0]
 8008060:	e79e      	b.n	8007fa0 <_dtoa_r+0x648>
 8008062:	46d0      	mov	r8, sl
 8008064:	e7eb      	b.n	800803e <_dtoa_r+0x6e6>
 8008066:	2200      	movs	r2, #0
 8008068:	4b6e      	ldr	r3, [pc, #440]	; (8008224 <_dtoa_r+0x8cc>)
 800806a:	f7f8 fa35 	bl	80004d8 <__aeabi_dmul>
 800806e:	2200      	movs	r2, #0
 8008070:	2300      	movs	r3, #0
 8008072:	4680      	mov	r8, r0
 8008074:	4689      	mov	r9, r1
 8008076:	f7f8 fc97 	bl	80009a8 <__aeabi_dcmpeq>
 800807a:	2800      	cmp	r0, #0
 800807c:	d09b      	beq.n	8007fb6 <_dtoa_r+0x65e>
 800807e:	e7cd      	b.n	800801c <_dtoa_r+0x6c4>
 8008080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008082:	2a00      	cmp	r2, #0
 8008084:	f000 80d0 	beq.w	8008228 <_dtoa_r+0x8d0>
 8008088:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800808a:	2a01      	cmp	r2, #1
 800808c:	f300 80ae 	bgt.w	80081ec <_dtoa_r+0x894>
 8008090:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008092:	2a00      	cmp	r2, #0
 8008094:	f000 80a6 	beq.w	80081e4 <_dtoa_r+0x88c>
 8008098:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800809c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800809e:	9f06      	ldr	r7, [sp, #24]
 80080a0:	9a06      	ldr	r2, [sp, #24]
 80080a2:	2101      	movs	r1, #1
 80080a4:	441a      	add	r2, r3
 80080a6:	9206      	str	r2, [sp, #24]
 80080a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080aa:	4628      	mov	r0, r5
 80080ac:	441a      	add	r2, r3
 80080ae:	9209      	str	r2, [sp, #36]	; 0x24
 80080b0:	f000 fb5e 	bl	8008770 <__i2b>
 80080b4:	4606      	mov	r6, r0
 80080b6:	2f00      	cmp	r7, #0
 80080b8:	dd0c      	ble.n	80080d4 <_dtoa_r+0x77c>
 80080ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	dd09      	ble.n	80080d4 <_dtoa_r+0x77c>
 80080c0:	42bb      	cmp	r3, r7
 80080c2:	bfa8      	it	ge
 80080c4:	463b      	movge	r3, r7
 80080c6:	9a06      	ldr	r2, [sp, #24]
 80080c8:	1aff      	subs	r7, r7, r3
 80080ca:	1ad2      	subs	r2, r2, r3
 80080cc:	9206      	str	r2, [sp, #24]
 80080ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	9309      	str	r3, [sp, #36]	; 0x24
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	b1f3      	cbz	r3, 8008116 <_dtoa_r+0x7be>
 80080d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 80a8 	beq.w	8008230 <_dtoa_r+0x8d8>
 80080e0:	2c00      	cmp	r4, #0
 80080e2:	dd10      	ble.n	8008106 <_dtoa_r+0x7ae>
 80080e4:	4631      	mov	r1, r6
 80080e6:	4622      	mov	r2, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 fbff 	bl	80088ec <__pow5mult>
 80080ee:	465a      	mov	r2, fp
 80080f0:	4601      	mov	r1, r0
 80080f2:	4606      	mov	r6, r0
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 fb51 	bl	800879c <__multiply>
 80080fa:	4680      	mov	r8, r0
 80080fc:	4659      	mov	r1, fp
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fa80 	bl	8008604 <_Bfree>
 8008104:	46c3      	mov	fp, r8
 8008106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008108:	1b1a      	subs	r2, r3, r4
 800810a:	d004      	beq.n	8008116 <_dtoa_r+0x7be>
 800810c:	4659      	mov	r1, fp
 800810e:	4628      	mov	r0, r5
 8008110:	f000 fbec 	bl	80088ec <__pow5mult>
 8008114:	4683      	mov	fp, r0
 8008116:	2101      	movs	r1, #1
 8008118:	4628      	mov	r0, r5
 800811a:	f000 fb29 	bl	8008770 <__i2b>
 800811e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008120:	4604      	mov	r4, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	f340 8086 	ble.w	8008234 <_dtoa_r+0x8dc>
 8008128:	461a      	mov	r2, r3
 800812a:	4601      	mov	r1, r0
 800812c:	4628      	mov	r0, r5
 800812e:	f000 fbdd 	bl	80088ec <__pow5mult>
 8008132:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008134:	4604      	mov	r4, r0
 8008136:	2b01      	cmp	r3, #1
 8008138:	dd7f      	ble.n	800823a <_dtoa_r+0x8e2>
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008144:	6918      	ldr	r0, [r3, #16]
 8008146:	f000 fac5 	bl	80086d4 <__hi0bits>
 800814a:	f1c0 0020 	rsb	r0, r0, #32
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	4418      	add	r0, r3
 8008152:	f010 001f 	ands.w	r0, r0, #31
 8008156:	f000 8092 	beq.w	800827e <_dtoa_r+0x926>
 800815a:	f1c0 0320 	rsb	r3, r0, #32
 800815e:	2b04      	cmp	r3, #4
 8008160:	f340 808a 	ble.w	8008278 <_dtoa_r+0x920>
 8008164:	f1c0 001c 	rsb	r0, r0, #28
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	4407      	add	r7, r0
 800816c:	4403      	add	r3, r0
 800816e:	9306      	str	r3, [sp, #24]
 8008170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008172:	4403      	add	r3, r0
 8008174:	9309      	str	r3, [sp, #36]	; 0x24
 8008176:	9b06      	ldr	r3, [sp, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dd05      	ble.n	8008188 <_dtoa_r+0x830>
 800817c:	4659      	mov	r1, fp
 800817e:	461a      	mov	r2, r3
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fc0d 	bl	80089a0 <__lshift>
 8008186:	4683      	mov	fp, r0
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	dd05      	ble.n	800819a <_dtoa_r+0x842>
 800818e:	4621      	mov	r1, r4
 8008190:	461a      	mov	r2, r3
 8008192:	4628      	mov	r0, r5
 8008194:	f000 fc04 	bl	80089a0 <__lshift>
 8008198:	4604      	mov	r4, r0
 800819a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d070      	beq.n	8008282 <_dtoa_r+0x92a>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4658      	mov	r0, fp
 80081a4:	f000 fc6c 	bl	8008a80 <__mcmp>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	da6a      	bge.n	8008282 <_dtoa_r+0x92a>
 80081ac:	2300      	movs	r3, #0
 80081ae:	4659      	mov	r1, fp
 80081b0:	220a      	movs	r2, #10
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 fa48 	bl	8008648 <__multadd>
 80081b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ba:	4683      	mov	fp, r0
 80081bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8194 	beq.w	80084ee <_dtoa_r+0xb96>
 80081c6:	4631      	mov	r1, r6
 80081c8:	2300      	movs	r3, #0
 80081ca:	220a      	movs	r2, #10
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 fa3b 	bl	8008648 <__multadd>
 80081d2:	f1b9 0f00 	cmp.w	r9, #0
 80081d6:	4606      	mov	r6, r0
 80081d8:	f300 8093 	bgt.w	8008302 <_dtoa_r+0x9aa>
 80081dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081de:	2b02      	cmp	r3, #2
 80081e0:	dc57      	bgt.n	8008292 <_dtoa_r+0x93a>
 80081e2:	e08e      	b.n	8008302 <_dtoa_r+0x9aa>
 80081e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081ea:	e757      	b.n	800809c <_dtoa_r+0x744>
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	1e5c      	subs	r4, r3, #1
 80081f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f2:	42a3      	cmp	r3, r4
 80081f4:	bfb7      	itett	lt
 80081f6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081f8:	1b1c      	subge	r4, r3, r4
 80081fa:	1ae2      	sublt	r2, r4, r3
 80081fc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80081fe:	bfbe      	ittt	lt
 8008200:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008202:	189b      	addlt	r3, r3, r2
 8008204:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008206:	9b08      	ldr	r3, [sp, #32]
 8008208:	bfb8      	it	lt
 800820a:	2400      	movlt	r4, #0
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfbb      	ittet	lt
 8008210:	9b06      	ldrlt	r3, [sp, #24]
 8008212:	9a08      	ldrlt	r2, [sp, #32]
 8008214:	9f06      	ldrge	r7, [sp, #24]
 8008216:	1a9f      	sublt	r7, r3, r2
 8008218:	bfac      	ite	ge
 800821a:	9b08      	ldrge	r3, [sp, #32]
 800821c:	2300      	movlt	r3, #0
 800821e:	e73f      	b.n	80080a0 <_dtoa_r+0x748>
 8008220:	3fe00000 	.word	0x3fe00000
 8008224:	40240000 	.word	0x40240000
 8008228:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800822a:	9f06      	ldr	r7, [sp, #24]
 800822c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800822e:	e742      	b.n	80080b6 <_dtoa_r+0x75e>
 8008230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008232:	e76b      	b.n	800810c <_dtoa_r+0x7b4>
 8008234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008236:	2b01      	cmp	r3, #1
 8008238:	dc19      	bgt.n	800826e <_dtoa_r+0x916>
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	b9bb      	cbnz	r3, 800826e <_dtoa_r+0x916>
 800823e:	9b05      	ldr	r3, [sp, #20]
 8008240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008244:	b99b      	cbnz	r3, 800826e <_dtoa_r+0x916>
 8008246:	9b05      	ldr	r3, [sp, #20]
 8008248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800824c:	0d1b      	lsrs	r3, r3, #20
 800824e:	051b      	lsls	r3, r3, #20
 8008250:	b183      	cbz	r3, 8008274 <_dtoa_r+0x91c>
 8008252:	f04f 0801 	mov.w	r8, #1
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	3301      	adds	r3, #1
 800825a:	9306      	str	r3, [sp, #24]
 800825c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825e:	3301      	adds	r3, #1
 8008260:	9309      	str	r3, [sp, #36]	; 0x24
 8008262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008264:	2b00      	cmp	r3, #0
 8008266:	f47f af6a 	bne.w	800813e <_dtoa_r+0x7e6>
 800826a:	2001      	movs	r0, #1
 800826c:	e76f      	b.n	800814e <_dtoa_r+0x7f6>
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	e7f6      	b.n	8008262 <_dtoa_r+0x90a>
 8008274:	4698      	mov	r8, r3
 8008276:	e7f4      	b.n	8008262 <_dtoa_r+0x90a>
 8008278:	f43f af7d 	beq.w	8008176 <_dtoa_r+0x81e>
 800827c:	4618      	mov	r0, r3
 800827e:	301c      	adds	r0, #28
 8008280:	e772      	b.n	8008168 <_dtoa_r+0x810>
 8008282:	9b08      	ldr	r3, [sp, #32]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dc36      	bgt.n	80082f6 <_dtoa_r+0x99e>
 8008288:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800828a:	2b02      	cmp	r3, #2
 800828c:	dd33      	ble.n	80082f6 <_dtoa_r+0x99e>
 800828e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008292:	f1b9 0f00 	cmp.w	r9, #0
 8008296:	d10d      	bne.n	80082b4 <_dtoa_r+0x95c>
 8008298:	4621      	mov	r1, r4
 800829a:	464b      	mov	r3, r9
 800829c:	2205      	movs	r2, #5
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 f9d2 	bl	8008648 <__multadd>
 80082a4:	4601      	mov	r1, r0
 80082a6:	4604      	mov	r4, r0
 80082a8:	4658      	mov	r0, fp
 80082aa:	f000 fbe9 	bl	8008a80 <__mcmp>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f73f adb8 	bgt.w	8007e24 <_dtoa_r+0x4cc>
 80082b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082b6:	9f03      	ldr	r7, [sp, #12]
 80082b8:	ea6f 0a03 	mvn.w	sl, r3
 80082bc:	f04f 0800 	mov.w	r8, #0
 80082c0:	4621      	mov	r1, r4
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 f99e 	bl	8008604 <_Bfree>
 80082c8:	2e00      	cmp	r6, #0
 80082ca:	f43f aea7 	beq.w	800801c <_dtoa_r+0x6c4>
 80082ce:	f1b8 0f00 	cmp.w	r8, #0
 80082d2:	d005      	beq.n	80082e0 <_dtoa_r+0x988>
 80082d4:	45b0      	cmp	r8, r6
 80082d6:	d003      	beq.n	80082e0 <_dtoa_r+0x988>
 80082d8:	4641      	mov	r1, r8
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 f992 	bl	8008604 <_Bfree>
 80082e0:	4631      	mov	r1, r6
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 f98e 	bl	8008604 <_Bfree>
 80082e8:	e698      	b.n	800801c <_dtoa_r+0x6c4>
 80082ea:	2400      	movs	r4, #0
 80082ec:	4626      	mov	r6, r4
 80082ee:	e7e1      	b.n	80082b4 <_dtoa_r+0x95c>
 80082f0:	46c2      	mov	sl, r8
 80082f2:	4626      	mov	r6, r4
 80082f4:	e596      	b.n	8007e24 <_dtoa_r+0x4cc>
 80082f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80fd 	beq.w	80084fc <_dtoa_r+0xba4>
 8008302:	2f00      	cmp	r7, #0
 8008304:	dd05      	ble.n	8008312 <_dtoa_r+0x9ba>
 8008306:	4631      	mov	r1, r6
 8008308:	463a      	mov	r2, r7
 800830a:	4628      	mov	r0, r5
 800830c:	f000 fb48 	bl	80089a0 <__lshift>
 8008310:	4606      	mov	r6, r0
 8008312:	f1b8 0f00 	cmp.w	r8, #0
 8008316:	d05c      	beq.n	80083d2 <_dtoa_r+0xa7a>
 8008318:	4628      	mov	r0, r5
 800831a:	6871      	ldr	r1, [r6, #4]
 800831c:	f000 f932 	bl	8008584 <_Balloc>
 8008320:	4607      	mov	r7, r0
 8008322:	b928      	cbnz	r0, 8008330 <_dtoa_r+0x9d8>
 8008324:	4602      	mov	r2, r0
 8008326:	f240 21ea 	movw	r1, #746	; 0x2ea
 800832a:	4b7f      	ldr	r3, [pc, #508]	; (8008528 <_dtoa_r+0xbd0>)
 800832c:	f7ff bb28 	b.w	8007980 <_dtoa_r+0x28>
 8008330:	6932      	ldr	r2, [r6, #16]
 8008332:	f106 010c 	add.w	r1, r6, #12
 8008336:	3202      	adds	r2, #2
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	300c      	adds	r0, #12
 800833c:	f000 f914 	bl	8008568 <memcpy>
 8008340:	2201      	movs	r2, #1
 8008342:	4639      	mov	r1, r7
 8008344:	4628      	mov	r0, r5
 8008346:	f000 fb2b 	bl	80089a0 <__lshift>
 800834a:	46b0      	mov	r8, r6
 800834c:	4606      	mov	r6, r0
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	444b      	add	r3, r9
 8008358:	930a      	str	r3, [sp, #40]	; 0x28
 800835a:	9b04      	ldr	r3, [sp, #16]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	9309      	str	r3, [sp, #36]	; 0x24
 8008362:	9b08      	ldr	r3, [sp, #32]
 8008364:	4621      	mov	r1, r4
 8008366:	3b01      	subs	r3, #1
 8008368:	4658      	mov	r0, fp
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	f7ff fa68 	bl	8007840 <quorem>
 8008370:	4603      	mov	r3, r0
 8008372:	4641      	mov	r1, r8
 8008374:	3330      	adds	r3, #48	; 0x30
 8008376:	9006      	str	r0, [sp, #24]
 8008378:	4658      	mov	r0, fp
 800837a:	930b      	str	r3, [sp, #44]	; 0x2c
 800837c:	f000 fb80 	bl	8008a80 <__mcmp>
 8008380:	4632      	mov	r2, r6
 8008382:	4681      	mov	r9, r0
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f000 fb96 	bl	8008ab8 <__mdiff>
 800838c:	68c2      	ldr	r2, [r0, #12]
 800838e:	4607      	mov	r7, r0
 8008390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008392:	bb02      	cbnz	r2, 80083d6 <_dtoa_r+0xa7e>
 8008394:	4601      	mov	r1, r0
 8008396:	4658      	mov	r0, fp
 8008398:	f000 fb72 	bl	8008a80 <__mcmp>
 800839c:	4602      	mov	r2, r0
 800839e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a0:	4639      	mov	r1, r7
 80083a2:	4628      	mov	r0, r5
 80083a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80083a8:	f000 f92c 	bl	8008604 <_Bfree>
 80083ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083b0:	9f08      	ldr	r7, [sp, #32]
 80083b2:	ea43 0102 	orr.w	r1, r3, r2
 80083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b8:	430b      	orrs	r3, r1
 80083ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083bc:	d10d      	bne.n	80083da <_dtoa_r+0xa82>
 80083be:	2b39      	cmp	r3, #57	; 0x39
 80083c0:	d029      	beq.n	8008416 <_dtoa_r+0xabe>
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	dd01      	ble.n	80083cc <_dtoa_r+0xa74>
 80083c8:	9b06      	ldr	r3, [sp, #24]
 80083ca:	3331      	adds	r3, #49	; 0x31
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	7013      	strb	r3, [r2, #0]
 80083d0:	e776      	b.n	80082c0 <_dtoa_r+0x968>
 80083d2:	4630      	mov	r0, r6
 80083d4:	e7b9      	b.n	800834a <_dtoa_r+0x9f2>
 80083d6:	2201      	movs	r2, #1
 80083d8:	e7e2      	b.n	80083a0 <_dtoa_r+0xa48>
 80083da:	f1b9 0f00 	cmp.w	r9, #0
 80083de:	db06      	blt.n	80083ee <_dtoa_r+0xa96>
 80083e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80083e2:	ea41 0909 	orr.w	r9, r1, r9
 80083e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e8:	ea59 0101 	orrs.w	r1, r9, r1
 80083ec:	d120      	bne.n	8008430 <_dtoa_r+0xad8>
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	ddec      	ble.n	80083cc <_dtoa_r+0xa74>
 80083f2:	4659      	mov	r1, fp
 80083f4:	2201      	movs	r2, #1
 80083f6:	4628      	mov	r0, r5
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	f000 fad1 	bl	80089a0 <__lshift>
 80083fe:	4621      	mov	r1, r4
 8008400:	4683      	mov	fp, r0
 8008402:	f000 fb3d 	bl	8008a80 <__mcmp>
 8008406:	2800      	cmp	r0, #0
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	dc02      	bgt.n	8008412 <_dtoa_r+0xaba>
 800840c:	d1de      	bne.n	80083cc <_dtoa_r+0xa74>
 800840e:	07da      	lsls	r2, r3, #31
 8008410:	d5dc      	bpl.n	80083cc <_dtoa_r+0xa74>
 8008412:	2b39      	cmp	r3, #57	; 0x39
 8008414:	d1d8      	bne.n	80083c8 <_dtoa_r+0xa70>
 8008416:	2339      	movs	r3, #57	; 0x39
 8008418:	9a04      	ldr	r2, [sp, #16]
 800841a:	7013      	strb	r3, [r2, #0]
 800841c:	463b      	mov	r3, r7
 800841e:	461f      	mov	r7, r3
 8008420:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008424:	3b01      	subs	r3, #1
 8008426:	2a39      	cmp	r2, #57	; 0x39
 8008428:	d050      	beq.n	80084cc <_dtoa_r+0xb74>
 800842a:	3201      	adds	r2, #1
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	e747      	b.n	80082c0 <_dtoa_r+0x968>
 8008430:	2a00      	cmp	r2, #0
 8008432:	dd03      	ble.n	800843c <_dtoa_r+0xae4>
 8008434:	2b39      	cmp	r3, #57	; 0x39
 8008436:	d0ee      	beq.n	8008416 <_dtoa_r+0xabe>
 8008438:	3301      	adds	r3, #1
 800843a:	e7c7      	b.n	80083cc <_dtoa_r+0xa74>
 800843c:	9a08      	ldr	r2, [sp, #32]
 800843e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008440:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008444:	428a      	cmp	r2, r1
 8008446:	d02a      	beq.n	800849e <_dtoa_r+0xb46>
 8008448:	4659      	mov	r1, fp
 800844a:	2300      	movs	r3, #0
 800844c:	220a      	movs	r2, #10
 800844e:	4628      	mov	r0, r5
 8008450:	f000 f8fa 	bl	8008648 <__multadd>
 8008454:	45b0      	cmp	r8, r6
 8008456:	4683      	mov	fp, r0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	f04f 020a 	mov.w	r2, #10
 8008460:	4641      	mov	r1, r8
 8008462:	4628      	mov	r0, r5
 8008464:	d107      	bne.n	8008476 <_dtoa_r+0xb1e>
 8008466:	f000 f8ef 	bl	8008648 <__multadd>
 800846a:	4680      	mov	r8, r0
 800846c:	4606      	mov	r6, r0
 800846e:	9b08      	ldr	r3, [sp, #32]
 8008470:	3301      	adds	r3, #1
 8008472:	9308      	str	r3, [sp, #32]
 8008474:	e775      	b.n	8008362 <_dtoa_r+0xa0a>
 8008476:	f000 f8e7 	bl	8008648 <__multadd>
 800847a:	4631      	mov	r1, r6
 800847c:	4680      	mov	r8, r0
 800847e:	2300      	movs	r3, #0
 8008480:	220a      	movs	r2, #10
 8008482:	4628      	mov	r0, r5
 8008484:	f000 f8e0 	bl	8008648 <__multadd>
 8008488:	4606      	mov	r6, r0
 800848a:	e7f0      	b.n	800846e <_dtoa_r+0xb16>
 800848c:	f1b9 0f00 	cmp.w	r9, #0
 8008490:	bfcc      	ite	gt
 8008492:	464f      	movgt	r7, r9
 8008494:	2701      	movle	r7, #1
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	9a03      	ldr	r2, [sp, #12]
 800849c:	4417      	add	r7, r2
 800849e:	4659      	mov	r1, fp
 80084a0:	2201      	movs	r2, #1
 80084a2:	4628      	mov	r0, r5
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	f000 fa7b 	bl	80089a0 <__lshift>
 80084aa:	4621      	mov	r1, r4
 80084ac:	4683      	mov	fp, r0
 80084ae:	f000 fae7 	bl	8008a80 <__mcmp>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	dcb2      	bgt.n	800841c <_dtoa_r+0xac4>
 80084b6:	d102      	bne.n	80084be <_dtoa_r+0xb66>
 80084b8:	9b08      	ldr	r3, [sp, #32]
 80084ba:	07db      	lsls	r3, r3, #31
 80084bc:	d4ae      	bmi.n	800841c <_dtoa_r+0xac4>
 80084be:	463b      	mov	r3, r7
 80084c0:	461f      	mov	r7, r3
 80084c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084c6:	2a30      	cmp	r2, #48	; 0x30
 80084c8:	d0fa      	beq.n	80084c0 <_dtoa_r+0xb68>
 80084ca:	e6f9      	b.n	80082c0 <_dtoa_r+0x968>
 80084cc:	9a03      	ldr	r2, [sp, #12]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d1a5      	bne.n	800841e <_dtoa_r+0xac6>
 80084d2:	2331      	movs	r3, #49	; 0x31
 80084d4:	f10a 0a01 	add.w	sl, sl, #1
 80084d8:	e779      	b.n	80083ce <_dtoa_r+0xa76>
 80084da:	4b14      	ldr	r3, [pc, #80]	; (800852c <_dtoa_r+0xbd4>)
 80084dc:	f7ff baa8 	b.w	8007a30 <_dtoa_r+0xd8>
 80084e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f47f aa81 	bne.w	80079ea <_dtoa_r+0x92>
 80084e8:	4b11      	ldr	r3, [pc, #68]	; (8008530 <_dtoa_r+0xbd8>)
 80084ea:	f7ff baa1 	b.w	8007a30 <_dtoa_r+0xd8>
 80084ee:	f1b9 0f00 	cmp.w	r9, #0
 80084f2:	dc03      	bgt.n	80084fc <_dtoa_r+0xba4>
 80084f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	f73f aecb 	bgt.w	8008292 <_dtoa_r+0x93a>
 80084fc:	9f03      	ldr	r7, [sp, #12]
 80084fe:	4621      	mov	r1, r4
 8008500:	4658      	mov	r0, fp
 8008502:	f7ff f99d 	bl	8007840 <quorem>
 8008506:	9a03      	ldr	r2, [sp, #12]
 8008508:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800850c:	f807 3b01 	strb.w	r3, [r7], #1
 8008510:	1aba      	subs	r2, r7, r2
 8008512:	4591      	cmp	r9, r2
 8008514:	ddba      	ble.n	800848c <_dtoa_r+0xb34>
 8008516:	4659      	mov	r1, fp
 8008518:	2300      	movs	r3, #0
 800851a:	220a      	movs	r2, #10
 800851c:	4628      	mov	r0, r5
 800851e:	f000 f893 	bl	8008648 <__multadd>
 8008522:	4683      	mov	fp, r0
 8008524:	e7eb      	b.n	80084fe <_dtoa_r+0xba6>
 8008526:	bf00      	nop
 8008528:	0800bc03 	.word	0x0800bc03
 800852c:	0800bb60 	.word	0x0800bb60
 8008530:	0800bb84 	.word	0x0800bb84

08008534 <_localeconv_r>:
 8008534:	4800      	ldr	r0, [pc, #0]	; (8008538 <_localeconv_r+0x4>)
 8008536:	4770      	bx	lr
 8008538:	20000160 	.word	0x20000160

0800853c <malloc>:
 800853c:	4b02      	ldr	r3, [pc, #8]	; (8008548 <malloc+0xc>)
 800853e:	4601      	mov	r1, r0
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	f000 bc1d 	b.w	8008d80 <_malloc_r>
 8008546:	bf00      	nop
 8008548:	2000000c 	.word	0x2000000c

0800854c <memchr>:
 800854c:	4603      	mov	r3, r0
 800854e:	b510      	push	{r4, lr}
 8008550:	b2c9      	uxtb	r1, r1
 8008552:	4402      	add	r2, r0
 8008554:	4293      	cmp	r3, r2
 8008556:	4618      	mov	r0, r3
 8008558:	d101      	bne.n	800855e <memchr+0x12>
 800855a:	2000      	movs	r0, #0
 800855c:	e003      	b.n	8008566 <memchr+0x1a>
 800855e:	7804      	ldrb	r4, [r0, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	428c      	cmp	r4, r1
 8008564:	d1f6      	bne.n	8008554 <memchr+0x8>
 8008566:	bd10      	pop	{r4, pc}

08008568 <memcpy>:
 8008568:	440a      	add	r2, r1
 800856a:	4291      	cmp	r1, r2
 800856c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008570:	d100      	bne.n	8008574 <memcpy+0xc>
 8008572:	4770      	bx	lr
 8008574:	b510      	push	{r4, lr}
 8008576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857a:	4291      	cmp	r1, r2
 800857c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008580:	d1f9      	bne.n	8008576 <memcpy+0xe>
 8008582:	bd10      	pop	{r4, pc}

08008584 <_Balloc>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008588:	4604      	mov	r4, r0
 800858a:	460d      	mov	r5, r1
 800858c:	b976      	cbnz	r6, 80085ac <_Balloc+0x28>
 800858e:	2010      	movs	r0, #16
 8008590:	f7ff ffd4 	bl	800853c <malloc>
 8008594:	4602      	mov	r2, r0
 8008596:	6260      	str	r0, [r4, #36]	; 0x24
 8008598:	b920      	cbnz	r0, 80085a4 <_Balloc+0x20>
 800859a:	2166      	movs	r1, #102	; 0x66
 800859c:	4b17      	ldr	r3, [pc, #92]	; (80085fc <_Balloc+0x78>)
 800859e:	4818      	ldr	r0, [pc, #96]	; (8008600 <_Balloc+0x7c>)
 80085a0:	f000 fdce 	bl	8009140 <__assert_func>
 80085a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a8:	6006      	str	r6, [r0, #0]
 80085aa:	60c6      	str	r6, [r0, #12]
 80085ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085ae:	68f3      	ldr	r3, [r6, #12]
 80085b0:	b183      	cbz	r3, 80085d4 <_Balloc+0x50>
 80085b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ba:	b9b8      	cbnz	r0, 80085ec <_Balloc+0x68>
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f605 	lsl.w	r6, r1, r5
 80085c2:	1d72      	adds	r2, r6, #5
 80085c4:	4620      	mov	r0, r4
 80085c6:	0092      	lsls	r2, r2, #2
 80085c8:	f000 fb5e 	bl	8008c88 <_calloc_r>
 80085cc:	b160      	cbz	r0, 80085e8 <_Balloc+0x64>
 80085ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085d2:	e00e      	b.n	80085f2 <_Balloc+0x6e>
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	2104      	movs	r1, #4
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fb55 	bl	8008c88 <_calloc_r>
 80085de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e0:	60f0      	str	r0, [r6, #12]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e4      	bne.n	80085b2 <_Balloc+0x2e>
 80085e8:	2000      	movs	r0, #0
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	6802      	ldr	r2, [r0, #0]
 80085ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085f2:	2300      	movs	r3, #0
 80085f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085f8:	e7f7      	b.n	80085ea <_Balloc+0x66>
 80085fa:	bf00      	nop
 80085fc:	0800bb91 	.word	0x0800bb91
 8008600:	0800bc14 	.word	0x0800bc14

08008604 <_Bfree>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008608:	4605      	mov	r5, r0
 800860a:	460c      	mov	r4, r1
 800860c:	b976      	cbnz	r6, 800862c <_Bfree+0x28>
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff ff94 	bl	800853c <malloc>
 8008614:	4602      	mov	r2, r0
 8008616:	6268      	str	r0, [r5, #36]	; 0x24
 8008618:	b920      	cbnz	r0, 8008624 <_Bfree+0x20>
 800861a:	218a      	movs	r1, #138	; 0x8a
 800861c:	4b08      	ldr	r3, [pc, #32]	; (8008640 <_Bfree+0x3c>)
 800861e:	4809      	ldr	r0, [pc, #36]	; (8008644 <_Bfree+0x40>)
 8008620:	f000 fd8e 	bl	8009140 <__assert_func>
 8008624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008628:	6006      	str	r6, [r0, #0]
 800862a:	60c6      	str	r6, [r0, #12]
 800862c:	b13c      	cbz	r4, 800863e <_Bfree+0x3a>
 800862e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008630:	6862      	ldr	r2, [r4, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008638:	6021      	str	r1, [r4, #0]
 800863a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	0800bb91 	.word	0x0800bb91
 8008644:	0800bc14 	.word	0x0800bc14

08008648 <__multadd>:
 8008648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864c:	4607      	mov	r7, r0
 800864e:	460c      	mov	r4, r1
 8008650:	461e      	mov	r6, r3
 8008652:	2000      	movs	r0, #0
 8008654:	690d      	ldr	r5, [r1, #16]
 8008656:	f101 0c14 	add.w	ip, r1, #20
 800865a:	f8dc 3000 	ldr.w	r3, [ip]
 800865e:	3001      	adds	r0, #1
 8008660:	b299      	uxth	r1, r3
 8008662:	fb02 6101 	mla	r1, r2, r1, r6
 8008666:	0c1e      	lsrs	r6, r3, #16
 8008668:	0c0b      	lsrs	r3, r1, #16
 800866a:	fb02 3306 	mla	r3, r2, r6, r3
 800866e:	b289      	uxth	r1, r1
 8008670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008674:	4285      	cmp	r5, r0
 8008676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800867a:	f84c 1b04 	str.w	r1, [ip], #4
 800867e:	dcec      	bgt.n	800865a <__multadd+0x12>
 8008680:	b30e      	cbz	r6, 80086c6 <__multadd+0x7e>
 8008682:	68a3      	ldr	r3, [r4, #8]
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc19      	bgt.n	80086bc <__multadd+0x74>
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	4638      	mov	r0, r7
 800868c:	3101      	adds	r1, #1
 800868e:	f7ff ff79 	bl	8008584 <_Balloc>
 8008692:	4680      	mov	r8, r0
 8008694:	b928      	cbnz	r0, 80086a2 <__multadd+0x5a>
 8008696:	4602      	mov	r2, r0
 8008698:	21b5      	movs	r1, #181	; 0xb5
 800869a:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <__multadd+0x84>)
 800869c:	480c      	ldr	r0, [pc, #48]	; (80086d0 <__multadd+0x88>)
 800869e:	f000 fd4f 	bl	8009140 <__assert_func>
 80086a2:	6922      	ldr	r2, [r4, #16]
 80086a4:	f104 010c 	add.w	r1, r4, #12
 80086a8:	3202      	adds	r2, #2
 80086aa:	0092      	lsls	r2, r2, #2
 80086ac:	300c      	adds	r0, #12
 80086ae:	f7ff ff5b 	bl	8008568 <memcpy>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4638      	mov	r0, r7
 80086b6:	f7ff ffa5 	bl	8008604 <_Bfree>
 80086ba:	4644      	mov	r4, r8
 80086bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086c0:	3501      	adds	r5, #1
 80086c2:	615e      	str	r6, [r3, #20]
 80086c4:	6125      	str	r5, [r4, #16]
 80086c6:	4620      	mov	r0, r4
 80086c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086cc:	0800bc03 	.word	0x0800bc03
 80086d0:	0800bc14 	.word	0x0800bc14

080086d4 <__hi0bits>:
 80086d4:	0c02      	lsrs	r2, r0, #16
 80086d6:	0412      	lsls	r2, r2, #16
 80086d8:	4603      	mov	r3, r0
 80086da:	b9ca      	cbnz	r2, 8008710 <__hi0bits+0x3c>
 80086dc:	0403      	lsls	r3, r0, #16
 80086de:	2010      	movs	r0, #16
 80086e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80086e4:	bf04      	itt	eq
 80086e6:	021b      	lsleq	r3, r3, #8
 80086e8:	3008      	addeq	r0, #8
 80086ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80086ee:	bf04      	itt	eq
 80086f0:	011b      	lsleq	r3, r3, #4
 80086f2:	3004      	addeq	r0, #4
 80086f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086f8:	bf04      	itt	eq
 80086fa:	009b      	lsleq	r3, r3, #2
 80086fc:	3002      	addeq	r0, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	db05      	blt.n	800870e <__hi0bits+0x3a>
 8008702:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008706:	f100 0001 	add.w	r0, r0, #1
 800870a:	bf08      	it	eq
 800870c:	2020      	moveq	r0, #32
 800870e:	4770      	bx	lr
 8008710:	2000      	movs	r0, #0
 8008712:	e7e5      	b.n	80086e0 <__hi0bits+0xc>

08008714 <__lo0bits>:
 8008714:	6803      	ldr	r3, [r0, #0]
 8008716:	4602      	mov	r2, r0
 8008718:	f013 0007 	ands.w	r0, r3, #7
 800871c:	d00b      	beq.n	8008736 <__lo0bits+0x22>
 800871e:	07d9      	lsls	r1, r3, #31
 8008720:	d421      	bmi.n	8008766 <__lo0bits+0x52>
 8008722:	0798      	lsls	r0, r3, #30
 8008724:	bf49      	itett	mi
 8008726:	085b      	lsrmi	r3, r3, #1
 8008728:	089b      	lsrpl	r3, r3, #2
 800872a:	2001      	movmi	r0, #1
 800872c:	6013      	strmi	r3, [r2, #0]
 800872e:	bf5c      	itt	pl
 8008730:	2002      	movpl	r0, #2
 8008732:	6013      	strpl	r3, [r2, #0]
 8008734:	4770      	bx	lr
 8008736:	b299      	uxth	r1, r3
 8008738:	b909      	cbnz	r1, 800873e <__lo0bits+0x2a>
 800873a:	2010      	movs	r0, #16
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	b2d9      	uxtb	r1, r3
 8008740:	b909      	cbnz	r1, 8008746 <__lo0bits+0x32>
 8008742:	3008      	adds	r0, #8
 8008744:	0a1b      	lsrs	r3, r3, #8
 8008746:	0719      	lsls	r1, r3, #28
 8008748:	bf04      	itt	eq
 800874a:	091b      	lsreq	r3, r3, #4
 800874c:	3004      	addeq	r0, #4
 800874e:	0799      	lsls	r1, r3, #30
 8008750:	bf04      	itt	eq
 8008752:	089b      	lsreq	r3, r3, #2
 8008754:	3002      	addeq	r0, #2
 8008756:	07d9      	lsls	r1, r3, #31
 8008758:	d403      	bmi.n	8008762 <__lo0bits+0x4e>
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	f100 0001 	add.w	r0, r0, #1
 8008760:	d003      	beq.n	800876a <__lo0bits+0x56>
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4770      	bx	lr
 8008766:	2000      	movs	r0, #0
 8008768:	4770      	bx	lr
 800876a:	2020      	movs	r0, #32
 800876c:	4770      	bx	lr
	...

08008770 <__i2b>:
 8008770:	b510      	push	{r4, lr}
 8008772:	460c      	mov	r4, r1
 8008774:	2101      	movs	r1, #1
 8008776:	f7ff ff05 	bl	8008584 <_Balloc>
 800877a:	4602      	mov	r2, r0
 800877c:	b928      	cbnz	r0, 800878a <__i2b+0x1a>
 800877e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008782:	4b04      	ldr	r3, [pc, #16]	; (8008794 <__i2b+0x24>)
 8008784:	4804      	ldr	r0, [pc, #16]	; (8008798 <__i2b+0x28>)
 8008786:	f000 fcdb 	bl	8009140 <__assert_func>
 800878a:	2301      	movs	r3, #1
 800878c:	6144      	str	r4, [r0, #20]
 800878e:	6103      	str	r3, [r0, #16]
 8008790:	bd10      	pop	{r4, pc}
 8008792:	bf00      	nop
 8008794:	0800bc03 	.word	0x0800bc03
 8008798:	0800bc14 	.word	0x0800bc14

0800879c <__multiply>:
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	4691      	mov	r9, r2
 80087a2:	690a      	ldr	r2, [r1, #16]
 80087a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087a8:	460c      	mov	r4, r1
 80087aa:	429a      	cmp	r2, r3
 80087ac:	bfbe      	ittt	lt
 80087ae:	460b      	movlt	r3, r1
 80087b0:	464c      	movlt	r4, r9
 80087b2:	4699      	movlt	r9, r3
 80087b4:	6927      	ldr	r7, [r4, #16]
 80087b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	6861      	ldr	r1, [r4, #4]
 80087be:	eb07 060a 	add.w	r6, r7, sl
 80087c2:	42b3      	cmp	r3, r6
 80087c4:	b085      	sub	sp, #20
 80087c6:	bfb8      	it	lt
 80087c8:	3101      	addlt	r1, #1
 80087ca:	f7ff fedb 	bl	8008584 <_Balloc>
 80087ce:	b930      	cbnz	r0, 80087de <__multiply+0x42>
 80087d0:	4602      	mov	r2, r0
 80087d2:	f240 115d 	movw	r1, #349	; 0x15d
 80087d6:	4b43      	ldr	r3, [pc, #268]	; (80088e4 <__multiply+0x148>)
 80087d8:	4843      	ldr	r0, [pc, #268]	; (80088e8 <__multiply+0x14c>)
 80087da:	f000 fcb1 	bl	8009140 <__assert_func>
 80087de:	f100 0514 	add.w	r5, r0, #20
 80087e2:	462b      	mov	r3, r5
 80087e4:	2200      	movs	r2, #0
 80087e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087ea:	4543      	cmp	r3, r8
 80087ec:	d321      	bcc.n	8008832 <__multiply+0x96>
 80087ee:	f104 0314 	add.w	r3, r4, #20
 80087f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087f6:	f109 0314 	add.w	r3, r9, #20
 80087fa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087fe:	9202      	str	r2, [sp, #8]
 8008800:	1b3a      	subs	r2, r7, r4
 8008802:	3a15      	subs	r2, #21
 8008804:	f022 0203 	bic.w	r2, r2, #3
 8008808:	3204      	adds	r2, #4
 800880a:	f104 0115 	add.w	r1, r4, #21
 800880e:	428f      	cmp	r7, r1
 8008810:	bf38      	it	cc
 8008812:	2204      	movcc	r2, #4
 8008814:	9201      	str	r2, [sp, #4]
 8008816:	9a02      	ldr	r2, [sp, #8]
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	429a      	cmp	r2, r3
 800881c:	d80c      	bhi.n	8008838 <__multiply+0x9c>
 800881e:	2e00      	cmp	r6, #0
 8008820:	dd03      	ble.n	800882a <__multiply+0x8e>
 8008822:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008826:	2b00      	cmp	r3, #0
 8008828:	d059      	beq.n	80088de <__multiply+0x142>
 800882a:	6106      	str	r6, [r0, #16]
 800882c:	b005      	add	sp, #20
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	f843 2b04 	str.w	r2, [r3], #4
 8008836:	e7d8      	b.n	80087ea <__multiply+0x4e>
 8008838:	f8b3 a000 	ldrh.w	sl, [r3]
 800883c:	f1ba 0f00 	cmp.w	sl, #0
 8008840:	d023      	beq.n	800888a <__multiply+0xee>
 8008842:	46a9      	mov	r9, r5
 8008844:	f04f 0c00 	mov.w	ip, #0
 8008848:	f104 0e14 	add.w	lr, r4, #20
 800884c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008850:	f8d9 1000 	ldr.w	r1, [r9]
 8008854:	fa1f fb82 	uxth.w	fp, r2
 8008858:	b289      	uxth	r1, r1
 800885a:	fb0a 110b 	mla	r1, sl, fp, r1
 800885e:	4461      	add	r1, ip
 8008860:	f8d9 c000 	ldr.w	ip, [r9]
 8008864:	0c12      	lsrs	r2, r2, #16
 8008866:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800886a:	fb0a c202 	mla	r2, sl, r2, ip
 800886e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008872:	b289      	uxth	r1, r1
 8008874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008878:	4577      	cmp	r7, lr
 800887a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800887e:	f849 1b04 	str.w	r1, [r9], #4
 8008882:	d8e3      	bhi.n	800884c <__multiply+0xb0>
 8008884:	9a01      	ldr	r2, [sp, #4]
 8008886:	f845 c002 	str.w	ip, [r5, r2]
 800888a:	9a03      	ldr	r2, [sp, #12]
 800888c:	3304      	adds	r3, #4
 800888e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008892:	f1b9 0f00 	cmp.w	r9, #0
 8008896:	d020      	beq.n	80088da <__multiply+0x13e>
 8008898:	46ae      	mov	lr, r5
 800889a:	f04f 0a00 	mov.w	sl, #0
 800889e:	6829      	ldr	r1, [r5, #0]
 80088a0:	f104 0c14 	add.w	ip, r4, #20
 80088a4:	f8bc b000 	ldrh.w	fp, [ip]
 80088a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088ac:	b289      	uxth	r1, r1
 80088ae:	fb09 220b 	mla	r2, r9, fp, r2
 80088b2:	4492      	add	sl, r2
 80088b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80088b8:	f84e 1b04 	str.w	r1, [lr], #4
 80088bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80088c0:	f8be 1000 	ldrh.w	r1, [lr]
 80088c4:	0c12      	lsrs	r2, r2, #16
 80088c6:	fb09 1102 	mla	r1, r9, r2, r1
 80088ca:	4567      	cmp	r7, ip
 80088cc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088d4:	d8e6      	bhi.n	80088a4 <__multiply+0x108>
 80088d6:	9a01      	ldr	r2, [sp, #4]
 80088d8:	50a9      	str	r1, [r5, r2]
 80088da:	3504      	adds	r5, #4
 80088dc:	e79b      	b.n	8008816 <__multiply+0x7a>
 80088de:	3e01      	subs	r6, #1
 80088e0:	e79d      	b.n	800881e <__multiply+0x82>
 80088e2:	bf00      	nop
 80088e4:	0800bc03 	.word	0x0800bc03
 80088e8:	0800bc14 	.word	0x0800bc14

080088ec <__pow5mult>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	4615      	mov	r5, r2
 80088f2:	f012 0203 	ands.w	r2, r2, #3
 80088f6:	4606      	mov	r6, r0
 80088f8:	460f      	mov	r7, r1
 80088fa:	d007      	beq.n	800890c <__pow5mult+0x20>
 80088fc:	4c25      	ldr	r4, [pc, #148]	; (8008994 <__pow5mult+0xa8>)
 80088fe:	3a01      	subs	r2, #1
 8008900:	2300      	movs	r3, #0
 8008902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008906:	f7ff fe9f 	bl	8008648 <__multadd>
 800890a:	4607      	mov	r7, r0
 800890c:	10ad      	asrs	r5, r5, #2
 800890e:	d03d      	beq.n	800898c <__pow5mult+0xa0>
 8008910:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008912:	b97c      	cbnz	r4, 8008934 <__pow5mult+0x48>
 8008914:	2010      	movs	r0, #16
 8008916:	f7ff fe11 	bl	800853c <malloc>
 800891a:	4602      	mov	r2, r0
 800891c:	6270      	str	r0, [r6, #36]	; 0x24
 800891e:	b928      	cbnz	r0, 800892c <__pow5mult+0x40>
 8008920:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008924:	4b1c      	ldr	r3, [pc, #112]	; (8008998 <__pow5mult+0xac>)
 8008926:	481d      	ldr	r0, [pc, #116]	; (800899c <__pow5mult+0xb0>)
 8008928:	f000 fc0a 	bl	8009140 <__assert_func>
 800892c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008930:	6004      	str	r4, [r0, #0]
 8008932:	60c4      	str	r4, [r0, #12]
 8008934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800893c:	b94c      	cbnz	r4, 8008952 <__pow5mult+0x66>
 800893e:	f240 2171 	movw	r1, #625	; 0x271
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ff14 	bl	8008770 <__i2b>
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	07eb      	lsls	r3, r5, #31
 8008958:	d50a      	bpl.n	8008970 <__pow5mult+0x84>
 800895a:	4639      	mov	r1, r7
 800895c:	4622      	mov	r2, r4
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff ff1c 	bl	800879c <__multiply>
 8008964:	4680      	mov	r8, r0
 8008966:	4639      	mov	r1, r7
 8008968:	4630      	mov	r0, r6
 800896a:	f7ff fe4b 	bl	8008604 <_Bfree>
 800896e:	4647      	mov	r7, r8
 8008970:	106d      	asrs	r5, r5, #1
 8008972:	d00b      	beq.n	800898c <__pow5mult+0xa0>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	b938      	cbnz	r0, 8008988 <__pow5mult+0x9c>
 8008978:	4622      	mov	r2, r4
 800897a:	4621      	mov	r1, r4
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ff0d 	bl	800879c <__multiply>
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	f8c0 9000 	str.w	r9, [r0]
 8008988:	4604      	mov	r4, r0
 800898a:	e7e4      	b.n	8008956 <__pow5mult+0x6a>
 800898c:	4638      	mov	r0, r7
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	bf00      	nop
 8008994:	0800bd60 	.word	0x0800bd60
 8008998:	0800bb91 	.word	0x0800bb91
 800899c:	0800bc14 	.word	0x0800bc14

080089a0 <__lshift>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	460c      	mov	r4, r1
 80089a6:	4607      	mov	r7, r0
 80089a8:	4691      	mov	r9, r2
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	6849      	ldr	r1, [r1, #4]
 80089ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089b2:	68a3      	ldr	r3, [r4, #8]
 80089b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089b8:	f108 0601 	add.w	r6, r8, #1
 80089bc:	42b3      	cmp	r3, r6
 80089be:	db0b      	blt.n	80089d8 <__lshift+0x38>
 80089c0:	4638      	mov	r0, r7
 80089c2:	f7ff fddf 	bl	8008584 <_Balloc>
 80089c6:	4605      	mov	r5, r0
 80089c8:	b948      	cbnz	r0, 80089de <__lshift+0x3e>
 80089ca:	4602      	mov	r2, r0
 80089cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089d0:	4b29      	ldr	r3, [pc, #164]	; (8008a78 <__lshift+0xd8>)
 80089d2:	482a      	ldr	r0, [pc, #168]	; (8008a7c <__lshift+0xdc>)
 80089d4:	f000 fbb4 	bl	8009140 <__assert_func>
 80089d8:	3101      	adds	r1, #1
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	e7ee      	b.n	80089bc <__lshift+0x1c>
 80089de:	2300      	movs	r3, #0
 80089e0:	f100 0114 	add.w	r1, r0, #20
 80089e4:	f100 0210 	add.w	r2, r0, #16
 80089e8:	4618      	mov	r0, r3
 80089ea:	4553      	cmp	r3, sl
 80089ec:	db37      	blt.n	8008a5e <__lshift+0xbe>
 80089ee:	6920      	ldr	r0, [r4, #16]
 80089f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089f4:	f104 0314 	add.w	r3, r4, #20
 80089f8:	f019 091f 	ands.w	r9, r9, #31
 80089fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a04:	d02f      	beq.n	8008a66 <__lshift+0xc6>
 8008a06:	468a      	mov	sl, r1
 8008a08:	f04f 0c00 	mov.w	ip, #0
 8008a0c:	f1c9 0e20 	rsb	lr, r9, #32
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	fa02 f209 	lsl.w	r2, r2, r9
 8008a16:	ea42 020c 	orr.w	r2, r2, ip
 8008a1a:	f84a 2b04 	str.w	r2, [sl], #4
 8008a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a22:	4298      	cmp	r0, r3
 8008a24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a28:	d8f2      	bhi.n	8008a10 <__lshift+0x70>
 8008a2a:	1b03      	subs	r3, r0, r4
 8008a2c:	3b15      	subs	r3, #21
 8008a2e:	f023 0303 	bic.w	r3, r3, #3
 8008a32:	3304      	adds	r3, #4
 8008a34:	f104 0215 	add.w	r2, r4, #21
 8008a38:	4290      	cmp	r0, r2
 8008a3a:	bf38      	it	cc
 8008a3c:	2304      	movcc	r3, #4
 8008a3e:	f841 c003 	str.w	ip, [r1, r3]
 8008a42:	f1bc 0f00 	cmp.w	ip, #0
 8008a46:	d001      	beq.n	8008a4c <__lshift+0xac>
 8008a48:	f108 0602 	add.w	r6, r8, #2
 8008a4c:	3e01      	subs	r6, #1
 8008a4e:	4638      	mov	r0, r7
 8008a50:	4621      	mov	r1, r4
 8008a52:	612e      	str	r6, [r5, #16]
 8008a54:	f7ff fdd6 	bl	8008604 <_Bfree>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a62:	3301      	adds	r3, #1
 8008a64:	e7c1      	b.n	80089ea <__lshift+0x4a>
 8008a66:	3904      	subs	r1, #4
 8008a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6c:	4298      	cmp	r0, r3
 8008a6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a72:	d8f9      	bhi.n	8008a68 <__lshift+0xc8>
 8008a74:	e7ea      	b.n	8008a4c <__lshift+0xac>
 8008a76:	bf00      	nop
 8008a78:	0800bc03 	.word	0x0800bc03
 8008a7c:	0800bc14 	.word	0x0800bc14

08008a80 <__mcmp>:
 8008a80:	4603      	mov	r3, r0
 8008a82:	690a      	ldr	r2, [r1, #16]
 8008a84:	6900      	ldr	r0, [r0, #16]
 8008a86:	b530      	push	{r4, r5, lr}
 8008a88:	1a80      	subs	r0, r0, r2
 8008a8a:	d10d      	bne.n	8008aa8 <__mcmp+0x28>
 8008a8c:	3314      	adds	r3, #20
 8008a8e:	3114      	adds	r1, #20
 8008a90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008aa0:	4295      	cmp	r5, r2
 8008aa2:	d002      	beq.n	8008aaa <__mcmp+0x2a>
 8008aa4:	d304      	bcc.n	8008ab0 <__mcmp+0x30>
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	bd30      	pop	{r4, r5, pc}
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	d3f4      	bcc.n	8008a98 <__mcmp+0x18>
 8008aae:	e7fb      	b.n	8008aa8 <__mcmp+0x28>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e7f8      	b.n	8008aa8 <__mcmp+0x28>
	...

08008ab8 <__mdiff>:
 8008ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	460d      	mov	r5, r1
 8008abe:	4607      	mov	r7, r0
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	4614      	mov	r4, r2
 8008ac6:	f7ff ffdb 	bl	8008a80 <__mcmp>
 8008aca:	1e06      	subs	r6, r0, #0
 8008acc:	d111      	bne.n	8008af2 <__mdiff+0x3a>
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff fd57 	bl	8008584 <_Balloc>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	b928      	cbnz	r0, 8008ae6 <__mdiff+0x2e>
 8008ada:	f240 2132 	movw	r1, #562	; 0x232
 8008ade:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <__mdiff+0x110>)
 8008ae0:	483a      	ldr	r0, [pc, #232]	; (8008bcc <__mdiff+0x114>)
 8008ae2:	f000 fb2d 	bl	8009140 <__assert_func>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008aec:	4610      	mov	r0, r2
 8008aee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af2:	bfa4      	itt	ge
 8008af4:	4623      	movge	r3, r4
 8008af6:	462c      	movge	r4, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	6861      	ldr	r1, [r4, #4]
 8008afc:	bfa6      	itte	ge
 8008afe:	461d      	movge	r5, r3
 8008b00:	2600      	movge	r6, #0
 8008b02:	2601      	movlt	r6, #1
 8008b04:	f7ff fd3e 	bl	8008584 <_Balloc>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	b918      	cbnz	r0, 8008b14 <__mdiff+0x5c>
 8008b0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b10:	4b2d      	ldr	r3, [pc, #180]	; (8008bc8 <__mdiff+0x110>)
 8008b12:	e7e5      	b.n	8008ae0 <__mdiff+0x28>
 8008b14:	f102 0814 	add.w	r8, r2, #20
 8008b18:	46c2      	mov	sl, r8
 8008b1a:	f04f 0c00 	mov.w	ip, #0
 8008b1e:	6927      	ldr	r7, [r4, #16]
 8008b20:	60c6      	str	r6, [r0, #12]
 8008b22:	692e      	ldr	r6, [r5, #16]
 8008b24:	f104 0014 	add.w	r0, r4, #20
 8008b28:	f105 0914 	add.w	r9, r5, #20
 8008b2c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b34:	3410      	adds	r4, #16
 8008b36:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008b3a:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b3e:	fa1f f18b 	uxth.w	r1, fp
 8008b42:	448c      	add	ip, r1
 8008b44:	b299      	uxth	r1, r3
 8008b46:	0c1b      	lsrs	r3, r3, #16
 8008b48:	ebac 0101 	sub.w	r1, ip, r1
 8008b4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b50:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008b54:	b289      	uxth	r1, r1
 8008b56:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008b5a:	454e      	cmp	r6, r9
 8008b5c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008b60:	f84a 3b04 	str.w	r3, [sl], #4
 8008b64:	d8e7      	bhi.n	8008b36 <__mdiff+0x7e>
 8008b66:	1b73      	subs	r3, r6, r5
 8008b68:	3b15      	subs	r3, #21
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	3515      	adds	r5, #21
 8008b70:	3304      	adds	r3, #4
 8008b72:	42ae      	cmp	r6, r5
 8008b74:	bf38      	it	cc
 8008b76:	2304      	movcc	r3, #4
 8008b78:	4418      	add	r0, r3
 8008b7a:	4443      	add	r3, r8
 8008b7c:	461e      	mov	r6, r3
 8008b7e:	4605      	mov	r5, r0
 8008b80:	4575      	cmp	r5, lr
 8008b82:	d30e      	bcc.n	8008ba2 <__mdiff+0xea>
 8008b84:	f10e 0103 	add.w	r1, lr, #3
 8008b88:	1a09      	subs	r1, r1, r0
 8008b8a:	f021 0103 	bic.w	r1, r1, #3
 8008b8e:	3803      	subs	r0, #3
 8008b90:	4586      	cmp	lr, r0
 8008b92:	bf38      	it	cc
 8008b94:	2100      	movcc	r1, #0
 8008b96:	4419      	add	r1, r3
 8008b98:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008b9c:	b18b      	cbz	r3, 8008bc2 <__mdiff+0x10a>
 8008b9e:	6117      	str	r7, [r2, #16]
 8008ba0:	e7a4      	b.n	8008aec <__mdiff+0x34>
 8008ba2:	f855 8b04 	ldr.w	r8, [r5], #4
 8008ba6:	fa1f f188 	uxth.w	r1, r8
 8008baa:	4461      	add	r1, ip
 8008bac:	140c      	asrs	r4, r1, #16
 8008bae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bb2:	b289      	uxth	r1, r1
 8008bb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008bb8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008bbc:	f846 1b04 	str.w	r1, [r6], #4
 8008bc0:	e7de      	b.n	8008b80 <__mdiff+0xc8>
 8008bc2:	3f01      	subs	r7, #1
 8008bc4:	e7e8      	b.n	8008b98 <__mdiff+0xe0>
 8008bc6:	bf00      	nop
 8008bc8:	0800bc03 	.word	0x0800bc03
 8008bcc:	0800bc14 	.word	0x0800bc14

08008bd0 <__d2b>:
 8008bd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008bda:	4690      	mov	r8, r2
 8008bdc:	461d      	mov	r5, r3
 8008bde:	f7ff fcd1 	bl	8008584 <_Balloc>
 8008be2:	4604      	mov	r4, r0
 8008be4:	b930      	cbnz	r0, 8008bf4 <__d2b+0x24>
 8008be6:	4602      	mov	r2, r0
 8008be8:	f240 310a 	movw	r1, #778	; 0x30a
 8008bec:	4b24      	ldr	r3, [pc, #144]	; (8008c80 <__d2b+0xb0>)
 8008bee:	4825      	ldr	r0, [pc, #148]	; (8008c84 <__d2b+0xb4>)
 8008bf0:	f000 faa6 	bl	8009140 <__assert_func>
 8008bf4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008bf8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008bfc:	bb2d      	cbnz	r5, 8008c4a <__d2b+0x7a>
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	f1b8 0300 	subs.w	r3, r8, #0
 8008c04:	d026      	beq.n	8008c54 <__d2b+0x84>
 8008c06:	4668      	mov	r0, sp
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	f7ff fd83 	bl	8008714 <__lo0bits>
 8008c0e:	9900      	ldr	r1, [sp, #0]
 8008c10:	b1f0      	cbz	r0, 8008c50 <__d2b+0x80>
 8008c12:	9a01      	ldr	r2, [sp, #4]
 8008c14:	f1c0 0320 	rsb	r3, r0, #32
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	40c2      	lsrs	r2, r0
 8008c20:	6163      	str	r3, [r4, #20]
 8008c22:	9201      	str	r2, [sp, #4]
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bf14      	ite	ne
 8008c2a:	2102      	movne	r1, #2
 8008c2c:	2101      	moveq	r1, #1
 8008c2e:	61a3      	str	r3, [r4, #24]
 8008c30:	6121      	str	r1, [r4, #16]
 8008c32:	b1c5      	cbz	r5, 8008c66 <__d2b+0x96>
 8008c34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c38:	4405      	add	r5, r0
 8008c3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c3e:	603d      	str	r5, [r7, #0]
 8008c40:	6030      	str	r0, [r6, #0]
 8008c42:	4620      	mov	r0, r4
 8008c44:	b002      	add	sp, #8
 8008c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c4e:	e7d6      	b.n	8008bfe <__d2b+0x2e>
 8008c50:	6161      	str	r1, [r4, #20]
 8008c52:	e7e7      	b.n	8008c24 <__d2b+0x54>
 8008c54:	a801      	add	r0, sp, #4
 8008c56:	f7ff fd5d 	bl	8008714 <__lo0bits>
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	6121      	str	r1, [r4, #16]
 8008c60:	6163      	str	r3, [r4, #20]
 8008c62:	3020      	adds	r0, #32
 8008c64:	e7e5      	b.n	8008c32 <__d2b+0x62>
 8008c66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008c6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c6e:	6038      	str	r0, [r7, #0]
 8008c70:	6918      	ldr	r0, [r3, #16]
 8008c72:	f7ff fd2f 	bl	80086d4 <__hi0bits>
 8008c76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008c7a:	6031      	str	r1, [r6, #0]
 8008c7c:	e7e1      	b.n	8008c42 <__d2b+0x72>
 8008c7e:	bf00      	nop
 8008c80:	0800bc03 	.word	0x0800bc03
 8008c84:	0800bc14 	.word	0x0800bc14

08008c88 <_calloc_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	fba1 5402 	umull	r5, r4, r1, r2
 8008c8e:	b934      	cbnz	r4, 8008c9e <_calloc_r+0x16>
 8008c90:	4629      	mov	r1, r5
 8008c92:	f000 f875 	bl	8008d80 <_malloc_r>
 8008c96:	4606      	mov	r6, r0
 8008c98:	b928      	cbnz	r0, 8008ca6 <_calloc_r+0x1e>
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	220c      	movs	r2, #12
 8008ca0:	2600      	movs	r6, #0
 8008ca2:	6002      	str	r2, [r0, #0]
 8008ca4:	e7f9      	b.n	8008c9a <_calloc_r+0x12>
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4621      	mov	r1, r4
 8008caa:	f7fe f941 	bl	8006f30 <memset>
 8008cae:	e7f4      	b.n	8008c9a <_calloc_r+0x12>

08008cb0 <_free_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d040      	beq.n	8008d3a <_free_r+0x8a>
 8008cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbc:	1f0c      	subs	r4, r1, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfb8      	it	lt
 8008cc2:	18e4      	addlt	r4, r4, r3
 8008cc4:	f000 fa98 	bl	80091f8 <__malloc_lock>
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	; (8008d3c <_free_r+0x8c>)
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	b933      	cbnz	r3, 8008cdc <_free_r+0x2c>
 8008cce:	6063      	str	r3, [r4, #4]
 8008cd0:	6014      	str	r4, [r2, #0]
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cd8:	f000 ba94 	b.w	8009204 <__malloc_unlock>
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	d908      	bls.n	8008cf2 <_free_r+0x42>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	1821      	adds	r1, r4, r0
 8008ce4:	428b      	cmp	r3, r1
 8008ce6:	bf01      	itttt	eq
 8008ce8:	6819      	ldreq	r1, [r3, #0]
 8008cea:	685b      	ldreq	r3, [r3, #4]
 8008cec:	1809      	addeq	r1, r1, r0
 8008cee:	6021      	streq	r1, [r4, #0]
 8008cf0:	e7ed      	b.n	8008cce <_free_r+0x1e>
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	b10b      	cbz	r3, 8008cfc <_free_r+0x4c>
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d9fa      	bls.n	8008cf2 <_free_r+0x42>
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	1850      	adds	r0, r2, r1
 8008d00:	42a0      	cmp	r0, r4
 8008d02:	d10b      	bne.n	8008d1c <_free_r+0x6c>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	4401      	add	r1, r0
 8008d08:	1850      	adds	r0, r2, r1
 8008d0a:	4283      	cmp	r3, r0
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	d1e0      	bne.n	8008cd2 <_free_r+0x22>
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	4401      	add	r1, r0
 8008d16:	6011      	str	r1, [r2, #0]
 8008d18:	6053      	str	r3, [r2, #4]
 8008d1a:	e7da      	b.n	8008cd2 <_free_r+0x22>
 8008d1c:	d902      	bls.n	8008d24 <_free_r+0x74>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	e7d6      	b.n	8008cd2 <_free_r+0x22>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	1821      	adds	r1, r4, r0
 8008d28:	428b      	cmp	r3, r1
 8008d2a:	bf01      	itttt	eq
 8008d2c:	6819      	ldreq	r1, [r3, #0]
 8008d2e:	685b      	ldreq	r3, [r3, #4]
 8008d30:	1809      	addeq	r1, r1, r0
 8008d32:	6021      	streq	r1, [r4, #0]
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	6054      	str	r4, [r2, #4]
 8008d38:	e7cb      	b.n	8008cd2 <_free_r+0x22>
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	2000066c 	.word	0x2000066c

08008d40 <sbrk_aligned>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	4e0e      	ldr	r6, [pc, #56]	; (8008d7c <sbrk_aligned+0x3c>)
 8008d44:	460c      	mov	r4, r1
 8008d46:	6831      	ldr	r1, [r6, #0]
 8008d48:	4605      	mov	r5, r0
 8008d4a:	b911      	cbnz	r1, 8008d52 <sbrk_aligned+0x12>
 8008d4c:	f000 f9e8 	bl	8009120 <_sbrk_r>
 8008d50:	6030      	str	r0, [r6, #0]
 8008d52:	4621      	mov	r1, r4
 8008d54:	4628      	mov	r0, r5
 8008d56:	f000 f9e3 	bl	8009120 <_sbrk_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	d00a      	beq.n	8008d74 <sbrk_aligned+0x34>
 8008d5e:	1cc4      	adds	r4, r0, #3
 8008d60:	f024 0403 	bic.w	r4, r4, #3
 8008d64:	42a0      	cmp	r0, r4
 8008d66:	d007      	beq.n	8008d78 <sbrk_aligned+0x38>
 8008d68:	1a21      	subs	r1, r4, r0
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 f9d8 	bl	8009120 <_sbrk_r>
 8008d70:	3001      	adds	r0, #1
 8008d72:	d101      	bne.n	8008d78 <sbrk_aligned+0x38>
 8008d74:	f04f 34ff 	mov.w	r4, #4294967295
 8008d78:	4620      	mov	r0, r4
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}
 8008d7c:	20000670 	.word	0x20000670

08008d80 <_malloc_r>:
 8008d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d84:	1ccd      	adds	r5, r1, #3
 8008d86:	f025 0503 	bic.w	r5, r5, #3
 8008d8a:	3508      	adds	r5, #8
 8008d8c:	2d0c      	cmp	r5, #12
 8008d8e:	bf38      	it	cc
 8008d90:	250c      	movcc	r5, #12
 8008d92:	2d00      	cmp	r5, #0
 8008d94:	4607      	mov	r7, r0
 8008d96:	db01      	blt.n	8008d9c <_malloc_r+0x1c>
 8008d98:	42a9      	cmp	r1, r5
 8008d9a:	d905      	bls.n	8008da8 <_malloc_r+0x28>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	2600      	movs	r6, #0
 8008da0:	603b      	str	r3, [r7, #0]
 8008da2:	4630      	mov	r0, r6
 8008da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da8:	4e2e      	ldr	r6, [pc, #184]	; (8008e64 <_malloc_r+0xe4>)
 8008daa:	f000 fa25 	bl	80091f8 <__malloc_lock>
 8008dae:	6833      	ldr	r3, [r6, #0]
 8008db0:	461c      	mov	r4, r3
 8008db2:	bb34      	cbnz	r4, 8008e02 <_malloc_r+0x82>
 8008db4:	4629      	mov	r1, r5
 8008db6:	4638      	mov	r0, r7
 8008db8:	f7ff ffc2 	bl	8008d40 <sbrk_aligned>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	d14d      	bne.n	8008e5e <_malloc_r+0xde>
 8008dc2:	6834      	ldr	r4, [r6, #0]
 8008dc4:	4626      	mov	r6, r4
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	d140      	bne.n	8008e4c <_malloc_r+0xcc>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4638      	mov	r0, r7
 8008dd0:	eb04 0803 	add.w	r8, r4, r3
 8008dd4:	f000 f9a4 	bl	8009120 <_sbrk_r>
 8008dd8:	4580      	cmp	r8, r0
 8008dda:	d13a      	bne.n	8008e52 <_malloc_r+0xd2>
 8008ddc:	6821      	ldr	r1, [r4, #0]
 8008dde:	3503      	adds	r5, #3
 8008de0:	1a6d      	subs	r5, r5, r1
 8008de2:	f025 0503 	bic.w	r5, r5, #3
 8008de6:	3508      	adds	r5, #8
 8008de8:	2d0c      	cmp	r5, #12
 8008dea:	bf38      	it	cc
 8008dec:	250c      	movcc	r5, #12
 8008dee:	4638      	mov	r0, r7
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7ff ffa5 	bl	8008d40 <sbrk_aligned>
 8008df6:	3001      	adds	r0, #1
 8008df8:	d02b      	beq.n	8008e52 <_malloc_r+0xd2>
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	442b      	add	r3, r5
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	e00e      	b.n	8008e20 <_malloc_r+0xa0>
 8008e02:	6822      	ldr	r2, [r4, #0]
 8008e04:	1b52      	subs	r2, r2, r5
 8008e06:	d41e      	bmi.n	8008e46 <_malloc_r+0xc6>
 8008e08:	2a0b      	cmp	r2, #11
 8008e0a:	d916      	bls.n	8008e3a <_malloc_r+0xba>
 8008e0c:	1961      	adds	r1, r4, r5
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	6025      	str	r5, [r4, #0]
 8008e12:	bf18      	it	ne
 8008e14:	6059      	strne	r1, [r3, #4]
 8008e16:	6863      	ldr	r3, [r4, #4]
 8008e18:	bf08      	it	eq
 8008e1a:	6031      	streq	r1, [r6, #0]
 8008e1c:	5162      	str	r2, [r4, r5]
 8008e1e:	604b      	str	r3, [r1, #4]
 8008e20:	4638      	mov	r0, r7
 8008e22:	f104 060b 	add.w	r6, r4, #11
 8008e26:	f000 f9ed 	bl	8009204 <__malloc_unlock>
 8008e2a:	f026 0607 	bic.w	r6, r6, #7
 8008e2e:	1d23      	adds	r3, r4, #4
 8008e30:	1af2      	subs	r2, r6, r3
 8008e32:	d0b6      	beq.n	8008da2 <_malloc_r+0x22>
 8008e34:	1b9b      	subs	r3, r3, r6
 8008e36:	50a3      	str	r3, [r4, r2]
 8008e38:	e7b3      	b.n	8008da2 <_malloc_r+0x22>
 8008e3a:	6862      	ldr	r2, [r4, #4]
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	bf0c      	ite	eq
 8008e40:	6032      	streq	r2, [r6, #0]
 8008e42:	605a      	strne	r2, [r3, #4]
 8008e44:	e7ec      	b.n	8008e20 <_malloc_r+0xa0>
 8008e46:	4623      	mov	r3, r4
 8008e48:	6864      	ldr	r4, [r4, #4]
 8008e4a:	e7b2      	b.n	8008db2 <_malloc_r+0x32>
 8008e4c:	4634      	mov	r4, r6
 8008e4e:	6876      	ldr	r6, [r6, #4]
 8008e50:	e7b9      	b.n	8008dc6 <_malloc_r+0x46>
 8008e52:	230c      	movs	r3, #12
 8008e54:	4638      	mov	r0, r7
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	f000 f9d4 	bl	8009204 <__malloc_unlock>
 8008e5c:	e7a1      	b.n	8008da2 <_malloc_r+0x22>
 8008e5e:	6025      	str	r5, [r4, #0]
 8008e60:	e7de      	b.n	8008e20 <_malloc_r+0xa0>
 8008e62:	bf00      	nop
 8008e64:	2000066c 	.word	0x2000066c

08008e68 <__ssputs_r>:
 8008e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6c:	688e      	ldr	r6, [r1, #8]
 8008e6e:	4682      	mov	sl, r0
 8008e70:	429e      	cmp	r6, r3
 8008e72:	460c      	mov	r4, r1
 8008e74:	4690      	mov	r8, r2
 8008e76:	461f      	mov	r7, r3
 8008e78:	d838      	bhi.n	8008eec <__ssputs_r+0x84>
 8008e7a:	898a      	ldrh	r2, [r1, #12]
 8008e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e80:	d032      	beq.n	8008ee8 <__ssputs_r+0x80>
 8008e82:	6825      	ldr	r5, [r4, #0]
 8008e84:	6909      	ldr	r1, [r1, #16]
 8008e86:	3301      	adds	r3, #1
 8008e88:	eba5 0901 	sub.w	r9, r5, r1
 8008e8c:	6965      	ldr	r5, [r4, #20]
 8008e8e:	444b      	add	r3, r9
 8008e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e98:	106d      	asrs	r5, r5, #1
 8008e9a:	429d      	cmp	r5, r3
 8008e9c:	bf38      	it	cc
 8008e9e:	461d      	movcc	r5, r3
 8008ea0:	0553      	lsls	r3, r2, #21
 8008ea2:	d531      	bpl.n	8008f08 <__ssputs_r+0xa0>
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	f7ff ff6b 	bl	8008d80 <_malloc_r>
 8008eaa:	4606      	mov	r6, r0
 8008eac:	b950      	cbnz	r0, 8008ec4 <__ssputs_r+0x5c>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb4:	f8ca 3000 	str.w	r3, [sl]
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec4:	464a      	mov	r2, r9
 8008ec6:	6921      	ldr	r1, [r4, #16]
 8008ec8:	f7ff fb4e 	bl	8008568 <memcpy>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	6126      	str	r6, [r4, #16]
 8008eda:	444e      	add	r6, r9
 8008edc:	6026      	str	r6, [r4, #0]
 8008ede:	463e      	mov	r6, r7
 8008ee0:	6165      	str	r5, [r4, #20]
 8008ee2:	eba5 0509 	sub.w	r5, r5, r9
 8008ee6:	60a5      	str	r5, [r4, #8]
 8008ee8:	42be      	cmp	r6, r7
 8008eea:	d900      	bls.n	8008eee <__ssputs_r+0x86>
 8008eec:	463e      	mov	r6, r7
 8008eee:	4632      	mov	r2, r6
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	f000 f966 	bl	80091c4 <memmove>
 8008ef8:	68a3      	ldr	r3, [r4, #8]
 8008efa:	2000      	movs	r0, #0
 8008efc:	1b9b      	subs	r3, r3, r6
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	4433      	add	r3, r6
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	e7db      	b.n	8008ec0 <__ssputs_r+0x58>
 8008f08:	462a      	mov	r2, r5
 8008f0a:	f000 f981 	bl	8009210 <_realloc_r>
 8008f0e:	4606      	mov	r6, r0
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d1e1      	bne.n	8008ed8 <__ssputs_r+0x70>
 8008f14:	4650      	mov	r0, sl
 8008f16:	6921      	ldr	r1, [r4, #16]
 8008f18:	f7ff feca 	bl	8008cb0 <_free_r>
 8008f1c:	e7c7      	b.n	8008eae <__ssputs_r+0x46>
	...

08008f20 <_svfiprintf_r>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	4698      	mov	r8, r3
 8008f26:	898b      	ldrh	r3, [r1, #12]
 8008f28:	4607      	mov	r7, r0
 8008f2a:	061b      	lsls	r3, r3, #24
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	4614      	mov	r4, r2
 8008f30:	b09d      	sub	sp, #116	; 0x74
 8008f32:	d50e      	bpl.n	8008f52 <_svfiprintf_r+0x32>
 8008f34:	690b      	ldr	r3, [r1, #16]
 8008f36:	b963      	cbnz	r3, 8008f52 <_svfiprintf_r+0x32>
 8008f38:	2140      	movs	r1, #64	; 0x40
 8008f3a:	f7ff ff21 	bl	8008d80 <_malloc_r>
 8008f3e:	6028      	str	r0, [r5, #0]
 8008f40:	6128      	str	r0, [r5, #16]
 8008f42:	b920      	cbnz	r0, 8008f4e <_svfiprintf_r+0x2e>
 8008f44:	230c      	movs	r3, #12
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	e0d1      	b.n	80090f2 <_svfiprintf_r+0x1d2>
 8008f4e:	2340      	movs	r3, #64	; 0x40
 8008f50:	616b      	str	r3, [r5, #20]
 8008f52:	2300      	movs	r3, #0
 8008f54:	9309      	str	r3, [sp, #36]	; 0x24
 8008f56:	2320      	movs	r3, #32
 8008f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f5c:	2330      	movs	r3, #48	; 0x30
 8008f5e:	f04f 0901 	mov.w	r9, #1
 8008f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800910c <_svfiprintf_r+0x1ec>
 8008f6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f6e:	4623      	mov	r3, r4
 8008f70:	469a      	mov	sl, r3
 8008f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f76:	b10a      	cbz	r2, 8008f7c <_svfiprintf_r+0x5c>
 8008f78:	2a25      	cmp	r2, #37	; 0x25
 8008f7a:	d1f9      	bne.n	8008f70 <_svfiprintf_r+0x50>
 8008f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f80:	d00b      	beq.n	8008f9a <_svfiprintf_r+0x7a>
 8008f82:	465b      	mov	r3, fp
 8008f84:	4622      	mov	r2, r4
 8008f86:	4629      	mov	r1, r5
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ff6d 	bl	8008e68 <__ssputs_r>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f000 80aa 	beq.w	80090e8 <_svfiprintf_r+0x1c8>
 8008f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f96:	445a      	add	r2, fp
 8008f98:	9209      	str	r2, [sp, #36]	; 0x24
 8008f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80a2 	beq.w	80090e8 <_svfiprintf_r+0x1c8>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fae:	f10a 0a01 	add.w	sl, sl, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fba:	931a      	str	r3, [sp, #104]	; 0x68
 8008fbc:	4654      	mov	r4, sl
 8008fbe:	2205      	movs	r2, #5
 8008fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc4:	4851      	ldr	r0, [pc, #324]	; (800910c <_svfiprintf_r+0x1ec>)
 8008fc6:	f7ff fac1 	bl	800854c <memchr>
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	b9d8      	cbnz	r0, 8009006 <_svfiprintf_r+0xe6>
 8008fce:	06d0      	lsls	r0, r2, #27
 8008fd0:	bf44      	itt	mi
 8008fd2:	2320      	movmi	r3, #32
 8008fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd8:	0711      	lsls	r1, r2, #28
 8008fda:	bf44      	itt	mi
 8008fdc:	232b      	movmi	r3, #43	; 0x2b
 8008fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe8:	d015      	beq.n	8009016 <_svfiprintf_r+0xf6>
 8008fea:	4654      	mov	r4, sl
 8008fec:	2000      	movs	r0, #0
 8008fee:	f04f 0c0a 	mov.w	ip, #10
 8008ff2:	9a07      	ldr	r2, [sp, #28]
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffa:	3b30      	subs	r3, #48	; 0x30
 8008ffc:	2b09      	cmp	r3, #9
 8008ffe:	d94e      	bls.n	800909e <_svfiprintf_r+0x17e>
 8009000:	b1b0      	cbz	r0, 8009030 <_svfiprintf_r+0x110>
 8009002:	9207      	str	r2, [sp, #28]
 8009004:	e014      	b.n	8009030 <_svfiprintf_r+0x110>
 8009006:	eba0 0308 	sub.w	r3, r0, r8
 800900a:	fa09 f303 	lsl.w	r3, r9, r3
 800900e:	4313      	orrs	r3, r2
 8009010:	46a2      	mov	sl, r4
 8009012:	9304      	str	r3, [sp, #16]
 8009014:	e7d2      	b.n	8008fbc <_svfiprintf_r+0x9c>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	1d19      	adds	r1, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	9103      	str	r1, [sp, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfbb      	ittet	lt
 8009022:	425b      	neglt	r3, r3
 8009024:	f042 0202 	orrlt.w	r2, r2, #2
 8009028:	9307      	strge	r3, [sp, #28]
 800902a:	9307      	strlt	r3, [sp, #28]
 800902c:	bfb8      	it	lt
 800902e:	9204      	strlt	r2, [sp, #16]
 8009030:	7823      	ldrb	r3, [r4, #0]
 8009032:	2b2e      	cmp	r3, #46	; 0x2e
 8009034:	d10c      	bne.n	8009050 <_svfiprintf_r+0x130>
 8009036:	7863      	ldrb	r3, [r4, #1]
 8009038:	2b2a      	cmp	r3, #42	; 0x2a
 800903a:	d135      	bne.n	80090a8 <_svfiprintf_r+0x188>
 800903c:	9b03      	ldr	r3, [sp, #12]
 800903e:	3402      	adds	r4, #2
 8009040:	1d1a      	adds	r2, r3, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	9203      	str	r2, [sp, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfb8      	it	lt
 800904a:	f04f 33ff 	movlt.w	r3, #4294967295
 800904e:	9305      	str	r3, [sp, #20]
 8009050:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009110 <_svfiprintf_r+0x1f0>
 8009054:	2203      	movs	r2, #3
 8009056:	4650      	mov	r0, sl
 8009058:	7821      	ldrb	r1, [r4, #0]
 800905a:	f7ff fa77 	bl	800854c <memchr>
 800905e:	b140      	cbz	r0, 8009072 <_svfiprintf_r+0x152>
 8009060:	2340      	movs	r3, #64	; 0x40
 8009062:	eba0 000a 	sub.w	r0, r0, sl
 8009066:	fa03 f000 	lsl.w	r0, r3, r0
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	3401      	adds	r4, #1
 800906e:	4303      	orrs	r3, r0
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009076:	2206      	movs	r2, #6
 8009078:	4826      	ldr	r0, [pc, #152]	; (8009114 <_svfiprintf_r+0x1f4>)
 800907a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800907e:	f7ff fa65 	bl	800854c <memchr>
 8009082:	2800      	cmp	r0, #0
 8009084:	d038      	beq.n	80090f8 <_svfiprintf_r+0x1d8>
 8009086:	4b24      	ldr	r3, [pc, #144]	; (8009118 <_svfiprintf_r+0x1f8>)
 8009088:	bb1b      	cbnz	r3, 80090d2 <_svfiprintf_r+0x1b2>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	3307      	adds	r3, #7
 800908e:	f023 0307 	bic.w	r3, r3, #7
 8009092:	3308      	adds	r3, #8
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009098:	4433      	add	r3, r6
 800909a:	9309      	str	r3, [sp, #36]	; 0x24
 800909c:	e767      	b.n	8008f6e <_svfiprintf_r+0x4e>
 800909e:	460c      	mov	r4, r1
 80090a0:	2001      	movs	r0, #1
 80090a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090a6:	e7a5      	b.n	8008ff4 <_svfiprintf_r+0xd4>
 80090a8:	2300      	movs	r3, #0
 80090aa:	f04f 0c0a 	mov.w	ip, #10
 80090ae:	4619      	mov	r1, r3
 80090b0:	3401      	adds	r4, #1
 80090b2:	9305      	str	r3, [sp, #20]
 80090b4:	4620      	mov	r0, r4
 80090b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ba:	3a30      	subs	r2, #48	; 0x30
 80090bc:	2a09      	cmp	r2, #9
 80090be:	d903      	bls.n	80090c8 <_svfiprintf_r+0x1a8>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0c5      	beq.n	8009050 <_svfiprintf_r+0x130>
 80090c4:	9105      	str	r1, [sp, #20]
 80090c6:	e7c3      	b.n	8009050 <_svfiprintf_r+0x130>
 80090c8:	4604      	mov	r4, r0
 80090ca:	2301      	movs	r3, #1
 80090cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d0:	e7f0      	b.n	80090b4 <_svfiprintf_r+0x194>
 80090d2:	ab03      	add	r3, sp, #12
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	462a      	mov	r2, r5
 80090d8:	4638      	mov	r0, r7
 80090da:	4b10      	ldr	r3, [pc, #64]	; (800911c <_svfiprintf_r+0x1fc>)
 80090dc:	a904      	add	r1, sp, #16
 80090de:	f7fd ffcd 	bl	800707c <_printf_float>
 80090e2:	1c42      	adds	r2, r0, #1
 80090e4:	4606      	mov	r6, r0
 80090e6:	d1d6      	bne.n	8009096 <_svfiprintf_r+0x176>
 80090e8:	89ab      	ldrh	r3, [r5, #12]
 80090ea:	065b      	lsls	r3, r3, #25
 80090ec:	f53f af2c 	bmi.w	8008f48 <_svfiprintf_r+0x28>
 80090f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f2:	b01d      	add	sp, #116	; 0x74
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	ab03      	add	r3, sp, #12
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	462a      	mov	r2, r5
 80090fe:	4638      	mov	r0, r7
 8009100:	4b06      	ldr	r3, [pc, #24]	; (800911c <_svfiprintf_r+0x1fc>)
 8009102:	a904      	add	r1, sp, #16
 8009104:	f7fe fa56 	bl	80075b4 <_printf_i>
 8009108:	e7eb      	b.n	80090e2 <_svfiprintf_r+0x1c2>
 800910a:	bf00      	nop
 800910c:	0800bd6c 	.word	0x0800bd6c
 8009110:	0800bd72 	.word	0x0800bd72
 8009114:	0800bd76 	.word	0x0800bd76
 8009118:	0800707d 	.word	0x0800707d
 800911c:	08008e69 	.word	0x08008e69

08009120 <_sbrk_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	2300      	movs	r3, #0
 8009124:	4d05      	ldr	r5, [pc, #20]	; (800913c <_sbrk_r+0x1c>)
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f9 fc68 	bl	8002a00 <_sbrk>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_sbrk_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_sbrk_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20000674 	.word	0x20000674

08009140 <__assert_func>:
 8009140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009142:	4614      	mov	r4, r2
 8009144:	461a      	mov	r2, r3
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <__assert_func+0x2c>)
 8009148:	4605      	mov	r5, r0
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68d8      	ldr	r0, [r3, #12]
 800914e:	b14c      	cbz	r4, 8009164 <__assert_func+0x24>
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <__assert_func+0x30>)
 8009152:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009156:	9100      	str	r1, [sp, #0]
 8009158:	462b      	mov	r3, r5
 800915a:	4906      	ldr	r1, [pc, #24]	; (8009174 <__assert_func+0x34>)
 800915c:	f000 f80e 	bl	800917c <fiprintf>
 8009160:	f000 faaa 	bl	80096b8 <abort>
 8009164:	4b04      	ldr	r3, [pc, #16]	; (8009178 <__assert_func+0x38>)
 8009166:	461c      	mov	r4, r3
 8009168:	e7f3      	b.n	8009152 <__assert_func+0x12>
 800916a:	bf00      	nop
 800916c:	2000000c 	.word	0x2000000c
 8009170:	0800bd7d 	.word	0x0800bd7d
 8009174:	0800bd8a 	.word	0x0800bd8a
 8009178:	0800bdb8 	.word	0x0800bdb8

0800917c <fiprintf>:
 800917c:	b40e      	push	{r1, r2, r3}
 800917e:	b503      	push	{r0, r1, lr}
 8009180:	4601      	mov	r1, r0
 8009182:	ab03      	add	r3, sp, #12
 8009184:	4805      	ldr	r0, [pc, #20]	; (800919c <fiprintf+0x20>)
 8009186:	f853 2b04 	ldr.w	r2, [r3], #4
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f000 f895 	bl	80092bc <_vfiprintf_r>
 8009192:	b002      	add	sp, #8
 8009194:	f85d eb04 	ldr.w	lr, [sp], #4
 8009198:	b003      	add	sp, #12
 800919a:	4770      	bx	lr
 800919c:	2000000c 	.word	0x2000000c

080091a0 <__ascii_mbtowc>:
 80091a0:	b082      	sub	sp, #8
 80091a2:	b901      	cbnz	r1, 80091a6 <__ascii_mbtowc+0x6>
 80091a4:	a901      	add	r1, sp, #4
 80091a6:	b142      	cbz	r2, 80091ba <__ascii_mbtowc+0x1a>
 80091a8:	b14b      	cbz	r3, 80091be <__ascii_mbtowc+0x1e>
 80091aa:	7813      	ldrb	r3, [r2, #0]
 80091ac:	600b      	str	r3, [r1, #0]
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	1e10      	subs	r0, r2, #0
 80091b2:	bf18      	it	ne
 80091b4:	2001      	movne	r0, #1
 80091b6:	b002      	add	sp, #8
 80091b8:	4770      	bx	lr
 80091ba:	4610      	mov	r0, r2
 80091bc:	e7fb      	b.n	80091b6 <__ascii_mbtowc+0x16>
 80091be:	f06f 0001 	mvn.w	r0, #1
 80091c2:	e7f8      	b.n	80091b6 <__ascii_mbtowc+0x16>

080091c4 <memmove>:
 80091c4:	4288      	cmp	r0, r1
 80091c6:	b510      	push	{r4, lr}
 80091c8:	eb01 0402 	add.w	r4, r1, r2
 80091cc:	d902      	bls.n	80091d4 <memmove+0x10>
 80091ce:	4284      	cmp	r4, r0
 80091d0:	4623      	mov	r3, r4
 80091d2:	d807      	bhi.n	80091e4 <memmove+0x20>
 80091d4:	1e43      	subs	r3, r0, #1
 80091d6:	42a1      	cmp	r1, r4
 80091d8:	d008      	beq.n	80091ec <memmove+0x28>
 80091da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091e2:	e7f8      	b.n	80091d6 <memmove+0x12>
 80091e4:	4601      	mov	r1, r0
 80091e6:	4402      	add	r2, r0
 80091e8:	428a      	cmp	r2, r1
 80091ea:	d100      	bne.n	80091ee <memmove+0x2a>
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091f6:	e7f7      	b.n	80091e8 <memmove+0x24>

080091f8 <__malloc_lock>:
 80091f8:	4801      	ldr	r0, [pc, #4]	; (8009200 <__malloc_lock+0x8>)
 80091fa:	f000 bc19 	b.w	8009a30 <__retarget_lock_acquire_recursive>
 80091fe:	bf00      	nop
 8009200:	20000678 	.word	0x20000678

08009204 <__malloc_unlock>:
 8009204:	4801      	ldr	r0, [pc, #4]	; (800920c <__malloc_unlock+0x8>)
 8009206:	f000 bc14 	b.w	8009a32 <__retarget_lock_release_recursive>
 800920a:	bf00      	nop
 800920c:	20000678 	.word	0x20000678

08009210 <_realloc_r>:
 8009210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009214:	4680      	mov	r8, r0
 8009216:	4614      	mov	r4, r2
 8009218:	460e      	mov	r6, r1
 800921a:	b921      	cbnz	r1, 8009226 <_realloc_r+0x16>
 800921c:	4611      	mov	r1, r2
 800921e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009222:	f7ff bdad 	b.w	8008d80 <_malloc_r>
 8009226:	b92a      	cbnz	r2, 8009234 <_realloc_r+0x24>
 8009228:	f7ff fd42 	bl	8008cb0 <_free_r>
 800922c:	4625      	mov	r5, r4
 800922e:	4628      	mov	r0, r5
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009234:	f000 fc64 	bl	8009b00 <_malloc_usable_size_r>
 8009238:	4284      	cmp	r4, r0
 800923a:	4607      	mov	r7, r0
 800923c:	d802      	bhi.n	8009244 <_realloc_r+0x34>
 800923e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009242:	d812      	bhi.n	800926a <_realloc_r+0x5a>
 8009244:	4621      	mov	r1, r4
 8009246:	4640      	mov	r0, r8
 8009248:	f7ff fd9a 	bl	8008d80 <_malloc_r>
 800924c:	4605      	mov	r5, r0
 800924e:	2800      	cmp	r0, #0
 8009250:	d0ed      	beq.n	800922e <_realloc_r+0x1e>
 8009252:	42bc      	cmp	r4, r7
 8009254:	4622      	mov	r2, r4
 8009256:	4631      	mov	r1, r6
 8009258:	bf28      	it	cs
 800925a:	463a      	movcs	r2, r7
 800925c:	f7ff f984 	bl	8008568 <memcpy>
 8009260:	4631      	mov	r1, r6
 8009262:	4640      	mov	r0, r8
 8009264:	f7ff fd24 	bl	8008cb0 <_free_r>
 8009268:	e7e1      	b.n	800922e <_realloc_r+0x1e>
 800926a:	4635      	mov	r5, r6
 800926c:	e7df      	b.n	800922e <_realloc_r+0x1e>

0800926e <__sfputc_r>:
 800926e:	6893      	ldr	r3, [r2, #8]
 8009270:	b410      	push	{r4}
 8009272:	3b01      	subs	r3, #1
 8009274:	2b00      	cmp	r3, #0
 8009276:	6093      	str	r3, [r2, #8]
 8009278:	da07      	bge.n	800928a <__sfputc_r+0x1c>
 800927a:	6994      	ldr	r4, [r2, #24]
 800927c:	42a3      	cmp	r3, r4
 800927e:	db01      	blt.n	8009284 <__sfputc_r+0x16>
 8009280:	290a      	cmp	r1, #10
 8009282:	d102      	bne.n	800928a <__sfputc_r+0x1c>
 8009284:	bc10      	pop	{r4}
 8009286:	f000 b949 	b.w	800951c <__swbuf_r>
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	1c58      	adds	r0, r3, #1
 800928e:	6010      	str	r0, [r2, #0]
 8009290:	7019      	strb	r1, [r3, #0]
 8009292:	4608      	mov	r0, r1
 8009294:	bc10      	pop	{r4}
 8009296:	4770      	bx	lr

08009298 <__sfputs_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	4614      	mov	r4, r2
 80092a0:	18d5      	adds	r5, r2, r3
 80092a2:	42ac      	cmp	r4, r5
 80092a4:	d101      	bne.n	80092aa <__sfputs_r+0x12>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e007      	b.n	80092ba <__sfputs_r+0x22>
 80092aa:	463a      	mov	r2, r7
 80092ac:	4630      	mov	r0, r6
 80092ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b2:	f7ff ffdc 	bl	800926e <__sfputc_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d1f3      	bne.n	80092a2 <__sfputs_r+0xa>
 80092ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092bc <_vfiprintf_r>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	460d      	mov	r5, r1
 80092c2:	4614      	mov	r4, r2
 80092c4:	4698      	mov	r8, r3
 80092c6:	4606      	mov	r6, r0
 80092c8:	b09d      	sub	sp, #116	; 0x74
 80092ca:	b118      	cbz	r0, 80092d4 <_vfiprintf_r+0x18>
 80092cc:	6983      	ldr	r3, [r0, #24]
 80092ce:	b90b      	cbnz	r3, 80092d4 <_vfiprintf_r+0x18>
 80092d0:	f000 fb10 	bl	80098f4 <__sinit>
 80092d4:	4b89      	ldr	r3, [pc, #548]	; (80094fc <_vfiprintf_r+0x240>)
 80092d6:	429d      	cmp	r5, r3
 80092d8:	d11b      	bne.n	8009312 <_vfiprintf_r+0x56>
 80092da:	6875      	ldr	r5, [r6, #4]
 80092dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092de:	07d9      	lsls	r1, r3, #31
 80092e0:	d405      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	059a      	lsls	r2, r3, #22
 80092e6:	d402      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ea:	f000 fba1 	bl	8009a30 <__retarget_lock_acquire_recursive>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	071b      	lsls	r3, r3, #28
 80092f2:	d501      	bpl.n	80092f8 <_vfiprintf_r+0x3c>
 80092f4:	692b      	ldr	r3, [r5, #16]
 80092f6:	b9eb      	cbnz	r3, 8009334 <_vfiprintf_r+0x78>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4630      	mov	r0, r6
 80092fc:	f000 f96e 	bl	80095dc <__swsetup_r>
 8009300:	b1c0      	cbz	r0, 8009334 <_vfiprintf_r+0x78>
 8009302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009304:	07dc      	lsls	r4, r3, #31
 8009306:	d50e      	bpl.n	8009326 <_vfiprintf_r+0x6a>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	b01d      	add	sp, #116	; 0x74
 800930e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009312:	4b7b      	ldr	r3, [pc, #492]	; (8009500 <_vfiprintf_r+0x244>)
 8009314:	429d      	cmp	r5, r3
 8009316:	d101      	bne.n	800931c <_vfiprintf_r+0x60>
 8009318:	68b5      	ldr	r5, [r6, #8]
 800931a:	e7df      	b.n	80092dc <_vfiprintf_r+0x20>
 800931c:	4b79      	ldr	r3, [pc, #484]	; (8009504 <_vfiprintf_r+0x248>)
 800931e:	429d      	cmp	r5, r3
 8009320:	bf08      	it	eq
 8009322:	68f5      	ldreq	r5, [r6, #12]
 8009324:	e7da      	b.n	80092dc <_vfiprintf_r+0x20>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	0598      	lsls	r0, r3, #22
 800932a:	d4ed      	bmi.n	8009308 <_vfiprintf_r+0x4c>
 800932c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800932e:	f000 fb80 	bl	8009a32 <__retarget_lock_release_recursive>
 8009332:	e7e9      	b.n	8009308 <_vfiprintf_r+0x4c>
 8009334:	2300      	movs	r3, #0
 8009336:	9309      	str	r3, [sp, #36]	; 0x24
 8009338:	2320      	movs	r3, #32
 800933a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800933e:	2330      	movs	r3, #48	; 0x30
 8009340:	f04f 0901 	mov.w	r9, #1
 8009344:	f8cd 800c 	str.w	r8, [sp, #12]
 8009348:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009508 <_vfiprintf_r+0x24c>
 800934c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009350:	4623      	mov	r3, r4
 8009352:	469a      	mov	sl, r3
 8009354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009358:	b10a      	cbz	r2, 800935e <_vfiprintf_r+0xa2>
 800935a:	2a25      	cmp	r2, #37	; 0x25
 800935c:	d1f9      	bne.n	8009352 <_vfiprintf_r+0x96>
 800935e:	ebba 0b04 	subs.w	fp, sl, r4
 8009362:	d00b      	beq.n	800937c <_vfiprintf_r+0xc0>
 8009364:	465b      	mov	r3, fp
 8009366:	4622      	mov	r2, r4
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ff94 	bl	8009298 <__sfputs_r>
 8009370:	3001      	adds	r0, #1
 8009372:	f000 80aa 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009378:	445a      	add	r2, fp
 800937a:	9209      	str	r2, [sp, #36]	; 0x24
 800937c:	f89a 3000 	ldrb.w	r3, [sl]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80a2 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009386:	2300      	movs	r3, #0
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009390:	f10a 0a01 	add.w	sl, sl, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800939c:	931a      	str	r3, [sp, #104]	; 0x68
 800939e:	4654      	mov	r4, sl
 80093a0:	2205      	movs	r2, #5
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4858      	ldr	r0, [pc, #352]	; (8009508 <_vfiprintf_r+0x24c>)
 80093a8:	f7ff f8d0 	bl	800854c <memchr>
 80093ac:	9a04      	ldr	r2, [sp, #16]
 80093ae:	b9d8      	cbnz	r0, 80093e8 <_vfiprintf_r+0x12c>
 80093b0:	06d1      	lsls	r1, r2, #27
 80093b2:	bf44      	itt	mi
 80093b4:	2320      	movmi	r3, #32
 80093b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ba:	0713      	lsls	r3, r2, #28
 80093bc:	bf44      	itt	mi
 80093be:	232b      	movmi	r3, #43	; 0x2b
 80093c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c4:	f89a 3000 	ldrb.w	r3, [sl]
 80093c8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ca:	d015      	beq.n	80093f8 <_vfiprintf_r+0x13c>
 80093cc:	4654      	mov	r4, sl
 80093ce:	2000      	movs	r0, #0
 80093d0:	f04f 0c0a 	mov.w	ip, #10
 80093d4:	9a07      	ldr	r2, [sp, #28]
 80093d6:	4621      	mov	r1, r4
 80093d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093dc:	3b30      	subs	r3, #48	; 0x30
 80093de:	2b09      	cmp	r3, #9
 80093e0:	d94e      	bls.n	8009480 <_vfiprintf_r+0x1c4>
 80093e2:	b1b0      	cbz	r0, 8009412 <_vfiprintf_r+0x156>
 80093e4:	9207      	str	r2, [sp, #28]
 80093e6:	e014      	b.n	8009412 <_vfiprintf_r+0x156>
 80093e8:	eba0 0308 	sub.w	r3, r0, r8
 80093ec:	fa09 f303 	lsl.w	r3, r9, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	46a2      	mov	sl, r4
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	e7d2      	b.n	800939e <_vfiprintf_r+0xe2>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	1d19      	adds	r1, r3, #4
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	9103      	str	r1, [sp, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfbb      	ittet	lt
 8009404:	425b      	neglt	r3, r3
 8009406:	f042 0202 	orrlt.w	r2, r2, #2
 800940a:	9307      	strge	r3, [sp, #28]
 800940c:	9307      	strlt	r3, [sp, #28]
 800940e:	bfb8      	it	lt
 8009410:	9204      	strlt	r2, [sp, #16]
 8009412:	7823      	ldrb	r3, [r4, #0]
 8009414:	2b2e      	cmp	r3, #46	; 0x2e
 8009416:	d10c      	bne.n	8009432 <_vfiprintf_r+0x176>
 8009418:	7863      	ldrb	r3, [r4, #1]
 800941a:	2b2a      	cmp	r3, #42	; 0x2a
 800941c:	d135      	bne.n	800948a <_vfiprintf_r+0x1ce>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	3402      	adds	r4, #2
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	9203      	str	r2, [sp, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bfb8      	it	lt
 800942c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800950c <_vfiprintf_r+0x250>
 8009436:	2203      	movs	r2, #3
 8009438:	4650      	mov	r0, sl
 800943a:	7821      	ldrb	r1, [r4, #0]
 800943c:	f7ff f886 	bl	800854c <memchr>
 8009440:	b140      	cbz	r0, 8009454 <_vfiprintf_r+0x198>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	eba0 000a 	sub.w	r0, r0, sl
 8009448:	fa03 f000 	lsl.w	r0, r3, r0
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	3401      	adds	r4, #1
 8009450:	4303      	orrs	r3, r0
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009458:	2206      	movs	r2, #6
 800945a:	482d      	ldr	r0, [pc, #180]	; (8009510 <_vfiprintf_r+0x254>)
 800945c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009460:	f7ff f874 	bl	800854c <memchr>
 8009464:	2800      	cmp	r0, #0
 8009466:	d03f      	beq.n	80094e8 <_vfiprintf_r+0x22c>
 8009468:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <_vfiprintf_r+0x258>)
 800946a:	bb1b      	cbnz	r3, 80094b4 <_vfiprintf_r+0x1f8>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	3307      	adds	r3, #7
 8009470:	f023 0307 	bic.w	r3, r3, #7
 8009474:	3308      	adds	r3, #8
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	443b      	add	r3, r7
 800947c:	9309      	str	r3, [sp, #36]	; 0x24
 800947e:	e767      	b.n	8009350 <_vfiprintf_r+0x94>
 8009480:	460c      	mov	r4, r1
 8009482:	2001      	movs	r0, #1
 8009484:	fb0c 3202 	mla	r2, ip, r2, r3
 8009488:	e7a5      	b.n	80093d6 <_vfiprintf_r+0x11a>
 800948a:	2300      	movs	r3, #0
 800948c:	f04f 0c0a 	mov.w	ip, #10
 8009490:	4619      	mov	r1, r3
 8009492:	3401      	adds	r4, #1
 8009494:	9305      	str	r3, [sp, #20]
 8009496:	4620      	mov	r0, r4
 8009498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800949c:	3a30      	subs	r2, #48	; 0x30
 800949e:	2a09      	cmp	r2, #9
 80094a0:	d903      	bls.n	80094aa <_vfiprintf_r+0x1ee>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0c5      	beq.n	8009432 <_vfiprintf_r+0x176>
 80094a6:	9105      	str	r1, [sp, #20]
 80094a8:	e7c3      	b.n	8009432 <_vfiprintf_r+0x176>
 80094aa:	4604      	mov	r4, r0
 80094ac:	2301      	movs	r3, #1
 80094ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80094b2:	e7f0      	b.n	8009496 <_vfiprintf_r+0x1da>
 80094b4:	ab03      	add	r3, sp, #12
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	462a      	mov	r2, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	4b16      	ldr	r3, [pc, #88]	; (8009518 <_vfiprintf_r+0x25c>)
 80094be:	a904      	add	r1, sp, #16
 80094c0:	f7fd fddc 	bl	800707c <_printf_float>
 80094c4:	4607      	mov	r7, r0
 80094c6:	1c78      	adds	r0, r7, #1
 80094c8:	d1d6      	bne.n	8009478 <_vfiprintf_r+0x1bc>
 80094ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094cc:	07d9      	lsls	r1, r3, #31
 80094ce:	d405      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d0:	89ab      	ldrh	r3, [r5, #12]
 80094d2:	059a      	lsls	r2, r3, #22
 80094d4:	d402      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d8:	f000 faab 	bl	8009a32 <__retarget_lock_release_recursive>
 80094dc:	89ab      	ldrh	r3, [r5, #12]
 80094de:	065b      	lsls	r3, r3, #25
 80094e0:	f53f af12 	bmi.w	8009308 <_vfiprintf_r+0x4c>
 80094e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e6:	e711      	b.n	800930c <_vfiprintf_r+0x50>
 80094e8:	ab03      	add	r3, sp, #12
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	462a      	mov	r2, r5
 80094ee:	4630      	mov	r0, r6
 80094f0:	4b09      	ldr	r3, [pc, #36]	; (8009518 <_vfiprintf_r+0x25c>)
 80094f2:	a904      	add	r1, sp, #16
 80094f4:	f7fe f85e 	bl	80075b4 <_printf_i>
 80094f8:	e7e4      	b.n	80094c4 <_vfiprintf_r+0x208>
 80094fa:	bf00      	nop
 80094fc:	0800bee4 	.word	0x0800bee4
 8009500:	0800bf04 	.word	0x0800bf04
 8009504:	0800bec4 	.word	0x0800bec4
 8009508:	0800bd6c 	.word	0x0800bd6c
 800950c:	0800bd72 	.word	0x0800bd72
 8009510:	0800bd76 	.word	0x0800bd76
 8009514:	0800707d 	.word	0x0800707d
 8009518:	08009299 	.word	0x08009299

0800951c <__swbuf_r>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	460e      	mov	r6, r1
 8009520:	4614      	mov	r4, r2
 8009522:	4605      	mov	r5, r0
 8009524:	b118      	cbz	r0, 800952e <__swbuf_r+0x12>
 8009526:	6983      	ldr	r3, [r0, #24]
 8009528:	b90b      	cbnz	r3, 800952e <__swbuf_r+0x12>
 800952a:	f000 f9e3 	bl	80098f4 <__sinit>
 800952e:	4b21      	ldr	r3, [pc, #132]	; (80095b4 <__swbuf_r+0x98>)
 8009530:	429c      	cmp	r4, r3
 8009532:	d12b      	bne.n	800958c <__swbuf_r+0x70>
 8009534:	686c      	ldr	r4, [r5, #4]
 8009536:	69a3      	ldr	r3, [r4, #24]
 8009538:	60a3      	str	r3, [r4, #8]
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	071a      	lsls	r2, r3, #28
 800953e:	d52f      	bpl.n	80095a0 <__swbuf_r+0x84>
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	b36b      	cbz	r3, 80095a0 <__swbuf_r+0x84>
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	b2f6      	uxtb	r6, r6
 800954a:	1ac0      	subs	r0, r0, r3
 800954c:	6963      	ldr	r3, [r4, #20]
 800954e:	4637      	mov	r7, r6
 8009550:	4283      	cmp	r3, r0
 8009552:	dc04      	bgt.n	800955e <__swbuf_r+0x42>
 8009554:	4621      	mov	r1, r4
 8009556:	4628      	mov	r0, r5
 8009558:	f000 f938 	bl	80097cc <_fflush_r>
 800955c:	bb30      	cbnz	r0, 80095ac <__swbuf_r+0x90>
 800955e:	68a3      	ldr	r3, [r4, #8]
 8009560:	3001      	adds	r0, #1
 8009562:	3b01      	subs	r3, #1
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	6022      	str	r2, [r4, #0]
 800956c:	701e      	strb	r6, [r3, #0]
 800956e:	6963      	ldr	r3, [r4, #20]
 8009570:	4283      	cmp	r3, r0
 8009572:	d004      	beq.n	800957e <__swbuf_r+0x62>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	07db      	lsls	r3, r3, #31
 8009578:	d506      	bpl.n	8009588 <__swbuf_r+0x6c>
 800957a:	2e0a      	cmp	r6, #10
 800957c:	d104      	bne.n	8009588 <__swbuf_r+0x6c>
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f000 f923 	bl	80097cc <_fflush_r>
 8009586:	b988      	cbnz	r0, 80095ac <__swbuf_r+0x90>
 8009588:	4638      	mov	r0, r7
 800958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <__swbuf_r+0x9c>)
 800958e:	429c      	cmp	r4, r3
 8009590:	d101      	bne.n	8009596 <__swbuf_r+0x7a>
 8009592:	68ac      	ldr	r4, [r5, #8]
 8009594:	e7cf      	b.n	8009536 <__swbuf_r+0x1a>
 8009596:	4b09      	ldr	r3, [pc, #36]	; (80095bc <__swbuf_r+0xa0>)
 8009598:	429c      	cmp	r4, r3
 800959a:	bf08      	it	eq
 800959c:	68ec      	ldreq	r4, [r5, #12]
 800959e:	e7ca      	b.n	8009536 <__swbuf_r+0x1a>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f81a 	bl	80095dc <__swsetup_r>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d0cb      	beq.n	8009544 <__swbuf_r+0x28>
 80095ac:	f04f 37ff 	mov.w	r7, #4294967295
 80095b0:	e7ea      	b.n	8009588 <__swbuf_r+0x6c>
 80095b2:	bf00      	nop
 80095b4:	0800bee4 	.word	0x0800bee4
 80095b8:	0800bf04 	.word	0x0800bf04
 80095bc:	0800bec4 	.word	0x0800bec4

080095c0 <__ascii_wctomb>:
 80095c0:	4603      	mov	r3, r0
 80095c2:	4608      	mov	r0, r1
 80095c4:	b141      	cbz	r1, 80095d8 <__ascii_wctomb+0x18>
 80095c6:	2aff      	cmp	r2, #255	; 0xff
 80095c8:	d904      	bls.n	80095d4 <__ascii_wctomb+0x14>
 80095ca:	228a      	movs	r2, #138	; 0x8a
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	4770      	bx	lr
 80095d4:	2001      	movs	r0, #1
 80095d6:	700a      	strb	r2, [r1, #0]
 80095d8:	4770      	bx	lr
	...

080095dc <__swsetup_r>:
 80095dc:	4b32      	ldr	r3, [pc, #200]	; (80096a8 <__swsetup_r+0xcc>)
 80095de:	b570      	push	{r4, r5, r6, lr}
 80095e0:	681d      	ldr	r5, [r3, #0]
 80095e2:	4606      	mov	r6, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	b125      	cbz	r5, 80095f2 <__swsetup_r+0x16>
 80095e8:	69ab      	ldr	r3, [r5, #24]
 80095ea:	b913      	cbnz	r3, 80095f2 <__swsetup_r+0x16>
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 f981 	bl	80098f4 <__sinit>
 80095f2:	4b2e      	ldr	r3, [pc, #184]	; (80096ac <__swsetup_r+0xd0>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	d10f      	bne.n	8009618 <__swsetup_r+0x3c>
 80095f8:	686c      	ldr	r4, [r5, #4]
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009600:	0719      	lsls	r1, r3, #28
 8009602:	d42c      	bmi.n	800965e <__swsetup_r+0x82>
 8009604:	06dd      	lsls	r5, r3, #27
 8009606:	d411      	bmi.n	800962c <__swsetup_r+0x50>
 8009608:	2309      	movs	r3, #9
 800960a:	6033      	str	r3, [r6, #0]
 800960c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	e03e      	b.n	8009696 <__swsetup_r+0xba>
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <__swsetup_r+0xd4>)
 800961a:	429c      	cmp	r4, r3
 800961c:	d101      	bne.n	8009622 <__swsetup_r+0x46>
 800961e:	68ac      	ldr	r4, [r5, #8]
 8009620:	e7eb      	b.n	80095fa <__swsetup_r+0x1e>
 8009622:	4b24      	ldr	r3, [pc, #144]	; (80096b4 <__swsetup_r+0xd8>)
 8009624:	429c      	cmp	r4, r3
 8009626:	bf08      	it	eq
 8009628:	68ec      	ldreq	r4, [r5, #12]
 800962a:	e7e6      	b.n	80095fa <__swsetup_r+0x1e>
 800962c:	0758      	lsls	r0, r3, #29
 800962e:	d512      	bpl.n	8009656 <__swsetup_r+0x7a>
 8009630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009632:	b141      	cbz	r1, 8009646 <__swsetup_r+0x6a>
 8009634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009638:	4299      	cmp	r1, r3
 800963a:	d002      	beq.n	8009642 <__swsetup_r+0x66>
 800963c:	4630      	mov	r0, r6
 800963e:	f7ff fb37 	bl	8008cb0 <_free_r>
 8009642:	2300      	movs	r3, #0
 8009644:	6363      	str	r3, [r4, #52]	; 0x34
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f043 0308 	orr.w	r3, r3, #8
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	b94b      	cbnz	r3, 8009676 <__swsetup_r+0x9a>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800966c:	d003      	beq.n	8009676 <__swsetup_r+0x9a>
 800966e:	4621      	mov	r1, r4
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fa05 	bl	8009a80 <__smakebuf_r>
 8009676:	89a0      	ldrh	r0, [r4, #12]
 8009678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800967c:	f010 0301 	ands.w	r3, r0, #1
 8009680:	d00a      	beq.n	8009698 <__swsetup_r+0xbc>
 8009682:	2300      	movs	r3, #0
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	6963      	ldr	r3, [r4, #20]
 8009688:	425b      	negs	r3, r3
 800968a:	61a3      	str	r3, [r4, #24]
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b943      	cbnz	r3, 80096a2 <__swsetup_r+0xc6>
 8009690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009694:	d1ba      	bne.n	800960c <__swsetup_r+0x30>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	0781      	lsls	r1, r0, #30
 800969a:	bf58      	it	pl
 800969c:	6963      	ldrpl	r3, [r4, #20]
 800969e:	60a3      	str	r3, [r4, #8]
 80096a0:	e7f4      	b.n	800968c <__swsetup_r+0xb0>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e7f7      	b.n	8009696 <__swsetup_r+0xba>
 80096a6:	bf00      	nop
 80096a8:	2000000c 	.word	0x2000000c
 80096ac:	0800bee4 	.word	0x0800bee4
 80096b0:	0800bf04 	.word	0x0800bf04
 80096b4:	0800bec4 	.word	0x0800bec4

080096b8 <abort>:
 80096b8:	2006      	movs	r0, #6
 80096ba:	b508      	push	{r3, lr}
 80096bc:	f000 fa50 	bl	8009b60 <raise>
 80096c0:	2001      	movs	r0, #1
 80096c2:	f7f9 f92a 	bl	800291a <_exit>
	...

080096c8 <__sflush_r>:
 80096c8:	898a      	ldrh	r2, [r1, #12]
 80096ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096cc:	4605      	mov	r5, r0
 80096ce:	0710      	lsls	r0, r2, #28
 80096d0:	460c      	mov	r4, r1
 80096d2:	d457      	bmi.n	8009784 <__sflush_r+0xbc>
 80096d4:	684b      	ldr	r3, [r1, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dc04      	bgt.n	80096e4 <__sflush_r+0x1c>
 80096da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dc01      	bgt.n	80096e4 <__sflush_r+0x1c>
 80096e0:	2000      	movs	r0, #0
 80096e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096e6:	2e00      	cmp	r6, #0
 80096e8:	d0fa      	beq.n	80096e0 <__sflush_r+0x18>
 80096ea:	2300      	movs	r3, #0
 80096ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096f0:	682f      	ldr	r7, [r5, #0]
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	d032      	beq.n	800975c <__sflush_r+0x94>
 80096f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	075a      	lsls	r2, r3, #29
 80096fc:	d505      	bpl.n	800970a <__sflush_r+0x42>
 80096fe:	6863      	ldr	r3, [r4, #4]
 8009700:	1ac0      	subs	r0, r0, r3
 8009702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009704:	b10b      	cbz	r3, 800970a <__sflush_r+0x42>
 8009706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009708:	1ac0      	subs	r0, r0, r3
 800970a:	2300      	movs	r3, #0
 800970c:	4602      	mov	r2, r0
 800970e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009710:	4628      	mov	r0, r5
 8009712:	6a21      	ldr	r1, [r4, #32]
 8009714:	47b0      	blx	r6
 8009716:	1c43      	adds	r3, r0, #1
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	d106      	bne.n	800972a <__sflush_r+0x62>
 800971c:	6829      	ldr	r1, [r5, #0]
 800971e:	291d      	cmp	r1, #29
 8009720:	d82c      	bhi.n	800977c <__sflush_r+0xb4>
 8009722:	4a29      	ldr	r2, [pc, #164]	; (80097c8 <__sflush_r+0x100>)
 8009724:	40ca      	lsrs	r2, r1
 8009726:	07d6      	lsls	r6, r2, #31
 8009728:	d528      	bpl.n	800977c <__sflush_r+0xb4>
 800972a:	2200      	movs	r2, #0
 800972c:	6062      	str	r2, [r4, #4]
 800972e:	6922      	ldr	r2, [r4, #16]
 8009730:	04d9      	lsls	r1, r3, #19
 8009732:	6022      	str	r2, [r4, #0]
 8009734:	d504      	bpl.n	8009740 <__sflush_r+0x78>
 8009736:	1c42      	adds	r2, r0, #1
 8009738:	d101      	bne.n	800973e <__sflush_r+0x76>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	b903      	cbnz	r3, 8009740 <__sflush_r+0x78>
 800973e:	6560      	str	r0, [r4, #84]	; 0x54
 8009740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009742:	602f      	str	r7, [r5, #0]
 8009744:	2900      	cmp	r1, #0
 8009746:	d0cb      	beq.n	80096e0 <__sflush_r+0x18>
 8009748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800974c:	4299      	cmp	r1, r3
 800974e:	d002      	beq.n	8009756 <__sflush_r+0x8e>
 8009750:	4628      	mov	r0, r5
 8009752:	f7ff faad 	bl	8008cb0 <_free_r>
 8009756:	2000      	movs	r0, #0
 8009758:	6360      	str	r0, [r4, #52]	; 0x34
 800975a:	e7c2      	b.n	80096e2 <__sflush_r+0x1a>
 800975c:	6a21      	ldr	r1, [r4, #32]
 800975e:	2301      	movs	r3, #1
 8009760:	4628      	mov	r0, r5
 8009762:	47b0      	blx	r6
 8009764:	1c41      	adds	r1, r0, #1
 8009766:	d1c7      	bne.n	80096f8 <__sflush_r+0x30>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0c4      	beq.n	80096f8 <__sflush_r+0x30>
 800976e:	2b1d      	cmp	r3, #29
 8009770:	d001      	beq.n	8009776 <__sflush_r+0xae>
 8009772:	2b16      	cmp	r3, #22
 8009774:	d101      	bne.n	800977a <__sflush_r+0xb2>
 8009776:	602f      	str	r7, [r5, #0]
 8009778:	e7b2      	b.n	80096e0 <__sflush_r+0x18>
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	e7ae      	b.n	80096e2 <__sflush_r+0x1a>
 8009784:	690f      	ldr	r7, [r1, #16]
 8009786:	2f00      	cmp	r7, #0
 8009788:	d0aa      	beq.n	80096e0 <__sflush_r+0x18>
 800978a:	0793      	lsls	r3, r2, #30
 800978c:	bf18      	it	ne
 800978e:	2300      	movne	r3, #0
 8009790:	680e      	ldr	r6, [r1, #0]
 8009792:	bf08      	it	eq
 8009794:	694b      	ldreq	r3, [r1, #20]
 8009796:	1bf6      	subs	r6, r6, r7
 8009798:	600f      	str	r7, [r1, #0]
 800979a:	608b      	str	r3, [r1, #8]
 800979c:	2e00      	cmp	r6, #0
 800979e:	dd9f      	ble.n	80096e0 <__sflush_r+0x18>
 80097a0:	4633      	mov	r3, r6
 80097a2:	463a      	mov	r2, r7
 80097a4:	4628      	mov	r0, r5
 80097a6:	6a21      	ldr	r1, [r4, #32]
 80097a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80097ac:	47e0      	blx	ip
 80097ae:	2800      	cmp	r0, #0
 80097b0:	dc06      	bgt.n	80097c0 <__sflush_r+0xf8>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295
 80097b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	e790      	b.n	80096e2 <__sflush_r+0x1a>
 80097c0:	4407      	add	r7, r0
 80097c2:	1a36      	subs	r6, r6, r0
 80097c4:	e7ea      	b.n	800979c <__sflush_r+0xd4>
 80097c6:	bf00      	nop
 80097c8:	20400001 	.word	0x20400001

080097cc <_fflush_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	690b      	ldr	r3, [r1, #16]
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	b913      	cbnz	r3, 80097dc <_fflush_r+0x10>
 80097d6:	2500      	movs	r5, #0
 80097d8:	4628      	mov	r0, r5
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	b118      	cbz	r0, 80097e6 <_fflush_r+0x1a>
 80097de:	6983      	ldr	r3, [r0, #24]
 80097e0:	b90b      	cbnz	r3, 80097e6 <_fflush_r+0x1a>
 80097e2:	f000 f887 	bl	80098f4 <__sinit>
 80097e6:	4b14      	ldr	r3, [pc, #80]	; (8009838 <_fflush_r+0x6c>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d11b      	bne.n	8009824 <_fflush_r+0x58>
 80097ec:	686c      	ldr	r4, [r5, #4]
 80097ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0ef      	beq.n	80097d6 <_fflush_r+0xa>
 80097f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097f8:	07d0      	lsls	r0, r2, #31
 80097fa:	d404      	bmi.n	8009806 <_fflush_r+0x3a>
 80097fc:	0599      	lsls	r1, r3, #22
 80097fe:	d402      	bmi.n	8009806 <_fflush_r+0x3a>
 8009800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009802:	f000 f915 	bl	8009a30 <__retarget_lock_acquire_recursive>
 8009806:	4628      	mov	r0, r5
 8009808:	4621      	mov	r1, r4
 800980a:	f7ff ff5d 	bl	80096c8 <__sflush_r>
 800980e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009810:	4605      	mov	r5, r0
 8009812:	07da      	lsls	r2, r3, #31
 8009814:	d4e0      	bmi.n	80097d8 <_fflush_r+0xc>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	059b      	lsls	r3, r3, #22
 800981a:	d4dd      	bmi.n	80097d8 <_fflush_r+0xc>
 800981c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800981e:	f000 f908 	bl	8009a32 <__retarget_lock_release_recursive>
 8009822:	e7d9      	b.n	80097d8 <_fflush_r+0xc>
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <_fflush_r+0x70>)
 8009826:	429c      	cmp	r4, r3
 8009828:	d101      	bne.n	800982e <_fflush_r+0x62>
 800982a:	68ac      	ldr	r4, [r5, #8]
 800982c:	e7df      	b.n	80097ee <_fflush_r+0x22>
 800982e:	4b04      	ldr	r3, [pc, #16]	; (8009840 <_fflush_r+0x74>)
 8009830:	429c      	cmp	r4, r3
 8009832:	bf08      	it	eq
 8009834:	68ec      	ldreq	r4, [r5, #12]
 8009836:	e7da      	b.n	80097ee <_fflush_r+0x22>
 8009838:	0800bee4 	.word	0x0800bee4
 800983c:	0800bf04 	.word	0x0800bf04
 8009840:	0800bec4 	.word	0x0800bec4

08009844 <std>:
 8009844:	2300      	movs	r3, #0
 8009846:	b510      	push	{r4, lr}
 8009848:	4604      	mov	r4, r0
 800984a:	e9c0 3300 	strd	r3, r3, [r0]
 800984e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009852:	6083      	str	r3, [r0, #8]
 8009854:	8181      	strh	r1, [r0, #12]
 8009856:	6643      	str	r3, [r0, #100]	; 0x64
 8009858:	81c2      	strh	r2, [r0, #14]
 800985a:	6183      	str	r3, [r0, #24]
 800985c:	4619      	mov	r1, r3
 800985e:	2208      	movs	r2, #8
 8009860:	305c      	adds	r0, #92	; 0x5c
 8009862:	f7fd fb65 	bl	8006f30 <memset>
 8009866:	4b05      	ldr	r3, [pc, #20]	; (800987c <std+0x38>)
 8009868:	6224      	str	r4, [r4, #32]
 800986a:	6263      	str	r3, [r4, #36]	; 0x24
 800986c:	4b04      	ldr	r3, [pc, #16]	; (8009880 <std+0x3c>)
 800986e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009870:	4b04      	ldr	r3, [pc, #16]	; (8009884 <std+0x40>)
 8009872:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009874:	4b04      	ldr	r3, [pc, #16]	; (8009888 <std+0x44>)
 8009876:	6323      	str	r3, [r4, #48]	; 0x30
 8009878:	bd10      	pop	{r4, pc}
 800987a:	bf00      	nop
 800987c:	08009b99 	.word	0x08009b99
 8009880:	08009bbb 	.word	0x08009bbb
 8009884:	08009bf3 	.word	0x08009bf3
 8009888:	08009c17 	.word	0x08009c17

0800988c <_cleanup_r>:
 800988c:	4901      	ldr	r1, [pc, #4]	; (8009894 <_cleanup_r+0x8>)
 800988e:	f000 b8af 	b.w	80099f0 <_fwalk_reent>
 8009892:	bf00      	nop
 8009894:	080097cd 	.word	0x080097cd

08009898 <__sfmoreglue>:
 8009898:	2268      	movs	r2, #104	; 0x68
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	1e4d      	subs	r5, r1, #1
 800989e:	4355      	muls	r5, r2
 80098a0:	460e      	mov	r6, r1
 80098a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098a6:	f7ff fa6b 	bl	8008d80 <_malloc_r>
 80098aa:	4604      	mov	r4, r0
 80098ac:	b140      	cbz	r0, 80098c0 <__sfmoreglue+0x28>
 80098ae:	2100      	movs	r1, #0
 80098b0:	e9c0 1600 	strd	r1, r6, [r0]
 80098b4:	300c      	adds	r0, #12
 80098b6:	60a0      	str	r0, [r4, #8]
 80098b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098bc:	f7fd fb38 	bl	8006f30 <memset>
 80098c0:	4620      	mov	r0, r4
 80098c2:	bd70      	pop	{r4, r5, r6, pc}

080098c4 <__sfp_lock_acquire>:
 80098c4:	4801      	ldr	r0, [pc, #4]	; (80098cc <__sfp_lock_acquire+0x8>)
 80098c6:	f000 b8b3 	b.w	8009a30 <__retarget_lock_acquire_recursive>
 80098ca:	bf00      	nop
 80098cc:	20000679 	.word	0x20000679

080098d0 <__sfp_lock_release>:
 80098d0:	4801      	ldr	r0, [pc, #4]	; (80098d8 <__sfp_lock_release+0x8>)
 80098d2:	f000 b8ae 	b.w	8009a32 <__retarget_lock_release_recursive>
 80098d6:	bf00      	nop
 80098d8:	20000679 	.word	0x20000679

080098dc <__sinit_lock_acquire>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__sinit_lock_acquire+0x8>)
 80098de:	f000 b8a7 	b.w	8009a30 <__retarget_lock_acquire_recursive>
 80098e2:	bf00      	nop
 80098e4:	2000067a 	.word	0x2000067a

080098e8 <__sinit_lock_release>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__sinit_lock_release+0x8>)
 80098ea:	f000 b8a2 	b.w	8009a32 <__retarget_lock_release_recursive>
 80098ee:	bf00      	nop
 80098f0:	2000067a 	.word	0x2000067a

080098f4 <__sinit>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	4604      	mov	r4, r0
 80098f8:	f7ff fff0 	bl	80098dc <__sinit_lock_acquire>
 80098fc:	69a3      	ldr	r3, [r4, #24]
 80098fe:	b11b      	cbz	r3, 8009908 <__sinit+0x14>
 8009900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009904:	f7ff bff0 	b.w	80098e8 <__sinit_lock_release>
 8009908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800990c:	6523      	str	r3, [r4, #80]	; 0x50
 800990e:	4b13      	ldr	r3, [pc, #76]	; (800995c <__sinit+0x68>)
 8009910:	4a13      	ldr	r2, [pc, #76]	; (8009960 <__sinit+0x6c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	62a2      	str	r2, [r4, #40]	; 0x28
 8009916:	42a3      	cmp	r3, r4
 8009918:	bf08      	it	eq
 800991a:	2301      	moveq	r3, #1
 800991c:	4620      	mov	r0, r4
 800991e:	bf08      	it	eq
 8009920:	61a3      	streq	r3, [r4, #24]
 8009922:	f000 f81f 	bl	8009964 <__sfp>
 8009926:	6060      	str	r0, [r4, #4]
 8009928:	4620      	mov	r0, r4
 800992a:	f000 f81b 	bl	8009964 <__sfp>
 800992e:	60a0      	str	r0, [r4, #8]
 8009930:	4620      	mov	r0, r4
 8009932:	f000 f817 	bl	8009964 <__sfp>
 8009936:	2200      	movs	r2, #0
 8009938:	2104      	movs	r1, #4
 800993a:	60e0      	str	r0, [r4, #12]
 800993c:	6860      	ldr	r0, [r4, #4]
 800993e:	f7ff ff81 	bl	8009844 <std>
 8009942:	2201      	movs	r2, #1
 8009944:	2109      	movs	r1, #9
 8009946:	68a0      	ldr	r0, [r4, #8]
 8009948:	f7ff ff7c 	bl	8009844 <std>
 800994c:	2202      	movs	r2, #2
 800994e:	2112      	movs	r1, #18
 8009950:	68e0      	ldr	r0, [r4, #12]
 8009952:	f7ff ff77 	bl	8009844 <std>
 8009956:	2301      	movs	r3, #1
 8009958:	61a3      	str	r3, [r4, #24]
 800995a:	e7d1      	b.n	8009900 <__sinit+0xc>
 800995c:	0800bb4c 	.word	0x0800bb4c
 8009960:	0800988d 	.word	0x0800988d

08009964 <__sfp>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	4607      	mov	r7, r0
 8009968:	f7ff ffac 	bl	80098c4 <__sfp_lock_acquire>
 800996c:	4b1e      	ldr	r3, [pc, #120]	; (80099e8 <__sfp+0x84>)
 800996e:	681e      	ldr	r6, [r3, #0]
 8009970:	69b3      	ldr	r3, [r6, #24]
 8009972:	b913      	cbnz	r3, 800997a <__sfp+0x16>
 8009974:	4630      	mov	r0, r6
 8009976:	f7ff ffbd 	bl	80098f4 <__sinit>
 800997a:	3648      	adds	r6, #72	; 0x48
 800997c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009980:	3b01      	subs	r3, #1
 8009982:	d503      	bpl.n	800998c <__sfp+0x28>
 8009984:	6833      	ldr	r3, [r6, #0]
 8009986:	b30b      	cbz	r3, 80099cc <__sfp+0x68>
 8009988:	6836      	ldr	r6, [r6, #0]
 800998a:	e7f7      	b.n	800997c <__sfp+0x18>
 800998c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009990:	b9d5      	cbnz	r5, 80099c8 <__sfp+0x64>
 8009992:	4b16      	ldr	r3, [pc, #88]	; (80099ec <__sfp+0x88>)
 8009994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009998:	60e3      	str	r3, [r4, #12]
 800999a:	6665      	str	r5, [r4, #100]	; 0x64
 800999c:	f000 f847 	bl	8009a2e <__retarget_lock_init_recursive>
 80099a0:	f7ff ff96 	bl	80098d0 <__sfp_lock_release>
 80099a4:	2208      	movs	r2, #8
 80099a6:	4629      	mov	r1, r5
 80099a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099b0:	6025      	str	r5, [r4, #0]
 80099b2:	61a5      	str	r5, [r4, #24]
 80099b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099b8:	f7fd faba 	bl	8006f30 <memset>
 80099bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099c4:	4620      	mov	r0, r4
 80099c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c8:	3468      	adds	r4, #104	; 0x68
 80099ca:	e7d9      	b.n	8009980 <__sfp+0x1c>
 80099cc:	2104      	movs	r1, #4
 80099ce:	4638      	mov	r0, r7
 80099d0:	f7ff ff62 	bl	8009898 <__sfmoreglue>
 80099d4:	4604      	mov	r4, r0
 80099d6:	6030      	str	r0, [r6, #0]
 80099d8:	2800      	cmp	r0, #0
 80099da:	d1d5      	bne.n	8009988 <__sfp+0x24>
 80099dc:	f7ff ff78 	bl	80098d0 <__sfp_lock_release>
 80099e0:	230c      	movs	r3, #12
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	e7ee      	b.n	80099c4 <__sfp+0x60>
 80099e6:	bf00      	nop
 80099e8:	0800bb4c 	.word	0x0800bb4c
 80099ec:	ffff0001 	.word	0xffff0001

080099f0 <_fwalk_reent>:
 80099f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f4:	4606      	mov	r6, r0
 80099f6:	4688      	mov	r8, r1
 80099f8:	2700      	movs	r7, #0
 80099fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a02:	f1b9 0901 	subs.w	r9, r9, #1
 8009a06:	d505      	bpl.n	8009a14 <_fwalk_reent+0x24>
 8009a08:	6824      	ldr	r4, [r4, #0]
 8009a0a:	2c00      	cmp	r4, #0
 8009a0c:	d1f7      	bne.n	80099fe <_fwalk_reent+0xe>
 8009a0e:	4638      	mov	r0, r7
 8009a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a14:	89ab      	ldrh	r3, [r5, #12]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d907      	bls.n	8009a2a <_fwalk_reent+0x3a>
 8009a1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	d003      	beq.n	8009a2a <_fwalk_reent+0x3a>
 8009a22:	4629      	mov	r1, r5
 8009a24:	4630      	mov	r0, r6
 8009a26:	47c0      	blx	r8
 8009a28:	4307      	orrs	r7, r0
 8009a2a:	3568      	adds	r5, #104	; 0x68
 8009a2c:	e7e9      	b.n	8009a02 <_fwalk_reent+0x12>

08009a2e <__retarget_lock_init_recursive>:
 8009a2e:	4770      	bx	lr

08009a30 <__retarget_lock_acquire_recursive>:
 8009a30:	4770      	bx	lr

08009a32 <__retarget_lock_release_recursive>:
 8009a32:	4770      	bx	lr

08009a34 <__swhatbuf_r>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	460e      	mov	r6, r1
 8009a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	461d      	mov	r5, r3
 8009a42:	b096      	sub	sp, #88	; 0x58
 8009a44:	da08      	bge.n	8009a58 <__swhatbuf_r+0x24>
 8009a46:	2200      	movs	r2, #0
 8009a48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a4c:	602a      	str	r2, [r5, #0]
 8009a4e:	061a      	lsls	r2, r3, #24
 8009a50:	d410      	bmi.n	8009a74 <__swhatbuf_r+0x40>
 8009a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a56:	e00e      	b.n	8009a76 <__swhatbuf_r+0x42>
 8009a58:	466a      	mov	r2, sp
 8009a5a:	f000 f903 	bl	8009c64 <_fstat_r>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	dbf1      	blt.n	8009a46 <__swhatbuf_r+0x12>
 8009a62:	9a01      	ldr	r2, [sp, #4]
 8009a64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a6c:	425a      	negs	r2, r3
 8009a6e:	415a      	adcs	r2, r3
 8009a70:	602a      	str	r2, [r5, #0]
 8009a72:	e7ee      	b.n	8009a52 <__swhatbuf_r+0x1e>
 8009a74:	2340      	movs	r3, #64	; 0x40
 8009a76:	2000      	movs	r0, #0
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	b016      	add	sp, #88	; 0x58
 8009a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a80 <__smakebuf_r>:
 8009a80:	898b      	ldrh	r3, [r1, #12]
 8009a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a84:	079d      	lsls	r5, r3, #30
 8009a86:	4606      	mov	r6, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	d507      	bpl.n	8009a9c <__smakebuf_r+0x1c>
 8009a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	2301      	movs	r3, #1
 8009a96:	6163      	str	r3, [r4, #20]
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	466a      	mov	r2, sp
 8009a9e:	ab01      	add	r3, sp, #4
 8009aa0:	f7ff ffc8 	bl	8009a34 <__swhatbuf_r>
 8009aa4:	9900      	ldr	r1, [sp, #0]
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff f969 	bl	8008d80 <_malloc_r>
 8009aae:	b948      	cbnz	r0, 8009ac4 <__smakebuf_r+0x44>
 8009ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab4:	059a      	lsls	r2, r3, #22
 8009ab6:	d4ef      	bmi.n	8009a98 <__smakebuf_r+0x18>
 8009ab8:	f023 0303 	bic.w	r3, r3, #3
 8009abc:	f043 0302 	orr.w	r3, r3, #2
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	e7e3      	b.n	8009a8c <__smakebuf_r+0xc>
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <__smakebuf_r+0x7c>)
 8009ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	6020      	str	r0, [r4, #0]
 8009acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	6120      	str	r0, [r4, #16]
 8009ad6:	6163      	str	r3, [r4, #20]
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	b15b      	cbz	r3, 8009af4 <__smakebuf_r+0x74>
 8009adc:	4630      	mov	r0, r6
 8009ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae2:	f000 f8d1 	bl	8009c88 <_isatty_r>
 8009ae6:	b128      	cbz	r0, 8009af4 <__smakebuf_r+0x74>
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	f023 0303 	bic.w	r3, r3, #3
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	89a0      	ldrh	r0, [r4, #12]
 8009af6:	4305      	orrs	r5, r0
 8009af8:	81a5      	strh	r5, [r4, #12]
 8009afa:	e7cd      	b.n	8009a98 <__smakebuf_r+0x18>
 8009afc:	0800988d 	.word	0x0800988d

08009b00 <_malloc_usable_size_r>:
 8009b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b04:	1f18      	subs	r0, r3, #4
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfbc      	itt	lt
 8009b0a:	580b      	ldrlt	r3, [r1, r0]
 8009b0c:	18c0      	addlt	r0, r0, r3
 8009b0e:	4770      	bx	lr

08009b10 <_raise_r>:
 8009b10:	291f      	cmp	r1, #31
 8009b12:	b538      	push	{r3, r4, r5, lr}
 8009b14:	4604      	mov	r4, r0
 8009b16:	460d      	mov	r5, r1
 8009b18:	d904      	bls.n	8009b24 <_raise_r+0x14>
 8009b1a:	2316      	movs	r3, #22
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b26:	b112      	cbz	r2, 8009b2e <_raise_r+0x1e>
 8009b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b2c:	b94b      	cbnz	r3, 8009b42 <_raise_r+0x32>
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 f830 	bl	8009b94 <_getpid_r>
 8009b34:	462a      	mov	r2, r5
 8009b36:	4601      	mov	r1, r0
 8009b38:	4620      	mov	r0, r4
 8009b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b3e:	f000 b817 	b.w	8009b70 <_kill_r>
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d00a      	beq.n	8009b5c <_raise_r+0x4c>
 8009b46:	1c59      	adds	r1, r3, #1
 8009b48:	d103      	bne.n	8009b52 <_raise_r+0x42>
 8009b4a:	2316      	movs	r3, #22
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	2001      	movs	r0, #1
 8009b50:	e7e7      	b.n	8009b22 <_raise_r+0x12>
 8009b52:	2400      	movs	r4, #0
 8009b54:	4628      	mov	r0, r5
 8009b56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b5a:	4798      	blx	r3
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	e7e0      	b.n	8009b22 <_raise_r+0x12>

08009b60 <raise>:
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <raise+0xc>)
 8009b62:	4601      	mov	r1, r0
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f7ff bfd3 	b.w	8009b10 <_raise_r>
 8009b6a:	bf00      	nop
 8009b6c:	2000000c 	.word	0x2000000c

08009b70 <_kill_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	2300      	movs	r3, #0
 8009b74:	4d06      	ldr	r5, [pc, #24]	; (8009b90 <_kill_r+0x20>)
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	602b      	str	r3, [r5, #0]
 8009b7e:	f7f8 febc 	bl	80028fa <_kill>
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	d102      	bne.n	8009b8c <_kill_r+0x1c>
 8009b86:	682b      	ldr	r3, [r5, #0]
 8009b88:	b103      	cbz	r3, 8009b8c <_kill_r+0x1c>
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	bd38      	pop	{r3, r4, r5, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000674 	.word	0x20000674

08009b94 <_getpid_r>:
 8009b94:	f7f8 beaa 	b.w	80028ec <_getpid>

08009b98 <__sread>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	f000 f894 	bl	8009ccc <_read_r>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	bfab      	itete	ge
 8009ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009baa:	89a3      	ldrhlt	r3, [r4, #12]
 8009bac:	181b      	addge	r3, r3, r0
 8009bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bb2:	bfac      	ite	ge
 8009bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bb6:	81a3      	strhlt	r3, [r4, #12]
 8009bb8:	bd10      	pop	{r4, pc}

08009bba <__swrite>:
 8009bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbe:	461f      	mov	r7, r3
 8009bc0:	898b      	ldrh	r3, [r1, #12]
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	05db      	lsls	r3, r3, #23
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	4616      	mov	r6, r2
 8009bca:	d505      	bpl.n	8009bd8 <__swrite+0x1e>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd4:	f000 f868 	bl	8009ca8 <_lseek_r>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	4632      	mov	r2, r6
 8009bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	4628      	mov	r0, r5
 8009be4:	463b      	mov	r3, r7
 8009be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bee:	f000 b817 	b.w	8009c20 <_write_r>

08009bf2 <__sseek>:
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfa:	f000 f855 	bl	8009ca8 <_lseek_r>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	bf15      	itete	ne
 8009c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c0e:	81a3      	strheq	r3, [r4, #12]
 8009c10:	bf18      	it	ne
 8009c12:	81a3      	strhne	r3, [r4, #12]
 8009c14:	bd10      	pop	{r4, pc}

08009c16 <__sclose>:
 8009c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1a:	f000 b813 	b.w	8009c44 <_close_r>
	...

08009c20 <_write_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	4611      	mov	r1, r2
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4d05      	ldr	r5, [pc, #20]	; (8009c40 <_write_r+0x20>)
 8009c2c:	602a      	str	r2, [r5, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f7f8 fe9a 	bl	8002968 <_write>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_write_r+0x1e>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_write_r+0x1e>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	20000674 	.word	0x20000674

08009c44 <_close_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	2300      	movs	r3, #0
 8009c48:	4d05      	ldr	r5, [pc, #20]	; (8009c60 <_close_r+0x1c>)
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	f7f8 fea6 	bl	80029a0 <_close>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_close_r+0x1a>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_close_r+0x1a>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	20000674 	.word	0x20000674

08009c64 <_fstat_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	2300      	movs	r3, #0
 8009c68:	4d06      	ldr	r5, [pc, #24]	; (8009c84 <_fstat_r+0x20>)
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	4608      	mov	r0, r1
 8009c6e:	4611      	mov	r1, r2
 8009c70:	602b      	str	r3, [r5, #0]
 8009c72:	f7f8 fea0 	bl	80029b6 <_fstat>
 8009c76:	1c43      	adds	r3, r0, #1
 8009c78:	d102      	bne.n	8009c80 <_fstat_r+0x1c>
 8009c7a:	682b      	ldr	r3, [r5, #0]
 8009c7c:	b103      	cbz	r3, 8009c80 <_fstat_r+0x1c>
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
 8009c82:	bf00      	nop
 8009c84:	20000674 	.word	0x20000674

08009c88 <_isatty_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4d05      	ldr	r5, [pc, #20]	; (8009ca4 <_isatty_r+0x1c>)
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	602b      	str	r3, [r5, #0]
 8009c94:	f7f8 fe9e 	bl	80029d4 <_isatty>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_isatty_r+0x1a>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_isatty_r+0x1a>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	20000674 	.word	0x20000674

08009ca8 <_lseek_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4604      	mov	r4, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	4611      	mov	r1, r2
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	4d05      	ldr	r5, [pc, #20]	; (8009cc8 <_lseek_r+0x20>)
 8009cb4:	602a      	str	r2, [r5, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7f8 fe96 	bl	80029e8 <_lseek>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_lseek_r+0x1e>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_lseek_r+0x1e>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20000674 	.word	0x20000674

08009ccc <_read_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	4d05      	ldr	r5, [pc, #20]	; (8009cec <_read_r+0x20>)
 8009cd8:	602a      	str	r2, [r5, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f7f8 fe27 	bl	800292e <_read>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_read_r+0x1e>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_read_r+0x1e>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	20000674 	.word	0x20000674

08009cf0 <tan>:
 8009cf0:	b530      	push	{r4, r5, lr}
 8009cf2:	4a12      	ldr	r2, [pc, #72]	; (8009d3c <tan+0x4c>)
 8009cf4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	dc06      	bgt.n	8009d0c <tan+0x1c>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	2200      	movs	r2, #0
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	2300      	movs	r3, #0
 8009d06:	f001 fb8b 	bl	800b420 <__kernel_tan>
 8009d0a:	e006      	b.n	8009d1a <tan+0x2a>
 8009d0c:	4a0c      	ldr	r2, [pc, #48]	; (8009d40 <tan+0x50>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	dd05      	ble.n	8009d1e <tan+0x2e>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	f7f6 fa27 	bl	8000168 <__aeabi_dsub>
 8009d1a:	b007      	add	sp, #28
 8009d1c:	bd30      	pop	{r4, r5, pc}
 8009d1e:	aa02      	add	r2, sp, #8
 8009d20:	f000 fd92 	bl	800a848 <__ieee754_rem_pio2>
 8009d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d28:	0040      	lsls	r0, r0, #1
 8009d2a:	f000 0002 	and.w	r0, r0, #2
 8009d2e:	f1c0 0001 	rsb	r0, r0, #1
 8009d32:	9000      	str	r0, [sp, #0]
 8009d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d38:	e7e5      	b.n	8009d06 <tan+0x16>
 8009d3a:	bf00      	nop
 8009d3c:	3fe921fb 	.word	0x3fe921fb
 8009d40:	7fefffff 	.word	0x7fefffff

08009d44 <pow>:
 8009d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d48:	4614      	mov	r4, r2
 8009d4a:	461d      	mov	r5, r3
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	4689      	mov	r9, r1
 8009d50:	f000 f862 	bl	8009e18 <__ieee754_pow>
 8009d54:	4622      	mov	r2, r4
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fe54 	bl	8000a0c <__aeabi_dcmpun>
 8009d64:	bbc8      	cbnz	r0, 8009dda <pow+0x96>
 8009d66:	2200      	movs	r2, #0
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	f7f6 fe1b 	bl	80009a8 <__aeabi_dcmpeq>
 8009d72:	b1b8      	cbz	r0, 8009da4 <pow+0x60>
 8009d74:	2200      	movs	r2, #0
 8009d76:	2300      	movs	r3, #0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	f7f6 fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d141      	bne.n	8009e08 <pow+0xc4>
 8009d84:	4620      	mov	r0, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	f001 fd75 	bl	800b876 <finite>
 8009d8c:	b328      	cbz	r0, 8009dda <pow+0x96>
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2300      	movs	r3, #0
 8009d92:	4620      	mov	r0, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	f7f6 fe11 	bl	80009bc <__aeabi_dcmplt>
 8009d9a:	b1f0      	cbz	r0, 8009dda <pow+0x96>
 8009d9c:	f7fd f89e 	bl	8006edc <__errno>
 8009da0:	2322      	movs	r3, #34	; 0x22
 8009da2:	e019      	b.n	8009dd8 <pow+0x94>
 8009da4:	4630      	mov	r0, r6
 8009da6:	4639      	mov	r1, r7
 8009da8:	f001 fd65 	bl	800b876 <finite>
 8009dac:	b9c8      	cbnz	r0, 8009de2 <pow+0x9e>
 8009dae:	4640      	mov	r0, r8
 8009db0:	4649      	mov	r1, r9
 8009db2:	f001 fd60 	bl	800b876 <finite>
 8009db6:	b1a0      	cbz	r0, 8009de2 <pow+0x9e>
 8009db8:	4620      	mov	r0, r4
 8009dba:	4629      	mov	r1, r5
 8009dbc:	f001 fd5b 	bl	800b876 <finite>
 8009dc0:	b178      	cbz	r0, 8009de2 <pow+0x9e>
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	4639      	mov	r1, r7
 8009dca:	f7f6 fe1f 	bl	8000a0c <__aeabi_dcmpun>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d0e4      	beq.n	8009d9c <pow+0x58>
 8009dd2:	f7fd f883 	bl	8006edc <__errno>
 8009dd6:	2321      	movs	r3, #33	; 0x21
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4639      	mov	r1, r7
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	2200      	movs	r2, #0
 8009de4:	2300      	movs	r3, #0
 8009de6:	4630      	mov	r0, r6
 8009de8:	4639      	mov	r1, r7
 8009dea:	f7f6 fddd 	bl	80009a8 <__aeabi_dcmpeq>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d0f3      	beq.n	8009dda <pow+0x96>
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f001 fd3e 	bl	800b876 <finite>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d0ed      	beq.n	8009dda <pow+0x96>
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	f001 fd38 	bl	800b876 <finite>
 8009e06:	e7c8      	b.n	8009d9a <pow+0x56>
 8009e08:	2600      	movs	r6, #0
 8009e0a:	4f01      	ldr	r7, [pc, #4]	; (8009e10 <pow+0xcc>)
 8009e0c:	e7e5      	b.n	8009dda <pow+0x96>
 8009e0e:	bf00      	nop
 8009e10:	3ff00000 	.word	0x3ff00000
 8009e14:	00000000 	.word	0x00000000

08009e18 <__ieee754_pow>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	b093      	sub	sp, #76	; 0x4c
 8009e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e22:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009e26:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009e2a:	4689      	mov	r9, r1
 8009e2c:	ea56 0102 	orrs.w	r1, r6, r2
 8009e30:	4680      	mov	r8, r0
 8009e32:	d111      	bne.n	8009e58 <__ieee754_pow+0x40>
 8009e34:	1803      	adds	r3, r0, r0
 8009e36:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009e3a:	4152      	adcs	r2, r2
 8009e3c:	4299      	cmp	r1, r3
 8009e3e:	4b82      	ldr	r3, [pc, #520]	; (800a048 <__ieee754_pow+0x230>)
 8009e40:	4193      	sbcs	r3, r2
 8009e42:	f080 84b9 	bcs.w	800a7b8 <__ieee754_pow+0x9a0>
 8009e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f7f6 f98d 	bl	800016c <__adddf3>
 8009e52:	4683      	mov	fp, r0
 8009e54:	468c      	mov	ip, r1
 8009e56:	e06f      	b.n	8009f38 <__ieee754_pow+0x120>
 8009e58:	4b7c      	ldr	r3, [pc, #496]	; (800a04c <__ieee754_pow+0x234>)
 8009e5a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009e5e:	429c      	cmp	r4, r3
 8009e60:	464d      	mov	r5, r9
 8009e62:	4682      	mov	sl, r0
 8009e64:	dc06      	bgt.n	8009e74 <__ieee754_pow+0x5c>
 8009e66:	d101      	bne.n	8009e6c <__ieee754_pow+0x54>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d1ec      	bne.n	8009e46 <__ieee754_pow+0x2e>
 8009e6c:	429e      	cmp	r6, r3
 8009e6e:	dc01      	bgt.n	8009e74 <__ieee754_pow+0x5c>
 8009e70:	d10f      	bne.n	8009e92 <__ieee754_pow+0x7a>
 8009e72:	b172      	cbz	r2, 8009e92 <__ieee754_pow+0x7a>
 8009e74:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009e78:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009e7c:	ea55 050a 	orrs.w	r5, r5, sl
 8009e80:	d1e1      	bne.n	8009e46 <__ieee754_pow+0x2e>
 8009e82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e86:	18db      	adds	r3, r3, r3
 8009e88:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009e8c:	4152      	adcs	r2, r2
 8009e8e:	429d      	cmp	r5, r3
 8009e90:	e7d5      	b.n	8009e3e <__ieee754_pow+0x26>
 8009e92:	2d00      	cmp	r5, #0
 8009e94:	da39      	bge.n	8009f0a <__ieee754_pow+0xf2>
 8009e96:	4b6e      	ldr	r3, [pc, #440]	; (800a050 <__ieee754_pow+0x238>)
 8009e98:	429e      	cmp	r6, r3
 8009e9a:	dc52      	bgt.n	8009f42 <__ieee754_pow+0x12a>
 8009e9c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009ea0:	429e      	cmp	r6, r3
 8009ea2:	f340 849c 	ble.w	800a7de <__ieee754_pow+0x9c6>
 8009ea6:	1533      	asrs	r3, r6, #20
 8009ea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009eac:	2b14      	cmp	r3, #20
 8009eae:	dd0f      	ble.n	8009ed0 <__ieee754_pow+0xb8>
 8009eb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009eb4:	fa22 f103 	lsr.w	r1, r2, r3
 8009eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	f040 848e 	bne.w	800a7de <__ieee754_pow+0x9c6>
 8009ec2:	f001 0101 	and.w	r1, r1, #1
 8009ec6:	f1c1 0302 	rsb	r3, r1, #2
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	b182      	cbz	r2, 8009ef0 <__ieee754_pow+0xd8>
 8009ece:	e05d      	b.n	8009f8c <__ieee754_pow+0x174>
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d159      	bne.n	8009f88 <__ieee754_pow+0x170>
 8009ed4:	f1c3 0314 	rsb	r3, r3, #20
 8009ed8:	fa46 f103 	asr.w	r1, r6, r3
 8009edc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee0:	42b3      	cmp	r3, r6
 8009ee2:	f040 8479 	bne.w	800a7d8 <__ieee754_pow+0x9c0>
 8009ee6:	f001 0101 	and.w	r1, r1, #1
 8009eea:	f1c1 0302 	rsb	r3, r1, #2
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	4b58      	ldr	r3, [pc, #352]	; (800a054 <__ieee754_pow+0x23c>)
 8009ef2:	429e      	cmp	r6, r3
 8009ef4:	d132      	bne.n	8009f5c <__ieee754_pow+0x144>
 8009ef6:	2f00      	cmp	r7, #0
 8009ef8:	f280 846a 	bge.w	800a7d0 <__ieee754_pow+0x9b8>
 8009efc:	4642      	mov	r2, r8
 8009efe:	464b      	mov	r3, r9
 8009f00:	2000      	movs	r0, #0
 8009f02:	4954      	ldr	r1, [pc, #336]	; (800a054 <__ieee754_pow+0x23c>)
 8009f04:	f7f6 fc12 	bl	800072c <__aeabi_ddiv>
 8009f08:	e7a3      	b.n	8009e52 <__ieee754_pow+0x3a>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	d13c      	bne.n	8009f8c <__ieee754_pow+0x174>
 8009f12:	4b4e      	ldr	r3, [pc, #312]	; (800a04c <__ieee754_pow+0x234>)
 8009f14:	429e      	cmp	r6, r3
 8009f16:	d1eb      	bne.n	8009ef0 <__ieee754_pow+0xd8>
 8009f18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009f1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009f20:	ea53 030a 	orrs.w	r3, r3, sl
 8009f24:	f000 8448 	beq.w	800a7b8 <__ieee754_pow+0x9a0>
 8009f28:	4b4b      	ldr	r3, [pc, #300]	; (800a058 <__ieee754_pow+0x240>)
 8009f2a:	429c      	cmp	r4, r3
 8009f2c:	dd0b      	ble.n	8009f46 <__ieee754_pow+0x12e>
 8009f2e:	2f00      	cmp	r7, #0
 8009f30:	f2c0 8448 	blt.w	800a7c4 <__ieee754_pow+0x9ac>
 8009f34:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009f38:	4658      	mov	r0, fp
 8009f3a:	4661      	mov	r1, ip
 8009f3c:	b013      	add	sp, #76	; 0x4c
 8009f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f42:	2302      	movs	r3, #2
 8009f44:	e7e2      	b.n	8009f0c <__ieee754_pow+0xf4>
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	f04f 0b00 	mov.w	fp, #0
 8009f4c:	f04f 0c00 	mov.w	ip, #0
 8009f50:	daf2      	bge.n	8009f38 <__ieee754_pow+0x120>
 8009f52:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009f56:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009f5a:	e7ed      	b.n	8009f38 <__ieee754_pow+0x120>
 8009f5c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009f60:	d106      	bne.n	8009f70 <__ieee754_pow+0x158>
 8009f62:	4642      	mov	r2, r8
 8009f64:	464b      	mov	r3, r9
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 fab5 	bl	80004d8 <__aeabi_dmul>
 8009f6e:	e770      	b.n	8009e52 <__ieee754_pow+0x3a>
 8009f70:	4b3a      	ldr	r3, [pc, #232]	; (800a05c <__ieee754_pow+0x244>)
 8009f72:	429f      	cmp	r7, r3
 8009f74:	d10a      	bne.n	8009f8c <__ieee754_pow+0x174>
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	db08      	blt.n	8009f8c <__ieee754_pow+0x174>
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	b013      	add	sp, #76	; 0x4c
 8009f80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	f000 be58 	b.w	800ac38 <__ieee754_sqrt>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	f001 fc6e 	bl	800b870 <fabs>
 8009f94:	4683      	mov	fp, r0
 8009f96:	468c      	mov	ip, r1
 8009f98:	f1ba 0f00 	cmp.w	sl, #0
 8009f9c:	d128      	bne.n	8009ff0 <__ieee754_pow+0x1d8>
 8009f9e:	b124      	cbz	r4, 8009faa <__ieee754_pow+0x192>
 8009fa0:	4b2c      	ldr	r3, [pc, #176]	; (800a054 <__ieee754_pow+0x23c>)
 8009fa2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d122      	bne.n	8009ff0 <__ieee754_pow+0x1d8>
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	da07      	bge.n	8009fbe <__ieee754_pow+0x1a6>
 8009fae:	465a      	mov	r2, fp
 8009fb0:	4663      	mov	r3, ip
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	4927      	ldr	r1, [pc, #156]	; (800a054 <__ieee754_pow+0x23c>)
 8009fb6:	f7f6 fbb9 	bl	800072c <__aeabi_ddiv>
 8009fba:	4683      	mov	fp, r0
 8009fbc:	468c      	mov	ip, r1
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	daba      	bge.n	8009f38 <__ieee754_pow+0x120>
 8009fc2:	9b00      	ldr	r3, [sp, #0]
 8009fc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009fc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fcc:	4323      	orrs	r3, r4
 8009fce:	d108      	bne.n	8009fe2 <__ieee754_pow+0x1ca>
 8009fd0:	465a      	mov	r2, fp
 8009fd2:	4663      	mov	r3, ip
 8009fd4:	4658      	mov	r0, fp
 8009fd6:	4661      	mov	r1, ip
 8009fd8:	f7f6 f8c6 	bl	8000168 <__aeabi_dsub>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	e790      	b.n	8009f04 <__ieee754_pow+0xec>
 8009fe2:	9b00      	ldr	r3, [sp, #0]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d1a7      	bne.n	8009f38 <__ieee754_pow+0x120>
 8009fe8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009fec:	469c      	mov	ip, r3
 8009fee:	e7a3      	b.n	8009f38 <__ieee754_pow+0x120>
 8009ff0:	0feb      	lsrs	r3, r5, #31
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8009ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff8:	9b00      	ldr	r3, [sp, #0]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	d104      	bne.n	800a008 <__ieee754_pow+0x1f0>
 8009ffe:	4642      	mov	r2, r8
 800a000:	464b      	mov	r3, r9
 800a002:	4640      	mov	r0, r8
 800a004:	4649      	mov	r1, r9
 800a006:	e7e7      	b.n	8009fd8 <__ieee754_pow+0x1c0>
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <__ieee754_pow+0x248>)
 800a00a:	429e      	cmp	r6, r3
 800a00c:	f340 80f6 	ble.w	800a1fc <__ieee754_pow+0x3e4>
 800a010:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a014:	429e      	cmp	r6, r3
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <__ieee754_pow+0x240>)
 800a018:	dd09      	ble.n	800a02e <__ieee754_pow+0x216>
 800a01a:	429c      	cmp	r4, r3
 800a01c:	dc0c      	bgt.n	800a038 <__ieee754_pow+0x220>
 800a01e:	2f00      	cmp	r7, #0
 800a020:	da0c      	bge.n	800a03c <__ieee754_pow+0x224>
 800a022:	2000      	movs	r0, #0
 800a024:	b013      	add	sp, #76	; 0x4c
 800a026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	f001 bc1c 	b.w	800b866 <__math_oflow>
 800a02e:	429c      	cmp	r4, r3
 800a030:	dbf5      	blt.n	800a01e <__ieee754_pow+0x206>
 800a032:	4b08      	ldr	r3, [pc, #32]	; (800a054 <__ieee754_pow+0x23c>)
 800a034:	429c      	cmp	r4, r3
 800a036:	dd15      	ble.n	800a064 <__ieee754_pow+0x24c>
 800a038:	2f00      	cmp	r7, #0
 800a03a:	dcf2      	bgt.n	800a022 <__ieee754_pow+0x20a>
 800a03c:	2000      	movs	r0, #0
 800a03e:	b013      	add	sp, #76	; 0x4c
 800a040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	f001 bc0a 	b.w	800b85c <__math_uflow>
 800a048:	fff00000 	.word	0xfff00000
 800a04c:	7ff00000 	.word	0x7ff00000
 800a050:	433fffff 	.word	0x433fffff
 800a054:	3ff00000 	.word	0x3ff00000
 800a058:	3fefffff 	.word	0x3fefffff
 800a05c:	3fe00000 	.word	0x3fe00000
 800a060:	41e00000 	.word	0x41e00000
 800a064:	4661      	mov	r1, ip
 800a066:	2200      	movs	r2, #0
 800a068:	4658      	mov	r0, fp
 800a06a:	4b5f      	ldr	r3, [pc, #380]	; (800a1e8 <__ieee754_pow+0x3d0>)
 800a06c:	f7f6 f87c 	bl	8000168 <__aeabi_dsub>
 800a070:	a355      	add	r3, pc, #340	; (adr r3, 800a1c8 <__ieee754_pow+0x3b0>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	4604      	mov	r4, r0
 800a078:	460d      	mov	r5, r1
 800a07a:	f7f6 fa2d 	bl	80004d8 <__aeabi_dmul>
 800a07e:	a354      	add	r3, pc, #336	; (adr r3, 800a1d0 <__ieee754_pow+0x3b8>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	4606      	mov	r6, r0
 800a086:	460f      	mov	r7, r1
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 fa24 	bl	80004d8 <__aeabi_dmul>
 800a090:	2200      	movs	r2, #0
 800a092:	4682      	mov	sl, r0
 800a094:	468b      	mov	fp, r1
 800a096:	4620      	mov	r0, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	4b54      	ldr	r3, [pc, #336]	; (800a1ec <__ieee754_pow+0x3d4>)
 800a09c:	f7f6 fa1c 	bl	80004d8 <__aeabi_dmul>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	a14c      	add	r1, pc, #304	; (adr r1, 800a1d8 <__ieee754_pow+0x3c0>)
 800a0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0aa:	f7f6 f85d 	bl	8000168 <__aeabi_dsub>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	f7f6 fa11 	bl	80004d8 <__aeabi_dmul>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	494c      	ldr	r1, [pc, #304]	; (800a1f0 <__ieee754_pow+0x3d8>)
 800a0be:	f7f6 f853 	bl	8000168 <__aeabi_dsub>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	4689      	mov	r9, r1
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	f7f6 fa03 	bl	80004d8 <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	4649      	mov	r1, r9
 800a0da:	f7f6 f9fd 	bl	80004d8 <__aeabi_dmul>
 800a0de:	a340      	add	r3, pc, #256	; (adr r3, 800a1e0 <__ieee754_pow+0x3c8>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 f9f8 	bl	80004d8 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4650      	mov	r0, sl
 800a0ee:	4659      	mov	r1, fp
 800a0f0:	f7f6 f83a 	bl	8000168 <__aeabi_dsub>
 800a0f4:	f04f 0a00 	mov.w	sl, #0
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	460d      	mov	r5, r1
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	f7f6 f832 	bl	800016c <__adddf3>
 800a108:	4632      	mov	r2, r6
 800a10a:	463b      	mov	r3, r7
 800a10c:	4650      	mov	r0, sl
 800a10e:	468b      	mov	fp, r1
 800a110:	f7f6 f82a 	bl	8000168 <__aeabi_dsub>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4620      	mov	r0, r4
 800a11a:	4629      	mov	r1, r5
 800a11c:	f7f6 f824 	bl	8000168 <__aeabi_dsub>
 800a120:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a124:	9b00      	ldr	r3, [sp, #0]
 800a126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a128:	3b01      	subs	r3, #1
 800a12a:	4313      	orrs	r3, r2
 800a12c:	f04f 0600 	mov.w	r6, #0
 800a130:	f04f 0200 	mov.w	r2, #0
 800a134:	bf0c      	ite	eq
 800a136:	4b2f      	ldreq	r3, [pc, #188]	; (800a1f4 <__ieee754_pow+0x3dc>)
 800a138:	4b2b      	ldrne	r3, [pc, #172]	; (800a1e8 <__ieee754_pow+0x3d0>)
 800a13a:	4604      	mov	r4, r0
 800a13c:	460d      	mov	r5, r1
 800a13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a142:	e9cd 2300 	strd	r2, r3, [sp]
 800a146:	4632      	mov	r2, r6
 800a148:	463b      	mov	r3, r7
 800a14a:	f7f6 f80d 	bl	8000168 <__aeabi_dsub>
 800a14e:	4652      	mov	r2, sl
 800a150:	465b      	mov	r3, fp
 800a152:	f7f6 f9c1 	bl	80004d8 <__aeabi_dmul>
 800a156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a15a:	4680      	mov	r8, r0
 800a15c:	4689      	mov	r9, r1
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 f9b9 	bl	80004d8 <__aeabi_dmul>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4640      	mov	r0, r8
 800a16c:	4649      	mov	r1, r9
 800a16e:	f7f5 fffd 	bl	800016c <__adddf3>
 800a172:	4632      	mov	r2, r6
 800a174:	463b      	mov	r3, r7
 800a176:	4680      	mov	r8, r0
 800a178:	4689      	mov	r9, r1
 800a17a:	4650      	mov	r0, sl
 800a17c:	4659      	mov	r1, fp
 800a17e:	f7f6 f9ab 	bl	80004d8 <__aeabi_dmul>
 800a182:	4604      	mov	r4, r0
 800a184:	460d      	mov	r5, r1
 800a186:	460b      	mov	r3, r1
 800a188:	4602      	mov	r2, r0
 800a18a:	4649      	mov	r1, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a192:	f7f5 ffeb 	bl	800016c <__adddf3>
 800a196:	4b18      	ldr	r3, [pc, #96]	; (800a1f8 <__ieee754_pow+0x3e0>)
 800a198:	4682      	mov	sl, r0
 800a19a:	4299      	cmp	r1, r3
 800a19c:	460f      	mov	r7, r1
 800a19e:	460e      	mov	r6, r1
 800a1a0:	f340 82e5 	ble.w	800a76e <__ieee754_pow+0x956>
 800a1a4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a1a8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a1ac:	4303      	orrs	r3, r0
 800a1ae:	f000 81df 	beq.w	800a570 <__ieee754_pow+0x758>
 800a1b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f7f6 fbff 	bl	80009bc <__aeabi_dcmplt>
 800a1be:	3800      	subs	r0, #0
 800a1c0:	bf18      	it	ne
 800a1c2:	2001      	movne	r0, #1
 800a1c4:	e72e      	b.n	800a024 <__ieee754_pow+0x20c>
 800a1c6:	bf00      	nop
 800a1c8:	60000000 	.word	0x60000000
 800a1cc:	3ff71547 	.word	0x3ff71547
 800a1d0:	f85ddf44 	.word	0xf85ddf44
 800a1d4:	3e54ae0b 	.word	0x3e54ae0b
 800a1d8:	55555555 	.word	0x55555555
 800a1dc:	3fd55555 	.word	0x3fd55555
 800a1e0:	652b82fe 	.word	0x652b82fe
 800a1e4:	3ff71547 	.word	0x3ff71547
 800a1e8:	3ff00000 	.word	0x3ff00000
 800a1ec:	3fd00000 	.word	0x3fd00000
 800a1f0:	3fe00000 	.word	0x3fe00000
 800a1f4:	bff00000 	.word	0xbff00000
 800a1f8:	408fffff 	.word	0x408fffff
 800a1fc:	4bd2      	ldr	r3, [pc, #840]	; (800a548 <__ieee754_pow+0x730>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	402b      	ands	r3, r5
 800a202:	b943      	cbnz	r3, 800a216 <__ieee754_pow+0x3fe>
 800a204:	4658      	mov	r0, fp
 800a206:	4661      	mov	r1, ip
 800a208:	4bd0      	ldr	r3, [pc, #832]	; (800a54c <__ieee754_pow+0x734>)
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a212:	4683      	mov	fp, r0
 800a214:	460c      	mov	r4, r1
 800a216:	1523      	asrs	r3, r4, #20
 800a218:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a21c:	4413      	add	r3, r2
 800a21e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a220:	4bcb      	ldr	r3, [pc, #812]	; (800a550 <__ieee754_pow+0x738>)
 800a222:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a226:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a22a:	429c      	cmp	r4, r3
 800a22c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a230:	dd08      	ble.n	800a244 <__ieee754_pow+0x42c>
 800a232:	4bc8      	ldr	r3, [pc, #800]	; (800a554 <__ieee754_pow+0x73c>)
 800a234:	429c      	cmp	r4, r3
 800a236:	f340 8199 	ble.w	800a56c <__ieee754_pow+0x754>
 800a23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a23c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a240:	3301      	adds	r3, #1
 800a242:	930b      	str	r3, [sp, #44]	; 0x2c
 800a244:	2600      	movs	r6, #0
 800a246:	00f3      	lsls	r3, r6, #3
 800a248:	930d      	str	r3, [sp, #52]	; 0x34
 800a24a:	4bc3      	ldr	r3, [pc, #780]	; (800a558 <__ieee754_pow+0x740>)
 800a24c:	4658      	mov	r0, fp
 800a24e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a252:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a256:	4629      	mov	r1, r5
 800a258:	461a      	mov	r2, r3
 800a25a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a25e:	4623      	mov	r3, r4
 800a260:	f7f5 ff82 	bl	8000168 <__aeabi_dsub>
 800a264:	46da      	mov	sl, fp
 800a266:	462b      	mov	r3, r5
 800a268:	4652      	mov	r2, sl
 800a26a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a26e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a272:	f7f5 ff7b 	bl	800016c <__adddf3>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	2000      	movs	r0, #0
 800a27c:	49b7      	ldr	r1, [pc, #732]	; (800a55c <__ieee754_pow+0x744>)
 800a27e:	f7f6 fa55 	bl	800072c <__aeabi_ddiv>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a28a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a28e:	f7f6 f923 	bl	80004d8 <__aeabi_dmul>
 800a292:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a296:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a29a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	46ab      	mov	fp, r5
 800a2a4:	106d      	asrs	r5, r5, #1
 800a2a6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a2b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a2b4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	4614      	mov	r4, r2
 800a2be:	461d      	mov	r5, r3
 800a2c0:	f7f6 f90a 	bl	80004d8 <__aeabi_dmul>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a2cc:	f7f5 ff4c 	bl	8000168 <__aeabi_dsub>
 800a2d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	460f      	mov	r7, r1
 800a2d8:	4620      	mov	r0, r4
 800a2da:	4629      	mov	r1, r5
 800a2dc:	f7f5 ff44 	bl	8000168 <__aeabi_dsub>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	f7f5 ff3e 	bl	8000168 <__aeabi_dsub>
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	f7f6 f8f2 	bl	80004d8 <__aeabi_dmul>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f5 ff34 	bl	8000168 <__aeabi_dsub>
 800a300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a304:	f7f6 f8e8 	bl	80004d8 <__aeabi_dmul>
 800a308:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a30c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a310:	4610      	mov	r0, r2
 800a312:	4619      	mov	r1, r3
 800a314:	f7f6 f8e0 	bl	80004d8 <__aeabi_dmul>
 800a318:	a379      	add	r3, pc, #484	; (adr r3, 800a500 <__ieee754_pow+0x6e8>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	f7f6 f8d9 	bl	80004d8 <__aeabi_dmul>
 800a326:	a378      	add	r3, pc, #480	; (adr r3, 800a508 <__ieee754_pow+0x6f0>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f7f5 ff1e 	bl	800016c <__adddf3>
 800a330:	4622      	mov	r2, r4
 800a332:	462b      	mov	r3, r5
 800a334:	f7f6 f8d0 	bl	80004d8 <__aeabi_dmul>
 800a338:	a375      	add	r3, pc, #468	; (adr r3, 800a510 <__ieee754_pow+0x6f8>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ff15 	bl	800016c <__adddf3>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f6 f8c7 	bl	80004d8 <__aeabi_dmul>
 800a34a:	a373      	add	r3, pc, #460	; (adr r3, 800a518 <__ieee754_pow+0x700>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff0c 	bl	800016c <__adddf3>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f8be 	bl	80004d8 <__aeabi_dmul>
 800a35c:	a370      	add	r3, pc, #448	; (adr r3, 800a520 <__ieee754_pow+0x708>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff03 	bl	800016c <__adddf3>
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	f7f6 f8b5 	bl	80004d8 <__aeabi_dmul>
 800a36e:	a36e      	add	r3, pc, #440	; (adr r3, 800a528 <__ieee754_pow+0x710>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 fefa 	bl	800016c <__adddf3>
 800a378:	4622      	mov	r2, r4
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	462b      	mov	r3, r5
 800a380:	4620      	mov	r0, r4
 800a382:	4629      	mov	r1, r5
 800a384:	f7f6 f8a8 	bl	80004d8 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f6 f8a2 	bl	80004d8 <__aeabi_dmul>
 800a394:	4604      	mov	r4, r0
 800a396:	460d      	mov	r5, r1
 800a398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	f7f5 fee4 	bl	800016c <__adddf3>
 800a3a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a8:	f7f6 f896 	bl	80004d8 <__aeabi_dmul>
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	f7f5 fedc 	bl	800016c <__adddf3>
 800a3b4:	4642      	mov	r2, r8
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	464b      	mov	r3, r9
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7f6 f88a 	bl	80004d8 <__aeabi_dmul>
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4b66      	ldr	r3, [pc, #408]	; (800a560 <__ieee754_pow+0x748>)
 800a3c8:	4682      	mov	sl, r0
 800a3ca:	468b      	mov	fp, r1
 800a3cc:	f7f5 fece 	bl	800016c <__adddf3>
 800a3d0:	4632      	mov	r2, r6
 800a3d2:	463b      	mov	r3, r7
 800a3d4:	f7f5 feca 	bl	800016c <__adddf3>
 800a3d8:	2400      	movs	r4, #0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	4622      	mov	r2, r4
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f6 f878 	bl	80004d8 <__aeabi_dmul>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4680      	mov	r8, r0
 800a3ec:	4689      	mov	r9, r1
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4b5b      	ldr	r3, [pc, #364]	; (800a560 <__ieee754_pow+0x748>)
 800a3f4:	f7f5 feb8 	bl	8000168 <__aeabi_dsub>
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	465b      	mov	r3, fp
 800a3fc:	f7f5 feb4 	bl	8000168 <__aeabi_dsub>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4630      	mov	r0, r6
 800a406:	4639      	mov	r1, r7
 800a408:	f7f5 feae 	bl	8000168 <__aeabi_dsub>
 800a40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a410:	f7f6 f862 	bl	80004d8 <__aeabi_dmul>
 800a414:	4622      	mov	r2, r4
 800a416:	4606      	mov	r6, r0
 800a418:	460f      	mov	r7, r1
 800a41a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a41e:	462b      	mov	r3, r5
 800a420:	f7f6 f85a 	bl	80004d8 <__aeabi_dmul>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4630      	mov	r0, r6
 800a42a:	4639      	mov	r1, r7
 800a42c:	f7f5 fe9e 	bl	800016c <__adddf3>
 800a430:	2400      	movs	r4, #0
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4640      	mov	r0, r8
 800a43c:	4649      	mov	r1, r9
 800a43e:	f7f5 fe95 	bl	800016c <__adddf3>
 800a442:	a33b      	add	r3, pc, #236	; (adr r3, 800a530 <__ieee754_pow+0x718>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	4620      	mov	r0, r4
 800a44a:	460d      	mov	r5, r1
 800a44c:	f7f6 f844 	bl	80004d8 <__aeabi_dmul>
 800a450:	4642      	mov	r2, r8
 800a452:	464b      	mov	r3, r9
 800a454:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a458:	4620      	mov	r0, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	f7f5 fe84 	bl	8000168 <__aeabi_dsub>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f7f5 fe7e 	bl	8000168 <__aeabi_dsub>
 800a46c:	a332      	add	r3, pc, #200	; (adr r3, 800a538 <__ieee754_pow+0x720>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f6 f831 	bl	80004d8 <__aeabi_dmul>
 800a476:	a332      	add	r3, pc, #200	; (adr r3, 800a540 <__ieee754_pow+0x728>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	4606      	mov	r6, r0
 800a47e:	460f      	mov	r7, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f6 f828 	bl	80004d8 <__aeabi_dmul>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4630      	mov	r0, r6
 800a48e:	4639      	mov	r1, r7
 800a490:	f7f5 fe6c 	bl	800016c <__adddf3>
 800a494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a496:	4b33      	ldr	r3, [pc, #204]	; (800a564 <__ieee754_pow+0x74c>)
 800a498:	f04f 0a00 	mov.w	sl, #0
 800a49c:	4413      	add	r3, r2
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f7f5 fe63 	bl	800016c <__adddf3>
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a4aa:	4689      	mov	r9, r1
 800a4ac:	f7f5 ffaa 	bl	8000404 <__aeabi_i2d>
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4b6:	4b2c      	ldr	r3, [pc, #176]	; (800a568 <__ieee754_pow+0x750>)
 800a4b8:	4413      	add	r3, r2
 800a4ba:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a4be:	4642      	mov	r2, r8
 800a4c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4c4:	464b      	mov	r3, r9
 800a4c6:	f7f5 fe51 	bl	800016c <__adddf3>
 800a4ca:	4632      	mov	r2, r6
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	f7f5 fe4d 	bl	800016c <__adddf3>
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	f7f5 fe49 	bl	800016c <__adddf3>
 800a4da:	4622      	mov	r2, r4
 800a4dc:	462b      	mov	r3, r5
 800a4de:	4650      	mov	r0, sl
 800a4e0:	468b      	mov	fp, r1
 800a4e2:	f7f5 fe41 	bl	8000168 <__aeabi_dsub>
 800a4e6:	4632      	mov	r2, r6
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	f7f5 fe3d 	bl	8000168 <__aeabi_dsub>
 800a4ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4f2:	f7f5 fe39 	bl	8000168 <__aeabi_dsub>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	e60d      	b.n	800a11c <__ieee754_pow+0x304>
 800a500:	4a454eef 	.word	0x4a454eef
 800a504:	3fca7e28 	.word	0x3fca7e28
 800a508:	93c9db65 	.word	0x93c9db65
 800a50c:	3fcd864a 	.word	0x3fcd864a
 800a510:	a91d4101 	.word	0xa91d4101
 800a514:	3fd17460 	.word	0x3fd17460
 800a518:	518f264d 	.word	0x518f264d
 800a51c:	3fd55555 	.word	0x3fd55555
 800a520:	db6fabff 	.word	0xdb6fabff
 800a524:	3fdb6db6 	.word	0x3fdb6db6
 800a528:	33333303 	.word	0x33333303
 800a52c:	3fe33333 	.word	0x3fe33333
 800a530:	e0000000 	.word	0xe0000000
 800a534:	3feec709 	.word	0x3feec709
 800a538:	dc3a03fd 	.word	0xdc3a03fd
 800a53c:	3feec709 	.word	0x3feec709
 800a540:	145b01f5 	.word	0x145b01f5
 800a544:	be3e2fe0 	.word	0xbe3e2fe0
 800a548:	7ff00000 	.word	0x7ff00000
 800a54c:	43400000 	.word	0x43400000
 800a550:	0003988e 	.word	0x0003988e
 800a554:	000bb679 	.word	0x000bb679
 800a558:	0800bf28 	.word	0x0800bf28
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	40080000 	.word	0x40080000
 800a564:	0800bf48 	.word	0x0800bf48
 800a568:	0800bf38 	.word	0x0800bf38
 800a56c:	2601      	movs	r6, #1
 800a56e:	e66a      	b.n	800a246 <__ieee754_pow+0x42e>
 800a570:	a39d      	add	r3, pc, #628	; (adr r3, 800a7e8 <__ieee754_pow+0x9d0>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	4640      	mov	r0, r8
 800a578:	4649      	mov	r1, r9
 800a57a:	f7f5 fdf7 	bl	800016c <__adddf3>
 800a57e:	4622      	mov	r2, r4
 800a580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a584:	462b      	mov	r3, r5
 800a586:	4650      	mov	r0, sl
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f5 fded 	bl	8000168 <__aeabi_dsub>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a596:	f7f6 fa2f 	bl	80009f8 <__aeabi_dcmpgt>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f47f ae09 	bne.w	800a1b2 <__ieee754_pow+0x39a>
 800a5a0:	4aa3      	ldr	r2, [pc, #652]	; (800a830 <__ieee754_pow+0xa18>)
 800a5a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	f340 8101 	ble.w	800a7ae <__ieee754_pow+0x996>
 800a5ac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	151b      	asrs	r3, r3, #20
 800a5b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a5b8:	fa4a f303 	asr.w	r3, sl, r3
 800a5bc:	4433      	add	r3, r6
 800a5be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a5c2:	4f9c      	ldr	r7, [pc, #624]	; (800a834 <__ieee754_pow+0xa1c>)
 800a5c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a5c8:	4117      	asrs	r7, r2
 800a5ca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a5ce:	ea23 0107 	bic.w	r1, r3, r7
 800a5d2:	f1c2 0214 	rsb	r2, r2, #20
 800a5d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a5da:	460b      	mov	r3, r1
 800a5dc:	fa4a fa02 	asr.w	sl, sl, r2
 800a5e0:	2e00      	cmp	r6, #0
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	bfb8      	it	lt
 800a5ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800a5ee:	f7f5 fdbb 	bl	8000168 <__aeabi_dsub>
 800a5f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5fa:	2400      	movs	r4, #0
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	464b      	mov	r3, r9
 800a600:	f7f5 fdb4 	bl	800016c <__adddf3>
 800a604:	a37a      	add	r3, pc, #488	; (adr r3, 800a7f0 <__ieee754_pow+0x9d8>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	4620      	mov	r0, r4
 800a60c:	460d      	mov	r5, r1
 800a60e:	f7f5 ff63 	bl	80004d8 <__aeabi_dmul>
 800a612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	4620      	mov	r0, r4
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7f5 fda3 	bl	8000168 <__aeabi_dsub>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4640      	mov	r0, r8
 800a628:	4649      	mov	r1, r9
 800a62a:	f7f5 fd9d 	bl	8000168 <__aeabi_dsub>
 800a62e:	a372      	add	r3, pc, #456	; (adr r3, 800a7f8 <__ieee754_pow+0x9e0>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f5 ff50 	bl	80004d8 <__aeabi_dmul>
 800a638:	a371      	add	r3, pc, #452	; (adr r3, 800a800 <__ieee754_pow+0x9e8>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	4680      	mov	r8, r0
 800a640:	4689      	mov	r9, r1
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f5 ff47 	bl	80004d8 <__aeabi_dmul>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4640      	mov	r0, r8
 800a650:	4649      	mov	r1, r9
 800a652:	f7f5 fd8b 	bl	800016c <__adddf3>
 800a656:	4604      	mov	r4, r0
 800a658:	460d      	mov	r5, r1
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	f7f5 fd83 	bl	800016c <__adddf3>
 800a666:	4632      	mov	r2, r6
 800a668:	463b      	mov	r3, r7
 800a66a:	4680      	mov	r8, r0
 800a66c:	4689      	mov	r9, r1
 800a66e:	f7f5 fd7b 	bl	8000168 <__aeabi_dsub>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	f7f5 fd75 	bl	8000168 <__aeabi_dsub>
 800a67e:	4642      	mov	r2, r8
 800a680:	4606      	mov	r6, r0
 800a682:	460f      	mov	r7, r1
 800a684:	464b      	mov	r3, r9
 800a686:	4640      	mov	r0, r8
 800a688:	4649      	mov	r1, r9
 800a68a:	f7f5 ff25 	bl	80004d8 <__aeabi_dmul>
 800a68e:	a35e      	add	r3, pc, #376	; (adr r3, 800a808 <__ieee754_pow+0x9f0>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	f7f5 ff1e 	bl	80004d8 <__aeabi_dmul>
 800a69c:	a35c      	add	r3, pc, #368	; (adr r3, 800a810 <__ieee754_pow+0x9f8>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f5 fd61 	bl	8000168 <__aeabi_dsub>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	f7f5 ff15 	bl	80004d8 <__aeabi_dmul>
 800a6ae:	a35a      	add	r3, pc, #360	; (adr r3, 800a818 <__ieee754_pow+0xa00>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 fd5a 	bl	800016c <__adddf3>
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 ff0c 	bl	80004d8 <__aeabi_dmul>
 800a6c0:	a357      	add	r3, pc, #348	; (adr r3, 800a820 <__ieee754_pow+0xa08>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f7f5 fd4f 	bl	8000168 <__aeabi_dsub>
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	f7f5 ff03 	bl	80004d8 <__aeabi_dmul>
 800a6d2:	a355      	add	r3, pc, #340	; (adr r3, 800a828 <__ieee754_pow+0xa10>)
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	f7f5 fd48 	bl	800016c <__adddf3>
 800a6dc:	4622      	mov	r2, r4
 800a6de:	462b      	mov	r3, r5
 800a6e0:	f7f5 fefa 	bl	80004d8 <__aeabi_dmul>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f5 fd3c 	bl	8000168 <__aeabi_dsub>
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f5 feec 	bl	80004d8 <__aeabi_dmul>
 800a700:	2200      	movs	r2, #0
 800a702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7f5 fd2b 	bl	8000168 <__aeabi_dsub>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a71a:	f7f6 f807 	bl	800072c <__aeabi_ddiv>
 800a71e:	4632      	mov	r2, r6
 800a720:	4604      	mov	r4, r0
 800a722:	460d      	mov	r5, r1
 800a724:	463b      	mov	r3, r7
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f5 fed5 	bl	80004d8 <__aeabi_dmul>
 800a72e:	4632      	mov	r2, r6
 800a730:	463b      	mov	r3, r7
 800a732:	f7f5 fd1b 	bl	800016c <__adddf3>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4620      	mov	r0, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	f7f5 fd13 	bl	8000168 <__aeabi_dsub>
 800a742:	4642      	mov	r2, r8
 800a744:	464b      	mov	r3, r9
 800a746:	f7f5 fd0f 	bl	8000168 <__aeabi_dsub>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	2000      	movs	r0, #0
 800a750:	4939      	ldr	r1, [pc, #228]	; (800a838 <__ieee754_pow+0xa20>)
 800a752:	f7f5 fd09 	bl	8000168 <__aeabi_dsub>
 800a756:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a75a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a75e:	da29      	bge.n	800a7b4 <__ieee754_pow+0x99c>
 800a760:	4652      	mov	r2, sl
 800a762:	f001 f911 	bl	800b988 <scalbn>
 800a766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a76a:	f7ff bbfe 	b.w	8009f6a <__ieee754_pow+0x152>
 800a76e:	4b33      	ldr	r3, [pc, #204]	; (800a83c <__ieee754_pow+0xa24>)
 800a770:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a774:	429f      	cmp	r7, r3
 800a776:	f77f af13 	ble.w	800a5a0 <__ieee754_pow+0x788>
 800a77a:	4b31      	ldr	r3, [pc, #196]	; (800a840 <__ieee754_pow+0xa28>)
 800a77c:	440b      	add	r3, r1
 800a77e:	4303      	orrs	r3, r0
 800a780:	d009      	beq.n	800a796 <__ieee754_pow+0x97e>
 800a782:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a786:	2200      	movs	r2, #0
 800a788:	2300      	movs	r3, #0
 800a78a:	f7f6 f917 	bl	80009bc <__aeabi_dcmplt>
 800a78e:	3800      	subs	r0, #0
 800a790:	bf18      	it	ne
 800a792:	2001      	movne	r0, #1
 800a794:	e453      	b.n	800a03e <__ieee754_pow+0x226>
 800a796:	4622      	mov	r2, r4
 800a798:	462b      	mov	r3, r5
 800a79a:	f7f5 fce5 	bl	8000168 <__aeabi_dsub>
 800a79e:	4642      	mov	r2, r8
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	f7f6 f91f 	bl	80009e4 <__aeabi_dcmpge>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f43f aefa 	beq.w	800a5a0 <__ieee754_pow+0x788>
 800a7ac:	e7e9      	b.n	800a782 <__ieee754_pow+0x96a>
 800a7ae:	f04f 0a00 	mov.w	sl, #0
 800a7b2:	e720      	b.n	800a5f6 <__ieee754_pow+0x7de>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	e7d6      	b.n	800a766 <__ieee754_pow+0x94e>
 800a7b8:	f04f 0b00 	mov.w	fp, #0
 800a7bc:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a838 <__ieee754_pow+0xa20>
 800a7c0:	f7ff bbba 	b.w	8009f38 <__ieee754_pow+0x120>
 800a7c4:	f04f 0b00 	mov.w	fp, #0
 800a7c8:	f04f 0c00 	mov.w	ip, #0
 800a7cc:	f7ff bbb4 	b.w	8009f38 <__ieee754_pow+0x120>
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	f7ff bb3d 	b.w	8009e52 <__ieee754_pow+0x3a>
 800a7d8:	9200      	str	r2, [sp, #0]
 800a7da:	f7ff bb89 	b.w	8009ef0 <__ieee754_pow+0xd8>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f7ff bb73 	b.w	8009eca <__ieee754_pow+0xb2>
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	652b82fe 	.word	0x652b82fe
 800a7ec:	3c971547 	.word	0x3c971547
 800a7f0:	00000000 	.word	0x00000000
 800a7f4:	3fe62e43 	.word	0x3fe62e43
 800a7f8:	fefa39ef 	.word	0xfefa39ef
 800a7fc:	3fe62e42 	.word	0x3fe62e42
 800a800:	0ca86c39 	.word	0x0ca86c39
 800a804:	be205c61 	.word	0xbe205c61
 800a808:	72bea4d0 	.word	0x72bea4d0
 800a80c:	3e663769 	.word	0x3e663769
 800a810:	c5d26bf1 	.word	0xc5d26bf1
 800a814:	3ebbbd41 	.word	0x3ebbbd41
 800a818:	af25de2c 	.word	0xaf25de2c
 800a81c:	3f11566a 	.word	0x3f11566a
 800a820:	16bebd93 	.word	0x16bebd93
 800a824:	3f66c16c 	.word	0x3f66c16c
 800a828:	5555553e 	.word	0x5555553e
 800a82c:	3fc55555 	.word	0x3fc55555
 800a830:	3fe00000 	.word	0x3fe00000
 800a834:	000fffff 	.word	0x000fffff
 800a838:	3ff00000 	.word	0x3ff00000
 800a83c:	4090cbff 	.word	0x4090cbff
 800a840:	3f6f3400 	.word	0x3f6f3400
 800a844:	00000000 	.word	0x00000000

0800a848 <__ieee754_rem_pio2>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	4614      	mov	r4, r2
 800a84e:	4ac4      	ldr	r2, [pc, #784]	; (800ab60 <__ieee754_rem_pio2+0x318>)
 800a850:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a854:	b08d      	sub	sp, #52	; 0x34
 800a856:	4592      	cmp	sl, r2
 800a858:	9104      	str	r1, [sp, #16]
 800a85a:	dc07      	bgt.n	800a86c <__ieee754_rem_pio2+0x24>
 800a85c:	2200      	movs	r2, #0
 800a85e:	2300      	movs	r3, #0
 800a860:	e9c4 0100 	strd	r0, r1, [r4]
 800a864:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a868:	2500      	movs	r5, #0
 800a86a:	e024      	b.n	800a8b6 <__ieee754_rem_pio2+0x6e>
 800a86c:	4abd      	ldr	r2, [pc, #756]	; (800ab64 <__ieee754_rem_pio2+0x31c>)
 800a86e:	4592      	cmp	sl, r2
 800a870:	dc72      	bgt.n	800a958 <__ieee754_rem_pio2+0x110>
 800a872:	9b04      	ldr	r3, [sp, #16]
 800a874:	4dbc      	ldr	r5, [pc, #752]	; (800ab68 <__ieee754_rem_pio2+0x320>)
 800a876:	2b00      	cmp	r3, #0
 800a878:	a3ab      	add	r3, pc, #684	; (adr r3, 800ab28 <__ieee754_rem_pio2+0x2e0>)
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	dd36      	ble.n	800a8ee <__ieee754_rem_pio2+0xa6>
 800a880:	f7f5 fc72 	bl	8000168 <__aeabi_dsub>
 800a884:	45aa      	cmp	sl, r5
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	d018      	beq.n	800a8be <__ieee754_rem_pio2+0x76>
 800a88c:	a3a8      	add	r3, pc, #672	; (adr r3, 800ab30 <__ieee754_rem_pio2+0x2e8>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7f5 fc69 	bl	8000168 <__aeabi_dsub>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4630      	mov	r0, r6
 800a89c:	e9c4 2300 	strd	r2, r3, [r4]
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	f7f5 fc61 	bl	8000168 <__aeabi_dsub>
 800a8a6:	a3a2      	add	r3, pc, #648	; (adr r3, 800ab30 <__ieee754_rem_pio2+0x2e8>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f7f5 fc5c 	bl	8000168 <__aeabi_dsub>
 800a8b0:	2501      	movs	r5, #1
 800a8b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	b00d      	add	sp, #52	; 0x34
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	a39e      	add	r3, pc, #632	; (adr r3, 800ab38 <__ieee754_rem_pio2+0x2f0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fc50 	bl	8000168 <__aeabi_dsub>
 800a8c8:	a39d      	add	r3, pc, #628	; (adr r3, 800ab40 <__ieee754_rem_pio2+0x2f8>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460f      	mov	r7, r1
 800a8d2:	f7f5 fc49 	bl	8000168 <__aeabi_dsub>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4630      	mov	r0, r6
 800a8dc:	e9c4 2300 	strd	r2, r3, [r4]
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f5 fc41 	bl	8000168 <__aeabi_dsub>
 800a8e6:	a396      	add	r3, pc, #600	; (adr r3, 800ab40 <__ieee754_rem_pio2+0x2f8>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	e7de      	b.n	800a8ac <__ieee754_rem_pio2+0x64>
 800a8ee:	f7f5 fc3d 	bl	800016c <__adddf3>
 800a8f2:	45aa      	cmp	sl, r5
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	460f      	mov	r7, r1
 800a8f8:	d016      	beq.n	800a928 <__ieee754_rem_pio2+0xe0>
 800a8fa:	a38d      	add	r3, pc, #564	; (adr r3, 800ab30 <__ieee754_rem_pio2+0x2e8>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f7f5 fc34 	bl	800016c <__adddf3>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4630      	mov	r0, r6
 800a90a:	e9c4 2300 	strd	r2, r3, [r4]
 800a90e:	4639      	mov	r1, r7
 800a910:	f7f5 fc2a 	bl	8000168 <__aeabi_dsub>
 800a914:	a386      	add	r3, pc, #536	; (adr r3, 800ab30 <__ieee754_rem_pio2+0x2e8>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f7f5 fc27 	bl	800016c <__adddf3>
 800a91e:	f04f 35ff 	mov.w	r5, #4294967295
 800a922:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a926:	e7c6      	b.n	800a8b6 <__ieee754_rem_pio2+0x6e>
 800a928:	a383      	add	r3, pc, #524	; (adr r3, 800ab38 <__ieee754_rem_pio2+0x2f0>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f7f5 fc1d 	bl	800016c <__adddf3>
 800a932:	a383      	add	r3, pc, #524	; (adr r3, 800ab40 <__ieee754_rem_pio2+0x2f8>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	f7f5 fc16 	bl	800016c <__adddf3>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4630      	mov	r0, r6
 800a946:	e9c4 2300 	strd	r2, r3, [r4]
 800a94a:	4639      	mov	r1, r7
 800a94c:	f7f5 fc0c 	bl	8000168 <__aeabi_dsub>
 800a950:	a37b      	add	r3, pc, #492	; (adr r3, 800ab40 <__ieee754_rem_pio2+0x2f8>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	e7e0      	b.n	800a91a <__ieee754_rem_pio2+0xd2>
 800a958:	4a84      	ldr	r2, [pc, #528]	; (800ab6c <__ieee754_rem_pio2+0x324>)
 800a95a:	4592      	cmp	sl, r2
 800a95c:	f300 80d5 	bgt.w	800ab0a <__ieee754_rem_pio2+0x2c2>
 800a960:	f000 ff86 	bl	800b870 <fabs>
 800a964:	a378      	add	r3, pc, #480	; (adr r3, 800ab48 <__ieee754_rem_pio2+0x300>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	f7f5 fdb3 	bl	80004d8 <__aeabi_dmul>
 800a972:	2200      	movs	r2, #0
 800a974:	4b7e      	ldr	r3, [pc, #504]	; (800ab70 <__ieee754_rem_pio2+0x328>)
 800a976:	f7f5 fbf9 	bl	800016c <__adddf3>
 800a97a:	f7f6 f85d 	bl	8000a38 <__aeabi_d2iz>
 800a97e:	4605      	mov	r5, r0
 800a980:	f7f5 fd40 	bl	8000404 <__aeabi_i2d>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a98c:	a366      	add	r3, pc, #408	; (adr r3, 800ab28 <__ieee754_rem_pio2+0x2e0>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fda1 	bl	80004d8 <__aeabi_dmul>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4630      	mov	r0, r6
 800a99c:	4639      	mov	r1, r7
 800a99e:	f7f5 fbe3 	bl	8000168 <__aeabi_dsub>
 800a9a2:	a363      	add	r3, pc, #396	; (adr r3, 800ab30 <__ieee754_rem_pio2+0x2e8>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	4680      	mov	r8, r0
 800a9aa:	4689      	mov	r9, r1
 800a9ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9b0:	f7f5 fd92 	bl	80004d8 <__aeabi_dmul>
 800a9b4:	2d1f      	cmp	r5, #31
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	dc0e      	bgt.n	800a9da <__ieee754_rem_pio2+0x192>
 800a9bc:	4b6d      	ldr	r3, [pc, #436]	; (800ab74 <__ieee754_rem_pio2+0x32c>)
 800a9be:	1e6a      	subs	r2, r5, #1
 800a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c4:	4553      	cmp	r3, sl
 800a9c6:	d008      	beq.n	800a9da <__ieee754_rem_pio2+0x192>
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	f7f5 fbca 	bl	8000168 <__aeabi_dsub>
 800a9d4:	e9c4 0100 	strd	r0, r1, [r4]
 800a9d8:	e013      	b.n	800aa02 <__ieee754_rem_pio2+0x1ba>
 800a9da:	463b      	mov	r3, r7
 800a9dc:	4632      	mov	r2, r6
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fbc1 	bl	8000168 <__aeabi_dsub>
 800a9e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a9ea:	9305      	str	r3, [sp, #20]
 800a9ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800a9f4:	f1ba 0f10 	cmp.w	sl, #16
 800a9f8:	dc1f      	bgt.n	800aa3a <__ieee754_rem_pio2+0x1f2>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	e9c4 2300 	strd	r2, r3, [r4]
 800aa02:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800aa06:	4640      	mov	r0, r8
 800aa08:	4653      	mov	r3, sl
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	f7f5 fbac 	bl	8000168 <__aeabi_dsub>
 800aa10:	4632      	mov	r2, r6
 800aa12:	463b      	mov	r3, r7
 800aa14:	f7f5 fba8 	bl	8000168 <__aeabi_dsub>
 800aa18:	460b      	mov	r3, r1
 800aa1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa1e:	9904      	ldr	r1, [sp, #16]
 800aa20:	4602      	mov	r2, r0
 800aa22:	2900      	cmp	r1, #0
 800aa24:	f6bf af47 	bge.w	800a8b6 <__ieee754_rem_pio2+0x6e>
 800aa28:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800aa2c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800aa30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa34:	60e3      	str	r3, [r4, #12]
 800aa36:	426d      	negs	r5, r5
 800aa38:	e73d      	b.n	800a8b6 <__ieee754_rem_pio2+0x6e>
 800aa3a:	a33f      	add	r3, pc, #252	; (adr r3, 800ab38 <__ieee754_rem_pio2+0x2f0>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa44:	f7f5 fd48 	bl	80004d8 <__aeabi_dmul>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	460f      	mov	r7, r1
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4640      	mov	r0, r8
 800aa52:	4649      	mov	r1, r9
 800aa54:	f7f5 fb88 	bl	8000168 <__aeabi_dsub>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	468b      	mov	fp, r1
 800aa60:	4640      	mov	r0, r8
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f5 fb80 	bl	8000168 <__aeabi_dsub>
 800aa68:	4632      	mov	r2, r6
 800aa6a:	463b      	mov	r3, r7
 800aa6c:	f7f5 fb7c 	bl	8000168 <__aeabi_dsub>
 800aa70:	a333      	add	r3, pc, #204	; (adr r3, 800ab40 <__ieee754_rem_pio2+0x2f8>)
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa7e:	f7f5 fd2b 	bl	80004d8 <__aeabi_dmul>
 800aa82:	4632      	mov	r2, r6
 800aa84:	463b      	mov	r3, r7
 800aa86:	f7f5 fb6f 	bl	8000168 <__aeabi_dsub>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460f      	mov	r7, r1
 800aa92:	4650      	mov	r0, sl
 800aa94:	4659      	mov	r1, fp
 800aa96:	f7f5 fb67 	bl	8000168 <__aeabi_dsub>
 800aa9a:	9a05      	ldr	r2, [sp, #20]
 800aa9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b31      	cmp	r3, #49	; 0x31
 800aaa4:	dc06      	bgt.n	800aab4 <__ieee754_rem_pio2+0x26c>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	46d0      	mov	r8, sl
 800aaac:	46d9      	mov	r9, fp
 800aaae:	e9c4 2300 	strd	r2, r3, [r4]
 800aab2:	e7a6      	b.n	800aa02 <__ieee754_rem_pio2+0x1ba>
 800aab4:	a326      	add	r3, pc, #152	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x308>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aabe:	f7f5 fd0b 	bl	80004d8 <__aeabi_dmul>
 800aac2:	4606      	mov	r6, r0
 800aac4:	460f      	mov	r7, r1
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4650      	mov	r0, sl
 800aacc:	4659      	mov	r1, fp
 800aace:	f7f5 fb4b 	bl	8000168 <__aeabi_dsub>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4680      	mov	r8, r0
 800aad8:	4689      	mov	r9, r1
 800aada:	4650      	mov	r0, sl
 800aadc:	4659      	mov	r1, fp
 800aade:	f7f5 fb43 	bl	8000168 <__aeabi_dsub>
 800aae2:	4632      	mov	r2, r6
 800aae4:	463b      	mov	r3, r7
 800aae6:	f7f5 fb3f 	bl	8000168 <__aeabi_dsub>
 800aaea:	a31b      	add	r3, pc, #108	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x310>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf8:	f7f5 fcee 	bl	80004d8 <__aeabi_dmul>
 800aafc:	4632      	mov	r2, r6
 800aafe:	463b      	mov	r3, r7
 800ab00:	f7f5 fb32 	bl	8000168 <__aeabi_dsub>
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	e75e      	b.n	800a9c8 <__ieee754_rem_pio2+0x180>
 800ab0a:	4a1b      	ldr	r2, [pc, #108]	; (800ab78 <__ieee754_rem_pio2+0x330>)
 800ab0c:	4592      	cmp	sl, r2
 800ab0e:	dd35      	ble.n	800ab7c <__ieee754_rem_pio2+0x334>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	f7f5 fb28 	bl	8000168 <__aeabi_dsub>
 800ab18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab1c:	e9c4 0100 	strd	r0, r1, [r4]
 800ab20:	e6a2      	b.n	800a868 <__ieee754_rem_pio2+0x20>
 800ab22:	bf00      	nop
 800ab24:	f3af 8000 	nop.w
 800ab28:	54400000 	.word	0x54400000
 800ab2c:	3ff921fb 	.word	0x3ff921fb
 800ab30:	1a626331 	.word	0x1a626331
 800ab34:	3dd0b461 	.word	0x3dd0b461
 800ab38:	1a600000 	.word	0x1a600000
 800ab3c:	3dd0b461 	.word	0x3dd0b461
 800ab40:	2e037073 	.word	0x2e037073
 800ab44:	3ba3198a 	.word	0x3ba3198a
 800ab48:	6dc9c883 	.word	0x6dc9c883
 800ab4c:	3fe45f30 	.word	0x3fe45f30
 800ab50:	2e000000 	.word	0x2e000000
 800ab54:	3ba3198a 	.word	0x3ba3198a
 800ab58:	252049c1 	.word	0x252049c1
 800ab5c:	397b839a 	.word	0x397b839a
 800ab60:	3fe921fb 	.word	0x3fe921fb
 800ab64:	4002d97b 	.word	0x4002d97b
 800ab68:	3ff921fb 	.word	0x3ff921fb
 800ab6c:	413921fb 	.word	0x413921fb
 800ab70:	3fe00000 	.word	0x3fe00000
 800ab74:	0800bf58 	.word	0x0800bf58
 800ab78:	7fefffff 	.word	0x7fefffff
 800ab7c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800ab80:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ab84:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800ab88:	460f      	mov	r7, r1
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	f7f5 ff54 	bl	8000a38 <__aeabi_d2iz>
 800ab90:	f7f5 fc38 	bl	8000404 <__aeabi_i2d>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aba0:	f7f5 fae2 	bl	8000168 <__aeabi_dsub>
 800aba4:	2200      	movs	r2, #0
 800aba6:	4b22      	ldr	r3, [pc, #136]	; (800ac30 <__ieee754_rem_pio2+0x3e8>)
 800aba8:	f7f5 fc96 	bl	80004d8 <__aeabi_dmul>
 800abac:	460f      	mov	r7, r1
 800abae:	4606      	mov	r6, r0
 800abb0:	f7f5 ff42 	bl	8000a38 <__aeabi_d2iz>
 800abb4:	f7f5 fc26 	bl	8000404 <__aeabi_i2d>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800abc4:	f7f5 fad0 	bl	8000168 <__aeabi_dsub>
 800abc8:	2200      	movs	r2, #0
 800abca:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <__ieee754_rem_pio2+0x3e8>)
 800abcc:	f7f5 fc84 	bl	80004d8 <__aeabi_dmul>
 800abd0:	f04f 0803 	mov.w	r8, #3
 800abd4:	2600      	movs	r6, #0
 800abd6:	2700      	movs	r7, #0
 800abd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800abdc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800abe0:	4632      	mov	r2, r6
 800abe2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800abe6:	463b      	mov	r3, r7
 800abe8:	46c2      	mov	sl, r8
 800abea:	f108 38ff 	add.w	r8, r8, #4294967295
 800abee:	f7f5 fedb 	bl	80009a8 <__aeabi_dcmpeq>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d1f4      	bne.n	800abe0 <__ieee754_rem_pio2+0x398>
 800abf6:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <__ieee754_rem_pio2+0x3ec>)
 800abf8:	462a      	mov	r2, r5
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	2302      	movs	r3, #2
 800abfe:	4621      	mov	r1, r4
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	a806      	add	r0, sp, #24
 800ac04:	4653      	mov	r3, sl
 800ac06:	f000 f8c7 	bl	800ad98 <__kernel_rem_pio2>
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f6bf ae51 	bge.w	800a8b6 <__ieee754_rem_pio2+0x6e>
 800ac14:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ac18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac1c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac20:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ac24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac28:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac2c:	e703      	b.n	800aa36 <__ieee754_rem_pio2+0x1ee>
 800ac2e:	bf00      	nop
 800ac30:	41700000 	.word	0x41700000
 800ac34:	0800bfd8 	.word	0x0800bfd8

0800ac38 <__ieee754_sqrt>:
 800ac38:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ad94 <__ieee754_sqrt+0x15c>
 800ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac40:	ea3c 0c01 	bics.w	ip, ip, r1
 800ac44:	4606      	mov	r6, r0
 800ac46:	460d      	mov	r5, r1
 800ac48:	460c      	mov	r4, r1
 800ac4a:	460a      	mov	r2, r1
 800ac4c:	4607      	mov	r7, r0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	d10f      	bne.n	800ac72 <__ieee754_sqrt+0x3a>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	f7f5 fc3f 	bl	80004d8 <__aeabi_dmul>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7f5 fa83 	bl	800016c <__adddf3>
 800ac66:	4606      	mov	r6, r0
 800ac68:	460d      	mov	r5, r1
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac72:	2900      	cmp	r1, #0
 800ac74:	dc0e      	bgt.n	800ac94 <__ieee754_sqrt+0x5c>
 800ac76:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ac7a:	ea5c 0707 	orrs.w	r7, ip, r7
 800ac7e:	d0f4      	beq.n	800ac6a <__ieee754_sqrt+0x32>
 800ac80:	b141      	cbz	r1, 800ac94 <__ieee754_sqrt+0x5c>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	f7f5 fa6f 	bl	8000168 <__aeabi_dsub>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	f7f5 fd4d 	bl	800072c <__aeabi_ddiv>
 800ac92:	e7e8      	b.n	800ac66 <__ieee754_sqrt+0x2e>
 800ac94:	1521      	asrs	r1, r4, #20
 800ac96:	d075      	beq.n	800ad84 <__ieee754_sqrt+0x14c>
 800ac98:	07cc      	lsls	r4, r1, #31
 800ac9a:	f04f 0400 	mov.w	r4, #0
 800ac9e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aca2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800aca6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800acaa:	bf5e      	ittt	pl
 800acac:	0fd9      	lsrpl	r1, r3, #31
 800acae:	005b      	lslpl	r3, r3, #1
 800acb0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800acb4:	0fd9      	lsrs	r1, r3, #31
 800acb6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800acba:	2516      	movs	r5, #22
 800acbc:	4620      	mov	r0, r4
 800acbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acc2:	107f      	asrs	r7, r7, #1
 800acc4:	005b      	lsls	r3, r3, #1
 800acc6:	1846      	adds	r6, r0, r1
 800acc8:	4296      	cmp	r6, r2
 800acca:	bfde      	ittt	le
 800accc:	1b92      	suble	r2, r2, r6
 800acce:	1870      	addle	r0, r6, r1
 800acd0:	1864      	addle	r4, r4, r1
 800acd2:	0052      	lsls	r2, r2, #1
 800acd4:	3d01      	subs	r5, #1
 800acd6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800acda:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800acde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ace2:	d1f0      	bne.n	800acc6 <__ieee754_sqrt+0x8e>
 800ace4:	4629      	mov	r1, r5
 800ace6:	f04f 0e20 	mov.w	lr, #32
 800acea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800acee:	4282      	cmp	r2, r0
 800acf0:	eb06 0c05 	add.w	ip, r6, r5
 800acf4:	dc02      	bgt.n	800acfc <__ieee754_sqrt+0xc4>
 800acf6:	d113      	bne.n	800ad20 <__ieee754_sqrt+0xe8>
 800acf8:	459c      	cmp	ip, r3
 800acfa:	d811      	bhi.n	800ad20 <__ieee754_sqrt+0xe8>
 800acfc:	f1bc 0f00 	cmp.w	ip, #0
 800ad00:	eb0c 0506 	add.w	r5, ip, r6
 800ad04:	da43      	bge.n	800ad8e <__ieee754_sqrt+0x156>
 800ad06:	2d00      	cmp	r5, #0
 800ad08:	db41      	blt.n	800ad8e <__ieee754_sqrt+0x156>
 800ad0a:	f100 0801 	add.w	r8, r0, #1
 800ad0e:	1a12      	subs	r2, r2, r0
 800ad10:	4640      	mov	r0, r8
 800ad12:	459c      	cmp	ip, r3
 800ad14:	bf88      	it	hi
 800ad16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ad1a:	eba3 030c 	sub.w	r3, r3, ip
 800ad1e:	4431      	add	r1, r6
 800ad20:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ad24:	f1be 0e01 	subs.w	lr, lr, #1
 800ad28:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800ad2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ad34:	d1db      	bne.n	800acee <__ieee754_sqrt+0xb6>
 800ad36:	4313      	orrs	r3, r2
 800ad38:	d006      	beq.n	800ad48 <__ieee754_sqrt+0x110>
 800ad3a:	1c48      	adds	r0, r1, #1
 800ad3c:	bf0b      	itete	eq
 800ad3e:	4671      	moveq	r1, lr
 800ad40:	3101      	addne	r1, #1
 800ad42:	3401      	addeq	r4, #1
 800ad44:	f021 0101 	bicne.w	r1, r1, #1
 800ad48:	1063      	asrs	r3, r4, #1
 800ad4a:	0849      	lsrs	r1, r1, #1
 800ad4c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ad50:	07e2      	lsls	r2, r4, #31
 800ad52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ad56:	bf48      	it	mi
 800ad58:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ad5c:	460e      	mov	r6, r1
 800ad5e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ad62:	e782      	b.n	800ac6a <__ieee754_sqrt+0x32>
 800ad64:	0ada      	lsrs	r2, r3, #11
 800ad66:	3815      	subs	r0, #21
 800ad68:	055b      	lsls	r3, r3, #21
 800ad6a:	2a00      	cmp	r2, #0
 800ad6c:	d0fa      	beq.n	800ad64 <__ieee754_sqrt+0x12c>
 800ad6e:	02d5      	lsls	r5, r2, #11
 800ad70:	d50a      	bpl.n	800ad88 <__ieee754_sqrt+0x150>
 800ad72:	f1c1 0420 	rsb	r4, r1, #32
 800ad76:	fa23 f404 	lsr.w	r4, r3, r4
 800ad7a:	1e4d      	subs	r5, r1, #1
 800ad7c:	408b      	lsls	r3, r1
 800ad7e:	4322      	orrs	r2, r4
 800ad80:	1b41      	subs	r1, r0, r5
 800ad82:	e789      	b.n	800ac98 <__ieee754_sqrt+0x60>
 800ad84:	4608      	mov	r0, r1
 800ad86:	e7f0      	b.n	800ad6a <__ieee754_sqrt+0x132>
 800ad88:	0052      	lsls	r2, r2, #1
 800ad8a:	3101      	adds	r1, #1
 800ad8c:	e7ef      	b.n	800ad6e <__ieee754_sqrt+0x136>
 800ad8e:	4680      	mov	r8, r0
 800ad90:	e7bd      	b.n	800ad0e <__ieee754_sqrt+0xd6>
 800ad92:	bf00      	nop
 800ad94:	7ff00000 	.word	0x7ff00000

0800ad98 <__kernel_rem_pio2>:
 800ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ada0:	9308      	str	r3, [sp, #32]
 800ada2:	9106      	str	r1, [sp, #24]
 800ada4:	4bb6      	ldr	r3, [pc, #728]	; (800b080 <__kernel_rem_pio2+0x2e8>)
 800ada6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ada8:	f112 0f14 	cmn.w	r2, #20
 800adac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adb0:	bfa8      	it	ge
 800adb2:	1ed4      	subge	r4, r2, #3
 800adb4:	9302      	str	r3, [sp, #8]
 800adb6:	9b08      	ldr	r3, [sp, #32]
 800adb8:	bfb8      	it	lt
 800adba:	2400      	movlt	r4, #0
 800adbc:	f103 33ff 	add.w	r3, r3, #4294967295
 800adc0:	9307      	str	r3, [sp, #28]
 800adc2:	bfa4      	itt	ge
 800adc4:	2318      	movge	r3, #24
 800adc6:	fb94 f4f3 	sdivge	r4, r4, r3
 800adca:	f06f 0317 	mvn.w	r3, #23
 800adce:	fb04 3303 	mla	r3, r4, r3, r3
 800add2:	eb03 0b02 	add.w	fp, r3, r2
 800add6:	9a07      	ldr	r2, [sp, #28]
 800add8:	9b02      	ldr	r3, [sp, #8]
 800adda:	1aa7      	subs	r7, r4, r2
 800addc:	eb03 0802 	add.w	r8, r3, r2
 800ade0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ade2:	2500      	movs	r5, #0
 800ade4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ade8:	2200      	movs	r2, #0
 800adea:	2300      	movs	r3, #0
 800adec:	9009      	str	r0, [sp, #36]	; 0x24
 800adee:	ae20      	add	r6, sp, #128	; 0x80
 800adf0:	4545      	cmp	r5, r8
 800adf2:	dd14      	ble.n	800ae1e <__kernel_rem_pio2+0x86>
 800adf4:	f04f 0800 	mov.w	r8, #0
 800adf8:	9a08      	ldr	r2, [sp, #32]
 800adfa:	ab20      	add	r3, sp, #128	; 0x80
 800adfc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ae00:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	4598      	cmp	r8, r3
 800ae08:	dc35      	bgt.n	800ae76 <__kernel_rem_pio2+0xde>
 800ae0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f1a3 0908 	sub.w	r9, r3, #8
 800ae12:	2300      	movs	r3, #0
 800ae14:	462f      	mov	r7, r5
 800ae16:	2600      	movs	r6, #0
 800ae18:	e9cd 2300 	strd	r2, r3, [sp]
 800ae1c:	e01f      	b.n	800ae5e <__kernel_rem_pio2+0xc6>
 800ae1e:	42ef      	cmn	r7, r5
 800ae20:	d40b      	bmi.n	800ae3a <__kernel_rem_pio2+0xa2>
 800ae22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae26:	e9cd 2300 	strd	r2, r3, [sp]
 800ae2a:	f7f5 faeb 	bl	8000404 <__aeabi_i2d>
 800ae2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae36:	3501      	adds	r5, #1
 800ae38:	e7da      	b.n	800adf0 <__kernel_rem_pio2+0x58>
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	e7f8      	b.n	800ae32 <__kernel_rem_pio2+0x9a>
 800ae40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae44:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ae48:	f7f5 fb46 	bl	80004d8 <__aeabi_dmul>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae54:	f7f5 f98a 	bl	800016c <__adddf3>
 800ae58:	e9cd 0100 	strd	r0, r1, [sp]
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	9b07      	ldr	r3, [sp, #28]
 800ae60:	3f08      	subs	r7, #8
 800ae62:	429e      	cmp	r6, r3
 800ae64:	ddec      	ble.n	800ae40 <__kernel_rem_pio2+0xa8>
 800ae66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae6a:	f108 0801 	add.w	r8, r8, #1
 800ae6e:	e8ea 2302 	strd	r2, r3, [sl], #8
 800ae72:	3508      	adds	r5, #8
 800ae74:	e7c6      	b.n	800ae04 <__kernel_rem_pio2+0x6c>
 800ae76:	9b02      	ldr	r3, [sp, #8]
 800ae78:	aa0c      	add	r2, sp, #48	; 0x30
 800ae7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae80:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ae82:	9e02      	ldr	r6, [sp, #8]
 800ae84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ae88:	930a      	str	r3, [sp, #40]	; 0x28
 800ae8a:	ab98      	add	r3, sp, #608	; 0x260
 800ae8c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae90:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800ae94:	ab70      	add	r3, sp, #448	; 0x1c0
 800ae96:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800ae9a:	46d0      	mov	r8, sl
 800ae9c:	46b1      	mov	r9, r6
 800ae9e:	af0c      	add	r7, sp, #48	; 0x30
 800aea0:	9700      	str	r7, [sp, #0]
 800aea2:	f1b9 0f00 	cmp.w	r9, #0
 800aea6:	f1a8 0808 	sub.w	r8, r8, #8
 800aeaa:	dc71      	bgt.n	800af90 <__kernel_rem_pio2+0x1f8>
 800aeac:	465a      	mov	r2, fp
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f000 fd69 	bl	800b988 <scalbn>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aebc:	4604      	mov	r4, r0
 800aebe:	460d      	mov	r5, r1
 800aec0:	f7f5 fb0a 	bl	80004d8 <__aeabi_dmul>
 800aec4:	f000 fce0 	bl	800b888 <floor>
 800aec8:	2200      	movs	r2, #0
 800aeca:	4b6e      	ldr	r3, [pc, #440]	; (800b084 <__kernel_rem_pio2+0x2ec>)
 800aecc:	f7f5 fb04 	bl	80004d8 <__aeabi_dmul>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4620      	mov	r0, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	f7f5 f946 	bl	8000168 <__aeabi_dsub>
 800aedc:	460d      	mov	r5, r1
 800aede:	4604      	mov	r4, r0
 800aee0:	f7f5 fdaa 	bl	8000a38 <__aeabi_d2iz>
 800aee4:	9004      	str	r0, [sp, #16]
 800aee6:	f7f5 fa8d 	bl	8000404 <__aeabi_i2d>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4620      	mov	r0, r4
 800aef0:	4629      	mov	r1, r5
 800aef2:	f7f5 f939 	bl	8000168 <__aeabi_dsub>
 800aef6:	f1bb 0f00 	cmp.w	fp, #0
 800aefa:	4680      	mov	r8, r0
 800aefc:	4689      	mov	r9, r1
 800aefe:	dd70      	ble.n	800afe2 <__kernel_rem_pio2+0x24a>
 800af00:	1e72      	subs	r2, r6, #1
 800af02:	ab0c      	add	r3, sp, #48	; 0x30
 800af04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af08:	9c04      	ldr	r4, [sp, #16]
 800af0a:	f1cb 0118 	rsb	r1, fp, #24
 800af0e:	fa40 f301 	asr.w	r3, r0, r1
 800af12:	441c      	add	r4, r3
 800af14:	408b      	lsls	r3, r1
 800af16:	1ac0      	subs	r0, r0, r3
 800af18:	ab0c      	add	r3, sp, #48	; 0x30
 800af1a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800af1e:	f1cb 0317 	rsb	r3, fp, #23
 800af22:	9404      	str	r4, [sp, #16]
 800af24:	fa40 f303 	asr.w	r3, r0, r3
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	9b00      	ldr	r3, [sp, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dd66      	ble.n	800affe <__kernel_rem_pio2+0x266>
 800af30:	2200      	movs	r2, #0
 800af32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800af36:	4614      	mov	r4, r2
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	3301      	adds	r3, #1
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	4296      	cmp	r6, r2
 800af40:	f300 80ac 	bgt.w	800b09c <__kernel_rem_pio2+0x304>
 800af44:	f1bb 0f00 	cmp.w	fp, #0
 800af48:	dd07      	ble.n	800af5a <__kernel_rem_pio2+0x1c2>
 800af4a:	f1bb 0f01 	cmp.w	fp, #1
 800af4e:	f000 80b4 	beq.w	800b0ba <__kernel_rem_pio2+0x322>
 800af52:	f1bb 0f02 	cmp.w	fp, #2
 800af56:	f000 80ba 	beq.w	800b0ce <__kernel_rem_pio2+0x336>
 800af5a:	9b00      	ldr	r3, [sp, #0]
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d14e      	bne.n	800affe <__kernel_rem_pio2+0x266>
 800af60:	4642      	mov	r2, r8
 800af62:	464b      	mov	r3, r9
 800af64:	2000      	movs	r0, #0
 800af66:	4948      	ldr	r1, [pc, #288]	; (800b088 <__kernel_rem_pio2+0x2f0>)
 800af68:	f7f5 f8fe 	bl	8000168 <__aeabi_dsub>
 800af6c:	4680      	mov	r8, r0
 800af6e:	4689      	mov	r9, r1
 800af70:	2c00      	cmp	r4, #0
 800af72:	d044      	beq.n	800affe <__kernel_rem_pio2+0x266>
 800af74:	465a      	mov	r2, fp
 800af76:	2000      	movs	r0, #0
 800af78:	4943      	ldr	r1, [pc, #268]	; (800b088 <__kernel_rem_pio2+0x2f0>)
 800af7a:	f000 fd05 	bl	800b988 <scalbn>
 800af7e:	4602      	mov	r2, r0
 800af80:	460b      	mov	r3, r1
 800af82:	4640      	mov	r0, r8
 800af84:	4649      	mov	r1, r9
 800af86:	f7f5 f8ef 	bl	8000168 <__aeabi_dsub>
 800af8a:	4680      	mov	r8, r0
 800af8c:	4689      	mov	r9, r1
 800af8e:	e036      	b.n	800affe <__kernel_rem_pio2+0x266>
 800af90:	2200      	movs	r2, #0
 800af92:	4b3e      	ldr	r3, [pc, #248]	; (800b08c <__kernel_rem_pio2+0x2f4>)
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 fa9e 	bl	80004d8 <__aeabi_dmul>
 800af9c:	f7f5 fd4c 	bl	8000a38 <__aeabi_d2iz>
 800afa0:	f7f5 fa30 	bl	8000404 <__aeabi_i2d>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afac:	2200      	movs	r2, #0
 800afae:	4b38      	ldr	r3, [pc, #224]	; (800b090 <__kernel_rem_pio2+0x2f8>)
 800afb0:	f7f5 fa92 	bl	80004d8 <__aeabi_dmul>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f7f5 f8d4 	bl	8000168 <__aeabi_dsub>
 800afc0:	f7f5 fd3a 	bl	8000a38 <__aeabi_d2iz>
 800afc4:	9b00      	ldr	r3, [sp, #0]
 800afc6:	f109 39ff 	add.w	r9, r9, #4294967295
 800afca:	f843 0b04 	str.w	r0, [r3], #4
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afd4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800afd8:	f7f5 f8c8 	bl	800016c <__adddf3>
 800afdc:	4604      	mov	r4, r0
 800afde:	460d      	mov	r5, r1
 800afe0:	e75f      	b.n	800aea2 <__kernel_rem_pio2+0x10a>
 800afe2:	d105      	bne.n	800aff0 <__kernel_rem_pio2+0x258>
 800afe4:	1e73      	subs	r3, r6, #1
 800afe6:	aa0c      	add	r2, sp, #48	; 0x30
 800afe8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800afec:	15c3      	asrs	r3, r0, #23
 800afee:	e79b      	b.n	800af28 <__kernel_rem_pio2+0x190>
 800aff0:	2200      	movs	r2, #0
 800aff2:	4b28      	ldr	r3, [pc, #160]	; (800b094 <__kernel_rem_pio2+0x2fc>)
 800aff4:	f7f5 fcf6 	bl	80009e4 <__aeabi_dcmpge>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d13e      	bne.n	800b07a <__kernel_rem_pio2+0x2e2>
 800affc:	9000      	str	r0, [sp, #0]
 800affe:	2200      	movs	r2, #0
 800b000:	2300      	movs	r3, #0
 800b002:	4640      	mov	r0, r8
 800b004:	4649      	mov	r1, r9
 800b006:	f7f5 fccf 	bl	80009a8 <__aeabi_dcmpeq>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f000 80b1 	beq.w	800b172 <__kernel_rem_pio2+0x3da>
 800b010:	1e74      	subs	r4, r6, #1
 800b012:	4623      	mov	r3, r4
 800b014:	2200      	movs	r2, #0
 800b016:	9902      	ldr	r1, [sp, #8]
 800b018:	428b      	cmp	r3, r1
 800b01a:	da5f      	bge.n	800b0dc <__kernel_rem_pio2+0x344>
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	d074      	beq.n	800b10a <__kernel_rem_pio2+0x372>
 800b020:	ab0c      	add	r3, sp, #48	; 0x30
 800b022:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b026:	f1ab 0b18 	sub.w	fp, fp, #24
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 809f 	beq.w	800b16e <__kernel_rem_pio2+0x3d6>
 800b030:	465a      	mov	r2, fp
 800b032:	2000      	movs	r0, #0
 800b034:	4914      	ldr	r1, [pc, #80]	; (800b088 <__kernel_rem_pio2+0x2f0>)
 800b036:	f000 fca7 	bl	800b988 <scalbn>
 800b03a:	46a2      	mov	sl, r4
 800b03c:	4606      	mov	r6, r0
 800b03e:	460f      	mov	r7, r1
 800b040:	f04f 0800 	mov.w	r8, #0
 800b044:	ab70      	add	r3, sp, #448	; 0x1c0
 800b046:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b08c <__kernel_rem_pio2+0x2f4>
 800b04a:	00e5      	lsls	r5, r4, #3
 800b04c:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b050:	f1ba 0f00 	cmp.w	sl, #0
 800b054:	f280 80c3 	bge.w	800b1de <__kernel_rem_pio2+0x446>
 800b058:	4626      	mov	r6, r4
 800b05a:	2e00      	cmp	r6, #0
 800b05c:	f2c0 80f5 	blt.w	800b24a <__kernel_rem_pio2+0x4b2>
 800b060:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <__kernel_rem_pio2+0x300>)
 800b062:	f04f 0a00 	mov.w	sl, #0
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	ab70      	add	r3, sp, #448	; 0x1c0
 800b06a:	f04f 0b00 	mov.w	fp, #0
 800b06e:	f04f 0800 	mov.w	r8, #0
 800b072:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b076:	1ba7      	subs	r7, r4, r6
 800b078:	e0db      	b.n	800b232 <__kernel_rem_pio2+0x49a>
 800b07a:	2302      	movs	r3, #2
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	e757      	b.n	800af30 <__kernel_rem_pio2+0x198>
 800b080:	0800c120 	.word	0x0800c120
 800b084:	40200000 	.word	0x40200000
 800b088:	3ff00000 	.word	0x3ff00000
 800b08c:	3e700000 	.word	0x3e700000
 800b090:	41700000 	.word	0x41700000
 800b094:	3fe00000 	.word	0x3fe00000
 800b098:	0800c0e0 	.word	0x0800c0e0
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	b944      	cbnz	r4, 800b0b2 <__kernel_rem_pio2+0x31a>
 800b0a0:	b11b      	cbz	r3, 800b0aa <__kernel_rem_pio2+0x312>
 800b0a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	461c      	mov	r4, r3
 800b0ac:	3201      	adds	r2, #1
 800b0ae:	3704      	adds	r7, #4
 800b0b0:	e745      	b.n	800af3e <__kernel_rem_pio2+0x1a6>
 800b0b2:	1acb      	subs	r3, r1, r3
 800b0b4:	603b      	str	r3, [r7, #0]
 800b0b6:	4623      	mov	r3, r4
 800b0b8:	e7f7      	b.n	800b0aa <__kernel_rem_pio2+0x312>
 800b0ba:	1e72      	subs	r2, r6, #1
 800b0bc:	ab0c      	add	r3, sp, #48	; 0x30
 800b0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b0c6:	a90c      	add	r1, sp, #48	; 0x30
 800b0c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b0cc:	e745      	b.n	800af5a <__kernel_rem_pio2+0x1c2>
 800b0ce:	1e72      	subs	r2, r6, #1
 800b0d0:	ab0c      	add	r3, sp, #48	; 0x30
 800b0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b0da:	e7f4      	b.n	800b0c6 <__kernel_rem_pio2+0x32e>
 800b0dc:	a90c      	add	r1, sp, #48	; 0x30
 800b0de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	e796      	b.n	800b016 <__kernel_rem_pio2+0x27e>
 800b0e8:	3401      	adds	r4, #1
 800b0ea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	d0fa      	beq.n	800b0e8 <__kernel_rem_pio2+0x350>
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	f106 0801 	add.w	r8, r6, #1
 800b0f8:	18f5      	adds	r5, r6, r3
 800b0fa:	ab20      	add	r3, sp, #128	; 0x80
 800b0fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b100:	4434      	add	r4, r6
 800b102:	4544      	cmp	r4, r8
 800b104:	da04      	bge.n	800b110 <__kernel_rem_pio2+0x378>
 800b106:	4626      	mov	r6, r4
 800b108:	e6bf      	b.n	800ae8a <__kernel_rem_pio2+0xf2>
 800b10a:	2401      	movs	r4, #1
 800b10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10e:	e7ec      	b.n	800b0ea <__kernel_rem_pio2+0x352>
 800b110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b112:	f04f 0900 	mov.w	r9, #0
 800b116:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b11a:	f7f5 f973 	bl	8000404 <__aeabi_i2d>
 800b11e:	2600      	movs	r6, #0
 800b120:	2700      	movs	r7, #0
 800b122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b124:	e9c5 0100 	strd	r0, r1, [r5]
 800b128:	3b08      	subs	r3, #8
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	9504      	str	r5, [sp, #16]
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	4599      	cmp	r9, r3
 800b132:	dd05      	ble.n	800b140 <__kernel_rem_pio2+0x3a8>
 800b134:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b138:	f108 0801 	add.w	r8, r8, #1
 800b13c:	3508      	adds	r5, #8
 800b13e:	e7e0      	b.n	800b102 <__kernel_rem_pio2+0x36a>
 800b140:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b144:	9900      	ldr	r1, [sp, #0]
 800b146:	f109 0901 	add.w	r9, r9, #1
 800b14a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b14e:	9100      	str	r1, [sp, #0]
 800b150:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b154:	f8cd c010 	str.w	ip, [sp, #16]
 800b158:	f7f5 f9be 	bl	80004d8 <__aeabi_dmul>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 f802 	bl	800016c <__adddf3>
 800b168:	4606      	mov	r6, r0
 800b16a:	460f      	mov	r7, r1
 800b16c:	e7df      	b.n	800b12e <__kernel_rem_pio2+0x396>
 800b16e:	3c01      	subs	r4, #1
 800b170:	e756      	b.n	800b020 <__kernel_rem_pio2+0x288>
 800b172:	f1cb 0200 	rsb	r2, fp, #0
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f000 fc05 	bl	800b988 <scalbn>
 800b17e:	2200      	movs	r2, #0
 800b180:	4ba4      	ldr	r3, [pc, #656]	; (800b414 <__kernel_rem_pio2+0x67c>)
 800b182:	4604      	mov	r4, r0
 800b184:	460d      	mov	r5, r1
 800b186:	f7f5 fc2d 	bl	80009e4 <__aeabi_dcmpge>
 800b18a:	b1f8      	cbz	r0, 800b1cc <__kernel_rem_pio2+0x434>
 800b18c:	2200      	movs	r2, #0
 800b18e:	4ba2      	ldr	r3, [pc, #648]	; (800b418 <__kernel_rem_pio2+0x680>)
 800b190:	4620      	mov	r0, r4
 800b192:	4629      	mov	r1, r5
 800b194:	f7f5 f9a0 	bl	80004d8 <__aeabi_dmul>
 800b198:	f7f5 fc4e 	bl	8000a38 <__aeabi_d2iz>
 800b19c:	4607      	mov	r7, r0
 800b19e:	f7f5 f931 	bl	8000404 <__aeabi_i2d>
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4b9b      	ldr	r3, [pc, #620]	; (800b414 <__kernel_rem_pio2+0x67c>)
 800b1a6:	f7f5 f997 	bl	80004d8 <__aeabi_dmul>
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f7f4 ffd9 	bl	8000168 <__aeabi_dsub>
 800b1b6:	f7f5 fc3f 	bl	8000a38 <__aeabi_d2iz>
 800b1ba:	1c74      	adds	r4, r6, #1
 800b1bc:	ab0c      	add	r3, sp, #48	; 0x30
 800b1be:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b1c2:	f10b 0b18 	add.w	fp, fp, #24
 800b1c6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b1ca:	e731      	b.n	800b030 <__kernel_rem_pio2+0x298>
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7f5 fc32 	bl	8000a38 <__aeabi_d2iz>
 800b1d4:	ab0c      	add	r3, sp, #48	; 0x30
 800b1d6:	4634      	mov	r4, r6
 800b1d8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b1dc:	e728      	b.n	800b030 <__kernel_rem_pio2+0x298>
 800b1de:	ab0c      	add	r3, sp, #48	; 0x30
 800b1e0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b1e4:	f7f5 f90e 	bl	8000404 <__aeabi_i2d>
 800b1e8:	4632      	mov	r2, r6
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	f7f5 f974 	bl	80004d8 <__aeabi_dmul>
 800b1f0:	4642      	mov	r2, r8
 800b1f2:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f5 f96c 	bl	80004d8 <__aeabi_dmul>
 800b200:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	e722      	b.n	800b050 <__kernel_rem_pio2+0x2b8>
 800b20a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b20e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b212:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b216:	f8cd c01c 	str.w	ip, [sp, #28]
 800b21a:	f7f5 f95d 	bl	80004d8 <__aeabi_dmul>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4650      	mov	r0, sl
 800b224:	4659      	mov	r1, fp
 800b226:	f7f4 ffa1 	bl	800016c <__adddf3>
 800b22a:	4682      	mov	sl, r0
 800b22c:	468b      	mov	fp, r1
 800b22e:	f108 0801 	add.w	r8, r8, #1
 800b232:	9b02      	ldr	r3, [sp, #8]
 800b234:	4598      	cmp	r8, r3
 800b236:	dc01      	bgt.n	800b23c <__kernel_rem_pio2+0x4a4>
 800b238:	45b8      	cmp	r8, r7
 800b23a:	dde6      	ble.n	800b20a <__kernel_rem_pio2+0x472>
 800b23c:	ab48      	add	r3, sp, #288	; 0x120
 800b23e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b242:	e9c7 ab00 	strd	sl, fp, [r7]
 800b246:	3e01      	subs	r6, #1
 800b248:	e707      	b.n	800b05a <__kernel_rem_pio2+0x2c2>
 800b24a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	dc09      	bgt.n	800b264 <__kernel_rem_pio2+0x4cc>
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc32      	bgt.n	800b2ba <__kernel_rem_pio2+0x522>
 800b254:	d05a      	beq.n	800b30c <__kernel_rem_pio2+0x574>
 800b256:	9b04      	ldr	r3, [sp, #16]
 800b258:	f003 0007 	and.w	r0, r3, #7
 800b25c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b266:	2b03      	cmp	r3, #3
 800b268:	d1f5      	bne.n	800b256 <__kernel_rem_pio2+0x4be>
 800b26a:	ab48      	add	r3, sp, #288	; 0x120
 800b26c:	441d      	add	r5, r3
 800b26e:	46aa      	mov	sl, r5
 800b270:	46a3      	mov	fp, r4
 800b272:	f1bb 0f00 	cmp.w	fp, #0
 800b276:	dc76      	bgt.n	800b366 <__kernel_rem_pio2+0x5ce>
 800b278:	46aa      	mov	sl, r5
 800b27a:	46a3      	mov	fp, r4
 800b27c:	f1bb 0f01 	cmp.w	fp, #1
 800b280:	f300 8090 	bgt.w	800b3a4 <__kernel_rem_pio2+0x60c>
 800b284:	2700      	movs	r7, #0
 800b286:	463e      	mov	r6, r7
 800b288:	2c01      	cmp	r4, #1
 800b28a:	f300 80aa 	bgt.w	800b3e2 <__kernel_rem_pio2+0x64a>
 800b28e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b292:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f040 80ac 	bne.w	800b3f6 <__kernel_rem_pio2+0x65e>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	462a      	mov	r2, r5
 800b2a2:	9806      	ldr	r0, [sp, #24]
 800b2a4:	e9c0 2300 	strd	r2, r3, [r0]
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b2b0:	463a      	mov	r2, r7
 800b2b2:	4633      	mov	r3, r6
 800b2b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b2b8:	e7cd      	b.n	800b256 <__kernel_rem_pio2+0x4be>
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	46a0      	mov	r8, r4
 800b2be:	4601      	mov	r1, r0
 800b2c0:	ab48      	add	r3, sp, #288	; 0x120
 800b2c2:	441d      	add	r5, r3
 800b2c4:	f1b8 0f00 	cmp.w	r8, #0
 800b2c8:	da3a      	bge.n	800b340 <__kernel_rem_pio2+0x5a8>
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d03e      	beq.n	800b34e <__kernel_rem_pio2+0x5b6>
 800b2d0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	9d06      	ldr	r5, [sp, #24]
 800b2da:	2601      	movs	r6, #1
 800b2dc:	e9c5 2300 	strd	r2, r3, [r5]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b2e6:	f7f4 ff3f 	bl	8000168 <__aeabi_dsub>
 800b2ea:	4684      	mov	ip, r0
 800b2ec:	460f      	mov	r7, r1
 800b2ee:	ad48      	add	r5, sp, #288	; 0x120
 800b2f0:	42b4      	cmp	r4, r6
 800b2f2:	f105 0508 	add.w	r5, r5, #8
 800b2f6:	da2c      	bge.n	800b352 <__kernel_rem_pio2+0x5ba>
 800b2f8:	9b00      	ldr	r3, [sp, #0]
 800b2fa:	b10b      	cbz	r3, 800b300 <__kernel_rem_pio2+0x568>
 800b2fc:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b300:	4662      	mov	r2, ip
 800b302:	463b      	mov	r3, r7
 800b304:	9906      	ldr	r1, [sp, #24]
 800b306:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b30a:	e7a4      	b.n	800b256 <__kernel_rem_pio2+0x4be>
 800b30c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b30e:	ab48      	add	r3, sp, #288	; 0x120
 800b310:	4637      	mov	r7, r6
 800b312:	441d      	add	r5, r3
 800b314:	2c00      	cmp	r4, #0
 800b316:	da09      	bge.n	800b32c <__kernel_rem_pio2+0x594>
 800b318:	9b00      	ldr	r3, [sp, #0]
 800b31a:	b10b      	cbz	r3, 800b320 <__kernel_rem_pio2+0x588>
 800b31c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b320:	4632      	mov	r2, r6
 800b322:	463b      	mov	r3, r7
 800b324:	9906      	ldr	r1, [sp, #24]
 800b326:	e9c1 2300 	strd	r2, r3, [r1]
 800b32a:	e794      	b.n	800b256 <__kernel_rem_pio2+0x4be>
 800b32c:	4630      	mov	r0, r6
 800b32e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b332:	4639      	mov	r1, r7
 800b334:	f7f4 ff1a 	bl	800016c <__adddf3>
 800b338:	3c01      	subs	r4, #1
 800b33a:	4606      	mov	r6, r0
 800b33c:	460f      	mov	r7, r1
 800b33e:	e7e9      	b.n	800b314 <__kernel_rem_pio2+0x57c>
 800b340:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b344:	f7f4 ff12 	bl	800016c <__adddf3>
 800b348:	f108 38ff 	add.w	r8, r8, #4294967295
 800b34c:	e7ba      	b.n	800b2c4 <__kernel_rem_pio2+0x52c>
 800b34e:	460d      	mov	r5, r1
 800b350:	e7c0      	b.n	800b2d4 <__kernel_rem_pio2+0x53c>
 800b352:	4660      	mov	r0, ip
 800b354:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b358:	4639      	mov	r1, r7
 800b35a:	f7f4 ff07 	bl	800016c <__adddf3>
 800b35e:	3601      	adds	r6, #1
 800b360:	4684      	mov	ip, r0
 800b362:	460f      	mov	r7, r1
 800b364:	e7c4      	b.n	800b2f0 <__kernel_rem_pio2+0x558>
 800b366:	e9da 6700 	ldrd	r6, r7, [sl]
 800b36a:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b36e:	4632      	mov	r2, r6
 800b370:	463b      	mov	r3, r7
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f4 fef9 	bl	800016c <__adddf3>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	f7f4 feef 	bl	8000168 <__aeabi_dsub>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	f7f4 feed 	bl	800016c <__adddf3>
 800b392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b396:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b39a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b39e:	e9ca 2300 	strd	r2, r3, [sl]
 800b3a2:	e766      	b.n	800b272 <__kernel_rem_pio2+0x4da>
 800b3a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b3a8:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b3ac:	4642      	mov	r2, r8
 800b3ae:	464b      	mov	r3, r9
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	4639      	mov	r1, r7
 800b3b4:	f7f4 feda 	bl	800016c <__adddf3>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f4 fed0 	bl	8000168 <__aeabi_dsub>
 800b3c8:	4642      	mov	r2, r8
 800b3ca:	464b      	mov	r3, r9
 800b3cc:	f7f4 fece 	bl	800016c <__adddf3>
 800b3d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3d4:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b3d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3dc:	e9ca 2300 	strd	r2, r3, [sl]
 800b3e0:	e74c      	b.n	800b27c <__kernel_rem_pio2+0x4e4>
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	f7f4 febf 	bl	800016c <__adddf3>
 800b3ee:	3c01      	subs	r4, #1
 800b3f0:	4607      	mov	r7, r0
 800b3f2:	460e      	mov	r6, r1
 800b3f4:	e748      	b.n	800b288 <__kernel_rem_pio2+0x4f0>
 800b3f6:	9b06      	ldr	r3, [sp, #24]
 800b3f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b3fc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b400:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b404:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b408:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b40c:	601d      	str	r5, [r3, #0]
 800b40e:	615e      	str	r6, [r3, #20]
 800b410:	e721      	b.n	800b256 <__kernel_rem_pio2+0x4be>
 800b412:	bf00      	nop
 800b414:	41700000 	.word	0x41700000
 800b418:	3e700000 	.word	0x3e700000
 800b41c:	00000000 	.word	0x00000000

0800b420 <__kernel_tan>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	b08b      	sub	sp, #44	; 0x2c
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	4bd9      	ldr	r3, [pc, #868]	; (800b790 <__kernel_tan+0x370>)
 800b42a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b42e:	429e      	cmp	r6, r3
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	4682      	mov	sl, r0
 800b436:	468b      	mov	fp, r1
 800b438:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b43a:	9202      	str	r2, [sp, #8]
 800b43c:	9107      	str	r1, [sp, #28]
 800b43e:	dc58      	bgt.n	800b4f2 <__kernel_tan+0xd2>
 800b440:	f7f5 fafa 	bl	8000a38 <__aeabi_d2iz>
 800b444:	4605      	mov	r5, r0
 800b446:	2800      	cmp	r0, #0
 800b448:	d178      	bne.n	800b53c <__kernel_tan+0x11c>
 800b44a:	1c7b      	adds	r3, r7, #1
 800b44c:	4323      	orrs	r3, r4
 800b44e:	4333      	orrs	r3, r6
 800b450:	d110      	bne.n	800b474 <__kernel_tan+0x54>
 800b452:	4620      	mov	r0, r4
 800b454:	4659      	mov	r1, fp
 800b456:	f000 fa0b 	bl	800b870 <fabs>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	2000      	movs	r0, #0
 800b460:	49cc      	ldr	r1, [pc, #816]	; (800b794 <__kernel_tan+0x374>)
 800b462:	f7f5 f963 	bl	800072c <__aeabi_ddiv>
 800b466:	4682      	mov	sl, r0
 800b468:	468b      	mov	fp, r1
 800b46a:	4650      	mov	r0, sl
 800b46c:	4659      	mov	r1, fp
 800b46e:	b00b      	add	sp, #44	; 0x2c
 800b470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b474:	2f01      	cmp	r7, #1
 800b476:	d0f8      	beq.n	800b46a <__kernel_tan+0x4a>
 800b478:	4620      	mov	r0, r4
 800b47a:	4659      	mov	r1, fp
 800b47c:	9a02      	ldr	r2, [sp, #8]
 800b47e:	9b00      	ldr	r3, [sp, #0]
 800b480:	f7f4 fe74 	bl	800016c <__adddf3>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	460f      	mov	r7, r1
 800b48a:	2000      	movs	r0, #0
 800b48c:	49c2      	ldr	r1, [pc, #776]	; (800b798 <__kernel_tan+0x378>)
 800b48e:	f7f5 f94d 	bl	800072c <__aeabi_ddiv>
 800b492:	462e      	mov	r6, r5
 800b494:	4689      	mov	r9, r1
 800b496:	4652      	mov	r2, sl
 800b498:	465b      	mov	r3, fp
 800b49a:	4680      	mov	r8, r0
 800b49c:	462c      	mov	r4, r5
 800b49e:	4630      	mov	r0, r6
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f4 fe60 	bl	8000168 <__aeabi_dsub>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	9802      	ldr	r0, [sp, #8]
 800b4ae:	9900      	ldr	r1, [sp, #0]
 800b4b0:	f7f4 fe5a 	bl	8000168 <__aeabi_dsub>
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	464b      	mov	r3, r9
 800b4b8:	f7f5 f80e 	bl	80004d8 <__aeabi_dmul>
 800b4bc:	4632      	mov	r2, r6
 800b4be:	4682      	mov	sl, r0
 800b4c0:	468b      	mov	fp, r1
 800b4c2:	464b      	mov	r3, r9
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	4639      	mov	r1, r7
 800b4c8:	f7f5 f806 	bl	80004d8 <__aeabi_dmul>
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4bb1      	ldr	r3, [pc, #708]	; (800b794 <__kernel_tan+0x374>)
 800b4d0:	f7f4 fe4c 	bl	800016c <__adddf3>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4650      	mov	r0, sl
 800b4da:	4659      	mov	r1, fp
 800b4dc:	f7f4 fe46 	bl	800016c <__adddf3>
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	464b      	mov	r3, r9
 800b4e4:	f7f4 fff8 	bl	80004d8 <__aeabi_dmul>
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	f7f4 fe3e 	bl	800016c <__adddf3>
 800b4f0:	e7b9      	b.n	800b466 <__kernel_tan+0x46>
 800b4f2:	4baa      	ldr	r3, [pc, #680]	; (800b79c <__kernel_tan+0x37c>)
 800b4f4:	429e      	cmp	r6, r3
 800b4f6:	dd21      	ble.n	800b53c <__kernel_tan+0x11c>
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	da06      	bge.n	800b50a <__kernel_tan+0xea>
 800b4fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b500:	469b      	mov	fp, r3
 800b502:	9b00      	ldr	r3, [sp, #0]
 800b504:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	4652      	mov	r2, sl
 800b50c:	a182      	add	r1, pc, #520	; (adr r1, 800b718 <__kernel_tan+0x2f8>)
 800b50e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b512:	465b      	mov	r3, fp
 800b514:	f7f4 fe28 	bl	8000168 <__aeabi_dsub>
 800b518:	4604      	mov	r4, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	a180      	add	r1, pc, #512	; (adr r1, 800b720 <__kernel_tan+0x300>)
 800b51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b522:	9a02      	ldr	r2, [sp, #8]
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	f7f4 fe1f 	bl	8000168 <__aeabi_dsub>
 800b52a:	462b      	mov	r3, r5
 800b52c:	4622      	mov	r2, r4
 800b52e:	f7f4 fe1d 	bl	800016c <__adddf3>
 800b532:	2300      	movs	r3, #0
 800b534:	4682      	mov	sl, r0
 800b536:	468b      	mov	fp, r1
 800b538:	9302      	str	r3, [sp, #8]
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	4652      	mov	r2, sl
 800b53e:	465b      	mov	r3, fp
 800b540:	4650      	mov	r0, sl
 800b542:	4659      	mov	r1, fp
 800b544:	f7f4 ffc8 	bl	80004d8 <__aeabi_dmul>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4680      	mov	r8, r0
 800b54e:	4689      	mov	r9, r1
 800b550:	f7f4 ffc2 	bl	80004d8 <__aeabi_dmul>
 800b554:	4642      	mov	r2, r8
 800b556:	4604      	mov	r4, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	464b      	mov	r3, r9
 800b55c:	4650      	mov	r0, sl
 800b55e:	4659      	mov	r1, fp
 800b560:	f7f4 ffba 	bl	80004d8 <__aeabi_dmul>
 800b564:	a370      	add	r3, pc, #448	; (adr r3, 800b728 <__kernel_tan+0x308>)
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 ffb1 	bl	80004d8 <__aeabi_dmul>
 800b576:	a36e      	add	r3, pc, #440	; (adr r3, 800b730 <__kernel_tan+0x310>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f7f4 fdf6 	bl	800016c <__adddf3>
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	f7f4 ffa8 	bl	80004d8 <__aeabi_dmul>
 800b588:	a36b      	add	r3, pc, #428	; (adr r3, 800b738 <__kernel_tan+0x318>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f4 fded 	bl	800016c <__adddf3>
 800b592:	4622      	mov	r2, r4
 800b594:	462b      	mov	r3, r5
 800b596:	f7f4 ff9f 	bl	80004d8 <__aeabi_dmul>
 800b59a:	a369      	add	r3, pc, #420	; (adr r3, 800b740 <__kernel_tan+0x320>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	f7f4 fde4 	bl	800016c <__adddf3>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	462b      	mov	r3, r5
 800b5a8:	f7f4 ff96 	bl	80004d8 <__aeabi_dmul>
 800b5ac:	a366      	add	r3, pc, #408	; (adr r3, 800b748 <__kernel_tan+0x328>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fddb 	bl	800016c <__adddf3>
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	f7f4 ff8d 	bl	80004d8 <__aeabi_dmul>
 800b5be:	a364      	add	r3, pc, #400	; (adr r3, 800b750 <__kernel_tan+0x330>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fdd2 	bl	800016c <__adddf3>
 800b5c8:	4642      	mov	r2, r8
 800b5ca:	464b      	mov	r3, r9
 800b5cc:	f7f4 ff84 	bl	80004d8 <__aeabi_dmul>
 800b5d0:	a361      	add	r3, pc, #388	; (adr r3, 800b758 <__kernel_tan+0x338>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5da:	4620      	mov	r0, r4
 800b5dc:	4629      	mov	r1, r5
 800b5de:	f7f4 ff7b 	bl	80004d8 <__aeabi_dmul>
 800b5e2:	a35f      	add	r3, pc, #380	; (adr r3, 800b760 <__kernel_tan+0x340>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f7f4 fdc0 	bl	800016c <__adddf3>
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	462b      	mov	r3, r5
 800b5f0:	f7f4 ff72 	bl	80004d8 <__aeabi_dmul>
 800b5f4:	a35c      	add	r3, pc, #368	; (adr r3, 800b768 <__kernel_tan+0x348>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f7f4 fdb7 	bl	800016c <__adddf3>
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	f7f4 ff69 	bl	80004d8 <__aeabi_dmul>
 800b606:	a35a      	add	r3, pc, #360	; (adr r3, 800b770 <__kernel_tan+0x350>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f7f4 fdae 	bl	800016c <__adddf3>
 800b610:	4622      	mov	r2, r4
 800b612:	462b      	mov	r3, r5
 800b614:	f7f4 ff60 	bl	80004d8 <__aeabi_dmul>
 800b618:	a357      	add	r3, pc, #348	; (adr r3, 800b778 <__kernel_tan+0x358>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f7f4 fda5 	bl	800016c <__adddf3>
 800b622:	4622      	mov	r2, r4
 800b624:	462b      	mov	r3, r5
 800b626:	f7f4 ff57 	bl	80004d8 <__aeabi_dmul>
 800b62a:	a355      	add	r3, pc, #340	; (adr r3, 800b780 <__kernel_tan+0x360>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f7f4 fd9c 	bl	800016c <__adddf3>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b63c:	f7f4 fd96 	bl	800016c <__adddf3>
 800b640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b644:	f7f4 ff48 	bl	80004d8 <__aeabi_dmul>
 800b648:	9a02      	ldr	r2, [sp, #8]
 800b64a:	9b00      	ldr	r3, [sp, #0]
 800b64c:	f7f4 fd8e 	bl	800016c <__adddf3>
 800b650:	4642      	mov	r2, r8
 800b652:	464b      	mov	r3, r9
 800b654:	f7f4 ff40 	bl	80004d8 <__aeabi_dmul>
 800b658:	9a02      	ldr	r2, [sp, #8]
 800b65a:	9b00      	ldr	r3, [sp, #0]
 800b65c:	f7f4 fd86 	bl	800016c <__adddf3>
 800b660:	a349      	add	r3, pc, #292	; (adr r3, 800b788 <__kernel_tan+0x368>)
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	4604      	mov	r4, r0
 800b668:	460d      	mov	r5, r1
 800b66a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b66e:	f7f4 ff33 	bl	80004d8 <__aeabi_dmul>
 800b672:	4622      	mov	r2, r4
 800b674:	462b      	mov	r3, r5
 800b676:	f7f4 fd79 	bl	800016c <__adddf3>
 800b67a:	460b      	mov	r3, r1
 800b67c:	e9cd 0100 	strd	r0, r1, [sp]
 800b680:	4602      	mov	r2, r0
 800b682:	4659      	mov	r1, fp
 800b684:	4650      	mov	r0, sl
 800b686:	f7f4 fd71 	bl	800016c <__adddf3>
 800b68a:	4b44      	ldr	r3, [pc, #272]	; (800b79c <__kernel_tan+0x37c>)
 800b68c:	4604      	mov	r4, r0
 800b68e:	429e      	cmp	r6, r3
 800b690:	460d      	mov	r5, r1
 800b692:	f340 8085 	ble.w	800b7a0 <__kernel_tan+0x380>
 800b696:	4638      	mov	r0, r7
 800b698:	f7f4 feb4 	bl	8000404 <__aeabi_i2d>
 800b69c:	4622      	mov	r2, r4
 800b69e:	4680      	mov	r8, r0
 800b6a0:	4689      	mov	r9, r1
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	f7f4 ff16 	bl	80004d8 <__aeabi_dmul>
 800b6ac:	4642      	mov	r2, r8
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460f      	mov	r7, r1
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7f4 fd58 	bl	800016c <__adddf3>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f5 f832 	bl	800072c <__aeabi_ddiv>
 800b6c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6cc:	f7f4 fd4c 	bl	8000168 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4650      	mov	r0, sl
 800b6d6:	4659      	mov	r1, fp
 800b6d8:	f7f4 fd46 	bl	8000168 <__aeabi_dsub>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	f7f4 fd44 	bl	800016c <__adddf3>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	f7f4 fd3c 	bl	8000168 <__aeabi_dsub>
 800b6f0:	9b07      	ldr	r3, [sp, #28]
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	179b      	asrs	r3, r3, #30
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	f1c3 0001 	rsb	r0, r3, #1
 800b6fe:	460d      	mov	r5, r1
 800b700:	f7f4 fe80 	bl	8000404 <__aeabi_i2d>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7f4 fee4 	bl	80004d8 <__aeabi_dmul>
 800b710:	e6a9      	b.n	800b466 <__kernel_tan+0x46>
 800b712:	bf00      	nop
 800b714:	f3af 8000 	nop.w
 800b718:	54442d18 	.word	0x54442d18
 800b71c:	3fe921fb 	.word	0x3fe921fb
 800b720:	33145c07 	.word	0x33145c07
 800b724:	3c81a626 	.word	0x3c81a626
 800b728:	74bf7ad4 	.word	0x74bf7ad4
 800b72c:	3efb2a70 	.word	0x3efb2a70
 800b730:	32f0a7e9 	.word	0x32f0a7e9
 800b734:	3f12b80f 	.word	0x3f12b80f
 800b738:	1a8d1068 	.word	0x1a8d1068
 800b73c:	3f3026f7 	.word	0x3f3026f7
 800b740:	fee08315 	.word	0xfee08315
 800b744:	3f57dbc8 	.word	0x3f57dbc8
 800b748:	e96e8493 	.word	0xe96e8493
 800b74c:	3f8226e3 	.word	0x3f8226e3
 800b750:	1bb341fe 	.word	0x1bb341fe
 800b754:	3faba1ba 	.word	0x3faba1ba
 800b758:	db605373 	.word	0xdb605373
 800b75c:	bef375cb 	.word	0xbef375cb
 800b760:	a03792a6 	.word	0xa03792a6
 800b764:	3f147e88 	.word	0x3f147e88
 800b768:	f2f26501 	.word	0xf2f26501
 800b76c:	3f4344d8 	.word	0x3f4344d8
 800b770:	c9560328 	.word	0xc9560328
 800b774:	3f6d6d22 	.word	0x3f6d6d22
 800b778:	8406d637 	.word	0x8406d637
 800b77c:	3f9664f4 	.word	0x3f9664f4
 800b780:	1110fe7a 	.word	0x1110fe7a
 800b784:	3fc11111 	.word	0x3fc11111
 800b788:	55555563 	.word	0x55555563
 800b78c:	3fd55555 	.word	0x3fd55555
 800b790:	3e2fffff 	.word	0x3e2fffff
 800b794:	3ff00000 	.word	0x3ff00000
 800b798:	bff00000 	.word	0xbff00000
 800b79c:	3fe59427 	.word	0x3fe59427
 800b7a0:	2f01      	cmp	r7, #1
 800b7a2:	d031      	beq.n	800b808 <__kernel_tan+0x3e8>
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	4918      	ldr	r1, [pc, #96]	; (800b810 <__kernel_tan+0x3f0>)
 800b7ae:	f7f4 ffbd 	bl	800072c <__aeabi_ddiv>
 800b7b2:	2600      	movs	r6, #0
 800b7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7bc:	4652      	mov	r2, sl
 800b7be:	465b      	mov	r3, fp
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f4 fcd0 	bl	8000168 <__aeabi_dsub>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d0:	f7f4 fcca 	bl	8000168 <__aeabi_dsub>
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	f7f4 fe7e 	bl	80004d8 <__aeabi_dmul>
 800b7dc:	4632      	mov	r2, r6
 800b7de:	4682      	mov	sl, r0
 800b7e0:	468b      	mov	fp, r1
 800b7e2:	462b      	mov	r3, r5
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f4 fe76 	bl	80004d8 <__aeabi_dmul>
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <__kernel_tan+0x3f4>)
 800b7f0:	f7f4 fcbc 	bl	800016c <__adddf3>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	f7f4 fcb6 	bl	800016c <__adddf3>
 800b800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b804:	4634      	mov	r4, r6
 800b806:	e66d      	b.n	800b4e4 <__kernel_tan+0xc4>
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	e62d      	b.n	800b46a <__kernel_tan+0x4a>
 800b80e:	bf00      	nop
 800b810:	bff00000 	.word	0xbff00000
 800b814:	3ff00000 	.word	0x3ff00000

0800b818 <with_errno>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	4604      	mov	r4, r0
 800b81c:	460d      	mov	r5, r1
 800b81e:	4616      	mov	r6, r2
 800b820:	f7fb fb5c 	bl	8006edc <__errno>
 800b824:	4629      	mov	r1, r5
 800b826:	6006      	str	r6, [r0, #0]
 800b828:	4620      	mov	r0, r4
 800b82a:	bd70      	pop	{r4, r5, r6, pc}

0800b82c <xflow>:
 800b82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b82e:	4615      	mov	r5, r2
 800b830:	461c      	mov	r4, r3
 800b832:	b180      	cbz	r0, 800b856 <xflow+0x2a>
 800b834:	4610      	mov	r0, r2
 800b836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b83a:	e9cd 0100 	strd	r0, r1, [sp]
 800b83e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b842:	4628      	mov	r0, r5
 800b844:	4621      	mov	r1, r4
 800b846:	f7f4 fe47 	bl	80004d8 <__aeabi_dmul>
 800b84a:	2222      	movs	r2, #34	; 0x22
 800b84c:	b003      	add	sp, #12
 800b84e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b852:	f7ff bfe1 	b.w	800b818 <with_errno>
 800b856:	4610      	mov	r0, r2
 800b858:	4619      	mov	r1, r3
 800b85a:	e7ee      	b.n	800b83a <xflow+0xe>

0800b85c <__math_uflow>:
 800b85c:	2200      	movs	r2, #0
 800b85e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b862:	f7ff bfe3 	b.w	800b82c <xflow>

0800b866 <__math_oflow>:
 800b866:	2200      	movs	r2, #0
 800b868:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b86c:	f7ff bfde 	b.w	800b82c <xflow>

0800b870 <fabs>:
 800b870:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b874:	4770      	bx	lr

0800b876 <finite>:
 800b876:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b87a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b87e:	0fc0      	lsrs	r0, r0, #31
 800b880:	4770      	bx	lr
 800b882:	0000      	movs	r0, r0
 800b884:	0000      	movs	r0, r0
	...

0800b888 <floor>:
 800b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b88c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b890:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b894:	2e13      	cmp	r6, #19
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	4607      	mov	r7, r0
 800b89c:	460c      	mov	r4, r1
 800b89e:	4605      	mov	r5, r0
 800b8a0:	dc33      	bgt.n	800b90a <floor+0x82>
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	da14      	bge.n	800b8d0 <floor+0x48>
 800b8a6:	a334      	add	r3, pc, #208	; (adr r3, 800b978 <floor+0xf0>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f7f4 fc5e 	bl	800016c <__adddf3>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f7f5 f8a0 	bl	80009f8 <__aeabi_dcmpgt>
 800b8b8:	b138      	cbz	r0, 800b8ca <floor+0x42>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	da58      	bge.n	800b970 <floor+0xe8>
 800b8be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b8c2:	431d      	orrs	r5, r3
 800b8c4:	d001      	beq.n	800b8ca <floor+0x42>
 800b8c6:	2500      	movs	r5, #0
 800b8c8:	4c2d      	ldr	r4, [pc, #180]	; (800b980 <floor+0xf8>)
 800b8ca:	4623      	mov	r3, r4
 800b8cc:	462f      	mov	r7, r5
 800b8ce:	e025      	b.n	800b91c <floor+0x94>
 800b8d0:	4a2c      	ldr	r2, [pc, #176]	; (800b984 <floor+0xfc>)
 800b8d2:	fa42 f806 	asr.w	r8, r2, r6
 800b8d6:	ea01 0208 	and.w	r2, r1, r8
 800b8da:	4302      	orrs	r2, r0
 800b8dc:	d01e      	beq.n	800b91c <floor+0x94>
 800b8de:	a326      	add	r3, pc, #152	; (adr r3, 800b978 <floor+0xf0>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f7f4 fc42 	bl	800016c <__adddf3>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f7f5 f884 	bl	80009f8 <__aeabi_dcmpgt>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d0ea      	beq.n	800b8ca <floor+0x42>
 800b8f4:	2c00      	cmp	r4, #0
 800b8f6:	bfbe      	ittt	lt
 800b8f8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b8fc:	fa43 f606 	asrlt.w	r6, r3, r6
 800b900:	19a4      	addlt	r4, r4, r6
 800b902:	2500      	movs	r5, #0
 800b904:	ea24 0408 	bic.w	r4, r4, r8
 800b908:	e7df      	b.n	800b8ca <floor+0x42>
 800b90a:	2e33      	cmp	r6, #51	; 0x33
 800b90c:	dd0a      	ble.n	800b924 <floor+0x9c>
 800b90e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b912:	d103      	bne.n	800b91c <floor+0x94>
 800b914:	f7f4 fc2a 	bl	800016c <__adddf3>
 800b918:	4607      	mov	r7, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4638      	mov	r0, r7
 800b91e:	4619      	mov	r1, r3
 800b920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b924:	f04f 32ff 	mov.w	r2, #4294967295
 800b928:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b92c:	fa22 f808 	lsr.w	r8, r2, r8
 800b930:	ea18 0f00 	tst.w	r8, r0
 800b934:	d0f2      	beq.n	800b91c <floor+0x94>
 800b936:	a310      	add	r3, pc, #64	; (adr r3, 800b978 <floor+0xf0>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 fc16 	bl	800016c <__adddf3>
 800b940:	2200      	movs	r2, #0
 800b942:	2300      	movs	r3, #0
 800b944:	f7f5 f858 	bl	80009f8 <__aeabi_dcmpgt>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d0be      	beq.n	800b8ca <floor+0x42>
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	da02      	bge.n	800b956 <floor+0xce>
 800b950:	2e14      	cmp	r6, #20
 800b952:	d103      	bne.n	800b95c <floor+0xd4>
 800b954:	3401      	adds	r4, #1
 800b956:	ea25 0508 	bic.w	r5, r5, r8
 800b95a:	e7b6      	b.n	800b8ca <floor+0x42>
 800b95c:	2301      	movs	r3, #1
 800b95e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b962:	fa03 f606 	lsl.w	r6, r3, r6
 800b966:	4435      	add	r5, r6
 800b968:	42bd      	cmp	r5, r7
 800b96a:	bf38      	it	cc
 800b96c:	18e4      	addcc	r4, r4, r3
 800b96e:	e7f2      	b.n	800b956 <floor+0xce>
 800b970:	2500      	movs	r5, #0
 800b972:	462c      	mov	r4, r5
 800b974:	e7a9      	b.n	800b8ca <floor+0x42>
 800b976:	bf00      	nop
 800b978:	8800759c 	.word	0x8800759c
 800b97c:	7e37e43c 	.word	0x7e37e43c
 800b980:	bff00000 	.word	0xbff00000
 800b984:	000fffff 	.word	0x000fffff

0800b988 <scalbn>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b98e:	4604      	mov	r4, r0
 800b990:	460d      	mov	r5, r1
 800b992:	4617      	mov	r7, r2
 800b994:	460b      	mov	r3, r1
 800b996:	b996      	cbnz	r6, 800b9be <scalbn+0x36>
 800b998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b99c:	4303      	orrs	r3, r0
 800b99e:	d039      	beq.n	800ba14 <scalbn+0x8c>
 800b9a0:	4b33      	ldr	r3, [pc, #204]	; (800ba70 <scalbn+0xe8>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f7f4 fd98 	bl	80004d8 <__aeabi_dmul>
 800b9a8:	4b32      	ldr	r3, [pc, #200]	; (800ba74 <scalbn+0xec>)
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	429f      	cmp	r7, r3
 800b9ae:	460d      	mov	r5, r1
 800b9b0:	da0f      	bge.n	800b9d2 <scalbn+0x4a>
 800b9b2:	a32b      	add	r3, pc, #172	; (adr r3, 800ba60 <scalbn+0xd8>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fd8e 	bl	80004d8 <__aeabi_dmul>
 800b9bc:	e006      	b.n	800b9cc <scalbn+0x44>
 800b9be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b9c2:	4296      	cmp	r6, r2
 800b9c4:	d10a      	bne.n	800b9dc <scalbn+0x54>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	f7f4 fbd0 	bl	800016c <__adddf3>
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	460d      	mov	r5, r1
 800b9d0:	e020      	b.n	800ba14 <scalbn+0x8c>
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b9d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b9dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b9e0:	19b9      	adds	r1, r7, r6
 800b9e2:	4291      	cmp	r1, r2
 800b9e4:	dd0e      	ble.n	800ba04 <scalbn+0x7c>
 800b9e6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b9ea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b9ee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b9f2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b9f6:	4820      	ldr	r0, [pc, #128]	; (800ba78 <scalbn+0xf0>)
 800b9f8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b9fc:	a31a      	add	r3, pc, #104	; (adr r3, 800ba68 <scalbn+0xe0>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	e7d9      	b.n	800b9b8 <scalbn+0x30>
 800ba04:	2900      	cmp	r1, #0
 800ba06:	dd08      	ble.n	800ba1a <scalbn+0x92>
 800ba08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ba14:	4620      	mov	r0, r4
 800ba16:	4629      	mov	r1, r5
 800ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ba1e:	da12      	bge.n	800ba46 <scalbn+0xbe>
 800ba20:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba24:	429f      	cmp	r7, r3
 800ba26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ba2a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800ba2e:	dcdc      	bgt.n	800b9ea <scalbn+0x62>
 800ba30:	a30b      	add	r3, pc, #44	; (adr r3, 800ba60 <scalbn+0xd8>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ba3a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ba3e:	480f      	ldr	r0, [pc, #60]	; (800ba7c <scalbn+0xf4>)
 800ba40:	f041 011f 	orr.w	r1, r1, #31
 800ba44:	e7b8      	b.n	800b9b8 <scalbn+0x30>
 800ba46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba4a:	3136      	adds	r1, #54	; 0x36
 800ba4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ba54:	4620      	mov	r0, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	2200      	movs	r2, #0
 800ba5a:	4b09      	ldr	r3, [pc, #36]	; (800ba80 <scalbn+0xf8>)
 800ba5c:	e7ac      	b.n	800b9b8 <scalbn+0x30>
 800ba5e:	bf00      	nop
 800ba60:	c2f8f359 	.word	0xc2f8f359
 800ba64:	01a56e1f 	.word	0x01a56e1f
 800ba68:	8800759c 	.word	0x8800759c
 800ba6c:	7e37e43c 	.word	0x7e37e43c
 800ba70:	43500000 	.word	0x43500000
 800ba74:	ffff3cb0 	.word	0xffff3cb0
 800ba78:	8800759c 	.word	0x8800759c
 800ba7c:	c2f8f359 	.word	0xc2f8f359
 800ba80:	3c900000 	.word	0x3c900000

0800ba84 <_init>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	bf00      	nop
 800ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8a:	bc08      	pop	{r3}
 800ba8c:	469e      	mov	lr, r3
 800ba8e:	4770      	bx	lr

0800ba90 <_fini>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	bf00      	nop
 800ba94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba96:	bc08      	pop	{r3}
 800ba98:	469e      	mov	lr, r3
 800ba9a:	4770      	bx	lr
