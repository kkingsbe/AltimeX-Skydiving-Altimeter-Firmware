/*
 * coloralti_led_controller.h
 *
 *  Created on: Apr 30, 2023
 *      Author: kking
 */

#ifndef INC_COLORALTI_LED_CONTROLLER_H_
#define INC_COLORALTI_LED_CONTROLLER_H_
#include "coloralti_state_controller.h"
#include "led_strip.h"

struct ColorAltiConfig {
		uint16_t ascentThreshold;
		uint16_t ascentThresholdTime; //ms that altitude must be above the ascentThreshold before transitioning between states
		uint8_t testingAscent; //1 while validating ascent
		uint32_t ascentTestStart; //ms, the timestamp of when the altitude crossed the ascentThreshold

		uint32_t gearCheckNotificationStart; //ms, the timestamp of when the gearcheck notification was displayed
		uint32_t gearCheckNotificationLength; //ms, the length of the gearcheck notification
		uint8_t displayedGearCheck; //1 once gearcheck has been shown

		uint16_t prevAlt; //Stores the previous altitude
		uint8_t freefallTest; //1 while validating freefall start
		uint32_t freefallTestStart; //ms, the timestamp of when freefall test started
		uint16_t freefallStartAlt; //ft, the altitude where freefall may have begun
		uint32_t freefallThresholdTime; //ms, the amount of time that the vertical speed must be above the freefall threshold speed to transition into freefall state

		uint16_t deployTestPrevAlt; //Stores the previous altitude while testing for deploy
		uint32_t deployTestPrevTime; //ms, the timestamp of the previous datapoint
		uint8_t deployTest; //1 while validating deployment test
		uint32_t deployTestStart; //ms, the timestamp for starting to validate deployment
		uint32_t deployTestThresholdTime; //ms, threshold time that vertical speed has to be under 50mph
		uint16_t deployTestStartAlt; //ft, altitude at beginning of current deployment test

		uint16_t exit; //Exit altitude
		uint16_t breakoff; //Breakoff altitude
		uint16_t deploy; //Deployment altitude
};

void ColorAlti_displayLeds(enum ColorAltiState state, uint16_t alt);

#endif /* INC_COLORALTI_LED_CONTROLLER_H_ */
