/*
 * altimex_serial.c
 *
 *  Created on: Sep 20, 2023
 *      Author: kking
 */

#include <usb.h>

UART_HandleTypeDef* STM_USB::uart = 0; //Set STM_USB::uart to dummy value
uint8_t STM_USB::buffer[USB_BUFFER_SIZE] = {'\0'};
uint16_t STM_USB::read_index = 0;

//=== Private Functions ===
//Manages incrementing the read index for the circular buffer
void STM_USB::increment_read_index()
{
	if(read_index == USB_BUFFER_SIZE - 1) read_index = 0;
	else read_index++;
}

//Consumes (removes) the next character from the buffer
void STM_USB::consume_next()
{
	buffer[read_index] = {'\0'}; //Resets the just-read character to a null-terminator so that we can know where the data "ends"
	increment_read_index();
}

//This joint deprecated af please do not use
void STM_USB::shift_buffer()
{
	uint16_t i = 0;
	while(i < USB_BUFFER_SIZE - 1) {
		STM_USB::buffer[i] = STM_USB::buffer[i + 1];
		i++;
	}
	STM_USB::buffer[USB_BUFFER_SIZE - 1] = {'\0'};
}

//=== Public Functions ===
void STM_USB::init(UART_HandleTypeDef* _uart)
{
	STM_USB::uart = _uart; //Set STM_USB::uart to actual value
	HAL_UART_Receive_DMA(_uart, STM_USB::buffer, USB_BUFFER_SIZE);
}

void STM_USB::print(float data)
{
	char charData[64] = {'\0'};
	sprintf(charData, "%f", data);
	STM_USB::println(charData);
}

void STM_USB::print(double data)
{
	char charData[64] = {'\0'};
	sprintf(charData, "%f", data);
	STM_USB::println(charData);
}

void STM_USB::print(uint8_t data)
{
	char charData[64] = {'\0'};
	sprintf(charData, "%d", data);
	STM_USB::println(charData);
}

void STM_USB::print(uint16_t data)
{
	char charData[64] = {'\0'};
	sprintf(charData, "%d", data);
	STM_USB::println(charData);
}

void STM_USB::print(uint32_t data)
{
	char charData[64] = {'\0'};
	sprintf(charData, "%d", data);
	STM_USB::println(charData);
}

void STM_USB::print(char* data)
{
	HAL_UART_Transmit(STM_USB::uart, (const uint8_t*)data, strlen(data), 100);
}

void STM_USB::println(char* data)
{
	STM_USB::print(data);

	char newline[3] = "\r\n";
	STM_USB::print(newline);
}

void STM_USB::readln(char* data)
{
	STM_USB::readto(data, '\n');
}

void STM_USB::readto(char* data, char flag)
{
	char next_char = peek_next();
	uint16_t i = 0; //Prevents infinite loop if buffer becomes full and flag cannot be found
	while(i < USB_BUFFER_SIZE && next_char != flag && next_char != '\0') {
		if(i > USB_BUFFER_SIZE || next_char == flag || next_char == '\0') {
			return;
		}

		data[i] = next_char;
		consume_next()';'
		next_char = peek_next();
		i ++;
	}
}

//Returns the next character from the buffer, but does not consume it or increment the counter
char STM_USB::peek_next()
{
	char next = buffer[read_index];
	return next;
}

//Reads the next character from the buffer
char STM_USB::read_next()
{
	char next = peek_next();
	consume_next();
	return next;
}

bool STM_USB::data_ready()
{
	return get_buffer_size() > 0;
}

uint16_t STM_USB::get_buffer_size()
{
	uint16_t i = read_index;
	uint16_t iterations = 0;
	char next = buffer[i];
	while(iterations < USB_BUFFER_SIZE && next != '\0') {
		next = buffer[i];
		i ++;
		iterations ++;
	}
	return iterations;
}

uint16_t STM_USB::get_max_buffer_size()
{
	return USB_BUFFER_SIZE;
}
