
AltimeX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c634  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  0800c748  0800c748  0001c748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1ec  0800d1ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d1ec  0800d1ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d1ec  0800d1ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1ec  0800d1ec  0001d1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d1f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  200001dc  0800d3d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  0800d3d0  000207d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d67  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f28  00000000  00000000  00041f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00045e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  000470c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3b0  00000000  00000000  000481b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ab9  00000000  00000000  00065568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d92  00000000  00000000  0007e021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110db3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f4  00000000  00000000  00110e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c72c 	.word	0x0800c72c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800c72c 	.word	0x0800c72c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>:
 *  Created on: Jul 6, 2023
 *      Author: Kyle Kingsberry
 */
#include "LPS22HB.h"

LPS22HB::LPS22HB(I2C_HandleTypeDef* i2c_config, uint16_t address):
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	i2c_config(i2c_config),
	address(address),
	reference_pressure(0),
	reference_temperature(0)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	88fa      	ldrh	r2, [r7, #6]
 80011b4:	809a      	strh	r2, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	80da      	strh	r2, [r3, #6]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	811a      	strh	r2, [r3, #8]
{

}
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_ZN7LPS22HB4initEv>:

LPS22HB::LPS_INIT_STATUS LPS22HB::init()
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f002 fb11 	bl	8003800 <HAL_Delay>

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	2305      	movs	r3, #5
 80011e4:	2203      	movs	r2, #3
 80011e6:	21b8      	movs	r1, #184	; 0xb8
 80011e8:	f003 fd20 	bl	8004c2c <HAL_I2C_IsDeviceReady>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	if(i2c_status == HAL_BUSY) {
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d101      	bne.n	80011fa <_ZN7LPS22HB4initEv+0x2c>
		return HAL_I2C_BUSY;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e012      	b.n	8001220 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set the ouptut data rate (odr)
	this->set_odr(ODR_75hz);
 80011fa:	2105      	movs	r1, #5
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f830 	bl	8001262 <_ZN7LPS22HB7set_odrE7LPS_ODR>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = this->get_odr();
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f85d 	bl	80012c2 <_ZN7LPS22HB7get_odrEv>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]
	if(odr != ODR_75hz) {
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d001      	beq.n	8001216 <_ZN7LPS22HB4initEv+0x48>
		return ODR_MISMATCH;
 8001212:	2301      	movs	r3, #1
 8001214:	e004      	b.n	8001220 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set FIFO mode to BYPASS
	this->configure_fifo(BYPASS);
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f865 	bl	80012e8 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return SUCCESS;
 800121e:	2302      	movs	r3, #2
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN7LPS22HB8reg_readEttPh>:

void LPS22HB::reg_read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af04      	add	r7, sp, #16
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	817b      	strh	r3, [r7, #10]
 8001236:	4613      	mov	r3, r2
 8001238:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(this->i2c_config, (uint16_t)(this->address<<1), reg_addr, 1, data_output, reg_size, 100);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	897a      	ldrh	r2, [r7, #10]
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	893b      	ldrh	r3, [r7, #8]
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	f003 fa81 	bl	800475c <HAL_I2C_Mem_Read>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN7LPS22HB7set_odrE7LPS_ODR>:

//Configures the output data rate (ODR)
void LPS22HB::set_odr(enum LPS_ODR new_odr)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b088      	sub	sp, #32
 8001266:	af04      	add	r7, sp, #16
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffd6 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	b2db      	uxtb	r3, r3
 8001284:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 8001286:	7a3b      	ldrb	r3, [r7, #8]
 8001288:	b25a      	sxtb	r2, r3
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t)(this->address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	889b      	ldrh	r3, [r3, #4]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b299      	uxth	r1, r3
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2210      	movs	r2, #16
 80012b6:	f003 f957 	bl	8004568 <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_ZN7LPS22HB7get_odrEv>:

//Reads the sensors odr
enum LPS_ODR LPS22HB::get_odr()
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2201      	movs	r2, #1
 80012d0:	2110      	movs	r1, #16
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa8 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
	uint8_t odr_code = (existingConfig[0] >> 4);
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	73fb      	strb	r3, [r7, #15]

	return static_cast<LPS_ODR>(odr_code);
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>:

//Configures the FIFO for the desired mode
void LPS22HB::configure_fifo(enum LPS_FIFO desiredFifo)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af04      	add	r7, sp, #16
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11d      	bne.n	8001336 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x4e>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	this->reg_read(FIFO_CTRL, 1, existingConfig);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2201      	movs	r2, #1
 8001300:	2114      	movs	r1, #20
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff90 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 8001308:	7b3b      	ldrb	r3, [r7, #12]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	b2db      	uxtb	r3, r3
 8001310:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t) (this->address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	889b      	ldrh	r3, [r3, #4]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b299      	uxth	r1, r3
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	2214      	movs	r2, #20
 8001330:	f003 f91a 	bl	8004568 <HAL_I2C_Mem_Write>
 8001334:	e000      	b.n	8001338 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x50>
		return;
 8001336:	bf00      	nop
}
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <_ZN7LPS22HB12get_pressureEv>:

//Returns the pressure read by the sensor in HPA
double LPS22HB::get_pressure()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 4096.0;
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <_ZN7LPS22HB12get_pressureEv+0x68>)
 800134e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	this->reg_read(PRESS_OUT_H, 1, press_out_h);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2201      	movs	r2, #1
 8001358:	212a      	movs	r1, #42	; 0x2a
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff64 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_L, 1, press_out_l);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2201      	movs	r2, #1
 8001366:	2129      	movs	r1, #41	; 0x29
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff5d 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_XL, 1, press_out_xl);
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2201      	movs	r2, #1
 8001374:	2128      	movs	r1, #40	; 0x28
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff56 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 800137c:	7c3b      	ldrb	r3, [r7, #16]
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4413      	add	r3, r2
 8001386:	7a3a      	ldrb	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

	return pressure / SCALING_FACTOR;
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff f829 	bl	80003e4 <__aeabi_ui2d>
 8001392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001396:	f7ff f9c9 	bl	800072c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
}
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40b00000 	.word	0x40b00000

080013ac <_ZN7LPS22HB8get_tempEv>:

//Returns the temperature read by the sensor in C
double LPS22HB::get_temp()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 100.0;
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_ZN7LPS22HB8get_tempEv+0x54>)
 80013ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

    this->reg_read(TEMP_OUT_H, 1, temp_out_h);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2201      	movs	r2, #1
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff2e 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(TEMP_OUT_L, 1, temp_out_l);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2201      	movs	r2, #1
 80013d2:	212b      	movs	r1, #43	; 0x2b
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff27 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 80013da:	7c3b      	ldrb	r3, [r7, #16]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	7b3a      	ldrb	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]

	return temperature / SCALING_FACTOR;
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	f7fe fffd 	bl	80003e4 <__aeabi_ui2d>
 80013ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ee:	f7ff f99d 	bl	800072c <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
}
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40590000 	.word	0x40590000
 8001404:	00000000 	.word	0x00000000

08001408 <_ZN7LPS22HB9get_tempfEv>:

double LPS22HB::get_tempf()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	double tempC = this->get_temp();
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffcb 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 8001416:	e9c7 0102 	strd	r0, r1, [r7, #8]
	return (tempC * (9/5.0)) + 32;
 800141a:	a30b      	add	r3, pc, #44	; (adr r3, 8001448 <_ZN7LPS22HB9get_tempfEv+0x40>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001424:	f7ff f858 	bl	80004d8 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <_ZN7LPS22HB9get_tempfEv+0x48>)
 8001436:	f7fe fe99 	bl	800016c <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
}
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	3ffccccc 	.word	0x3ffccccc
 8001450:	40400000 	.word	0x40400000
 8001454:	00000000 	.word	0x00000000

08001458 <_ZN7LPS22HB13get_relalt_ftEv>:
	return pressHPA * 0.0009869233;
}

//Reference pressure is pressure in Pa at surface
double LPS22HB::get_relalt_ft()
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	double p = this->get_pressure();
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff6d 	bl	8001340 <_ZN7LPS22HB12get_pressureEv>
 8001466:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double t = this->get_temp();
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff9e 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 8001470:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)this->reference_pressure / p;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	88db      	ldrh	r3, [r3, #6]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ffb3 	bl	80003e4 <__aeabi_ui2d>
 800147e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001482:	f7ff f953 	bl	800072c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exponential = pow(frac_p, (double)1.0/5.257);
 800148e:	a320      	add	r3, pc, #128	; (adr r3, 8001510 <_ZN7LPS22HB13get_relalt_ftEv+0xb8>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001498:	f006 fd88 	bl	8007fac <pow>
 800149c:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double fraction_top = (exponential - 1) * (t + 273.15);
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <_ZN7LPS22HB13get_relalt_ftEv+0xd8>)
 80014a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014aa:	f7fe fe5d 	bl	8000168 <__aeabi_dsub>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	a318      	add	r3, pc, #96	; (adr r3, 8001518 <_ZN7LPS22HB13get_relalt_ftEv+0xc0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014c0:	f7fe fe54 	bl	800016c <__adddf3>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f804 	bl	80004d8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double alt_m = fraction_top / 0.0065;
 80014d8:	a311      	add	r3, pc, #68	; (adr r3, 8001520 <_ZN7LPS22HB13get_relalt_ftEv+0xc8>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e2:	f7ff f923 	bl	800072c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return alt_m * 3.281; //Convert to ft and return
 80014ee:	a30e      	add	r3, pc, #56	; (adr r3, 8001528 <_ZN7LPS22HB13get_relalt_ftEv+0xd0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f8:	f7fe ffee 	bl	80004d8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
}
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bdb0      	pop	{r4, r5, r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	7dee2d4a 	.word	0x7dee2d4a
 8001514:	3fc85936 	.word	0x3fc85936
 8001518:	66666666 	.word	0x66666666
 800151c:	40711266 	.word	0x40711266
 8001520:	76c8b439 	.word	0x76c8b439
 8001524:	3f7a9fbe 	.word	0x3f7a9fbe
 8001528:	ed916873 	.word	0xed916873
 800152c:	400a3f7c 	.word	0x400a3f7c
 8001530:	3ff00000 	.word	0x3ff00000

08001534 <_ZN7LPS22HB9calibrateEhh>:

void LPS22HB::calibrate(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	4613      	mov	r3, r2
 8001542:	70bb      	strb	r3, [r7, #2]
	this->reference_temperature = this->get_calibration_temperature(num_samples, sample_time_ms);
 8001544:	78ba      	ldrb	r2, [r7, #2]
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f81e 	bl	800158c <_ZN7LPS22HB27get_calibration_temperatureEhh>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fa96 	bl	8000a88 <__aeabi_d2uiz>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	811a      	strh	r2, [r3, #8]
	this->reference_pressure = this->get_calibration_pressure(num_samples, sample_time_ms);
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f868 	bl	8001640 <_ZN7LPS22HB24get_calibration_pressureEhh>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fa86 	bl	8000a88 <__aeabi_d2uiz>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	80da      	strh	r2, [r3, #6]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN7LPS22HB27get_calibration_temperatureEhh>:

double LPS22HB::get_calibration_temperature(uint8_t num_samples, uint8_t sample_time_ms)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	4613      	mov	r3, r2
 800159a:	70bb      	strb	r3, [r7, #2]
	STM_USB::println("\r\n\nCalibrating LPS Temperature:");
 800159c:	4825      	ldr	r0, [pc, #148]	; (8001634 <_ZN7LPS22HB27get_calibration_temperatureEhh+0xa8>)
 800159e:	f001 f973 	bl	8002888 <_ZN7STM_USB7printlnEPc>

	double cum_val = 0;
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double avg_val = 0;
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t sample = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80015be:	7ffa      	ldrb	r2, [r7, #31]
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d219      	bcs.n	80015fa <_ZN7LPS22HB27get_calibration_temperatureEhh+0x6e>
		double _temp = this->get_temp();
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fef0 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 80015cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
		STM_USB::print(".");
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <_ZN7LPS22HB27get_calibration_temperatureEhh+0xac>)
 80015d2:	f001 f943 	bl	800285c <_ZN7STM_USB5printEPc>
		cum_val += _temp;
 80015d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015de:	f7fe fdc5 	bl	800016c <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		HAL_Delay(sample_time_ms);
 80015ea:	78bb      	ldrb	r3, [r7, #2]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 f907 	bl	8003800 <HAL_Delay>
		sample ++;
 80015f2:	7ffb      	ldrb	r3, [r7, #31]
 80015f4:	3301      	adds	r3, #1
 80015f6:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80015f8:	e7e1      	b.n	80015be <_ZN7LPS22HB27get_calibration_temperatureEhh+0x32>
	}
	avg_val = cum_val / (double)num_samples;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fef1 	bl	80003e4 <__aeabi_ui2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800160a:	f7ff f88f 	bl	800072c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	e9c7 2304 	strd	r2, r3, [r7, #16]
	STM_USB::print("\r\nAverage Temperature (C): ");
 8001616:	4809      	ldr	r0, [pc, #36]	; (800163c <_ZN7LPS22HB27get_calibration_temperatureEhh+0xb0>)
 8001618:	f001 f920 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(avg_val);
 800161c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001620:	f001 f89c 	bl	800275c <_ZN7STM_USB5printEd>
	return avg_val;
 8001624:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	0800c748 	.word	0x0800c748
 8001638:	0800c768 	.word	0x0800c768
 800163c:	0800c76c 	.word	0x0800c76c

08001640 <_ZN7LPS22HB24get_calibration_pressureEhh>:

double LPS22HB::get_calibration_pressure(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	70bb      	strb	r3, [r7, #2]
	STM_USB::println("\r\n\nCalibrating LPS Pressure:\n");
 8001650:	4825      	ldr	r0, [pc, #148]	; (80016e8 <_ZN7LPS22HB24get_calibration_pressureEhh+0xa8>)
 8001652:	f001 f919 	bl	8002888 <_ZN7STM_USB7printlnEPc>

	double cum_val = 0;
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double avg_val = 0;
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t sample = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 8001672:	7ffa      	ldrb	r2, [r7, #31]
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	429a      	cmp	r2, r3
 8001678:	d219      	bcs.n	80016ae <_ZN7LPS22HB24get_calibration_pressureEhh+0x6e>
		double _temp = this->get_pressure();
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fe60 	bl	8001340 <_ZN7LPS22HB12get_pressureEv>
 8001680:	e9c7 0102 	strd	r0, r1, [r7, #8]
		STM_USB::print(".");
 8001684:	4819      	ldr	r0, [pc, #100]	; (80016ec <_ZN7LPS22HB24get_calibration_pressureEhh+0xac>)
 8001686:	f001 f8e9 	bl	800285c <_ZN7STM_USB5printEPc>
		cum_val += _temp;
 800168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001692:	f7fe fd6b 	bl	800016c <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		HAL_Delay(sample_time_ms);
 800169e:	78bb      	ldrb	r3, [r7, #2]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 f8ad 	bl	8003800 <HAL_Delay>
		sample ++;
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	3301      	adds	r3, #1
 80016aa:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80016ac:	e7e1      	b.n	8001672 <_ZN7LPS22HB24get_calibration_pressureEhh+0x32>
	}
	avg_val = cum_val / (double)num_samples;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fe97 	bl	80003e4 <__aeabi_ui2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016be:	f7ff f835 	bl	800072c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	STM_USB::print("\r\nAverage Pressure (PA): ");
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <_ZN7LPS22HB24get_calibration_pressureEhh+0xb0>)
 80016cc:	f001 f8c6 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(avg_val);
 80016d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d4:	f001 f842 	bl	800275c <_ZN7STM_USB5printEd>
	return avg_val;
 80016d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800c788 	.word	0x0800c788
 80016ec:	0800c768 	.word	0x0800c768
 80016f0:	0800c7a8 	.word	0x0800c7a8

080016f4 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDef>:
 *  Created on: Sep 23, 2023
 *      Author: kking
 */
#include "altimex.h"

Altimex::Altimex(UART_HandleTypeDef* _uart, I2C_HandleTypeDef* i2c_config, TIM_HandleTypeDef* _timer):
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b09b      	sub	sp, #108	; 0x6c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
	tempF(0.0),
	alt(0.0),
	barometer(new LPS22HB(i2c_config, LPS_DEFAULT_ADDRESS)),
	step(0),
	eeprom(new AltimexEeprom(0xA0, i2c_config))
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	barometer(new LPS22HB(i2c_config, LPS_DEFAULT_ADDRESS)),
 8001726:	200c      	movs	r0, #12
 8001728:	f006 fc00 	bl	8007f2c <_Znwj>
 800172c:	4603      	mov	r3, r0
 800172e:	461c      	mov	r4, r3
 8001730:	225c      	movs	r2, #92	; 0x5c
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff fd31 	bl	800119c <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>
	eeprom(new AltimexEeprom(0xA0, i2c_config))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	66dc      	str	r4, [r3, #108]	; 0x6c
 800173e:	2004      	movs	r0, #4
 8001740:	f006 fbf4 	bl	8007f2c <_Znwj>
 8001744:	4603      	mov	r3, r0
 8001746:	461c      	mov	r4, r3
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	21a0      	movs	r1, #160	; 0xa0
 800174c:	4620      	mov	r0, r4
 800174e:	f000 f99b 	bl	8001a88 <_ZN13AltimexEepromC1EtP17I2C_HandleTypeDef>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	671c      	str	r4, [r3, #112]	; 0x70
{
	STM_USB::init(_uart);
 8001756:	68b8      	ldr	r0, [r7, #8]
 8001758:	f000 ffea 	bl	8002730 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>
	STM_USB::println("\r\n\n\n\n\n\nAltimex Boot...");
 800175c:	482e      	ldr	r0, [pc, #184]	; (8001818 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDef+0x124>)
 800175e:	f001 f893 	bl	8002888 <_ZN7STM_USB7printlnEPc>
	LPS22HB::LPS_INIT_STATUS baro_init_status = barometer->init();
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fd31 	bl	80011ce <_ZN7LPS22HB4initEv>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	if(baro_init_status != LPS22HB::LPS_INIT_STATUS::SUCCESS) {
 8001772:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001776:	2b02      	cmp	r3, #2
 8001778:	d007      	beq.n	800178a <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDef+0x96>
		while(true) {
			STM_USB::println("Error while initializing sensor.");
 800177a:	4828      	ldr	r0, [pc, #160]	; (800181c <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDef+0x128>)
 800177c:	f001 f884 	bl	8002888 <_ZN7STM_USB7printlnEPc>
			HAL_Delay(1000);
 8001780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001784:	f002 f83c 	bl	8003800 <HAL_Delay>
			STM_USB::println("Error while initializing sensor.");
 8001788:	e7f7      	b.n	800177a <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDef+0x86>
		}
	}

	struct AltimexConfig loaded_config;

	STM_USB::println("Loading settings");
 800178a:	4825      	ldr	r0, [pc, #148]	; (8001820 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDef+0x12c>)
 800178c:	f001 f87c 	bl	8002888 <_ZN7STM_USB7printlnEPc>
	eeprom->load_configuration(&loaded_config);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	f107 0210 	add.w	r2, r7, #16
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f98e 	bl	8001abc <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig>

	config = loaded_config;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3318      	adds	r3, #24
 80017a4:	f107 0110 	add.w	r1, r7, #16
 80017a8:	2250      	movs	r2, #80	; 0x50
 80017aa:	4618      	mov	r0, r3
 80017ac:	f008 f8ee 	bl	800998c <memcpy>
	ledController = new AltimexLedController(&config, _timer);
 80017b0:	2008      	movs	r0, #8
 80017b2:	f006 fbbb 	bl	8007f2c <_Znwj>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461c      	mov	r4, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3318      	adds	r3, #24
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4620      	mov	r0, r4
 80017c4:	f000 f9a6 	bl	8001b14 <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	601c      	str	r4, [r3, #0]
	stateController = new AltimexStateController(&config);
 80017cc:	2050      	movs	r0, #80	; 0x50
 80017ce:	f006 fbad 	bl	8007f2c <_Znwj>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461c      	mov	r4, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3318      	adds	r3, #24
 80017da:	4619      	mov	r1, r3
 80017dc:	4620      	mov	r0, r4
 80017de:	f000 fc87 	bl	80020f0 <_ZN22AltimexStateControllerC1EP13AltimexConfig>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	605c      	str	r4, [r3, #4]

	print_config_to_usb();
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f81c 	bl	8001824 <_ZN7Altimex19print_config_to_usbEv>

	barometer->calibrate(10, 100);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f0:	2264      	movs	r2, #100	; 0x64
 80017f2:	210a      	movs	r1, #10
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe9d 	bl	8001534 <_ZN7LPS22HB9calibrateEhh>
	tempF = barometer->get_tempf();
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe02 	bl	8001408 <_ZN7LPS22HB9get_tempfEv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	376c      	adds	r7, #108	; 0x6c
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	0800c7c4 	.word	0x0800c7c4
 800181c:	0800c7dc 	.word	0x0800c7dc
 8001820:	0800c800 	.word	0x0800c800

08001824 <_ZN7Altimex19print_config_to_usbEv>:

void Altimex::print_config_to_usb()
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	STM_USB::print("Gear Check Notification Altitude: ");
 800182c:	483b      	ldr	r0, [pc, #236]	; (800191c <_ZN7Altimex19print_config_to_usbEv+0xf8>)
 800182e:	f001 f815 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.gearCheckAlt);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f000 ff8e 	bl	800275c <_ZN7STM_USB5printEd>

	STM_USB::print("Exit Altitude (ft): ");
 8001840:	4837      	ldr	r0, [pc, #220]	; (8001920 <_ZN7Altimex19print_config_to_usbEv+0xfc>)
 8001842:	f001 f80b 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.exit);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f000 ff84 	bl	800275c <_ZN7STM_USB5printEd>

	STM_USB::print("Breakoff Altitude (ft): ");
 8001854:	4833      	ldr	r0, [pc, #204]	; (8001924 <_ZN7Altimex19print_config_to_usbEv+0x100>)
 8001856:	f001 f801 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.breakoff);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f000 ff7a 	bl	800275c <_ZN7STM_USB5printEd>

	STM_USB::print("Deployment Altitude (ft): ");
 8001868:	482f      	ldr	r0, [pc, #188]	; (8001928 <_ZN7Altimex19print_config_to_usbEv+0x104>)
 800186a:	f000 fff7 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.deploy);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f000 ff70 	bl	800275c <_ZN7STM_USB5printEd>

	STM_USB::print("Ascent Threshold: ");
 800187c:	482b      	ldr	r0, [pc, #172]	; (800192c <_ZN7Altimex19print_config_to_usbEv+0x108>)
 800187e:	f000 ffed 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.ascentThreshold);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f000 ff66 	bl	800275c <_ZN7STM_USB5printEd>

	STM_USB::print("Ascent Threshold Time (ms): ");
 8001890:	4827      	ldr	r0, [pc, #156]	; (8001930 <_ZN7Altimex19print_config_to_usbEv+0x10c>)
 8001892:	f000 ffe3 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.ascentThresholdTime);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	8c1b      	ldrh	r3, [r3, #32]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 ff9e 	bl	80027dc <_ZN7STM_USB5printEt>

	STM_USB::print("Deploy Test Threshold Time (ms): ");
 80018a0:	4824      	ldr	r0, [pc, #144]	; (8001934 <_ZN7Altimex19print_config_to_usbEv+0x110>)
 80018a2:	f000 ffdb 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.deployTestThresholdTime);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 ff96 	bl	80027dc <_ZN7STM_USB5printEt>

	STM_USB::print("Gear Check Notification Length (ms): ");
 80018b0:	4821      	ldr	r0, [pc, #132]	; (8001938 <_ZN7Altimex19print_config_to_usbEv+0x114>)
 80018b2:	f000 ffd3 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.gearCheckNotificationLength);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 ffae 	bl	800281c <_ZN7STM_USB5printEm>

	STM_USB::print("Freefall Threshold Time (ms): ");
 80018c0:	481e      	ldr	r0, [pc, #120]	; (800193c <_ZN7Altimex19print_config_to_usbEv+0x118>)
 80018c2:	f000 ffcb 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.freefallThresholdTime);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 ffa6 	bl	800281c <_ZN7STM_USB5printEm>

	STM_USB::print("Standby Flash On Length (ms): ");
 80018d0:	481b      	ldr	r0, [pc, #108]	; (8001940 <_ZN7Altimex19print_config_to_usbEv+0x11c>)
 80018d2:	f000 ffc3 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.standbyFlashOnLength);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 ff9e 	bl	800281c <_ZN7STM_USB5printEm>

	STM_USB::print("Standby Flash Off Length (ms): ");
 80018e0:	4818      	ldr	r0, [pc, #96]	; (8001944 <_ZN7Altimex19print_config_to_usbEv+0x120>)
 80018e2:	f000 ffbb 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.standbyFlashOffLength);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 ff96 	bl	800281c <_ZN7STM_USB5printEm>

	STM_USB::print("Brightness (0-40): ");
 80018f0:	4815      	ldr	r0, [pc, #84]	; (8001948 <_ZN7Altimex19print_config_to_usbEv+0x124>)
 80018f2:	f000 ffb3 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.brightness);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 ff4d 	bl	800279c <_ZN7STM_USB5printEh>

	STM_USB::print("Standby Brightness (0-40): ");
 8001902:	4812      	ldr	r0, [pc, #72]	; (800194c <_ZN7Altimex19print_config_to_usbEv+0x128>)
 8001904:	f000 ffaa 	bl	800285c <_ZN7STM_USB5printEPc>
	STM_USB::print(config.standbyBrightness);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800190e:	4618      	mov	r0, r3
 8001910:	f000 ff44 	bl	800279c <_ZN7STM_USB5printEh>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800c814 	.word	0x0800c814
 8001920:	0800c838 	.word	0x0800c838
 8001924:	0800c850 	.word	0x0800c850
 8001928:	0800c86c 	.word	0x0800c86c
 800192c:	0800c888 	.word	0x0800c888
 8001930:	0800c89c 	.word	0x0800c89c
 8001934:	0800c8bc 	.word	0x0800c8bc
 8001938:	0800c8e0 	.word	0x0800c8e0
 800193c:	0800c908 	.word	0x0800c908
 8001940:	0800c928 	.word	0x0800c928
 8001944:	0800c948 	.word	0x0800c948
 8001948:	0800c968 	.word	0x0800c968
 800194c:	0800c97c 	.word	0x0800c97c

08001950 <_ZN7Altimex4tickEv>:

void Altimex::tick()
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8001956:	af00      	add	r7, sp, #0
 8001958:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800195c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001960:	6018      	str	r0, [r3, #0]
	tempF = barometer->get_tempf();
 8001962:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001966:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fd4a 	bl	8001408 <_ZN7LPS22HB9get_tempfEv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800197c:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 8001980:	6809      	ldr	r1, [r1, #0]
 8001982:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bool usb_data_avail = STM_USB::data_ready();
 8001986:	f000 fffd 	bl	8002984 <_ZN7STM_USB10data_readyEv>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	if(usb_data_avail) {
		//STM_USB::println("Data available");
	}

	char data[1024];
	STM_USB::readln(data);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4618      	mov	r0, r3
 8001996:	f000 ff93 	bl	80028c0 <_ZN7STM_USB6readlnEPc>
	STM_USB::println(data);
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 ff72 	bl	8002888 <_ZN7STM_USB7printlnEPc>
		if(alt < 2500) alt -= 5;
		else alt -= 29;
	  }
	*/

	alt = barometer->get_relalt_ft();
 80019a4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019a8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fd51 	bl	8001458 <_ZN7LPS22HB13get_relalt_ftEv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80019be:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 80019c2:	6809      	ldr	r1, [r1, #0]
 80019c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	stateController->update_state(alt);
 80019c8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019cc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019d8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019e2:	4608      	mov	r0, r1
 80019e4:	f000 fbdc 	bl	80021a0 <_ZN22AltimexStateController12update_stateEd>
	ledController->display_leds(stateController->get_state(), step, alt);
 80019e8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019ec:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019f8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fbbf 	bl	8002184 <_ZN22AltimexStateController9get_stateEv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461e      	mov	r6, r3
 8001a0a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a0e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 8001a18:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a1c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f82d 	bl	8000a88 <__aeabi_d2uiz>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	462a      	mov	r2, r5
 8001a34:	4631      	mov	r1, r6
 8001a36:	4620      	mov	r0, r4
 8001a38:	f000 f88a 	bl	8001b50 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>
	step++;
 8001a3c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a40:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a52:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	if(step > 100) step = 0;
 8001a5c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a60:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d907      	bls.n	8001a7e <_ZN7Altimex4tickEv+0x12e>
 8001a6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a72:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	//Data is received one byte at a time
	//uint8_t Rx_data[1];
	//HAL_UART_Receive(&huart1, Rx_data, 100, 100);

	//HAL_Delay(100); //10hz
}
 8001a7e:	bf00      	nop
 8001a80:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a88 <_ZN13AltimexEepromC1EtP17I2C_HandleTypeDef>:
 *      Author: kking
 */

#include "altimex_eeprom.h"

AltimexEeprom::AltimexEeprom(uint16_t _address, I2C_HandleTypeDef* _i2cx):
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	460b      	mov	r3, r1
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	817b      	strh	r3, [r7, #10]
	storage(new EepromStorage(_address, _i2cx))
 8001a96:	200c      	movs	r0, #12
 8001a98:	f006 fa48 	bl	8007f2c <_Znwj>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461c      	mov	r4, r3
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f000 fd82 	bl	80025b0 <_ZN13EepromStorageC1EtP17I2C_HandleTypeDef>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	601c      	str	r4, [r3, #0]
{

}
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}
	...

08001abc <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig>:

	storage->write_from(CONFIGURATION_OFFSET, sizeof(AltimexConfig), data);
}

void AltimexEeprom::load_configuration(AltimexConfig* config)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b098      	sub	sp, #96	; 0x60
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	uint8_t data[sizeof(AltimexConfig)];
	HAL_StatusTypeDef status = storage->read(CONFIGURATION_OFFSET, sizeof(AltimexConfig), data);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2250      	movs	r2, #80	; 0x50
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f000 fd85 	bl	80025e0 <_ZN13EepromStorage4readEtjPh>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (status == HAL_OK) {
 8001adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10b      	bne.n	8001afc <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x40>
        // Copy the data from the byte array into the config struct
        memcpy(config, data, sizeof(AltimexConfig));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2250      	movs	r2, #80	; 0x50
 8001aee:	4619      	mov	r1, r3
 8001af0:	f007 ff4c 	bl	800998c <memcpy>
    	STM_USB::println("Loaded configuration!");
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x50>)
 8001af6:	f000 fec7 	bl	8002888 <_ZN7STM_USB7printlnEPc>
    } else {
    	STM_USB::println("Error loading configuration from EEPROM");
    }
}
 8001afa:	e002      	b.n	8001b02 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x46>
    	STM_USB::println("Error loading configuration from EEPROM");
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x54>)
 8001afe:	f000 fec3 	bl	8002888 <_ZN7STM_USB7printlnEPc>
}
 8001b02:	bf00      	nop
 8001b04:	3760      	adds	r7, #96	; 0x60
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	0800c998 	.word	0x0800c998
 8001b10:	0800c9b0 	.word	0x0800c9b0

08001b14 <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>:
#include <altimex_led_controller.h>

uint32_t standbyLastFlash = 0;
uint32_t lastLedTurnonTime = 0;

AltimexLedController::AltimexLedController(AltimexConfig* _config, TIM_HandleTypeDef* _timer):
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
		config(_config),
		ledStrip(new LedStrip(_timer))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	2008      	movs	r0, #8
 8001b28:	f006 fa00 	bl	8007f2c <_Znwj>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461c      	mov	r4, r3
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4620      	mov	r0, r4
 8001b34:	f000 fd92 	bl	800265c <_ZN8LedStripC1EP17TIM_HandleTypeDef>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	605c      	str	r4, [r3, #4]
{
	this->ledStrip->clear();
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fdcb 	bl	80026dc <_ZN8LedStrip5clearEv>
}
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd90      	pop	{r4, r7, pc}

08001b50 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>:

void AltimexLedController::display_leds(enum AltimexState state, uint16_t step, uint16_t alt)
{
 8001b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b54:	b08a      	sub	sp, #40	; 0x28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4603      	mov	r3, r0
 8001b62:	72fb      	strb	r3, [r7, #11]
 8001b64:	460b      	mov	r3, r1
 8001b66:	813b      	strh	r3, [r7, #8]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	80fb      	strh	r3, [r7, #6]
	//Periodically flashes to show that the device is on
	if(state == ALTIMEX_STANDBY)
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d172      	bne.n	8001c58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
	{
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	4413      	add	r3, r2
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
		this->ledStrip->set_brightness(this->config->standbyBrightness);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f000 fdbd 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>

		//If board has just been turned on
		if(standbyLastFlash == 0 && HAL_GetTick() < 3000)
 8001b96:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d108      	bne.n	8001bb0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 8001b9e:	f001 fe25 	bl	80037ec <HAL_GetTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d801      	bhi.n	8001bb0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x62>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01c      	beq.n	8001bf0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xa0>
		{
			uint8_t on = (step) % 2 == 0;
 8001bb6:	893b      	ldrh	r3, [r7, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t leds = on * this->config->numLeds;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			this->ledStrip->progress_bar_single_color(leds, PURPLE);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001be6:	2203      	movs	r2, #3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fd52 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001bee:	e033      	b.n	8001c58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
		}
		else {
			//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
			if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001bf0:	f001 fdfc 	bl	80037ec <HAL_GetTick>
 8001bf4:	4601      	mov	r1, r0
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4299      	cmp	r1, r3
 8001c00:	bf8c      	ite	hi
 8001c02:	2301      	movhi	r3, #1
 8001c04:	2300      	movls	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xc8>
				standbyLastFlash = HAL_GetTick();
 8001c0c:	f001 fdee 	bl	80037ec <HAL_GetTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e01f      	b.n	8001c58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
			}
			else
			{
				//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
				if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	18d4      	adds	r4, r2, r3
 8001c24:	f001 fde2 	bl	80037ec <HAL_GetTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	429c      	cmp	r4, r3
 8001c2c:	bf34      	ite	cc
 8001c2e:	2301      	movcc	r3, #1
 8001c30:	2300      	movcs	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xfe>
				{
					this->ledStrip->progress_bar_single_color(this->config->numLeds, GREEN);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6858      	ldr	r0, [r3, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c44:	2200      	movs	r2, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f000 fd23 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001c4c:	e004      	b.n	8001c58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
				}
				else
				{
					this->ledStrip->clear();
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fd42 	bl	80026dc <_ZN8LedStrip5clearEv>
			}
		}
	}

	//Led bar with top led flashing. Full when at gear check altitude
	if(state == ALTIMEX_ASCENT)
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d147      	bne.n	8001cee <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f000 fd4f 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7e:	4413      	add	r3, r2
 8001c80:	61fb      	str	r3, [r7, #28]

		//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
		if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001c82:	f001 fdb3 	bl	80037ec <HAL_GetTick>
 8001c86:	4601      	mov	r1, r0
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4299      	cmp	r1, r3
 8001c92:	bf8c      	ite	hi
 8001c94:	2301      	movhi	r3, #1
 8001c96:	2300      	movls	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x15a>
			standbyLastFlash = HAL_GetTick();
 8001c9e:	f001 fda5 	bl	80037ec <HAL_GetTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e021      	b.n	8001cee <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
		}
		else
		{
			//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
			if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	18d4      	adds	r4, r2, r3
 8001cb6:	f001 fd99 	bl	80037ec <HAL_GetTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	429c      	cmp	r4, r3
 8001cbe:	bf34      	ite	cc
 8001cc0:	2301      	movcc	r3, #1
 8001cc2:	2300      	movcs	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x194>
			{
				this->ledStrip->progress_bar_single_color(this->config->numLeds, YELLOW);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6858      	ldr	r0, [r3, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f000 fcda 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001cde:	e006      	b.n	8001cee <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
 8001ce0:	200001f8 	.word	0x200001f8
			}
			else
			{
				this->ledStrip->clear();
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fcf7 	bl	80026dc <_ZN8LedStrip5clearEv>
		Strip_Progress_Bar_Single_Color(i, GREEN);
		*/
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_GEARCHECK)
 8001cee:	7afb      	ldrb	r3, [r7, #11]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d128      	bne.n	8001d46 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x1f6>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 fd04 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint8_t flash = (step / 7) % 2 == 0;
 8001d08:	893a      	ldrh	r2, [r7, #8]
 8001d0a:	4bbf      	ldr	r3, [pc, #764]	; (8002008 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b8>)
 8001d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d10:	1ad2      	subs	r2, r2, r3
 8001d12:	0852      	lsrs	r2, r2, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	76fb      	strb	r3, [r7, #27]
		this->ledStrip->progress_bar_single_color(flash * this->config->numLeds, GREEN);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6858      	ldr	r0, [r3, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d36:	7efa      	ldrb	r2, [r7, #27]
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4619      	mov	r1, r3
 8001d42:	f000 fca6 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Solid blue while awaiting jump
	if(state == ALTIMEX_DETECT_FREEFALL_START)
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d113      	bne.n	8001d74 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x224>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 fcd8 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		this->ledStrip->progress_bar_single_color(this->config->numLeds, SKYBLUE);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6858      	ldr	r0, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f000 fc8f 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude + 1500ft
	if(state == ALTIMEX_FREEFALL)
 8001d74:	7afb      	ldrb	r3, [r7, #11]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d16a      	bne.n	8001e50 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x300>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d86:	4619      	mov	r1, r3
 8001d88:	4610      	mov	r0, r2
 8001d8a:	f000 fcc1 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds) * (1-(float)(alt - (this->config->breakoff + 1500)) / (this->config->exit - (this->config->breakoff + 1500)));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb34 	bl	8000404 <__aeabi_i2d>
 8001d9c:	4680      	mov	r8, r0
 8001d9e:	4689      	mov	r9, r1
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fb2e 	bl	8000404 <__aeabi_i2d>
 8001da8:	4604      	mov	r4, r0
 8001daa:	460d      	mov	r5, r1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001db4:	a392      	add	r3, pc, #584	; (adr r3, 8002000 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe f9d7 	bl	800016c <__adddf3>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	f7fe f9cf 	bl	8000168 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fe79 	bl	8000ac8 <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb25 	bl	8000428 <__aeabi_f2d>
 8001dde:	4682      	mov	sl, r0
 8001de0:	468b      	mov	fp, r1
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001df2:	a383      	add	r3, pc, #524	; (adr r3, 8002000 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe f9b8 	bl	800016c <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe f9b0 	bl	8000168 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4650      	mov	r0, sl
 8001e0e:	4659      	mov	r1, fp
 8001e10:	f7fe fc8c 	bl	800072c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	497b      	ldr	r1, [pc, #492]	; (800200c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001e1e:	f7fe f9a3 	bl	8000168 <__aeabi_dsub>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4640      	mov	r0, r8
 8001e28:	4649      	mov	r1, r9
 8001e2a:	f7fe fb55 	bl	80004d8 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fe27 	bl	8000a88 <__aeabi_d2uiz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	76bb      	strb	r3, [r7, #26]
		this->ledStrip->progress_bar_single_color(leds + 1, SKYBLUE);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6858      	ldr	r0, [r3, #4]
 8001e42:	7ebb      	ldrb	r3, [r7, #26]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f000 fc21 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude
	if(state == ALTIMEX_APPROACHING_BREAKOFF)
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d15e      	bne.n	8001f14 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x3c4>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e62:	4619      	mov	r1, r3
 8001e64:	4610      	mov	r0, r2
 8001e66:	f000 fc53 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->breakoff) / ((this->config->breakoff + 1500) - this->config->breakoff));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e72:	3301      	adds	r3, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fac5 	bl	8000404 <__aeabi_i2d>
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	460d      	mov	r5, r1
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fabf 	bl	8000404 <__aeabi_i2d>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e8e:	f7fe f96b 	bl	8000168 <__aeabi_dsub>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe15 	bl	8000ac8 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fac1 	bl	8000428 <__aeabi_f2d>
 8001ea6:	4680      	mov	r8, r0
 8001ea8:	4689      	mov	r9, r1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001eb2:	a353      	add	r3, pc, #332	; (adr r3, 8002000 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe f958 	bl	800016c <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ecc:	f7fe f94c 	bl	8000168 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4640      	mov	r0, r8
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	f7fe fc28 	bl	800072c <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	f04f 0000 	mov.w	r0, #0
 8001ee4:	4949      	ldr	r1, [pc, #292]	; (800200c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001ee6:	f7fe f93f 	bl	8000168 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe faf1 	bl	80004d8 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fdc3 	bl	8000a88 <__aeabi_d2uiz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	767b      	strb	r3, [r7, #25]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	7e79      	ldrb	r1, [r7, #25]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fbbf 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_BREAKOFF)
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d121      	bne.n	8001f5e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x40e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f000 fbf1 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 8001f2e:	893b      	ldrh	r3, [r7, #8]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	763b      	strb	r3, [r7, #24]
		uint8_t leds = on * this->config->numLeds;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f48:	7e3a      	ldrb	r2, [r7, #24]
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	75fb      	strb	r3, [r7, #23]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	7df9      	ldrb	r1, [r7, #23]
 8001f56:	2200      	movs	r2, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fb9a 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching deployment altitude
	if(state == ALTIMEX_TRACK)
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	2b07      	cmp	r3, #7
 8001f62:	d169      	bne.n	8002038 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4e8>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 fbcc 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->deploy) / ((this->config->deploy + 500) - this->config->deploy));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f80:	3301      	adds	r3, #1
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa3e 	bl	8000404 <__aeabi_i2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fa38 	bl	8000404 <__aeabi_i2d>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f9c:	f7fe f8e4 	bl	8000168 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fd8e 	bl	8000ac8 <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa3a 	bl	8000428 <__aeabi_f2d>
 8001fb4:	4680      	mov	r8, r0
 8001fb6:	4689      	mov	r9, r1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c0>)
 8001fc6:	f7fe f8d1 	bl	800016c <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001fda:	f7fe f8c5 	bl	8000168 <__aeabi_dsub>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	4649      	mov	r1, r9
 8001fe6:	f7fe fba1 	bl	800072c <__aeabi_ddiv>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	4906      	ldr	r1, [pc, #24]	; (800200c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001ff4:	f7fe f8b8 	bl	8000168 <__aeabi_dsub>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	e009      	b.n	8002014 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c4>
 8002000:	00000000 	.word	0x00000000
 8002004:	40977000 	.word	0x40977000
 8002008:	24924925 	.word	0x24924925
 800200c:	3ff00000 	.word	0x3ff00000
 8002010:	407f4000 	.word	0x407f4000
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe fa5f 	bl	80004d8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fd31 	bl	8000a88 <__aeabi_d2uiz>
 8002026:	4603      	mov	r3, r0
 8002028:	75bb      	strb	r3, [r7, #22]
		this->ledStrip->progress_bar_single_color(leds, RED);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	7db9      	ldrb	r1, [r7, #22]
 8002030:	2202      	movs	r2, #2
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fb2d 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes red until detects canopy deployment
	if(state == ALTIMEX_DEPLOY)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d121      	bne.n	8002082 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x532>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f000 fb5f 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 8002052:	893b      	ldrh	r3, [r7, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	757b      	strb	r3, [r7, #21]
		uint8_t leds = on * this->config->numLeds;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206c:	7d7a      	ldrb	r2, [r7, #21]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	753b      	strb	r3, [r7, #20]
		this->ledStrip->progress_bar_single_color(leds, RED);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	7d39      	ldrb	r1, [r7, #20]
 800207a:	2202      	movs	r2, #2
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fb08 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes purple
	if(state == ALTIMEX_CANOPY)
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d126      	bne.n	80020d6 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x586>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f000 fb3a 	bl	8002710 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step/10) % 2 == 0;
 800209c:	893b      	ldrh	r3, [r7, #8]
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x59c>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	74fb      	strb	r3, [r7, #19]
		uint8_t leds = on * this->config->numLeds;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020c0:	7cfa      	ldrb	r2, [r7, #19]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	74bb      	strb	r3, [r7, #18]
		this->ledStrip->progress_bar_single_color(leds, PURPLE);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	7cb9      	ldrb	r1, [r7, #18]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fade 	bl	8002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	this->ledStrip->send();
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fb0b 	bl	80026f6 <_ZN8LedStrip4sendEv>
}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ea:	bf00      	nop
 80020ec:	cccccccd 	.word	0xcccccccd

080020f0 <_ZN22AltimexStateControllerC1EP13AltimexConfig>:
 *      Author: kking
 */

#include <altimex_state_controller.h>

AltimexStateController::AltimexStateController(AltimexConfig* _config):
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
		freefallStartAlt(0.0),
		deployTestPrevAlt(0.0),
		deployTestPrevTime(0),
		deployTest(false),
		deployTestStart(0),
		deployTestStartAlt(0.0)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	721a      	strb	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	751a      	strb	r2, [r3, #20]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2020 	strb.w	r2, [r3, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	639a      	str	r2, [r3, #56]	; 0x38
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
{

}
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <_ZN22AltimexStateController9get_stateEv>:

enum AltimexState AltimexStateController::get_state()
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	return this->currentState;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	0000      	movs	r0, r0
 800219c:	0000      	movs	r0, r0
	...

080021a0 <_ZN22AltimexStateController12update_stateEd>:

void AltimexStateController::update_state(double alt)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentState == ALTIMEX_STANDBY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d13f      	bne.n	8002234 <_ZN22AltimexStateController12update_stateEd+0x94>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > config->ascentThreshold)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021c0:	f7fe fc1a 	bl	80009f8 <__aeabi_dcmpgt>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d022      	beq.n	8002210 <_ZN22AltimexStateController12update_stateEd+0x70>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	7a1b      	ldrb	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d107      	bne.n	80021e2 <_ZN22AltimexStateController12update_stateEd+0x42>
			{
				testingAscent = 1;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	721a      	strb	r2, [r3, #8]
				ascentTestStart = HAL_GetTick();
 80021d8:	f001 fb08 	bl	80037ec <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	60da      	str	r2, [r3, #12]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	7a1b      	ldrb	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d112      	bne.n	8002210 <_ZN22AltimexStateController12update_stateEd+0x70>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= config->ascentThresholdTime)
 80021ea:	f001 faff 	bl	80037ec <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	6852      	ldr	r2, [r2, #4]
 80021fa:	8912      	ldrh	r2, [r2, #8]
 80021fc:	4293      	cmp	r3, r2
 80021fe:	bf2c      	ite	cs
 8002200:	2301      	movcs	r3, #1
 8002202:	2300      	movcc	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <_ZN22AltimexStateController12update_stateEd+0x70>
				{
					currentState = ALTIMEX_ASCENT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < config->ascentThreshold)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800221c:	f7fe fbce 	bl	80009bc <__aeabi_dcmplt>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <_ZN22AltimexStateController12update_stateEd+0x94>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	7a1b      	ldrb	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <_ZN22AltimexStateController12update_stateEd+0x94>
			{
				testingAscent = 0;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	721a      	strb	r2, [r3, #8]
			}
		}
	}

	if(currentState == ALTIMEX_ASCENT)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10d      	bne.n	8002258 <_ZN22AltimexStateController12update_stateEd+0xb8>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > config->gearCheckAlt)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002248:	f7fe fbd6 	bl	80009f8 <__aeabi_dcmpgt>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <_ZN22AltimexStateController12update_stateEd+0xb8>
		{
			currentState = ALTIMEX_GEARCHECK;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_GEARCHECK)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d127      	bne.n	80022b0 <_ZN22AltimexStateController12update_stateEd+0x110>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	7d1b      	ldrb	r3, [r3, #20]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <_ZN22AltimexStateController12update_stateEd+0xd8>
		{
			gearCheckNotificationStart = HAL_GetTick();
 8002268:	f001 fac0 	bl	80037ec <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	611a      	str	r2, [r3, #16]
			displayedGearCheck = 1;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	751a      	strb	r2, [r3, #20]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck & HAL_GetTick() > gearCheckNotificationStart + config->gearCheckNotificationLength)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	7d1b      	ldrb	r3, [r3, #20]
 800227c:	461c      	mov	r4, r3
 800227e:	f001 fab5 	bl	80037ec <HAL_GetTick>
 8002282:	4601      	mov	r1, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4413      	add	r3, r2
 8002290:	4299      	cmp	r1, r3
 8002292:	bf8c      	ite	hi
 8002294:	2301      	movhi	r3, #1
 8002296:	2300      	movls	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4023      	ands	r3, r4
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <_ZN22AltimexStateController12update_stateEd+0x110>
		{
			currentState = ALTIMEX_DETECT_FREEFALL_START;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2203      	movs	r2, #3
 80022ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DETECT_FREEFALL_START)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d17b      	bne.n	80023b0 <_ZN22AltimexStateController12update_stateEd+0x210>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c2:	f7fe fb7b 	bl	80009bc <__aeabi_dcmplt>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d059      	beq.n	8002380 <_ZN22AltimexStateController12update_stateEd+0x1e0>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <_ZN22AltimexStateController12update_stateEd+0x152>
			{
				freefallTest = 1;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2020 	strb.w	r2, [r3, #32]
				freefallTestStart = HAL_GetTick();
 80022de:	f001 fa85 	bl	80037ec <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
				freefallStartAlt = alt;
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + config->freefallThresholdTime)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10c      	bne.n	8002316 <_ZN22AltimexStateController12update_stateEd+0x176>
 80022fc:	f001 fa76 	bl	80037ec <HAL_GetTick>
 8002300:	4601      	mov	r1, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4413      	add	r3, r2
 800230e:	4299      	cmp	r1, r3
 8002310:	d901      	bls.n	8002316 <_ZN22AltimexStateController12update_stateEd+0x176>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <_ZN22AltimexStateController12update_stateEd+0x178>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d031      	beq.n	8002380 <_ZN22AltimexStateController12update_stateEd+0x1e0>
			{
				double elapsedTimeSec = (double)(HAL_GetTick() - freefallTestStart) / 1000;
 800231c:	f001 fa66 	bl	80037ec <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f85b 	bl	80003e4 <__aeabi_ui2d>
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b9b      	ldr	r3, [pc, #620]	; (80025a0 <_ZN22AltimexStateController12update_stateEd+0x400>)
 8002334:	f7fe f9fa 	bl	800072c <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				double avgSpeedFps = ((double)(freefallStartAlt - alt) / elapsedTimeSec);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800234a:	f7fd ff0d 	bl	8000168 <__aeabi_dsub>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800235a:	f7fe f9e7 	bl	800072c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	e9c7 2308 	strd	r2, r3, [r7, #32]

				//If average speed is above 80mph
				if(avgSpeedFps >= 117.0) //80mph to fps
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <_ZN22AltimexStateController12update_stateEd+0x404>)
 800236c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002370:	f7fe fb38 	bl	80009e4 <__aeabi_dcmpge>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <_ZN22AltimexStateController12update_stateEd+0x1e0>
				{
					currentState = ALTIMEX_FREEFALL;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2204      	movs	r2, #4
 800237e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800238a:	f7fe fb35 	bl	80009f8 <__aeabi_dcmpgt>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <_ZN22AltimexStateController12update_stateEd+0x206>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d103      	bne.n	80023a6 <_ZN22AltimexStateController12update_stateEd+0x206>
			{
				freefallTest = 0;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}

		prevAlt = alt;
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	if(currentState == ALTIMEX_FREEFALL)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d114      	bne.n	80023e2 <_ZN22AltimexStateController12update_stateEd+0x242>
	{
		if(alt < config->breakoff + 1500.0)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80023c0:	a375      	add	r3, pc, #468	; (adr r3, 8002598 <_ZN22AltimexStateController12update_stateEd+0x3f8>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	f7fd fed1 	bl	800016c <__adddf3>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023d2:	f7fe faf3 	bl	80009bc <__aeabi_dcmplt>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <_ZN22AltimexStateController12update_stateEd+0x242>
		{
			currentState = ALTIMEX_APPROACHING_BREAKOFF;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2205      	movs	r2, #5
 80023e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_APPROACHING_BREAKOFF)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d10d      	bne.n	8002406 <_ZN22AltimexStateController12update_stateEd+0x266>
	{
		if(alt < config->breakoff)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023f6:	f7fe fae1 	bl	80009bc <__aeabi_dcmplt>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <_ZN22AltimexStateController12update_stateEd+0x266>
		{
			currentState = ALTIMEX_BREAKOFF;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2206      	movs	r2, #6
 8002404:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_BREAKOFF)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b06      	cmp	r3, #6
 800240c:	d114      	bne.n	8002438 <_ZN22AltimexStateController12update_stateEd+0x298>
	{
		if(alt < config->breakoff - 500.0)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <_ZN22AltimexStateController12update_stateEd+0x408>)
 800241c:	f7fd fea4 	bl	8000168 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002428:	f7fe fac8 	bl	80009bc <__aeabi_dcmplt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <_ZN22AltimexStateController12update_stateEd+0x298>
		{
			currentState = ALTIMEX_TRACK;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2207      	movs	r2, #7
 8002436:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_TRACK)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d10d      	bne.n	800245c <_ZN22AltimexStateController12update_stateEd+0x2bc>
	{
		if(alt < config->deploy)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800244c:	f7fe fab6 	bl	80009bc <__aeabi_dcmplt>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <_ZN22AltimexStateController12update_stateEd+0x2bc>
		{
			currentState = ALTIMEX_DEPLOY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2208      	movs	r2, #8
 800245a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DEPLOY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b08      	cmp	r3, #8
 8002462:	f040 8094 	bne.w	800258e <_ZN22AltimexStateController12update_stateEd+0x3ee>
	{

		if(deployTest == 0)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d13f      	bne.n	80024f0 <_ZN22AltimexStateController12update_stateEd+0x350>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			double elapsedTimeSec = (double)(HAL_GetTick() - deployTestStart) / 1000;
 8002470:	f001 f9bc 	bl	80037ec <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd ffb1 	bl	80003e4 <__aeabi_ui2d>
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <_ZN22AltimexStateController12update_stateEd+0x400>)
 8002488:	f7fe f950 	bl	800072c <__aeabi_ddiv>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double avgSpeedFps = fabs((double)(deployTestStartAlt - alt) / elapsedTimeSec);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800249a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800249e:	f7fd fe63 	bl	8000168 <__aeabi_dsub>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ae:	f7fe f93d 	bl	800072c <__aeabi_ddiv>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	6139      	str	r1, [r7, #16]
 80024ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024be:	617b      	str	r3, [r7, #20]
			if(avgSpeedFps <= 73.0) //50mph to fps
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	4b39      	ldr	r3, [pc, #228]	; (80025ac <_ZN22AltimexStateController12update_stateEd+0x40c>)
 80024c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ca:	f7fe fa81 	bl	80009d0 <__aeabi_dcmple>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <_ZN22AltimexStateController12update_stateEd+0x350>
			{
				deployTest = 1;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				deployTestStart = HAL_GetTick();
 80024dc:	f001 f986 	bl	80037ec <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
				deployTestStartAlt = alt;
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			}
		}
		if(deployTest == 1)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d13f      	bne.n	800257a <_ZN22AltimexStateController12update_stateEd+0x3da>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002504:	f7fd fe30 	bl	8000168 <__aeabi_dsub>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4614      	mov	r4, r2
 800250e:	461d      	mov	r5, r3
 8002510:	f001 f96c 	bl	80037ec <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ff61 	bl	80003e4 <__aeabi_ui2d>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f7fe f8ff 	bl	800072c <__aeabi_ddiv>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	2301      	movs	r3, #1
 8002538:	461c      	mov	r4, r3
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <_ZN22AltimexStateController12update_stateEd+0x40c>)
 8002540:	f7fe fa46 	bl	80009d0 <__aeabi_dcmple>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <_ZN22AltimexStateController12update_stateEd+0x3ae>
 800254a:	2300      	movs	r3, #0
 800254c:	461c      	mov	r4, r3
 800254e:	b2e3      	uxtb	r3, r4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <_ZN22AltimexStateController12update_stateEd+0x3da>
			{
				if(HAL_GetTick() > deployTestStart + config->deployTestThresholdTime)
 8002554:	f001 f94a 	bl	80037ec <HAL_GetTick>
 8002558:	4601      	mov	r1, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6852      	ldr	r2, [r2, #4]
 8002562:	8952      	ldrh	r2, [r2, #10]
 8002564:	4413      	add	r3, r2
 8002566:	4299      	cmp	r1, r3
 8002568:	bf8c      	ite	hi
 800256a:	2301      	movhi	r3, #1
 800256c:	2300      	movls	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <_ZN22AltimexStateController12update_stateEd+0x3da>
				{
					currentState = ALTIMEX_CANOPY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2209      	movs	r2, #9
 8002578:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 800257a:	f001 f937 	bl	80037ec <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	639a      	str	r2, [r3, #56]	; 0x38
		deployTestPrevAlt = alt;
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800258a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		{
			StateController_currentState = COLORALTI_STANDBY;
		}
		*/
	}
}
 800258e:	bf00      	nop
 8002590:	3730      	adds	r7, #48	; 0x30
 8002592:	46bd      	mov	sp, r7
 8002594:	bdb0      	pop	{r4, r5, r7, pc}
 8002596:	bf00      	nop
 8002598:	00000000 	.word	0x00000000
 800259c:	40977000 	.word	0x40977000
 80025a0:	408f4000 	.word	0x408f4000
 80025a4:	405d4000 	.word	0x405d4000
 80025a8:	407f4000 	.word	0x407f4000
 80025ac:	40524000 	.word	0x40524000

080025b0 <_ZN13EepromStorageC1EtP17I2C_HandleTypeDef>:

/*
 * Address should be the "base" address of the chip. For example if you provide 0xA0 as the address
 * then the read address will be 0xA0 and the write address will be 0xA1
 */
EepromStorage::EepromStorage(uint16_t _address, I2C_HandleTypeDef* _i2cx):
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	460b      	mov	r3, r1
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	817b      	strh	r3, [r7, #10]
	readAddress(_address),
	writeAddress(_address + 1),
	i2cx(_i2cx)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	897a      	ldrh	r2, [r7, #10]
 80025c2:	805a      	strh	r2, [r3, #2]
	writeAddress(_address + 1),
 80025c4:	897b      	ldrh	r3, [r7, #10]
 80025c6:	3301      	adds	r3, #1
 80025c8:	b29a      	uxth	r2, r3
	i2cx(_i2cx)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	809a      	strh	r2, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	609a      	str	r2, [r3, #8]
{

}
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <_ZN13EepromStorage4readEtjPh>:

HAL_StatusTypeDef EepromStorage::read(uint16_t offset, size_t len, uint8_t* data)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	460b      	mov	r3, r1
 80025ee:	817b      	strh	r3, [r7, #10]
	//HAL_StatusTypeDef read_res = HAL_I2C_Mem_Read(i2cx, 0xA0, offset, 2, data, len, 1000);
	//uint8_t realdata[len];
	HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	75fb      	strb	r3, [r7, #23]
	uint16_t i = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	82bb      	strh	r3, [r7, #20]
	while(i < len) {
 80025f8:	8abb      	ldrh	r3, [r7, #20]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d925      	bls.n	800264c <_ZN13EepromStorage4readEtjPh+0x6c>
		uint8_t read_byte = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	74bb      	strb	r3, [r7, #18]
		HAL_StatusTypeDef read_res = HAL_I2C_Mem_Read(i2cx, readAddress, offset + i, 2, &read_byte, 1, 1000);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6898      	ldr	r0, [r3, #8]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8859      	ldrh	r1, [r3, #2]
 800260c:	897a      	ldrh	r2, [r7, #10]
 800260e:	8abb      	ldrh	r3, [r7, #20]
 8002610:	4413      	add	r3, r2
 8002612:	b29a      	uxth	r2, r3
 8002614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002618:	9302      	str	r3, [sp, #8]
 800261a:	2301      	movs	r3, #1
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	f107 0312 	add.w	r3, r7, #18
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2302      	movs	r3, #2
 8002626:	f002 f899 	bl	800475c <HAL_I2C_Mem_Read>
 800262a:	4603      	mov	r3, r0
 800262c:	74fb      	strb	r3, [r7, #19]
		if(read_res != HAL_OK) {
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <_ZN13EepromStorage4readEtjPh+0x5a>
			status = read_res;
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	75fb      	strb	r3, [r7, #23]
 8002638:	e008      	b.n	800264c <_ZN13EepromStorage4readEtjPh+0x6c>
			break;
		}
		data[i] = read_byte;
 800263a:	8abb      	ldrh	r3, [r7, #20]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	7cba      	ldrb	r2, [r7, #18]
 8002642:	701a      	strb	r2, [r3, #0]
		i++;
 8002644:	8abb      	ldrh	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	82bb      	strh	r3, [r7, #20]
	while(i < len) {
 800264a:	e7d5      	b.n	80025f8 <_ZN13EepromStorage4readEtjPh+0x18>
	}

	HAL_Delay(100);
 800264c:	2064      	movs	r0, #100	; 0x64
 800264e:	f001 f8d7 	bl	8003800 <HAL_Delay>
	return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_ZN8LedStripC1EP17TIM_HandleTypeDef>:
 *      Author: kking
 */

#include <led_strip.h>

LedStrip::LedStrip(TIM_HandleTypeDef* _timer): timer(_timer), controller(new WS2813BController(timer))
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f44f 7025 	mov.w	r0, #660	; 0x294
 8002670:	f005 fc5c 	bl	8007f2c <_Znwj>
 8002674:	4603      	mov	r3, r0
 8002676:	461c      	mov	r4, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	4620      	mov	r0, r4
 8002680:	f000 f9a4 	bl	80029cc <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	605c      	str	r4, [r3, #4]
{

}
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}

08002692 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>:

void LedStrip::progress_bar_single_color(uint8_t num_filled, enum COLOR color)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
 800269e:	4613      	mov	r3, r2
 80026a0:	70bb      	strb	r3, [r7, #2]
	this->clear();
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f81a 	bl	80026dc <_ZN8LedStrip5clearEv>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	d901      	bls.n	80026b2 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x20>
 80026ae:	230a      	movs	r3, #10
 80026b0:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < num_filled; i++) {
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d20a      	bcs.n	80026d4 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x42>
		controller->set_led_from_color_name(i, color);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	7bf9      	ldrb	r1, [r7, #15]
 80026c4:	78ba      	ldrb	r2, [r7, #2]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fb0c 	bl	8002ce4 <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>
	for(uint8_t i = 0; i < num_filled; i++) {
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	3301      	adds	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e7f0      	b.n	80026b6 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x24>
	}
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_ZN8LedStrip5clearEv>:

void LedStrip::clear()
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	controller->clear();
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fb2b 	bl	8002d44 <_ZN17WS2813BController5clearEv>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_ZN8LedStrip4sendEv>:

void LedStrip::send()
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
	controller->send();
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fa0e 	bl	8002b24 <_ZN17WS2813BController4sendEv>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_ZN8LedStrip14set_brightnessEi>:

void LedStrip::set_brightness(int brightness)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	controller->set_brightness(brightness);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f98d 	bl	8002a40 <_ZN17WS2813BController14set_brightnessEi>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>:

UART_HandleTypeDef* STM_USB::uart = 0; //Set STM_USB::uart to dummy value
uint8_t STM_USB::buffer[USB_BUFFER_SIZE] = {'\0'};

void STM_USB::init(UART_HandleTypeDef* _uart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	STM_USB::uart = _uart; //Set STM_USB::uart to actual value
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <_ZN7STM_USB4initEP20__UART_HandleTypeDef+0x24>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(_uart, STM_USB::buffer, USB_BUFFER_SIZE);
 800273e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002742:	4905      	ldr	r1, [pc, #20]	; (8002758 <_ZN7STM_USB4initEP20__UART_HandleTypeDef+0x28>)
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f004 fcb4 	bl	80070b2 <HAL_UART_Receive_DMA>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200001fc 	.word	0x200001fc
 8002758:	20000200 	.word	0x20000200

0800275c <_ZN7STM_USB5printEd>:
	sprintf(charData, "%f", data);
	STM_USB::println(charData);
}

void STM_USB::print(double data)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b092      	sub	sp, #72	; 0x48
 8002760:	af00      	add	r7, sp, #0
 8002762:	e9c7 0100 	strd	r0, r1, [r7]
	char charData[64] = {'\0'};
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	223c      	movs	r2, #60	; 0x3c
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f007 f918 	bl	80099a8 <memset>
	sprintf(charData, "%f", data);
 8002778:	f107 0008 	add.w	r0, r7, #8
 800277c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002780:	4905      	ldr	r1, [pc, #20]	; (8002798 <_ZN7STM_USB5printEd+0x3c>)
 8002782:	f007 fea9 	bl	800a4d8 <siprintf>
	STM_USB::println(charData);
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f87c 	bl	8002888 <_ZN7STM_USB7printlnEPc>
}
 8002790:	bf00      	nop
 8002792:	3748      	adds	r7, #72	; 0x48
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	0800c9d8 	.word	0x0800c9d8

0800279c <_ZN7STM_USB5printEh>:

void STM_USB::print(uint8_t data)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b092      	sub	sp, #72	; 0x48
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
	char charData[64] = {'\0'};
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	223c      	movs	r2, #60	; 0x3c
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f007 f8f8 	bl	80099a8 <memset>
	sprintf(charData, "%d", data);
 80027b8:	79fa      	ldrb	r2, [r7, #7]
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	4906      	ldr	r1, [pc, #24]	; (80027d8 <_ZN7STM_USB5printEh+0x3c>)
 80027c0:	4618      	mov	r0, r3
 80027c2:	f007 fe89 	bl	800a4d8 <siprintf>
	STM_USB::println(charData);
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f85c 	bl	8002888 <_ZN7STM_USB7printlnEPc>
}
 80027d0:	bf00      	nop
 80027d2:	3748      	adds	r7, #72	; 0x48
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	0800c9dc 	.word	0x0800c9dc

080027dc <_ZN7STM_USB5printEt>:

void STM_USB::print(uint16_t data)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b092      	sub	sp, #72	; 0x48
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
	char charData[64] = {'\0'};
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	223c      	movs	r2, #60	; 0x3c
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f007 f8d8 	bl	80099a8 <memset>
	sprintf(charData, "%d", data);
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	4906      	ldr	r1, [pc, #24]	; (8002818 <_ZN7STM_USB5printEt+0x3c>)
 8002800:	4618      	mov	r0, r3
 8002802:	f007 fe69 	bl	800a4d8 <siprintf>
	STM_USB::println(charData);
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f83c 	bl	8002888 <_ZN7STM_USB7printlnEPc>
}
 8002810:	bf00      	nop
 8002812:	3748      	adds	r7, #72	; 0x48
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	0800c9dc 	.word	0x0800c9dc

0800281c <_ZN7STM_USB5printEm>:

void STM_USB::print(uint32_t data)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b092      	sub	sp, #72	; 0x48
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	char charData[64] = {'\0'};
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	223c      	movs	r2, #60	; 0x3c
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f007 f8b9 	bl	80099a8 <memset>
	sprintf(charData, "%d", data);
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4906      	ldr	r1, [pc, #24]	; (8002858 <_ZN7STM_USB5printEm+0x3c>)
 800283e:	4618      	mov	r0, r3
 8002840:	f007 fe4a 	bl	800a4d8 <siprintf>
	STM_USB::println(charData);
 8002844:	f107 0308 	add.w	r3, r7, #8
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f81d 	bl	8002888 <_ZN7STM_USB7printlnEPc>
}
 800284e:	bf00      	nop
 8002850:	3748      	adds	r7, #72	; 0x48
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	0800c9dc 	.word	0x0800c9dc

0800285c <_ZN7STM_USB5printEPc>:

void STM_USB::print(char* data)
{
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(STM_USB::uart, (const uint8_t*)data, strlen(data), 100);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <_ZN7STM_USB5printEPc+0x28>)
 8002866:	681c      	ldr	r4, [r3, #0]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fd fc71 	bl	8000150 <strlen>
 800286e:	4603      	mov	r3, r0
 8002870:	b29a      	uxth	r2, r3
 8002872:	2364      	movs	r3, #100	; 0x64
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4620      	mov	r0, r4
 8002878:	f004 fb98 	bl	8006fac <HAL_UART_Transmit>
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	200001fc 	.word	0x200001fc

08002888 <_ZN7STM_USB7printlnEPc>:

void STM_USB::println(char* data)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	STM_USB::print(data);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ffe3 	bl	800285c <_ZN7STM_USB5printEPc>

	char newline[3] = "\r\n";
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <_ZN7STM_USB7printlnEPc+0x34>)
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	4611      	mov	r1, r2
 80028a0:	8019      	strh	r1, [r3, #0]
 80028a2:	3302      	adds	r3, #2
 80028a4:	0c12      	lsrs	r2, r2, #16
 80028a6:	701a      	strb	r2, [r3, #0]
	STM_USB::print(newline);
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ffd5 	bl	800285c <_ZN7STM_USB5printEPc>
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	0800c9e0 	.word	0x0800c9e0

080028c0 <_ZN7STM_USB6readlnEPc>:

void STM_USB::readln(char* data)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	STM_USB::readto(data, '\n');
 80028c8:	210a      	movs	r1, #10
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f804 	bl	80028d8 <_ZN7STM_USB6readtoEPcc>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZN7STM_USB6readtoEPcc>:

void STM_USB::readto(char* data, char flag)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
	uint16_t i = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	81fb      	strh	r3, [r7, #14]
	char next_char = {'\0'};
 80028e8:	2300      	movs	r3, #0
 80028ea:	737b      	strb	r3, [r7, #13]
	do {
		next_char = read_next();
 80028ec:	f000 f81a 	bl	8002924 <_ZN7STM_USB9read_nextEv>
 80028f0:	4603      	mov	r3, r0
 80028f2:	737b      	strb	r3, [r7, #13]
		data[i] = next_char;
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	7b7a      	ldrb	r2, [r7, #13]
 80028fc:	701a      	strb	r2, [r3, #0]
		i++;
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	3301      	adds	r3, #1
 8002902:	81fb      	strh	r3, [r7, #14]
	} while(i < USB_BUFFER_SIZE && next_char != flag && next_char != '\0');
 8002904:	89fb      	ldrh	r3, [r7, #14]
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d207      	bcs.n	800291c <_ZN7STM_USB6readtoEPcc+0x44>
 800290c:	7b7a      	ldrb	r2, [r7, #13]
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	429a      	cmp	r2, r3
 8002912:	d003      	beq.n	800291c <_ZN7STM_USB6readtoEPcc+0x44>
 8002914:	7b7b      	ldrb	r3, [r7, #13]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d000      	beq.n	800291c <_ZN7STM_USB6readtoEPcc+0x44>
	do {
 800291a:	e7e7      	b.n	80028ec <_ZN7STM_USB6readtoEPcc+0x14>
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_ZN7STM_USB9read_nextEv>:

//Reads the next character from the buffer
char STM_USB::read_next()
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
	char next = STM_USB::buffer[0];
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <_ZN7STM_USB9read_nextEv+0x1c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	71fb      	strb	r3, [r7, #7]
	STM_USB::shift_buffer();
 8002930:	f000 f808 	bl	8002944 <_ZN7STM_USB12shift_bufferEv>
	return next;
 8002934:	79fb      	ldrb	r3, [r7, #7]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000200 	.word	0x20000200

08002944 <_ZN7STM_USB12shift_bufferEv>:

void STM_USB::shift_buffer()
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	80fb      	strh	r3, [r7, #6]
	while(i < USB_BUFFER_SIZE - 1) {
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002954:	4293      	cmp	r3, r2
 8002956:	d80a      	bhi.n	800296e <_ZN7STM_USB12shift_bufferEv+0x2a>
		STM_USB::buffer[i] = STM_USB::buffer[i + 1];
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <_ZN7STM_USB12shift_bufferEv+0x3c>)
 8002960:	5c89      	ldrb	r1, [r1, r2]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <_ZN7STM_USB12shift_bufferEv+0x3c>)
 8002964:	54d1      	strb	r1, [r2, r3]
		i++;
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	3301      	adds	r3, #1
 800296a:	80fb      	strh	r3, [r7, #6]
	while(i < USB_BUFFER_SIZE - 1) {
 800296c:	e7ef      	b.n	800294e <_ZN7STM_USB12shift_bufferEv+0xa>
	}
	STM_USB::buffer[USB_BUFFER_SIZE - 1] = {'\0'};
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <_ZN7STM_USB12shift_bufferEv+0x3c>)
 8002970:	2200      	movs	r2, #0
 8002972:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20000200 	.word	0x20000200

08002984 <_ZN7STM_USB10data_readyEv>:
{
	return get_buffer_size() >= USB_BUFFER_SIZE;
}

bool STM_USB::data_ready()
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	return get_buffer_size() > 0;
 8002988:	f000 f808 	bl	800299c <_ZN7STM_USB15get_buffer_sizeEv>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}

0800299c <_ZN7STM_USB15get_buffer_sizeEv>:

uint16_t STM_USB::get_buffer_size()
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	return strlen((const char*)STM_USB::buffer);
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <_ZN7STM_USB15get_buffer_sizeEv+0x14>)
 80029a2:	f7fd fbd5 	bl	8000150 <strlen>
 80029a6:	4603      	mov	r3, r0
 80029a8:	b29b      	uxth	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000200 	.word	0x20000200

080029b4 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f005 facf 	bl	8007f60 <tanf>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>:
*/

TIM_HandleTypeDef* WS2813BController::timer = 0ull;
bool WS2813BController::data_sent_flag = false;

WS2813BController::WS2813BController(TIM_HandleTypeDef* _timer)
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
{
	WS2813BController::timer = _timer;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef+0x1c>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000600 	.word	0x20000600

080029ec <_ZN17WS2813BController7set_ledEiiii>:

void WS2813BController::set_led (int LEDnum, int Red, int Green, int Blue)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	b2d9      	uxtb	r1, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2d9      	uxtb	r1, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	460a      	mov	r2, r1
 8002a14:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	b2d9      	uxtb	r1, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	460a      	mov	r2, r1
 8002a24:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	b2d9      	uxtb	r1, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	460a      	mov	r2, r1
 8002a34:	70da      	strb	r2, [r3, #3]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <_ZN17WS2813BController14set_brightnessEi>:

#define PI 3.14159265

void WS2813BController::set_brightness (int brightness)  // 0-45
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b2d      	cmp	r3, #45	; 0x2d
 8002a4e:	dd01      	ble.n	8002a54 <_ZN17WS2813BController14set_brightnessEi+0x14>
 8002a50:	232d      	movs	r3, #45	; 0x2d
 8002a52:	603b      	str	r3, [r7, #0]
	for (int i=0; i<MAX_LED; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	dc58      	bgt.n	8002b10 <_ZN17WS2813BController14set_brightnessEi+0xd0>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	320a      	adds	r2, #10
 8002a6c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		for (int j=1; j<4; j++)
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	dc46      	bgt.n	8002b08 <_ZN17WS2813BController14set_brightnessEi+0xc8>
		{
			float angle = 90-brightness;  // in degrees
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe f92b 	bl	8000cdc <__aeabi_i2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7fd fccc 	bl	8000428 <__aeabi_f2d>
 8002a90:	a321      	add	r3, pc, #132	; (adr r3, 8002b18 <_ZN17WS2813BController14set_brightnessEi+0xd8>)
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f7fd fd1f 	bl	80004d8 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <_ZN17WS2813BController14set_brightnessEi+0xe0>)
 8002aa8:	f7fd fe40 	bl	800072c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f808 	bl	8000ac8 <__aeabi_d2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	441a      	add	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f906 	bl	8000cdc <__aeabi_i2f>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff ff6e 	bl	80029b4 <_ZSt3tanf>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4619      	mov	r1, r3
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7fe fa05 	bl	8000eec <__aeabi_fdiv>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fb39 	bl	800115c <__aeabi_f2uiz>
 8002aea:	4603      	mov	r3, r0
 8002aec:	b2d9      	uxtb	r1, r3
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	441a      	add	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	3328      	adds	r3, #40	; 0x28
 8002afc:	460a      	mov	r2, r1
 8002afe:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	3301      	adds	r3, #1
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e7b5      	b.n	8002a74 <_ZN17WS2813BController14set_brightnessEi+0x34>
	for (int i=0; i<MAX_LED; i++)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e7a3      	b.n	8002a58 <_ZN17WS2813BController14set_brightnessEi+0x18>
		}
	}

#endif

}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd90      	pop	{r4, r7, pc}
 8002b18:	53c8d4f1 	.word	0x53c8d4f1
 8002b1c:	400921fb 	.word	0x400921fb
 8002b20:	40668000 	.word	0x40668000

08002b24 <_ZN17WS2813BController4sendEv>:

void WS2813BController::send ()
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	uint32_t indx=0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	dc3c      	bgt.n	8002bb4 <_ZN17WS2813BController4sendEv+0x90>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	431a      	orrs	r2, r3
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8002b68:	2317      	movs	r3, #23
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db1c      	blt.n	8002bac <_ZN17WS2813BController4sendEv+0x88>
		{
			if (color&(1<<i))
 8002b72:	2201      	movs	r2, #1
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <_ZN17WS2813BController4sendEv+0x6e>
			{
				pwmData[indx] = 48;  // 75% of 64
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	3228      	adds	r2, #40	; 0x28
 8002b8a:	2130      	movs	r1, #48	; 0x30
 8002b8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002b90:	e005      	b.n	8002b9e <_ZN17WS2813BController4sendEv+0x7a>
			}

			else pwmData[indx] = 20;  // ~30% of 64
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	3228      	adds	r2, #40	; 0x28
 8002b98:	2114      	movs	r1, #20
 8002b9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			indx++;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e7df      	b.n	8002b6c <_ZN17WS2813BController4sendEv+0x48>
	for (int i= 0; i<MAX_LED; i++)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e7bf      	b.n	8002b34 <_ZN17WS2813BController4sendEv+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b31      	cmp	r3, #49	; 0x31
 8002bbc:	dc0c      	bgt.n	8002bd8 <_ZN17WS2813BController4sendEv+0xb4>
	{
		pwmData[indx] = 0;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	3228      	adds	r2, #40	; 0x28
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e7ef      	b.n	8002bb8 <_ZN17WS2813BController4sendEv+0x94>
	}

	HAL_TIM_PWM_Start_DMA(timer, TIM_CHANNEL_2, (uint32_t *)pwmData, indx);
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <_ZN17WS2813BController4sendEv+0xe0>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2104      	movs	r1, #4
 8002be8:	f003 f9ba 	bl	8005f60 <HAL_TIM_PWM_Start_DMA>
	while (!data_sent_flag){};
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <_ZN17WS2813BController4sendEv+0xe4>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d100      	bne.n	8002bf6 <_ZN17WS2813BController4sendEv+0xd2>
 8002bf4:	e7fa      	b.n	8002bec <_ZN17WS2813BController4sendEv+0xc8>
	data_sent_flag = false;
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <_ZN17WS2813BController4sendEv+0xe4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000600 	.word	0x20000600
 8002c08:	20000604 	.word	0x20000604

08002c0c <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>:

void WS2813BController::color_to_rgb(struct RGB* rgb, enum COLOR color)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	71fb      	strb	r3, [r7, #7]
	if(color == GREEN) {
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d108      	bne.n	8002c32 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x26>
		rgb->r = 0;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2214      	movs	r2, #20
 8002c30:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d108      	bne.n	8002c4a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x3e>
		rgb->r = 255;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d108      	bne.n	8002c62 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x56>
		rgb->r = 255;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d108      	bne.n	8002c7a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x6e>
		rgb->r = 255;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d108      	bne.n	8002c92 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x86>
		rgb->r = 0;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	22ff      	movs	r2, #255	; 0xff
 8002c8a:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	22c8      	movs	r2, #200	; 0xc8
 8002c90:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d108      	bne.n	8002caa <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x9e>
		rgb->r = 0;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	709a      	strb	r2, [r3, #2]
	}
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>:

void WS2813BController::set_led_from_rgb(int LEDnum, struct RGB* rgb)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
	set_led(LEDnum, rgb->r, rgb->g, rgb->b);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	789b      	ldrb	r3, [r3, #2]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff fe88 	bl	80029ec <_ZN17WS2813BController7set_ledEiiii>
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>:

void WS2813BController::set_led_from_color_name(int LEDnum, enum COLOR color)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	71fb      	strb	r3, [r7, #7]
	struct RGB rgb;
	color_to_rgb(&rgb, color);
 8002cf2:	79fa      	ldrb	r2, [r7, #7]
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff ff86 	bl	8002c0c <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>
	set_led_from_rgb(LEDnum, &rgb);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	461a      	mov	r2, r3
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff ffd3 	bl	8002cb4 <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(WS2813BController::timer, TIM_CHANNEL_2);
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2104      	movs	r1, #4
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fabc 	bl	80062a4 <HAL_TIM_PWM_Stop_DMA>
	WS2813BController::data_sent_flag = true;
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000600 	.word	0x20000600
 8002d40:	20000604 	.word	0x20000604

08002d44 <_ZN17WS2813BController5clearEv>:

void WS2813BController::clear()
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MAX_LED; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b09      	cmp	r3, #9
 8002d54:	d809      	bhi.n	8002d6a <_ZN17WS2813BController5clearEv+0x26>
	{
		set_led_from_color_name(i, CLEAR);
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2205      	movs	r2, #5
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffc1 	bl	8002ce4 <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>
	for(uint8_t i = 0; i < MAX_LED; i++)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e7f2      	b.n	8002d50 <_ZN17WS2813BController5clearEv+0xc>
	}
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d7a:	f000 fcdf 	bl	800373c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d7e:	f000 f823 	bl	8002dc8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d82:	f000 f9f3 	bl	800316c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002d86:	f000 f9cb 	bl	8003120 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002d8a:	f000 f869 	bl	8002e60 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002d8e:	f000 f8fb 	bl	8002f88 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8002d92:	f000 f899 	bl	8002ec8 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8002d96:	f000 f995 	bl	80030c4 <_ZL19MX_USART1_UART_Initv>
	config.gearCheckAlt = 10000.0;             //The altitude that the gear check notification is given
	config.brightness = 20;                    //LED brightness
	config.standbyBrightness = 5;              //Brightness of LEDS while in standby mode
   */

	Altimex* altimex = new Altimex(&huart1, &hi2c1, &htim2);
 8002d9a:	2078      	movs	r0, #120	; 0x78
 8002d9c:	f005 f8c6 	bl	8007f2c <_Znwj>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461c      	mov	r4, r3
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <main+0x48>)
 8002da6:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <main+0x4c>)
 8002da8:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <main+0x50>)
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7fe fca2 	bl	80016f4 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDef>
 8002db0:	607c      	str	r4, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  altimex->tick();
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fdcc 	bl	8001950 <_ZN7Altimex4tickEv>
 8002db8:	e7fb      	b.n	8002db2 <main+0x3e>
 8002dba:	bf00      	nop
 8002dbc:	200006a4 	.word	0x200006a4
 8002dc0:	20000608 	.word	0x20000608
 8002dc4:	20000730 	.word	0x20000730

08002dc8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b090      	sub	sp, #64	; 0x40
 8002dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dce:	f107 0318 	add.w	r3, r7, #24
 8002dd2:	2228      	movs	r2, #40	; 0x28
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f006 fde6 	bl	80099a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dea:	2302      	movs	r3, #2
 8002dec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dee:	2301      	movs	r3, #1
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002df2:	2310      	movs	r3, #16
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df6:	2302      	movs	r3, #2
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002dfe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e04:	f107 0318 	add.w	r3, r7, #24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 fbf1 	bl	80055f0 <HAL_RCC_OscConfig>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8002e1e:	f000 f9e5 	bl	80031ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e22:	230f      	movs	r3, #15
 8002e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e26:	2302      	movs	r3, #2
 8002e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fe59 	bl	8005af4 <HAL_RCC_ClockConfig>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8002e52:	f000 f9cb 	bl	80031ec <Error_Handler>
  }
}
 8002e56:	bf00      	nop
 8002e58:	3740      	adds	r7, #64	; 0x40
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <_ZL12MX_I2C1_Initv+0x60>)
 8002e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e6c:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <_ZL12MX_I2C1_Initv+0x64>)
 8002e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e9c:	4807      	ldr	r0, [pc, #28]	; (8002ebc <_ZL12MX_I2C1_Initv+0x5c>)
 8002e9e:	f001 fa1f 	bl	80042e0 <HAL_I2C_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002eb2:	f000 f99b 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000608 	.word	0x20000608
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	000186a0 	.word	0x000186a0

08002ec8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ece:	f107 0308 	add.w	r3, r7, #8
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002edc:	463b      	mov	r3, r7
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002ee6:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <_ZL12MX_TIM1_Initv+0xbc>)
 8002ee8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002eec:	2203      	movs	r2, #3
 8002eee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f10:	481b      	ldr	r0, [pc, #108]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002f12:	f002 ff7d 	bl	8005e10 <HAL_TIM_Base_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002f26:	f000 f961 	bl	80031ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	4619      	mov	r1, r3
 8002f36:	4812      	ldr	r0, [pc, #72]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002f38:	f003 fb3c 	bl	80065b4 <HAL_TIM_ConfigClockSource>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bf14      	ite	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	2300      	moveq	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002f4c:	f000 f94e 	bl	80031ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f58:	463b      	mov	r3, r7
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4808      	ldr	r0, [pc, #32]	; (8002f80 <_ZL12MX_TIM1_Initv+0xb8>)
 8002f5e:	f003 ff77 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002f72:	f000 f93b 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	2000065c 	.word	0x2000065c
 8002f84:	40012c00 	.word	0x40012c00

08002f88 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08e      	sub	sp, #56	; 0x38
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9c:	f107 0320 	add.w	r3, r7, #32
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
 8002fb4:	615a      	str	r2, [r3, #20]
 8002fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fb8:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8002fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc6:	4b3e      	ldr	r3, [pc, #248]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8002fce:	223f      	movs	r2, #63	; 0x3f
 8002fd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fde:	4838      	ldr	r0, [pc, #224]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8002fe0:	f002 ff16 	bl	8005e10 <HAL_TIM_Base_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8002ff4:	f000 f8fa 	bl	80031ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003002:	4619      	mov	r1, r3
 8003004:	482e      	ldr	r0, [pc, #184]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8003006:	f003 fad5 	bl	80065b4 <HAL_TIM_ConfigClockSource>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 800301a:	f000 f8e7 	bl	80031ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800301e:	4828      	ldr	r0, [pc, #160]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8003020:	f002 ff45 	bl	8005eae <HAL_TIM_PWM_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8003034:	f000 f8da 	bl	80031ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003040:	f107 0320 	add.w	r3, r7, #32
 8003044:	4619      	mov	r1, r3
 8003046:	481e      	ldr	r0, [pc, #120]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8003048:	f003 ff02 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 800305c:	f000 f8c6 	bl	80031ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003060:	2360      	movs	r3, #96	; 0x60
 8003062:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	2200      	movs	r2, #0
 8003074:	4619      	mov	r1, r3
 8003076:	4812      	ldr	r0, [pc, #72]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8003078:	f003 f9da 	bl	8006430 <HAL_TIM_PWM_ConfigChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 800308c:	f000 f8ae 	bl	80031ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	2204      	movs	r2, #4
 8003094:	4619      	mov	r1, r3
 8003096:	480a      	ldr	r0, [pc, #40]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 8003098:	f003 f9ca 	bl	8006430 <HAL_TIM_PWM_ConfigChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <_ZL12MX_TIM2_Initv+0x128>
  {
    Error_Handler();
 80030ac:	f000 f89e 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <_ZL12MX_TIM2_Initv+0x138>)
 80030b2:	f000 f963 	bl	800337c <HAL_TIM_MspPostInit>

}
 80030b6:	bf00      	nop
 80030b8:	3738      	adds	r7, #56	; 0x38
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200006a4 	.word	0x200006a4

080030c4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030ca:	4a14      	ldr	r2, [pc, #80]	; (800311c <_ZL19MX_USART1_UART_Initv+0x58>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030fa:	4807      	ldr	r0, [pc, #28]	; (8003118 <_ZL19MX_USART1_UART_Initv+0x54>)
 80030fc:	f003 ff06 	bl	8006f0c <HAL_UART_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003110:	f000 f86c 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000730 	.word	0x20000730
 800311c:	40013800 	.word	0x40013800

08003120 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <_ZL11MX_DMA_Initv+0x48>)
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <_ZL11MX_DMA_Initv+0x48>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6153      	str	r3, [r2, #20]
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <_ZL11MX_DMA_Initv+0x48>)
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2100      	movs	r1, #0
 8003142:	200f      	movs	r0, #15
 8003144:	f000 fc57 	bl	80039f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003148:	200f      	movs	r0, #15
 800314a:	f000 fc70 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	2011      	movs	r0, #17
 8003154:	f000 fc4f 	bl	80039f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003158:	2011      	movs	r0, #17
 800315a:	f000 fc68 	bl	8003a2e <HAL_NVIC_EnableIRQ>

}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000

0800316c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <_ZL12MX_GPIO_Initv+0x78>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <_ZL12MX_GPIO_Initv+0x78>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <_ZL12MX_GPIO_Initv+0x78>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <_ZL12MX_GPIO_Initv+0x78>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <_ZL12MX_GPIO_Initv+0x78>)
 800319e:	f043 0308 	orr.w	r3, r3, #8
 80031a2:	6193      	str	r3, [r2, #24]
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <_ZL12MX_GPIO_Initv+0x78>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80031b0:	2200      	movs	r2, #0
 80031b2:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80031b6:	480c      	ldr	r0, [pc, #48]	; (80031e8 <_ZL12MX_GPIO_Initv+0x7c>)
 80031b8:	f001 f87a 	bl	80042b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80031bc:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80031c0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c2:	2301      	movs	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2302      	movs	r3, #2
 80031cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	4619      	mov	r1, r3
 80031d4:	4804      	ldr	r0, [pc, #16]	; (80031e8 <_ZL12MX_GPIO_Initv+0x7c>)
 80031d6:	f000 fee7 	bl	8003fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40010c00 	.word	0x40010c00

080031ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031f0:	b672      	cpsid	i
}
 80031f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <Error_Handler+0x8>
	...

080031f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_MspInit+0x40>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_MspInit+0x40>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6193      	str	r3, [r2, #24]
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_MspInit+0x40>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_MspInit+0x40>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_MspInit+0x40>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003220:	61d3      	str	r3, [r2, #28]
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_MspInit+0x40>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	40021000 	.word	0x40021000

0800323c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0310 	add.w	r3, r7, #16
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HAL_I2C_MspInit+0x70>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d123      	bne.n	80032a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <HAL_I2C_MspInit+0x74>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <HAL_I2C_MspInit+0x74>)
 8003262:	f043 0308 	orr.w	r3, r3, #8
 8003266:	6193      	str	r3, [r2, #24]
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_I2C_MspInit+0x74>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003274:	23c0      	movs	r3, #192	; 0xc0
 8003276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003278:	2312      	movs	r3, #18
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800327c:	2303      	movs	r3, #3
 800327e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003280:	f107 0310 	add.w	r3, r7, #16
 8003284:	4619      	mov	r1, r3
 8003286:	480b      	ldr	r0, [pc, #44]	; (80032b4 <HAL_I2C_MspInit+0x78>)
 8003288:	f000 fe8e 	bl	8003fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_I2C_MspInit+0x74>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_I2C_MspInit+0x74>)
 8003292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003296:	61d3      	str	r3, [r2, #28]
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_I2C_MspInit+0x74>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032a4:	bf00      	nop
 80032a6:	3720      	adds	r7, #32
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40005400 	.word	0x40005400
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40010c00 	.word	0x40010c00

080032b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a29      	ldr	r2, [pc, #164]	; (800336c <HAL_TIM_Base_MspInit+0xb4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ca:	4b29      	ldr	r3, [pc, #164]	; (8003370 <HAL_TIM_Base_MspInit+0xb8>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	4a28      	ldr	r2, [pc, #160]	; (8003370 <HAL_TIM_Base_MspInit+0xb8>)
 80032d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d4:	6193      	str	r3, [r2, #24]
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_TIM_Base_MspInit+0xb8>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032e2:	e03e      	b.n	8003362 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ec:	d139      	bne.n	8003362 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_TIM_Base_MspInit+0xb8>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_TIM_Base_MspInit+0xb8>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	61d3      	str	r3, [r2, #28]
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_TIM_Base_MspInit+0xb8>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_TIM_Base_MspInit+0xc0>)
 800330a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 800330e:	2210      	movs	r2, #16
 8003310:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003312:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 8003320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003324:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 8003328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800333a:	480e      	ldr	r0, [pc, #56]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 800333c:	f000 fb92 	bl	8003a64 <HAL_DMA_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8003346:	f7ff ff51 	bl	80031ec <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a06      	ldr	r2, [pc, #24]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
 800335c:	4a05      	ldr	r2, [pc, #20]	; (8003374 <HAL_TIM_Base_MspInit+0xbc>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40021000 	.word	0x40021000
 8003374:	200006ec 	.word	0x200006ec
 8003378:	40020080 	.word	0x40020080

0800337c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d117      	bne.n	80033cc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_TIM_MspPostInit+0x58>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_TIM_MspPostInit+0x58>)
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	6193      	str	r3, [r2, #24]
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_TIM_MspPostInit+0x58>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033b4:	2303      	movs	r3, #3
 80033b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033bc:	2302      	movs	r3, #2
 80033be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c0:	f107 0310 	add.w	r3, r7, #16
 80033c4:	4619      	mov	r1, r3
 80033c6:	4804      	ldr	r0, [pc, #16]	; (80033d8 <HAL_TIM_MspPostInit+0x5c>)
 80033c8:	f000 fdee 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033cc:	bf00      	nop
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010800 	.word	0x40010800

080033dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <HAL_UART_MspInit+0xe8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d15f      	bne.n	80034bc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033fc:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_UART_MspInit+0xec>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a31      	ldr	r2, [pc, #196]	; (80034c8 <HAL_UART_MspInit+0xec>)
 8003402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <HAL_UART_MspInit+0xec>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003414:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <HAL_UART_MspInit+0xec>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_UART_MspInit+0xec>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_UART_MspInit+0xec>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800342c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003430:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003436:	2303      	movs	r3, #3
 8003438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0310 	add.w	r3, r7, #16
 800343e:	4619      	mov	r1, r3
 8003440:	4822      	ldr	r0, [pc, #136]	; (80034cc <HAL_UART_MspInit+0xf0>)
 8003442:	f000 fdb1 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	4619      	mov	r1, r3
 800345a:	481c      	ldr	r0, [pc, #112]	; (80034cc <HAL_UART_MspInit+0xf0>)
 800345c:	f000 fda4 	bl	8003fa8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_UART_MspInit+0xf8>)
 8003464:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 8003486:	2200      	movs	r2, #0
 8003488:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 800348c:	2200      	movs	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003490:	480f      	ldr	r0, [pc, #60]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 8003492:	f000 fae7 	bl	8003a64 <HAL_DMA_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800349c:	f7ff fea6 	bl	80031ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <HAL_UART_MspInit+0xf4>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	2025      	movs	r0, #37	; 0x25
 80034b2:	f000 faa0 	bl	80039f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034b6:	2025      	movs	r0, #37	; 0x25
 80034b8:	f000 fab9 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034bc:	bf00      	nop
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40010800 	.word	0x40010800
 80034d0:	20000778 	.word	0x20000778
 80034d4:	40020058 	.word	0x40020058

080034d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034dc:	e7fe      	b.n	80034dc <NMI_Handler+0x4>

080034de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e2:	e7fe      	b.n	80034e2 <HardFault_Handler+0x4>

080034e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <MemManage_Handler+0x4>

080034ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ee:	e7fe      	b.n	80034ee <BusFault_Handler+0x4>

080034f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <UsageFault_Handler+0x4>

080034f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800351e:	f000 f953 	bl	80037c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <DMA1_Channel5_IRQHandler+0x10>)
 800352e:	f000 fc07 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000778 	.word	0x20000778

0800353c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA1_Channel7_IRQHandler+0x10>)
 8003542:	f000 fbfd 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200006ec 	.word	0x200006ec

08003550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <USART1_IRQHandler+0x10>)
 8003556:	f003 fdd1 	bl	80070fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000730 	.word	0x20000730

08003564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return 1;
 8003568:	2301      	movs	r3, #1
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <_kill>:

int _kill(int pid, int sig)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800357c:	f006 f9d4 	bl	8009928 <__errno>
 8003580:	4603      	mov	r3, r0
 8003582:	2216      	movs	r2, #22
 8003584:	601a      	str	r2, [r3, #0]
  return -1;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <_exit>:

void _exit (int status)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800359a:	f04f 31ff 	mov.w	r1, #4294967295
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffe7 	bl	8003572 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035a4:	e7fe      	b.n	80035a4 <_exit+0x12>

080035a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e00a      	b.n	80035ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035b8:	f3af 8000 	nop.w
 80035bc:	4601      	mov	r1, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	60ba      	str	r2, [r7, #8]
 80035c4:	b2ca      	uxtb	r2, r1
 80035c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3301      	adds	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	dbf0      	blt.n	80035b8 <_read+0x12>
  }

  return len;
 80035d6:	687b      	ldr	r3, [r7, #4]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e009      	b.n	8003606 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	60ba      	str	r2, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	429a      	cmp	r2, r3
 800360c:	dbf1      	blt.n	80035f2 <_write+0x12>
  }
  return len;
 800360e:	687b      	ldr	r3, [r7, #4]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_close>:

int _close(int file)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800363e:	605a      	str	r2, [r3, #4]
  return 0;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <_isatty>:

int _isatty(int file)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003654:	2301      	movs	r3, #1
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003680:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <_sbrk+0x5c>)
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <_sbrk+0x60>)
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <_sbrk+0x64>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <_sbrk+0x64>)
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <_sbrk+0x68>)
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <_sbrk+0x64>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a8:	f006 f93e 	bl	8009928 <__errno>
 80036ac:	4603      	mov	r3, r0
 80036ae:	220c      	movs	r2, #12
 80036b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
 80036b6:	e009      	b.n	80036cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <_sbrk+0x64>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <_sbrk+0x64>)
 80036c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20005000 	.word	0x20005000
 80036d8:	00000400 	.word	0x00000400
 80036dc:	200007bc 	.word	0x200007bc
 80036e0:	200007d8 	.word	0x200007d8

080036e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036f0:	f7ff fff8 	bl	80036e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036f4:	480b      	ldr	r0, [pc, #44]	; (8003724 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036f6:	490c      	ldr	r1, [pc, #48]	; (8003728 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <LoopFillZerobss+0x16>)
  movs r3, #0
 80036fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036fc:	e002      	b.n	8003704 <LoopCopyDataInit>

080036fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003702:	3304      	adds	r3, #4

08003704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003708:	d3f9      	bcc.n	80036fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800370c:	4c09      	ldr	r4, [pc, #36]	; (8003734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003710:	e001      	b.n	8003716 <LoopFillZerobss>

08003712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003714:	3204      	adds	r2, #4

08003716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003718:	d3fb      	bcc.n	8003712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800371a:	f006 f90b 	bl	8009934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800371e:	f7ff fb29 	bl	8002d74 <main>
  bx lr
 8003722:	4770      	bx	lr
  ldr r0, =_sdata
 8003724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003728:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800372c:	0800d1f4 	.word	0x0800d1f4
  ldr r2, =_sbss
 8003730:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003734:	200007d8 	.word	0x200007d8

08003738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003738:	e7fe      	b.n	8003738 <ADC1_2_IRQHandler>
	...

0800373c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_Init+0x28>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a07      	ldr	r2, [pc, #28]	; (8003764 <HAL_Init+0x28>)
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800374c:	2003      	movs	r0, #3
 800374e:	f000 f947 	bl	80039e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003752:	200f      	movs	r0, #15
 8003754:	f000 f808 	bl	8003768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003758:	f7ff fd4e 	bl	80031f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40022000 	.word	0x40022000

08003768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003770:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_InitTick+0x54>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_InitTick+0x58>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4619      	mov	r1, r3
 800377a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f95f 	bl	8003a4a <HAL_SYSTICK_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e00e      	b.n	80037b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b0f      	cmp	r3, #15
 800379a:	d80a      	bhi.n	80037b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800379c:	2200      	movs	r2, #0
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	f000 f927 	bl	80039f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037a8:	4a06      	ldr	r2, [pc, #24]	; (80037c4 <HAL_InitTick+0x5c>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000000 	.word	0x20000000
 80037c0:	20000008 	.word	0x20000008
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_IncTick+0x1c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_IncTick+0x20>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4413      	add	r3, r2
 80037d8:	4a03      	ldr	r2, [pc, #12]	; (80037e8 <HAL_IncTick+0x20>)
 80037da:	6013      	str	r3, [r2, #0]
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	20000008 	.word	0x20000008
 80037e8:	200007c0 	.word	0x200007c0

080037ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return uwTick;
 80037f0:	4b02      	ldr	r3, [pc, #8]	; (80037fc <HAL_GetTick+0x10>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	200007c0 	.word	0x200007c0

08003800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7ff fff0 	bl	80037ec <HAL_GetTick>
 800380c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d005      	beq.n	8003826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_Delay+0x44>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003826:	bf00      	nop
 8003828:	f7ff ffe0 	bl	80037ec <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	429a      	cmp	r2, r3
 8003836:	d8f7      	bhi.n	8003828 <HAL_Delay+0x28>
  {
  }
}
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000008 	.word	0x20000008

08003848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	60d3      	str	r3, [r2, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0307 	and.w	r3, r3, #7
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db0b      	blt.n	80038d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4906      	ldr	r1, [pc, #24]	; (80038e0 <__NVIC_EnableIRQ+0x34>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2001      	movs	r0, #1
 80038ce:	fa00 f202 	lsl.w	r2, r0, r2
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100

080038e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	db0a      	blt.n	800390e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <__NVIC_SetPriority+0x4c>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	440b      	add	r3, r1
 8003908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800390c:	e00a      	b.n	8003924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	4908      	ldr	r1, [pc, #32]	; (8003934 <__NVIC_SetPriority+0x50>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3b04      	subs	r3, #4
 800391c:	0112      	lsls	r2, r2, #4
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	440b      	add	r3, r1
 8003922:	761a      	strb	r2, [r3, #24]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000e100 	.word	0xe000e100
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f1c3 0307 	rsb	r3, r3, #7
 8003952:	2b04      	cmp	r3, #4
 8003954:	bf28      	it	cs
 8003956:	2304      	movcs	r3, #4
 8003958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3304      	adds	r3, #4
 800395e:	2b06      	cmp	r3, #6
 8003960:	d902      	bls.n	8003968 <NVIC_EncodePriority+0x30>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3b03      	subs	r3, #3
 8003966:	e000      	b.n	800396a <NVIC_EncodePriority+0x32>
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	f04f 32ff 	mov.w	r2, #4294967295
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	401a      	ands	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003980:	f04f 31ff 	mov.w	r1, #4294967295
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	43d9      	mvns	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	4313      	orrs	r3, r2
         );
}
 8003992:	4618      	mov	r0, r3
 8003994:	3724      	adds	r7, #36	; 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ac:	d301      	bcc.n	80039b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00f      	b.n	80039d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <SysTick_Config+0x40>)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ba:	210f      	movs	r1, #15
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	f7ff ff90 	bl	80038e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <SysTick_Config+0x40>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ca:	4b04      	ldr	r3, [pc, #16]	; (80039dc <SysTick_Config+0x40>)
 80039cc:	2207      	movs	r2, #7
 80039ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	e000e010 	.word	0xe000e010

080039e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff2d 	bl	8003848 <__NVIC_SetPriorityGrouping>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a08:	f7ff ff42 	bl	8003890 <__NVIC_GetPriorityGrouping>
 8003a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f7ff ff90 	bl	8003938 <NVIC_EncodePriority>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff5f 	bl	80038e4 <__NVIC_SetPriority>
}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff35 	bl	80038ac <__NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ffa2 	bl	800399c <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e043      	b.n	8003b02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_DMA_Init+0xa8>)
 8003a82:	4413      	add	r3, r2
 8003a84:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <HAL_DMA_Init+0xac>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	009a      	lsls	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <HAL_DMA_Init+0xb0>)
 8003a96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003aae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ab2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	bffdfff8 	.word	0xbffdfff8
 8003b10:	cccccccd 	.word	0xcccccccd
 8003b14:	40020000 	.word	0x40020000

08003b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_DMA_Start_IT+0x20>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e04b      	b.n	8003bd0 <HAL_DMA_Start_IT+0xb8>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d13a      	bne.n	8003bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f9eb 	bl	8003f4c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 020e 	orr.w	r2, r2, #14
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e00f      	b.n	8003bb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0204 	bic.w	r2, r2, #4
 8003b9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 020a 	orr.w	r2, r2, #10
 8003bae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e005      	b.n	8003bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d008      	beq.n	8003c02 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e020      	b.n	8003c44 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 020e 	bic.w	r2, r2, #14
 8003c10:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d005      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	e051      	b.n	8003d18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 020e 	bic.w	r2, r2, #14
 8003c82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_DMA_Abort_IT+0xd4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d029      	beq.n	8003cf2 <HAL_DMA_Abort_IT+0xa2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <HAL_DMA_Abort_IT+0xd8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <HAL_DMA_Abort_IT+0x9e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_DMA_Abort_IT+0xdc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01a      	beq.n	8003ce8 <HAL_DMA_Abort_IT+0x98>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <HAL_DMA_Abort_IT+0xe0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d012      	beq.n	8003ce2 <HAL_DMA_Abort_IT+0x92>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_DMA_Abort_IT+0xe4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00a      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x8c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_DMA_Abort_IT+0xe8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d102      	bne.n	8003cd6 <HAL_DMA_Abort_IT+0x86>
 8003cd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cd4:	e00e      	b.n	8003cf4 <HAL_DMA_Abort_IT+0xa4>
 8003cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cda:	e00b      	b.n	8003cf4 <HAL_DMA_Abort_IT+0xa4>
 8003cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ce0:	e008      	b.n	8003cf4 <HAL_DMA_Abort_IT+0xa4>
 8003ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce6:	e005      	b.n	8003cf4 <HAL_DMA_Abort_IT+0xa4>
 8003ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cec:	e002      	b.n	8003cf4 <HAL_DMA_Abort_IT+0xa4>
 8003cee:	2310      	movs	r3, #16
 8003cf0:	e000      	b.n	8003cf4 <HAL_DMA_Abort_IT+0xa4>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_DMA_Abort_IT+0xec>)
 8003cf6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
    } 
  }
  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40020008 	.word	0x40020008
 8003d28:	4002001c 	.word	0x4002001c
 8003d2c:	40020030 	.word	0x40020030
 8003d30:	40020044 	.word	0x40020044
 8003d34:	40020058 	.word	0x40020058
 8003d38:	4002006c 	.word	0x4002006c
 8003d3c:	40020000 	.word	0x40020000

08003d40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d04f      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc8>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d04a      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0204 	bic.w	r2, r2, #4
 8003d8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a66      	ldr	r2, [pc, #408]	; (8003f30 <HAL_DMA_IRQHandler+0x1f0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d029      	beq.n	8003dee <HAL_DMA_IRQHandler+0xae>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a65      	ldr	r2, [pc, #404]	; (8003f34 <HAL_DMA_IRQHandler+0x1f4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d022      	beq.n	8003dea <HAL_DMA_IRQHandler+0xaa>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a63      	ldr	r2, [pc, #396]	; (8003f38 <HAL_DMA_IRQHandler+0x1f8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01a      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xa4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a62      	ldr	r2, [pc, #392]	; (8003f3c <HAL_DMA_IRQHandler+0x1fc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d012      	beq.n	8003dde <HAL_DMA_IRQHandler+0x9e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a60      	ldr	r2, [pc, #384]	; (8003f40 <HAL_DMA_IRQHandler+0x200>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x98>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5f      	ldr	r2, [pc, #380]	; (8003f44 <HAL_DMA_IRQHandler+0x204>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d102      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x92>
 8003dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dd0:	e00e      	b.n	8003df0 <HAL_DMA_IRQHandler+0xb0>
 8003dd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dd6:	e00b      	b.n	8003df0 <HAL_DMA_IRQHandler+0xb0>
 8003dd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ddc:	e008      	b.n	8003df0 <HAL_DMA_IRQHandler+0xb0>
 8003dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de2:	e005      	b.n	8003df0 <HAL_DMA_IRQHandler+0xb0>
 8003de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de8:	e002      	b.n	8003df0 <HAL_DMA_IRQHandler+0xb0>
 8003dea:	2340      	movs	r3, #64	; 0x40
 8003dec:	e000      	b.n	8003df0 <HAL_DMA_IRQHandler+0xb0>
 8003dee:	2304      	movs	r3, #4
 8003df0:	4a55      	ldr	r2, [pc, #340]	; (8003f48 <HAL_DMA_IRQHandler+0x208>)
 8003df2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8094 	beq.w	8003f26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e06:	e08e      	b.n	8003f26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d056      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x186>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d051      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10b      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 020a 	bic.w	r2, r2, #10
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a38      	ldr	r2, [pc, #224]	; (8003f30 <HAL_DMA_IRQHandler+0x1f0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d029      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x166>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a37      	ldr	r2, [pc, #220]	; (8003f34 <HAL_DMA_IRQHandler+0x1f4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x162>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a35      	ldr	r2, [pc, #212]	; (8003f38 <HAL_DMA_IRQHandler+0x1f8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01a      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x15c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <HAL_DMA_IRQHandler+0x1fc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d012      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x156>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a32      	ldr	r2, [pc, #200]	; (8003f40 <HAL_DMA_IRQHandler+0x200>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00a      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x150>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a31      	ldr	r2, [pc, #196]	; (8003f44 <HAL_DMA_IRQHandler+0x204>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d102      	bne.n	8003e8a <HAL_DMA_IRQHandler+0x14a>
 8003e84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e88:	e00e      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x168>
 8003e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e8e:	e00b      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x168>
 8003e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e94:	e008      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x168>
 8003e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e9a:	e005      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x168>
 8003e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea0:	e002      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x168>
 8003ea2:	2320      	movs	r3, #32
 8003ea4:	e000      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x168>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <HAL_DMA_IRQHandler+0x208>)
 8003eaa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d034      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ec4:	e02f      	b.n	8003f26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2208      	movs	r2, #8
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d028      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x1e8>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d023      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 020e 	bic.w	r2, r2, #14
 8003eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d004      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
    }
  }
  return;
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
}
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40020008 	.word	0x40020008
 8003f34:	4002001c 	.word	0x4002001c
 8003f38:	40020030 	.word	0x40020030
 8003f3c:	40020044 	.word	0x40020044
 8003f40:	40020058 	.word	0x40020058
 8003f44:	4002006c 	.word	0x4002006c
 8003f48:	40020000 	.word	0x40020000

08003f4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f202 	lsl.w	r2, r1, r2
 8003f68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d108      	bne.n	8003f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f8a:	e007      	b.n	8003f9c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b08b      	sub	sp, #44	; 0x2c
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fba:	e169      	b.n	8004290 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	f040 8158 	bne.w	800428a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a9a      	ldr	r2, [pc, #616]	; (8004248 <HAL_GPIO_Init+0x2a0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d05e      	beq.n	80040a2 <HAL_GPIO_Init+0xfa>
 8003fe4:	4a98      	ldr	r2, [pc, #608]	; (8004248 <HAL_GPIO_Init+0x2a0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d875      	bhi.n	80040d6 <HAL_GPIO_Init+0x12e>
 8003fea:	4a98      	ldr	r2, [pc, #608]	; (800424c <HAL_GPIO_Init+0x2a4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d058      	beq.n	80040a2 <HAL_GPIO_Init+0xfa>
 8003ff0:	4a96      	ldr	r2, [pc, #600]	; (800424c <HAL_GPIO_Init+0x2a4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d86f      	bhi.n	80040d6 <HAL_GPIO_Init+0x12e>
 8003ff6:	4a96      	ldr	r2, [pc, #600]	; (8004250 <HAL_GPIO_Init+0x2a8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d052      	beq.n	80040a2 <HAL_GPIO_Init+0xfa>
 8003ffc:	4a94      	ldr	r2, [pc, #592]	; (8004250 <HAL_GPIO_Init+0x2a8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d869      	bhi.n	80040d6 <HAL_GPIO_Init+0x12e>
 8004002:	4a94      	ldr	r2, [pc, #592]	; (8004254 <HAL_GPIO_Init+0x2ac>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04c      	beq.n	80040a2 <HAL_GPIO_Init+0xfa>
 8004008:	4a92      	ldr	r2, [pc, #584]	; (8004254 <HAL_GPIO_Init+0x2ac>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d863      	bhi.n	80040d6 <HAL_GPIO_Init+0x12e>
 800400e:	4a92      	ldr	r2, [pc, #584]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d046      	beq.n	80040a2 <HAL_GPIO_Init+0xfa>
 8004014:	4a90      	ldr	r2, [pc, #576]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d85d      	bhi.n	80040d6 <HAL_GPIO_Init+0x12e>
 800401a:	2b12      	cmp	r3, #18
 800401c:	d82a      	bhi.n	8004074 <HAL_GPIO_Init+0xcc>
 800401e:	2b12      	cmp	r3, #18
 8004020:	d859      	bhi.n	80040d6 <HAL_GPIO_Init+0x12e>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_GPIO_Init+0x80>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	080040a3 	.word	0x080040a3
 800402c:	0800407d 	.word	0x0800407d
 8004030:	0800408f 	.word	0x0800408f
 8004034:	080040d1 	.word	0x080040d1
 8004038:	080040d7 	.word	0x080040d7
 800403c:	080040d7 	.word	0x080040d7
 8004040:	080040d7 	.word	0x080040d7
 8004044:	080040d7 	.word	0x080040d7
 8004048:	080040d7 	.word	0x080040d7
 800404c:	080040d7 	.word	0x080040d7
 8004050:	080040d7 	.word	0x080040d7
 8004054:	080040d7 	.word	0x080040d7
 8004058:	080040d7 	.word	0x080040d7
 800405c:	080040d7 	.word	0x080040d7
 8004060:	080040d7 	.word	0x080040d7
 8004064:	080040d7 	.word	0x080040d7
 8004068:	080040d7 	.word	0x080040d7
 800406c:	08004085 	.word	0x08004085
 8004070:	08004099 	.word	0x08004099
 8004074:	4a79      	ldr	r2, [pc, #484]	; (800425c <HAL_GPIO_Init+0x2b4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800407a:	e02c      	b.n	80040d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	623b      	str	r3, [r7, #32]
          break;
 8004082:	e029      	b.n	80040d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	3304      	adds	r3, #4
 800408a:	623b      	str	r3, [r7, #32]
          break;
 800408c:	e024      	b.n	80040d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	3308      	adds	r3, #8
 8004094:	623b      	str	r3, [r7, #32]
          break;
 8004096:	e01f      	b.n	80040d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	330c      	adds	r3, #12
 800409e:	623b      	str	r3, [r7, #32]
          break;
 80040a0:	e01a      	b.n	80040d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040aa:	2304      	movs	r3, #4
 80040ac:	623b      	str	r3, [r7, #32]
          break;
 80040ae:	e013      	b.n	80040d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040b8:	2308      	movs	r3, #8
 80040ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	611a      	str	r2, [r3, #16]
          break;
 80040c2:	e009      	b.n	80040d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040c4:	2308      	movs	r3, #8
 80040c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	615a      	str	r2, [r3, #20]
          break;
 80040ce:	e003      	b.n	80040d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
          break;
 80040d4:	e000      	b.n	80040d8 <HAL_GPIO_Init+0x130>
          break;
 80040d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2bff      	cmp	r3, #255	; 0xff
 80040dc:	d801      	bhi.n	80040e2 <HAL_GPIO_Init+0x13a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	e001      	b.n	80040e6 <HAL_GPIO_Init+0x13e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2bff      	cmp	r3, #255	; 0xff
 80040ec:	d802      	bhi.n	80040f4 <HAL_GPIO_Init+0x14c>
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	e002      	b.n	80040fa <HAL_GPIO_Init+0x152>
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	3b08      	subs	r3, #8
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	210f      	movs	r1, #15
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	401a      	ands	r2, r3
 800410c:	6a39      	ldr	r1, [r7, #32]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	431a      	orrs	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80b1 	beq.w	800428a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004128:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <HAL_GPIO_Init+0x2b8>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	4a4c      	ldr	r2, [pc, #304]	; (8004260 <HAL_GPIO_Init+0x2b8>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6193      	str	r3, [r2, #24]
 8004134:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_GPIO_Init+0x2b8>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004140:	4a48      	ldr	r2, [pc, #288]	; (8004264 <HAL_GPIO_Init+0x2bc>)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	3302      	adds	r3, #2
 8004148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	220f      	movs	r2, #15
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4013      	ands	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <HAL_GPIO_Init+0x2c0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_GPIO_Init+0x1ec>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3f      	ldr	r2, [pc, #252]	; (800426c <HAL_GPIO_Init+0x2c4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00d      	beq.n	8004190 <HAL_GPIO_Init+0x1e8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3e      	ldr	r2, [pc, #248]	; (8004270 <HAL_GPIO_Init+0x2c8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <HAL_GPIO_Init+0x1e4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3d      	ldr	r2, [pc, #244]	; (8004274 <HAL_GPIO_Init+0x2cc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <HAL_GPIO_Init+0x1e0>
 8004184:	2303      	movs	r3, #3
 8004186:	e006      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 8004188:	2304      	movs	r3, #4
 800418a:	e004      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 800418c:	2302      	movs	r3, #2
 800418e:	e002      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 8004194:	2300      	movs	r3, #0
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	f002 0203 	and.w	r2, r2, #3
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4093      	lsls	r3, r2
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041a6:	492f      	ldr	r1, [pc, #188]	; (8004264 <HAL_GPIO_Init+0x2bc>)
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d006      	beq.n	80041ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041c0:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	492c      	ldr	r1, [pc, #176]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]
 80041cc:	e006      	b.n	80041dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	4928      	ldr	r1, [pc, #160]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 80041d8:	4013      	ands	r3, r2
 80041da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4922      	ldr	r1, [pc, #136]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60cb      	str	r3, [r1, #12]
 80041f4:	e006      	b.n	8004204 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	491e      	ldr	r1, [pc, #120]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 8004200:	4013      	ands	r3, r2
 8004202:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004210:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4918      	ldr	r1, [pc, #96]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
 800421c:	e006      	b.n	800422c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	43db      	mvns	r3, r3
 8004226:	4914      	ldr	r1, [pc, #80]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 8004228:	4013      	ands	r3, r2
 800422a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d021      	beq.n	800427c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	490e      	ldr	r1, [pc, #56]	; (8004278 <HAL_GPIO_Init+0x2d0>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
 8004244:	e021      	b.n	800428a <HAL_GPIO_Init+0x2e2>
 8004246:	bf00      	nop
 8004248:	10320000 	.word	0x10320000
 800424c:	10310000 	.word	0x10310000
 8004250:	10220000 	.word	0x10220000
 8004254:	10210000 	.word	0x10210000
 8004258:	10120000 	.word	0x10120000
 800425c:	10110000 	.word	0x10110000
 8004260:	40021000 	.word	0x40021000
 8004264:	40010000 	.word	0x40010000
 8004268:	40010800 	.word	0x40010800
 800426c:	40010c00 	.word	0x40010c00
 8004270:	40011000 	.word	0x40011000
 8004274:	40011400 	.word	0x40011400
 8004278:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_GPIO_Init+0x304>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	43db      	mvns	r3, r3
 8004284:	4909      	ldr	r1, [pc, #36]	; (80042ac <HAL_GPIO_Init+0x304>)
 8004286:	4013      	ands	r3, r2
 8004288:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	3301      	adds	r3, #1
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	fa22 f303 	lsr.w	r3, r2, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	f47f ae8e 	bne.w	8003fbc <HAL_GPIO_Init+0x14>
  }
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	372c      	adds	r7, #44	; 0x2c
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	40010400 	.word	0x40010400

080042b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
 80042bc:	4613      	mov	r3, r2
 80042be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042cc:	e003      	b.n	80042d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	041a      	lsls	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	611a      	str	r2, [r3, #16]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e12b      	b.n	800454a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fe ff98 	bl	800323c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004344:	f001 fd1e 	bl	8005d84 <HAL_RCC_GetPCLK1Freq>
 8004348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4a81      	ldr	r2, [pc, #516]	; (8004554 <HAL_I2C_Init+0x274>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d807      	bhi.n	8004364 <HAL_I2C_Init+0x84>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a80      	ldr	r2, [pc, #512]	; (8004558 <HAL_I2C_Init+0x278>)
 8004358:	4293      	cmp	r3, r2
 800435a:	bf94      	ite	ls
 800435c:	2301      	movls	r3, #1
 800435e:	2300      	movhi	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e006      	b.n	8004372 <HAL_I2C_Init+0x92>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a7d      	ldr	r2, [pc, #500]	; (800455c <HAL_I2C_Init+0x27c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	bf94      	ite	ls
 800436c:	2301      	movls	r3, #1
 800436e:	2300      	movhi	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0e7      	b.n	800454a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a78      	ldr	r2, [pc, #480]	; (8004560 <HAL_I2C_Init+0x280>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	0c9b      	lsrs	r3, r3, #18
 8004384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a6a      	ldr	r2, [pc, #424]	; (8004554 <HAL_I2C_Init+0x274>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d802      	bhi.n	80043b4 <HAL_I2C_Init+0xd4>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3301      	adds	r3, #1
 80043b2:	e009      	b.n	80043c8 <HAL_I2C_Init+0xe8>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	4a69      	ldr	r2, [pc, #420]	; (8004564 <HAL_I2C_Init+0x284>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	3301      	adds	r3, #1
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	495c      	ldr	r1, [pc, #368]	; (8004554 <HAL_I2C_Init+0x274>)
 80043e4:	428b      	cmp	r3, r1
 80043e6:	d819      	bhi.n	800441c <HAL_I2C_Init+0x13c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e59      	subs	r1, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f6:	1c59      	adds	r1, r3, #1
 80043f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043fc:	400b      	ands	r3, r1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_I2C_Init+0x138>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1e59      	subs	r1, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	e051      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 8004418:	2304      	movs	r3, #4
 800441a:	e04f      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d111      	bne.n	8004448 <HAL_I2C_Init+0x168>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e58      	subs	r0, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	440b      	add	r3, r1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	3301      	adds	r3, #1
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e012      	b.n	800446e <HAL_I2C_Init+0x18e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1e58      	subs	r0, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	0099      	lsls	r1, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	fbb0 f3f3 	udiv	r3, r0, r3
 800445e:	3301      	adds	r3, #1
 8004460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Init+0x196>
 8004472:	2301      	movs	r3, #1
 8004474:	e022      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10e      	bne.n	800449c <HAL_I2C_Init+0x1bc>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1e58      	subs	r0, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	440b      	add	r3, r1
 800448c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004490:	3301      	adds	r3, #1
 8004492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449a:	e00f      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1e58      	subs	r0, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	0099      	lsls	r1, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b2:	3301      	adds	r3, #1
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	6809      	ldr	r1, [r1, #0]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6911      	ldr	r1, [r2, #16]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	000186a0 	.word	0x000186a0
 8004558:	001e847f 	.word	0x001e847f
 800455c:	003d08ff 	.word	0x003d08ff
 8004560:	431bde83 	.word	0x431bde83
 8004564:	10624dd3 	.word	0x10624dd3

08004568 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4603      	mov	r3, r0
 8004578:	817b      	strh	r3, [r7, #10]
 800457a:	460b      	mov	r3, r1
 800457c:	813b      	strh	r3, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004582:	f7ff f933 	bl	80037ec <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b20      	cmp	r3, #32
 8004592:	f040 80d9 	bne.w	8004748 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2319      	movs	r3, #25
 800459c:	2201      	movs	r2, #1
 800459e:	496d      	ldr	r1, [pc, #436]	; (8004754 <HAL_I2C_Mem_Write+0x1ec>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fdef 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
 80045ae:	e0cc      	b.n	800474a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_I2C_Mem_Write+0x56>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e0c5      	b.n	800474a <HAL_I2C_Mem_Write+0x1e2>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d007      	beq.n	80045e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2221      	movs	r2, #33	; 0x21
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2240      	movs	r2, #64	; 0x40
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a4d      	ldr	r2, [pc, #308]	; (8004758 <HAL_I2C_Mem_Write+0x1f0>)
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004626:	88f8      	ldrh	r0, [r7, #6]
 8004628:	893a      	ldrh	r2, [r7, #8]
 800462a:	8979      	ldrh	r1, [r7, #10]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	4603      	mov	r3, r0
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fc26 	bl	8004e88 <I2C_RequestMemoryWrite>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d052      	beq.n	80046e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e081      	b.n	800474a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 feb4 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b04      	cmp	r3, #4
 800465c:	d107      	bne.n	800466e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e06b      	b.n	800474a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d11b      	bne.n	80046e8 <HAL_I2C_Mem_Write+0x180>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1aa      	bne.n	8004646 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fea7 	bl	8005448 <I2C_WaitOnBTFFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	2b04      	cmp	r3, #4
 8004706:	d107      	bne.n	8004718 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e016      	b.n	800474a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	00100002 	.word	0x00100002
 8004758:	ffff0000 	.word	0xffff0000

0800475c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	4608      	mov	r0, r1
 8004766:	4611      	mov	r1, r2
 8004768:	461a      	mov	r2, r3
 800476a:	4603      	mov	r3, r0
 800476c:	817b      	strh	r3, [r7, #10]
 800476e:	460b      	mov	r3, r1
 8004770:	813b      	strh	r3, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800477a:	f7ff f837 	bl	80037ec <HAL_GetTick>
 800477e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b20      	cmp	r3, #32
 800478a:	f040 8244 	bne.w	8004c16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2319      	movs	r3, #25
 8004794:	2201      	movs	r2, #1
 8004796:	4982      	ldr	r1, [pc, #520]	; (80049a0 <HAL_I2C_Mem_Read+0x244>)
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fcf3 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
 80047a6:	e237      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_I2C_Mem_Read+0x5a>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e230      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d007      	beq.n	80047dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2222      	movs	r2, #34	; 0x22
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800480c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a62      	ldr	r2, [pc, #392]	; (80049a4 <HAL_I2C_Mem_Read+0x248>)
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800481e:	88f8      	ldrh	r0, [r7, #6]
 8004820:	893a      	ldrh	r2, [r7, #8]
 8004822:	8979      	ldrh	r1, [r7, #10]
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	4603      	mov	r3, r0
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fbc0 	bl	8004fb4 <I2C_RequestMemoryRead>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1ec      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004842:	2b00      	cmp	r3, #0
 8004844:	d113      	bne.n	800486e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e1c0      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004872:	2b01      	cmp	r3, #1
 8004874:	d11e      	bne.n	80048b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004884:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004886:	b672      	cpsid	i
}
 8004888:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048b0:	b662      	cpsie	i
}
 80048b2:	e035      	b.n	8004920 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d11e      	bne.n	80048fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048cc:	b672      	cpsid	i
}
 80048ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048f6:	b662      	cpsie	i
}
 80048f8:	e012      	b.n	8004920 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004908:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004920:	e166      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	2b03      	cmp	r3, #3
 8004928:	f200 811f 	bhi.w	8004b6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	2b01      	cmp	r3, #1
 8004932:	d123      	bne.n	800497c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fdcd 	bl	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e167      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800497a:	e139      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	2b02      	cmp	r3, #2
 8004982:	d152      	bne.n	8004a2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	2200      	movs	r2, #0
 800498c:	4906      	ldr	r1, [pc, #24]	; (80049a8 <HAL_I2C_Mem_Read+0x24c>)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fbf8 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e13c      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
 800499e:	bf00      	nop
 80049a0:	00100002 	.word	0x00100002
 80049a4:	ffff0000 	.word	0xffff0000
 80049a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80049ac:	b672      	cpsid	i
}
 80049ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049f2:	b662      	cpsie	i
}
 80049f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a28:	e0e2      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2200      	movs	r2, #0
 8004a32:	497b      	ldr	r1, [pc, #492]	; (8004c20 <HAL_I2C_Mem_Read+0x4c4>)
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fba5 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0e9      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a54:	b672      	cpsid	i
}
 8004a56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a8a:	4b66      	ldr	r3, [pc, #408]	; (8004c24 <HAL_I2C_Mem_Read+0x4c8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	08db      	lsrs	r3, r3, #3
 8004a90:	4a65      	ldr	r2, [pc, #404]	; (8004c28 <HAL_I2C_Mem_Read+0x4cc>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0a1a      	lsrs	r2, r3, #8
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00da      	lsls	r2, r3, #3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d118      	bne.n	8004ae2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004ad2:	b662      	cpsie	i
}
 8004ad4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e09a      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d1d9      	bne.n	8004aa4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b32:	b662      	cpsie	i
}
 8004b34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b68:	e042      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fcb2 	bl	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e04c      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d118      	bne.n	8004bf0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f47f ae94 	bne.w	8004922 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3728      	adds	r7, #40	; 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	00010004 	.word	0x00010004
 8004c24:	20000000 	.word	0x20000000
 8004c28:	14f8b589 	.word	0x14f8b589

08004c2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7fe fdd6 	bl	80037ec <HAL_GetTick>
 8004c40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	f040 8111 	bne.w	8004e76 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	2319      	movs	r3, #25
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4988      	ldr	r1, [pc, #544]	; (8004e80 <HAL_I2C_IsDeviceReady+0x254>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa90 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e104      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_I2C_IsDeviceReady+0x50>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e0fd      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x24c>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d007      	beq.n	8004ca2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2224      	movs	r2, #36	; 0x24
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a70      	ldr	r2, [pc, #448]	; (8004e84 <HAL_I2C_IsDeviceReady+0x258>)
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fa4e 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00d      	beq.n	8004d0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfc:	d103      	bne.n	8004d06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e0b6      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d0a:	897b      	ldrh	r3, [r7, #10]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004d1a:	f7fe fd67 	bl	80037ec <HAL_GetTick>
 8004d1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	bf0c      	ite	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	2300      	movne	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d4e:	e025      	b.n	8004d9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fe fd4c 	bl	80037ec <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <HAL_I2C_IsDeviceReady+0x13a>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	22a0      	movs	r2, #160	; 0xa0
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2ba0      	cmp	r3, #160	; 0xa0
 8004da6:	d005      	beq.n	8004db4 <HAL_I2C_IsDeviceReady+0x188>
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_I2C_IsDeviceReady+0x188>
 8004dae:	7dbb      	ldrb	r3, [r7, #22]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0cd      	beq.n	8004d50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d129      	bne.n	8004e1e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2319      	movs	r3, #25
 8004df6:	2201      	movs	r2, #1
 8004df8:	4921      	ldr	r1, [pc, #132]	; (8004e80 <HAL_I2C_IsDeviceReady+0x254>)
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f9c2 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e036      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e02c      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e36:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	2319      	movs	r3, #25
 8004e3e:	2201      	movs	r2, #1
 8004e40:	490f      	ldr	r1, [pc, #60]	; (8004e80 <HAL_I2C_IsDeviceReady+0x254>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f99e 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e012      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	f4ff af32 	bcc.w	8004cc6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	00100002 	.word	0x00100002
 8004e84:	ffff0000 	.word	0xffff0000

08004e88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	817b      	strh	r3, [r7, #10]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	813b      	strh	r3, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f960 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00d      	beq.n	8004ee6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed8:	d103      	bne.n	8004ee2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e05f      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ef4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	492d      	ldr	r1, [pc, #180]	; (8004fb0 <I2C_RequestMemoryWrite+0x128>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f9bb 	bl	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e04c      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f24:	6a39      	ldr	r1, [r7, #32]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fa46 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00d      	beq.n	8004f4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d107      	bne.n	8004f4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e02b      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d105      	bne.n	8004f60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f54:	893b      	ldrh	r3, [r7, #8]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	611a      	str	r2, [r3, #16]
 8004f5e:	e021      	b.n	8004fa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f60:	893b      	ldrh	r3, [r7, #8]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	6a39      	ldr	r1, [r7, #32]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fa20 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00d      	beq.n	8004f9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d107      	bne.n	8004f96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e005      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9a:	893b      	ldrh	r3, [r7, #8]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	00010002 	.word	0x00010002

08004fb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	817b      	strh	r3, [r7, #10]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	813b      	strh	r3, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f8c2 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005014:	d103      	bne.n	800501e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0aa      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005022:	897b      	ldrh	r3, [r7, #10]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	4952      	ldr	r1, [pc, #328]	; (8005180 <I2C_RequestMemoryRead+0x1cc>)
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f91d 	bl	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e097      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6a39      	ldr	r1, [r7, #32]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f9a8 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00d      	beq.n	800508a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	2b04      	cmp	r3, #4
 8005074:	d107      	bne.n	8005086 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e076      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005090:	893b      	ldrh	r3, [r7, #8]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]
 800509a:	e021      	b.n	80050e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800509c:	893b      	ldrh	r3, [r7, #8]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	6a39      	ldr	r1, [r7, #32]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f982 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d107      	bne.n	80050d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e050      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050d6:	893b      	ldrh	r3, [r7, #8]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	6a39      	ldr	r1, [r7, #32]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f967 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d107      	bne.n	8005108 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005106:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e035      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	2200      	movs	r2, #0
 8005124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f82b 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005142:	d103      	bne.n	800514c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e013      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005150:	897b      	ldrh	r3, [r7, #10]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	4906      	ldr	r1, [pc, #24]	; (8005180 <I2C_RequestMemoryRead+0x1cc>)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f886 	bl	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	00010002 	.word	0x00010002

08005184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005194:	e048      	b.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d044      	beq.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fe fb25 	bl	80037ec <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d139      	bne.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10d      	bne.n	80051da <I2C_WaitOnFlagUntilTimeout+0x56>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	43da      	mvns	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4013      	ands	r3, r2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	e00c      	b.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	43da      	mvns	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d116      	bne.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e023      	b.n	8005270 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10d      	bne.n	800524e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	43da      	mvns	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4013      	ands	r3, r2
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	e00c      	b.n	8005268 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	43da      	mvns	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	429a      	cmp	r2, r3
 800526c:	d093      	beq.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005286:	e071      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	d123      	bne.n	80052e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	f043 0204 	orr.w	r2, r3, #4
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e067      	b.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d041      	beq.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fe fa80 	bl	80037ec <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d136      	bne.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10c      	bne.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	43da      	mvns	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	bf14      	ite	ne
 800531a:	2301      	movne	r3, #1
 800531c:	2300      	moveq	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e00b      	b.n	800533a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	43da      	mvns	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d016      	beq.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e021      	b.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10c      	bne.n	8005390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	43da      	mvns	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e00b      	b.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	43da      	mvns	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4013      	ands	r3, r2
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f af6d 	bne.w	8005288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c4:	e034      	b.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f8e3 	bl	8005592 <I2C_IsAcknowledgeFailed>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e034      	b.n	8005440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d028      	beq.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053de:	f7fe fa05 	bl	80037ec <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11d      	bne.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d016      	beq.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e007      	b.n	8005440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d1c3      	bne.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005454:	e034      	b.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f89b 	bl	8005592 <I2C_IsAcknowledgeFailed>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e034      	b.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d028      	beq.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fe f9bd 	bl	80037ec <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11d      	bne.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b04      	cmp	r3, #4
 8005490:	d016      	beq.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e007      	b.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d1c3      	bne.n	8005456 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e4:	e049      	b.n	800557a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d119      	bne.n	8005528 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0210 	mvn.w	r2, #16
 80054fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e030      	b.n	800558a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005528:	f7fe f960 	bl	80037ec <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11d      	bne.n	800557a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d016      	beq.n	800557a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e007      	b.n	800558a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d1ae      	bne.n	80054e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a8:	d11b      	bne.n	80055e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
	...

080055f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e272      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8087 	beq.w	800571e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005610:	4b92      	ldr	r3, [pc, #584]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b04      	cmp	r3, #4
 800561a:	d00c      	beq.n	8005636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800561c:	4b8f      	ldr	r3, [pc, #572]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b08      	cmp	r3, #8
 8005626:	d112      	bne.n	800564e <HAL_RCC_OscConfig+0x5e>
 8005628:	4b8c      	ldr	r3, [pc, #560]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d10b      	bne.n	800564e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005636:	4b89      	ldr	r3, [pc, #548]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d06c      	beq.n	800571c <HAL_RCC_OscConfig+0x12c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d168      	bne.n	800571c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e24c      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x76>
 8005658:	4b80      	ldr	r3, [pc, #512]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a7f      	ldr	r2, [pc, #508]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 800565e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	e02e      	b.n	80056c4 <HAL_RCC_OscConfig+0xd4>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x98>
 800566e:	4b7b      	ldr	r3, [pc, #492]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a7a      	ldr	r2, [pc, #488]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b78      	ldr	r3, [pc, #480]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a77      	ldr	r2, [pc, #476]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e01d      	b.n	80056c4 <HAL_RCC_OscConfig+0xd4>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005690:	d10c      	bne.n	80056ac <HAL_RCC_OscConfig+0xbc>
 8005692:	4b72      	ldr	r3, [pc, #456]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a71      	ldr	r2, [pc, #452]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b6f      	ldr	r3, [pc, #444]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6e      	ldr	r2, [pc, #440]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80056a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e00b      	b.n	80056c4 <HAL_RCC_OscConfig+0xd4>
 80056ac:	4b6b      	ldr	r3, [pc, #428]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a6a      	ldr	r2, [pc, #424]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4b68      	ldr	r3, [pc, #416]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a67      	ldr	r2, [pc, #412]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80056be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d013      	beq.n	80056f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7fe f88e 	bl	80037ec <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d4:	f7fe f88a 	bl	80037ec <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e200      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e6:	4b5d      	ldr	r3, [pc, #372]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0xe4>
 80056f2:	e014      	b.n	800571e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fe f87a 	bl	80037ec <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fe f876 	bl	80037ec <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1ec      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570e:	4b53      	ldr	r3, [pc, #332]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x10c>
 800571a:	e000      	b.n	800571e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d063      	beq.n	80057f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800572a:	4b4c      	ldr	r3, [pc, #304]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005736:	4b49      	ldr	r3, [pc, #292]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b08      	cmp	r3, #8
 8005740:	d11c      	bne.n	800577c <HAL_RCC_OscConfig+0x18c>
 8005742:	4b46      	ldr	r3, [pc, #280]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d116      	bne.n	800577c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	4b43      	ldr	r3, [pc, #268]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_RCC_OscConfig+0x176>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d001      	beq.n	8005766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e1c0      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005766:	4b3d      	ldr	r3, [pc, #244]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4939      	ldr	r1, [pc, #228]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577a:	e03a      	b.n	80057f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d020      	beq.n	80057c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005784:	4b36      	ldr	r3, [pc, #216]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578a:	f7fe f82f 	bl	80037ec <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005792:	f7fe f82b 	bl	80037ec <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e1a1      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a4:	4b2d      	ldr	r3, [pc, #180]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b0:	4b2a      	ldr	r3, [pc, #168]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4927      	ldr	r1, [pc, #156]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]
 80057c4:	e015      	b.n	80057f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057c6:	4b26      	ldr	r3, [pc, #152]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fe f80e 	bl	80037ec <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d4:	f7fe f80a 	bl	80037ec <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e180      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e6:	4b1d      	ldr	r3, [pc, #116]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d03a      	beq.n	8005874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d019      	beq.n	800583a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005806:	4b17      	ldr	r3, [pc, #92]	; (8005864 <HAL_RCC_OscConfig+0x274>)
 8005808:	2201      	movs	r2, #1
 800580a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580c:	f7fd ffee 	bl	80037ec <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005814:	f7fd ffea 	bl	80037ec <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e160      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <HAL_RCC_OscConfig+0x26c>)
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005832:	2001      	movs	r0, #1
 8005834:	f000 face 	bl	8005dd4 <RCC_Delay>
 8005838:	e01c      	b.n	8005874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <HAL_RCC_OscConfig+0x274>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005840:	f7fd ffd4 	bl	80037ec <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005846:	e00f      	b.n	8005868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005848:	f7fd ffd0 	bl	80037ec <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d908      	bls.n	8005868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e146      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
 800585a:	bf00      	nop
 800585c:	40021000 	.word	0x40021000
 8005860:	42420000 	.word	0x42420000
 8005864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005868:	4b92      	ldr	r3, [pc, #584]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e9      	bne.n	8005848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80a6 	beq.w	80059ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005886:	4b8b      	ldr	r3, [pc, #556]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10d      	bne.n	80058ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	4b88      	ldr	r3, [pc, #544]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4a87      	ldr	r2, [pc, #540]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589c:	61d3      	str	r3, [r2, #28]
 800589e:	4b85      	ldr	r3, [pc, #532]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ae:	4b82      	ldr	r3, [pc, #520]	; (8005ab8 <HAL_RCC_OscConfig+0x4c8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d118      	bne.n	80058ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ba:	4b7f      	ldr	r3, [pc, #508]	; (8005ab8 <HAL_RCC_OscConfig+0x4c8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a7e      	ldr	r2, [pc, #504]	; (8005ab8 <HAL_RCC_OscConfig+0x4c8>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c6:	f7fd ff91 	bl	80037ec <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ce:	f7fd ff8d 	bl	80037ec <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b64      	cmp	r3, #100	; 0x64
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e103      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e0:	4b75      	ldr	r3, [pc, #468]	; (8005ab8 <HAL_RCC_OscConfig+0x4c8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f0      	beq.n	80058ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_OscConfig+0x312>
 80058f4:	4b6f      	ldr	r3, [pc, #444]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	4a6e      	ldr	r2, [pc, #440]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	6213      	str	r3, [r2, #32]
 8005900:	e02d      	b.n	800595e <HAL_RCC_OscConfig+0x36e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10c      	bne.n	8005924 <HAL_RCC_OscConfig+0x334>
 800590a:	4b6a      	ldr	r3, [pc, #424]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	4a69      	ldr	r2, [pc, #420]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	6213      	str	r3, [r2, #32]
 8005916:	4b67      	ldr	r3, [pc, #412]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	4a66      	ldr	r2, [pc, #408]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 800591c:	f023 0304 	bic.w	r3, r3, #4
 8005920:	6213      	str	r3, [r2, #32]
 8005922:	e01c      	b.n	800595e <HAL_RCC_OscConfig+0x36e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b05      	cmp	r3, #5
 800592a:	d10c      	bne.n	8005946 <HAL_RCC_OscConfig+0x356>
 800592c:	4b61      	ldr	r3, [pc, #388]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	4a60      	ldr	r2, [pc, #384]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005932:	f043 0304 	orr.w	r3, r3, #4
 8005936:	6213      	str	r3, [r2, #32]
 8005938:	4b5e      	ldr	r3, [pc, #376]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	4a5d      	ldr	r2, [pc, #372]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	6213      	str	r3, [r2, #32]
 8005944:	e00b      	b.n	800595e <HAL_RCC_OscConfig+0x36e>
 8005946:	4b5b      	ldr	r3, [pc, #364]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4a5a      	ldr	r2, [pc, #360]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	6213      	str	r3, [r2, #32]
 8005952:	4b58      	ldr	r3, [pc, #352]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	4a57      	ldr	r2, [pc, #348]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005958:	f023 0304 	bic.w	r3, r3, #4
 800595c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d015      	beq.n	8005992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005966:	f7fd ff41 	bl	80037ec <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596c:	e00a      	b.n	8005984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596e:	f7fd ff3d 	bl	80037ec <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	f241 3288 	movw	r2, #5000	; 0x1388
 800597c:	4293      	cmp	r3, r2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e0b1      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0ee      	beq.n	800596e <HAL_RCC_OscConfig+0x37e>
 8005990:	e014      	b.n	80059bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005992:	f7fd ff2b 	bl	80037ec <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005998:	e00a      	b.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599a:	f7fd ff27 	bl	80037ec <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e09b      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b0:	4b40      	ldr	r3, [pc, #256]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ee      	bne.n	800599a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c2:	4b3c      	ldr	r3, [pc, #240]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4a3b      	ldr	r2, [pc, #236]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8087 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059d8:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 030c 	and.w	r3, r3, #12
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d061      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d146      	bne.n	8005a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b33      	ldr	r3, [pc, #204]	; (8005abc <HAL_RCC_OscConfig+0x4cc>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f2:	f7fd fefb 	bl	80037ec <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fa:	f7fd fef7 	bl	80037ec <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e06d      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a0c:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a20:	d108      	bne.n	8005a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	4921      	ldr	r1, [pc, #132]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a34:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a19      	ldr	r1, [r3, #32]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	430b      	orrs	r3, r1
 8005a46:	491b      	ldr	r1, [pc, #108]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <HAL_RCC_OscConfig+0x4cc>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a52:	f7fd fecb 	bl	80037ec <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5a:	f7fd fec7 	bl	80037ec <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e03d      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a6c:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0f0      	beq.n	8005a5a <HAL_RCC_OscConfig+0x46a>
 8005a78:	e035      	b.n	8005ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <HAL_RCC_OscConfig+0x4cc>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a80:	f7fd feb4 	bl	80037ec <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a88:	f7fd feb0 	bl	80037ec <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e026      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <HAL_RCC_OscConfig+0x4c4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0x498>
 8005aa6:	e01e      	b.n	8005ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e019      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40007000 	.word	0x40007000
 8005abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCC_OscConfig+0x500>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d106      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40021000 	.word	0x40021000

08005af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0d0      	b.n	8005caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b08:	4b6a      	ldr	r3, [pc, #424]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d910      	bls.n	8005b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b16:	4b67      	ldr	r3, [pc, #412]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 0207 	bic.w	r2, r3, #7
 8005b1e:	4965      	ldr	r1, [pc, #404]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b26:	4b63      	ldr	r3, [pc, #396]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0b8      	b.n	8005caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d020      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b50:	4b59      	ldr	r3, [pc, #356]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a58      	ldr	r2, [pc, #352]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b68:	4b53      	ldr	r3, [pc, #332]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4a52      	ldr	r2, [pc, #328]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b74:	4b50      	ldr	r3, [pc, #320]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	494d      	ldr	r1, [pc, #308]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d040      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d107      	bne.n	8005baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9a:	4b47      	ldr	r3, [pc, #284]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d115      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e07f      	b.n	8005caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb2:	4b41      	ldr	r3, [pc, #260]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e073      	b.n	8005caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc2:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e06b      	b.n	8005caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bd2:	4b39      	ldr	r3, [pc, #228]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f023 0203 	bic.w	r2, r3, #3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	4936      	ldr	r1, [pc, #216]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be4:	f7fd fe02 	bl	80037ec <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bea:	e00a      	b.n	8005c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bec:	f7fd fdfe 	bl	80037ec <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e053      	b.n	8005caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c02:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 020c 	and.w	r2, r3, #12
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d1eb      	bne.n	8005bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c14:	4b27      	ldr	r3, [pc, #156]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d210      	bcs.n	8005c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c22:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f023 0207 	bic.w	r2, r3, #7
 8005c2a:	4922      	ldr	r1, [pc, #136]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c32:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d001      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e032      	b.n	8005caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c50:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	4916      	ldr	r1, [pc, #88]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c6e:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	490e      	ldr	r1, [pc, #56]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c82:	f000 f821 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 8005c86:	4602      	mov	r2, r0
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	490a      	ldr	r1, [pc, #40]	; (8005cbc <HAL_RCC_ClockConfig+0x1c8>)
 8005c94:	5ccb      	ldrb	r3, [r1, r3]
 8005c96:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8005c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fd fd60 	bl	8003768 <HAL_InitTick>

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40022000 	.word	0x40022000
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	0800c9e4 	.word	0x0800c9e4
 8005cc0:	20000000 	.word	0x20000000
 8005cc4:	20000004 	.word	0x20000004

08005cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d002      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x36>
 8005cf6:	e027      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cf8:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cfa:	613b      	str	r3, [r7, #16]
      break;
 8005cfc:	e027      	b.n	8005d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	0c9b      	lsrs	r3, r3, #18
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d08:	5cd3      	ldrb	r3, [r2, r3]
 8005d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d010      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d16:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	0c5b      	lsrs	r3, r3, #17
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	4a11      	ldr	r2, [pc, #68]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d22:	5cd3      	ldrb	r3, [r2, r3]
 8005d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a0d      	ldr	r2, [pc, #52]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d2a:	fb03 f202 	mul.w	r2, r3, r2
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e004      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	613b      	str	r3, [r7, #16]
      break;
 8005d46:	e002      	b.n	8005d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d4a:	613b      	str	r3, [r7, #16]
      break;
 8005d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d4e:	693b      	ldr	r3, [r7, #16]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	007a1200 	.word	0x007a1200
 8005d64:	0800c9fc 	.word	0x0800c9fc
 8005d68:	0800ca0c 	.word	0x0800ca0c
 8005d6c:	003d0900 	.word	0x003d0900

08005d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d74:	4b02      	ldr	r3, [pc, #8]	; (8005d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d76:	681b      	ldr	r3, [r3, #0]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr
 8005d80:	20000000 	.word	0x20000000

08005d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d88:	f7ff fff2 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	4903      	ldr	r1, [pc, #12]	; (8005da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d9a:	5ccb      	ldrb	r3, [r1, r3]
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40021000 	.word	0x40021000
 8005da8:	0800c9f4 	.word	0x0800c9f4

08005dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005db0:	f7ff ffde 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	0adb      	lsrs	r3, r3, #11
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	4903      	ldr	r1, [pc, #12]	; (8005dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc2:	5ccb      	ldrb	r3, [r1, r3]
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	0800c9f4 	.word	0x0800c9f4

08005dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <RCC_Delay+0x34>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <RCC_Delay+0x38>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0a5b      	lsrs	r3, r3, #9
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005df0:	bf00      	nop
  }
  while (Delay --);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	60fa      	str	r2, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f9      	bne.n	8005df0 <RCC_Delay+0x1c>
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	20000000 	.word	0x20000000
 8005e0c:	10624dd3 	.word	0x10624dd3

08005e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e041      	b.n	8005ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fd fa3e 	bl	80032b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f000 fd5a 	bl	8006908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e041      	b.n	8005f44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f839 	bl	8005f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 fd0b 	bl	8006908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr
	...

08005f60 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	e022      	b.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d109      	bne.n	8005fa6 <HAL_TIM_PWM_Start_DMA+0x46>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	e015      	b.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d109      	bne.n	8005fc0 <HAL_TIM_PWM_Start_DMA+0x60>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e008      	b.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e153      	b.n	8006282 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x94>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e022      	b.n	800603a <HAL_TIM_PWM_Start_DMA+0xda>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d109      	bne.n	800600e <HAL_TIM_PWM_Start_DMA+0xae>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e015      	b.n	800603a <HAL_TIM_PWM_Start_DMA+0xda>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d109      	bne.n	8006028 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	e008      	b.n	800603a <HAL_TIM_PWM_Start_DMA+0xda>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	bf0c      	ite	eq
 8006034:	2301      	moveq	r3, #1
 8006036:	2300      	movne	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d024      	beq.n	8006088 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_TIM_PWM_Start_DMA+0xea>
 8006044:	887b      	ldrh	r3, [r7, #2]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e119      	b.n	8006282 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <HAL_TIM_PWM_Start_DMA+0xfe>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800605c:	e016      	b.n	800608c <HAL_TIM_PWM_Start_DMA+0x12c>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b04      	cmp	r3, #4
 8006062:	d104      	bne.n	800606e <HAL_TIM_PWM_Start_DMA+0x10e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800606c:	e00e      	b.n	800608c <HAL_TIM_PWM_Start_DMA+0x12c>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d104      	bne.n	800607e <HAL_TIM_PWM_Start_DMA+0x11e>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800607c:	e006      	b.n	800608c <HAL_TIM_PWM_Start_DMA+0x12c>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006086:	e001      	b.n	800608c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0fa      	b.n	8006282 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b0c      	cmp	r3, #12
 8006090:	f200 80ae 	bhi.w	80061f0 <HAL_TIM_PWM_Start_DMA+0x290>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060d1 	.word	0x080060d1
 80060a0:	080061f1 	.word	0x080061f1
 80060a4:	080061f1 	.word	0x080061f1
 80060a8:	080061f1 	.word	0x080061f1
 80060ac:	08006119 	.word	0x08006119
 80060b0:	080061f1 	.word	0x080061f1
 80060b4:	080061f1 	.word	0x080061f1
 80060b8:	080061f1 	.word	0x080061f1
 80060bc:	08006161 	.word	0x08006161
 80060c0:	080061f1 	.word	0x080061f1
 80060c4:	080061f1 	.word	0x080061f1
 80060c8:	080061f1 	.word	0x080061f1
 80060cc:	080061a9 	.word	0x080061a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	4a6d      	ldr	r2, [pc, #436]	; (800628c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	4a6c      	ldr	r2, [pc, #432]	; (8006290 <HAL_TIM_PWM_Start_DMA+0x330>)
 80060de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	4a6b      	ldr	r2, [pc, #428]	; (8006294 <HAL_TIM_PWM_Start_DMA+0x334>)
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3334      	adds	r3, #52	; 0x34
 80060f4:	461a      	mov	r2, r3
 80060f6:	887b      	ldrh	r3, [r7, #2]
 80060f8:	f7fd fd0e 	bl	8003b18 <HAL_DMA_Start_IT>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e0bd      	b.n	8006282 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006114:	60da      	str	r2, [r3, #12]
      break;
 8006116:	e06e      	b.n	80061f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	4a5b      	ldr	r2, [pc, #364]	; (800628c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	4a5a      	ldr	r2, [pc, #360]	; (8006290 <HAL_TIM_PWM_Start_DMA+0x330>)
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	4a59      	ldr	r2, [pc, #356]	; (8006294 <HAL_TIM_PWM_Start_DMA+0x334>)
 800612e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3338      	adds	r3, #56	; 0x38
 800613c:	461a      	mov	r2, r3
 800613e:	887b      	ldrh	r3, [r7, #2]
 8006140:	f7fd fcea 	bl	8003b18 <HAL_DMA_Start_IT>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e099      	b.n	8006282 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800615c:	60da      	str	r2, [r3, #12]
      break;
 800615e:	e04a      	b.n	80061f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	4a49      	ldr	r2, [pc, #292]	; (800628c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006166:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a48      	ldr	r2, [pc, #288]	; (8006290 <HAL_TIM_PWM_Start_DMA+0x330>)
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	4a47      	ldr	r2, [pc, #284]	; (8006294 <HAL_TIM_PWM_Start_DMA+0x334>)
 8006176:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	333c      	adds	r3, #60	; 0x3c
 8006184:	461a      	mov	r2, r3
 8006186:	887b      	ldrh	r3, [r7, #2]
 8006188:	f7fd fcc6 	bl	8003b18 <HAL_DMA_Start_IT>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e075      	b.n	8006282 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a4:	60da      	str	r2, [r3, #12]
      break;
 80061a6:	e026      	b.n	80061f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	4a37      	ldr	r2, [pc, #220]	; (800628c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	4a36      	ldr	r2, [pc, #216]	; (8006290 <HAL_TIM_PWM_Start_DMA+0x330>)
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	4a35      	ldr	r2, [pc, #212]	; (8006294 <HAL_TIM_PWM_Start_DMA+0x334>)
 80061be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3340      	adds	r3, #64	; 0x40
 80061cc:	461a      	mov	r2, r3
 80061ce:	887b      	ldrh	r3, [r7, #2]
 80061d0:	f7fd fca2 	bl	8003b18 <HAL_DMA_Start_IT>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e051      	b.n	8006282 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ec:	60da      	str	r2, [r3, #12]
      break;
 80061ee:	e002      	b.n	80061f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75fb      	strb	r3, [r7, #23]
      break;
 80061f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d141      	bne.n	8006280 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2201      	movs	r2, #1
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fdff 	bl	8006e08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a22      	ldr	r2, [pc, #136]	; (8006298 <HAL_TIM_PWM_Start_DMA+0x338>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d107      	bne.n	8006224 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006222:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1b      	ldr	r2, [pc, #108]	; (8006298 <HAL_TIM_PWM_Start_DMA+0x338>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006236:	d009      	beq.n	800624c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <HAL_TIM_PWM_Start_DMA+0x33c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d111      	bne.n	8006270 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b06      	cmp	r3, #6
 800625c:	d010      	beq.n	8006280 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e007      	b.n	8006280 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	080067f9 	.word	0x080067f9
 8006290:	080068a1 	.word	0x080068a1
 8006294:	08006767 	.word	0x08006767
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000800 	.word	0x40000800

080062a4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d855      	bhi.n	8006364 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	08006365 	.word	0x08006365
 80062c8:	08006365 	.word	0x08006365
 80062cc:	08006365 	.word	0x08006365
 80062d0:	08006311 	.word	0x08006311
 80062d4:	08006365 	.word	0x08006365
 80062d8:	08006365 	.word	0x08006365
 80062dc:	08006365 	.word	0x08006365
 80062e0:	0800632d 	.word	0x0800632d
 80062e4:	08006365 	.word	0x08006365
 80062e8:	08006365 	.word	0x08006365
 80062ec:	08006365 	.word	0x08006365
 80062f0:	08006349 	.word	0x08006349
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006302:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	4618      	mov	r0, r3
 800630a:	f7fd fca1 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 800630e:	e02c      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	4618      	mov	r0, r3
 8006326:	f7fd fc93 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 800632a:	e01e      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800633a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	4618      	mov	r0, r3
 8006342:	f7fd fc85 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 8006346:	e010      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006356:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	4618      	mov	r0, r3
 800635e:	f7fd fc77 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 8006362:	e002      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
      break;
 8006368:	bf00      	nop
  }

  if (status == HAL_OK)
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d157      	bne.n	8006420 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2200      	movs	r2, #0
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fd45 	bl	8006e08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2a      	ldr	r2, [pc, #168]	; (800642c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d117      	bne.n	80063b8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10f      	bne.n	80063b8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6a1a      	ldr	r2, [r3, #32]
 800639e:	f240 4344 	movw	r3, #1092	; 0x444
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d107      	bne.n	80063b8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	f241 1311 	movw	r3, #4369	; 0x1111
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10f      	bne.n	80063e8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6a1a      	ldr	r2, [r3, #32]
 80063ce:	f240 4344 	movw	r3, #1092	; 0x444
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f6:	e013      	b.n	8006420 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d104      	bne.n	8006408 <HAL_TIM_PWM_Stop_DMA+0x164>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006406:	e00b      	b.n	8006420 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b08      	cmp	r3, #8
 800640c:	d104      	bne.n	8006418 <HAL_TIM_PWM_Stop_DMA+0x174>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006416:	e003      	b.n	8006420 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40012c00 	.word	0x40012c00

08006430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800644a:	2302      	movs	r3, #2
 800644c:	e0ae      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	f200 809f 	bhi.w	800659c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006499 	.word	0x08006499
 8006468:	0800659d 	.word	0x0800659d
 800646c:	0800659d 	.word	0x0800659d
 8006470:	0800659d 	.word	0x0800659d
 8006474:	080064d9 	.word	0x080064d9
 8006478:	0800659d 	.word	0x0800659d
 800647c:	0800659d 	.word	0x0800659d
 8006480:	0800659d 	.word	0x0800659d
 8006484:	0800651b 	.word	0x0800651b
 8006488:	0800659d 	.word	0x0800659d
 800648c:	0800659d 	.word	0x0800659d
 8006490:	0800659d 	.word	0x0800659d
 8006494:	0800655b 	.word	0x0800655b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fa94 	bl	80069cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0208 	orr.w	r2, r2, #8
 80064b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0204 	bic.w	r2, r2, #4
 80064c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	619a      	str	r2, [r3, #24]
      break;
 80064d6:	e064      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fada 	bl	8006a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6999      	ldr	r1, [r3, #24]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	021a      	lsls	r2, r3, #8
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	619a      	str	r2, [r3, #24]
      break;
 8006518:	e043      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fb23 	bl	8006b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0208 	orr.w	r2, r2, #8
 8006534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0204 	bic.w	r2, r2, #4
 8006544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69d9      	ldr	r1, [r3, #28]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	61da      	str	r2, [r3, #28]
      break;
 8006558:	e023      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fb6d 	bl	8006c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69da      	ldr	r2, [r3, #28]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69d9      	ldr	r1, [r3, #28]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	021a      	lsls	r2, r3, #8
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	61da      	str	r2, [r3, #28]
      break;
 800659a:	e002      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
      break;
 80065a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_TIM_ConfigClockSource+0x1c>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e0b4      	b.n	800673a <HAL_TIM_ConfigClockSource+0x186>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006608:	d03e      	beq.n	8006688 <HAL_TIM_ConfigClockSource+0xd4>
 800660a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660e:	f200 8087 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006616:	f000 8086 	beq.w	8006726 <HAL_TIM_ConfigClockSource+0x172>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	d87f      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b70      	cmp	r3, #112	; 0x70
 8006622:	d01a      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xa6>
 8006624:	2b70      	cmp	r3, #112	; 0x70
 8006626:	d87b      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006628:	2b60      	cmp	r3, #96	; 0x60
 800662a:	d050      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x11a>
 800662c:	2b60      	cmp	r3, #96	; 0x60
 800662e:	d877      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b50      	cmp	r3, #80	; 0x50
 8006632:	d03c      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0xfa>
 8006634:	2b50      	cmp	r3, #80	; 0x50
 8006636:	d873      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d058      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x13a>
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d86f      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b30      	cmp	r3, #48	; 0x30
 8006642:	d064      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d86b      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b20      	cmp	r3, #32
 800664a:	d060      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d867      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d05c      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 8006654:	2b10      	cmp	r3, #16
 8006656:	d05a      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 8006658:	e062      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6899      	ldr	r1, [r3, #8]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f000 fbae 	bl	8006dca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800667c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	609a      	str	r2, [r3, #8]
      break;
 8006686:	e04f      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	6899      	ldr	r1, [r3, #8]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f000 fb97 	bl	8006dca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066aa:	609a      	str	r2, [r3, #8]
      break;
 80066ac:	e03c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 fb0e 	bl	8006cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2150      	movs	r1, #80	; 0x50
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fb65 	bl	8006d96 <TIM_ITRx_SetConfig>
      break;
 80066cc:	e02c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 fb2c 	bl	8006d38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2160      	movs	r1, #96	; 0x60
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fb55 	bl	8006d96 <TIM_ITRx_SetConfig>
      break;
 80066ec:	e01c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 faee 	bl	8006cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2140      	movs	r1, #64	; 0x40
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fb45 	bl	8006d96 <TIM_ITRx_SetConfig>
      break;
 800670c:	e00c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f000 fb3c 	bl	8006d96 <TIM_ITRx_SetConfig>
      break;
 800671e:	e003      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
      break;
 8006724:	e000      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d107      	bne.n	800678e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800678c:	e02a      	b.n	80067e4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d107      	bne.n	80067a8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2202      	movs	r2, #2
 800679c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a6:	e01d      	b.n	80067e4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d107      	bne.n	80067c2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2204      	movs	r2, #4
 80067b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c0:	e010      	b.n	80067e4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d107      	bne.n	80067dc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2208      	movs	r2, #8
 80067d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067da:	e003      	b.n	80067e4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff ffb5 	bl	8006754 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d10b      	bne.n	8006828 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d136      	bne.n	800688c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006826:	e031      	b.n	800688c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d10b      	bne.n	800684a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2202      	movs	r2, #2
 8006836:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d125      	bne.n	800688c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006848:	e020      	b.n	800688c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d10b      	bne.n	800686c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2204      	movs	r2, #4
 8006858:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d114      	bne.n	800688c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800686a:	e00f      	b.n	800688c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	429a      	cmp	r2, r3
 8006874:	d10a      	bne.n	800688c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2208      	movs	r2, #8
 800687a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7fc fa43 	bl	8002d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d103      	bne.n	80068c0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	771a      	strb	r2, [r3, #28]
 80068be:	e019      	b.n	80068f4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d103      	bne.n	80068d2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2202      	movs	r2, #2
 80068ce:	771a      	strb	r2, [r3, #28]
 80068d0:	e010      	b.n	80068f4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d103      	bne.n	80068e4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2204      	movs	r2, #4
 80068e0:	771a      	strb	r2, [r3, #28]
 80068e2:	e007      	b.n	80068f4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d102      	bne.n	80068f4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2208      	movs	r2, #8
 80068f2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff ff24 	bl	8006742 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_Base_SetConfig+0xb8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00b      	beq.n	8006938 <TIM_Base_SetConfig+0x30>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006926:	d007      	beq.n	8006938 <TIM_Base_SetConfig+0x30>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <TIM_Base_SetConfig+0xbc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0x30>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <TIM_Base_SetConfig+0xc0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d108      	bne.n	800694a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <TIM_Base_SetConfig+0xb8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0x62>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0x62>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <TIM_Base_SetConfig+0xbc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0x62>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <TIM_Base_SetConfig+0xc0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <TIM_Base_SetConfig+0xb8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	615a      	str	r2, [r3, #20]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800

080069cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f023 0201 	bic.w	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0302 	bic.w	r3, r3, #2
 8006a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <TIM_OC1_SetConfig+0xc8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10c      	bne.n	8006a42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0308 	bic.w	r3, r3, #8
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f023 0304 	bic.w	r3, r3, #4
 8006a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <TIM_OC1_SetConfig+0xc8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d111      	bne.n	8006a6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00

08006a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f023 0210 	bic.w	r2, r3, #16
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0320 	bic.w	r3, r3, #32
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <TIM_OC2_SetConfig+0xd0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d10d      	bne.n	8006b14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a14      	ldr	r2, [pc, #80]	; (8006b68 <TIM_OC2_SetConfig+0xd0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d113      	bne.n	8006b44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	40012c00 	.word	0x40012c00

08006b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <TIM_OC3_SetConfig+0xd0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10d      	bne.n	8006be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <TIM_OC3_SetConfig+0xd0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d113      	bne.n	8006c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00

08006c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a0f      	ldr	r2, [pc, #60]	; (8006cd8 <TIM_OC4_SetConfig+0x98>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr
 8006cd8:	40012c00 	.word	0x40012c00

08006cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 030a 	bic.w	r3, r3, #10
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0210 	bic.w	r2, r3, #16
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	031b      	lsls	r3, r3, #12
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr

08006d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f043 0307 	orr.w	r3, r3, #7
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	609a      	str	r2, [r3, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b087      	sub	sp, #28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	021a      	lsls	r2, r3, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	609a      	str	r2, [r3, #8]
}
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	431a      	orrs	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e046      	b.n	8006ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb4:	d009      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a12      	ldr	r2, [pc, #72]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a10      	ldr	r2, [pc, #64]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800

08006f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e042      	b.n	8006fa4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fc fa52 	bl	80033dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2224      	movs	r2, #36	; 0x24
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 ff5d 	bl	8007e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695a      	ldr	r2, [r3, #20]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d16d      	bne.n	80070a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_UART_Transmit+0x2c>
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e066      	b.n	80070aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2221      	movs	r2, #33	; 0x21
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fea:	f7fc fbff 	bl	80037ec <HAL_GetTick>
 8006fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007004:	d108      	bne.n	8007018 <HAL_UART_Transmit+0x6c>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e003      	b.n	8007020 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007020:	e02a      	b.n	8007078 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fc24 	bl	800787a <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e036      	b.n	80070aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	3302      	adds	r3, #2
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e007      	b.n	800706a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1cf      	bne.n	8007022 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2200      	movs	r2, #0
 800708a:	2140      	movs	r1, #64	; 0x40
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fbf4 	bl	800787a <UART_WaitOnFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	4613      	mov	r3, r2
 80070be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d112      	bne.n	80070f2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Receive_DMA+0x26>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e00b      	b.n	80070f4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	461a      	mov	r2, r3
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fc35 	bl	8007958 <UART_Start_Receive_DMA>
 80070ee:	4603      	mov	r3, r0
 80070f0:	e000      	b.n	80070f4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80070f2:	2302      	movs	r3, #2
  }
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b0ba      	sub	sp, #232	; 0xe8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007122:	2300      	movs	r3, #0
 8007124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007128:	2300      	movs	r3, #0
 800712a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800713a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10f      	bne.n	8007162 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <HAL_UART_IRQHandler+0x66>
 800714e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fd9a 	bl	8007c94 <UART_Receive_IT>
      return;
 8007160:	e25b      	b.n	800761a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80de 	beq.w	8007328 <HAL_UART_IRQHandler+0x22c>
 800716c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80d1 	beq.w	8007328 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <HAL_UART_IRQHandler+0xae>
 8007192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a2:	f043 0201 	orr.w	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00b      	beq.n	80071ce <HAL_UART_IRQHandler+0xd2>
 80071b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	f043 0202 	orr.w	r2, r3, #2
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <HAL_UART_IRQHandler+0xf6>
 80071da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f043 0204 	orr.w	r2, r3, #4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d011      	beq.n	8007222 <HAL_UART_IRQHandler+0x126>
 80071fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800720a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	f043 0208 	orr.w	r2, r3, #8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 81f2 	beq.w	8007610 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <HAL_UART_IRQHandler+0x14e>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fd25 	bl	8007c94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	bf14      	ite	ne
 8007258:	2301      	movne	r3, #1
 800725a:	2300      	moveq	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <HAL_UART_IRQHandler+0x17a>
 800726e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d04f      	beq.n	8007316 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fc2f 	bl	8007ada <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d041      	beq.n	800730e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3314      	adds	r3, #20
 8007290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3314      	adds	r3, #20
 80072b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1d9      	bne.n	800728a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d013      	beq.n	8007306 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	4a7e      	ldr	r2, [pc, #504]	; (80074dc <HAL_UART_IRQHandler+0x3e0>)
 80072e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fc fcb0 	bl	8003c50 <HAL_DMA_Abort_IT>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d016      	beq.n	8007324 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	e00e      	b.n	8007324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9a5 	bl	8007656 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730c:	e00a      	b.n	8007324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9a1 	bl	8007656 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	e006      	b.n	8007324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f99d 	bl	8007656 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007322:	e175      	b.n	8007610 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	bf00      	nop
    return;
 8007326:	e173      	b.n	8007610 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	2b01      	cmp	r3, #1
 800732e:	f040 814f 	bne.w	80075d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8148 	beq.w	80075d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007344:	f003 0310 	and.w	r3, r3, #16
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8141 	beq.w	80075d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800734e:	2300      	movs	r3, #0
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	60bb      	str	r3, [r7, #8]
 8007362:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80b6 	beq.w	80074e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007380:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8145 	beq.w	8007614 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800738e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007392:	429a      	cmp	r2, r3
 8007394:	f080 813e 	bcs.w	8007614 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800739e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	f000 8088 	beq.w	80074bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1d9      	bne.n	80073ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3314      	adds	r3, #20
 80073fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007402:	e853 3f00 	ldrex	r3, [r3]
 8007406:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800740a:	f023 0301 	bic.w	r3, r3, #1
 800740e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800741c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007420:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007424:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800742e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e1      	bne.n	80073f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3314      	adds	r3, #20
 800743a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800744a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3314      	adds	r3, #20
 8007454:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007458:	66fa      	str	r2, [r7, #108]	; 0x6c
 800745a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800745e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e3      	bne.n	8007434 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800748a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748c:	f023 0310 	bic.w	r3, r3, #16
 8007490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800749e:	65ba      	str	r2, [r7, #88]	; 0x58
 80074a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e3      	bne.n	800747a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fc fb8e 	bl	8003bd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8c8 	bl	8007668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074d8:	e09c      	b.n	8007614 <HAL_UART_IRQHandler+0x518>
 80074da:	bf00      	nop
 80074dc:	08007b9f 	.word	0x08007b9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 808e 	beq.w	8007618 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8089 	beq.w	8007618 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	330c      	adds	r3, #12
 800750c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800751c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800752a:	647a      	str	r2, [r7, #68]	; 0x44
 800752c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e3      	bne.n	8007506 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3314      	adds	r3, #20
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	623b      	str	r3, [r7, #32]
   return(result);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007562:	633a      	str	r2, [r7, #48]	; 0x30
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	60fb      	str	r3, [r7, #12]
   return(result);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0310 	bic.w	r3, r3, #16
 800759a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075a8:	61fa      	str	r2, [r7, #28]
 80075aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	69b9      	ldr	r1, [r7, #24]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	617b      	str	r3, [r7, #20]
   return(result);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e3      	bne.n	8007584 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f84d 	bl	8007668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ce:	e023      	b.n	8007618 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <HAL_UART_IRQHandler+0x4f4>
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 faec 	bl	8007bc6 <UART_Transmit_IT>
    return;
 80075ee:	e014      	b.n	800761a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <HAL_UART_IRQHandler+0x51e>
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d008      	beq.n	800761a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fb2b 	bl	8007c64 <UART_EndTransmit_IT>
    return;
 800760e:	e004      	b.n	800761a <HAL_UART_IRQHandler+0x51e>
    return;
 8007610:	bf00      	nop
 8007612:	e002      	b.n	800761a <HAL_UART_IRQHandler+0x51e>
      return;
 8007614:	bf00      	nop
 8007616:	e000      	b.n	800761a <HAL_UART_IRQHandler+0x51e>
      return;
 8007618:	bf00      	nop
  }
}
 800761a:	37e8      	adds	r7, #232	; 0xe8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr

08007632 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr

08007644 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr

08007656 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr

08007668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	bc80      	pop	{r7}
 800767c:	4770      	bx	lr

0800767e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b09c      	sub	sp, #112	; 0x70
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d172      	bne.n	8007780 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	2200      	movs	r2, #0
 800769e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80076c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e5      	bne.n	80076a0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3314      	adds	r3, #20
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	667b      	str	r3, [r7, #100]	; 0x64
 80076ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3314      	adds	r3, #20
 80076f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076f4:	647a      	str	r2, [r7, #68]	; 0x44
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e5      	bne.n	80076d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3314      	adds	r3, #20
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	623b      	str	r3, [r7, #32]
   return(result);
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771e:	663b      	str	r3, [r7, #96]	; 0x60
 8007720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3314      	adds	r3, #20
 8007726:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007728:	633a      	str	r2, [r7, #48]	; 0x30
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800772e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e5      	bne.n	8007708 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800773c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773e:	2220      	movs	r2, #32
 8007740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	2b01      	cmp	r3, #1
 800774a:	d119      	bne.n	8007780 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	330c      	adds	r3, #12
 8007752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	60fb      	str	r3, [r7, #12]
   return(result);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0310 	bic.w	r3, r3, #16
 8007762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	330c      	adds	r3, #12
 800776a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800776c:	61fa      	str	r2, [r7, #28]
 800776e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	69b9      	ldr	r1, [r7, #24]
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	617b      	str	r3, [r7, #20]
   return(result);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e5      	bne.n	800774c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007782:	2200      	movs	r2, #0
 8007784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	2b01      	cmp	r3, #1
 800778c:	d106      	bne.n	800779c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800778e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007792:	4619      	mov	r1, r3
 8007794:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007796:	f7ff ff67 	bl	8007668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800779a:	e002      	b.n	80077a2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800779c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800779e:	f7ff ff48 	bl	8007632 <HAL_UART_RxCpltCallback>
}
 80077a2:	bf00      	nop
 80077a4:	3770      	adds	r7, #112	; 0x70
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d108      	bne.n	80077d8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4619      	mov	r1, r3
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff ff49 	bl	8007668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077d6:	e002      	b.n	80077de <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff ff33 	bl	8007644 <HAL_UART_RxHalfCpltCallback>
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b00      	cmp	r3, #0
 8007804:	bf14      	ite	ne
 8007806:	2301      	movne	r3, #1
 8007808:	2300      	moveq	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b21      	cmp	r3, #33	; 0x21
 8007818:	d108      	bne.n	800782c <UART_DMAError+0x46>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007826:	68b8      	ldr	r0, [r7, #8]
 8007828:	f000 f930 	bl	8007a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	bf14      	ite	ne
 800783a:	2301      	movne	r3, #1
 800783c:	2300      	moveq	r3, #0
 800783e:	b2db      	uxtb	r3, r3
 8007840:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b22      	cmp	r3, #34	; 0x22
 800784c:	d108      	bne.n	8007860 <UART_DMAError+0x7a>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800785a:	68b8      	ldr	r0, [r7, #8]
 800785c:	f000 f93d 	bl	8007ada <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007864:	f043 0210 	orr.w	r2, r3, #16
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800786c:	68b8      	ldr	r0, [r7, #8]
 800786e:	f7ff fef2 	bl	8007656 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b090      	sub	sp, #64	; 0x40
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	603b      	str	r3, [r7, #0]
 8007886:	4613      	mov	r3, r2
 8007888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800788a:	e050      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800788c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d04c      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0x30>
 800789a:	f7fb ffa7 	bl	80037ec <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d241      	bcs.n	800792e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078ca:	637a      	str	r2, [r7, #52]	; 0x34
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3314      	adds	r3, #20
 80078e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	613b      	str	r3, [r7, #16]
   return(result);
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f023 0301 	bic.w	r3, r3, #1
 80078f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3314      	adds	r3, #20
 80078fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078fe:	623a      	str	r2, [r7, #32]
 8007900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	69f9      	ldr	r1, [r7, #28]
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	61bb      	str	r3, [r7, #24]
   return(result);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e5      	bne.n	80078de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e00f      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4013      	ands	r3, r2
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	bf0c      	ite	eq
 800793e:	2301      	moveq	r3, #1
 8007940:	2300      	movne	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	429a      	cmp	r2, r3
 800794a:	d09f      	beq.n	800788c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3740      	adds	r7, #64	; 0x40
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b098      	sub	sp, #96	; 0x60
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2222      	movs	r2, #34	; 0x22
 800797c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007984:	4a3e      	ldr	r2, [pc, #248]	; (8007a80 <UART_Start_Receive_DMA+0x128>)
 8007986:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	4a3d      	ldr	r2, [pc, #244]	; (8007a84 <UART_Start_Receive_DMA+0x12c>)
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007994:	4a3c      	ldr	r2, [pc, #240]	; (8007a88 <UART_Start_Receive_DMA+0x130>)
 8007996:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799c:	2200      	movs	r2, #0
 800799e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079a0:	f107 0308 	add.w	r3, r7, #8
 80079a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	f7fc f8ae 	bl	8003b18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80079bc:	2300      	movs	r3, #0
 80079be:	613b      	str	r3, [r7, #16]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	613b      	str	r3, [r7, #16]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d019      	beq.n	8007a0e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	330c      	adds	r3, #12
 80079e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80079fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007a00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e5      	bne.n	80079da <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3314      	adds	r3, #20
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	f043 0301 	orr.w	r3, r3, #1
 8007a24:	657b      	str	r3, [r7, #84]	; 0x54
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3314      	adds	r3, #20
 8007a2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e5      	bne.n	8007a0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3314      	adds	r3, #20
 8007a48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	617b      	str	r3, [r7, #20]
   return(result);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a58:	653b      	str	r3, [r7, #80]	; 0x50
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a62:	627a      	str	r2, [r7, #36]	; 0x24
 8007a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6a39      	ldr	r1, [r7, #32]
 8007a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e5      	bne.n	8007a42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3760      	adds	r7, #96	; 0x60
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	0800767f 	.word	0x0800767f
 8007a84:	080077ab 	.word	0x080077ab
 8007a88:	080077e7 	.word	0x080077e7

08007a8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b089      	sub	sp, #36	; 0x24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007aaa:	61fb      	str	r3, [r7, #28]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	61ba      	str	r2, [r7, #24]
 8007ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e5      	bne.n	8007a94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007ad0:	bf00      	nop
 8007ad2:	3724      	adds	r7, #36	; 0x24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr

08007ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b095      	sub	sp, #84	; 0x54
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b02:	643a      	str	r2, [r7, #64]	; 0x40
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e5      	bne.n	8007ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3314      	adds	r3, #20
 8007b1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3314      	adds	r3, #20
 8007b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e5      	bne.n	8007b16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d119      	bne.n	8007b86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	330c      	adds	r3, #12
 8007b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0310 	bic.w	r3, r3, #16
 8007b68:	647b      	str	r3, [r7, #68]	; 0x44
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b72:	61ba      	str	r2, [r7, #24]
 8007b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b94:	bf00      	nop
 8007b96:	3754      	adds	r7, #84	; 0x54
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff fd4c 	bl	8007656 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b21      	cmp	r3, #33	; 0x21
 8007bd8:	d13e      	bne.n	8007c58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be2:	d114      	bne.n	8007c0e <UART_Transmit_IT+0x48>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d110      	bne.n	8007c0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	1c9a      	adds	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	621a      	str	r2, [r3, #32]
 8007c0c:	e008      	b.n	8007c20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	1c59      	adds	r1, r3, #1
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6211      	str	r1, [r2, #32]
 8007c18:	781a      	ldrb	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10f      	bne.n	8007c54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e000      	b.n	8007c5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c58:	2302      	movs	r3, #2
  }
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fccb 	bl	8007620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08c      	sub	sp, #48	; 0x30
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b22      	cmp	r3, #34	; 0x22
 8007ca6:	f040 80ae 	bne.w	8007e06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb2:	d117      	bne.n	8007ce4 <UART_Receive_IT+0x50>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d113      	bne.n	8007ce4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	1c9a      	adds	r2, r3, #2
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	629a      	str	r2, [r3, #40]	; 0x28
 8007ce2:	e026      	b.n	8007d32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf6:	d007      	beq.n	8007d08 <UART_Receive_IT+0x74>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <UART_Receive_IT+0x82>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e008      	b.n	8007d28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d15d      	bne.n	8007e02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0220 	bic.w	r2, r2, #32
 8007d54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	695a      	ldr	r2, [r3, #20]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d135      	bne.n	8007df8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	613b      	str	r3, [r7, #16]
   return(result);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f023 0310 	bic.w	r3, r3, #16
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	330c      	adds	r3, #12
 8007db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db2:	623a      	str	r2, [r7, #32]
 8007db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	69f9      	ldr	r1, [r7, #28]
 8007db8:	6a3a      	ldr	r2, [r7, #32]
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e5      	bne.n	8007d92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0310 	and.w	r3, r3, #16
 8007dd0:	2b10      	cmp	r3, #16
 8007dd2:	d10a      	bne.n	8007dea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fc39 	bl	8007668 <HAL_UARTEx_RxEventCallback>
 8007df6:	e002      	b.n	8007dfe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff fc1a 	bl	8007632 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e002      	b.n	8007e08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	e000      	b.n	8007e08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e06:	2302      	movs	r3, #2
  }
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3730      	adds	r7, #48	; 0x30
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e4a:	f023 030c 	bic.w	r3, r3, #12
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6812      	ldr	r2, [r2, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	430b      	orrs	r3, r1
 8007e56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a2c      	ldr	r2, [pc, #176]	; (8007f24 <UART_SetConfig+0x114>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d103      	bne.n	8007e80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007e78:	f7fd ff98 	bl	8005dac <HAL_RCC_GetPCLK2Freq>
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	e002      	b.n	8007e86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007e80:	f7fd ff80 	bl	8005d84 <HAL_RCC_GetPCLK1Freq>
 8007e84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009a      	lsls	r2, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9c:	4a22      	ldr	r2, [pc, #136]	; (8007f28 <UART_SetConfig+0x118>)
 8007e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	0119      	lsls	r1, r3, #4
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009a      	lsls	r2, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ebc:	4b1a      	ldr	r3, [pc, #104]	; (8007f28 <UART_SetConfig+0x118>)
 8007ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	2064      	movs	r0, #100	; 0x64
 8007ec6:	fb00 f303 	mul.w	r3, r0, r3
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	3332      	adds	r3, #50	; 0x32
 8007ed0:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <UART_SetConfig+0x118>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007edc:	4419      	add	r1, r3
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009a      	lsls	r2, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <UART_SetConfig+0x118>)
 8007ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	2064      	movs	r0, #100	; 0x64
 8007efe:	fb00 f303 	mul.w	r3, r0, r3
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	011b      	lsls	r3, r3, #4
 8007f06:	3332      	adds	r3, #50	; 0x32
 8007f08:	4a07      	ldr	r2, [pc, #28]	; (8007f28 <UART_SetConfig+0x118>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	f003 020f 	and.w	r2, r3, #15
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	440a      	add	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	40013800 	.word	0x40013800
 8007f28:	51eb851f 	.word	0x51eb851f

08007f2c <_Znwj>:
 8007f2c:	2801      	cmp	r0, #1
 8007f2e:	bf38      	it	cc
 8007f30:	2001      	movcc	r0, #1
 8007f32:	b510      	push	{r4, lr}
 8007f34:	4604      	mov	r4, r0
 8007f36:	4620      	mov	r0, r4
 8007f38:	f001 fd20 	bl	800997c <malloc>
 8007f3c:	b930      	cbnz	r0, 8007f4c <_Znwj+0x20>
 8007f3e:	f000 f807 	bl	8007f50 <_ZSt15get_new_handlerv>
 8007f42:	b908      	cbnz	r0, 8007f48 <_Znwj+0x1c>
 8007f44:	f001 fce8 	bl	8009918 <abort>
 8007f48:	4780      	blx	r0
 8007f4a:	e7f4      	b.n	8007f36 <_Znwj+0xa>
 8007f4c:	bd10      	pop	{r4, pc}
	...

08007f50 <_ZSt15get_new_handlerv>:
 8007f50:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <_ZSt15get_new_handlerv+0xc>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	f3bf 8f5b 	dmb	ish
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	200007c4 	.word	0x200007c4

08007f60 <tanf>:
 8007f60:	b507      	push	{r0, r1, r2, lr}
 8007f62:	4a11      	ldr	r2, [pc, #68]	; (8007fa8 <tanf+0x48>)
 8007f64:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	dc06      	bgt.n	8007f7c <tanf+0x1c>
 8007f6e:	2201      	movs	r2, #1
 8007f70:	2100      	movs	r1, #0
 8007f72:	b003      	add	sp, #12
 8007f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f78:	f001 ba58 	b.w	800942c <__kernel_tanf>
 8007f7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007f80:	db04      	blt.n	8007f8c <tanf+0x2c>
 8007f82:	f7f8 fdf5 	bl	8000b70 <__aeabi_fsub>
 8007f86:	b003      	add	sp, #12
 8007f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f8c:	4669      	mov	r1, sp
 8007f8e:	f000 fe3d 	bl	8008c0c <__ieee754_rem_pio2f>
 8007f92:	0042      	lsls	r2, r0, #1
 8007f94:	f002 0202 	and.w	r2, r2, #2
 8007f98:	9901      	ldr	r1, [sp, #4]
 8007f9a:	9800      	ldr	r0, [sp, #0]
 8007f9c:	f1c2 0201 	rsb	r2, r2, #1
 8007fa0:	f001 fa44 	bl	800942c <__kernel_tanf>
 8007fa4:	e7ef      	b.n	8007f86 <tanf+0x26>
 8007fa6:	bf00      	nop
 8007fa8:	3f490fda 	.word	0x3f490fda

08007fac <pow>:
 8007fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	f000 f862 	bl	8008080 <__ieee754_pow>
 8007fbc:	4622      	mov	r2, r4
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	462b      	mov	r3, r5
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 fd20 	bl	8000a0c <__aeabi_dcmpun>
 8007fcc:	bbc8      	cbnz	r0, 8008042 <pow+0x96>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 fce7 	bl	80009a8 <__aeabi_dcmpeq>
 8007fda:	b1b8      	cbz	r0, 800800c <pow+0x60>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2300      	movs	r3, #0
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	f7f8 fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d141      	bne.n	8008070 <pow+0xc4>
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f001 fb79 	bl	80096e6 <finite>
 8007ff4:	b328      	cbz	r0, 8008042 <pow+0x96>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f7f8 fcdd 	bl	80009bc <__aeabi_dcmplt>
 8008002:	b1f0      	cbz	r0, 8008042 <pow+0x96>
 8008004:	f001 fc90 	bl	8009928 <__errno>
 8008008:	2322      	movs	r3, #34	; 0x22
 800800a:	e019      	b.n	8008040 <pow+0x94>
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f001 fb69 	bl	80096e6 <finite>
 8008014:	b9c8      	cbnz	r0, 800804a <pow+0x9e>
 8008016:	4640      	mov	r0, r8
 8008018:	4649      	mov	r1, r9
 800801a:	f001 fb64 	bl	80096e6 <finite>
 800801e:	b1a0      	cbz	r0, 800804a <pow+0x9e>
 8008020:	4620      	mov	r0, r4
 8008022:	4629      	mov	r1, r5
 8008024:	f001 fb5f 	bl	80096e6 <finite>
 8008028:	b178      	cbz	r0, 800804a <pow+0x9e>
 800802a:	4632      	mov	r2, r6
 800802c:	463b      	mov	r3, r7
 800802e:	4630      	mov	r0, r6
 8008030:	4639      	mov	r1, r7
 8008032:	f7f8 fceb 	bl	8000a0c <__aeabi_dcmpun>
 8008036:	2800      	cmp	r0, #0
 8008038:	d0e4      	beq.n	8008004 <pow+0x58>
 800803a:	f001 fc75 	bl	8009928 <__errno>
 800803e:	2321      	movs	r3, #33	; 0x21
 8008040:	6003      	str	r3, [r0, #0]
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804a:	2200      	movs	r2, #0
 800804c:	2300      	movs	r3, #0
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 fca9 	bl	80009a8 <__aeabi_dcmpeq>
 8008056:	2800      	cmp	r0, #0
 8008058:	d0f3      	beq.n	8008042 <pow+0x96>
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f001 fb42 	bl	80096e6 <finite>
 8008062:	2800      	cmp	r0, #0
 8008064:	d0ed      	beq.n	8008042 <pow+0x96>
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f001 fb3c 	bl	80096e6 <finite>
 800806e:	e7c8      	b.n	8008002 <pow+0x56>
 8008070:	2600      	movs	r6, #0
 8008072:	4f01      	ldr	r7, [pc, #4]	; (8008078 <pow+0xcc>)
 8008074:	e7e5      	b.n	8008042 <pow+0x96>
 8008076:	bf00      	nop
 8008078:	3ff00000 	.word	0x3ff00000
 800807c:	00000000 	.word	0x00000000

08008080 <__ieee754_pow>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	b093      	sub	sp, #76	; 0x4c
 8008086:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800808a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800808e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008092:	4689      	mov	r9, r1
 8008094:	ea56 0102 	orrs.w	r1, r6, r2
 8008098:	4680      	mov	r8, r0
 800809a:	d111      	bne.n	80080c0 <__ieee754_pow+0x40>
 800809c:	1803      	adds	r3, r0, r0
 800809e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80080a2:	4152      	adcs	r2, r2
 80080a4:	4299      	cmp	r1, r3
 80080a6:	4b82      	ldr	r3, [pc, #520]	; (80082b0 <__ieee754_pow+0x230>)
 80080a8:	4193      	sbcs	r3, r2
 80080aa:	f080 84b9 	bcs.w	8008a20 <__ieee754_pow+0x9a0>
 80080ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080b2:	4640      	mov	r0, r8
 80080b4:	4649      	mov	r1, r9
 80080b6:	f7f8 f859 	bl	800016c <__adddf3>
 80080ba:	4683      	mov	fp, r0
 80080bc:	468c      	mov	ip, r1
 80080be:	e06f      	b.n	80081a0 <__ieee754_pow+0x120>
 80080c0:	4b7c      	ldr	r3, [pc, #496]	; (80082b4 <__ieee754_pow+0x234>)
 80080c2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80080c6:	429c      	cmp	r4, r3
 80080c8:	464d      	mov	r5, r9
 80080ca:	4682      	mov	sl, r0
 80080cc:	dc06      	bgt.n	80080dc <__ieee754_pow+0x5c>
 80080ce:	d101      	bne.n	80080d4 <__ieee754_pow+0x54>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d1ec      	bne.n	80080ae <__ieee754_pow+0x2e>
 80080d4:	429e      	cmp	r6, r3
 80080d6:	dc01      	bgt.n	80080dc <__ieee754_pow+0x5c>
 80080d8:	d10f      	bne.n	80080fa <__ieee754_pow+0x7a>
 80080da:	b172      	cbz	r2, 80080fa <__ieee754_pow+0x7a>
 80080dc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80080e0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80080e4:	ea55 050a 	orrs.w	r5, r5, sl
 80080e8:	d1e1      	bne.n	80080ae <__ieee754_pow+0x2e>
 80080ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80080ee:	18db      	adds	r3, r3, r3
 80080f0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80080f4:	4152      	adcs	r2, r2
 80080f6:	429d      	cmp	r5, r3
 80080f8:	e7d5      	b.n	80080a6 <__ieee754_pow+0x26>
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	da39      	bge.n	8008172 <__ieee754_pow+0xf2>
 80080fe:	4b6e      	ldr	r3, [pc, #440]	; (80082b8 <__ieee754_pow+0x238>)
 8008100:	429e      	cmp	r6, r3
 8008102:	dc52      	bgt.n	80081aa <__ieee754_pow+0x12a>
 8008104:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008108:	429e      	cmp	r6, r3
 800810a:	f340 849c 	ble.w	8008a46 <__ieee754_pow+0x9c6>
 800810e:	1533      	asrs	r3, r6, #20
 8008110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008114:	2b14      	cmp	r3, #20
 8008116:	dd0f      	ble.n	8008138 <__ieee754_pow+0xb8>
 8008118:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800811c:	fa22 f103 	lsr.w	r1, r2, r3
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	4293      	cmp	r3, r2
 8008126:	f040 848e 	bne.w	8008a46 <__ieee754_pow+0x9c6>
 800812a:	f001 0101 	and.w	r1, r1, #1
 800812e:	f1c1 0302 	rsb	r3, r1, #2
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	b182      	cbz	r2, 8008158 <__ieee754_pow+0xd8>
 8008136:	e05d      	b.n	80081f4 <__ieee754_pow+0x174>
 8008138:	2a00      	cmp	r2, #0
 800813a:	d159      	bne.n	80081f0 <__ieee754_pow+0x170>
 800813c:	f1c3 0314 	rsb	r3, r3, #20
 8008140:	fa46 f103 	asr.w	r1, r6, r3
 8008144:	fa01 f303 	lsl.w	r3, r1, r3
 8008148:	42b3      	cmp	r3, r6
 800814a:	f040 8479 	bne.w	8008a40 <__ieee754_pow+0x9c0>
 800814e:	f001 0101 	and.w	r1, r1, #1
 8008152:	f1c1 0302 	rsb	r3, r1, #2
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	4b58      	ldr	r3, [pc, #352]	; (80082bc <__ieee754_pow+0x23c>)
 800815a:	429e      	cmp	r6, r3
 800815c:	d132      	bne.n	80081c4 <__ieee754_pow+0x144>
 800815e:	2f00      	cmp	r7, #0
 8008160:	f280 846a 	bge.w	8008a38 <__ieee754_pow+0x9b8>
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	2000      	movs	r0, #0
 800816a:	4954      	ldr	r1, [pc, #336]	; (80082bc <__ieee754_pow+0x23c>)
 800816c:	f7f8 fade 	bl	800072c <__aeabi_ddiv>
 8008170:	e7a3      	b.n	80080ba <__ieee754_pow+0x3a>
 8008172:	2300      	movs	r3, #0
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	2a00      	cmp	r2, #0
 8008178:	d13c      	bne.n	80081f4 <__ieee754_pow+0x174>
 800817a:	4b4e      	ldr	r3, [pc, #312]	; (80082b4 <__ieee754_pow+0x234>)
 800817c:	429e      	cmp	r6, r3
 800817e:	d1eb      	bne.n	8008158 <__ieee754_pow+0xd8>
 8008180:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008184:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008188:	ea53 030a 	orrs.w	r3, r3, sl
 800818c:	f000 8448 	beq.w	8008a20 <__ieee754_pow+0x9a0>
 8008190:	4b4b      	ldr	r3, [pc, #300]	; (80082c0 <__ieee754_pow+0x240>)
 8008192:	429c      	cmp	r4, r3
 8008194:	dd0b      	ble.n	80081ae <__ieee754_pow+0x12e>
 8008196:	2f00      	cmp	r7, #0
 8008198:	f2c0 8448 	blt.w	8008a2c <__ieee754_pow+0x9ac>
 800819c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80081a0:	4658      	mov	r0, fp
 80081a2:	4661      	mov	r1, ip
 80081a4:	b013      	add	sp, #76	; 0x4c
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	2302      	movs	r3, #2
 80081ac:	e7e2      	b.n	8008174 <__ieee754_pow+0xf4>
 80081ae:	2f00      	cmp	r7, #0
 80081b0:	f04f 0b00 	mov.w	fp, #0
 80081b4:	f04f 0c00 	mov.w	ip, #0
 80081b8:	daf2      	bge.n	80081a0 <__ieee754_pow+0x120>
 80081ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80081be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80081c2:	e7ed      	b.n	80081a0 <__ieee754_pow+0x120>
 80081c4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80081c8:	d106      	bne.n	80081d8 <__ieee754_pow+0x158>
 80081ca:	4642      	mov	r2, r8
 80081cc:	464b      	mov	r3, r9
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f8 f981 	bl	80004d8 <__aeabi_dmul>
 80081d6:	e770      	b.n	80080ba <__ieee754_pow+0x3a>
 80081d8:	4b3a      	ldr	r3, [pc, #232]	; (80082c4 <__ieee754_pow+0x244>)
 80081da:	429f      	cmp	r7, r3
 80081dc:	d10a      	bne.n	80081f4 <__ieee754_pow+0x174>
 80081de:	2d00      	cmp	r5, #0
 80081e0:	db08      	blt.n	80081f4 <__ieee754_pow+0x174>
 80081e2:	4640      	mov	r0, r8
 80081e4:	4649      	mov	r1, r9
 80081e6:	b013      	add	sp, #76	; 0x4c
 80081e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	f000 bc5e 	b.w	8008aac <__ieee754_sqrt>
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4640      	mov	r0, r8
 80081f6:	4649      	mov	r1, r9
 80081f8:	f001 fa72 	bl	80096e0 <fabs>
 80081fc:	4683      	mov	fp, r0
 80081fe:	468c      	mov	ip, r1
 8008200:	f1ba 0f00 	cmp.w	sl, #0
 8008204:	d128      	bne.n	8008258 <__ieee754_pow+0x1d8>
 8008206:	b124      	cbz	r4, 8008212 <__ieee754_pow+0x192>
 8008208:	4b2c      	ldr	r3, [pc, #176]	; (80082bc <__ieee754_pow+0x23c>)
 800820a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800820e:	429a      	cmp	r2, r3
 8008210:	d122      	bne.n	8008258 <__ieee754_pow+0x1d8>
 8008212:	2f00      	cmp	r7, #0
 8008214:	da07      	bge.n	8008226 <__ieee754_pow+0x1a6>
 8008216:	465a      	mov	r2, fp
 8008218:	4663      	mov	r3, ip
 800821a:	2000      	movs	r0, #0
 800821c:	4927      	ldr	r1, [pc, #156]	; (80082bc <__ieee754_pow+0x23c>)
 800821e:	f7f8 fa85 	bl	800072c <__aeabi_ddiv>
 8008222:	4683      	mov	fp, r0
 8008224:	468c      	mov	ip, r1
 8008226:	2d00      	cmp	r5, #0
 8008228:	daba      	bge.n	80081a0 <__ieee754_pow+0x120>
 800822a:	9b00      	ldr	r3, [sp, #0]
 800822c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008230:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008234:	4323      	orrs	r3, r4
 8008236:	d108      	bne.n	800824a <__ieee754_pow+0x1ca>
 8008238:	465a      	mov	r2, fp
 800823a:	4663      	mov	r3, ip
 800823c:	4658      	mov	r0, fp
 800823e:	4661      	mov	r1, ip
 8008240:	f7f7 ff92 	bl	8000168 <__aeabi_dsub>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	e790      	b.n	800816c <__ieee754_pow+0xec>
 800824a:	9b00      	ldr	r3, [sp, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d1a7      	bne.n	80081a0 <__ieee754_pow+0x120>
 8008250:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008254:	469c      	mov	ip, r3
 8008256:	e7a3      	b.n	80081a0 <__ieee754_pow+0x120>
 8008258:	0feb      	lsrs	r3, r5, #31
 800825a:	3b01      	subs	r3, #1
 800825c:	930c      	str	r3, [sp, #48]	; 0x30
 800825e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	d104      	bne.n	8008270 <__ieee754_pow+0x1f0>
 8008266:	4642      	mov	r2, r8
 8008268:	464b      	mov	r3, r9
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	e7e7      	b.n	8008240 <__ieee754_pow+0x1c0>
 8008270:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <__ieee754_pow+0x248>)
 8008272:	429e      	cmp	r6, r3
 8008274:	f340 80f6 	ble.w	8008464 <__ieee754_pow+0x3e4>
 8008278:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800827c:	429e      	cmp	r6, r3
 800827e:	4b10      	ldr	r3, [pc, #64]	; (80082c0 <__ieee754_pow+0x240>)
 8008280:	dd09      	ble.n	8008296 <__ieee754_pow+0x216>
 8008282:	429c      	cmp	r4, r3
 8008284:	dc0c      	bgt.n	80082a0 <__ieee754_pow+0x220>
 8008286:	2f00      	cmp	r7, #0
 8008288:	da0c      	bge.n	80082a4 <__ieee754_pow+0x224>
 800828a:	2000      	movs	r0, #0
 800828c:	b013      	add	sp, #76	; 0x4c
 800828e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008292:	f001 ba20 	b.w	80096d6 <__math_oflow>
 8008296:	429c      	cmp	r4, r3
 8008298:	dbf5      	blt.n	8008286 <__ieee754_pow+0x206>
 800829a:	4b08      	ldr	r3, [pc, #32]	; (80082bc <__ieee754_pow+0x23c>)
 800829c:	429c      	cmp	r4, r3
 800829e:	dd15      	ble.n	80082cc <__ieee754_pow+0x24c>
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	dcf2      	bgt.n	800828a <__ieee754_pow+0x20a>
 80082a4:	2000      	movs	r0, #0
 80082a6:	b013      	add	sp, #76	; 0x4c
 80082a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	f001 ba0e 	b.w	80096cc <__math_uflow>
 80082b0:	fff00000 	.word	0xfff00000
 80082b4:	7ff00000 	.word	0x7ff00000
 80082b8:	433fffff 	.word	0x433fffff
 80082bc:	3ff00000 	.word	0x3ff00000
 80082c0:	3fefffff 	.word	0x3fefffff
 80082c4:	3fe00000 	.word	0x3fe00000
 80082c8:	41e00000 	.word	0x41e00000
 80082cc:	4661      	mov	r1, ip
 80082ce:	2200      	movs	r2, #0
 80082d0:	4658      	mov	r0, fp
 80082d2:	4b5f      	ldr	r3, [pc, #380]	; (8008450 <__ieee754_pow+0x3d0>)
 80082d4:	f7f7 ff48 	bl	8000168 <__aeabi_dsub>
 80082d8:	a355      	add	r3, pc, #340	; (adr r3, 8008430 <__ieee754_pow+0x3b0>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	4604      	mov	r4, r0
 80082e0:	460d      	mov	r5, r1
 80082e2:	f7f8 f8f9 	bl	80004d8 <__aeabi_dmul>
 80082e6:	a354      	add	r3, pc, #336	; (adr r3, 8008438 <__ieee754_pow+0x3b8>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	4606      	mov	r6, r0
 80082ee:	460f      	mov	r7, r1
 80082f0:	4620      	mov	r0, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	f7f8 f8f0 	bl	80004d8 <__aeabi_dmul>
 80082f8:	2200      	movs	r2, #0
 80082fa:	4682      	mov	sl, r0
 80082fc:	468b      	mov	fp, r1
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	4b54      	ldr	r3, [pc, #336]	; (8008454 <__ieee754_pow+0x3d4>)
 8008304:	f7f8 f8e8 	bl	80004d8 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	a14c      	add	r1, pc, #304	; (adr r1, 8008440 <__ieee754_pow+0x3c0>)
 800830e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008312:	f7f7 ff29 	bl	8000168 <__aeabi_dsub>
 8008316:	4622      	mov	r2, r4
 8008318:	462b      	mov	r3, r5
 800831a:	f7f8 f8dd 	bl	80004d8 <__aeabi_dmul>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	2000      	movs	r0, #0
 8008324:	494c      	ldr	r1, [pc, #304]	; (8008458 <__ieee754_pow+0x3d8>)
 8008326:	f7f7 ff1f 	bl	8000168 <__aeabi_dsub>
 800832a:	4622      	mov	r2, r4
 800832c:	462b      	mov	r3, r5
 800832e:	4680      	mov	r8, r0
 8008330:	4689      	mov	r9, r1
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	f7f8 f8cf 	bl	80004d8 <__aeabi_dmul>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	f7f8 f8c9 	bl	80004d8 <__aeabi_dmul>
 8008346:	a340      	add	r3, pc, #256	; (adr r3, 8008448 <__ieee754_pow+0x3c8>)
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f7f8 f8c4 	bl	80004d8 <__aeabi_dmul>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4650      	mov	r0, sl
 8008356:	4659      	mov	r1, fp
 8008358:	f7f7 ff06 	bl	8000168 <__aeabi_dsub>
 800835c:	f04f 0a00 	mov.w	sl, #0
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4604      	mov	r4, r0
 8008366:	460d      	mov	r5, r1
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f7 fefe 	bl	800016c <__adddf3>
 8008370:	4632      	mov	r2, r6
 8008372:	463b      	mov	r3, r7
 8008374:	4650      	mov	r0, sl
 8008376:	468b      	mov	fp, r1
 8008378:	f7f7 fef6 	bl	8000168 <__aeabi_dsub>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4620      	mov	r0, r4
 8008382:	4629      	mov	r1, r5
 8008384:	f7f7 fef0 	bl	8000168 <__aeabi_dsub>
 8008388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800838c:	9b00      	ldr	r3, [sp, #0]
 800838e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008390:	3b01      	subs	r3, #1
 8008392:	4313      	orrs	r3, r2
 8008394:	f04f 0600 	mov.w	r6, #0
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	bf0c      	ite	eq
 800839e:	4b2f      	ldreq	r3, [pc, #188]	; (800845c <__ieee754_pow+0x3dc>)
 80083a0:	4b2b      	ldrne	r3, [pc, #172]	; (8008450 <__ieee754_pow+0x3d0>)
 80083a2:	4604      	mov	r4, r0
 80083a4:	460d      	mov	r5, r1
 80083a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083aa:	e9cd 2300 	strd	r2, r3, [sp]
 80083ae:	4632      	mov	r2, r6
 80083b0:	463b      	mov	r3, r7
 80083b2:	f7f7 fed9 	bl	8000168 <__aeabi_dsub>
 80083b6:	4652      	mov	r2, sl
 80083b8:	465b      	mov	r3, fp
 80083ba:	f7f8 f88d 	bl	80004d8 <__aeabi_dmul>
 80083be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c2:	4680      	mov	r8, r0
 80083c4:	4689      	mov	r9, r1
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f8 f885 	bl	80004d8 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f7f7 fec9 	bl	800016c <__adddf3>
 80083da:	4632      	mov	r2, r6
 80083dc:	463b      	mov	r3, r7
 80083de:	4680      	mov	r8, r0
 80083e0:	4689      	mov	r9, r1
 80083e2:	4650      	mov	r0, sl
 80083e4:	4659      	mov	r1, fp
 80083e6:	f7f8 f877 	bl	80004d8 <__aeabi_dmul>
 80083ea:	4604      	mov	r4, r0
 80083ec:	460d      	mov	r5, r1
 80083ee:	460b      	mov	r3, r1
 80083f0:	4602      	mov	r2, r0
 80083f2:	4649      	mov	r1, r9
 80083f4:	4640      	mov	r0, r8
 80083f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80083fa:	f7f7 feb7 	bl	800016c <__adddf3>
 80083fe:	4b18      	ldr	r3, [pc, #96]	; (8008460 <__ieee754_pow+0x3e0>)
 8008400:	4682      	mov	sl, r0
 8008402:	4299      	cmp	r1, r3
 8008404:	460f      	mov	r7, r1
 8008406:	460e      	mov	r6, r1
 8008408:	f340 82e5 	ble.w	80089d6 <__ieee754_pow+0x956>
 800840c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008410:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008414:	4303      	orrs	r3, r0
 8008416:	f000 81df 	beq.w	80087d8 <__ieee754_pow+0x758>
 800841a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	f7f8 facb 	bl	80009bc <__aeabi_dcmplt>
 8008426:	3800      	subs	r0, #0
 8008428:	bf18      	it	ne
 800842a:	2001      	movne	r0, #1
 800842c:	e72e      	b.n	800828c <__ieee754_pow+0x20c>
 800842e:	bf00      	nop
 8008430:	60000000 	.word	0x60000000
 8008434:	3ff71547 	.word	0x3ff71547
 8008438:	f85ddf44 	.word	0xf85ddf44
 800843c:	3e54ae0b 	.word	0x3e54ae0b
 8008440:	55555555 	.word	0x55555555
 8008444:	3fd55555 	.word	0x3fd55555
 8008448:	652b82fe 	.word	0x652b82fe
 800844c:	3ff71547 	.word	0x3ff71547
 8008450:	3ff00000 	.word	0x3ff00000
 8008454:	3fd00000 	.word	0x3fd00000
 8008458:	3fe00000 	.word	0x3fe00000
 800845c:	bff00000 	.word	0xbff00000
 8008460:	408fffff 	.word	0x408fffff
 8008464:	4bd2      	ldr	r3, [pc, #840]	; (80087b0 <__ieee754_pow+0x730>)
 8008466:	2200      	movs	r2, #0
 8008468:	402b      	ands	r3, r5
 800846a:	b943      	cbnz	r3, 800847e <__ieee754_pow+0x3fe>
 800846c:	4658      	mov	r0, fp
 800846e:	4661      	mov	r1, ip
 8008470:	4bd0      	ldr	r3, [pc, #832]	; (80087b4 <__ieee754_pow+0x734>)
 8008472:	f7f8 f831 	bl	80004d8 <__aeabi_dmul>
 8008476:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800847a:	4683      	mov	fp, r0
 800847c:	460c      	mov	r4, r1
 800847e:	1523      	asrs	r3, r4, #20
 8008480:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008484:	4413      	add	r3, r2
 8008486:	930b      	str	r3, [sp, #44]	; 0x2c
 8008488:	4bcb      	ldr	r3, [pc, #812]	; (80087b8 <__ieee754_pow+0x738>)
 800848a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800848e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008492:	429c      	cmp	r4, r3
 8008494:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008498:	dd08      	ble.n	80084ac <__ieee754_pow+0x42c>
 800849a:	4bc8      	ldr	r3, [pc, #800]	; (80087bc <__ieee754_pow+0x73c>)
 800849c:	429c      	cmp	r4, r3
 800849e:	f340 8199 	ble.w	80087d4 <__ieee754_pow+0x754>
 80084a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80084a8:	3301      	adds	r3, #1
 80084aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ac:	2600      	movs	r6, #0
 80084ae:	00f3      	lsls	r3, r6, #3
 80084b0:	930d      	str	r3, [sp, #52]	; 0x34
 80084b2:	4bc3      	ldr	r3, [pc, #780]	; (80087c0 <__ieee754_pow+0x740>)
 80084b4:	4658      	mov	r0, fp
 80084b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084be:	4629      	mov	r1, r5
 80084c0:	461a      	mov	r2, r3
 80084c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80084c6:	4623      	mov	r3, r4
 80084c8:	f7f7 fe4e 	bl	8000168 <__aeabi_dsub>
 80084cc:	46da      	mov	sl, fp
 80084ce:	462b      	mov	r3, r5
 80084d0:	4652      	mov	r2, sl
 80084d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80084d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084da:	f7f7 fe47 	bl	800016c <__adddf3>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	2000      	movs	r0, #0
 80084e4:	49b7      	ldr	r1, [pc, #732]	; (80087c4 <__ieee754_pow+0x744>)
 80084e6:	f7f8 f921 	bl	800072c <__aeabi_ddiv>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80084f6:	f7f7 ffef 	bl	80004d8 <__aeabi_dmul>
 80084fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008502:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	46ab      	mov	fp, r5
 800850c:	106d      	asrs	r5, r5, #1
 800850e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008518:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800851c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	4614      	mov	r4, r2
 8008526:	461d      	mov	r5, r3
 8008528:	f7f7 ffd6 	bl	80004d8 <__aeabi_dmul>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008534:	f7f7 fe18 	bl	8000168 <__aeabi_dsub>
 8008538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800853c:	4606      	mov	r6, r0
 800853e:	460f      	mov	r7, r1
 8008540:	4620      	mov	r0, r4
 8008542:	4629      	mov	r1, r5
 8008544:	f7f7 fe10 	bl	8000168 <__aeabi_dsub>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4650      	mov	r0, sl
 800854e:	4659      	mov	r1, fp
 8008550:	f7f7 fe0a 	bl	8000168 <__aeabi_dsub>
 8008554:	4642      	mov	r2, r8
 8008556:	464b      	mov	r3, r9
 8008558:	f7f7 ffbe 	bl	80004d8 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	f7f7 fe00 	bl	8000168 <__aeabi_dsub>
 8008568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800856c:	f7f7 ffb4 	bl	80004d8 <__aeabi_dmul>
 8008570:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008574:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008578:	4610      	mov	r0, r2
 800857a:	4619      	mov	r1, r3
 800857c:	f7f7 ffac 	bl	80004d8 <__aeabi_dmul>
 8008580:	a379      	add	r3, pc, #484	; (adr r3, 8008768 <__ieee754_pow+0x6e8>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	4604      	mov	r4, r0
 8008588:	460d      	mov	r5, r1
 800858a:	f7f7 ffa5 	bl	80004d8 <__aeabi_dmul>
 800858e:	a378      	add	r3, pc, #480	; (adr r3, 8008770 <__ieee754_pow+0x6f0>)
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f7 fdea 	bl	800016c <__adddf3>
 8008598:	4622      	mov	r2, r4
 800859a:	462b      	mov	r3, r5
 800859c:	f7f7 ff9c 	bl	80004d8 <__aeabi_dmul>
 80085a0:	a375      	add	r3, pc, #468	; (adr r3, 8008778 <__ieee754_pow+0x6f8>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f7 fde1 	bl	800016c <__adddf3>
 80085aa:	4622      	mov	r2, r4
 80085ac:	462b      	mov	r3, r5
 80085ae:	f7f7 ff93 	bl	80004d8 <__aeabi_dmul>
 80085b2:	a373      	add	r3, pc, #460	; (adr r3, 8008780 <__ieee754_pow+0x700>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f7 fdd8 	bl	800016c <__adddf3>
 80085bc:	4622      	mov	r2, r4
 80085be:	462b      	mov	r3, r5
 80085c0:	f7f7 ff8a 	bl	80004d8 <__aeabi_dmul>
 80085c4:	a370      	add	r3, pc, #448	; (adr r3, 8008788 <__ieee754_pow+0x708>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 fdcf 	bl	800016c <__adddf3>
 80085ce:	4622      	mov	r2, r4
 80085d0:	462b      	mov	r3, r5
 80085d2:	f7f7 ff81 	bl	80004d8 <__aeabi_dmul>
 80085d6:	a36e      	add	r3, pc, #440	; (adr r3, 8008790 <__ieee754_pow+0x710>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	f7f7 fdc6 	bl	800016c <__adddf3>
 80085e0:	4622      	mov	r2, r4
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	462b      	mov	r3, r5
 80085e8:	4620      	mov	r0, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	f7f7 ff74 	bl	80004d8 <__aeabi_dmul>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	f7f7 ff6e 	bl	80004d8 <__aeabi_dmul>
 80085fc:	4604      	mov	r4, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	f7f7 fdb0 	bl	800016c <__adddf3>
 800860c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008610:	f7f7 ff62 	bl	80004d8 <__aeabi_dmul>
 8008614:	4622      	mov	r2, r4
 8008616:	462b      	mov	r3, r5
 8008618:	f7f7 fda8 	bl	800016c <__adddf3>
 800861c:	4642      	mov	r2, r8
 800861e:	4606      	mov	r6, r0
 8008620:	460f      	mov	r7, r1
 8008622:	464b      	mov	r3, r9
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f7 ff56 	bl	80004d8 <__aeabi_dmul>
 800862c:	2200      	movs	r2, #0
 800862e:	4b66      	ldr	r3, [pc, #408]	; (80087c8 <__ieee754_pow+0x748>)
 8008630:	4682      	mov	sl, r0
 8008632:	468b      	mov	fp, r1
 8008634:	f7f7 fd9a 	bl	800016c <__adddf3>
 8008638:	4632      	mov	r2, r6
 800863a:	463b      	mov	r3, r7
 800863c:	f7f7 fd96 	bl	800016c <__adddf3>
 8008640:	2400      	movs	r4, #0
 8008642:	460d      	mov	r5, r1
 8008644:	4622      	mov	r2, r4
 8008646:	460b      	mov	r3, r1
 8008648:	4640      	mov	r0, r8
 800864a:	4649      	mov	r1, r9
 800864c:	f7f7 ff44 	bl	80004d8 <__aeabi_dmul>
 8008650:	2200      	movs	r2, #0
 8008652:	4680      	mov	r8, r0
 8008654:	4689      	mov	r9, r1
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	4b5b      	ldr	r3, [pc, #364]	; (80087c8 <__ieee754_pow+0x748>)
 800865c:	f7f7 fd84 	bl	8000168 <__aeabi_dsub>
 8008660:	4652      	mov	r2, sl
 8008662:	465b      	mov	r3, fp
 8008664:	f7f7 fd80 	bl	8000168 <__aeabi_dsub>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4630      	mov	r0, r6
 800866e:	4639      	mov	r1, r7
 8008670:	f7f7 fd7a 	bl	8000168 <__aeabi_dsub>
 8008674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008678:	f7f7 ff2e 	bl	80004d8 <__aeabi_dmul>
 800867c:	4622      	mov	r2, r4
 800867e:	4606      	mov	r6, r0
 8008680:	460f      	mov	r7, r1
 8008682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008686:	462b      	mov	r3, r5
 8008688:	f7f7 ff26 	bl	80004d8 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	f7f7 fd6a 	bl	800016c <__adddf3>
 8008698:	2400      	movs	r4, #0
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	f7f7 fd61 	bl	800016c <__adddf3>
 80086aa:	a33b      	add	r3, pc, #236	; (adr r3, 8008798 <__ieee754_pow+0x718>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	4620      	mov	r0, r4
 80086b2:	460d      	mov	r5, r1
 80086b4:	f7f7 ff10 	bl	80004d8 <__aeabi_dmul>
 80086b8:	4642      	mov	r2, r8
 80086ba:	464b      	mov	r3, r9
 80086bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086c0:	4620      	mov	r0, r4
 80086c2:	4629      	mov	r1, r5
 80086c4:	f7f7 fd50 	bl	8000168 <__aeabi_dsub>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f7 fd4a 	bl	8000168 <__aeabi_dsub>
 80086d4:	a332      	add	r3, pc, #200	; (adr r3, 80087a0 <__ieee754_pow+0x720>)
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f7f7 fefd 	bl	80004d8 <__aeabi_dmul>
 80086de:	a332      	add	r3, pc, #200	; (adr r3, 80087a8 <__ieee754_pow+0x728>)
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	4606      	mov	r6, r0
 80086e6:	460f      	mov	r7, r1
 80086e8:	4620      	mov	r0, r4
 80086ea:	4629      	mov	r1, r5
 80086ec:	f7f7 fef4 	bl	80004d8 <__aeabi_dmul>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f7 fd38 	bl	800016c <__adddf3>
 80086fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086fe:	4b33      	ldr	r3, [pc, #204]	; (80087cc <__ieee754_pow+0x74c>)
 8008700:	f04f 0a00 	mov.w	sl, #0
 8008704:	4413      	add	r3, r2
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fd2f 	bl	800016c <__adddf3>
 800870e:	4680      	mov	r8, r0
 8008710:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008712:	4689      	mov	r9, r1
 8008714:	f7f7 fe76 	bl	8000404 <__aeabi_i2d>
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800871e:	4b2c      	ldr	r3, [pc, #176]	; (80087d0 <__ieee754_pow+0x750>)
 8008720:	4413      	add	r3, r2
 8008722:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008726:	4642      	mov	r2, r8
 8008728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800872c:	464b      	mov	r3, r9
 800872e:	f7f7 fd1d 	bl	800016c <__adddf3>
 8008732:	4632      	mov	r2, r6
 8008734:	463b      	mov	r3, r7
 8008736:	f7f7 fd19 	bl	800016c <__adddf3>
 800873a:	4622      	mov	r2, r4
 800873c:	462b      	mov	r3, r5
 800873e:	f7f7 fd15 	bl	800016c <__adddf3>
 8008742:	4622      	mov	r2, r4
 8008744:	462b      	mov	r3, r5
 8008746:	4650      	mov	r0, sl
 8008748:	468b      	mov	fp, r1
 800874a:	f7f7 fd0d 	bl	8000168 <__aeabi_dsub>
 800874e:	4632      	mov	r2, r6
 8008750:	463b      	mov	r3, r7
 8008752:	f7f7 fd09 	bl	8000168 <__aeabi_dsub>
 8008756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800875a:	f7f7 fd05 	bl	8000168 <__aeabi_dsub>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4640      	mov	r0, r8
 8008764:	4649      	mov	r1, r9
 8008766:	e60d      	b.n	8008384 <__ieee754_pow+0x304>
 8008768:	4a454eef 	.word	0x4a454eef
 800876c:	3fca7e28 	.word	0x3fca7e28
 8008770:	93c9db65 	.word	0x93c9db65
 8008774:	3fcd864a 	.word	0x3fcd864a
 8008778:	a91d4101 	.word	0xa91d4101
 800877c:	3fd17460 	.word	0x3fd17460
 8008780:	518f264d 	.word	0x518f264d
 8008784:	3fd55555 	.word	0x3fd55555
 8008788:	db6fabff 	.word	0xdb6fabff
 800878c:	3fdb6db6 	.word	0x3fdb6db6
 8008790:	33333303 	.word	0x33333303
 8008794:	3fe33333 	.word	0x3fe33333
 8008798:	e0000000 	.word	0xe0000000
 800879c:	3feec709 	.word	0x3feec709
 80087a0:	dc3a03fd 	.word	0xdc3a03fd
 80087a4:	3feec709 	.word	0x3feec709
 80087a8:	145b01f5 	.word	0x145b01f5
 80087ac:	be3e2fe0 	.word	0xbe3e2fe0
 80087b0:	7ff00000 	.word	0x7ff00000
 80087b4:	43400000 	.word	0x43400000
 80087b8:	0003988e 	.word	0x0003988e
 80087bc:	000bb679 	.word	0x000bb679
 80087c0:	0800ca10 	.word	0x0800ca10
 80087c4:	3ff00000 	.word	0x3ff00000
 80087c8:	40080000 	.word	0x40080000
 80087cc:	0800ca30 	.word	0x0800ca30
 80087d0:	0800ca20 	.word	0x0800ca20
 80087d4:	2601      	movs	r6, #1
 80087d6:	e66a      	b.n	80084ae <__ieee754_pow+0x42e>
 80087d8:	a39d      	add	r3, pc, #628	; (adr r3, 8008a50 <__ieee754_pow+0x9d0>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	4640      	mov	r0, r8
 80087e0:	4649      	mov	r1, r9
 80087e2:	f7f7 fcc3 	bl	800016c <__adddf3>
 80087e6:	4622      	mov	r2, r4
 80087e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ec:	462b      	mov	r3, r5
 80087ee:	4650      	mov	r0, sl
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f7 fcb9 	bl	8000168 <__aeabi_dsub>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087fe:	f7f8 f8fb 	bl	80009f8 <__aeabi_dcmpgt>
 8008802:	2800      	cmp	r0, #0
 8008804:	f47f ae09 	bne.w	800841a <__ieee754_pow+0x39a>
 8008808:	4aa3      	ldr	r2, [pc, #652]	; (8008a98 <__ieee754_pow+0xa18>)
 800880a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800880e:	4293      	cmp	r3, r2
 8008810:	f340 8101 	ble.w	8008a16 <__ieee754_pow+0x996>
 8008814:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008818:	2000      	movs	r0, #0
 800881a:	151b      	asrs	r3, r3, #20
 800881c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008820:	fa4a f303 	asr.w	r3, sl, r3
 8008824:	4433      	add	r3, r6
 8008826:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800882a:	4f9c      	ldr	r7, [pc, #624]	; (8008a9c <__ieee754_pow+0xa1c>)
 800882c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008830:	4117      	asrs	r7, r2
 8008832:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008836:	ea23 0107 	bic.w	r1, r3, r7
 800883a:	f1c2 0214 	rsb	r2, r2, #20
 800883e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008842:	460b      	mov	r3, r1
 8008844:	fa4a fa02 	asr.w	sl, sl, r2
 8008848:	2e00      	cmp	r6, #0
 800884a:	4602      	mov	r2, r0
 800884c:	4629      	mov	r1, r5
 800884e:	4620      	mov	r0, r4
 8008850:	bfb8      	it	lt
 8008852:	f1ca 0a00 	rsblt	sl, sl, #0
 8008856:	f7f7 fc87 	bl	8000168 <__aeabi_dsub>
 800885a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800885e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008862:	2400      	movs	r4, #0
 8008864:	4642      	mov	r2, r8
 8008866:	464b      	mov	r3, r9
 8008868:	f7f7 fc80 	bl	800016c <__adddf3>
 800886c:	a37a      	add	r3, pc, #488	; (adr r3, 8008a58 <__ieee754_pow+0x9d8>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	4620      	mov	r0, r4
 8008874:	460d      	mov	r5, r1
 8008876:	f7f7 fe2f 	bl	80004d8 <__aeabi_dmul>
 800887a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800887e:	4606      	mov	r6, r0
 8008880:	460f      	mov	r7, r1
 8008882:	4620      	mov	r0, r4
 8008884:	4629      	mov	r1, r5
 8008886:	f7f7 fc6f 	bl	8000168 <__aeabi_dsub>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4640      	mov	r0, r8
 8008890:	4649      	mov	r1, r9
 8008892:	f7f7 fc69 	bl	8000168 <__aeabi_dsub>
 8008896:	a372      	add	r3, pc, #456	; (adr r3, 8008a60 <__ieee754_pow+0x9e0>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f7 fe1c 	bl	80004d8 <__aeabi_dmul>
 80088a0:	a371      	add	r3, pc, #452	; (adr r3, 8008a68 <__ieee754_pow+0x9e8>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	4680      	mov	r8, r0
 80088a8:	4689      	mov	r9, r1
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7f7 fe13 	bl	80004d8 <__aeabi_dmul>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4640      	mov	r0, r8
 80088b8:	4649      	mov	r1, r9
 80088ba:	f7f7 fc57 	bl	800016c <__adddf3>
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fc4f 	bl	800016c <__adddf3>
 80088ce:	4632      	mov	r2, r6
 80088d0:	463b      	mov	r3, r7
 80088d2:	4680      	mov	r8, r0
 80088d4:	4689      	mov	r9, r1
 80088d6:	f7f7 fc47 	bl	8000168 <__aeabi_dsub>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4620      	mov	r0, r4
 80088e0:	4629      	mov	r1, r5
 80088e2:	f7f7 fc41 	bl	8000168 <__aeabi_dsub>
 80088e6:	4642      	mov	r2, r8
 80088e8:	4606      	mov	r6, r0
 80088ea:	460f      	mov	r7, r1
 80088ec:	464b      	mov	r3, r9
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f7 fdf1 	bl	80004d8 <__aeabi_dmul>
 80088f6:	a35e      	add	r3, pc, #376	; (adr r3, 8008a70 <__ieee754_pow+0x9f0>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	f7f7 fdea 	bl	80004d8 <__aeabi_dmul>
 8008904:	a35c      	add	r3, pc, #368	; (adr r3, 8008a78 <__ieee754_pow+0x9f8>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f7f7 fc2d 	bl	8000168 <__aeabi_dsub>
 800890e:	4622      	mov	r2, r4
 8008910:	462b      	mov	r3, r5
 8008912:	f7f7 fde1 	bl	80004d8 <__aeabi_dmul>
 8008916:	a35a      	add	r3, pc, #360	; (adr r3, 8008a80 <__ieee754_pow+0xa00>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	f7f7 fc26 	bl	800016c <__adddf3>
 8008920:	4622      	mov	r2, r4
 8008922:	462b      	mov	r3, r5
 8008924:	f7f7 fdd8 	bl	80004d8 <__aeabi_dmul>
 8008928:	a357      	add	r3, pc, #348	; (adr r3, 8008a88 <__ieee754_pow+0xa08>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f7f7 fc1b 	bl	8000168 <__aeabi_dsub>
 8008932:	4622      	mov	r2, r4
 8008934:	462b      	mov	r3, r5
 8008936:	f7f7 fdcf 	bl	80004d8 <__aeabi_dmul>
 800893a:	a355      	add	r3, pc, #340	; (adr r3, 8008a90 <__ieee754_pow+0xa10>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fc14 	bl	800016c <__adddf3>
 8008944:	4622      	mov	r2, r4
 8008946:	462b      	mov	r3, r5
 8008948:	f7f7 fdc6 	bl	80004d8 <__aeabi_dmul>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	f7f7 fc08 	bl	8000168 <__aeabi_dsub>
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4640      	mov	r0, r8
 8008962:	4649      	mov	r1, r9
 8008964:	f7f7 fdb8 	bl	80004d8 <__aeabi_dmul>
 8008968:	2200      	movs	r2, #0
 800896a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800896e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008972:	4620      	mov	r0, r4
 8008974:	4629      	mov	r1, r5
 8008976:	f7f7 fbf7 	bl	8000168 <__aeabi_dsub>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008982:	f7f7 fed3 	bl	800072c <__aeabi_ddiv>
 8008986:	4632      	mov	r2, r6
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	463b      	mov	r3, r7
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f7 fda1 	bl	80004d8 <__aeabi_dmul>
 8008996:	4632      	mov	r2, r6
 8008998:	463b      	mov	r3, r7
 800899a:	f7f7 fbe7 	bl	800016c <__adddf3>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4620      	mov	r0, r4
 80089a4:	4629      	mov	r1, r5
 80089a6:	f7f7 fbdf 	bl	8000168 <__aeabi_dsub>
 80089aa:	4642      	mov	r2, r8
 80089ac:	464b      	mov	r3, r9
 80089ae:	f7f7 fbdb 	bl	8000168 <__aeabi_dsub>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	2000      	movs	r0, #0
 80089b8:	4939      	ldr	r1, [pc, #228]	; (8008aa0 <__ieee754_pow+0xa20>)
 80089ba:	f7f7 fbd5 	bl	8000168 <__aeabi_dsub>
 80089be:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80089c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80089c6:	da29      	bge.n	8008a1c <__ieee754_pow+0x99c>
 80089c8:	4652      	mov	r2, sl
 80089ca:	f000 fe95 	bl	80096f8 <scalbn>
 80089ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089d2:	f7ff bbfe 	b.w	80081d2 <__ieee754_pow+0x152>
 80089d6:	4b33      	ldr	r3, [pc, #204]	; (8008aa4 <__ieee754_pow+0xa24>)
 80089d8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80089dc:	429f      	cmp	r7, r3
 80089de:	f77f af13 	ble.w	8008808 <__ieee754_pow+0x788>
 80089e2:	4b31      	ldr	r3, [pc, #196]	; (8008aa8 <__ieee754_pow+0xa28>)
 80089e4:	440b      	add	r3, r1
 80089e6:	4303      	orrs	r3, r0
 80089e8:	d009      	beq.n	80089fe <__ieee754_pow+0x97e>
 80089ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089ee:	2200      	movs	r2, #0
 80089f0:	2300      	movs	r3, #0
 80089f2:	f7f7 ffe3 	bl	80009bc <__aeabi_dcmplt>
 80089f6:	3800      	subs	r0, #0
 80089f8:	bf18      	it	ne
 80089fa:	2001      	movne	r0, #1
 80089fc:	e453      	b.n	80082a6 <__ieee754_pow+0x226>
 80089fe:	4622      	mov	r2, r4
 8008a00:	462b      	mov	r3, r5
 8008a02:	f7f7 fbb1 	bl	8000168 <__aeabi_dsub>
 8008a06:	4642      	mov	r2, r8
 8008a08:	464b      	mov	r3, r9
 8008a0a:	f7f7 ffeb 	bl	80009e4 <__aeabi_dcmpge>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f aefa 	beq.w	8008808 <__ieee754_pow+0x788>
 8008a14:	e7e9      	b.n	80089ea <__ieee754_pow+0x96a>
 8008a16:	f04f 0a00 	mov.w	sl, #0
 8008a1a:	e720      	b.n	800885e <__ieee754_pow+0x7de>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	e7d6      	b.n	80089ce <__ieee754_pow+0x94e>
 8008a20:	f04f 0b00 	mov.w	fp, #0
 8008a24:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008aa0 <__ieee754_pow+0xa20>
 8008a28:	f7ff bbba 	b.w	80081a0 <__ieee754_pow+0x120>
 8008a2c:	f04f 0b00 	mov.w	fp, #0
 8008a30:	f04f 0c00 	mov.w	ip, #0
 8008a34:	f7ff bbb4 	b.w	80081a0 <__ieee754_pow+0x120>
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7ff bb3d 	b.w	80080ba <__ieee754_pow+0x3a>
 8008a40:	9200      	str	r2, [sp, #0]
 8008a42:	f7ff bb89 	b.w	8008158 <__ieee754_pow+0xd8>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f7ff bb73 	b.w	8008132 <__ieee754_pow+0xb2>
 8008a4c:	f3af 8000 	nop.w
 8008a50:	652b82fe 	.word	0x652b82fe
 8008a54:	3c971547 	.word	0x3c971547
 8008a58:	00000000 	.word	0x00000000
 8008a5c:	3fe62e43 	.word	0x3fe62e43
 8008a60:	fefa39ef 	.word	0xfefa39ef
 8008a64:	3fe62e42 	.word	0x3fe62e42
 8008a68:	0ca86c39 	.word	0x0ca86c39
 8008a6c:	be205c61 	.word	0xbe205c61
 8008a70:	72bea4d0 	.word	0x72bea4d0
 8008a74:	3e663769 	.word	0x3e663769
 8008a78:	c5d26bf1 	.word	0xc5d26bf1
 8008a7c:	3ebbbd41 	.word	0x3ebbbd41
 8008a80:	af25de2c 	.word	0xaf25de2c
 8008a84:	3f11566a 	.word	0x3f11566a
 8008a88:	16bebd93 	.word	0x16bebd93
 8008a8c:	3f66c16c 	.word	0x3f66c16c
 8008a90:	5555553e 	.word	0x5555553e
 8008a94:	3fc55555 	.word	0x3fc55555
 8008a98:	3fe00000 	.word	0x3fe00000
 8008a9c:	000fffff 	.word	0x000fffff
 8008aa0:	3ff00000 	.word	0x3ff00000
 8008aa4:	4090cbff 	.word	0x4090cbff
 8008aa8:	3f6f3400 	.word	0x3f6f3400

08008aac <__ieee754_sqrt>:
 8008aac:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008c08 <__ieee754_sqrt+0x15c>
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	ea3c 0c01 	bics.w	ip, ip, r1
 8008ab8:	4606      	mov	r6, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	460c      	mov	r4, r1
 8008abe:	460a      	mov	r2, r1
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	d10f      	bne.n	8008ae6 <__ieee754_sqrt+0x3a>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	f7f7 fd05 	bl	80004d8 <__aeabi_dmul>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f7f7 fb49 	bl	800016c <__adddf3>
 8008ada:	4606      	mov	r6, r0
 8008adc:	460d      	mov	r5, r1
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae6:	2900      	cmp	r1, #0
 8008ae8:	dc0e      	bgt.n	8008b08 <__ieee754_sqrt+0x5c>
 8008aea:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008aee:	ea5c 0707 	orrs.w	r7, ip, r7
 8008af2:	d0f4      	beq.n	8008ade <__ieee754_sqrt+0x32>
 8008af4:	b141      	cbz	r1, 8008b08 <__ieee754_sqrt+0x5c>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	f7f7 fb35 	bl	8000168 <__aeabi_dsub>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	f7f7 fe13 	bl	800072c <__aeabi_ddiv>
 8008b06:	e7e8      	b.n	8008ada <__ieee754_sqrt+0x2e>
 8008b08:	1521      	asrs	r1, r4, #20
 8008b0a:	d075      	beq.n	8008bf8 <__ieee754_sqrt+0x14c>
 8008b0c:	07cc      	lsls	r4, r1, #31
 8008b0e:	f04f 0400 	mov.w	r4, #0
 8008b12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008b16:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008b1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008b1e:	bf5e      	ittt	pl
 8008b20:	0fd9      	lsrpl	r1, r3, #31
 8008b22:	005b      	lslpl	r3, r3, #1
 8008b24:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008b28:	0fd9      	lsrs	r1, r3, #31
 8008b2a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008b2e:	2516      	movs	r5, #22
 8008b30:	4620      	mov	r0, r4
 8008b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b36:	107f      	asrs	r7, r7, #1
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	1846      	adds	r6, r0, r1
 8008b3c:	4296      	cmp	r6, r2
 8008b3e:	bfde      	ittt	le
 8008b40:	1b92      	suble	r2, r2, r6
 8008b42:	1870      	addle	r0, r6, r1
 8008b44:	1864      	addle	r4, r4, r1
 8008b46:	0052      	lsls	r2, r2, #1
 8008b48:	3d01      	subs	r5, #1
 8008b4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008b4e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008b52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b56:	d1f0      	bne.n	8008b3a <__ieee754_sqrt+0x8e>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f04f 0e20 	mov.w	lr, #32
 8008b5e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b62:	4282      	cmp	r2, r0
 8008b64:	eb06 0c05 	add.w	ip, r6, r5
 8008b68:	dc02      	bgt.n	8008b70 <__ieee754_sqrt+0xc4>
 8008b6a:	d113      	bne.n	8008b94 <__ieee754_sqrt+0xe8>
 8008b6c:	459c      	cmp	ip, r3
 8008b6e:	d811      	bhi.n	8008b94 <__ieee754_sqrt+0xe8>
 8008b70:	f1bc 0f00 	cmp.w	ip, #0
 8008b74:	eb0c 0506 	add.w	r5, ip, r6
 8008b78:	da43      	bge.n	8008c02 <__ieee754_sqrt+0x156>
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	db41      	blt.n	8008c02 <__ieee754_sqrt+0x156>
 8008b7e:	f100 0801 	add.w	r8, r0, #1
 8008b82:	1a12      	subs	r2, r2, r0
 8008b84:	4640      	mov	r0, r8
 8008b86:	459c      	cmp	ip, r3
 8008b88:	bf88      	it	hi
 8008b8a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b8e:	eba3 030c 	sub.w	r3, r3, ip
 8008b92:	4431      	add	r1, r6
 8008b94:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008b98:	f1be 0e01 	subs.w	lr, lr, #1
 8008b9c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ba4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ba8:	d1db      	bne.n	8008b62 <__ieee754_sqrt+0xb6>
 8008baa:	4313      	orrs	r3, r2
 8008bac:	d006      	beq.n	8008bbc <__ieee754_sqrt+0x110>
 8008bae:	1c48      	adds	r0, r1, #1
 8008bb0:	bf0b      	itete	eq
 8008bb2:	4671      	moveq	r1, lr
 8008bb4:	3101      	addne	r1, #1
 8008bb6:	3401      	addeq	r4, #1
 8008bb8:	f021 0101 	bicne.w	r1, r1, #1
 8008bbc:	1063      	asrs	r3, r4, #1
 8008bbe:	0849      	lsrs	r1, r1, #1
 8008bc0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008bc4:	07e2      	lsls	r2, r4, #31
 8008bc6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008bca:	bf48      	it	mi
 8008bcc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008bd0:	460e      	mov	r6, r1
 8008bd2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008bd6:	e782      	b.n	8008ade <__ieee754_sqrt+0x32>
 8008bd8:	0ada      	lsrs	r2, r3, #11
 8008bda:	3815      	subs	r0, #21
 8008bdc:	055b      	lsls	r3, r3, #21
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	d0fa      	beq.n	8008bd8 <__ieee754_sqrt+0x12c>
 8008be2:	02d5      	lsls	r5, r2, #11
 8008be4:	d50a      	bpl.n	8008bfc <__ieee754_sqrt+0x150>
 8008be6:	f1c1 0420 	rsb	r4, r1, #32
 8008bea:	fa23 f404 	lsr.w	r4, r3, r4
 8008bee:	1e4d      	subs	r5, r1, #1
 8008bf0:	408b      	lsls	r3, r1
 8008bf2:	4322      	orrs	r2, r4
 8008bf4:	1b41      	subs	r1, r0, r5
 8008bf6:	e789      	b.n	8008b0c <__ieee754_sqrt+0x60>
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	e7f0      	b.n	8008bde <__ieee754_sqrt+0x132>
 8008bfc:	0052      	lsls	r2, r2, #1
 8008bfe:	3101      	adds	r1, #1
 8008c00:	e7ef      	b.n	8008be2 <__ieee754_sqrt+0x136>
 8008c02:	4680      	mov	r8, r0
 8008c04:	e7bd      	b.n	8008b82 <__ieee754_sqrt+0xd6>
 8008c06:	bf00      	nop
 8008c08:	7ff00000 	.word	0x7ff00000

08008c0c <__ieee754_rem_pio2f>:
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	4aa0      	ldr	r2, [pc, #640]	; (8008e94 <__ieee754_rem_pio2f+0x288>)
 8008c12:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008c16:	4296      	cmp	r6, r2
 8008c18:	460c      	mov	r4, r1
 8008c1a:	4682      	mov	sl, r0
 8008c1c:	b087      	sub	sp, #28
 8008c1e:	dc04      	bgt.n	8008c2a <__ieee754_rem_pio2f+0x1e>
 8008c20:	2300      	movs	r3, #0
 8008c22:	6008      	str	r0, [r1, #0]
 8008c24:	604b      	str	r3, [r1, #4]
 8008c26:	2500      	movs	r5, #0
 8008c28:	e01a      	b.n	8008c60 <__ieee754_rem_pio2f+0x54>
 8008c2a:	4a9b      	ldr	r2, [pc, #620]	; (8008e98 <__ieee754_rem_pio2f+0x28c>)
 8008c2c:	4296      	cmp	r6, r2
 8008c2e:	dc4b      	bgt.n	8008cc8 <__ieee754_rem_pio2f+0xbc>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	499a      	ldr	r1, [pc, #616]	; (8008e9c <__ieee754_rem_pio2f+0x290>)
 8008c34:	4f9a      	ldr	r7, [pc, #616]	; (8008ea0 <__ieee754_rem_pio2f+0x294>)
 8008c36:	f026 060f 	bic.w	r6, r6, #15
 8008c3a:	dd23      	ble.n	8008c84 <__ieee754_rem_pio2f+0x78>
 8008c3c:	f7f7 ff98 	bl	8000b70 <__aeabi_fsub>
 8008c40:	42be      	cmp	r6, r7
 8008c42:	4605      	mov	r5, r0
 8008c44:	d010      	beq.n	8008c68 <__ieee754_rem_pio2f+0x5c>
 8008c46:	4997      	ldr	r1, [pc, #604]	; (8008ea4 <__ieee754_rem_pio2f+0x298>)
 8008c48:	f7f7 ff92 	bl	8000b70 <__aeabi_fsub>
 8008c4c:	4601      	mov	r1, r0
 8008c4e:	6020      	str	r0, [r4, #0]
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7f7 ff8d 	bl	8000b70 <__aeabi_fsub>
 8008c56:	4993      	ldr	r1, [pc, #588]	; (8008ea4 <__ieee754_rem_pio2f+0x298>)
 8008c58:	f7f7 ff8a 	bl	8000b70 <__aeabi_fsub>
 8008c5c:	2501      	movs	r5, #1
 8008c5e:	6060      	str	r0, [r4, #4]
 8008c60:	4628      	mov	r0, r5
 8008c62:	b007      	add	sp, #28
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	498f      	ldr	r1, [pc, #572]	; (8008ea8 <__ieee754_rem_pio2f+0x29c>)
 8008c6a:	f7f7 ff81 	bl	8000b70 <__aeabi_fsub>
 8008c6e:	498f      	ldr	r1, [pc, #572]	; (8008eac <__ieee754_rem_pio2f+0x2a0>)
 8008c70:	4605      	mov	r5, r0
 8008c72:	f7f7 ff7d 	bl	8000b70 <__aeabi_fsub>
 8008c76:	4601      	mov	r1, r0
 8008c78:	6020      	str	r0, [r4, #0]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7f7 ff78 	bl	8000b70 <__aeabi_fsub>
 8008c80:	498a      	ldr	r1, [pc, #552]	; (8008eac <__ieee754_rem_pio2f+0x2a0>)
 8008c82:	e7e9      	b.n	8008c58 <__ieee754_rem_pio2f+0x4c>
 8008c84:	f7f7 ff76 	bl	8000b74 <__addsf3>
 8008c88:	42be      	cmp	r6, r7
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	d00e      	beq.n	8008cac <__ieee754_rem_pio2f+0xa0>
 8008c8e:	4985      	ldr	r1, [pc, #532]	; (8008ea4 <__ieee754_rem_pio2f+0x298>)
 8008c90:	f7f7 ff70 	bl	8000b74 <__addsf3>
 8008c94:	4601      	mov	r1, r0
 8008c96:	6020      	str	r0, [r4, #0]
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f7f7 ff69 	bl	8000b70 <__aeabi_fsub>
 8008c9e:	4981      	ldr	r1, [pc, #516]	; (8008ea4 <__ieee754_rem_pio2f+0x298>)
 8008ca0:	f7f7 ff68 	bl	8000b74 <__addsf3>
 8008ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ca8:	6060      	str	r0, [r4, #4]
 8008caa:	e7d9      	b.n	8008c60 <__ieee754_rem_pio2f+0x54>
 8008cac:	497e      	ldr	r1, [pc, #504]	; (8008ea8 <__ieee754_rem_pio2f+0x29c>)
 8008cae:	f7f7 ff61 	bl	8000b74 <__addsf3>
 8008cb2:	497e      	ldr	r1, [pc, #504]	; (8008eac <__ieee754_rem_pio2f+0x2a0>)
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	f7f7 ff5d 	bl	8000b74 <__addsf3>
 8008cba:	4601      	mov	r1, r0
 8008cbc:	6020      	str	r0, [r4, #0]
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7f7 ff56 	bl	8000b70 <__aeabi_fsub>
 8008cc4:	4979      	ldr	r1, [pc, #484]	; (8008eac <__ieee754_rem_pio2f+0x2a0>)
 8008cc6:	e7eb      	b.n	8008ca0 <__ieee754_rem_pio2f+0x94>
 8008cc8:	4a79      	ldr	r2, [pc, #484]	; (8008eb0 <__ieee754_rem_pio2f+0x2a4>)
 8008cca:	4296      	cmp	r6, r2
 8008ccc:	f300 8091 	bgt.w	8008df2 <__ieee754_rem_pio2f+0x1e6>
 8008cd0:	f000 fd90 	bl	80097f4 <fabsf>
 8008cd4:	4977      	ldr	r1, [pc, #476]	; (8008eb4 <__ieee754_rem_pio2f+0x2a8>)
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	f7f8 f854 	bl	8000d84 <__aeabi_fmul>
 8008cdc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008ce0:	f7f7 ff48 	bl	8000b74 <__addsf3>
 8008ce4:	f7f8 fa14 	bl	8001110 <__aeabi_f2iz>
 8008ce8:	4605      	mov	r5, r0
 8008cea:	f7f7 fff7 	bl	8000cdc <__aeabi_i2f>
 8008cee:	496b      	ldr	r1, [pc, #428]	; (8008e9c <__ieee754_rem_pio2f+0x290>)
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	f7f8 f847 	bl	8000d84 <__aeabi_fmul>
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7f7 ff39 	bl	8000b70 <__aeabi_fsub>
 8008cfe:	4969      	ldr	r1, [pc, #420]	; (8008ea4 <__ieee754_rem_pio2f+0x298>)
 8008d00:	4680      	mov	r8, r0
 8008d02:	4648      	mov	r0, r9
 8008d04:	f7f8 f83e 	bl	8000d84 <__aeabi_fmul>
 8008d08:	2d1f      	cmp	r5, #31
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	dc0c      	bgt.n	8008d28 <__ieee754_rem_pio2f+0x11c>
 8008d0e:	4a6a      	ldr	r2, [pc, #424]	; (8008eb8 <__ieee754_rem_pio2f+0x2ac>)
 8008d10:	1e69      	subs	r1, r5, #1
 8008d12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008d16:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d004      	beq.n	8008d28 <__ieee754_rem_pio2f+0x11c>
 8008d1e:	4639      	mov	r1, r7
 8008d20:	4640      	mov	r0, r8
 8008d22:	f7f7 ff25 	bl	8000b70 <__aeabi_fsub>
 8008d26:	e00b      	b.n	8008d40 <__ieee754_rem_pio2f+0x134>
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	f7f7 ff20 	bl	8000b70 <__aeabi_fsub>
 8008d30:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008d34:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8008d38:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8008d3c:	2e08      	cmp	r6, #8
 8008d3e:	dc01      	bgt.n	8008d44 <__ieee754_rem_pio2f+0x138>
 8008d40:	6020      	str	r0, [r4, #0]
 8008d42:	e026      	b.n	8008d92 <__ieee754_rem_pio2f+0x186>
 8008d44:	4958      	ldr	r1, [pc, #352]	; (8008ea8 <__ieee754_rem_pio2f+0x29c>)
 8008d46:	4648      	mov	r0, r9
 8008d48:	f7f8 f81c 	bl	8000d84 <__aeabi_fmul>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	4601      	mov	r1, r0
 8008d50:	4640      	mov	r0, r8
 8008d52:	f7f7 ff0d 	bl	8000b70 <__aeabi_fsub>
 8008d56:	4601      	mov	r1, r0
 8008d58:	4606      	mov	r6, r0
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f7f7 ff08 	bl	8000b70 <__aeabi_fsub>
 8008d60:	4639      	mov	r1, r7
 8008d62:	f7f7 ff05 	bl	8000b70 <__aeabi_fsub>
 8008d66:	4607      	mov	r7, r0
 8008d68:	4950      	ldr	r1, [pc, #320]	; (8008eac <__ieee754_rem_pio2f+0x2a0>)
 8008d6a:	4648      	mov	r0, r9
 8008d6c:	f7f8 f80a 	bl	8000d84 <__aeabi_fmul>
 8008d70:	4639      	mov	r1, r7
 8008d72:	f7f7 fefd 	bl	8000b70 <__aeabi_fsub>
 8008d76:	4601      	mov	r1, r0
 8008d78:	4607      	mov	r7, r0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7f7 fef8 	bl	8000b70 <__aeabi_fsub>
 8008d80:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008d84:	ebab 0b03 	sub.w	fp, fp, r3
 8008d88:	f1bb 0f19 	cmp.w	fp, #25
 8008d8c:	dc16      	bgt.n	8008dbc <__ieee754_rem_pio2f+0x1b0>
 8008d8e:	46b0      	mov	r8, r6
 8008d90:	6020      	str	r0, [r4, #0]
 8008d92:	6826      	ldr	r6, [r4, #0]
 8008d94:	4640      	mov	r0, r8
 8008d96:	4631      	mov	r1, r6
 8008d98:	f7f7 feea 	bl	8000b70 <__aeabi_fsub>
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fee7 	bl	8000b70 <__aeabi_fsub>
 8008da2:	f1ba 0f00 	cmp.w	sl, #0
 8008da6:	6060      	str	r0, [r4, #4]
 8008da8:	f6bf af5a 	bge.w	8008c60 <__ieee754_rem_pio2f+0x54>
 8008dac:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008db0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008db4:	6026      	str	r6, [r4, #0]
 8008db6:	6060      	str	r0, [r4, #4]
 8008db8:	426d      	negs	r5, r5
 8008dba:	e751      	b.n	8008c60 <__ieee754_rem_pio2f+0x54>
 8008dbc:	493f      	ldr	r1, [pc, #252]	; (8008ebc <__ieee754_rem_pio2f+0x2b0>)
 8008dbe:	4648      	mov	r0, r9
 8008dc0:	f7f7 ffe0 	bl	8000d84 <__aeabi_fmul>
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7f7 fed1 	bl	8000b70 <__aeabi_fsub>
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7f7 fecc 	bl	8000b70 <__aeabi_fsub>
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 fec9 	bl	8000b70 <__aeabi_fsub>
 8008dde:	4606      	mov	r6, r0
 8008de0:	4937      	ldr	r1, [pc, #220]	; (8008ec0 <__ieee754_rem_pio2f+0x2b4>)
 8008de2:	4648      	mov	r0, r9
 8008de4:	f7f7 ffce 	bl	8000d84 <__aeabi_fmul>
 8008de8:	4631      	mov	r1, r6
 8008dea:	f7f7 fec1 	bl	8000b70 <__aeabi_fsub>
 8008dee:	4607      	mov	r7, r0
 8008df0:	e795      	b.n	8008d1e <__ieee754_rem_pio2f+0x112>
 8008df2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008df6:	db05      	blt.n	8008e04 <__ieee754_rem_pio2f+0x1f8>
 8008df8:	4601      	mov	r1, r0
 8008dfa:	f7f7 feb9 	bl	8000b70 <__aeabi_fsub>
 8008dfe:	6060      	str	r0, [r4, #4]
 8008e00:	6020      	str	r0, [r4, #0]
 8008e02:	e710      	b.n	8008c26 <__ieee754_rem_pio2f+0x1a>
 8008e04:	15f7      	asrs	r7, r6, #23
 8008e06:	3f86      	subs	r7, #134	; 0x86
 8008e08:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7f8 f97f 	bl	8001110 <__aeabi_f2iz>
 8008e12:	f7f7 ff63 	bl	8000cdc <__aeabi_i2f>
 8008e16:	4601      	mov	r1, r0
 8008e18:	9003      	str	r0, [sp, #12]
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7f7 fea8 	bl	8000b70 <__aeabi_fsub>
 8008e20:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008e24:	f7f7 ffae 	bl	8000d84 <__aeabi_fmul>
 8008e28:	4606      	mov	r6, r0
 8008e2a:	f7f8 f971 	bl	8001110 <__aeabi_f2iz>
 8008e2e:	f7f7 ff55 	bl	8000cdc <__aeabi_i2f>
 8008e32:	4601      	mov	r1, r0
 8008e34:	9004      	str	r0, [sp, #16]
 8008e36:	4605      	mov	r5, r0
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7f7 fe99 	bl	8000b70 <__aeabi_fsub>
 8008e3e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008e42:	f7f7 ff9f 	bl	8000d84 <__aeabi_fmul>
 8008e46:	2100      	movs	r1, #0
 8008e48:	9005      	str	r0, [sp, #20]
 8008e4a:	f7f8 f92f 	bl	80010ac <__aeabi_fcmpeq>
 8008e4e:	b1f0      	cbz	r0, 8008e8e <__ieee754_rem_pio2f+0x282>
 8008e50:	2100      	movs	r1, #0
 8008e52:	4628      	mov	r0, r5
 8008e54:	f7f8 f92a 	bl	80010ac <__aeabi_fcmpeq>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	bf14      	ite	ne
 8008e5c:	2301      	movne	r3, #1
 8008e5e:	2302      	moveq	r3, #2
 8008e60:	4a18      	ldr	r2, [pc, #96]	; (8008ec4 <__ieee754_rem_pio2f+0x2b8>)
 8008e62:	4621      	mov	r1, r4
 8008e64:	9201      	str	r2, [sp, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	a803      	add	r0, sp, #12
 8008e6a:	9200      	str	r2, [sp, #0]
 8008e6c:	463a      	mov	r2, r7
 8008e6e:	f000 f82b 	bl	8008ec8 <__kernel_rem_pio2f>
 8008e72:	f1ba 0f00 	cmp.w	sl, #0
 8008e76:	4605      	mov	r5, r0
 8008e78:	f6bf aef2 	bge.w	8008c60 <__ieee754_rem_pio2f+0x54>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e8a:	6063      	str	r3, [r4, #4]
 8008e8c:	e794      	b.n	8008db8 <__ieee754_rem_pio2f+0x1ac>
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e7e6      	b.n	8008e60 <__ieee754_rem_pio2f+0x254>
 8008e92:	bf00      	nop
 8008e94:	3f490fd8 	.word	0x3f490fd8
 8008e98:	4016cbe3 	.word	0x4016cbe3
 8008e9c:	3fc90f80 	.word	0x3fc90f80
 8008ea0:	3fc90fd0 	.word	0x3fc90fd0
 8008ea4:	37354443 	.word	0x37354443
 8008ea8:	37354400 	.word	0x37354400
 8008eac:	2e85a308 	.word	0x2e85a308
 8008eb0:	43490f80 	.word	0x43490f80
 8008eb4:	3f22f984 	.word	0x3f22f984
 8008eb8:	0800ca40 	.word	0x0800ca40
 8008ebc:	2e85a300 	.word	0x2e85a300
 8008ec0:	248d3132 	.word	0x248d3132
 8008ec4:	0800cac0 	.word	0x0800cac0

08008ec8 <__kernel_rem_pio2f>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	b0db      	sub	sp, #364	; 0x16c
 8008ece:	9202      	str	r2, [sp, #8]
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008ed4:	4bb2      	ldr	r3, [pc, #712]	; (80091a0 <__kernel_rem_pio2f+0x2d8>)
 8008ed6:	9005      	str	r0, [sp, #20]
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	9100      	str	r1, [sp, #0]
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	9b04      	ldr	r3, [sp, #16]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	9303      	str	r3, [sp, #12]
 8008ee6:	9b02      	ldr	r3, [sp, #8]
 8008ee8:	1d1a      	adds	r2, r3, #4
 8008eea:	f2c0 809b 	blt.w	8009024 <__kernel_rem_pio2f+0x15c>
 8008eee:	1edc      	subs	r4, r3, #3
 8008ef0:	bf48      	it	mi
 8008ef2:	1d1c      	addmi	r4, r3, #4
 8008ef4:	10e4      	asrs	r4, r4, #3
 8008ef6:	2500      	movs	r5, #0
 8008ef8:	f04f 0b00 	mov.w	fp, #0
 8008efc:	1c67      	adds	r7, r4, #1
 8008efe:	00fb      	lsls	r3, r7, #3
 8008f00:	9306      	str	r3, [sp, #24]
 8008f02:	9b02      	ldr	r3, [sp, #8]
 8008f04:	9a03      	ldr	r2, [sp, #12]
 8008f06:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8008f0a:	9b01      	ldr	r3, [sp, #4]
 8008f0c:	eba4 0802 	sub.w	r8, r4, r2
 8008f10:	eb03 0902 	add.w	r9, r3, r2
 8008f14:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008f16:	ae1e      	add	r6, sp, #120	; 0x78
 8008f18:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8008f1c:	454d      	cmp	r5, r9
 8008f1e:	f340 8083 	ble.w	8009028 <__kernel_rem_pio2f+0x160>
 8008f22:	9a04      	ldr	r2, [sp, #16]
 8008f24:	ab1e      	add	r3, sp, #120	; 0x78
 8008f26:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8008f2a:	f04f 0900 	mov.w	r9, #0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8008f34:	9a01      	ldr	r2, [sp, #4]
 8008f36:	4591      	cmp	r9, r2
 8008f38:	f340 809e 	ble.w	8009078 <__kernel_rem_pio2f+0x1b0>
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	aa0a      	add	r2, sp, #40	; 0x28
 8008f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f44:	9308      	str	r3, [sp, #32]
 8008f46:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008f48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f50:	9307      	str	r3, [sp, #28]
 8008f52:	ac0a      	add	r4, sp, #40	; 0x28
 8008f54:	4626      	mov	r6, r4
 8008f56:	46c3      	mov	fp, r8
 8008f58:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8008f5c:	ab5a      	add	r3, sp, #360	; 0x168
 8008f5e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8008f62:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8008f66:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8008f6a:	f1bb 0f00 	cmp.w	fp, #0
 8008f6e:	f300 8088 	bgt.w	8009082 <__kernel_rem_pio2f+0x1ba>
 8008f72:	4639      	mov	r1, r7
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 fc83 	bl	8009880 <scalbnf>
 8008f7a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8008f7e:	4605      	mov	r5, r0
 8008f80:	f7f7 ff00 	bl	8000d84 <__aeabi_fmul>
 8008f84:	f000 fc3a 	bl	80097fc <floorf>
 8008f88:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008f8c:	f7f7 fefa 	bl	8000d84 <__aeabi_fmul>
 8008f90:	4601      	mov	r1, r0
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7f7 fdec 	bl	8000b70 <__aeabi_fsub>
 8008f98:	4605      	mov	r5, r0
 8008f9a:	f7f8 f8b9 	bl	8001110 <__aeabi_f2iz>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	f7f7 fe9c 	bl	8000cdc <__aeabi_i2f>
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7f7 fde2 	bl	8000b70 <__aeabi_fsub>
 8008fac:	2f00      	cmp	r7, #0
 8008fae:	4681      	mov	r9, r0
 8008fb0:	f340 8086 	ble.w	80090c0 <__kernel_rem_pio2f+0x1f8>
 8008fb4:	f108 32ff 	add.w	r2, r8, #4294967295
 8008fb8:	ab0a      	add	r3, sp, #40	; 0x28
 8008fba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008fbe:	f1c7 0108 	rsb	r1, r7, #8
 8008fc2:	fa45 f301 	asr.w	r3, r5, r1
 8008fc6:	441e      	add	r6, r3
 8008fc8:	408b      	lsls	r3, r1
 8008fca:	1aed      	subs	r5, r5, r3
 8008fcc:	f1c7 0007 	rsb	r0, r7, #7
 8008fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8008fd2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008fd6:	4105      	asrs	r5, r0
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	dd7f      	ble.n	80090dc <__kernel_rem_pio2f+0x214>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4692      	mov	sl, r2
 8008fe0:	3601      	adds	r6, #1
 8008fe2:	4590      	cmp	r8, r2
 8008fe4:	f300 80b0 	bgt.w	8009148 <__kernel_rem_pio2f+0x280>
 8008fe8:	2f00      	cmp	r7, #0
 8008fea:	dd05      	ble.n	8008ff8 <__kernel_rem_pio2f+0x130>
 8008fec:	2f01      	cmp	r7, #1
 8008fee:	f000 80bd 	beq.w	800916c <__kernel_rem_pio2f+0x2a4>
 8008ff2:	2f02      	cmp	r7, #2
 8008ff4:	f000 80c5 	beq.w	8009182 <__kernel_rem_pio2f+0x2ba>
 8008ff8:	2d02      	cmp	r5, #2
 8008ffa:	d16f      	bne.n	80090dc <__kernel_rem_pio2f+0x214>
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009002:	f7f7 fdb5 	bl	8000b70 <__aeabi_fsub>
 8009006:	4681      	mov	r9, r0
 8009008:	f1ba 0f00 	cmp.w	sl, #0
 800900c:	d066      	beq.n	80090dc <__kernel_rem_pio2f+0x214>
 800900e:	4639      	mov	r1, r7
 8009010:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009014:	f000 fc34 	bl	8009880 <scalbnf>
 8009018:	4601      	mov	r1, r0
 800901a:	4648      	mov	r0, r9
 800901c:	f7f7 fda8 	bl	8000b70 <__aeabi_fsub>
 8009020:	4681      	mov	r9, r0
 8009022:	e05b      	b.n	80090dc <__kernel_rem_pio2f+0x214>
 8009024:	2400      	movs	r4, #0
 8009026:	e766      	b.n	8008ef6 <__kernel_rem_pio2f+0x2e>
 8009028:	eb18 0f05 	cmn.w	r8, r5
 800902c:	d407      	bmi.n	800903e <__kernel_rem_pio2f+0x176>
 800902e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8009032:	f7f7 fe53 	bl	8000cdc <__aeabi_i2f>
 8009036:	f846 0b04 	str.w	r0, [r6], #4
 800903a:	3501      	adds	r5, #1
 800903c:	e76e      	b.n	8008f1c <__kernel_rem_pio2f+0x54>
 800903e:	4658      	mov	r0, fp
 8009040:	e7f9      	b.n	8009036 <__kernel_rem_pio2f+0x16e>
 8009042:	9307      	str	r3, [sp, #28]
 8009044:	9b05      	ldr	r3, [sp, #20]
 8009046:	f8da 1000 	ldr.w	r1, [sl]
 800904a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800904e:	f7f7 fe99 	bl	8000d84 <__aeabi_fmul>
 8009052:	4601      	mov	r1, r0
 8009054:	4630      	mov	r0, r6
 8009056:	f7f7 fd8d 	bl	8000b74 <__addsf3>
 800905a:	4606      	mov	r6, r0
 800905c:	9b07      	ldr	r3, [sp, #28]
 800905e:	f108 0801 	add.w	r8, r8, #1
 8009062:	9a03      	ldr	r2, [sp, #12]
 8009064:	f1aa 0a04 	sub.w	sl, sl, #4
 8009068:	4590      	cmp	r8, r2
 800906a:	ddea      	ble.n	8009042 <__kernel_rem_pio2f+0x17a>
 800906c:	f84b 6b04 	str.w	r6, [fp], #4
 8009070:	f109 0901 	add.w	r9, r9, #1
 8009074:	3504      	adds	r5, #4
 8009076:	e75d      	b.n	8008f34 <__kernel_rem_pio2f+0x6c>
 8009078:	46aa      	mov	sl, r5
 800907a:	461e      	mov	r6, r3
 800907c:	f04f 0800 	mov.w	r8, #0
 8009080:	e7ef      	b.n	8009062 <__kernel_rem_pio2f+0x19a>
 8009082:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009086:	4628      	mov	r0, r5
 8009088:	f7f7 fe7c 	bl	8000d84 <__aeabi_fmul>
 800908c:	f7f8 f840 	bl	8001110 <__aeabi_f2iz>
 8009090:	f7f7 fe24 	bl	8000cdc <__aeabi_i2f>
 8009094:	4649      	mov	r1, r9
 8009096:	9009      	str	r0, [sp, #36]	; 0x24
 8009098:	f7f7 fe74 	bl	8000d84 <__aeabi_fmul>
 800909c:	4601      	mov	r1, r0
 800909e:	4628      	mov	r0, r5
 80090a0:	f7f7 fd66 	bl	8000b70 <__aeabi_fsub>
 80090a4:	f7f8 f834 	bl	8001110 <__aeabi_f2iz>
 80090a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090ae:	f846 0b04 	str.w	r0, [r6], #4
 80090b2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7f7 fd5c 	bl	8000b74 <__addsf3>
 80090bc:	4605      	mov	r5, r0
 80090be:	e754      	b.n	8008f6a <__kernel_rem_pio2f+0xa2>
 80090c0:	d106      	bne.n	80090d0 <__kernel_rem_pio2f+0x208>
 80090c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80090c6:	aa0a      	add	r2, sp, #40	; 0x28
 80090c8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80090cc:	11ed      	asrs	r5, r5, #7
 80090ce:	e783      	b.n	8008fd8 <__kernel_rem_pio2f+0x110>
 80090d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80090d4:	f7f8 f808 	bl	80010e8 <__aeabi_fcmpge>
 80090d8:	4605      	mov	r5, r0
 80090da:	bb98      	cbnz	r0, 8009144 <__kernel_rem_pio2f+0x27c>
 80090dc:	2100      	movs	r1, #0
 80090de:	4648      	mov	r0, r9
 80090e0:	f7f7 ffe4 	bl	80010ac <__aeabi_fcmpeq>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f000 8098 	beq.w	800921a <__kernel_rem_pio2f+0x352>
 80090ea:	f108 34ff 	add.w	r4, r8, #4294967295
 80090ee:	4623      	mov	r3, r4
 80090f0:	2200      	movs	r2, #0
 80090f2:	9901      	ldr	r1, [sp, #4]
 80090f4:	428b      	cmp	r3, r1
 80090f6:	da4c      	bge.n	8009192 <__kernel_rem_pio2f+0x2ca>
 80090f8:	2a00      	cmp	r2, #0
 80090fa:	d07a      	beq.n	80091f2 <__kernel_rem_pio2f+0x32a>
 80090fc:	ab0a      	add	r3, sp, #40	; 0x28
 80090fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009102:	3f08      	subs	r7, #8
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8086 	beq.w	8009216 <__kernel_rem_pio2f+0x34e>
 800910a:	4639      	mov	r1, r7
 800910c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009110:	f000 fbb6 	bl	8009880 <scalbnf>
 8009114:	46a2      	mov	sl, r4
 8009116:	4681      	mov	r9, r0
 8009118:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800911c:	af46      	add	r7, sp, #280	; 0x118
 800911e:	f1ba 0f00 	cmp.w	sl, #0
 8009122:	f280 80af 	bge.w	8009284 <__kernel_rem_pio2f+0x3bc>
 8009126:	4627      	mov	r7, r4
 8009128:	2200      	movs	r2, #0
 800912a:	2f00      	cmp	r7, #0
 800912c:	f2c0 80d9 	blt.w	80092e2 <__kernel_rem_pio2f+0x41a>
 8009130:	a946      	add	r1, sp, #280	; 0x118
 8009132:	4690      	mov	r8, r2
 8009134:	f04f 0a00 	mov.w	sl, #0
 8009138:	4b1a      	ldr	r3, [pc, #104]	; (80091a4 <__kernel_rem_pio2f+0x2dc>)
 800913a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800913e:	eba4 0907 	sub.w	r9, r4, r7
 8009142:	e0c2      	b.n	80092ca <__kernel_rem_pio2f+0x402>
 8009144:	2502      	movs	r5, #2
 8009146:	e749      	b.n	8008fdc <__kernel_rem_pio2f+0x114>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	f1ba 0f00 	cmp.w	sl, #0
 800914e:	d108      	bne.n	8009162 <__kernel_rem_pio2f+0x29a>
 8009150:	b11b      	cbz	r3, 800915a <__kernel_rem_pio2f+0x292>
 8009152:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	2301      	movs	r3, #1
 800915a:	469a      	mov	sl, r3
 800915c:	3201      	adds	r2, #1
 800915e:	3404      	adds	r4, #4
 8009160:	e73f      	b.n	8008fe2 <__kernel_rem_pio2f+0x11a>
 8009162:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	4653      	mov	r3, sl
 800916a:	e7f6      	b.n	800915a <__kernel_rem_pio2f+0x292>
 800916c:	f108 32ff 	add.w	r2, r8, #4294967295
 8009170:	ab0a      	add	r3, sp, #40	; 0x28
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800917a:	a90a      	add	r1, sp, #40	; 0x28
 800917c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009180:	e73a      	b.n	8008ff8 <__kernel_rem_pio2f+0x130>
 8009182:	f108 32ff 	add.w	r2, r8, #4294967295
 8009186:	ab0a      	add	r3, sp, #40	; 0x28
 8009188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009190:	e7f3      	b.n	800917a <__kernel_rem_pio2f+0x2b2>
 8009192:	a90a      	add	r1, sp, #40	; 0x28
 8009194:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009198:	3b01      	subs	r3, #1
 800919a:	430a      	orrs	r2, r1
 800919c:	e7a9      	b.n	80090f2 <__kernel_rem_pio2f+0x22a>
 800919e:	bf00      	nop
 80091a0:	0800ce04 	.word	0x0800ce04
 80091a4:	0800cdd8 	.word	0x0800cdd8
 80091a8:	3301      	adds	r3, #1
 80091aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80091ae:	2900      	cmp	r1, #0
 80091b0:	d0fa      	beq.n	80091a8 <__kernel_rem_pio2f+0x2e0>
 80091b2:	9a04      	ldr	r2, [sp, #16]
 80091b4:	f108 0501 	add.w	r5, r8, #1
 80091b8:	eb08 0402 	add.w	r4, r8, r2
 80091bc:	aa1e      	add	r2, sp, #120	; 0x78
 80091be:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80091c2:	4498      	add	r8, r3
 80091c4:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80091c8:	45a8      	cmp	r8, r5
 80091ca:	f6ff aec2 	blt.w	8008f52 <__kernel_rem_pio2f+0x8a>
 80091ce:	9b07      	ldr	r3, [sp, #28]
 80091d0:	46a3      	mov	fp, r4
 80091d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091d6:	f7f7 fd81 	bl	8000cdc <__aeabi_i2f>
 80091da:	f04f 0a00 	mov.w	sl, #0
 80091de:	2600      	movs	r6, #0
 80091e0:	6020      	str	r0, [r4, #0]
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	459a      	cmp	sl, r3
 80091e6:	dd07      	ble.n	80091f8 <__kernel_rem_pio2f+0x330>
 80091e8:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 80091ec:	3404      	adds	r4, #4
 80091ee:	3501      	adds	r5, #1
 80091f0:	e7ea      	b.n	80091c8 <__kernel_rem_pio2f+0x300>
 80091f2:	2301      	movs	r3, #1
 80091f4:	9a08      	ldr	r2, [sp, #32]
 80091f6:	e7d8      	b.n	80091aa <__kernel_rem_pio2f+0x2e2>
 80091f8:	9b05      	ldr	r3, [sp, #20]
 80091fa:	f85b 0904 	ldr.w	r0, [fp], #-4
 80091fe:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8009202:	f7f7 fdbf 	bl	8000d84 <__aeabi_fmul>
 8009206:	4601      	mov	r1, r0
 8009208:	4630      	mov	r0, r6
 800920a:	f7f7 fcb3 	bl	8000b74 <__addsf3>
 800920e:	f10a 0a01 	add.w	sl, sl, #1
 8009212:	4606      	mov	r6, r0
 8009214:	e7e5      	b.n	80091e2 <__kernel_rem_pio2f+0x31a>
 8009216:	3c01      	subs	r4, #1
 8009218:	e770      	b.n	80090fc <__kernel_rem_pio2f+0x234>
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	9a02      	ldr	r2, [sp, #8]
 800921e:	4648      	mov	r0, r9
 8009220:	1a99      	subs	r1, r3, r2
 8009222:	f000 fb2d 	bl	8009880 <scalbnf>
 8009226:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800922a:	4604      	mov	r4, r0
 800922c:	f7f7 ff5c 	bl	80010e8 <__aeabi_fcmpge>
 8009230:	b300      	cbz	r0, 8009274 <__kernel_rem_pio2f+0x3ac>
 8009232:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009236:	4620      	mov	r0, r4
 8009238:	f7f7 fda4 	bl	8000d84 <__aeabi_fmul>
 800923c:	f7f7 ff68 	bl	8001110 <__aeabi_f2iz>
 8009240:	f7f7 fd4c 	bl	8000cdc <__aeabi_i2f>
 8009244:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009248:	4681      	mov	r9, r0
 800924a:	f7f7 fd9b 	bl	8000d84 <__aeabi_fmul>
 800924e:	4601      	mov	r1, r0
 8009250:	4620      	mov	r0, r4
 8009252:	f7f7 fc8d 	bl	8000b70 <__aeabi_fsub>
 8009256:	f7f7 ff5b 	bl	8001110 <__aeabi_f2iz>
 800925a:	ab0a      	add	r3, sp, #40	; 0x28
 800925c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009260:	4648      	mov	r0, r9
 8009262:	f7f7 ff55 	bl	8001110 <__aeabi_f2iz>
 8009266:	f108 0401 	add.w	r4, r8, #1
 800926a:	ab0a      	add	r3, sp, #40	; 0x28
 800926c:	3708      	adds	r7, #8
 800926e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009272:	e74a      	b.n	800910a <__kernel_rem_pio2f+0x242>
 8009274:	4620      	mov	r0, r4
 8009276:	f7f7 ff4b 	bl	8001110 <__aeabi_f2iz>
 800927a:	ab0a      	add	r3, sp, #40	; 0x28
 800927c:	4644      	mov	r4, r8
 800927e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009282:	e742      	b.n	800910a <__kernel_rem_pio2f+0x242>
 8009284:	ab0a      	add	r3, sp, #40	; 0x28
 8009286:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800928a:	f7f7 fd27 	bl	8000cdc <__aeabi_i2f>
 800928e:	4649      	mov	r1, r9
 8009290:	f7f7 fd78 	bl	8000d84 <__aeabi_fmul>
 8009294:	4641      	mov	r1, r8
 8009296:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800929a:	4648      	mov	r0, r9
 800929c:	f7f7 fd72 	bl	8000d84 <__aeabi_fmul>
 80092a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092a4:	4681      	mov	r9, r0
 80092a6:	e73a      	b.n	800911e <__kernel_rem_pio2f+0x256>
 80092a8:	f853 0b04 	ldr.w	r0, [r3], #4
 80092ac:	f85b 1b04 	ldr.w	r1, [fp], #4
 80092b0:	9203      	str	r2, [sp, #12]
 80092b2:	9302      	str	r3, [sp, #8]
 80092b4:	f7f7 fd66 	bl	8000d84 <__aeabi_fmul>
 80092b8:	4601      	mov	r1, r0
 80092ba:	4640      	mov	r0, r8
 80092bc:	f7f7 fc5a 	bl	8000b74 <__addsf3>
 80092c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092c4:	4680      	mov	r8, r0
 80092c6:	f10a 0a01 	add.w	sl, sl, #1
 80092ca:	9901      	ldr	r1, [sp, #4]
 80092cc:	458a      	cmp	sl, r1
 80092ce:	dc01      	bgt.n	80092d4 <__kernel_rem_pio2f+0x40c>
 80092d0:	45ca      	cmp	sl, r9
 80092d2:	dde9      	ble.n	80092a8 <__kernel_rem_pio2f+0x3e0>
 80092d4:	ab5a      	add	r3, sp, #360	; 0x168
 80092d6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80092da:	f849 8ca0 	str.w	r8, [r9, #-160]
 80092de:	3f01      	subs	r7, #1
 80092e0:	e723      	b.n	800912a <__kernel_rem_pio2f+0x262>
 80092e2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	dc07      	bgt.n	80092f8 <__kernel_rem_pio2f+0x430>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc4d      	bgt.n	8009388 <__kernel_rem_pio2f+0x4c0>
 80092ec:	d02e      	beq.n	800934c <__kernel_rem_pio2f+0x484>
 80092ee:	f006 0007 	and.w	r0, r6, #7
 80092f2:	b05b      	add	sp, #364	; 0x16c
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d1f7      	bne.n	80092ee <__kernel_rem_pio2f+0x426>
 80092fe:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8009302:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8009306:	46b8      	mov	r8, r7
 8009308:	46a2      	mov	sl, r4
 800930a:	f1ba 0f00 	cmp.w	sl, #0
 800930e:	dc48      	bgt.n	80093a2 <__kernel_rem_pio2f+0x4da>
 8009310:	46a1      	mov	r9, r4
 8009312:	f1b9 0f01 	cmp.w	r9, #1
 8009316:	dc5f      	bgt.n	80093d8 <__kernel_rem_pio2f+0x510>
 8009318:	2000      	movs	r0, #0
 800931a:	2c01      	cmp	r4, #1
 800931c:	dc75      	bgt.n	800940a <__kernel_rem_pio2f+0x542>
 800931e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8009320:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8009322:	2d00      	cmp	r5, #0
 8009324:	d177      	bne.n	8009416 <__kernel_rem_pio2f+0x54e>
 8009326:	9900      	ldr	r1, [sp, #0]
 8009328:	600a      	str	r2, [r1, #0]
 800932a:	460a      	mov	r2, r1
 800932c:	604b      	str	r3, [r1, #4]
 800932e:	6090      	str	r0, [r2, #8]
 8009330:	e7dd      	b.n	80092ee <__kernel_rem_pio2f+0x426>
 8009332:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8009336:	f7f7 fc1d 	bl	8000b74 <__addsf3>
 800933a:	3c01      	subs	r4, #1
 800933c:	2c00      	cmp	r4, #0
 800933e:	daf8      	bge.n	8009332 <__kernel_rem_pio2f+0x46a>
 8009340:	b10d      	cbz	r5, 8009346 <__kernel_rem_pio2f+0x47e>
 8009342:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	6018      	str	r0, [r3, #0]
 800934a:	e7d0      	b.n	80092ee <__kernel_rem_pio2f+0x426>
 800934c:	2000      	movs	r0, #0
 800934e:	af32      	add	r7, sp, #200	; 0xc8
 8009350:	e7f4      	b.n	800933c <__kernel_rem_pio2f+0x474>
 8009352:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8009356:	f7f7 fc0d 	bl	8000b74 <__addsf3>
 800935a:	3f01      	subs	r7, #1
 800935c:	2f00      	cmp	r7, #0
 800935e:	daf8      	bge.n	8009352 <__kernel_rem_pio2f+0x48a>
 8009360:	b1bd      	cbz	r5, 8009392 <__kernel_rem_pio2f+0x4ca>
 8009362:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8009366:	9a00      	ldr	r2, [sp, #0]
 8009368:	4601      	mov	r1, r0
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800936e:	f7f7 fbff 	bl	8000b70 <__aeabi_fsub>
 8009372:	2701      	movs	r7, #1
 8009374:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8009378:	42bc      	cmp	r4, r7
 800937a:	da0c      	bge.n	8009396 <__kernel_rem_pio2f+0x4ce>
 800937c:	b10d      	cbz	r5, 8009382 <__kernel_rem_pio2f+0x4ba>
 800937e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	6058      	str	r0, [r3, #4]
 8009386:	e7b2      	b.n	80092ee <__kernel_rem_pio2f+0x426>
 8009388:	4627      	mov	r7, r4
 800938a:	2000      	movs	r0, #0
 800938c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8009390:	e7e4      	b.n	800935c <__kernel_rem_pio2f+0x494>
 8009392:	4603      	mov	r3, r0
 8009394:	e7e7      	b.n	8009366 <__kernel_rem_pio2f+0x49e>
 8009396:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800939a:	f7f7 fbeb 	bl	8000b74 <__addsf3>
 800939e:	3701      	adds	r7, #1
 80093a0:	e7ea      	b.n	8009378 <__kernel_rem_pio2f+0x4b0>
 80093a2:	f8d8 3000 	ldr.w	r3, [r8]
 80093a6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	9302      	str	r3, [sp, #8]
 80093b0:	9201      	str	r2, [sp, #4]
 80093b2:	f7f7 fbdf 	bl	8000b74 <__addsf3>
 80093b6:	9a01      	ldr	r2, [sp, #4]
 80093b8:	4601      	mov	r1, r0
 80093ba:	4681      	mov	r9, r0
 80093bc:	4610      	mov	r0, r2
 80093be:	f7f7 fbd7 	bl	8000b70 <__aeabi_fsub>
 80093c2:	9b02      	ldr	r3, [sp, #8]
 80093c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093c8:	4619      	mov	r1, r3
 80093ca:	f7f7 fbd3 	bl	8000b74 <__addsf3>
 80093ce:	f848 0904 	str.w	r0, [r8], #-4
 80093d2:	f8c8 9000 	str.w	r9, [r8]
 80093d6:	e798      	b.n	800930a <__kernel_rem_pio2f+0x442>
 80093d8:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80093dc:	f8d7 a000 	ldr.w	sl, [r7]
 80093e0:	4618      	mov	r0, r3
 80093e2:	4651      	mov	r1, sl
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	f7f7 fbc5 	bl	8000b74 <__addsf3>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	4601      	mov	r1, r0
 80093ee:	4680      	mov	r8, r0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7f7 fbbd 	bl	8000b70 <__aeabi_fsub>
 80093f6:	4651      	mov	r1, sl
 80093f8:	f7f7 fbbc 	bl	8000b74 <__addsf3>
 80093fc:	f847 0904 	str.w	r0, [r7], #-4
 8009400:	f109 39ff 	add.w	r9, r9, #4294967295
 8009404:	f8c7 8000 	str.w	r8, [r7]
 8009408:	e783      	b.n	8009312 <__kernel_rem_pio2f+0x44a>
 800940a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800940e:	f7f7 fbb1 	bl	8000b74 <__addsf3>
 8009412:	3c01      	subs	r4, #1
 8009414:	e781      	b.n	800931a <__kernel_rem_pio2f+0x452>
 8009416:	9900      	ldr	r1, [sp, #0]
 8009418:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800941c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009420:	600a      	str	r2, [r1, #0]
 8009422:	604b      	str	r3, [r1, #4]
 8009424:	460a      	mov	r2, r1
 8009426:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800942a:	e780      	b.n	800932e <__kernel_rem_pio2f+0x466>

0800942c <__kernel_tanf>:
 800942c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 8009434:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 8009438:	4604      	mov	r4, r0
 800943a:	460e      	mov	r6, r1
 800943c:	4690      	mov	r8, r2
 800943e:	4607      	mov	r7, r0
 8009440:	da1b      	bge.n	800947a <__kernel_tanf+0x4e>
 8009442:	f7f7 fe65 	bl	8001110 <__aeabi_f2iz>
 8009446:	2800      	cmp	r0, #0
 8009448:	d12f      	bne.n	80094aa <__kernel_tanf+0x7e>
 800944a:	f108 0301 	add.w	r3, r8, #1
 800944e:	ea53 030a 	orrs.w	r3, r3, sl
 8009452:	d10c      	bne.n	800946e <__kernel_tanf+0x42>
 8009454:	4620      	mov	r0, r4
 8009456:	f000 f9cd 	bl	80097f4 <fabsf>
 800945a:	4601      	mov	r1, r0
 800945c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009460:	f7f7 fd44 	bl	8000eec <__aeabi_fdiv>
 8009464:	4604      	mov	r4, r0
 8009466:	4620      	mov	r0, r4
 8009468:	b003      	add	sp, #12
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946e:	f1b8 0f01 	cmp.w	r8, #1
 8009472:	d0f8      	beq.n	8009466 <__kernel_tanf+0x3a>
 8009474:	4621      	mov	r1, r4
 8009476:	4872      	ldr	r0, [pc, #456]	; (8009640 <__kernel_tanf+0x214>)
 8009478:	e7f2      	b.n	8009460 <__kernel_tanf+0x34>
 800947a:	4b72      	ldr	r3, [pc, #456]	; (8009644 <__kernel_tanf+0x218>)
 800947c:	459a      	cmp	sl, r3
 800947e:	db14      	blt.n	80094aa <__kernel_tanf+0x7e>
 8009480:	2800      	cmp	r0, #0
 8009482:	bfbe      	ittt	lt
 8009484:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 8009488:	4604      	movlt	r4, r0
 800948a:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 800948e:	486e      	ldr	r0, [pc, #440]	; (8009648 <__kernel_tanf+0x21c>)
 8009490:	4621      	mov	r1, r4
 8009492:	f7f7 fb6d 	bl	8000b70 <__aeabi_fsub>
 8009496:	4604      	mov	r4, r0
 8009498:	4631      	mov	r1, r6
 800949a:	486c      	ldr	r0, [pc, #432]	; (800964c <__kernel_tanf+0x220>)
 800949c:	f7f7 fb68 	bl	8000b70 <__aeabi_fsub>
 80094a0:	4621      	mov	r1, r4
 80094a2:	f7f7 fb67 	bl	8000b74 <__addsf3>
 80094a6:	2600      	movs	r6, #0
 80094a8:	4604      	mov	r4, r0
 80094aa:	4621      	mov	r1, r4
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7f7 fc69 	bl	8000d84 <__aeabi_fmul>
 80094b2:	4601      	mov	r1, r0
 80094b4:	4681      	mov	r9, r0
 80094b6:	f7f7 fc65 	bl	8000d84 <__aeabi_fmul>
 80094ba:	4649      	mov	r1, r9
 80094bc:	4605      	mov	r5, r0
 80094be:	4620      	mov	r0, r4
 80094c0:	f7f7 fc60 	bl	8000d84 <__aeabi_fmul>
 80094c4:	4962      	ldr	r1, [pc, #392]	; (8009650 <__kernel_tanf+0x224>)
 80094c6:	4683      	mov	fp, r0
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7f7 fc5b 	bl	8000d84 <__aeabi_fmul>
 80094ce:	4961      	ldr	r1, [pc, #388]	; (8009654 <__kernel_tanf+0x228>)
 80094d0:	f7f7 fb50 	bl	8000b74 <__addsf3>
 80094d4:	4629      	mov	r1, r5
 80094d6:	f7f7 fc55 	bl	8000d84 <__aeabi_fmul>
 80094da:	495f      	ldr	r1, [pc, #380]	; (8009658 <__kernel_tanf+0x22c>)
 80094dc:	f7f7 fb4a 	bl	8000b74 <__addsf3>
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7f7 fc4f 	bl	8000d84 <__aeabi_fmul>
 80094e6:	495d      	ldr	r1, [pc, #372]	; (800965c <__kernel_tanf+0x230>)
 80094e8:	f7f7 fb44 	bl	8000b74 <__addsf3>
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f7 fc49 	bl	8000d84 <__aeabi_fmul>
 80094f2:	495b      	ldr	r1, [pc, #364]	; (8009660 <__kernel_tanf+0x234>)
 80094f4:	f7f7 fb3e 	bl	8000b74 <__addsf3>
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7f7 fc43 	bl	8000d84 <__aeabi_fmul>
 80094fe:	4959      	ldr	r1, [pc, #356]	; (8009664 <__kernel_tanf+0x238>)
 8009500:	f7f7 fb38 	bl	8000b74 <__addsf3>
 8009504:	4649      	mov	r1, r9
 8009506:	f7f7 fc3d 	bl	8000d84 <__aeabi_fmul>
 800950a:	4957      	ldr	r1, [pc, #348]	; (8009668 <__kernel_tanf+0x23c>)
 800950c:	9001      	str	r0, [sp, #4]
 800950e:	4628      	mov	r0, r5
 8009510:	f7f7 fc38 	bl	8000d84 <__aeabi_fmul>
 8009514:	4955      	ldr	r1, [pc, #340]	; (800966c <__kernel_tanf+0x240>)
 8009516:	f7f7 fb2d 	bl	8000b74 <__addsf3>
 800951a:	4629      	mov	r1, r5
 800951c:	f7f7 fc32 	bl	8000d84 <__aeabi_fmul>
 8009520:	4953      	ldr	r1, [pc, #332]	; (8009670 <__kernel_tanf+0x244>)
 8009522:	f7f7 fb27 	bl	8000b74 <__addsf3>
 8009526:	4629      	mov	r1, r5
 8009528:	f7f7 fc2c 	bl	8000d84 <__aeabi_fmul>
 800952c:	4951      	ldr	r1, [pc, #324]	; (8009674 <__kernel_tanf+0x248>)
 800952e:	f7f7 fb21 	bl	8000b74 <__addsf3>
 8009532:	4629      	mov	r1, r5
 8009534:	f7f7 fc26 	bl	8000d84 <__aeabi_fmul>
 8009538:	494f      	ldr	r1, [pc, #316]	; (8009678 <__kernel_tanf+0x24c>)
 800953a:	f7f7 fb1b 	bl	8000b74 <__addsf3>
 800953e:	4629      	mov	r1, r5
 8009540:	f7f7 fc20 	bl	8000d84 <__aeabi_fmul>
 8009544:	494d      	ldr	r1, [pc, #308]	; (800967c <__kernel_tanf+0x250>)
 8009546:	f7f7 fb15 	bl	8000b74 <__addsf3>
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	4601      	mov	r1, r0
 800954e:	4618      	mov	r0, r3
 8009550:	f7f7 fb10 	bl	8000b74 <__addsf3>
 8009554:	4659      	mov	r1, fp
 8009556:	f7f7 fc15 	bl	8000d84 <__aeabi_fmul>
 800955a:	4631      	mov	r1, r6
 800955c:	f7f7 fb0a 	bl	8000b74 <__addsf3>
 8009560:	4649      	mov	r1, r9
 8009562:	f7f7 fc0f 	bl	8000d84 <__aeabi_fmul>
 8009566:	4631      	mov	r1, r6
 8009568:	f7f7 fb04 	bl	8000b74 <__addsf3>
 800956c:	4605      	mov	r5, r0
 800956e:	4944      	ldr	r1, [pc, #272]	; (8009680 <__kernel_tanf+0x254>)
 8009570:	4658      	mov	r0, fp
 8009572:	f7f7 fc07 	bl	8000d84 <__aeabi_fmul>
 8009576:	4629      	mov	r1, r5
 8009578:	f7f7 fafc 	bl	8000b74 <__addsf3>
 800957c:	4601      	mov	r1, r0
 800957e:	4681      	mov	r9, r0
 8009580:	4620      	mov	r0, r4
 8009582:	f7f7 faf7 	bl	8000b74 <__addsf3>
 8009586:	4b2f      	ldr	r3, [pc, #188]	; (8009644 <__kernel_tanf+0x218>)
 8009588:	4605      	mov	r5, r0
 800958a:	459a      	cmp	sl, r3
 800958c:	db2b      	blt.n	80095e6 <__kernel_tanf+0x1ba>
 800958e:	4640      	mov	r0, r8
 8009590:	f7f7 fba4 	bl	8000cdc <__aeabi_i2f>
 8009594:	4629      	mov	r1, r5
 8009596:	4606      	mov	r6, r0
 8009598:	4628      	mov	r0, r5
 800959a:	f7f7 fbf3 	bl	8000d84 <__aeabi_fmul>
 800959e:	4631      	mov	r1, r6
 80095a0:	4680      	mov	r8, r0
 80095a2:	4628      	mov	r0, r5
 80095a4:	f7f7 fae6 	bl	8000b74 <__addsf3>
 80095a8:	4601      	mov	r1, r0
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7f7 fc9e 	bl	8000eec <__aeabi_fdiv>
 80095b0:	4649      	mov	r1, r9
 80095b2:	f7f7 fadd 	bl	8000b70 <__aeabi_fsub>
 80095b6:	4601      	mov	r1, r0
 80095b8:	4620      	mov	r0, r4
 80095ba:	f7f7 fad9 	bl	8000b70 <__aeabi_fsub>
 80095be:	4601      	mov	r1, r0
 80095c0:	f7f7 fad8 	bl	8000b74 <__addsf3>
 80095c4:	4601      	mov	r1, r0
 80095c6:	4630      	mov	r0, r6
 80095c8:	f7f7 fad2 	bl	8000b70 <__aeabi_fsub>
 80095cc:	17bf      	asrs	r7, r7, #30
 80095ce:	f007 0702 	and.w	r7, r7, #2
 80095d2:	4604      	mov	r4, r0
 80095d4:	f1c7 0001 	rsb	r0, r7, #1
 80095d8:	f7f7 fb80 	bl	8000cdc <__aeabi_i2f>
 80095dc:	4601      	mov	r1, r0
 80095de:	4620      	mov	r0, r4
 80095e0:	f7f7 fbd0 	bl	8000d84 <__aeabi_fmul>
 80095e4:	e73e      	b.n	8009464 <__kernel_tanf+0x38>
 80095e6:	f1b8 0f01 	cmp.w	r8, #1
 80095ea:	d027      	beq.n	800963c <__kernel_tanf+0x210>
 80095ec:	4e25      	ldr	r6, [pc, #148]	; (8009684 <__kernel_tanf+0x258>)
 80095ee:	4601      	mov	r1, r0
 80095f0:	ea06 0800 	and.w	r8, r6, r0
 80095f4:	4812      	ldr	r0, [pc, #72]	; (8009640 <__kernel_tanf+0x214>)
 80095f6:	f7f7 fc79 	bl	8000eec <__aeabi_fdiv>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4006      	ands	r6, r0
 80095fe:	4607      	mov	r7, r0
 8009600:	4640      	mov	r0, r8
 8009602:	f7f7 fab5 	bl	8000b70 <__aeabi_fsub>
 8009606:	4601      	mov	r1, r0
 8009608:	4648      	mov	r0, r9
 800960a:	f7f7 fab1 	bl	8000b70 <__aeabi_fsub>
 800960e:	4631      	mov	r1, r6
 8009610:	f7f7 fbb8 	bl	8000d84 <__aeabi_fmul>
 8009614:	4631      	mov	r1, r6
 8009616:	4604      	mov	r4, r0
 8009618:	4640      	mov	r0, r8
 800961a:	f7f7 fbb3 	bl	8000d84 <__aeabi_fmul>
 800961e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009622:	f7f7 faa7 	bl	8000b74 <__addsf3>
 8009626:	4601      	mov	r1, r0
 8009628:	4620      	mov	r0, r4
 800962a:	f7f7 faa3 	bl	8000b74 <__addsf3>
 800962e:	4639      	mov	r1, r7
 8009630:	f7f7 fba8 	bl	8000d84 <__aeabi_fmul>
 8009634:	4631      	mov	r1, r6
 8009636:	f7f7 fa9d 	bl	8000b74 <__addsf3>
 800963a:	e713      	b.n	8009464 <__kernel_tanf+0x38>
 800963c:	4604      	mov	r4, r0
 800963e:	e712      	b.n	8009466 <__kernel_tanf+0x3a>
 8009640:	bf800000 	.word	0xbf800000
 8009644:	3f2ca140 	.word	0x3f2ca140
 8009648:	3f490fda 	.word	0x3f490fda
 800964c:	33222168 	.word	0x33222168
 8009650:	37d95384 	.word	0x37d95384
 8009654:	3895c07a 	.word	0x3895c07a
 8009658:	398137b9 	.word	0x398137b9
 800965c:	3abede48 	.word	0x3abede48
 8009660:	3c11371f 	.word	0x3c11371f
 8009664:	3d5d0dd1 	.word	0x3d5d0dd1
 8009668:	b79bae5f 	.word	0xb79bae5f
 800966c:	38a3f445 	.word	0x38a3f445
 8009670:	3a1a26c8 	.word	0x3a1a26c8
 8009674:	3b6b6916 	.word	0x3b6b6916
 8009678:	3cb327a4 	.word	0x3cb327a4
 800967c:	3e088889 	.word	0x3e088889
 8009680:	3eaaaaab 	.word	0x3eaaaaab
 8009684:	fffff000 	.word	0xfffff000

08009688 <with_errno>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	4604      	mov	r4, r0
 800968c:	460d      	mov	r5, r1
 800968e:	4616      	mov	r6, r2
 8009690:	f000 f94a 	bl	8009928 <__errno>
 8009694:	4629      	mov	r1, r5
 8009696:	6006      	str	r6, [r0, #0]
 8009698:	4620      	mov	r0, r4
 800969a:	bd70      	pop	{r4, r5, r6, pc}

0800969c <xflow>:
 800969c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800969e:	4615      	mov	r5, r2
 80096a0:	461c      	mov	r4, r3
 80096a2:	b180      	cbz	r0, 80096c6 <xflow+0x2a>
 80096a4:	4610      	mov	r0, r2
 80096a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80096aa:	e9cd 0100 	strd	r0, r1, [sp]
 80096ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096b2:	4628      	mov	r0, r5
 80096b4:	4621      	mov	r1, r4
 80096b6:	f7f6 ff0f 	bl	80004d8 <__aeabi_dmul>
 80096ba:	2222      	movs	r2, #34	; 0x22
 80096bc:	b003      	add	sp, #12
 80096be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c2:	f7ff bfe1 	b.w	8009688 <with_errno>
 80096c6:	4610      	mov	r0, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	e7ee      	b.n	80096aa <xflow+0xe>

080096cc <__math_uflow>:
 80096cc:	2200      	movs	r2, #0
 80096ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096d2:	f7ff bfe3 	b.w	800969c <xflow>

080096d6 <__math_oflow>:
 80096d6:	2200      	movs	r2, #0
 80096d8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80096dc:	f7ff bfde 	b.w	800969c <xflow>

080096e0 <fabs>:
 80096e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80096e4:	4770      	bx	lr

080096e6 <finite>:
 80096e6:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80096ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80096ee:	0fc0      	lsrs	r0, r0, #31
 80096f0:	4770      	bx	lr
 80096f2:	0000      	movs	r0, r0
 80096f4:	0000      	movs	r0, r0
	...

080096f8 <scalbn>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80096fe:	4604      	mov	r4, r0
 8009700:	460d      	mov	r5, r1
 8009702:	4617      	mov	r7, r2
 8009704:	460b      	mov	r3, r1
 8009706:	b996      	cbnz	r6, 800972e <scalbn+0x36>
 8009708:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800970c:	4303      	orrs	r3, r0
 800970e:	d039      	beq.n	8009784 <scalbn+0x8c>
 8009710:	4b33      	ldr	r3, [pc, #204]	; (80097e0 <scalbn+0xe8>)
 8009712:	2200      	movs	r2, #0
 8009714:	f7f6 fee0 	bl	80004d8 <__aeabi_dmul>
 8009718:	4b32      	ldr	r3, [pc, #200]	; (80097e4 <scalbn+0xec>)
 800971a:	4604      	mov	r4, r0
 800971c:	429f      	cmp	r7, r3
 800971e:	460d      	mov	r5, r1
 8009720:	da0f      	bge.n	8009742 <scalbn+0x4a>
 8009722:	a32b      	add	r3, pc, #172	; (adr r3, 80097d0 <scalbn+0xd8>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fed6 	bl	80004d8 <__aeabi_dmul>
 800972c:	e006      	b.n	800973c <scalbn+0x44>
 800972e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009732:	4296      	cmp	r6, r2
 8009734:	d10a      	bne.n	800974c <scalbn+0x54>
 8009736:	4602      	mov	r2, r0
 8009738:	f7f6 fd18 	bl	800016c <__adddf3>
 800973c:	4604      	mov	r4, r0
 800973e:	460d      	mov	r5, r1
 8009740:	e020      	b.n	8009784 <scalbn+0x8c>
 8009742:	460b      	mov	r3, r1
 8009744:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009748:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800974c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009750:	19b9      	adds	r1, r7, r6
 8009752:	4291      	cmp	r1, r2
 8009754:	dd0e      	ble.n	8009774 <scalbn+0x7c>
 8009756:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800975a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800975e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009762:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009766:	4820      	ldr	r0, [pc, #128]	; (80097e8 <scalbn+0xf0>)
 8009768:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800976c:	a31a      	add	r3, pc, #104	; (adr r3, 80097d8 <scalbn+0xe0>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	e7d9      	b.n	8009728 <scalbn+0x30>
 8009774:	2900      	cmp	r1, #0
 8009776:	dd08      	ble.n	800978a <scalbn+0x92>
 8009778:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800977c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009780:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800978e:	da12      	bge.n	80097b6 <scalbn+0xbe>
 8009790:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009794:	429f      	cmp	r7, r3
 8009796:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800979a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800979e:	dcdc      	bgt.n	800975a <scalbn+0x62>
 80097a0:	a30b      	add	r3, pc, #44	; (adr r3, 80097d0 <scalbn+0xd8>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80097aa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80097ae:	480f      	ldr	r0, [pc, #60]	; (80097ec <scalbn+0xf4>)
 80097b0:	f041 011f 	orr.w	r1, r1, #31
 80097b4:	e7b8      	b.n	8009728 <scalbn+0x30>
 80097b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097ba:	3136      	adds	r1, #54	; 0x36
 80097bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	2200      	movs	r2, #0
 80097ca:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <scalbn+0xf8>)
 80097cc:	e7ac      	b.n	8009728 <scalbn+0x30>
 80097ce:	bf00      	nop
 80097d0:	c2f8f359 	.word	0xc2f8f359
 80097d4:	01a56e1f 	.word	0x01a56e1f
 80097d8:	8800759c 	.word	0x8800759c
 80097dc:	7e37e43c 	.word	0x7e37e43c
 80097e0:	43500000 	.word	0x43500000
 80097e4:	ffff3cb0 	.word	0xffff3cb0
 80097e8:	8800759c 	.word	0x8800759c
 80097ec:	c2f8f359 	.word	0xc2f8f359
 80097f0:	3c900000 	.word	0x3c900000

080097f4 <fabsf>:
 80097f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80097f8:	4770      	bx	lr
	...

080097fc <floorf>:
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009802:	3d7f      	subs	r5, #127	; 0x7f
 8009804:	2d16      	cmp	r5, #22
 8009806:	4601      	mov	r1, r0
 8009808:	4604      	mov	r4, r0
 800980a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800980e:	dc26      	bgt.n	800985e <floorf+0x62>
 8009810:	2d00      	cmp	r5, #0
 8009812:	da0e      	bge.n	8009832 <floorf+0x36>
 8009814:	4917      	ldr	r1, [pc, #92]	; (8009874 <floorf+0x78>)
 8009816:	f7f7 f9ad 	bl	8000b74 <__addsf3>
 800981a:	2100      	movs	r1, #0
 800981c:	f7f7 fc6e 	bl	80010fc <__aeabi_fcmpgt>
 8009820:	b128      	cbz	r0, 800982e <floorf+0x32>
 8009822:	2c00      	cmp	r4, #0
 8009824:	da23      	bge.n	800986e <floorf+0x72>
 8009826:	4b14      	ldr	r3, [pc, #80]	; (8009878 <floorf+0x7c>)
 8009828:	2e00      	cmp	r6, #0
 800982a:	bf18      	it	ne
 800982c:	461c      	movne	r4, r3
 800982e:	4621      	mov	r1, r4
 8009830:	e01b      	b.n	800986a <floorf+0x6e>
 8009832:	4e12      	ldr	r6, [pc, #72]	; (800987c <floorf+0x80>)
 8009834:	412e      	asrs	r6, r5
 8009836:	4230      	tst	r0, r6
 8009838:	d017      	beq.n	800986a <floorf+0x6e>
 800983a:	490e      	ldr	r1, [pc, #56]	; (8009874 <floorf+0x78>)
 800983c:	f7f7 f99a 	bl	8000b74 <__addsf3>
 8009840:	2100      	movs	r1, #0
 8009842:	f7f7 fc5b 	bl	80010fc <__aeabi_fcmpgt>
 8009846:	2800      	cmp	r0, #0
 8009848:	d0f1      	beq.n	800982e <floorf+0x32>
 800984a:	2c00      	cmp	r4, #0
 800984c:	bfbe      	ittt	lt
 800984e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009852:	fa43 f505 	asrlt.w	r5, r3, r5
 8009856:	1964      	addlt	r4, r4, r5
 8009858:	ea24 0406 	bic.w	r4, r4, r6
 800985c:	e7e7      	b.n	800982e <floorf+0x32>
 800985e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009862:	d302      	bcc.n	800986a <floorf+0x6e>
 8009864:	f7f7 f986 	bl	8000b74 <__addsf3>
 8009868:	4601      	mov	r1, r0
 800986a:	4608      	mov	r0, r1
 800986c:	bd70      	pop	{r4, r5, r6, pc}
 800986e:	2400      	movs	r4, #0
 8009870:	e7dd      	b.n	800982e <floorf+0x32>
 8009872:	bf00      	nop
 8009874:	7149f2ca 	.word	0x7149f2ca
 8009878:	bf800000 	.word	0xbf800000
 800987c:	007fffff 	.word	0x007fffff

08009880 <scalbnf>:
 8009880:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4603      	mov	r3, r0
 8009888:	460d      	mov	r5, r1
 800988a:	4604      	mov	r4, r0
 800988c:	d02a      	beq.n	80098e4 <scalbnf+0x64>
 800988e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009892:	d304      	bcc.n	800989e <scalbnf+0x1e>
 8009894:	4601      	mov	r1, r0
 8009896:	f7f7 f96d 	bl	8000b74 <__addsf3>
 800989a:	4603      	mov	r3, r0
 800989c:	e022      	b.n	80098e4 <scalbnf+0x64>
 800989e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80098a2:	d117      	bne.n	80098d4 <scalbnf+0x54>
 80098a4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80098a8:	f7f7 fa6c 	bl	8000d84 <__aeabi_fmul>
 80098ac:	4a17      	ldr	r2, [pc, #92]	; (800990c <scalbnf+0x8c>)
 80098ae:	4603      	mov	r3, r0
 80098b0:	4295      	cmp	r5, r2
 80098b2:	db0b      	blt.n	80098cc <scalbnf+0x4c>
 80098b4:	4604      	mov	r4, r0
 80098b6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80098ba:	3a19      	subs	r2, #25
 80098bc:	442a      	add	r2, r5
 80098be:	2afe      	cmp	r2, #254	; 0xfe
 80098c0:	dd0a      	ble.n	80098d8 <scalbnf+0x58>
 80098c2:	4913      	ldr	r1, [pc, #76]	; (8009910 <scalbnf+0x90>)
 80098c4:	4618      	mov	r0, r3
 80098c6:	f361 001e 	bfi	r0, r1, #0, #31
 80098ca:	e000      	b.n	80098ce <scalbnf+0x4e>
 80098cc:	4911      	ldr	r1, [pc, #68]	; (8009914 <scalbnf+0x94>)
 80098ce:	f7f7 fa59 	bl	8000d84 <__aeabi_fmul>
 80098d2:	e7e2      	b.n	800989a <scalbnf+0x1a>
 80098d4:	0dd2      	lsrs	r2, r2, #23
 80098d6:	e7f1      	b.n	80098bc <scalbnf+0x3c>
 80098d8:	2a00      	cmp	r2, #0
 80098da:	dd05      	ble.n	80098e8 <scalbnf+0x68>
 80098dc:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80098e0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 80098e4:	4618      	mov	r0, r3
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	f112 0f16 	cmn.w	r2, #22
 80098ec:	da05      	bge.n	80098fa <scalbnf+0x7a>
 80098ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80098f2:	4295      	cmp	r5, r2
 80098f4:	dce5      	bgt.n	80098c2 <scalbnf+0x42>
 80098f6:	4907      	ldr	r1, [pc, #28]	; (8009914 <scalbnf+0x94>)
 80098f8:	e7e4      	b.n	80098c4 <scalbnf+0x44>
 80098fa:	3219      	adds	r2, #25
 80098fc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009900:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009904:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8009908:	e7e1      	b.n	80098ce <scalbnf+0x4e>
 800990a:	bf00      	nop
 800990c:	ffff3cb0 	.word	0xffff3cb0
 8009910:	7149f2ca 	.word	0x7149f2ca
 8009914:	0da24260 	.word	0x0da24260

08009918 <abort>:
 8009918:	2006      	movs	r0, #6
 800991a:	b508      	push	{r3, lr}
 800991c:	f000 fdc0 	bl	800a4a0 <raise>
 8009920:	2001      	movs	r0, #1
 8009922:	f7f9 fe36 	bl	8003592 <_exit>
	...

08009928 <__errno>:
 8009928:	4b01      	ldr	r3, [pc, #4]	; (8009930 <__errno+0x8>)
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	2000000c 	.word	0x2000000c

08009934 <__libc_init_array>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	2600      	movs	r6, #0
 8009938:	4d0c      	ldr	r5, [pc, #48]	; (800996c <__libc_init_array+0x38>)
 800993a:	4c0d      	ldr	r4, [pc, #52]	; (8009970 <__libc_init_array+0x3c>)
 800993c:	1b64      	subs	r4, r4, r5
 800993e:	10a4      	asrs	r4, r4, #2
 8009940:	42a6      	cmp	r6, r4
 8009942:	d109      	bne.n	8009958 <__libc_init_array+0x24>
 8009944:	f002 fef2 	bl	800c72c <_init>
 8009948:	2600      	movs	r6, #0
 800994a:	4d0a      	ldr	r5, [pc, #40]	; (8009974 <__libc_init_array+0x40>)
 800994c:	4c0a      	ldr	r4, [pc, #40]	; (8009978 <__libc_init_array+0x44>)
 800994e:	1b64      	subs	r4, r4, r5
 8009950:	10a4      	asrs	r4, r4, #2
 8009952:	42a6      	cmp	r6, r4
 8009954:	d105      	bne.n	8009962 <__libc_init_array+0x2e>
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	f855 3b04 	ldr.w	r3, [r5], #4
 800995c:	4798      	blx	r3
 800995e:	3601      	adds	r6, #1
 8009960:	e7ee      	b.n	8009940 <__libc_init_array+0xc>
 8009962:	f855 3b04 	ldr.w	r3, [r5], #4
 8009966:	4798      	blx	r3
 8009968:	3601      	adds	r6, #1
 800996a:	e7f2      	b.n	8009952 <__libc_init_array+0x1e>
 800996c:	0800d1ec 	.word	0x0800d1ec
 8009970:	0800d1ec 	.word	0x0800d1ec
 8009974:	0800d1ec 	.word	0x0800d1ec
 8009978:	0800d1f0 	.word	0x0800d1f0

0800997c <malloc>:
 800997c:	4b02      	ldr	r3, [pc, #8]	; (8009988 <malloc+0xc>)
 800997e:	4601      	mov	r1, r0
 8009980:	6818      	ldr	r0, [r3, #0]
 8009982:	f000 b881 	b.w	8009a88 <_malloc_r>
 8009986:	bf00      	nop
 8009988:	2000000c 	.word	0x2000000c

0800998c <memcpy>:
 800998c:	440a      	add	r2, r1
 800998e:	4291      	cmp	r1, r2
 8009990:	f100 33ff 	add.w	r3, r0, #4294967295
 8009994:	d100      	bne.n	8009998 <memcpy+0xc>
 8009996:	4770      	bx	lr
 8009998:	b510      	push	{r4, lr}
 800999a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800999e:	4291      	cmp	r1, r2
 80099a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099a4:	d1f9      	bne.n	800999a <memcpy+0xe>
 80099a6:	bd10      	pop	{r4, pc}

080099a8 <memset>:
 80099a8:	4603      	mov	r3, r0
 80099aa:	4402      	add	r2, r0
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d100      	bne.n	80099b2 <memset+0xa>
 80099b0:	4770      	bx	lr
 80099b2:	f803 1b01 	strb.w	r1, [r3], #1
 80099b6:	e7f9      	b.n	80099ac <memset+0x4>

080099b8 <_free_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4605      	mov	r5, r0
 80099bc:	2900      	cmp	r1, #0
 80099be:	d040      	beq.n	8009a42 <_free_r+0x8a>
 80099c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c4:	1f0c      	subs	r4, r1, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	bfb8      	it	lt
 80099ca:	18e4      	addlt	r4, r4, r3
 80099cc:	f001 fc30 	bl	800b230 <__malloc_lock>
 80099d0:	4a1c      	ldr	r2, [pc, #112]	; (8009a44 <_free_r+0x8c>)
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	b933      	cbnz	r3, 80099e4 <_free_r+0x2c>
 80099d6:	6063      	str	r3, [r4, #4]
 80099d8:	6014      	str	r4, [r2, #0]
 80099da:	4628      	mov	r0, r5
 80099dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e0:	f001 bc2c 	b.w	800b23c <__malloc_unlock>
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d908      	bls.n	80099fa <_free_r+0x42>
 80099e8:	6820      	ldr	r0, [r4, #0]
 80099ea:	1821      	adds	r1, r4, r0
 80099ec:	428b      	cmp	r3, r1
 80099ee:	bf01      	itttt	eq
 80099f0:	6819      	ldreq	r1, [r3, #0]
 80099f2:	685b      	ldreq	r3, [r3, #4]
 80099f4:	1809      	addeq	r1, r1, r0
 80099f6:	6021      	streq	r1, [r4, #0]
 80099f8:	e7ed      	b.n	80099d6 <_free_r+0x1e>
 80099fa:	461a      	mov	r2, r3
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	b10b      	cbz	r3, 8009a04 <_free_r+0x4c>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d9fa      	bls.n	80099fa <_free_r+0x42>
 8009a04:	6811      	ldr	r1, [r2, #0]
 8009a06:	1850      	adds	r0, r2, r1
 8009a08:	42a0      	cmp	r0, r4
 8009a0a:	d10b      	bne.n	8009a24 <_free_r+0x6c>
 8009a0c:	6820      	ldr	r0, [r4, #0]
 8009a0e:	4401      	add	r1, r0
 8009a10:	1850      	adds	r0, r2, r1
 8009a12:	4283      	cmp	r3, r0
 8009a14:	6011      	str	r1, [r2, #0]
 8009a16:	d1e0      	bne.n	80099da <_free_r+0x22>
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	4401      	add	r1, r0
 8009a1e:	6011      	str	r1, [r2, #0]
 8009a20:	6053      	str	r3, [r2, #4]
 8009a22:	e7da      	b.n	80099da <_free_r+0x22>
 8009a24:	d902      	bls.n	8009a2c <_free_r+0x74>
 8009a26:	230c      	movs	r3, #12
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	e7d6      	b.n	80099da <_free_r+0x22>
 8009a2c:	6820      	ldr	r0, [r4, #0]
 8009a2e:	1821      	adds	r1, r4, r0
 8009a30:	428b      	cmp	r3, r1
 8009a32:	bf01      	itttt	eq
 8009a34:	6819      	ldreq	r1, [r3, #0]
 8009a36:	685b      	ldreq	r3, [r3, #4]
 8009a38:	1809      	addeq	r1, r1, r0
 8009a3a:	6021      	streq	r1, [r4, #0]
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	6054      	str	r4, [r2, #4]
 8009a40:	e7cb      	b.n	80099da <_free_r+0x22>
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	200007c8 	.word	0x200007c8

08009a48 <sbrk_aligned>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	4e0e      	ldr	r6, [pc, #56]	; (8009a84 <sbrk_aligned+0x3c>)
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	6831      	ldr	r1, [r6, #0]
 8009a50:	4605      	mov	r5, r0
 8009a52:	b911      	cbnz	r1, 8009a5a <sbrk_aligned+0x12>
 8009a54:	f000 fcec 	bl	800a430 <_sbrk_r>
 8009a58:	6030      	str	r0, [r6, #0]
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f000 fce7 	bl	800a430 <_sbrk_r>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	d00a      	beq.n	8009a7c <sbrk_aligned+0x34>
 8009a66:	1cc4      	adds	r4, r0, #3
 8009a68:	f024 0403 	bic.w	r4, r4, #3
 8009a6c:	42a0      	cmp	r0, r4
 8009a6e:	d007      	beq.n	8009a80 <sbrk_aligned+0x38>
 8009a70:	1a21      	subs	r1, r4, r0
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 fcdc 	bl	800a430 <_sbrk_r>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d101      	bne.n	8009a80 <sbrk_aligned+0x38>
 8009a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a80:	4620      	mov	r0, r4
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	200007cc 	.word	0x200007cc

08009a88 <_malloc_r>:
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	1ccd      	adds	r5, r1, #3
 8009a8e:	f025 0503 	bic.w	r5, r5, #3
 8009a92:	3508      	adds	r5, #8
 8009a94:	2d0c      	cmp	r5, #12
 8009a96:	bf38      	it	cc
 8009a98:	250c      	movcc	r5, #12
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	db01      	blt.n	8009aa4 <_malloc_r+0x1c>
 8009aa0:	42a9      	cmp	r1, r5
 8009aa2:	d905      	bls.n	8009ab0 <_malloc_r+0x28>
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	603b      	str	r3, [r7, #0]
 8009aaa:	4630      	mov	r0, r6
 8009aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab0:	4e2e      	ldr	r6, [pc, #184]	; (8009b6c <_malloc_r+0xe4>)
 8009ab2:	f001 fbbd 	bl	800b230 <__malloc_lock>
 8009ab6:	6833      	ldr	r3, [r6, #0]
 8009ab8:	461c      	mov	r4, r3
 8009aba:	bb34      	cbnz	r4, 8009b0a <_malloc_r+0x82>
 8009abc:	4629      	mov	r1, r5
 8009abe:	4638      	mov	r0, r7
 8009ac0:	f7ff ffc2 	bl	8009a48 <sbrk_aligned>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	d14d      	bne.n	8009b66 <_malloc_r+0xde>
 8009aca:	6834      	ldr	r4, [r6, #0]
 8009acc:	4626      	mov	r6, r4
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	d140      	bne.n	8009b54 <_malloc_r+0xcc>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	eb04 0803 	add.w	r8, r4, r3
 8009adc:	f000 fca8 	bl	800a430 <_sbrk_r>
 8009ae0:	4580      	cmp	r8, r0
 8009ae2:	d13a      	bne.n	8009b5a <_malloc_r+0xd2>
 8009ae4:	6821      	ldr	r1, [r4, #0]
 8009ae6:	3503      	adds	r5, #3
 8009ae8:	1a6d      	subs	r5, r5, r1
 8009aea:	f025 0503 	bic.w	r5, r5, #3
 8009aee:	3508      	adds	r5, #8
 8009af0:	2d0c      	cmp	r5, #12
 8009af2:	bf38      	it	cc
 8009af4:	250c      	movcc	r5, #12
 8009af6:	4638      	mov	r0, r7
 8009af8:	4629      	mov	r1, r5
 8009afa:	f7ff ffa5 	bl	8009a48 <sbrk_aligned>
 8009afe:	3001      	adds	r0, #1
 8009b00:	d02b      	beq.n	8009b5a <_malloc_r+0xd2>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	442b      	add	r3, r5
 8009b06:	6023      	str	r3, [r4, #0]
 8009b08:	e00e      	b.n	8009b28 <_malloc_r+0xa0>
 8009b0a:	6822      	ldr	r2, [r4, #0]
 8009b0c:	1b52      	subs	r2, r2, r5
 8009b0e:	d41e      	bmi.n	8009b4e <_malloc_r+0xc6>
 8009b10:	2a0b      	cmp	r2, #11
 8009b12:	d916      	bls.n	8009b42 <_malloc_r+0xba>
 8009b14:	1961      	adds	r1, r4, r5
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	6025      	str	r5, [r4, #0]
 8009b1a:	bf18      	it	ne
 8009b1c:	6059      	strne	r1, [r3, #4]
 8009b1e:	6863      	ldr	r3, [r4, #4]
 8009b20:	bf08      	it	eq
 8009b22:	6031      	streq	r1, [r6, #0]
 8009b24:	5162      	str	r2, [r4, r5]
 8009b26:	604b      	str	r3, [r1, #4]
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f104 060b 	add.w	r6, r4, #11
 8009b2e:	f001 fb85 	bl	800b23c <__malloc_unlock>
 8009b32:	f026 0607 	bic.w	r6, r6, #7
 8009b36:	1d23      	adds	r3, r4, #4
 8009b38:	1af2      	subs	r2, r6, r3
 8009b3a:	d0b6      	beq.n	8009aaa <_malloc_r+0x22>
 8009b3c:	1b9b      	subs	r3, r3, r6
 8009b3e:	50a3      	str	r3, [r4, r2]
 8009b40:	e7b3      	b.n	8009aaa <_malloc_r+0x22>
 8009b42:	6862      	ldr	r2, [r4, #4]
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	bf0c      	ite	eq
 8009b48:	6032      	streq	r2, [r6, #0]
 8009b4a:	605a      	strne	r2, [r3, #4]
 8009b4c:	e7ec      	b.n	8009b28 <_malloc_r+0xa0>
 8009b4e:	4623      	mov	r3, r4
 8009b50:	6864      	ldr	r4, [r4, #4]
 8009b52:	e7b2      	b.n	8009aba <_malloc_r+0x32>
 8009b54:	4634      	mov	r4, r6
 8009b56:	6876      	ldr	r6, [r6, #4]
 8009b58:	e7b9      	b.n	8009ace <_malloc_r+0x46>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	f001 fb6c 	bl	800b23c <__malloc_unlock>
 8009b64:	e7a1      	b.n	8009aaa <_malloc_r+0x22>
 8009b66:	6025      	str	r5, [r4, #0]
 8009b68:	e7de      	b.n	8009b28 <_malloc_r+0xa0>
 8009b6a:	bf00      	nop
 8009b6c:	200007c8 	.word	0x200007c8

08009b70 <__cvt>:
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b76:	461f      	mov	r7, r3
 8009b78:	bfbb      	ittet	lt
 8009b7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009b7e:	461f      	movlt	r7, r3
 8009b80:	2300      	movge	r3, #0
 8009b82:	232d      	movlt	r3, #45	; 0x2d
 8009b84:	b088      	sub	sp, #32
 8009b86:	4614      	mov	r4, r2
 8009b88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009b8c:	7013      	strb	r3, [r2, #0]
 8009b8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009b94:	f023 0820 	bic.w	r8, r3, #32
 8009b98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b9c:	d005      	beq.n	8009baa <__cvt+0x3a>
 8009b9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ba2:	d100      	bne.n	8009ba6 <__cvt+0x36>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e000      	b.n	8009bac <__cvt+0x3c>
 8009baa:	2303      	movs	r3, #3
 8009bac:	aa07      	add	r2, sp, #28
 8009bae:	9204      	str	r2, [sp, #16]
 8009bb0:	aa06      	add	r2, sp, #24
 8009bb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009bb6:	e9cd 3500 	strd	r3, r5, [sp]
 8009bba:	4622      	mov	r2, r4
 8009bbc:	463b      	mov	r3, r7
 8009bbe:	f000 fd37 	bl	800a630 <_dtoa_r>
 8009bc2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	d102      	bne.n	8009bd0 <__cvt+0x60>
 8009bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bcc:	07db      	lsls	r3, r3, #31
 8009bce:	d522      	bpl.n	8009c16 <__cvt+0xa6>
 8009bd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bd4:	eb06 0905 	add.w	r9, r6, r5
 8009bd8:	d110      	bne.n	8009bfc <__cvt+0x8c>
 8009bda:	7833      	ldrb	r3, [r6, #0]
 8009bdc:	2b30      	cmp	r3, #48	; 0x30
 8009bde:	d10a      	bne.n	8009bf6 <__cvt+0x86>
 8009be0:	2200      	movs	r2, #0
 8009be2:	2300      	movs	r3, #0
 8009be4:	4620      	mov	r0, r4
 8009be6:	4639      	mov	r1, r7
 8009be8:	f7f6 fede 	bl	80009a8 <__aeabi_dcmpeq>
 8009bec:	b918      	cbnz	r0, 8009bf6 <__cvt+0x86>
 8009bee:	f1c5 0501 	rsb	r5, r5, #1
 8009bf2:	f8ca 5000 	str.w	r5, [sl]
 8009bf6:	f8da 3000 	ldr.w	r3, [sl]
 8009bfa:	4499      	add	r9, r3
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4620      	mov	r0, r4
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8009c08:	b108      	cbz	r0, 8009c0e <__cvt+0x9e>
 8009c0a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c0e:	2230      	movs	r2, #48	; 0x30
 8009c10:	9b07      	ldr	r3, [sp, #28]
 8009c12:	454b      	cmp	r3, r9
 8009c14:	d307      	bcc.n	8009c26 <__cvt+0xb6>
 8009c16:	4630      	mov	r0, r6
 8009c18:	9b07      	ldr	r3, [sp, #28]
 8009c1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c1c:	1b9b      	subs	r3, r3, r6
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	b008      	add	sp, #32
 8009c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c26:	1c59      	adds	r1, r3, #1
 8009c28:	9107      	str	r1, [sp, #28]
 8009c2a:	701a      	strb	r2, [r3, #0]
 8009c2c:	e7f0      	b.n	8009c10 <__cvt+0xa0>

08009c2e <__exponent>:
 8009c2e:	4603      	mov	r3, r0
 8009c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c32:	2900      	cmp	r1, #0
 8009c34:	f803 2b02 	strb.w	r2, [r3], #2
 8009c38:	bfb6      	itet	lt
 8009c3a:	222d      	movlt	r2, #45	; 0x2d
 8009c3c:	222b      	movge	r2, #43	; 0x2b
 8009c3e:	4249      	neglt	r1, r1
 8009c40:	2909      	cmp	r1, #9
 8009c42:	7042      	strb	r2, [r0, #1]
 8009c44:	dd2b      	ble.n	8009c9e <__exponent+0x70>
 8009c46:	f10d 0407 	add.w	r4, sp, #7
 8009c4a:	46a4      	mov	ip, r4
 8009c4c:	270a      	movs	r7, #10
 8009c4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c52:	460a      	mov	r2, r1
 8009c54:	46a6      	mov	lr, r4
 8009c56:	fb07 1516 	mls	r5, r7, r6, r1
 8009c5a:	2a63      	cmp	r2, #99	; 0x63
 8009c5c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009c60:	4631      	mov	r1, r6
 8009c62:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c6a:	dcf0      	bgt.n	8009c4e <__exponent+0x20>
 8009c6c:	3130      	adds	r1, #48	; 0x30
 8009c6e:	f1ae 0502 	sub.w	r5, lr, #2
 8009c72:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c76:	4629      	mov	r1, r5
 8009c78:	1c44      	adds	r4, r0, #1
 8009c7a:	4561      	cmp	r1, ip
 8009c7c:	d30a      	bcc.n	8009c94 <__exponent+0x66>
 8009c7e:	f10d 0209 	add.w	r2, sp, #9
 8009c82:	eba2 020e 	sub.w	r2, r2, lr
 8009c86:	4565      	cmp	r5, ip
 8009c88:	bf88      	it	hi
 8009c8a:	2200      	movhi	r2, #0
 8009c8c:	4413      	add	r3, r2
 8009c8e:	1a18      	subs	r0, r3, r0
 8009c90:	b003      	add	sp, #12
 8009c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c98:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c9c:	e7ed      	b.n	8009c7a <__exponent+0x4c>
 8009c9e:	2330      	movs	r3, #48	; 0x30
 8009ca0:	3130      	adds	r1, #48	; 0x30
 8009ca2:	7083      	strb	r3, [r0, #2]
 8009ca4:	70c1      	strb	r1, [r0, #3]
 8009ca6:	1d03      	adds	r3, r0, #4
 8009ca8:	e7f1      	b.n	8009c8e <__exponent+0x60>
	...

08009cac <_printf_float>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	b091      	sub	sp, #68	; 0x44
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009cb8:	4616      	mov	r6, r2
 8009cba:	461f      	mov	r7, r3
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	f001 faa5 	bl	800b20c <_localeconv_r>
 8009cc2:	6803      	ldr	r3, [r0, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc8:	f7f6 fa42 	bl	8000150 <strlen>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	930e      	str	r3, [sp, #56]	; 0x38
 8009cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd4:	900a      	str	r0, [sp, #40]	; 0x28
 8009cd6:	3307      	adds	r3, #7
 8009cd8:	f023 0307 	bic.w	r3, r3, #7
 8009cdc:	f103 0208 	add.w	r2, r3, #8
 8009ce0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009ce4:	f8d4 b000 	ldr.w	fp, [r4]
 8009ce8:	f8c8 2000 	str.w	r2, [r8]
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cf4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009cf8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	4640      	mov	r0, r8
 8009d04:	4b9c      	ldr	r3, [pc, #624]	; (8009f78 <_printf_float+0x2cc>)
 8009d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d08:	f7f6 fe80 	bl	8000a0c <__aeabi_dcmpun>
 8009d0c:	bb70      	cbnz	r0, 8009d6c <_printf_float+0xc0>
 8009d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d12:	4640      	mov	r0, r8
 8009d14:	4b98      	ldr	r3, [pc, #608]	; (8009f78 <_printf_float+0x2cc>)
 8009d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d18:	f7f6 fe5a 	bl	80009d0 <__aeabi_dcmple>
 8009d1c:	bb30      	cbnz	r0, 8009d6c <_printf_float+0xc0>
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2300      	movs	r3, #0
 8009d22:	4640      	mov	r0, r8
 8009d24:	4651      	mov	r1, sl
 8009d26:	f7f6 fe49 	bl	80009bc <__aeabi_dcmplt>
 8009d2a:	b110      	cbz	r0, 8009d32 <_printf_float+0x86>
 8009d2c:	232d      	movs	r3, #45	; 0x2d
 8009d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d32:	4b92      	ldr	r3, [pc, #584]	; (8009f7c <_printf_float+0x2d0>)
 8009d34:	4892      	ldr	r0, [pc, #584]	; (8009f80 <_printf_float+0x2d4>)
 8009d36:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d3a:	bf94      	ite	ls
 8009d3c:	4698      	movls	r8, r3
 8009d3e:	4680      	movhi	r8, r0
 8009d40:	2303      	movs	r3, #3
 8009d42:	f04f 0a00 	mov.w	sl, #0
 8009d46:	6123      	str	r3, [r4, #16]
 8009d48:	f02b 0304 	bic.w	r3, fp, #4
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	4633      	mov	r3, r6
 8009d50:	4621      	mov	r1, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	9700      	str	r7, [sp, #0]
 8009d56:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d58:	f000 f9d4 	bl	800a104 <_printf_common>
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f040 8090 	bne.w	8009e82 <_printf_float+0x1d6>
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295
 8009d66:	b011      	add	sp, #68	; 0x44
 8009d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	4653      	mov	r3, sl
 8009d70:	4640      	mov	r0, r8
 8009d72:	4651      	mov	r1, sl
 8009d74:	f7f6 fe4a 	bl	8000a0c <__aeabi_dcmpun>
 8009d78:	b148      	cbz	r0, 8009d8e <_printf_float+0xe2>
 8009d7a:	f1ba 0f00 	cmp.w	sl, #0
 8009d7e:	bfb8      	it	lt
 8009d80:	232d      	movlt	r3, #45	; 0x2d
 8009d82:	4880      	ldr	r0, [pc, #512]	; (8009f84 <_printf_float+0x2d8>)
 8009d84:	bfb8      	it	lt
 8009d86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d8a:	4b7f      	ldr	r3, [pc, #508]	; (8009f88 <_printf_float+0x2dc>)
 8009d8c:	e7d3      	b.n	8009d36 <_printf_float+0x8a>
 8009d8e:	6863      	ldr	r3, [r4, #4]
 8009d90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	d142      	bne.n	8009e1e <_printf_float+0x172>
 8009d98:	2306      	movs	r3, #6
 8009d9a:	6063      	str	r3, [r4, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	9206      	str	r2, [sp, #24]
 8009da0:	aa0e      	add	r2, sp, #56	; 0x38
 8009da2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009da6:	aa0d      	add	r2, sp, #52	; 0x34
 8009da8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009dac:	9203      	str	r2, [sp, #12]
 8009dae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009db2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	4642      	mov	r2, r8
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	4653      	mov	r3, sl
 8009dc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8009dc4:	f7ff fed4 	bl	8009b70 <__cvt>
 8009dc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dca:	4680      	mov	r8, r0
 8009dcc:	2947      	cmp	r1, #71	; 0x47
 8009dce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009dd0:	d108      	bne.n	8009de4 <_printf_float+0x138>
 8009dd2:	1cc8      	adds	r0, r1, #3
 8009dd4:	db02      	blt.n	8009ddc <_printf_float+0x130>
 8009dd6:	6863      	ldr	r3, [r4, #4]
 8009dd8:	4299      	cmp	r1, r3
 8009dda:	dd40      	ble.n	8009e5e <_printf_float+0x1b2>
 8009ddc:	f1a9 0902 	sub.w	r9, r9, #2
 8009de0:	fa5f f989 	uxtb.w	r9, r9
 8009de4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009de8:	d81f      	bhi.n	8009e2a <_printf_float+0x17e>
 8009dea:	464a      	mov	r2, r9
 8009dec:	3901      	subs	r1, #1
 8009dee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009df2:	910d      	str	r1, [sp, #52]	; 0x34
 8009df4:	f7ff ff1b 	bl	8009c2e <__exponent>
 8009df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dfa:	4682      	mov	sl, r0
 8009dfc:	1813      	adds	r3, r2, r0
 8009dfe:	2a01      	cmp	r2, #1
 8009e00:	6123      	str	r3, [r4, #16]
 8009e02:	dc02      	bgt.n	8009e0a <_printf_float+0x15e>
 8009e04:	6822      	ldr	r2, [r4, #0]
 8009e06:	07d2      	lsls	r2, r2, #31
 8009e08:	d501      	bpl.n	8009e0e <_printf_float+0x162>
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d09b      	beq.n	8009d4e <_printf_float+0xa2>
 8009e16:	232d      	movs	r3, #45	; 0x2d
 8009e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e1c:	e797      	b.n	8009d4e <_printf_float+0xa2>
 8009e1e:	2947      	cmp	r1, #71	; 0x47
 8009e20:	d1bc      	bne.n	8009d9c <_printf_float+0xf0>
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1ba      	bne.n	8009d9c <_printf_float+0xf0>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e7b7      	b.n	8009d9a <_printf_float+0xee>
 8009e2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e2e:	d118      	bne.n	8009e62 <_printf_float+0x1b6>
 8009e30:	2900      	cmp	r1, #0
 8009e32:	6863      	ldr	r3, [r4, #4]
 8009e34:	dd0b      	ble.n	8009e4e <_printf_float+0x1a2>
 8009e36:	6121      	str	r1, [r4, #16]
 8009e38:	b913      	cbnz	r3, 8009e40 <_printf_float+0x194>
 8009e3a:	6822      	ldr	r2, [r4, #0]
 8009e3c:	07d0      	lsls	r0, r2, #31
 8009e3e:	d502      	bpl.n	8009e46 <_printf_float+0x19a>
 8009e40:	3301      	adds	r3, #1
 8009e42:	440b      	add	r3, r1
 8009e44:	6123      	str	r3, [r4, #16]
 8009e46:	f04f 0a00 	mov.w	sl, #0
 8009e4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e4c:	e7df      	b.n	8009e0e <_printf_float+0x162>
 8009e4e:	b913      	cbnz	r3, 8009e56 <_printf_float+0x1aa>
 8009e50:	6822      	ldr	r2, [r4, #0]
 8009e52:	07d2      	lsls	r2, r2, #31
 8009e54:	d501      	bpl.n	8009e5a <_printf_float+0x1ae>
 8009e56:	3302      	adds	r3, #2
 8009e58:	e7f4      	b.n	8009e44 <_printf_float+0x198>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e7f2      	b.n	8009e44 <_printf_float+0x198>
 8009e5e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e64:	4299      	cmp	r1, r3
 8009e66:	db05      	blt.n	8009e74 <_printf_float+0x1c8>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	6121      	str	r1, [r4, #16]
 8009e6c:	07d8      	lsls	r0, r3, #31
 8009e6e:	d5ea      	bpl.n	8009e46 <_printf_float+0x19a>
 8009e70:	1c4b      	adds	r3, r1, #1
 8009e72:	e7e7      	b.n	8009e44 <_printf_float+0x198>
 8009e74:	2900      	cmp	r1, #0
 8009e76:	bfcc      	ite	gt
 8009e78:	2201      	movgt	r2, #1
 8009e7a:	f1c1 0202 	rsble	r2, r1, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	e7e0      	b.n	8009e44 <_printf_float+0x198>
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	055a      	lsls	r2, r3, #21
 8009e86:	d407      	bmi.n	8009e98 <_printf_float+0x1ec>
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	4642      	mov	r2, r8
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4628      	mov	r0, r5
 8009e90:	47b8      	blx	r7
 8009e92:	3001      	adds	r0, #1
 8009e94:	d12b      	bne.n	8009eee <_printf_float+0x242>
 8009e96:	e764      	b.n	8009d62 <_printf_float+0xb6>
 8009e98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e9c:	f240 80dd 	bls.w	800a05a <_printf_float+0x3ae>
 8009ea0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f7f6 fd7e 	bl	80009a8 <__aeabi_dcmpeq>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d033      	beq.n	8009f18 <_printf_float+0x26c>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	4a35      	ldr	r2, [pc, #212]	; (8009f8c <_printf_float+0x2e0>)
 8009eb8:	47b8      	blx	r7
 8009eba:	3001      	adds	r0, #1
 8009ebc:	f43f af51 	beq.w	8009d62 <_printf_float+0xb6>
 8009ec0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	db02      	blt.n	8009ece <_printf_float+0x222>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	07d8      	lsls	r0, r3, #31
 8009ecc:	d50f      	bpl.n	8009eee <_printf_float+0x242>
 8009ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f43f af42 	beq.w	8009d62 <_printf_float+0xb6>
 8009ede:	f04f 0800 	mov.w	r8, #0
 8009ee2:	f104 091a 	add.w	r9, r4, #26
 8009ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	4543      	cmp	r3, r8
 8009eec:	dc09      	bgt.n	8009f02 <_printf_float+0x256>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	079b      	lsls	r3, r3, #30
 8009ef2:	f100 8102 	bmi.w	800a0fa <_printf_float+0x44e>
 8009ef6:	68e0      	ldr	r0, [r4, #12]
 8009ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009efa:	4298      	cmp	r0, r3
 8009efc:	bfb8      	it	lt
 8009efe:	4618      	movlt	r0, r3
 8009f00:	e731      	b.n	8009d66 <_printf_float+0xba>
 8009f02:	2301      	movs	r3, #1
 8009f04:	464a      	mov	r2, r9
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f af28 	beq.w	8009d62 <_printf_float+0xb6>
 8009f12:	f108 0801 	add.w	r8, r8, #1
 8009f16:	e7e6      	b.n	8009ee6 <_printf_float+0x23a>
 8009f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	dc38      	bgt.n	8009f90 <_printf_float+0x2e4>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4631      	mov	r1, r6
 8009f22:	4628      	mov	r0, r5
 8009f24:	4a19      	ldr	r2, [pc, #100]	; (8009f8c <_printf_float+0x2e0>)
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f af1a 	beq.w	8009d62 <_printf_float+0xb6>
 8009f2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f32:	4313      	orrs	r3, r2
 8009f34:	d102      	bne.n	8009f3c <_printf_float+0x290>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	07d9      	lsls	r1, r3, #31
 8009f3a:	d5d8      	bpl.n	8009eee <_printf_float+0x242>
 8009f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f af0b 	beq.w	8009d62 <_printf_float+0xb6>
 8009f4c:	f04f 0900 	mov.w	r9, #0
 8009f50:	f104 0a1a 	add.w	sl, r4, #26
 8009f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f56:	425b      	negs	r3, r3
 8009f58:	454b      	cmp	r3, r9
 8009f5a:	dc01      	bgt.n	8009f60 <_printf_float+0x2b4>
 8009f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f5e:	e794      	b.n	8009e8a <_printf_float+0x1de>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4652      	mov	r2, sl
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f aef9 	beq.w	8009d62 <_printf_float+0xb6>
 8009f70:	f109 0901 	add.w	r9, r9, #1
 8009f74:	e7ee      	b.n	8009f54 <_printf_float+0x2a8>
 8009f76:	bf00      	nop
 8009f78:	7fefffff 	.word	0x7fefffff
 8009f7c:	0800ce14 	.word	0x0800ce14
 8009f80:	0800ce18 	.word	0x0800ce18
 8009f84:	0800ce20 	.word	0x0800ce20
 8009f88:	0800ce1c 	.word	0x0800ce1c
 8009f8c:	0800ce24 	.word	0x0800ce24
 8009f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f94:	429a      	cmp	r2, r3
 8009f96:	bfa8      	it	ge
 8009f98:	461a      	movge	r2, r3
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	4691      	mov	r9, r2
 8009f9e:	dc37      	bgt.n	800a010 <_printf_float+0x364>
 8009fa0:	f04f 0b00 	mov.w	fp, #0
 8009fa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fa8:	f104 021a 	add.w	r2, r4, #26
 8009fac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009fb0:	ebaa 0309 	sub.w	r3, sl, r9
 8009fb4:	455b      	cmp	r3, fp
 8009fb6:	dc33      	bgt.n	800a020 <_printf_float+0x374>
 8009fb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	db3b      	blt.n	800a038 <_printf_float+0x38c>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	07da      	lsls	r2, r3, #31
 8009fc4:	d438      	bmi.n	800a038 <_printf_float+0x38c>
 8009fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009fca:	eba3 020a 	sub.w	r2, r3, sl
 8009fce:	eba3 0901 	sub.w	r9, r3, r1
 8009fd2:	4591      	cmp	r9, r2
 8009fd4:	bfa8      	it	ge
 8009fd6:	4691      	movge	r9, r2
 8009fd8:	f1b9 0f00 	cmp.w	r9, #0
 8009fdc:	dc34      	bgt.n	800a048 <_printf_float+0x39c>
 8009fde:	f04f 0800 	mov.w	r8, #0
 8009fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fe6:	f104 0a1a 	add.w	sl, r4, #26
 8009fea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	eba3 0309 	sub.w	r3, r3, r9
 8009ff4:	4543      	cmp	r3, r8
 8009ff6:	f77f af7a 	ble.w	8009eee <_printf_float+0x242>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4631      	mov	r1, r6
 800a000:	4628      	mov	r0, r5
 800a002:	47b8      	blx	r7
 800a004:	3001      	adds	r0, #1
 800a006:	f43f aeac 	beq.w	8009d62 <_printf_float+0xb6>
 800a00a:	f108 0801 	add.w	r8, r8, #1
 800a00e:	e7ec      	b.n	8009fea <_printf_float+0x33e>
 800a010:	4613      	mov	r3, r2
 800a012:	4631      	mov	r1, r6
 800a014:	4642      	mov	r2, r8
 800a016:	4628      	mov	r0, r5
 800a018:	47b8      	blx	r7
 800a01a:	3001      	adds	r0, #1
 800a01c:	d1c0      	bne.n	8009fa0 <_printf_float+0x2f4>
 800a01e:	e6a0      	b.n	8009d62 <_printf_float+0xb6>
 800a020:	2301      	movs	r3, #1
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	920b      	str	r2, [sp, #44]	; 0x2c
 800a028:	47b8      	blx	r7
 800a02a:	3001      	adds	r0, #1
 800a02c:	f43f ae99 	beq.w	8009d62 <_printf_float+0xb6>
 800a030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a032:	f10b 0b01 	add.w	fp, fp, #1
 800a036:	e7b9      	b.n	8009fac <_printf_float+0x300>
 800a038:	4631      	mov	r1, r6
 800a03a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	d1bf      	bne.n	8009fc6 <_printf_float+0x31a>
 800a046:	e68c      	b.n	8009d62 <_printf_float+0xb6>
 800a048:	464b      	mov	r3, r9
 800a04a:	4631      	mov	r1, r6
 800a04c:	4628      	mov	r0, r5
 800a04e:	eb08 020a 	add.w	r2, r8, sl
 800a052:	47b8      	blx	r7
 800a054:	3001      	adds	r0, #1
 800a056:	d1c2      	bne.n	8009fde <_printf_float+0x332>
 800a058:	e683      	b.n	8009d62 <_printf_float+0xb6>
 800a05a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a05c:	2a01      	cmp	r2, #1
 800a05e:	dc01      	bgt.n	800a064 <_printf_float+0x3b8>
 800a060:	07db      	lsls	r3, r3, #31
 800a062:	d537      	bpl.n	800a0d4 <_printf_float+0x428>
 800a064:	2301      	movs	r3, #1
 800a066:	4642      	mov	r2, r8
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f ae77 	beq.w	8009d62 <_printf_float+0xb6>
 800a074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a078:	4631      	mov	r1, r6
 800a07a:	4628      	mov	r0, r5
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	f43f ae6f 	beq.w	8009d62 <_printf_float+0xb6>
 800a084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a088:	2200      	movs	r2, #0
 800a08a:	2300      	movs	r3, #0
 800a08c:	f7f6 fc8c 	bl	80009a8 <__aeabi_dcmpeq>
 800a090:	b9d8      	cbnz	r0, 800a0ca <_printf_float+0x41e>
 800a092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a094:	f108 0201 	add.w	r2, r8, #1
 800a098:	3b01      	subs	r3, #1
 800a09a:	4631      	mov	r1, r6
 800a09c:	4628      	mov	r0, r5
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d10e      	bne.n	800a0c2 <_printf_float+0x416>
 800a0a4:	e65d      	b.n	8009d62 <_printf_float+0xb6>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	464a      	mov	r2, r9
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b8      	blx	r7
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	f43f ae56 	beq.w	8009d62 <_printf_float+0xb6>
 800a0b6:	f108 0801 	add.w	r8, r8, #1
 800a0ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	4543      	cmp	r3, r8
 800a0c0:	dcf1      	bgt.n	800a0a6 <_printf_float+0x3fa>
 800a0c2:	4653      	mov	r3, sl
 800a0c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0c8:	e6e0      	b.n	8009e8c <_printf_float+0x1e0>
 800a0ca:	f04f 0800 	mov.w	r8, #0
 800a0ce:	f104 091a 	add.w	r9, r4, #26
 800a0d2:	e7f2      	b.n	800a0ba <_printf_float+0x40e>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	4642      	mov	r2, r8
 800a0d8:	e7df      	b.n	800a09a <_printf_float+0x3ee>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	464a      	mov	r2, r9
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f43f ae3c 	beq.w	8009d62 <_printf_float+0xb6>
 800a0ea:	f108 0801 	add.w	r8, r8, #1
 800a0ee:	68e3      	ldr	r3, [r4, #12]
 800a0f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0f2:	1a5b      	subs	r3, r3, r1
 800a0f4:	4543      	cmp	r3, r8
 800a0f6:	dcf0      	bgt.n	800a0da <_printf_float+0x42e>
 800a0f8:	e6fd      	b.n	8009ef6 <_printf_float+0x24a>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	f104 0919 	add.w	r9, r4, #25
 800a102:	e7f4      	b.n	800a0ee <_printf_float+0x442>

0800a104 <_printf_common>:
 800a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	4616      	mov	r6, r2
 800a10a:	4699      	mov	r9, r3
 800a10c:	688a      	ldr	r2, [r1, #8]
 800a10e:	690b      	ldr	r3, [r1, #16]
 800a110:	4607      	mov	r7, r0
 800a112:	4293      	cmp	r3, r2
 800a114:	bfb8      	it	lt
 800a116:	4613      	movlt	r3, r2
 800a118:	6033      	str	r3, [r6, #0]
 800a11a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a11e:	460c      	mov	r4, r1
 800a120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a124:	b10a      	cbz	r2, 800a12a <_printf_common+0x26>
 800a126:	3301      	adds	r3, #1
 800a128:	6033      	str	r3, [r6, #0]
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	0699      	lsls	r1, r3, #26
 800a12e:	bf42      	ittt	mi
 800a130:	6833      	ldrmi	r3, [r6, #0]
 800a132:	3302      	addmi	r3, #2
 800a134:	6033      	strmi	r3, [r6, #0]
 800a136:	6825      	ldr	r5, [r4, #0]
 800a138:	f015 0506 	ands.w	r5, r5, #6
 800a13c:	d106      	bne.n	800a14c <_printf_common+0x48>
 800a13e:	f104 0a19 	add.w	sl, r4, #25
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	6832      	ldr	r2, [r6, #0]
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	42ab      	cmp	r3, r5
 800a14a:	dc28      	bgt.n	800a19e <_printf_common+0x9a>
 800a14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a150:	1e13      	subs	r3, r2, #0
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	bf18      	it	ne
 800a156:	2301      	movne	r3, #1
 800a158:	0692      	lsls	r2, r2, #26
 800a15a:	d42d      	bmi.n	800a1b8 <_printf_common+0xb4>
 800a15c:	4649      	mov	r1, r9
 800a15e:	4638      	mov	r0, r7
 800a160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a164:	47c0      	blx	r8
 800a166:	3001      	adds	r0, #1
 800a168:	d020      	beq.n	800a1ac <_printf_common+0xa8>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	68e5      	ldr	r5, [r4, #12]
 800a16e:	f003 0306 	and.w	r3, r3, #6
 800a172:	2b04      	cmp	r3, #4
 800a174:	bf18      	it	ne
 800a176:	2500      	movne	r5, #0
 800a178:	6832      	ldr	r2, [r6, #0]
 800a17a:	f04f 0600 	mov.w	r6, #0
 800a17e:	68a3      	ldr	r3, [r4, #8]
 800a180:	bf08      	it	eq
 800a182:	1aad      	subeq	r5, r5, r2
 800a184:	6922      	ldr	r2, [r4, #16]
 800a186:	bf08      	it	eq
 800a188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a18c:	4293      	cmp	r3, r2
 800a18e:	bfc4      	itt	gt
 800a190:	1a9b      	subgt	r3, r3, r2
 800a192:	18ed      	addgt	r5, r5, r3
 800a194:	341a      	adds	r4, #26
 800a196:	42b5      	cmp	r5, r6
 800a198:	d11a      	bne.n	800a1d0 <_printf_common+0xcc>
 800a19a:	2000      	movs	r0, #0
 800a19c:	e008      	b.n	800a1b0 <_printf_common+0xac>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	4652      	mov	r2, sl
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	47c0      	blx	r8
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d103      	bne.n	800a1b4 <_printf_common+0xb0>
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	e7c4      	b.n	800a142 <_printf_common+0x3e>
 800a1b8:	2030      	movs	r0, #48	; 0x30
 800a1ba:	18e1      	adds	r1, r4, r3
 800a1bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1c6:	4422      	add	r2, r4
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ce:	e7c5      	b.n	800a15c <_printf_common+0x58>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	47c0      	blx	r8
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d0e6      	beq.n	800a1ac <_printf_common+0xa8>
 800a1de:	3601      	adds	r6, #1
 800a1e0:	e7d9      	b.n	800a196 <_printf_common+0x92>
	...

0800a1e4 <_printf_i>:
 800a1e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e8:	7e0f      	ldrb	r7, [r1, #24]
 800a1ea:	4691      	mov	r9, r2
 800a1ec:	2f78      	cmp	r7, #120	; 0x78
 800a1ee:	4680      	mov	r8, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	469a      	mov	sl, r3
 800a1f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1fa:	d807      	bhi.n	800a20c <_printf_i+0x28>
 800a1fc:	2f62      	cmp	r7, #98	; 0x62
 800a1fe:	d80a      	bhi.n	800a216 <_printf_i+0x32>
 800a200:	2f00      	cmp	r7, #0
 800a202:	f000 80d9 	beq.w	800a3b8 <_printf_i+0x1d4>
 800a206:	2f58      	cmp	r7, #88	; 0x58
 800a208:	f000 80a4 	beq.w	800a354 <_printf_i+0x170>
 800a20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a214:	e03a      	b.n	800a28c <_printf_i+0xa8>
 800a216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a21a:	2b15      	cmp	r3, #21
 800a21c:	d8f6      	bhi.n	800a20c <_printf_i+0x28>
 800a21e:	a101      	add	r1, pc, #4	; (adr r1, 800a224 <_printf_i+0x40>)
 800a220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a224:	0800a27d 	.word	0x0800a27d
 800a228:	0800a291 	.word	0x0800a291
 800a22c:	0800a20d 	.word	0x0800a20d
 800a230:	0800a20d 	.word	0x0800a20d
 800a234:	0800a20d 	.word	0x0800a20d
 800a238:	0800a20d 	.word	0x0800a20d
 800a23c:	0800a291 	.word	0x0800a291
 800a240:	0800a20d 	.word	0x0800a20d
 800a244:	0800a20d 	.word	0x0800a20d
 800a248:	0800a20d 	.word	0x0800a20d
 800a24c:	0800a20d 	.word	0x0800a20d
 800a250:	0800a39f 	.word	0x0800a39f
 800a254:	0800a2c1 	.word	0x0800a2c1
 800a258:	0800a381 	.word	0x0800a381
 800a25c:	0800a20d 	.word	0x0800a20d
 800a260:	0800a20d 	.word	0x0800a20d
 800a264:	0800a3c1 	.word	0x0800a3c1
 800a268:	0800a20d 	.word	0x0800a20d
 800a26c:	0800a2c1 	.word	0x0800a2c1
 800a270:	0800a20d 	.word	0x0800a20d
 800a274:	0800a20d 	.word	0x0800a20d
 800a278:	0800a389 	.word	0x0800a389
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	1d1a      	adds	r2, r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	602a      	str	r2, [r5, #0]
 800a284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a28c:	2301      	movs	r3, #1
 800a28e:	e0a4      	b.n	800a3da <_printf_i+0x1f6>
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	6829      	ldr	r1, [r5, #0]
 800a294:	0606      	lsls	r6, r0, #24
 800a296:	f101 0304 	add.w	r3, r1, #4
 800a29a:	d50a      	bpl.n	800a2b2 <_printf_i+0xce>
 800a29c:	680e      	ldr	r6, [r1, #0]
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	2e00      	cmp	r6, #0
 800a2a2:	da03      	bge.n	800a2ac <_printf_i+0xc8>
 800a2a4:	232d      	movs	r3, #45	; 0x2d
 800a2a6:	4276      	negs	r6, r6
 800a2a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ac:	230a      	movs	r3, #10
 800a2ae:	485e      	ldr	r0, [pc, #376]	; (800a428 <_printf_i+0x244>)
 800a2b0:	e019      	b.n	800a2e6 <_printf_i+0x102>
 800a2b2:	680e      	ldr	r6, [r1, #0]
 800a2b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2b8:	602b      	str	r3, [r5, #0]
 800a2ba:	bf18      	it	ne
 800a2bc:	b236      	sxthne	r6, r6
 800a2be:	e7ef      	b.n	800a2a0 <_printf_i+0xbc>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	6820      	ldr	r0, [r4, #0]
 800a2c4:	1d19      	adds	r1, r3, #4
 800a2c6:	6029      	str	r1, [r5, #0]
 800a2c8:	0601      	lsls	r1, r0, #24
 800a2ca:	d501      	bpl.n	800a2d0 <_printf_i+0xec>
 800a2cc:	681e      	ldr	r6, [r3, #0]
 800a2ce:	e002      	b.n	800a2d6 <_printf_i+0xf2>
 800a2d0:	0646      	lsls	r6, r0, #25
 800a2d2:	d5fb      	bpl.n	800a2cc <_printf_i+0xe8>
 800a2d4:	881e      	ldrh	r6, [r3, #0]
 800a2d6:	2f6f      	cmp	r7, #111	; 0x6f
 800a2d8:	bf0c      	ite	eq
 800a2da:	2308      	moveq	r3, #8
 800a2dc:	230a      	movne	r3, #10
 800a2de:	4852      	ldr	r0, [pc, #328]	; (800a428 <_printf_i+0x244>)
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2e6:	6865      	ldr	r5, [r4, #4]
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	bfa8      	it	ge
 800a2ec:	6821      	ldrge	r1, [r4, #0]
 800a2ee:	60a5      	str	r5, [r4, #8]
 800a2f0:	bfa4      	itt	ge
 800a2f2:	f021 0104 	bicge.w	r1, r1, #4
 800a2f6:	6021      	strge	r1, [r4, #0]
 800a2f8:	b90e      	cbnz	r6, 800a2fe <_printf_i+0x11a>
 800a2fa:	2d00      	cmp	r5, #0
 800a2fc:	d04d      	beq.n	800a39a <_printf_i+0x1b6>
 800a2fe:	4615      	mov	r5, r2
 800a300:	fbb6 f1f3 	udiv	r1, r6, r3
 800a304:	fb03 6711 	mls	r7, r3, r1, r6
 800a308:	5dc7      	ldrb	r7, [r0, r7]
 800a30a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a30e:	4637      	mov	r7, r6
 800a310:	42bb      	cmp	r3, r7
 800a312:	460e      	mov	r6, r1
 800a314:	d9f4      	bls.n	800a300 <_printf_i+0x11c>
 800a316:	2b08      	cmp	r3, #8
 800a318:	d10b      	bne.n	800a332 <_printf_i+0x14e>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	07de      	lsls	r6, r3, #31
 800a31e:	d508      	bpl.n	800a332 <_printf_i+0x14e>
 800a320:	6923      	ldr	r3, [r4, #16]
 800a322:	6861      	ldr	r1, [r4, #4]
 800a324:	4299      	cmp	r1, r3
 800a326:	bfde      	ittt	le
 800a328:	2330      	movle	r3, #48	; 0x30
 800a32a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a32e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a332:	1b52      	subs	r2, r2, r5
 800a334:	6122      	str	r2, [r4, #16]
 800a336:	464b      	mov	r3, r9
 800a338:	4621      	mov	r1, r4
 800a33a:	4640      	mov	r0, r8
 800a33c:	f8cd a000 	str.w	sl, [sp]
 800a340:	aa03      	add	r2, sp, #12
 800a342:	f7ff fedf 	bl	800a104 <_printf_common>
 800a346:	3001      	adds	r0, #1
 800a348:	d14c      	bne.n	800a3e4 <_printf_i+0x200>
 800a34a:	f04f 30ff 	mov.w	r0, #4294967295
 800a34e:	b004      	add	sp, #16
 800a350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a354:	4834      	ldr	r0, [pc, #208]	; (800a428 <_printf_i+0x244>)
 800a356:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a35a:	6829      	ldr	r1, [r5, #0]
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	f851 6b04 	ldr.w	r6, [r1], #4
 800a362:	6029      	str	r1, [r5, #0]
 800a364:	061d      	lsls	r5, r3, #24
 800a366:	d514      	bpl.n	800a392 <_printf_i+0x1ae>
 800a368:	07df      	lsls	r7, r3, #31
 800a36a:	bf44      	itt	mi
 800a36c:	f043 0320 	orrmi.w	r3, r3, #32
 800a370:	6023      	strmi	r3, [r4, #0]
 800a372:	b91e      	cbnz	r6, 800a37c <_printf_i+0x198>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	f023 0320 	bic.w	r3, r3, #32
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	2310      	movs	r3, #16
 800a37e:	e7af      	b.n	800a2e0 <_printf_i+0xfc>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	f043 0320 	orr.w	r3, r3, #32
 800a386:	6023      	str	r3, [r4, #0]
 800a388:	2378      	movs	r3, #120	; 0x78
 800a38a:	4828      	ldr	r0, [pc, #160]	; (800a42c <_printf_i+0x248>)
 800a38c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a390:	e7e3      	b.n	800a35a <_printf_i+0x176>
 800a392:	0659      	lsls	r1, r3, #25
 800a394:	bf48      	it	mi
 800a396:	b2b6      	uxthmi	r6, r6
 800a398:	e7e6      	b.n	800a368 <_printf_i+0x184>
 800a39a:	4615      	mov	r5, r2
 800a39c:	e7bb      	b.n	800a316 <_printf_i+0x132>
 800a39e:	682b      	ldr	r3, [r5, #0]
 800a3a0:	6826      	ldr	r6, [r4, #0]
 800a3a2:	1d18      	adds	r0, r3, #4
 800a3a4:	6961      	ldr	r1, [r4, #20]
 800a3a6:	6028      	str	r0, [r5, #0]
 800a3a8:	0635      	lsls	r5, r6, #24
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	d501      	bpl.n	800a3b2 <_printf_i+0x1ce>
 800a3ae:	6019      	str	r1, [r3, #0]
 800a3b0:	e002      	b.n	800a3b8 <_printf_i+0x1d4>
 800a3b2:	0670      	lsls	r0, r6, #25
 800a3b4:	d5fb      	bpl.n	800a3ae <_printf_i+0x1ca>
 800a3b6:	8019      	strh	r1, [r3, #0]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4615      	mov	r5, r2
 800a3bc:	6123      	str	r3, [r4, #16]
 800a3be:	e7ba      	b.n	800a336 <_printf_i+0x152>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	1d1a      	adds	r2, r3, #4
 800a3c6:	602a      	str	r2, [r5, #0]
 800a3c8:	681d      	ldr	r5, [r3, #0]
 800a3ca:	6862      	ldr	r2, [r4, #4]
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f000 ff21 	bl	800b214 <memchr>
 800a3d2:	b108      	cbz	r0, 800a3d8 <_printf_i+0x1f4>
 800a3d4:	1b40      	subs	r0, r0, r5
 800a3d6:	6060      	str	r0, [r4, #4]
 800a3d8:	6863      	ldr	r3, [r4, #4]
 800a3da:	6123      	str	r3, [r4, #16]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e2:	e7a8      	b.n	800a336 <_printf_i+0x152>
 800a3e4:	462a      	mov	r2, r5
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	47d0      	blx	sl
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d0ab      	beq.n	800a34a <_printf_i+0x166>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	079b      	lsls	r3, r3, #30
 800a3f6:	d413      	bmi.n	800a420 <_printf_i+0x23c>
 800a3f8:	68e0      	ldr	r0, [r4, #12]
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	4298      	cmp	r0, r3
 800a3fe:	bfb8      	it	lt
 800a400:	4618      	movlt	r0, r3
 800a402:	e7a4      	b.n	800a34e <_printf_i+0x16a>
 800a404:	2301      	movs	r3, #1
 800a406:	4632      	mov	r2, r6
 800a408:	4649      	mov	r1, r9
 800a40a:	4640      	mov	r0, r8
 800a40c:	47d0      	blx	sl
 800a40e:	3001      	adds	r0, #1
 800a410:	d09b      	beq.n	800a34a <_printf_i+0x166>
 800a412:	3501      	adds	r5, #1
 800a414:	68e3      	ldr	r3, [r4, #12]
 800a416:	9903      	ldr	r1, [sp, #12]
 800a418:	1a5b      	subs	r3, r3, r1
 800a41a:	42ab      	cmp	r3, r5
 800a41c:	dcf2      	bgt.n	800a404 <_printf_i+0x220>
 800a41e:	e7eb      	b.n	800a3f8 <_printf_i+0x214>
 800a420:	2500      	movs	r5, #0
 800a422:	f104 0619 	add.w	r6, r4, #25
 800a426:	e7f5      	b.n	800a414 <_printf_i+0x230>
 800a428:	0800ce26 	.word	0x0800ce26
 800a42c:	0800ce37 	.word	0x0800ce37

0800a430 <_sbrk_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	2300      	movs	r3, #0
 800a434:	4d05      	ldr	r5, [pc, #20]	; (800a44c <_sbrk_r+0x1c>)
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	602b      	str	r3, [r5, #0]
 800a43c:	f7f9 f91c 	bl	8003678 <_sbrk>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d102      	bne.n	800a44a <_sbrk_r+0x1a>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	b103      	cbz	r3, 800a44a <_sbrk_r+0x1a>
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	bd38      	pop	{r3, r4, r5, pc}
 800a44c:	200007d0 	.word	0x200007d0

0800a450 <_raise_r>:
 800a450:	291f      	cmp	r1, #31
 800a452:	b538      	push	{r3, r4, r5, lr}
 800a454:	4604      	mov	r4, r0
 800a456:	460d      	mov	r5, r1
 800a458:	d904      	bls.n	800a464 <_raise_r+0x14>
 800a45a:	2316      	movs	r3, #22
 800a45c:	6003      	str	r3, [r0, #0]
 800a45e:	f04f 30ff 	mov.w	r0, #4294967295
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a466:	b112      	cbz	r2, 800a46e <_raise_r+0x1e>
 800a468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a46c:	b94b      	cbnz	r3, 800a482 <_raise_r+0x32>
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 f830 	bl	800a4d4 <_getpid_r>
 800a474:	462a      	mov	r2, r5
 800a476:	4601      	mov	r1, r0
 800a478:	4620      	mov	r0, r4
 800a47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a47e:	f000 b817 	b.w	800a4b0 <_kill_r>
 800a482:	2b01      	cmp	r3, #1
 800a484:	d00a      	beq.n	800a49c <_raise_r+0x4c>
 800a486:	1c59      	adds	r1, r3, #1
 800a488:	d103      	bne.n	800a492 <_raise_r+0x42>
 800a48a:	2316      	movs	r3, #22
 800a48c:	6003      	str	r3, [r0, #0]
 800a48e:	2001      	movs	r0, #1
 800a490:	e7e7      	b.n	800a462 <_raise_r+0x12>
 800a492:	2400      	movs	r4, #0
 800a494:	4628      	mov	r0, r5
 800a496:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a49a:	4798      	blx	r3
 800a49c:	2000      	movs	r0, #0
 800a49e:	e7e0      	b.n	800a462 <_raise_r+0x12>

0800a4a0 <raise>:
 800a4a0:	4b02      	ldr	r3, [pc, #8]	; (800a4ac <raise+0xc>)
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	f7ff bfd3 	b.w	800a450 <_raise_r>
 800a4aa:	bf00      	nop
 800a4ac:	2000000c 	.word	0x2000000c

0800a4b0 <_kill_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4d06      	ldr	r5, [pc, #24]	; (800a4d0 <_kill_r+0x20>)
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	602b      	str	r3, [r5, #0]
 800a4be:	f7f9 f858 	bl	8003572 <_kill>
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	d102      	bne.n	800a4cc <_kill_r+0x1c>
 800a4c6:	682b      	ldr	r3, [r5, #0]
 800a4c8:	b103      	cbz	r3, 800a4cc <_kill_r+0x1c>
 800a4ca:	6023      	str	r3, [r4, #0]
 800a4cc:	bd38      	pop	{r3, r4, r5, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200007d0 	.word	0x200007d0

0800a4d4 <_getpid_r>:
 800a4d4:	f7f9 b846 	b.w	8003564 <_getpid>

0800a4d8 <siprintf>:
 800a4d8:	b40e      	push	{r1, r2, r3}
 800a4da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4de:	b500      	push	{lr}
 800a4e0:	b09c      	sub	sp, #112	; 0x70
 800a4e2:	ab1d      	add	r3, sp, #116	; 0x74
 800a4e4:	9002      	str	r0, [sp, #8]
 800a4e6:	9006      	str	r0, [sp, #24]
 800a4e8:	9107      	str	r1, [sp, #28]
 800a4ea:	9104      	str	r1, [sp, #16]
 800a4ec:	4808      	ldr	r0, [pc, #32]	; (800a510 <siprintf+0x38>)
 800a4ee:	4909      	ldr	r1, [pc, #36]	; (800a514 <siprintf+0x3c>)
 800a4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	6800      	ldr	r0, [r0, #0]
 800a4f8:	a902      	add	r1, sp, #8
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	f001 fa96 	bl	800ba2c <_svfiprintf_r>
 800a500:	2200      	movs	r2, #0
 800a502:	9b02      	ldr	r3, [sp, #8]
 800a504:	701a      	strb	r2, [r3, #0]
 800a506:	b01c      	add	sp, #112	; 0x70
 800a508:	f85d eb04 	ldr.w	lr, [sp], #4
 800a50c:	b003      	add	sp, #12
 800a50e:	4770      	bx	lr
 800a510:	2000000c 	.word	0x2000000c
 800a514:	ffff0208 	.word	0xffff0208

0800a518 <quorem>:
 800a518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	6903      	ldr	r3, [r0, #16]
 800a51e:	690c      	ldr	r4, [r1, #16]
 800a520:	4607      	mov	r7, r0
 800a522:	42a3      	cmp	r3, r4
 800a524:	f2c0 8082 	blt.w	800a62c <quorem+0x114>
 800a528:	3c01      	subs	r4, #1
 800a52a:	f100 0514 	add.w	r5, r0, #20
 800a52e:	f101 0814 	add.w	r8, r1, #20
 800a532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a53c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a540:	3301      	adds	r3, #1
 800a542:	429a      	cmp	r2, r3
 800a544:	fbb2 f6f3 	udiv	r6, r2, r3
 800a548:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a54c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a550:	d331      	bcc.n	800a5b6 <quorem+0x9e>
 800a552:	f04f 0e00 	mov.w	lr, #0
 800a556:	4640      	mov	r0, r8
 800a558:	46ac      	mov	ip, r5
 800a55a:	46f2      	mov	sl, lr
 800a55c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a560:	b293      	uxth	r3, r2
 800a562:	fb06 e303 	mla	r3, r6, r3, lr
 800a566:	0c12      	lsrs	r2, r2, #16
 800a568:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	fb06 e202 	mla	r2, r6, r2, lr
 800a572:	ebaa 0303 	sub.w	r3, sl, r3
 800a576:	f8dc a000 	ldr.w	sl, [ip]
 800a57a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a57e:	fa1f fa8a 	uxth.w	sl, sl
 800a582:	4453      	add	r3, sl
 800a584:	f8dc a000 	ldr.w	sl, [ip]
 800a588:	b292      	uxth	r2, r2
 800a58a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a58e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a592:	b29b      	uxth	r3, r3
 800a594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a598:	4581      	cmp	r9, r0
 800a59a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a59e:	f84c 3b04 	str.w	r3, [ip], #4
 800a5a2:	d2db      	bcs.n	800a55c <quorem+0x44>
 800a5a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5a8:	b92b      	cbnz	r3, 800a5b6 <quorem+0x9e>
 800a5aa:	9b01      	ldr	r3, [sp, #4]
 800a5ac:	3b04      	subs	r3, #4
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	d32f      	bcc.n	800a614 <quorem+0xfc>
 800a5b4:	613c      	str	r4, [r7, #16]
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f001 f8c4 	bl	800b744 <__mcmp>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	db25      	blt.n	800a60c <quorem+0xf4>
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f04f 0c00 	mov.w	ip, #0
 800a5c6:	3601      	adds	r6, #1
 800a5c8:	f858 1b04 	ldr.w	r1, [r8], #4
 800a5cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a5d0:	b28b      	uxth	r3, r1
 800a5d2:	ebac 0303 	sub.w	r3, ip, r3
 800a5d6:	fa1f f28e 	uxth.w	r2, lr
 800a5da:	4413      	add	r3, r2
 800a5dc:	0c0a      	lsrs	r2, r1, #16
 800a5de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ec:	45c1      	cmp	r9, r8
 800a5ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5f2:	f840 3b04 	str.w	r3, [r0], #4
 800a5f6:	d2e7      	bcs.n	800a5c8 <quorem+0xb0>
 800a5f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a600:	b922      	cbnz	r2, 800a60c <quorem+0xf4>
 800a602:	3b04      	subs	r3, #4
 800a604:	429d      	cmp	r5, r3
 800a606:	461a      	mov	r2, r3
 800a608:	d30a      	bcc.n	800a620 <quorem+0x108>
 800a60a:	613c      	str	r4, [r7, #16]
 800a60c:	4630      	mov	r0, r6
 800a60e:	b003      	add	sp, #12
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	6812      	ldr	r2, [r2, #0]
 800a616:	3b04      	subs	r3, #4
 800a618:	2a00      	cmp	r2, #0
 800a61a:	d1cb      	bne.n	800a5b4 <quorem+0x9c>
 800a61c:	3c01      	subs	r4, #1
 800a61e:	e7c6      	b.n	800a5ae <quorem+0x96>
 800a620:	6812      	ldr	r2, [r2, #0]
 800a622:	3b04      	subs	r3, #4
 800a624:	2a00      	cmp	r2, #0
 800a626:	d1f0      	bne.n	800a60a <quorem+0xf2>
 800a628:	3c01      	subs	r4, #1
 800a62a:	e7eb      	b.n	800a604 <quorem+0xec>
 800a62c:	2000      	movs	r0, #0
 800a62e:	e7ee      	b.n	800a60e <quorem+0xf6>

0800a630 <_dtoa_r>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	4616      	mov	r6, r2
 800a636:	461f      	mov	r7, r3
 800a638:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a63a:	b099      	sub	sp, #100	; 0x64
 800a63c:	4605      	mov	r5, r0
 800a63e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a642:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a646:	b974      	cbnz	r4, 800a666 <_dtoa_r+0x36>
 800a648:	2010      	movs	r0, #16
 800a64a:	f7ff f997 	bl	800997c <malloc>
 800a64e:	4602      	mov	r2, r0
 800a650:	6268      	str	r0, [r5, #36]	; 0x24
 800a652:	b920      	cbnz	r0, 800a65e <_dtoa_r+0x2e>
 800a654:	21ea      	movs	r1, #234	; 0xea
 800a656:	4ba8      	ldr	r3, [pc, #672]	; (800a8f8 <_dtoa_r+0x2c8>)
 800a658:	48a8      	ldr	r0, [pc, #672]	; (800a8fc <_dtoa_r+0x2cc>)
 800a65a:	f001 fae7 	bl	800bc2c <__assert_func>
 800a65e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a662:	6004      	str	r4, [r0, #0]
 800a664:	60c4      	str	r4, [r0, #12]
 800a666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a668:	6819      	ldr	r1, [r3, #0]
 800a66a:	b151      	cbz	r1, 800a682 <_dtoa_r+0x52>
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	2301      	movs	r3, #1
 800a670:	4093      	lsls	r3, r2
 800a672:	604a      	str	r2, [r1, #4]
 800a674:	608b      	str	r3, [r1, #8]
 800a676:	4628      	mov	r0, r5
 800a678:	f000 fe26 	bl	800b2c8 <_Bfree>
 800a67c:	2200      	movs	r2, #0
 800a67e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	1e3b      	subs	r3, r7, #0
 800a684:	bfaf      	iteee	ge
 800a686:	2300      	movge	r3, #0
 800a688:	2201      	movlt	r2, #1
 800a68a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a68e:	9305      	strlt	r3, [sp, #20]
 800a690:	bfa8      	it	ge
 800a692:	f8c8 3000 	strge.w	r3, [r8]
 800a696:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a69a:	4b99      	ldr	r3, [pc, #612]	; (800a900 <_dtoa_r+0x2d0>)
 800a69c:	bfb8      	it	lt
 800a69e:	f8c8 2000 	strlt.w	r2, [r8]
 800a6a2:	ea33 0309 	bics.w	r3, r3, r9
 800a6a6:	d119      	bne.n	800a6dc <_dtoa_r+0xac>
 800a6a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6b4:	4333      	orrs	r3, r6
 800a6b6:	f000 857f 	beq.w	800b1b8 <_dtoa_r+0xb88>
 800a6ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6bc:	b953      	cbnz	r3, 800a6d4 <_dtoa_r+0xa4>
 800a6be:	4b91      	ldr	r3, [pc, #580]	; (800a904 <_dtoa_r+0x2d4>)
 800a6c0:	e022      	b.n	800a708 <_dtoa_r+0xd8>
 800a6c2:	4b91      	ldr	r3, [pc, #580]	; (800a908 <_dtoa_r+0x2d8>)
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	3308      	adds	r3, #8
 800a6c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	9803      	ldr	r0, [sp, #12]
 800a6ce:	b019      	add	sp, #100	; 0x64
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	4b8b      	ldr	r3, [pc, #556]	; (800a904 <_dtoa_r+0x2d4>)
 800a6d6:	9303      	str	r3, [sp, #12]
 800a6d8:	3303      	adds	r3, #3
 800a6da:	e7f5      	b.n	800a6c8 <_dtoa_r+0x98>
 800a6dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a6e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a6e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f7f6 f95c 	bl	80009a8 <__aeabi_dcmpeq>
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	b158      	cbz	r0, 800a70c <_dtoa_r+0xdc>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6f8:	6013      	str	r3, [r2, #0]
 800a6fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8558 	beq.w	800b1b2 <_dtoa_r+0xb82>
 800a702:	4882      	ldr	r0, [pc, #520]	; (800a90c <_dtoa_r+0x2dc>)
 800a704:	6018      	str	r0, [r3, #0]
 800a706:	1e43      	subs	r3, r0, #1
 800a708:	9303      	str	r3, [sp, #12]
 800a70a:	e7df      	b.n	800a6cc <_dtoa_r+0x9c>
 800a70c:	ab16      	add	r3, sp, #88	; 0x58
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	ab17      	add	r3, sp, #92	; 0x5c
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	4628      	mov	r0, r5
 800a716:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a71a:	f001 f8bb 	bl	800b894 <__d2b>
 800a71e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a722:	4683      	mov	fp, r0
 800a724:	2c00      	cmp	r4, #0
 800a726:	d07f      	beq.n	800a828 <_dtoa_r+0x1f8>
 800a728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a72e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a736:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a73a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a73e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a742:	2200      	movs	r2, #0
 800a744:	4b72      	ldr	r3, [pc, #456]	; (800a910 <_dtoa_r+0x2e0>)
 800a746:	f7f5 fd0f 	bl	8000168 <__aeabi_dsub>
 800a74a:	a365      	add	r3, pc, #404	; (adr r3, 800a8e0 <_dtoa_r+0x2b0>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f7f5 fec2 	bl	80004d8 <__aeabi_dmul>
 800a754:	a364      	add	r3, pc, #400	; (adr r3, 800a8e8 <_dtoa_r+0x2b8>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f7f5 fd07 	bl	800016c <__adddf3>
 800a75e:	4606      	mov	r6, r0
 800a760:	4620      	mov	r0, r4
 800a762:	460f      	mov	r7, r1
 800a764:	f7f5 fe4e 	bl	8000404 <__aeabi_i2d>
 800a768:	a361      	add	r3, pc, #388	; (adr r3, 800a8f0 <_dtoa_r+0x2c0>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f7f5 feb3 	bl	80004d8 <__aeabi_dmul>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4630      	mov	r0, r6
 800a778:	4639      	mov	r1, r7
 800a77a:	f7f5 fcf7 	bl	800016c <__adddf3>
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	f7f6 f959 	bl	8000a38 <__aeabi_d2iz>
 800a786:	2200      	movs	r2, #0
 800a788:	4682      	mov	sl, r0
 800a78a:	2300      	movs	r3, #0
 800a78c:	4630      	mov	r0, r6
 800a78e:	4639      	mov	r1, r7
 800a790:	f7f6 f914 	bl	80009bc <__aeabi_dcmplt>
 800a794:	b148      	cbz	r0, 800a7aa <_dtoa_r+0x17a>
 800a796:	4650      	mov	r0, sl
 800a798:	f7f5 fe34 	bl	8000404 <__aeabi_i2d>
 800a79c:	4632      	mov	r2, r6
 800a79e:	463b      	mov	r3, r7
 800a7a0:	f7f6 f902 	bl	80009a8 <__aeabi_dcmpeq>
 800a7a4:	b908      	cbnz	r0, 800a7aa <_dtoa_r+0x17a>
 800a7a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7aa:	f1ba 0f16 	cmp.w	sl, #22
 800a7ae:	d858      	bhi.n	800a862 <_dtoa_r+0x232>
 800a7b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7b4:	4b57      	ldr	r3, [pc, #348]	; (800a914 <_dtoa_r+0x2e4>)
 800a7b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f6 f8fd 	bl	80009bc <__aeabi_dcmplt>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d04f      	beq.n	800a866 <_dtoa_r+0x236>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7d0:	1b1c      	subs	r4, r3, r4
 800a7d2:	1e63      	subs	r3, r4, #1
 800a7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d6:	bf49      	itett	mi
 800a7d8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a7dc:	2300      	movpl	r3, #0
 800a7de:	9306      	strmi	r3, [sp, #24]
 800a7e0:	2300      	movmi	r3, #0
 800a7e2:	bf54      	ite	pl
 800a7e4:	9306      	strpl	r3, [sp, #24]
 800a7e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a7e8:	f1ba 0f00 	cmp.w	sl, #0
 800a7ec:	db3d      	blt.n	800a86a <_dtoa_r+0x23a>
 800a7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a7f4:	4453      	add	r3, sl
 800a7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a7fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7fe:	2b09      	cmp	r3, #9
 800a800:	f200 808c 	bhi.w	800a91c <_dtoa_r+0x2ec>
 800a804:	2b05      	cmp	r3, #5
 800a806:	bfc4      	itt	gt
 800a808:	3b04      	subgt	r3, #4
 800a80a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a80c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a80e:	bfc8      	it	gt
 800a810:	2400      	movgt	r4, #0
 800a812:	f1a3 0302 	sub.w	r3, r3, #2
 800a816:	bfd8      	it	le
 800a818:	2401      	movle	r4, #1
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	f200 808a 	bhi.w	800a934 <_dtoa_r+0x304>
 800a820:	e8df f003 	tbb	[pc, r3]
 800a824:	5b4d4f2d 	.word	0x5b4d4f2d
 800a828:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a82c:	441c      	add	r4, r3
 800a82e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a832:	2b20      	cmp	r3, #32
 800a834:	bfc3      	ittte	gt
 800a836:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a83a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a83e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a842:	f1c3 0320 	rsble	r3, r3, #32
 800a846:	bfc6      	itte	gt
 800a848:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a84c:	4318      	orrgt	r0, r3
 800a84e:	fa06 f003 	lslle.w	r0, r6, r3
 800a852:	f7f5 fdc7 	bl	80003e4 <__aeabi_ui2d>
 800a856:	2301      	movs	r3, #1
 800a858:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a85c:	3c01      	subs	r4, #1
 800a85e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a860:	e76f      	b.n	800a742 <_dtoa_r+0x112>
 800a862:	2301      	movs	r3, #1
 800a864:	e7b2      	b.n	800a7cc <_dtoa_r+0x19c>
 800a866:	900f      	str	r0, [sp, #60]	; 0x3c
 800a868:	e7b1      	b.n	800a7ce <_dtoa_r+0x19e>
 800a86a:	9b06      	ldr	r3, [sp, #24]
 800a86c:	eba3 030a 	sub.w	r3, r3, sl
 800a870:	9306      	str	r3, [sp, #24]
 800a872:	f1ca 0300 	rsb	r3, sl, #0
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	2300      	movs	r3, #0
 800a87a:	930e      	str	r3, [sp, #56]	; 0x38
 800a87c:	e7be      	b.n	800a7fc <_dtoa_r+0x1cc>
 800a87e:	2300      	movs	r3, #0
 800a880:	930b      	str	r3, [sp, #44]	; 0x2c
 800a882:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a884:	2b00      	cmp	r3, #0
 800a886:	dc58      	bgt.n	800a93a <_dtoa_r+0x30a>
 800a888:	f04f 0901 	mov.w	r9, #1
 800a88c:	464b      	mov	r3, r9
 800a88e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a892:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a896:	2200      	movs	r2, #0
 800a898:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a89a:	6042      	str	r2, [r0, #4]
 800a89c:	2204      	movs	r2, #4
 800a89e:	f102 0614 	add.w	r6, r2, #20
 800a8a2:	429e      	cmp	r6, r3
 800a8a4:	6841      	ldr	r1, [r0, #4]
 800a8a6:	d94e      	bls.n	800a946 <_dtoa_r+0x316>
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f000 fccd 	bl	800b248 <_Balloc>
 800a8ae:	9003      	str	r0, [sp, #12]
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d14c      	bne.n	800a94e <_dtoa_r+0x31e>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8ba:	4b17      	ldr	r3, [pc, #92]	; (800a918 <_dtoa_r+0x2e8>)
 800a8bc:	e6cc      	b.n	800a658 <_dtoa_r+0x28>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e7de      	b.n	800a880 <_dtoa_r+0x250>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8c8:	eb0a 0903 	add.w	r9, sl, r3
 800a8cc:	f109 0301 	add.w	r3, r9, #1
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	9308      	str	r3, [sp, #32]
 800a8d4:	bfb8      	it	lt
 800a8d6:	2301      	movlt	r3, #1
 800a8d8:	e7dd      	b.n	800a896 <_dtoa_r+0x266>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e7f2      	b.n	800a8c4 <_dtoa_r+0x294>
 800a8de:	bf00      	nop
 800a8e0:	636f4361 	.word	0x636f4361
 800a8e4:	3fd287a7 	.word	0x3fd287a7
 800a8e8:	8b60c8b3 	.word	0x8b60c8b3
 800a8ec:	3fc68a28 	.word	0x3fc68a28
 800a8f0:	509f79fb 	.word	0x509f79fb
 800a8f4:	3fd34413 	.word	0x3fd34413
 800a8f8:	0800ce55 	.word	0x0800ce55
 800a8fc:	0800ce6c 	.word	0x0800ce6c
 800a900:	7ff00000 	.word	0x7ff00000
 800a904:	0800ce51 	.word	0x0800ce51
 800a908:	0800ce48 	.word	0x0800ce48
 800a90c:	0800ce25 	.word	0x0800ce25
 800a910:	3ff80000 	.word	0x3ff80000
 800a914:	0800cf60 	.word	0x0800cf60
 800a918:	0800cec7 	.word	0x0800cec7
 800a91c:	2401      	movs	r4, #1
 800a91e:	2300      	movs	r3, #0
 800a920:	940b      	str	r4, [sp, #44]	; 0x2c
 800a922:	9322      	str	r3, [sp, #136]	; 0x88
 800a924:	f04f 39ff 	mov.w	r9, #4294967295
 800a928:	2200      	movs	r2, #0
 800a92a:	2312      	movs	r3, #18
 800a92c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a930:	9223      	str	r2, [sp, #140]	; 0x8c
 800a932:	e7b0      	b.n	800a896 <_dtoa_r+0x266>
 800a934:	2301      	movs	r3, #1
 800a936:	930b      	str	r3, [sp, #44]	; 0x2c
 800a938:	e7f4      	b.n	800a924 <_dtoa_r+0x2f4>
 800a93a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a93e:	464b      	mov	r3, r9
 800a940:	f8cd 9020 	str.w	r9, [sp, #32]
 800a944:	e7a7      	b.n	800a896 <_dtoa_r+0x266>
 800a946:	3101      	adds	r1, #1
 800a948:	6041      	str	r1, [r0, #4]
 800a94a:	0052      	lsls	r2, r2, #1
 800a94c:	e7a7      	b.n	800a89e <_dtoa_r+0x26e>
 800a94e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a950:	9a03      	ldr	r2, [sp, #12]
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	9b08      	ldr	r3, [sp, #32]
 800a956:	2b0e      	cmp	r3, #14
 800a958:	f200 80a8 	bhi.w	800aaac <_dtoa_r+0x47c>
 800a95c:	2c00      	cmp	r4, #0
 800a95e:	f000 80a5 	beq.w	800aaac <_dtoa_r+0x47c>
 800a962:	f1ba 0f00 	cmp.w	sl, #0
 800a966:	dd34      	ble.n	800a9d2 <_dtoa_r+0x3a2>
 800a968:	4a9a      	ldr	r2, [pc, #616]	; (800abd4 <_dtoa_r+0x5a4>)
 800a96a:	f00a 030f 	and.w	r3, sl, #15
 800a96e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a972:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a976:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a97a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a97e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a982:	d016      	beq.n	800a9b2 <_dtoa_r+0x382>
 800a984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a988:	4b93      	ldr	r3, [pc, #588]	; (800abd8 <_dtoa_r+0x5a8>)
 800a98a:	2703      	movs	r7, #3
 800a98c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a990:	f7f5 fecc 	bl	800072c <__aeabi_ddiv>
 800a994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a998:	f004 040f 	and.w	r4, r4, #15
 800a99c:	4e8e      	ldr	r6, [pc, #568]	; (800abd8 <_dtoa_r+0x5a8>)
 800a99e:	b954      	cbnz	r4, 800a9b6 <_dtoa_r+0x386>
 800a9a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9a8:	f7f5 fec0 	bl	800072c <__aeabi_ddiv>
 800a9ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9b0:	e029      	b.n	800aa06 <_dtoa_r+0x3d6>
 800a9b2:	2702      	movs	r7, #2
 800a9b4:	e7f2      	b.n	800a99c <_dtoa_r+0x36c>
 800a9b6:	07e1      	lsls	r1, r4, #31
 800a9b8:	d508      	bpl.n	800a9cc <_dtoa_r+0x39c>
 800a9ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9be:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9c2:	f7f5 fd89 	bl	80004d8 <__aeabi_dmul>
 800a9c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9ca:	3701      	adds	r7, #1
 800a9cc:	1064      	asrs	r4, r4, #1
 800a9ce:	3608      	adds	r6, #8
 800a9d0:	e7e5      	b.n	800a99e <_dtoa_r+0x36e>
 800a9d2:	f000 80a5 	beq.w	800ab20 <_dtoa_r+0x4f0>
 800a9d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9da:	f1ca 0400 	rsb	r4, sl, #0
 800a9de:	4b7d      	ldr	r3, [pc, #500]	; (800abd4 <_dtoa_r+0x5a4>)
 800a9e0:	f004 020f 	and.w	r2, r4, #15
 800a9e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	f7f5 fd74 	bl	80004d8 <__aeabi_dmul>
 800a9f0:	2702      	movs	r7, #2
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9f8:	4e77      	ldr	r6, [pc, #476]	; (800abd8 <_dtoa_r+0x5a8>)
 800a9fa:	1124      	asrs	r4, r4, #4
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	f040 8084 	bne.w	800ab0a <_dtoa_r+0x4da>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1d2      	bne.n	800a9ac <_dtoa_r+0x37c>
 800aa06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 808b 	beq.w	800ab24 <_dtoa_r+0x4f4>
 800aa0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4b6f      	ldr	r3, [pc, #444]	; (800abdc <_dtoa_r+0x5ac>)
 800aa1e:	f7f5 ffcd 	bl	80009bc <__aeabi_dcmplt>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d07e      	beq.n	800ab24 <_dtoa_r+0x4f4>
 800aa26:	9b08      	ldr	r3, [sp, #32]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d07b      	beq.n	800ab24 <_dtoa_r+0x4f4>
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	dd38      	ble.n	800aaa4 <_dtoa_r+0x474>
 800aa32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa36:	2200      	movs	r2, #0
 800aa38:	4b69      	ldr	r3, [pc, #420]	; (800abe0 <_dtoa_r+0x5b0>)
 800aa3a:	f7f5 fd4d 	bl	80004d8 <__aeabi_dmul>
 800aa3e:	464c      	mov	r4, r9
 800aa40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa44:	f10a 38ff 	add.w	r8, sl, #4294967295
 800aa48:	3701      	adds	r7, #1
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	f7f5 fcda 	bl	8000404 <__aeabi_i2d>
 800aa50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa54:	f7f5 fd40 	bl	80004d8 <__aeabi_dmul>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4b62      	ldr	r3, [pc, #392]	; (800abe4 <_dtoa_r+0x5b4>)
 800aa5c:	f7f5 fb86 	bl	800016c <__adddf3>
 800aa60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aa64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa68:	9611      	str	r6, [sp, #68]	; 0x44
 800aa6a:	2c00      	cmp	r4, #0
 800aa6c:	d15d      	bne.n	800ab2a <_dtoa_r+0x4fa>
 800aa6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa72:	2200      	movs	r2, #0
 800aa74:	4b5c      	ldr	r3, [pc, #368]	; (800abe8 <_dtoa_r+0x5b8>)
 800aa76:	f7f5 fb77 	bl	8000168 <__aeabi_dsub>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa82:	4633      	mov	r3, r6
 800aa84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa86:	f7f5 ffb7 	bl	80009f8 <__aeabi_dcmpgt>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	f040 829c 	bne.w	800afc8 <_dtoa_r+0x998>
 800aa90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa9a:	f7f5 ff8f 	bl	80009bc <__aeabi_dcmplt>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f040 8290 	bne.w	800afc4 <_dtoa_r+0x994>
 800aaa4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aaa8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aaac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f2c0 8152 	blt.w	800ad58 <_dtoa_r+0x728>
 800aab4:	f1ba 0f0e 	cmp.w	sl, #14
 800aab8:	f300 814e 	bgt.w	800ad58 <_dtoa_r+0x728>
 800aabc:	4b45      	ldr	r3, [pc, #276]	; (800abd4 <_dtoa_r+0x5a4>)
 800aabe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aac6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aaca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f280 80db 	bge.w	800ac88 <_dtoa_r+0x658>
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f300 80d7 	bgt.w	800ac88 <_dtoa_r+0x658>
 800aada:	f040 8272 	bne.w	800afc2 <_dtoa_r+0x992>
 800aade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aae2:	2200      	movs	r2, #0
 800aae4:	4b40      	ldr	r3, [pc, #256]	; (800abe8 <_dtoa_r+0x5b8>)
 800aae6:	f7f5 fcf7 	bl	80004d8 <__aeabi_dmul>
 800aaea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaee:	f7f5 ff79 	bl	80009e4 <__aeabi_dcmpge>
 800aaf2:	9c08      	ldr	r4, [sp, #32]
 800aaf4:	4626      	mov	r6, r4
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f040 8248 	bne.w	800af8c <_dtoa_r+0x95c>
 800aafc:	2331      	movs	r3, #49	; 0x31
 800aafe:	9f03      	ldr	r7, [sp, #12]
 800ab00:	f10a 0a01 	add.w	sl, sl, #1
 800ab04:	f807 3b01 	strb.w	r3, [r7], #1
 800ab08:	e244      	b.n	800af94 <_dtoa_r+0x964>
 800ab0a:	07e2      	lsls	r2, r4, #31
 800ab0c:	d505      	bpl.n	800ab1a <_dtoa_r+0x4ea>
 800ab0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab12:	f7f5 fce1 	bl	80004d8 <__aeabi_dmul>
 800ab16:	2301      	movs	r3, #1
 800ab18:	3701      	adds	r7, #1
 800ab1a:	1064      	asrs	r4, r4, #1
 800ab1c:	3608      	adds	r6, #8
 800ab1e:	e76d      	b.n	800a9fc <_dtoa_r+0x3cc>
 800ab20:	2702      	movs	r7, #2
 800ab22:	e770      	b.n	800aa06 <_dtoa_r+0x3d6>
 800ab24:	46d0      	mov	r8, sl
 800ab26:	9c08      	ldr	r4, [sp, #32]
 800ab28:	e78f      	b.n	800aa4a <_dtoa_r+0x41a>
 800ab2a:	9903      	ldr	r1, [sp, #12]
 800ab2c:	4b29      	ldr	r3, [pc, #164]	; (800abd4 <_dtoa_r+0x5a4>)
 800ab2e:	4421      	add	r1, r4
 800ab30:	9112      	str	r1, [sp, #72]	; 0x48
 800ab32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ab3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab40:	2900      	cmp	r1, #0
 800ab42:	d055      	beq.n	800abf0 <_dtoa_r+0x5c0>
 800ab44:	2000      	movs	r0, #0
 800ab46:	4929      	ldr	r1, [pc, #164]	; (800abec <_dtoa_r+0x5bc>)
 800ab48:	f7f5 fdf0 	bl	800072c <__aeabi_ddiv>
 800ab4c:	463b      	mov	r3, r7
 800ab4e:	4632      	mov	r2, r6
 800ab50:	f7f5 fb0a 	bl	8000168 <__aeabi_dsub>
 800ab54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab58:	9f03      	ldr	r7, [sp, #12]
 800ab5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab5e:	f7f5 ff6b 	bl	8000a38 <__aeabi_d2iz>
 800ab62:	4604      	mov	r4, r0
 800ab64:	f7f5 fc4e 	bl	8000404 <__aeabi_i2d>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab70:	f7f5 fafa 	bl	8000168 <__aeabi_dsub>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	3430      	adds	r4, #48	; 0x30
 800ab7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab82:	f807 4b01 	strb.w	r4, [r7], #1
 800ab86:	f7f5 ff19 	bl	80009bc <__aeabi_dcmplt>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d174      	bne.n	800ac78 <_dtoa_r+0x648>
 800ab8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab92:	2000      	movs	r0, #0
 800ab94:	4911      	ldr	r1, [pc, #68]	; (800abdc <_dtoa_r+0x5ac>)
 800ab96:	f7f5 fae7 	bl	8000168 <__aeabi_dsub>
 800ab9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab9e:	f7f5 ff0d 	bl	80009bc <__aeabi_dcmplt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	f040 80b7 	bne.w	800ad16 <_dtoa_r+0x6e6>
 800aba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abaa:	429f      	cmp	r7, r3
 800abac:	f43f af7a 	beq.w	800aaa4 <_dtoa_r+0x474>
 800abb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abb4:	2200      	movs	r2, #0
 800abb6:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <_dtoa_r+0x5b0>)
 800abb8:	f7f5 fc8e 	bl	80004d8 <__aeabi_dmul>
 800abbc:	2200      	movs	r2, #0
 800abbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abc6:	4b06      	ldr	r3, [pc, #24]	; (800abe0 <_dtoa_r+0x5b0>)
 800abc8:	f7f5 fc86 	bl	80004d8 <__aeabi_dmul>
 800abcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abd0:	e7c3      	b.n	800ab5a <_dtoa_r+0x52a>
 800abd2:	bf00      	nop
 800abd4:	0800cf60 	.word	0x0800cf60
 800abd8:	0800cf38 	.word	0x0800cf38
 800abdc:	3ff00000 	.word	0x3ff00000
 800abe0:	40240000 	.word	0x40240000
 800abe4:	401c0000 	.word	0x401c0000
 800abe8:	40140000 	.word	0x40140000
 800abec:	3fe00000 	.word	0x3fe00000
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 fc70 	bl	80004d8 <__aeabi_dmul>
 800abf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abfe:	9c03      	ldr	r4, [sp, #12]
 800ac00:	9314      	str	r3, [sp, #80]	; 0x50
 800ac02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac06:	f7f5 ff17 	bl	8000a38 <__aeabi_d2iz>
 800ac0a:	9015      	str	r0, [sp, #84]	; 0x54
 800ac0c:	f7f5 fbfa 	bl	8000404 <__aeabi_i2d>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac18:	f7f5 faa6 	bl	8000168 <__aeabi_dsub>
 800ac1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac1e:	4606      	mov	r6, r0
 800ac20:	3330      	adds	r3, #48	; 0x30
 800ac22:	f804 3b01 	strb.w	r3, [r4], #1
 800ac26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac28:	460f      	mov	r7, r1
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	f04f 0200 	mov.w	r2, #0
 800ac30:	d124      	bne.n	800ac7c <_dtoa_r+0x64c>
 800ac32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac36:	4bb0      	ldr	r3, [pc, #704]	; (800aef8 <_dtoa_r+0x8c8>)
 800ac38:	f7f5 fa98 	bl	800016c <__adddf3>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 fed8 	bl	80009f8 <__aeabi_dcmpgt>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d163      	bne.n	800ad14 <_dtoa_r+0x6e4>
 800ac4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac50:	2000      	movs	r0, #0
 800ac52:	49a9      	ldr	r1, [pc, #676]	; (800aef8 <_dtoa_r+0x8c8>)
 800ac54:	f7f5 fa88 	bl	8000168 <__aeabi_dsub>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	4639      	mov	r1, r7
 800ac60:	f7f5 feac 	bl	80009bc <__aeabi_dcmplt>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f43f af1d 	beq.w	800aaa4 <_dtoa_r+0x474>
 800ac6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ac6c:	1e7b      	subs	r3, r7, #1
 800ac6e:	9314      	str	r3, [sp, #80]	; 0x50
 800ac70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ac74:	2b30      	cmp	r3, #48	; 0x30
 800ac76:	d0f8      	beq.n	800ac6a <_dtoa_r+0x63a>
 800ac78:	46c2      	mov	sl, r8
 800ac7a:	e03b      	b.n	800acf4 <_dtoa_r+0x6c4>
 800ac7c:	4b9f      	ldr	r3, [pc, #636]	; (800aefc <_dtoa_r+0x8cc>)
 800ac7e:	f7f5 fc2b 	bl	80004d8 <__aeabi_dmul>
 800ac82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac86:	e7bc      	b.n	800ac02 <_dtoa_r+0x5d2>
 800ac88:	9f03      	ldr	r7, [sp, #12]
 800ac8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ac8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac92:	4640      	mov	r0, r8
 800ac94:	4649      	mov	r1, r9
 800ac96:	f7f5 fd49 	bl	800072c <__aeabi_ddiv>
 800ac9a:	f7f5 fecd 	bl	8000a38 <__aeabi_d2iz>
 800ac9e:	4604      	mov	r4, r0
 800aca0:	f7f5 fbb0 	bl	8000404 <__aeabi_i2d>
 800aca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aca8:	f7f5 fc16 	bl	80004d8 <__aeabi_dmul>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	f7f5 fa58 	bl	8000168 <__aeabi_dsub>
 800acb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800acbc:	f807 6b01 	strb.w	r6, [r7], #1
 800acc0:	9e03      	ldr	r6, [sp, #12]
 800acc2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800acc6:	1bbe      	subs	r6, r7, r6
 800acc8:	45b4      	cmp	ip, r6
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	d136      	bne.n	800ad3e <_dtoa_r+0x70e>
 800acd0:	f7f5 fa4c 	bl	800016c <__adddf3>
 800acd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acd8:	4680      	mov	r8, r0
 800acda:	4689      	mov	r9, r1
 800acdc:	f7f5 fe8c 	bl	80009f8 <__aeabi_dcmpgt>
 800ace0:	bb58      	cbnz	r0, 800ad3a <_dtoa_r+0x70a>
 800ace2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ace6:	4640      	mov	r0, r8
 800ace8:	4649      	mov	r1, r9
 800acea:	f7f5 fe5d 	bl	80009a8 <__aeabi_dcmpeq>
 800acee:	b108      	cbz	r0, 800acf4 <_dtoa_r+0x6c4>
 800acf0:	07e1      	lsls	r1, r4, #31
 800acf2:	d422      	bmi.n	800ad3a <_dtoa_r+0x70a>
 800acf4:	4628      	mov	r0, r5
 800acf6:	4659      	mov	r1, fp
 800acf8:	f000 fae6 	bl	800b2c8 <_Bfree>
 800acfc:	2300      	movs	r3, #0
 800acfe:	703b      	strb	r3, [r7, #0]
 800ad00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad02:	f10a 0001 	add.w	r0, sl, #1
 800ad06:	6018      	str	r0, [r3, #0]
 800ad08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f43f acde 	beq.w	800a6cc <_dtoa_r+0x9c>
 800ad10:	601f      	str	r7, [r3, #0]
 800ad12:	e4db      	b.n	800a6cc <_dtoa_r+0x9c>
 800ad14:	4627      	mov	r7, r4
 800ad16:	463b      	mov	r3, r7
 800ad18:	461f      	mov	r7, r3
 800ad1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad1e:	2a39      	cmp	r2, #57	; 0x39
 800ad20:	d107      	bne.n	800ad32 <_dtoa_r+0x702>
 800ad22:	9a03      	ldr	r2, [sp, #12]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d1f7      	bne.n	800ad18 <_dtoa_r+0x6e8>
 800ad28:	2230      	movs	r2, #48	; 0x30
 800ad2a:	9903      	ldr	r1, [sp, #12]
 800ad2c:	f108 0801 	add.w	r8, r8, #1
 800ad30:	700a      	strb	r2, [r1, #0]
 800ad32:	781a      	ldrb	r2, [r3, #0]
 800ad34:	3201      	adds	r2, #1
 800ad36:	701a      	strb	r2, [r3, #0]
 800ad38:	e79e      	b.n	800ac78 <_dtoa_r+0x648>
 800ad3a:	46d0      	mov	r8, sl
 800ad3c:	e7eb      	b.n	800ad16 <_dtoa_r+0x6e6>
 800ad3e:	2200      	movs	r2, #0
 800ad40:	4b6e      	ldr	r3, [pc, #440]	; (800aefc <_dtoa_r+0x8cc>)
 800ad42:	f7f5 fbc9 	bl	80004d8 <__aeabi_dmul>
 800ad46:	2200      	movs	r2, #0
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4680      	mov	r8, r0
 800ad4c:	4689      	mov	r9, r1
 800ad4e:	f7f5 fe2b 	bl	80009a8 <__aeabi_dcmpeq>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d09b      	beq.n	800ac8e <_dtoa_r+0x65e>
 800ad56:	e7cd      	b.n	800acf4 <_dtoa_r+0x6c4>
 800ad58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	f000 80d0 	beq.w	800af00 <_dtoa_r+0x8d0>
 800ad60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ad62:	2a01      	cmp	r2, #1
 800ad64:	f300 80ae 	bgt.w	800aec4 <_dtoa_r+0x894>
 800ad68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad6a:	2a00      	cmp	r2, #0
 800ad6c:	f000 80a6 	beq.w	800aebc <_dtoa_r+0x88c>
 800ad70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad76:	9f06      	ldr	r7, [sp, #24]
 800ad78:	9a06      	ldr	r2, [sp, #24]
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	441a      	add	r2, r3
 800ad7e:	9206      	str	r2, [sp, #24]
 800ad80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad82:	4628      	mov	r0, r5
 800ad84:	441a      	add	r2, r3
 800ad86:	9209      	str	r2, [sp, #36]	; 0x24
 800ad88:	f000 fb54 	bl	800b434 <__i2b>
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	2f00      	cmp	r7, #0
 800ad90:	dd0c      	ble.n	800adac <_dtoa_r+0x77c>
 800ad92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dd09      	ble.n	800adac <_dtoa_r+0x77c>
 800ad98:	42bb      	cmp	r3, r7
 800ad9a:	bfa8      	it	ge
 800ad9c:	463b      	movge	r3, r7
 800ad9e:	9a06      	ldr	r2, [sp, #24]
 800ada0:	1aff      	subs	r7, r7, r3
 800ada2:	1ad2      	subs	r2, r2, r3
 800ada4:	9206      	str	r2, [sp, #24]
 800ada6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	9309      	str	r3, [sp, #36]	; 0x24
 800adac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adae:	b1f3      	cbz	r3, 800adee <_dtoa_r+0x7be>
 800adb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 80a8 	beq.w	800af08 <_dtoa_r+0x8d8>
 800adb8:	2c00      	cmp	r4, #0
 800adba:	dd10      	ble.n	800adde <_dtoa_r+0x7ae>
 800adbc:	4631      	mov	r1, r6
 800adbe:	4622      	mov	r2, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	f000 fbf5 	bl	800b5b0 <__pow5mult>
 800adc6:	465a      	mov	r2, fp
 800adc8:	4601      	mov	r1, r0
 800adca:	4606      	mov	r6, r0
 800adcc:	4628      	mov	r0, r5
 800adce:	f000 fb47 	bl	800b460 <__multiply>
 800add2:	4680      	mov	r8, r0
 800add4:	4659      	mov	r1, fp
 800add6:	4628      	mov	r0, r5
 800add8:	f000 fa76 	bl	800b2c8 <_Bfree>
 800addc:	46c3      	mov	fp, r8
 800adde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade0:	1b1a      	subs	r2, r3, r4
 800ade2:	d004      	beq.n	800adee <_dtoa_r+0x7be>
 800ade4:	4659      	mov	r1, fp
 800ade6:	4628      	mov	r0, r5
 800ade8:	f000 fbe2 	bl	800b5b0 <__pow5mult>
 800adec:	4683      	mov	fp, r0
 800adee:	2101      	movs	r1, #1
 800adf0:	4628      	mov	r0, r5
 800adf2:	f000 fb1f 	bl	800b434 <__i2b>
 800adf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adf8:	4604      	mov	r4, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f340 8086 	ble.w	800af0c <_dtoa_r+0x8dc>
 800ae00:	461a      	mov	r2, r3
 800ae02:	4601      	mov	r1, r0
 800ae04:	4628      	mov	r0, r5
 800ae06:	f000 fbd3 	bl	800b5b0 <__pow5mult>
 800ae0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	dd7f      	ble.n	800af12 <_dtoa_r+0x8e2>
 800ae12:	f04f 0800 	mov.w	r8, #0
 800ae16:	6923      	ldr	r3, [r4, #16]
 800ae18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae1c:	6918      	ldr	r0, [r3, #16]
 800ae1e:	f000 fabb 	bl	800b398 <__hi0bits>
 800ae22:	f1c0 0020 	rsb	r0, r0, #32
 800ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae28:	4418      	add	r0, r3
 800ae2a:	f010 001f 	ands.w	r0, r0, #31
 800ae2e:	f000 8092 	beq.w	800af56 <_dtoa_r+0x926>
 800ae32:	f1c0 0320 	rsb	r3, r0, #32
 800ae36:	2b04      	cmp	r3, #4
 800ae38:	f340 808a 	ble.w	800af50 <_dtoa_r+0x920>
 800ae3c:	f1c0 001c 	rsb	r0, r0, #28
 800ae40:	9b06      	ldr	r3, [sp, #24]
 800ae42:	4407      	add	r7, r0
 800ae44:	4403      	add	r3, r0
 800ae46:	9306      	str	r3, [sp, #24]
 800ae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4a:	4403      	add	r3, r0
 800ae4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4e:	9b06      	ldr	r3, [sp, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dd05      	ble.n	800ae60 <_dtoa_r+0x830>
 800ae54:	4659      	mov	r1, fp
 800ae56:	461a      	mov	r2, r3
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f000 fc03 	bl	800b664 <__lshift>
 800ae5e:	4683      	mov	fp, r0
 800ae60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dd05      	ble.n	800ae72 <_dtoa_r+0x842>
 800ae66:	4621      	mov	r1, r4
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f000 fbfa 	bl	800b664 <__lshift>
 800ae70:	4604      	mov	r4, r0
 800ae72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d070      	beq.n	800af5a <_dtoa_r+0x92a>
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f000 fc62 	bl	800b744 <__mcmp>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	da6a      	bge.n	800af5a <_dtoa_r+0x92a>
 800ae84:	2300      	movs	r3, #0
 800ae86:	4659      	mov	r1, fp
 800ae88:	220a      	movs	r2, #10
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f000 fa3e 	bl	800b30c <__multadd>
 800ae90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae92:	4683      	mov	fp, r0
 800ae94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 8194 	beq.w	800b1c6 <_dtoa_r+0xb96>
 800ae9e:	4631      	mov	r1, r6
 800aea0:	2300      	movs	r3, #0
 800aea2:	220a      	movs	r2, #10
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 fa31 	bl	800b30c <__multadd>
 800aeaa:	f1b9 0f00 	cmp.w	r9, #0
 800aeae:	4606      	mov	r6, r0
 800aeb0:	f300 8093 	bgt.w	800afda <_dtoa_r+0x9aa>
 800aeb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	dc57      	bgt.n	800af6a <_dtoa_r+0x93a>
 800aeba:	e08e      	b.n	800afda <_dtoa_r+0x9aa>
 800aebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aec2:	e757      	b.n	800ad74 <_dtoa_r+0x744>
 800aec4:	9b08      	ldr	r3, [sp, #32]
 800aec6:	1e5c      	subs	r4, r3, #1
 800aec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeca:	42a3      	cmp	r3, r4
 800aecc:	bfb7      	itett	lt
 800aece:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aed0:	1b1c      	subge	r4, r3, r4
 800aed2:	1ae2      	sublt	r2, r4, r3
 800aed4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aed6:	bfbe      	ittt	lt
 800aed8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aeda:	189b      	addlt	r3, r3, r2
 800aedc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aede:	9b08      	ldr	r3, [sp, #32]
 800aee0:	bfb8      	it	lt
 800aee2:	2400      	movlt	r4, #0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bfbb      	ittet	lt
 800aee8:	9b06      	ldrlt	r3, [sp, #24]
 800aeea:	9a08      	ldrlt	r2, [sp, #32]
 800aeec:	9f06      	ldrge	r7, [sp, #24]
 800aeee:	1a9f      	sublt	r7, r3, r2
 800aef0:	bfac      	ite	ge
 800aef2:	9b08      	ldrge	r3, [sp, #32]
 800aef4:	2300      	movlt	r3, #0
 800aef6:	e73f      	b.n	800ad78 <_dtoa_r+0x748>
 800aef8:	3fe00000 	.word	0x3fe00000
 800aefc:	40240000 	.word	0x40240000
 800af00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af02:	9f06      	ldr	r7, [sp, #24]
 800af04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800af06:	e742      	b.n	800ad8e <_dtoa_r+0x75e>
 800af08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af0a:	e76b      	b.n	800ade4 <_dtoa_r+0x7b4>
 800af0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af0e:	2b01      	cmp	r3, #1
 800af10:	dc19      	bgt.n	800af46 <_dtoa_r+0x916>
 800af12:	9b04      	ldr	r3, [sp, #16]
 800af14:	b9bb      	cbnz	r3, 800af46 <_dtoa_r+0x916>
 800af16:	9b05      	ldr	r3, [sp, #20]
 800af18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af1c:	b99b      	cbnz	r3, 800af46 <_dtoa_r+0x916>
 800af1e:	9b05      	ldr	r3, [sp, #20]
 800af20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af24:	0d1b      	lsrs	r3, r3, #20
 800af26:	051b      	lsls	r3, r3, #20
 800af28:	b183      	cbz	r3, 800af4c <_dtoa_r+0x91c>
 800af2a:	f04f 0801 	mov.w	r8, #1
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	3301      	adds	r3, #1
 800af32:	9306      	str	r3, [sp, #24]
 800af34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af36:	3301      	adds	r3, #1
 800af38:	9309      	str	r3, [sp, #36]	; 0x24
 800af3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f47f af6a 	bne.w	800ae16 <_dtoa_r+0x7e6>
 800af42:	2001      	movs	r0, #1
 800af44:	e76f      	b.n	800ae26 <_dtoa_r+0x7f6>
 800af46:	f04f 0800 	mov.w	r8, #0
 800af4a:	e7f6      	b.n	800af3a <_dtoa_r+0x90a>
 800af4c:	4698      	mov	r8, r3
 800af4e:	e7f4      	b.n	800af3a <_dtoa_r+0x90a>
 800af50:	f43f af7d 	beq.w	800ae4e <_dtoa_r+0x81e>
 800af54:	4618      	mov	r0, r3
 800af56:	301c      	adds	r0, #28
 800af58:	e772      	b.n	800ae40 <_dtoa_r+0x810>
 800af5a:	9b08      	ldr	r3, [sp, #32]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dc36      	bgt.n	800afce <_dtoa_r+0x99e>
 800af60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af62:	2b02      	cmp	r3, #2
 800af64:	dd33      	ble.n	800afce <_dtoa_r+0x99e>
 800af66:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af6a:	f1b9 0f00 	cmp.w	r9, #0
 800af6e:	d10d      	bne.n	800af8c <_dtoa_r+0x95c>
 800af70:	4621      	mov	r1, r4
 800af72:	464b      	mov	r3, r9
 800af74:	2205      	movs	r2, #5
 800af76:	4628      	mov	r0, r5
 800af78:	f000 f9c8 	bl	800b30c <__multadd>
 800af7c:	4601      	mov	r1, r0
 800af7e:	4604      	mov	r4, r0
 800af80:	4658      	mov	r0, fp
 800af82:	f000 fbdf 	bl	800b744 <__mcmp>
 800af86:	2800      	cmp	r0, #0
 800af88:	f73f adb8 	bgt.w	800aafc <_dtoa_r+0x4cc>
 800af8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af8e:	9f03      	ldr	r7, [sp, #12]
 800af90:	ea6f 0a03 	mvn.w	sl, r3
 800af94:	f04f 0800 	mov.w	r8, #0
 800af98:	4621      	mov	r1, r4
 800af9a:	4628      	mov	r0, r5
 800af9c:	f000 f994 	bl	800b2c8 <_Bfree>
 800afa0:	2e00      	cmp	r6, #0
 800afa2:	f43f aea7 	beq.w	800acf4 <_dtoa_r+0x6c4>
 800afa6:	f1b8 0f00 	cmp.w	r8, #0
 800afaa:	d005      	beq.n	800afb8 <_dtoa_r+0x988>
 800afac:	45b0      	cmp	r8, r6
 800afae:	d003      	beq.n	800afb8 <_dtoa_r+0x988>
 800afb0:	4641      	mov	r1, r8
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 f988 	bl	800b2c8 <_Bfree>
 800afb8:	4631      	mov	r1, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	f000 f984 	bl	800b2c8 <_Bfree>
 800afc0:	e698      	b.n	800acf4 <_dtoa_r+0x6c4>
 800afc2:	2400      	movs	r4, #0
 800afc4:	4626      	mov	r6, r4
 800afc6:	e7e1      	b.n	800af8c <_dtoa_r+0x95c>
 800afc8:	46c2      	mov	sl, r8
 800afca:	4626      	mov	r6, r4
 800afcc:	e596      	b.n	800aafc <_dtoa_r+0x4cc>
 800afce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 80fd 	beq.w	800b1d4 <_dtoa_r+0xba4>
 800afda:	2f00      	cmp	r7, #0
 800afdc:	dd05      	ble.n	800afea <_dtoa_r+0x9ba>
 800afde:	4631      	mov	r1, r6
 800afe0:	463a      	mov	r2, r7
 800afe2:	4628      	mov	r0, r5
 800afe4:	f000 fb3e 	bl	800b664 <__lshift>
 800afe8:	4606      	mov	r6, r0
 800afea:	f1b8 0f00 	cmp.w	r8, #0
 800afee:	d05c      	beq.n	800b0aa <_dtoa_r+0xa7a>
 800aff0:	4628      	mov	r0, r5
 800aff2:	6871      	ldr	r1, [r6, #4]
 800aff4:	f000 f928 	bl	800b248 <_Balloc>
 800aff8:	4607      	mov	r7, r0
 800affa:	b928      	cbnz	r0, 800b008 <_dtoa_r+0x9d8>
 800affc:	4602      	mov	r2, r0
 800affe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b002:	4b7f      	ldr	r3, [pc, #508]	; (800b200 <_dtoa_r+0xbd0>)
 800b004:	f7ff bb28 	b.w	800a658 <_dtoa_r+0x28>
 800b008:	6932      	ldr	r2, [r6, #16]
 800b00a:	f106 010c 	add.w	r1, r6, #12
 800b00e:	3202      	adds	r2, #2
 800b010:	0092      	lsls	r2, r2, #2
 800b012:	300c      	adds	r0, #12
 800b014:	f7fe fcba 	bl	800998c <memcpy>
 800b018:	2201      	movs	r2, #1
 800b01a:	4639      	mov	r1, r7
 800b01c:	4628      	mov	r0, r5
 800b01e:	f000 fb21 	bl	800b664 <__lshift>
 800b022:	46b0      	mov	r8, r6
 800b024:	4606      	mov	r6, r0
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	3301      	adds	r3, #1
 800b02a:	9308      	str	r3, [sp, #32]
 800b02c:	9b03      	ldr	r3, [sp, #12]
 800b02e:	444b      	add	r3, r9
 800b030:	930a      	str	r3, [sp, #40]	; 0x28
 800b032:	9b04      	ldr	r3, [sp, #16]
 800b034:	f003 0301 	and.w	r3, r3, #1
 800b038:	9309      	str	r3, [sp, #36]	; 0x24
 800b03a:	9b08      	ldr	r3, [sp, #32]
 800b03c:	4621      	mov	r1, r4
 800b03e:	3b01      	subs	r3, #1
 800b040:	4658      	mov	r0, fp
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	f7ff fa68 	bl	800a518 <quorem>
 800b048:	4603      	mov	r3, r0
 800b04a:	4641      	mov	r1, r8
 800b04c:	3330      	adds	r3, #48	; 0x30
 800b04e:	9006      	str	r0, [sp, #24]
 800b050:	4658      	mov	r0, fp
 800b052:	930b      	str	r3, [sp, #44]	; 0x2c
 800b054:	f000 fb76 	bl	800b744 <__mcmp>
 800b058:	4632      	mov	r2, r6
 800b05a:	4681      	mov	r9, r0
 800b05c:	4621      	mov	r1, r4
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 fb8c 	bl	800b77c <__mdiff>
 800b064:	68c2      	ldr	r2, [r0, #12]
 800b066:	4607      	mov	r7, r0
 800b068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b06a:	bb02      	cbnz	r2, 800b0ae <_dtoa_r+0xa7e>
 800b06c:	4601      	mov	r1, r0
 800b06e:	4658      	mov	r0, fp
 800b070:	f000 fb68 	bl	800b744 <__mcmp>
 800b074:	4602      	mov	r2, r0
 800b076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b078:	4639      	mov	r1, r7
 800b07a:	4628      	mov	r0, r5
 800b07c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b080:	f000 f922 	bl	800b2c8 <_Bfree>
 800b084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b088:	9f08      	ldr	r7, [sp, #32]
 800b08a:	ea43 0102 	orr.w	r1, r3, r2
 800b08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b090:	430b      	orrs	r3, r1
 800b092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b094:	d10d      	bne.n	800b0b2 <_dtoa_r+0xa82>
 800b096:	2b39      	cmp	r3, #57	; 0x39
 800b098:	d029      	beq.n	800b0ee <_dtoa_r+0xabe>
 800b09a:	f1b9 0f00 	cmp.w	r9, #0
 800b09e:	dd01      	ble.n	800b0a4 <_dtoa_r+0xa74>
 800b0a0:	9b06      	ldr	r3, [sp, #24]
 800b0a2:	3331      	adds	r3, #49	; 0x31
 800b0a4:	9a04      	ldr	r2, [sp, #16]
 800b0a6:	7013      	strb	r3, [r2, #0]
 800b0a8:	e776      	b.n	800af98 <_dtoa_r+0x968>
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	e7b9      	b.n	800b022 <_dtoa_r+0x9f2>
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	e7e2      	b.n	800b078 <_dtoa_r+0xa48>
 800b0b2:	f1b9 0f00 	cmp.w	r9, #0
 800b0b6:	db06      	blt.n	800b0c6 <_dtoa_r+0xa96>
 800b0b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b0ba:	ea41 0909 	orr.w	r9, r1, r9
 800b0be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0c0:	ea59 0101 	orrs.w	r1, r9, r1
 800b0c4:	d120      	bne.n	800b108 <_dtoa_r+0xad8>
 800b0c6:	2a00      	cmp	r2, #0
 800b0c8:	ddec      	ble.n	800b0a4 <_dtoa_r+0xa74>
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	9308      	str	r3, [sp, #32]
 800b0d2:	f000 fac7 	bl	800b664 <__lshift>
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	4683      	mov	fp, r0
 800b0da:	f000 fb33 	bl	800b744 <__mcmp>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	9b08      	ldr	r3, [sp, #32]
 800b0e2:	dc02      	bgt.n	800b0ea <_dtoa_r+0xaba>
 800b0e4:	d1de      	bne.n	800b0a4 <_dtoa_r+0xa74>
 800b0e6:	07da      	lsls	r2, r3, #31
 800b0e8:	d5dc      	bpl.n	800b0a4 <_dtoa_r+0xa74>
 800b0ea:	2b39      	cmp	r3, #57	; 0x39
 800b0ec:	d1d8      	bne.n	800b0a0 <_dtoa_r+0xa70>
 800b0ee:	2339      	movs	r3, #57	; 0x39
 800b0f0:	9a04      	ldr	r2, [sp, #16]
 800b0f2:	7013      	strb	r3, [r2, #0]
 800b0f4:	463b      	mov	r3, r7
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	2a39      	cmp	r2, #57	; 0x39
 800b100:	d050      	beq.n	800b1a4 <_dtoa_r+0xb74>
 800b102:	3201      	adds	r2, #1
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	e747      	b.n	800af98 <_dtoa_r+0x968>
 800b108:	2a00      	cmp	r2, #0
 800b10a:	dd03      	ble.n	800b114 <_dtoa_r+0xae4>
 800b10c:	2b39      	cmp	r3, #57	; 0x39
 800b10e:	d0ee      	beq.n	800b0ee <_dtoa_r+0xabe>
 800b110:	3301      	adds	r3, #1
 800b112:	e7c7      	b.n	800b0a4 <_dtoa_r+0xa74>
 800b114:	9a08      	ldr	r2, [sp, #32]
 800b116:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b118:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b11c:	428a      	cmp	r2, r1
 800b11e:	d02a      	beq.n	800b176 <_dtoa_r+0xb46>
 800b120:	4659      	mov	r1, fp
 800b122:	2300      	movs	r3, #0
 800b124:	220a      	movs	r2, #10
 800b126:	4628      	mov	r0, r5
 800b128:	f000 f8f0 	bl	800b30c <__multadd>
 800b12c:	45b0      	cmp	r8, r6
 800b12e:	4683      	mov	fp, r0
 800b130:	f04f 0300 	mov.w	r3, #0
 800b134:	f04f 020a 	mov.w	r2, #10
 800b138:	4641      	mov	r1, r8
 800b13a:	4628      	mov	r0, r5
 800b13c:	d107      	bne.n	800b14e <_dtoa_r+0xb1e>
 800b13e:	f000 f8e5 	bl	800b30c <__multadd>
 800b142:	4680      	mov	r8, r0
 800b144:	4606      	mov	r6, r0
 800b146:	9b08      	ldr	r3, [sp, #32]
 800b148:	3301      	adds	r3, #1
 800b14a:	9308      	str	r3, [sp, #32]
 800b14c:	e775      	b.n	800b03a <_dtoa_r+0xa0a>
 800b14e:	f000 f8dd 	bl	800b30c <__multadd>
 800b152:	4631      	mov	r1, r6
 800b154:	4680      	mov	r8, r0
 800b156:	2300      	movs	r3, #0
 800b158:	220a      	movs	r2, #10
 800b15a:	4628      	mov	r0, r5
 800b15c:	f000 f8d6 	bl	800b30c <__multadd>
 800b160:	4606      	mov	r6, r0
 800b162:	e7f0      	b.n	800b146 <_dtoa_r+0xb16>
 800b164:	f1b9 0f00 	cmp.w	r9, #0
 800b168:	bfcc      	ite	gt
 800b16a:	464f      	movgt	r7, r9
 800b16c:	2701      	movle	r7, #1
 800b16e:	f04f 0800 	mov.w	r8, #0
 800b172:	9a03      	ldr	r2, [sp, #12]
 800b174:	4417      	add	r7, r2
 800b176:	4659      	mov	r1, fp
 800b178:	2201      	movs	r2, #1
 800b17a:	4628      	mov	r0, r5
 800b17c:	9308      	str	r3, [sp, #32]
 800b17e:	f000 fa71 	bl	800b664 <__lshift>
 800b182:	4621      	mov	r1, r4
 800b184:	4683      	mov	fp, r0
 800b186:	f000 fadd 	bl	800b744 <__mcmp>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	dcb2      	bgt.n	800b0f4 <_dtoa_r+0xac4>
 800b18e:	d102      	bne.n	800b196 <_dtoa_r+0xb66>
 800b190:	9b08      	ldr	r3, [sp, #32]
 800b192:	07db      	lsls	r3, r3, #31
 800b194:	d4ae      	bmi.n	800b0f4 <_dtoa_r+0xac4>
 800b196:	463b      	mov	r3, r7
 800b198:	461f      	mov	r7, r3
 800b19a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b19e:	2a30      	cmp	r2, #48	; 0x30
 800b1a0:	d0fa      	beq.n	800b198 <_dtoa_r+0xb68>
 800b1a2:	e6f9      	b.n	800af98 <_dtoa_r+0x968>
 800b1a4:	9a03      	ldr	r2, [sp, #12]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d1a5      	bne.n	800b0f6 <_dtoa_r+0xac6>
 800b1aa:	2331      	movs	r3, #49	; 0x31
 800b1ac:	f10a 0a01 	add.w	sl, sl, #1
 800b1b0:	e779      	b.n	800b0a6 <_dtoa_r+0xa76>
 800b1b2:	4b14      	ldr	r3, [pc, #80]	; (800b204 <_dtoa_r+0xbd4>)
 800b1b4:	f7ff baa8 	b.w	800a708 <_dtoa_r+0xd8>
 800b1b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f47f aa81 	bne.w	800a6c2 <_dtoa_r+0x92>
 800b1c0:	4b11      	ldr	r3, [pc, #68]	; (800b208 <_dtoa_r+0xbd8>)
 800b1c2:	f7ff baa1 	b.w	800a708 <_dtoa_r+0xd8>
 800b1c6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ca:	dc03      	bgt.n	800b1d4 <_dtoa_r+0xba4>
 800b1cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	f73f aecb 	bgt.w	800af6a <_dtoa_r+0x93a>
 800b1d4:	9f03      	ldr	r7, [sp, #12]
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4658      	mov	r0, fp
 800b1da:	f7ff f99d 	bl	800a518 <quorem>
 800b1de:	9a03      	ldr	r2, [sp, #12]
 800b1e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b1e4:	f807 3b01 	strb.w	r3, [r7], #1
 800b1e8:	1aba      	subs	r2, r7, r2
 800b1ea:	4591      	cmp	r9, r2
 800b1ec:	ddba      	ble.n	800b164 <_dtoa_r+0xb34>
 800b1ee:	4659      	mov	r1, fp
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	220a      	movs	r2, #10
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f889 	bl	800b30c <__multadd>
 800b1fa:	4683      	mov	fp, r0
 800b1fc:	e7eb      	b.n	800b1d6 <_dtoa_r+0xba6>
 800b1fe:	bf00      	nop
 800b200:	0800cec7 	.word	0x0800cec7
 800b204:	0800ce24 	.word	0x0800ce24
 800b208:	0800ce48 	.word	0x0800ce48

0800b20c <_localeconv_r>:
 800b20c:	4800      	ldr	r0, [pc, #0]	; (800b210 <_localeconv_r+0x4>)
 800b20e:	4770      	bx	lr
 800b210:	20000160 	.word	0x20000160

0800b214 <memchr>:
 800b214:	4603      	mov	r3, r0
 800b216:	b510      	push	{r4, lr}
 800b218:	b2c9      	uxtb	r1, r1
 800b21a:	4402      	add	r2, r0
 800b21c:	4293      	cmp	r3, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	d101      	bne.n	800b226 <memchr+0x12>
 800b222:	2000      	movs	r0, #0
 800b224:	e003      	b.n	800b22e <memchr+0x1a>
 800b226:	7804      	ldrb	r4, [r0, #0]
 800b228:	3301      	adds	r3, #1
 800b22a:	428c      	cmp	r4, r1
 800b22c:	d1f6      	bne.n	800b21c <memchr+0x8>
 800b22e:	bd10      	pop	{r4, pc}

0800b230 <__malloc_lock>:
 800b230:	4801      	ldr	r0, [pc, #4]	; (800b238 <__malloc_lock+0x8>)
 800b232:	f000 bd2c 	b.w	800bc8e <__retarget_lock_acquire_recursive>
 800b236:	bf00      	nop
 800b238:	200007d4 	.word	0x200007d4

0800b23c <__malloc_unlock>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__malloc_unlock+0x8>)
 800b23e:	f000 bd27 	b.w	800bc90 <__retarget_lock_release_recursive>
 800b242:	bf00      	nop
 800b244:	200007d4 	.word	0x200007d4

0800b248 <_Balloc>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b24c:	4604      	mov	r4, r0
 800b24e:	460d      	mov	r5, r1
 800b250:	b976      	cbnz	r6, 800b270 <_Balloc+0x28>
 800b252:	2010      	movs	r0, #16
 800b254:	f7fe fb92 	bl	800997c <malloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	6260      	str	r0, [r4, #36]	; 0x24
 800b25c:	b920      	cbnz	r0, 800b268 <_Balloc+0x20>
 800b25e:	2166      	movs	r1, #102	; 0x66
 800b260:	4b17      	ldr	r3, [pc, #92]	; (800b2c0 <_Balloc+0x78>)
 800b262:	4818      	ldr	r0, [pc, #96]	; (800b2c4 <_Balloc+0x7c>)
 800b264:	f000 fce2 	bl	800bc2c <__assert_func>
 800b268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b26c:	6006      	str	r6, [r0, #0]
 800b26e:	60c6      	str	r6, [r0, #12]
 800b270:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b272:	68f3      	ldr	r3, [r6, #12]
 800b274:	b183      	cbz	r3, 800b298 <_Balloc+0x50>
 800b276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b27e:	b9b8      	cbnz	r0, 800b2b0 <_Balloc+0x68>
 800b280:	2101      	movs	r1, #1
 800b282:	fa01 f605 	lsl.w	r6, r1, r5
 800b286:	1d72      	adds	r2, r6, #5
 800b288:	4620      	mov	r0, r4
 800b28a:	0092      	lsls	r2, r2, #2
 800b28c:	f000 fb5e 	bl	800b94c <_calloc_r>
 800b290:	b160      	cbz	r0, 800b2ac <_Balloc+0x64>
 800b292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b296:	e00e      	b.n	800b2b6 <_Balloc+0x6e>
 800b298:	2221      	movs	r2, #33	; 0x21
 800b29a:	2104      	movs	r1, #4
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 fb55 	bl	800b94c <_calloc_r>
 800b2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a4:	60f0      	str	r0, [r6, #12]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e4      	bne.n	800b276 <_Balloc+0x2e>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	6802      	ldr	r2, [r0, #0]
 800b2b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2bc:	e7f7      	b.n	800b2ae <_Balloc+0x66>
 800b2be:	bf00      	nop
 800b2c0:	0800ce55 	.word	0x0800ce55
 800b2c4:	0800ced8 	.word	0x0800ced8

0800b2c8 <_Bfree>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	b976      	cbnz	r6, 800b2f0 <_Bfree+0x28>
 800b2d2:	2010      	movs	r0, #16
 800b2d4:	f7fe fb52 	bl	800997c <malloc>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	6268      	str	r0, [r5, #36]	; 0x24
 800b2dc:	b920      	cbnz	r0, 800b2e8 <_Bfree+0x20>
 800b2de:	218a      	movs	r1, #138	; 0x8a
 800b2e0:	4b08      	ldr	r3, [pc, #32]	; (800b304 <_Bfree+0x3c>)
 800b2e2:	4809      	ldr	r0, [pc, #36]	; (800b308 <_Bfree+0x40>)
 800b2e4:	f000 fca2 	bl	800bc2c <__assert_func>
 800b2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2ec:	6006      	str	r6, [r0, #0]
 800b2ee:	60c6      	str	r6, [r0, #12]
 800b2f0:	b13c      	cbz	r4, 800b302 <_Bfree+0x3a>
 800b2f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2f4:	6862      	ldr	r2, [r4, #4]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2fc:	6021      	str	r1, [r4, #0]
 800b2fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	0800ce55 	.word	0x0800ce55
 800b308:	0800ced8 	.word	0x0800ced8

0800b30c <__multadd>:
 800b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b310:	4607      	mov	r7, r0
 800b312:	460c      	mov	r4, r1
 800b314:	461e      	mov	r6, r3
 800b316:	2000      	movs	r0, #0
 800b318:	690d      	ldr	r5, [r1, #16]
 800b31a:	f101 0c14 	add.w	ip, r1, #20
 800b31e:	f8dc 3000 	ldr.w	r3, [ip]
 800b322:	3001      	adds	r0, #1
 800b324:	b299      	uxth	r1, r3
 800b326:	fb02 6101 	mla	r1, r2, r1, r6
 800b32a:	0c1e      	lsrs	r6, r3, #16
 800b32c:	0c0b      	lsrs	r3, r1, #16
 800b32e:	fb02 3306 	mla	r3, r2, r6, r3
 800b332:	b289      	uxth	r1, r1
 800b334:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b338:	4285      	cmp	r5, r0
 800b33a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b33e:	f84c 1b04 	str.w	r1, [ip], #4
 800b342:	dcec      	bgt.n	800b31e <__multadd+0x12>
 800b344:	b30e      	cbz	r6, 800b38a <__multadd+0x7e>
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	42ab      	cmp	r3, r5
 800b34a:	dc19      	bgt.n	800b380 <__multadd+0x74>
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	4638      	mov	r0, r7
 800b350:	3101      	adds	r1, #1
 800b352:	f7ff ff79 	bl	800b248 <_Balloc>
 800b356:	4680      	mov	r8, r0
 800b358:	b928      	cbnz	r0, 800b366 <__multadd+0x5a>
 800b35a:	4602      	mov	r2, r0
 800b35c:	21b5      	movs	r1, #181	; 0xb5
 800b35e:	4b0c      	ldr	r3, [pc, #48]	; (800b390 <__multadd+0x84>)
 800b360:	480c      	ldr	r0, [pc, #48]	; (800b394 <__multadd+0x88>)
 800b362:	f000 fc63 	bl	800bc2c <__assert_func>
 800b366:	6922      	ldr	r2, [r4, #16]
 800b368:	f104 010c 	add.w	r1, r4, #12
 800b36c:	3202      	adds	r2, #2
 800b36e:	0092      	lsls	r2, r2, #2
 800b370:	300c      	adds	r0, #12
 800b372:	f7fe fb0b 	bl	800998c <memcpy>
 800b376:	4621      	mov	r1, r4
 800b378:	4638      	mov	r0, r7
 800b37a:	f7ff ffa5 	bl	800b2c8 <_Bfree>
 800b37e:	4644      	mov	r4, r8
 800b380:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b384:	3501      	adds	r5, #1
 800b386:	615e      	str	r6, [r3, #20]
 800b388:	6125      	str	r5, [r4, #16]
 800b38a:	4620      	mov	r0, r4
 800b38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b390:	0800cec7 	.word	0x0800cec7
 800b394:	0800ced8 	.word	0x0800ced8

0800b398 <__hi0bits>:
 800b398:	0c02      	lsrs	r2, r0, #16
 800b39a:	0412      	lsls	r2, r2, #16
 800b39c:	4603      	mov	r3, r0
 800b39e:	b9ca      	cbnz	r2, 800b3d4 <__hi0bits+0x3c>
 800b3a0:	0403      	lsls	r3, r0, #16
 800b3a2:	2010      	movs	r0, #16
 800b3a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3a8:	bf04      	itt	eq
 800b3aa:	021b      	lsleq	r3, r3, #8
 800b3ac:	3008      	addeq	r0, #8
 800b3ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3b2:	bf04      	itt	eq
 800b3b4:	011b      	lsleq	r3, r3, #4
 800b3b6:	3004      	addeq	r0, #4
 800b3b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b3bc:	bf04      	itt	eq
 800b3be:	009b      	lsleq	r3, r3, #2
 800b3c0:	3002      	addeq	r0, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	db05      	blt.n	800b3d2 <__hi0bits+0x3a>
 800b3c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b3ca:	f100 0001 	add.w	r0, r0, #1
 800b3ce:	bf08      	it	eq
 800b3d0:	2020      	moveq	r0, #32
 800b3d2:	4770      	bx	lr
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e7e5      	b.n	800b3a4 <__hi0bits+0xc>

0800b3d8 <__lo0bits>:
 800b3d8:	6803      	ldr	r3, [r0, #0]
 800b3da:	4602      	mov	r2, r0
 800b3dc:	f013 0007 	ands.w	r0, r3, #7
 800b3e0:	d00b      	beq.n	800b3fa <__lo0bits+0x22>
 800b3e2:	07d9      	lsls	r1, r3, #31
 800b3e4:	d421      	bmi.n	800b42a <__lo0bits+0x52>
 800b3e6:	0798      	lsls	r0, r3, #30
 800b3e8:	bf49      	itett	mi
 800b3ea:	085b      	lsrmi	r3, r3, #1
 800b3ec:	089b      	lsrpl	r3, r3, #2
 800b3ee:	2001      	movmi	r0, #1
 800b3f0:	6013      	strmi	r3, [r2, #0]
 800b3f2:	bf5c      	itt	pl
 800b3f4:	2002      	movpl	r0, #2
 800b3f6:	6013      	strpl	r3, [r2, #0]
 800b3f8:	4770      	bx	lr
 800b3fa:	b299      	uxth	r1, r3
 800b3fc:	b909      	cbnz	r1, 800b402 <__lo0bits+0x2a>
 800b3fe:	2010      	movs	r0, #16
 800b400:	0c1b      	lsrs	r3, r3, #16
 800b402:	b2d9      	uxtb	r1, r3
 800b404:	b909      	cbnz	r1, 800b40a <__lo0bits+0x32>
 800b406:	3008      	adds	r0, #8
 800b408:	0a1b      	lsrs	r3, r3, #8
 800b40a:	0719      	lsls	r1, r3, #28
 800b40c:	bf04      	itt	eq
 800b40e:	091b      	lsreq	r3, r3, #4
 800b410:	3004      	addeq	r0, #4
 800b412:	0799      	lsls	r1, r3, #30
 800b414:	bf04      	itt	eq
 800b416:	089b      	lsreq	r3, r3, #2
 800b418:	3002      	addeq	r0, #2
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d403      	bmi.n	800b426 <__lo0bits+0x4e>
 800b41e:	085b      	lsrs	r3, r3, #1
 800b420:	f100 0001 	add.w	r0, r0, #1
 800b424:	d003      	beq.n	800b42e <__lo0bits+0x56>
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	4770      	bx	lr
 800b42a:	2000      	movs	r0, #0
 800b42c:	4770      	bx	lr
 800b42e:	2020      	movs	r0, #32
 800b430:	4770      	bx	lr
	...

0800b434 <__i2b>:
 800b434:	b510      	push	{r4, lr}
 800b436:	460c      	mov	r4, r1
 800b438:	2101      	movs	r1, #1
 800b43a:	f7ff ff05 	bl	800b248 <_Balloc>
 800b43e:	4602      	mov	r2, r0
 800b440:	b928      	cbnz	r0, 800b44e <__i2b+0x1a>
 800b442:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b446:	4b04      	ldr	r3, [pc, #16]	; (800b458 <__i2b+0x24>)
 800b448:	4804      	ldr	r0, [pc, #16]	; (800b45c <__i2b+0x28>)
 800b44a:	f000 fbef 	bl	800bc2c <__assert_func>
 800b44e:	2301      	movs	r3, #1
 800b450:	6144      	str	r4, [r0, #20]
 800b452:	6103      	str	r3, [r0, #16]
 800b454:	bd10      	pop	{r4, pc}
 800b456:	bf00      	nop
 800b458:	0800cec7 	.word	0x0800cec7
 800b45c:	0800ced8 	.word	0x0800ced8

0800b460 <__multiply>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	4691      	mov	r9, r2
 800b466:	690a      	ldr	r2, [r1, #16]
 800b468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b46c:	460c      	mov	r4, r1
 800b46e:	429a      	cmp	r2, r3
 800b470:	bfbe      	ittt	lt
 800b472:	460b      	movlt	r3, r1
 800b474:	464c      	movlt	r4, r9
 800b476:	4699      	movlt	r9, r3
 800b478:	6927      	ldr	r7, [r4, #16]
 800b47a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	6861      	ldr	r1, [r4, #4]
 800b482:	eb07 060a 	add.w	r6, r7, sl
 800b486:	42b3      	cmp	r3, r6
 800b488:	b085      	sub	sp, #20
 800b48a:	bfb8      	it	lt
 800b48c:	3101      	addlt	r1, #1
 800b48e:	f7ff fedb 	bl	800b248 <_Balloc>
 800b492:	b930      	cbnz	r0, 800b4a2 <__multiply+0x42>
 800b494:	4602      	mov	r2, r0
 800b496:	f240 115d 	movw	r1, #349	; 0x15d
 800b49a:	4b43      	ldr	r3, [pc, #268]	; (800b5a8 <__multiply+0x148>)
 800b49c:	4843      	ldr	r0, [pc, #268]	; (800b5ac <__multiply+0x14c>)
 800b49e:	f000 fbc5 	bl	800bc2c <__assert_func>
 800b4a2:	f100 0514 	add.w	r5, r0, #20
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4ae:	4543      	cmp	r3, r8
 800b4b0:	d321      	bcc.n	800b4f6 <__multiply+0x96>
 800b4b2:	f104 0314 	add.w	r3, r4, #20
 800b4b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4ba:	f109 0314 	add.w	r3, r9, #20
 800b4be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4c2:	9202      	str	r2, [sp, #8]
 800b4c4:	1b3a      	subs	r2, r7, r4
 800b4c6:	3a15      	subs	r2, #21
 800b4c8:	f022 0203 	bic.w	r2, r2, #3
 800b4cc:	3204      	adds	r2, #4
 800b4ce:	f104 0115 	add.w	r1, r4, #21
 800b4d2:	428f      	cmp	r7, r1
 800b4d4:	bf38      	it	cc
 800b4d6:	2204      	movcc	r2, #4
 800b4d8:	9201      	str	r2, [sp, #4]
 800b4da:	9a02      	ldr	r2, [sp, #8]
 800b4dc:	9303      	str	r3, [sp, #12]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d80c      	bhi.n	800b4fc <__multiply+0x9c>
 800b4e2:	2e00      	cmp	r6, #0
 800b4e4:	dd03      	ble.n	800b4ee <__multiply+0x8e>
 800b4e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d059      	beq.n	800b5a2 <__multiply+0x142>
 800b4ee:	6106      	str	r6, [r0, #16]
 800b4f0:	b005      	add	sp, #20
 800b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f6:	f843 2b04 	str.w	r2, [r3], #4
 800b4fa:	e7d8      	b.n	800b4ae <__multiply+0x4e>
 800b4fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b500:	f1ba 0f00 	cmp.w	sl, #0
 800b504:	d023      	beq.n	800b54e <__multiply+0xee>
 800b506:	46a9      	mov	r9, r5
 800b508:	f04f 0c00 	mov.w	ip, #0
 800b50c:	f104 0e14 	add.w	lr, r4, #20
 800b510:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b514:	f8d9 1000 	ldr.w	r1, [r9]
 800b518:	fa1f fb82 	uxth.w	fp, r2
 800b51c:	b289      	uxth	r1, r1
 800b51e:	fb0a 110b 	mla	r1, sl, fp, r1
 800b522:	4461      	add	r1, ip
 800b524:	f8d9 c000 	ldr.w	ip, [r9]
 800b528:	0c12      	lsrs	r2, r2, #16
 800b52a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b52e:	fb0a c202 	mla	r2, sl, r2, ip
 800b532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b536:	b289      	uxth	r1, r1
 800b538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b53c:	4577      	cmp	r7, lr
 800b53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b542:	f849 1b04 	str.w	r1, [r9], #4
 800b546:	d8e3      	bhi.n	800b510 <__multiply+0xb0>
 800b548:	9a01      	ldr	r2, [sp, #4]
 800b54a:	f845 c002 	str.w	ip, [r5, r2]
 800b54e:	9a03      	ldr	r2, [sp, #12]
 800b550:	3304      	adds	r3, #4
 800b552:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b556:	f1b9 0f00 	cmp.w	r9, #0
 800b55a:	d020      	beq.n	800b59e <__multiply+0x13e>
 800b55c:	46ae      	mov	lr, r5
 800b55e:	f04f 0a00 	mov.w	sl, #0
 800b562:	6829      	ldr	r1, [r5, #0]
 800b564:	f104 0c14 	add.w	ip, r4, #20
 800b568:	f8bc b000 	ldrh.w	fp, [ip]
 800b56c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b570:	b289      	uxth	r1, r1
 800b572:	fb09 220b 	mla	r2, r9, fp, r2
 800b576:	4492      	add	sl, r2
 800b578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b57c:	f84e 1b04 	str.w	r1, [lr], #4
 800b580:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b584:	f8be 1000 	ldrh.w	r1, [lr]
 800b588:	0c12      	lsrs	r2, r2, #16
 800b58a:	fb09 1102 	mla	r1, r9, r2, r1
 800b58e:	4567      	cmp	r7, ip
 800b590:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b598:	d8e6      	bhi.n	800b568 <__multiply+0x108>
 800b59a:	9a01      	ldr	r2, [sp, #4]
 800b59c:	50a9      	str	r1, [r5, r2]
 800b59e:	3504      	adds	r5, #4
 800b5a0:	e79b      	b.n	800b4da <__multiply+0x7a>
 800b5a2:	3e01      	subs	r6, #1
 800b5a4:	e79d      	b.n	800b4e2 <__multiply+0x82>
 800b5a6:	bf00      	nop
 800b5a8:	0800cec7 	.word	0x0800cec7
 800b5ac:	0800ced8 	.word	0x0800ced8

0800b5b0 <__pow5mult>:
 800b5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b4:	4615      	mov	r5, r2
 800b5b6:	f012 0203 	ands.w	r2, r2, #3
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460f      	mov	r7, r1
 800b5be:	d007      	beq.n	800b5d0 <__pow5mult+0x20>
 800b5c0:	4c25      	ldr	r4, [pc, #148]	; (800b658 <__pow5mult+0xa8>)
 800b5c2:	3a01      	subs	r2, #1
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5ca:	f7ff fe9f 	bl	800b30c <__multadd>
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	10ad      	asrs	r5, r5, #2
 800b5d2:	d03d      	beq.n	800b650 <__pow5mult+0xa0>
 800b5d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5d6:	b97c      	cbnz	r4, 800b5f8 <__pow5mult+0x48>
 800b5d8:	2010      	movs	r0, #16
 800b5da:	f7fe f9cf 	bl	800997c <malloc>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5e2:	b928      	cbnz	r0, 800b5f0 <__pow5mult+0x40>
 800b5e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5e8:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <__pow5mult+0xac>)
 800b5ea:	481d      	ldr	r0, [pc, #116]	; (800b660 <__pow5mult+0xb0>)
 800b5ec:	f000 fb1e 	bl	800bc2c <__assert_func>
 800b5f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5f4:	6004      	str	r4, [r0, #0]
 800b5f6:	60c4      	str	r4, [r0, #12]
 800b5f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b600:	b94c      	cbnz	r4, 800b616 <__pow5mult+0x66>
 800b602:	f240 2171 	movw	r1, #625	; 0x271
 800b606:	4630      	mov	r0, r6
 800b608:	f7ff ff14 	bl	800b434 <__i2b>
 800b60c:	2300      	movs	r3, #0
 800b60e:	4604      	mov	r4, r0
 800b610:	f8c8 0008 	str.w	r0, [r8, #8]
 800b614:	6003      	str	r3, [r0, #0]
 800b616:	f04f 0900 	mov.w	r9, #0
 800b61a:	07eb      	lsls	r3, r5, #31
 800b61c:	d50a      	bpl.n	800b634 <__pow5mult+0x84>
 800b61e:	4639      	mov	r1, r7
 800b620:	4622      	mov	r2, r4
 800b622:	4630      	mov	r0, r6
 800b624:	f7ff ff1c 	bl	800b460 <__multiply>
 800b628:	4680      	mov	r8, r0
 800b62a:	4639      	mov	r1, r7
 800b62c:	4630      	mov	r0, r6
 800b62e:	f7ff fe4b 	bl	800b2c8 <_Bfree>
 800b632:	4647      	mov	r7, r8
 800b634:	106d      	asrs	r5, r5, #1
 800b636:	d00b      	beq.n	800b650 <__pow5mult+0xa0>
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	b938      	cbnz	r0, 800b64c <__pow5mult+0x9c>
 800b63c:	4622      	mov	r2, r4
 800b63e:	4621      	mov	r1, r4
 800b640:	4630      	mov	r0, r6
 800b642:	f7ff ff0d 	bl	800b460 <__multiply>
 800b646:	6020      	str	r0, [r4, #0]
 800b648:	f8c0 9000 	str.w	r9, [r0]
 800b64c:	4604      	mov	r4, r0
 800b64e:	e7e4      	b.n	800b61a <__pow5mult+0x6a>
 800b650:	4638      	mov	r0, r7
 800b652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b656:	bf00      	nop
 800b658:	0800d028 	.word	0x0800d028
 800b65c:	0800ce55 	.word	0x0800ce55
 800b660:	0800ced8 	.word	0x0800ced8

0800b664 <__lshift>:
 800b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	460c      	mov	r4, r1
 800b66a:	4607      	mov	r7, r0
 800b66c:	4691      	mov	r9, r2
 800b66e:	6923      	ldr	r3, [r4, #16]
 800b670:	6849      	ldr	r1, [r1, #4]
 800b672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b67c:	f108 0601 	add.w	r6, r8, #1
 800b680:	42b3      	cmp	r3, r6
 800b682:	db0b      	blt.n	800b69c <__lshift+0x38>
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff fddf 	bl	800b248 <_Balloc>
 800b68a:	4605      	mov	r5, r0
 800b68c:	b948      	cbnz	r0, 800b6a2 <__lshift+0x3e>
 800b68e:	4602      	mov	r2, r0
 800b690:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b694:	4b29      	ldr	r3, [pc, #164]	; (800b73c <__lshift+0xd8>)
 800b696:	482a      	ldr	r0, [pc, #168]	; (800b740 <__lshift+0xdc>)
 800b698:	f000 fac8 	bl	800bc2c <__assert_func>
 800b69c:	3101      	adds	r1, #1
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	e7ee      	b.n	800b680 <__lshift+0x1c>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f100 0114 	add.w	r1, r0, #20
 800b6a8:	f100 0210 	add.w	r2, r0, #16
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	4553      	cmp	r3, sl
 800b6b0:	db37      	blt.n	800b722 <__lshift+0xbe>
 800b6b2:	6920      	ldr	r0, [r4, #16]
 800b6b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6b8:	f104 0314 	add.w	r3, r4, #20
 800b6bc:	f019 091f 	ands.w	r9, r9, #31
 800b6c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6c8:	d02f      	beq.n	800b72a <__lshift+0xc6>
 800b6ca:	468a      	mov	sl, r1
 800b6cc:	f04f 0c00 	mov.w	ip, #0
 800b6d0:	f1c9 0e20 	rsb	lr, r9, #32
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	fa02 f209 	lsl.w	r2, r2, r9
 800b6da:	ea42 020c 	orr.w	r2, r2, ip
 800b6de:	f84a 2b04 	str.w	r2, [sl], #4
 800b6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e6:	4298      	cmp	r0, r3
 800b6e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6ec:	d8f2      	bhi.n	800b6d4 <__lshift+0x70>
 800b6ee:	1b03      	subs	r3, r0, r4
 800b6f0:	3b15      	subs	r3, #21
 800b6f2:	f023 0303 	bic.w	r3, r3, #3
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	f104 0215 	add.w	r2, r4, #21
 800b6fc:	4290      	cmp	r0, r2
 800b6fe:	bf38      	it	cc
 800b700:	2304      	movcc	r3, #4
 800b702:	f841 c003 	str.w	ip, [r1, r3]
 800b706:	f1bc 0f00 	cmp.w	ip, #0
 800b70a:	d001      	beq.n	800b710 <__lshift+0xac>
 800b70c:	f108 0602 	add.w	r6, r8, #2
 800b710:	3e01      	subs	r6, #1
 800b712:	4638      	mov	r0, r7
 800b714:	4621      	mov	r1, r4
 800b716:	612e      	str	r6, [r5, #16]
 800b718:	f7ff fdd6 	bl	800b2c8 <_Bfree>
 800b71c:	4628      	mov	r0, r5
 800b71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b722:	f842 0f04 	str.w	r0, [r2, #4]!
 800b726:	3301      	adds	r3, #1
 800b728:	e7c1      	b.n	800b6ae <__lshift+0x4a>
 800b72a:	3904      	subs	r1, #4
 800b72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b730:	4298      	cmp	r0, r3
 800b732:	f841 2f04 	str.w	r2, [r1, #4]!
 800b736:	d8f9      	bhi.n	800b72c <__lshift+0xc8>
 800b738:	e7ea      	b.n	800b710 <__lshift+0xac>
 800b73a:	bf00      	nop
 800b73c:	0800cec7 	.word	0x0800cec7
 800b740:	0800ced8 	.word	0x0800ced8

0800b744 <__mcmp>:
 800b744:	4603      	mov	r3, r0
 800b746:	690a      	ldr	r2, [r1, #16]
 800b748:	6900      	ldr	r0, [r0, #16]
 800b74a:	b530      	push	{r4, r5, lr}
 800b74c:	1a80      	subs	r0, r0, r2
 800b74e:	d10d      	bne.n	800b76c <__mcmp+0x28>
 800b750:	3314      	adds	r3, #20
 800b752:	3114      	adds	r1, #20
 800b754:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b758:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b75c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b760:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b764:	4295      	cmp	r5, r2
 800b766:	d002      	beq.n	800b76e <__mcmp+0x2a>
 800b768:	d304      	bcc.n	800b774 <__mcmp+0x30>
 800b76a:	2001      	movs	r0, #1
 800b76c:	bd30      	pop	{r4, r5, pc}
 800b76e:	42a3      	cmp	r3, r4
 800b770:	d3f4      	bcc.n	800b75c <__mcmp+0x18>
 800b772:	e7fb      	b.n	800b76c <__mcmp+0x28>
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e7f8      	b.n	800b76c <__mcmp+0x28>
	...

0800b77c <__mdiff>:
 800b77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	460d      	mov	r5, r1
 800b782:	4607      	mov	r7, r0
 800b784:	4611      	mov	r1, r2
 800b786:	4628      	mov	r0, r5
 800b788:	4614      	mov	r4, r2
 800b78a:	f7ff ffdb 	bl	800b744 <__mcmp>
 800b78e:	1e06      	subs	r6, r0, #0
 800b790:	d111      	bne.n	800b7b6 <__mdiff+0x3a>
 800b792:	4631      	mov	r1, r6
 800b794:	4638      	mov	r0, r7
 800b796:	f7ff fd57 	bl	800b248 <_Balloc>
 800b79a:	4602      	mov	r2, r0
 800b79c:	b928      	cbnz	r0, 800b7aa <__mdiff+0x2e>
 800b79e:	f240 2132 	movw	r1, #562	; 0x232
 800b7a2:	4b3a      	ldr	r3, [pc, #232]	; (800b88c <__mdiff+0x110>)
 800b7a4:	483a      	ldr	r0, [pc, #232]	; (800b890 <__mdiff+0x114>)
 800b7a6:	f000 fa41 	bl	800bc2c <__assert_func>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b6:	bfa4      	itt	ge
 800b7b8:	4623      	movge	r3, r4
 800b7ba:	462c      	movge	r4, r5
 800b7bc:	4638      	mov	r0, r7
 800b7be:	6861      	ldr	r1, [r4, #4]
 800b7c0:	bfa6      	itte	ge
 800b7c2:	461d      	movge	r5, r3
 800b7c4:	2600      	movge	r6, #0
 800b7c6:	2601      	movlt	r6, #1
 800b7c8:	f7ff fd3e 	bl	800b248 <_Balloc>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	b918      	cbnz	r0, 800b7d8 <__mdiff+0x5c>
 800b7d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7d4:	4b2d      	ldr	r3, [pc, #180]	; (800b88c <__mdiff+0x110>)
 800b7d6:	e7e5      	b.n	800b7a4 <__mdiff+0x28>
 800b7d8:	f102 0814 	add.w	r8, r2, #20
 800b7dc:	46c2      	mov	sl, r8
 800b7de:	f04f 0c00 	mov.w	ip, #0
 800b7e2:	6927      	ldr	r7, [r4, #16]
 800b7e4:	60c6      	str	r6, [r0, #12]
 800b7e6:	692e      	ldr	r6, [r5, #16]
 800b7e8:	f104 0014 	add.w	r0, r4, #20
 800b7ec:	f105 0914 	add.w	r9, r5, #20
 800b7f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b7f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7f8:	3410      	adds	r4, #16
 800b7fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b7fe:	f859 3b04 	ldr.w	r3, [r9], #4
 800b802:	fa1f f18b 	uxth.w	r1, fp
 800b806:	448c      	add	ip, r1
 800b808:	b299      	uxth	r1, r3
 800b80a:	0c1b      	lsrs	r3, r3, #16
 800b80c:	ebac 0101 	sub.w	r1, ip, r1
 800b810:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b814:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b818:	b289      	uxth	r1, r1
 800b81a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b81e:	454e      	cmp	r6, r9
 800b820:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b824:	f84a 3b04 	str.w	r3, [sl], #4
 800b828:	d8e7      	bhi.n	800b7fa <__mdiff+0x7e>
 800b82a:	1b73      	subs	r3, r6, r5
 800b82c:	3b15      	subs	r3, #21
 800b82e:	f023 0303 	bic.w	r3, r3, #3
 800b832:	3515      	adds	r5, #21
 800b834:	3304      	adds	r3, #4
 800b836:	42ae      	cmp	r6, r5
 800b838:	bf38      	it	cc
 800b83a:	2304      	movcc	r3, #4
 800b83c:	4418      	add	r0, r3
 800b83e:	4443      	add	r3, r8
 800b840:	461e      	mov	r6, r3
 800b842:	4605      	mov	r5, r0
 800b844:	4575      	cmp	r5, lr
 800b846:	d30e      	bcc.n	800b866 <__mdiff+0xea>
 800b848:	f10e 0103 	add.w	r1, lr, #3
 800b84c:	1a09      	subs	r1, r1, r0
 800b84e:	f021 0103 	bic.w	r1, r1, #3
 800b852:	3803      	subs	r0, #3
 800b854:	4586      	cmp	lr, r0
 800b856:	bf38      	it	cc
 800b858:	2100      	movcc	r1, #0
 800b85a:	4419      	add	r1, r3
 800b85c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b860:	b18b      	cbz	r3, 800b886 <__mdiff+0x10a>
 800b862:	6117      	str	r7, [r2, #16]
 800b864:	e7a4      	b.n	800b7b0 <__mdiff+0x34>
 800b866:	f855 8b04 	ldr.w	r8, [r5], #4
 800b86a:	fa1f f188 	uxth.w	r1, r8
 800b86e:	4461      	add	r1, ip
 800b870:	140c      	asrs	r4, r1, #16
 800b872:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b876:	b289      	uxth	r1, r1
 800b878:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b87c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b880:	f846 1b04 	str.w	r1, [r6], #4
 800b884:	e7de      	b.n	800b844 <__mdiff+0xc8>
 800b886:	3f01      	subs	r7, #1
 800b888:	e7e8      	b.n	800b85c <__mdiff+0xe0>
 800b88a:	bf00      	nop
 800b88c:	0800cec7 	.word	0x0800cec7
 800b890:	0800ced8 	.word	0x0800ced8

0800b894 <__d2b>:
 800b894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b898:	2101      	movs	r1, #1
 800b89a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b89e:	4690      	mov	r8, r2
 800b8a0:	461d      	mov	r5, r3
 800b8a2:	f7ff fcd1 	bl	800b248 <_Balloc>
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	b930      	cbnz	r0, 800b8b8 <__d2b+0x24>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	f240 310a 	movw	r1, #778	; 0x30a
 800b8b0:	4b24      	ldr	r3, [pc, #144]	; (800b944 <__d2b+0xb0>)
 800b8b2:	4825      	ldr	r0, [pc, #148]	; (800b948 <__d2b+0xb4>)
 800b8b4:	f000 f9ba 	bl	800bc2c <__assert_func>
 800b8b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b8bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b8c0:	bb2d      	cbnz	r5, 800b90e <__d2b+0x7a>
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	f1b8 0300 	subs.w	r3, r8, #0
 800b8c8:	d026      	beq.n	800b918 <__d2b+0x84>
 800b8ca:	4668      	mov	r0, sp
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	f7ff fd83 	bl	800b3d8 <__lo0bits>
 800b8d2:	9900      	ldr	r1, [sp, #0]
 800b8d4:	b1f0      	cbz	r0, 800b914 <__d2b+0x80>
 800b8d6:	9a01      	ldr	r2, [sp, #4]
 800b8d8:	f1c0 0320 	rsb	r3, r0, #32
 800b8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	40c2      	lsrs	r2, r0
 800b8e4:	6163      	str	r3, [r4, #20]
 800b8e6:	9201      	str	r2, [sp, #4]
 800b8e8:	9b01      	ldr	r3, [sp, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	bf14      	ite	ne
 800b8ee:	2102      	movne	r1, #2
 800b8f0:	2101      	moveq	r1, #1
 800b8f2:	61a3      	str	r3, [r4, #24]
 800b8f4:	6121      	str	r1, [r4, #16]
 800b8f6:	b1c5      	cbz	r5, 800b92a <__d2b+0x96>
 800b8f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8fc:	4405      	add	r5, r0
 800b8fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b902:	603d      	str	r5, [r7, #0]
 800b904:	6030      	str	r0, [r6, #0]
 800b906:	4620      	mov	r0, r4
 800b908:	b002      	add	sp, #8
 800b90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b912:	e7d6      	b.n	800b8c2 <__d2b+0x2e>
 800b914:	6161      	str	r1, [r4, #20]
 800b916:	e7e7      	b.n	800b8e8 <__d2b+0x54>
 800b918:	a801      	add	r0, sp, #4
 800b91a:	f7ff fd5d 	bl	800b3d8 <__lo0bits>
 800b91e:	2101      	movs	r1, #1
 800b920:	9b01      	ldr	r3, [sp, #4]
 800b922:	6121      	str	r1, [r4, #16]
 800b924:	6163      	str	r3, [r4, #20]
 800b926:	3020      	adds	r0, #32
 800b928:	e7e5      	b.n	800b8f6 <__d2b+0x62>
 800b92a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b92e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b932:	6038      	str	r0, [r7, #0]
 800b934:	6918      	ldr	r0, [r3, #16]
 800b936:	f7ff fd2f 	bl	800b398 <__hi0bits>
 800b93a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b93e:	6031      	str	r1, [r6, #0]
 800b940:	e7e1      	b.n	800b906 <__d2b+0x72>
 800b942:	bf00      	nop
 800b944:	0800cec7 	.word	0x0800cec7
 800b948:	0800ced8 	.word	0x0800ced8

0800b94c <_calloc_r>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	fba1 5402 	umull	r5, r4, r1, r2
 800b952:	b934      	cbnz	r4, 800b962 <_calloc_r+0x16>
 800b954:	4629      	mov	r1, r5
 800b956:	f7fe f897 	bl	8009a88 <_malloc_r>
 800b95a:	4606      	mov	r6, r0
 800b95c:	b928      	cbnz	r0, 800b96a <_calloc_r+0x1e>
 800b95e:	4630      	mov	r0, r6
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	220c      	movs	r2, #12
 800b964:	2600      	movs	r6, #0
 800b966:	6002      	str	r2, [r0, #0]
 800b968:	e7f9      	b.n	800b95e <_calloc_r+0x12>
 800b96a:	462a      	mov	r2, r5
 800b96c:	4621      	mov	r1, r4
 800b96e:	f7fe f81b 	bl	80099a8 <memset>
 800b972:	e7f4      	b.n	800b95e <_calloc_r+0x12>

0800b974 <__ssputs_r>:
 800b974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b978:	688e      	ldr	r6, [r1, #8]
 800b97a:	4682      	mov	sl, r0
 800b97c:	429e      	cmp	r6, r3
 800b97e:	460c      	mov	r4, r1
 800b980:	4690      	mov	r8, r2
 800b982:	461f      	mov	r7, r3
 800b984:	d838      	bhi.n	800b9f8 <__ssputs_r+0x84>
 800b986:	898a      	ldrh	r2, [r1, #12]
 800b988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b98c:	d032      	beq.n	800b9f4 <__ssputs_r+0x80>
 800b98e:	6825      	ldr	r5, [r4, #0]
 800b990:	6909      	ldr	r1, [r1, #16]
 800b992:	3301      	adds	r3, #1
 800b994:	eba5 0901 	sub.w	r9, r5, r1
 800b998:	6965      	ldr	r5, [r4, #20]
 800b99a:	444b      	add	r3, r9
 800b99c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9a4:	106d      	asrs	r5, r5, #1
 800b9a6:	429d      	cmp	r5, r3
 800b9a8:	bf38      	it	cc
 800b9aa:	461d      	movcc	r5, r3
 800b9ac:	0553      	lsls	r3, r2, #21
 800b9ae:	d531      	bpl.n	800ba14 <__ssputs_r+0xa0>
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7fe f869 	bl	8009a88 <_malloc_r>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	b950      	cbnz	r0, 800b9d0 <__ssputs_r+0x5c>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	f8ca 3000 	str.w	r3, [sl]
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ca:	81a3      	strh	r3, [r4, #12]
 800b9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d0:	464a      	mov	r2, r9
 800b9d2:	6921      	ldr	r1, [r4, #16]
 800b9d4:	f7fd ffda 	bl	800998c <memcpy>
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	6126      	str	r6, [r4, #16]
 800b9e6:	444e      	add	r6, r9
 800b9e8:	6026      	str	r6, [r4, #0]
 800b9ea:	463e      	mov	r6, r7
 800b9ec:	6165      	str	r5, [r4, #20]
 800b9ee:	eba5 0509 	sub.w	r5, r5, r9
 800b9f2:	60a5      	str	r5, [r4, #8]
 800b9f4:	42be      	cmp	r6, r7
 800b9f6:	d900      	bls.n	800b9fa <__ssputs_r+0x86>
 800b9f8:	463e      	mov	r6, r7
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	4641      	mov	r1, r8
 800b9fe:	6820      	ldr	r0, [r4, #0]
 800ba00:	f000 f959 	bl	800bcb6 <memmove>
 800ba04:	68a3      	ldr	r3, [r4, #8]
 800ba06:	2000      	movs	r0, #0
 800ba08:	1b9b      	subs	r3, r3, r6
 800ba0a:	60a3      	str	r3, [r4, #8]
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	4433      	add	r3, r6
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	e7db      	b.n	800b9cc <__ssputs_r+0x58>
 800ba14:	462a      	mov	r2, r5
 800ba16:	f000 f968 	bl	800bcea <_realloc_r>
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d1e1      	bne.n	800b9e4 <__ssputs_r+0x70>
 800ba20:	4650      	mov	r0, sl
 800ba22:	6921      	ldr	r1, [r4, #16]
 800ba24:	f7fd ffc8 	bl	80099b8 <_free_r>
 800ba28:	e7c7      	b.n	800b9ba <__ssputs_r+0x46>
	...

0800ba2c <_svfiprintf_r>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	4698      	mov	r8, r3
 800ba32:	898b      	ldrh	r3, [r1, #12]
 800ba34:	4607      	mov	r7, r0
 800ba36:	061b      	lsls	r3, r3, #24
 800ba38:	460d      	mov	r5, r1
 800ba3a:	4614      	mov	r4, r2
 800ba3c:	b09d      	sub	sp, #116	; 0x74
 800ba3e:	d50e      	bpl.n	800ba5e <_svfiprintf_r+0x32>
 800ba40:	690b      	ldr	r3, [r1, #16]
 800ba42:	b963      	cbnz	r3, 800ba5e <_svfiprintf_r+0x32>
 800ba44:	2140      	movs	r1, #64	; 0x40
 800ba46:	f7fe f81f 	bl	8009a88 <_malloc_r>
 800ba4a:	6028      	str	r0, [r5, #0]
 800ba4c:	6128      	str	r0, [r5, #16]
 800ba4e:	b920      	cbnz	r0, 800ba5a <_svfiprintf_r+0x2e>
 800ba50:	230c      	movs	r3, #12
 800ba52:	603b      	str	r3, [r7, #0]
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295
 800ba58:	e0d1      	b.n	800bbfe <_svfiprintf_r+0x1d2>
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	616b      	str	r3, [r5, #20]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9309      	str	r3, [sp, #36]	; 0x24
 800ba62:	2320      	movs	r3, #32
 800ba64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba68:	2330      	movs	r3, #48	; 0x30
 800ba6a:	f04f 0901 	mov.w	r9, #1
 800ba6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc18 <_svfiprintf_r+0x1ec>
 800ba76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba7a:	4623      	mov	r3, r4
 800ba7c:	469a      	mov	sl, r3
 800ba7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba82:	b10a      	cbz	r2, 800ba88 <_svfiprintf_r+0x5c>
 800ba84:	2a25      	cmp	r2, #37	; 0x25
 800ba86:	d1f9      	bne.n	800ba7c <_svfiprintf_r+0x50>
 800ba88:	ebba 0b04 	subs.w	fp, sl, r4
 800ba8c:	d00b      	beq.n	800baa6 <_svfiprintf_r+0x7a>
 800ba8e:	465b      	mov	r3, fp
 800ba90:	4622      	mov	r2, r4
 800ba92:	4629      	mov	r1, r5
 800ba94:	4638      	mov	r0, r7
 800ba96:	f7ff ff6d 	bl	800b974 <__ssputs_r>
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	f000 80aa 	beq.w	800bbf4 <_svfiprintf_r+0x1c8>
 800baa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa2:	445a      	add	r2, fp
 800baa4:	9209      	str	r2, [sp, #36]	; 0x24
 800baa6:	f89a 3000 	ldrb.w	r3, [sl]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 80a2 	beq.w	800bbf4 <_svfiprintf_r+0x1c8>
 800bab0:	2300      	movs	r3, #0
 800bab2:	f04f 32ff 	mov.w	r2, #4294967295
 800bab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baba:	f10a 0a01 	add.w	sl, sl, #1
 800babe:	9304      	str	r3, [sp, #16]
 800bac0:	9307      	str	r3, [sp, #28]
 800bac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bac6:	931a      	str	r3, [sp, #104]	; 0x68
 800bac8:	4654      	mov	r4, sl
 800baca:	2205      	movs	r2, #5
 800bacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad0:	4851      	ldr	r0, [pc, #324]	; (800bc18 <_svfiprintf_r+0x1ec>)
 800bad2:	f7ff fb9f 	bl	800b214 <memchr>
 800bad6:	9a04      	ldr	r2, [sp, #16]
 800bad8:	b9d8      	cbnz	r0, 800bb12 <_svfiprintf_r+0xe6>
 800bada:	06d0      	lsls	r0, r2, #27
 800badc:	bf44      	itt	mi
 800bade:	2320      	movmi	r3, #32
 800bae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae4:	0711      	lsls	r1, r2, #28
 800bae6:	bf44      	itt	mi
 800bae8:	232b      	movmi	r3, #43	; 0x2b
 800baea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baee:	f89a 3000 	ldrb.w	r3, [sl]
 800baf2:	2b2a      	cmp	r3, #42	; 0x2a
 800baf4:	d015      	beq.n	800bb22 <_svfiprintf_r+0xf6>
 800baf6:	4654      	mov	r4, sl
 800baf8:	2000      	movs	r0, #0
 800bafa:	f04f 0c0a 	mov.w	ip, #10
 800bafe:	9a07      	ldr	r2, [sp, #28]
 800bb00:	4621      	mov	r1, r4
 800bb02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb06:	3b30      	subs	r3, #48	; 0x30
 800bb08:	2b09      	cmp	r3, #9
 800bb0a:	d94e      	bls.n	800bbaa <_svfiprintf_r+0x17e>
 800bb0c:	b1b0      	cbz	r0, 800bb3c <_svfiprintf_r+0x110>
 800bb0e:	9207      	str	r2, [sp, #28]
 800bb10:	e014      	b.n	800bb3c <_svfiprintf_r+0x110>
 800bb12:	eba0 0308 	sub.w	r3, r0, r8
 800bb16:	fa09 f303 	lsl.w	r3, r9, r3
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	46a2      	mov	sl, r4
 800bb1e:	9304      	str	r3, [sp, #16]
 800bb20:	e7d2      	b.n	800bac8 <_svfiprintf_r+0x9c>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	1d19      	adds	r1, r3, #4
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	9103      	str	r1, [sp, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bfbb      	ittet	lt
 800bb2e:	425b      	neglt	r3, r3
 800bb30:	f042 0202 	orrlt.w	r2, r2, #2
 800bb34:	9307      	strge	r3, [sp, #28]
 800bb36:	9307      	strlt	r3, [sp, #28]
 800bb38:	bfb8      	it	lt
 800bb3a:	9204      	strlt	r2, [sp, #16]
 800bb3c:	7823      	ldrb	r3, [r4, #0]
 800bb3e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb40:	d10c      	bne.n	800bb5c <_svfiprintf_r+0x130>
 800bb42:	7863      	ldrb	r3, [r4, #1]
 800bb44:	2b2a      	cmp	r3, #42	; 0x2a
 800bb46:	d135      	bne.n	800bbb4 <_svfiprintf_r+0x188>
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	3402      	adds	r4, #2
 800bb4c:	1d1a      	adds	r2, r3, #4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	9203      	str	r2, [sp, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bfb8      	it	lt
 800bb56:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bc1c <_svfiprintf_r+0x1f0>
 800bb60:	2203      	movs	r2, #3
 800bb62:	4650      	mov	r0, sl
 800bb64:	7821      	ldrb	r1, [r4, #0]
 800bb66:	f7ff fb55 	bl	800b214 <memchr>
 800bb6a:	b140      	cbz	r0, 800bb7e <_svfiprintf_r+0x152>
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	eba0 000a 	sub.w	r0, r0, sl
 800bb72:	fa03 f000 	lsl.w	r0, r3, r0
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	3401      	adds	r4, #1
 800bb7a:	4303      	orrs	r3, r0
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	2206      	movs	r2, #6
 800bb84:	4826      	ldr	r0, [pc, #152]	; (800bc20 <_svfiprintf_r+0x1f4>)
 800bb86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb8a:	f7ff fb43 	bl	800b214 <memchr>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d038      	beq.n	800bc04 <_svfiprintf_r+0x1d8>
 800bb92:	4b24      	ldr	r3, [pc, #144]	; (800bc24 <_svfiprintf_r+0x1f8>)
 800bb94:	bb1b      	cbnz	r3, 800bbde <_svfiprintf_r+0x1b2>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	3307      	adds	r3, #7
 800bb9a:	f023 0307 	bic.w	r3, r3, #7
 800bb9e:	3308      	adds	r3, #8
 800bba0:	9303      	str	r3, [sp, #12]
 800bba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba4:	4433      	add	r3, r6
 800bba6:	9309      	str	r3, [sp, #36]	; 0x24
 800bba8:	e767      	b.n	800ba7a <_svfiprintf_r+0x4e>
 800bbaa:	460c      	mov	r4, r1
 800bbac:	2001      	movs	r0, #1
 800bbae:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb2:	e7a5      	b.n	800bb00 <_svfiprintf_r+0xd4>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f04f 0c0a 	mov.w	ip, #10
 800bbba:	4619      	mov	r1, r3
 800bbbc:	3401      	adds	r4, #1
 800bbbe:	9305      	str	r3, [sp, #20]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc6:	3a30      	subs	r2, #48	; 0x30
 800bbc8:	2a09      	cmp	r2, #9
 800bbca:	d903      	bls.n	800bbd4 <_svfiprintf_r+0x1a8>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0c5      	beq.n	800bb5c <_svfiprintf_r+0x130>
 800bbd0:	9105      	str	r1, [sp, #20]
 800bbd2:	e7c3      	b.n	800bb5c <_svfiprintf_r+0x130>
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbdc:	e7f0      	b.n	800bbc0 <_svfiprintf_r+0x194>
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	4b10      	ldr	r3, [pc, #64]	; (800bc28 <_svfiprintf_r+0x1fc>)
 800bbe8:	a904      	add	r1, sp, #16
 800bbea:	f7fe f85f 	bl	8009cac <_printf_float>
 800bbee:	1c42      	adds	r2, r0, #1
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	d1d6      	bne.n	800bba2 <_svfiprintf_r+0x176>
 800bbf4:	89ab      	ldrh	r3, [r5, #12]
 800bbf6:	065b      	lsls	r3, r3, #25
 800bbf8:	f53f af2c 	bmi.w	800ba54 <_svfiprintf_r+0x28>
 800bbfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbfe:	b01d      	add	sp, #116	; 0x74
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	ab03      	add	r3, sp, #12
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	462a      	mov	r2, r5
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <_svfiprintf_r+0x1fc>)
 800bc0e:	a904      	add	r1, sp, #16
 800bc10:	f7fe fae8 	bl	800a1e4 <_printf_i>
 800bc14:	e7eb      	b.n	800bbee <_svfiprintf_r+0x1c2>
 800bc16:	bf00      	nop
 800bc18:	0800d034 	.word	0x0800d034
 800bc1c:	0800d03a 	.word	0x0800d03a
 800bc20:	0800d03e 	.word	0x0800d03e
 800bc24:	08009cad 	.word	0x08009cad
 800bc28:	0800b975 	.word	0x0800b975

0800bc2c <__assert_func>:
 800bc2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc2e:	4614      	mov	r4, r2
 800bc30:	461a      	mov	r2, r3
 800bc32:	4b09      	ldr	r3, [pc, #36]	; (800bc58 <__assert_func+0x2c>)
 800bc34:	4605      	mov	r5, r0
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68d8      	ldr	r0, [r3, #12]
 800bc3a:	b14c      	cbz	r4, 800bc50 <__assert_func+0x24>
 800bc3c:	4b07      	ldr	r3, [pc, #28]	; (800bc5c <__assert_func+0x30>)
 800bc3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc42:	9100      	str	r1, [sp, #0]
 800bc44:	462b      	mov	r3, r5
 800bc46:	4906      	ldr	r1, [pc, #24]	; (800bc60 <__assert_func+0x34>)
 800bc48:	f000 f80e 	bl	800bc68 <fiprintf>
 800bc4c:	f7fd fe64 	bl	8009918 <abort>
 800bc50:	4b04      	ldr	r3, [pc, #16]	; (800bc64 <__assert_func+0x38>)
 800bc52:	461c      	mov	r4, r3
 800bc54:	e7f3      	b.n	800bc3e <__assert_func+0x12>
 800bc56:	bf00      	nop
 800bc58:	2000000c 	.word	0x2000000c
 800bc5c:	0800d045 	.word	0x0800d045
 800bc60:	0800d052 	.word	0x0800d052
 800bc64:	0800d080 	.word	0x0800d080

0800bc68 <fiprintf>:
 800bc68:	b40e      	push	{r1, r2, r3}
 800bc6a:	b503      	push	{r0, r1, lr}
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	ab03      	add	r3, sp, #12
 800bc70:	4805      	ldr	r0, [pc, #20]	; (800bc88 <fiprintf+0x20>)
 800bc72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc76:	6800      	ldr	r0, [r0, #0]
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	f000 f88d 	bl	800bd98 <_vfiprintf_r>
 800bc7e:	b002      	add	sp, #8
 800bc80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc84:	b003      	add	sp, #12
 800bc86:	4770      	bx	lr
 800bc88:	2000000c 	.word	0x2000000c

0800bc8c <__retarget_lock_init_recursive>:
 800bc8c:	4770      	bx	lr

0800bc8e <__retarget_lock_acquire_recursive>:
 800bc8e:	4770      	bx	lr

0800bc90 <__retarget_lock_release_recursive>:
 800bc90:	4770      	bx	lr

0800bc92 <__ascii_mbtowc>:
 800bc92:	b082      	sub	sp, #8
 800bc94:	b901      	cbnz	r1, 800bc98 <__ascii_mbtowc+0x6>
 800bc96:	a901      	add	r1, sp, #4
 800bc98:	b142      	cbz	r2, 800bcac <__ascii_mbtowc+0x1a>
 800bc9a:	b14b      	cbz	r3, 800bcb0 <__ascii_mbtowc+0x1e>
 800bc9c:	7813      	ldrb	r3, [r2, #0]
 800bc9e:	600b      	str	r3, [r1, #0]
 800bca0:	7812      	ldrb	r2, [r2, #0]
 800bca2:	1e10      	subs	r0, r2, #0
 800bca4:	bf18      	it	ne
 800bca6:	2001      	movne	r0, #1
 800bca8:	b002      	add	sp, #8
 800bcaa:	4770      	bx	lr
 800bcac:	4610      	mov	r0, r2
 800bcae:	e7fb      	b.n	800bca8 <__ascii_mbtowc+0x16>
 800bcb0:	f06f 0001 	mvn.w	r0, #1
 800bcb4:	e7f8      	b.n	800bca8 <__ascii_mbtowc+0x16>

0800bcb6 <memmove>:
 800bcb6:	4288      	cmp	r0, r1
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	eb01 0402 	add.w	r4, r1, r2
 800bcbe:	d902      	bls.n	800bcc6 <memmove+0x10>
 800bcc0:	4284      	cmp	r4, r0
 800bcc2:	4623      	mov	r3, r4
 800bcc4:	d807      	bhi.n	800bcd6 <memmove+0x20>
 800bcc6:	1e43      	subs	r3, r0, #1
 800bcc8:	42a1      	cmp	r1, r4
 800bcca:	d008      	beq.n	800bcde <memmove+0x28>
 800bccc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcd4:	e7f8      	b.n	800bcc8 <memmove+0x12>
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	4402      	add	r2, r0
 800bcda:	428a      	cmp	r2, r1
 800bcdc:	d100      	bne.n	800bce0 <memmove+0x2a>
 800bcde:	bd10      	pop	{r4, pc}
 800bce0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bce4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bce8:	e7f7      	b.n	800bcda <memmove+0x24>

0800bcea <_realloc_r>:
 800bcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4614      	mov	r4, r2
 800bcf2:	460e      	mov	r6, r1
 800bcf4:	b921      	cbnz	r1, 800bd00 <_realloc_r+0x16>
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfc:	f7fd bec4 	b.w	8009a88 <_malloc_r>
 800bd00:	b92a      	cbnz	r2, 800bd0e <_realloc_r+0x24>
 800bd02:	f7fd fe59 	bl	80099b8 <_free_r>
 800bd06:	4625      	mov	r5, r4
 800bd08:	4628      	mov	r0, r5
 800bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0e:	f000 fc59 	bl	800c5c4 <_malloc_usable_size_r>
 800bd12:	4284      	cmp	r4, r0
 800bd14:	4607      	mov	r7, r0
 800bd16:	d802      	bhi.n	800bd1e <_realloc_r+0x34>
 800bd18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd1c:	d812      	bhi.n	800bd44 <_realloc_r+0x5a>
 800bd1e:	4621      	mov	r1, r4
 800bd20:	4640      	mov	r0, r8
 800bd22:	f7fd feb1 	bl	8009a88 <_malloc_r>
 800bd26:	4605      	mov	r5, r0
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0ed      	beq.n	800bd08 <_realloc_r+0x1e>
 800bd2c:	42bc      	cmp	r4, r7
 800bd2e:	4622      	mov	r2, r4
 800bd30:	4631      	mov	r1, r6
 800bd32:	bf28      	it	cs
 800bd34:	463a      	movcs	r2, r7
 800bd36:	f7fd fe29 	bl	800998c <memcpy>
 800bd3a:	4631      	mov	r1, r6
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	f7fd fe3b 	bl	80099b8 <_free_r>
 800bd42:	e7e1      	b.n	800bd08 <_realloc_r+0x1e>
 800bd44:	4635      	mov	r5, r6
 800bd46:	e7df      	b.n	800bd08 <_realloc_r+0x1e>

0800bd48 <__sfputc_r>:
 800bd48:	6893      	ldr	r3, [r2, #8]
 800bd4a:	b410      	push	{r4}
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	6093      	str	r3, [r2, #8]
 800bd52:	da07      	bge.n	800bd64 <__sfputc_r+0x1c>
 800bd54:	6994      	ldr	r4, [r2, #24]
 800bd56:	42a3      	cmp	r3, r4
 800bd58:	db01      	blt.n	800bd5e <__sfputc_r+0x16>
 800bd5a:	290a      	cmp	r1, #10
 800bd5c:	d102      	bne.n	800bd64 <__sfputc_r+0x1c>
 800bd5e:	bc10      	pop	{r4}
 800bd60:	f000 b94a 	b.w	800bff8 <__swbuf_r>
 800bd64:	6813      	ldr	r3, [r2, #0]
 800bd66:	1c58      	adds	r0, r3, #1
 800bd68:	6010      	str	r0, [r2, #0]
 800bd6a:	7019      	strb	r1, [r3, #0]
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	bc10      	pop	{r4}
 800bd70:	4770      	bx	lr

0800bd72 <__sfputs_r>:
 800bd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd74:	4606      	mov	r6, r0
 800bd76:	460f      	mov	r7, r1
 800bd78:	4614      	mov	r4, r2
 800bd7a:	18d5      	adds	r5, r2, r3
 800bd7c:	42ac      	cmp	r4, r5
 800bd7e:	d101      	bne.n	800bd84 <__sfputs_r+0x12>
 800bd80:	2000      	movs	r0, #0
 800bd82:	e007      	b.n	800bd94 <__sfputs_r+0x22>
 800bd84:	463a      	mov	r2, r7
 800bd86:	4630      	mov	r0, r6
 800bd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8c:	f7ff ffdc 	bl	800bd48 <__sfputc_r>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d1f3      	bne.n	800bd7c <__sfputs_r+0xa>
 800bd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd98 <_vfiprintf_r>:
 800bd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9c:	460d      	mov	r5, r1
 800bd9e:	4614      	mov	r4, r2
 800bda0:	4698      	mov	r8, r3
 800bda2:	4606      	mov	r6, r0
 800bda4:	b09d      	sub	sp, #116	; 0x74
 800bda6:	b118      	cbz	r0, 800bdb0 <_vfiprintf_r+0x18>
 800bda8:	6983      	ldr	r3, [r0, #24]
 800bdaa:	b90b      	cbnz	r3, 800bdb0 <_vfiprintf_r+0x18>
 800bdac:	f000 fb08 	bl	800c3c0 <__sinit>
 800bdb0:	4b89      	ldr	r3, [pc, #548]	; (800bfd8 <_vfiprintf_r+0x240>)
 800bdb2:	429d      	cmp	r5, r3
 800bdb4:	d11b      	bne.n	800bdee <_vfiprintf_r+0x56>
 800bdb6:	6875      	ldr	r5, [r6, #4]
 800bdb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdba:	07d9      	lsls	r1, r3, #31
 800bdbc:	d405      	bmi.n	800bdca <_vfiprintf_r+0x32>
 800bdbe:	89ab      	ldrh	r3, [r5, #12]
 800bdc0:	059a      	lsls	r2, r3, #22
 800bdc2:	d402      	bmi.n	800bdca <_vfiprintf_r+0x32>
 800bdc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdc6:	f7ff ff62 	bl	800bc8e <__retarget_lock_acquire_recursive>
 800bdca:	89ab      	ldrh	r3, [r5, #12]
 800bdcc:	071b      	lsls	r3, r3, #28
 800bdce:	d501      	bpl.n	800bdd4 <_vfiprintf_r+0x3c>
 800bdd0:	692b      	ldr	r3, [r5, #16]
 800bdd2:	b9eb      	cbnz	r3, 800be10 <_vfiprintf_r+0x78>
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f000 f96e 	bl	800c0b8 <__swsetup_r>
 800bddc:	b1c0      	cbz	r0, 800be10 <_vfiprintf_r+0x78>
 800bdde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bde0:	07dc      	lsls	r4, r3, #31
 800bde2:	d50e      	bpl.n	800be02 <_vfiprintf_r+0x6a>
 800bde4:	f04f 30ff 	mov.w	r0, #4294967295
 800bde8:	b01d      	add	sp, #116	; 0x74
 800bdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdee:	4b7b      	ldr	r3, [pc, #492]	; (800bfdc <_vfiprintf_r+0x244>)
 800bdf0:	429d      	cmp	r5, r3
 800bdf2:	d101      	bne.n	800bdf8 <_vfiprintf_r+0x60>
 800bdf4:	68b5      	ldr	r5, [r6, #8]
 800bdf6:	e7df      	b.n	800bdb8 <_vfiprintf_r+0x20>
 800bdf8:	4b79      	ldr	r3, [pc, #484]	; (800bfe0 <_vfiprintf_r+0x248>)
 800bdfa:	429d      	cmp	r5, r3
 800bdfc:	bf08      	it	eq
 800bdfe:	68f5      	ldreq	r5, [r6, #12]
 800be00:	e7da      	b.n	800bdb8 <_vfiprintf_r+0x20>
 800be02:	89ab      	ldrh	r3, [r5, #12]
 800be04:	0598      	lsls	r0, r3, #22
 800be06:	d4ed      	bmi.n	800bde4 <_vfiprintf_r+0x4c>
 800be08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be0a:	f7ff ff41 	bl	800bc90 <__retarget_lock_release_recursive>
 800be0e:	e7e9      	b.n	800bde4 <_vfiprintf_r+0x4c>
 800be10:	2300      	movs	r3, #0
 800be12:	9309      	str	r3, [sp, #36]	; 0x24
 800be14:	2320      	movs	r3, #32
 800be16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be1a:	2330      	movs	r3, #48	; 0x30
 800be1c:	f04f 0901 	mov.w	r9, #1
 800be20:	f8cd 800c 	str.w	r8, [sp, #12]
 800be24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bfe4 <_vfiprintf_r+0x24c>
 800be28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be2c:	4623      	mov	r3, r4
 800be2e:	469a      	mov	sl, r3
 800be30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be34:	b10a      	cbz	r2, 800be3a <_vfiprintf_r+0xa2>
 800be36:	2a25      	cmp	r2, #37	; 0x25
 800be38:	d1f9      	bne.n	800be2e <_vfiprintf_r+0x96>
 800be3a:	ebba 0b04 	subs.w	fp, sl, r4
 800be3e:	d00b      	beq.n	800be58 <_vfiprintf_r+0xc0>
 800be40:	465b      	mov	r3, fp
 800be42:	4622      	mov	r2, r4
 800be44:	4629      	mov	r1, r5
 800be46:	4630      	mov	r0, r6
 800be48:	f7ff ff93 	bl	800bd72 <__sfputs_r>
 800be4c:	3001      	adds	r0, #1
 800be4e:	f000 80aa 	beq.w	800bfa6 <_vfiprintf_r+0x20e>
 800be52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be54:	445a      	add	r2, fp
 800be56:	9209      	str	r2, [sp, #36]	; 0x24
 800be58:	f89a 3000 	ldrb.w	r3, [sl]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 80a2 	beq.w	800bfa6 <_vfiprintf_r+0x20e>
 800be62:	2300      	movs	r3, #0
 800be64:	f04f 32ff 	mov.w	r2, #4294967295
 800be68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be6c:	f10a 0a01 	add.w	sl, sl, #1
 800be70:	9304      	str	r3, [sp, #16]
 800be72:	9307      	str	r3, [sp, #28]
 800be74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be78:	931a      	str	r3, [sp, #104]	; 0x68
 800be7a:	4654      	mov	r4, sl
 800be7c:	2205      	movs	r2, #5
 800be7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be82:	4858      	ldr	r0, [pc, #352]	; (800bfe4 <_vfiprintf_r+0x24c>)
 800be84:	f7ff f9c6 	bl	800b214 <memchr>
 800be88:	9a04      	ldr	r2, [sp, #16]
 800be8a:	b9d8      	cbnz	r0, 800bec4 <_vfiprintf_r+0x12c>
 800be8c:	06d1      	lsls	r1, r2, #27
 800be8e:	bf44      	itt	mi
 800be90:	2320      	movmi	r3, #32
 800be92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be96:	0713      	lsls	r3, r2, #28
 800be98:	bf44      	itt	mi
 800be9a:	232b      	movmi	r3, #43	; 0x2b
 800be9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bea0:	f89a 3000 	ldrb.w	r3, [sl]
 800bea4:	2b2a      	cmp	r3, #42	; 0x2a
 800bea6:	d015      	beq.n	800bed4 <_vfiprintf_r+0x13c>
 800bea8:	4654      	mov	r4, sl
 800beaa:	2000      	movs	r0, #0
 800beac:	f04f 0c0a 	mov.w	ip, #10
 800beb0:	9a07      	ldr	r2, [sp, #28]
 800beb2:	4621      	mov	r1, r4
 800beb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beb8:	3b30      	subs	r3, #48	; 0x30
 800beba:	2b09      	cmp	r3, #9
 800bebc:	d94e      	bls.n	800bf5c <_vfiprintf_r+0x1c4>
 800bebe:	b1b0      	cbz	r0, 800beee <_vfiprintf_r+0x156>
 800bec0:	9207      	str	r2, [sp, #28]
 800bec2:	e014      	b.n	800beee <_vfiprintf_r+0x156>
 800bec4:	eba0 0308 	sub.w	r3, r0, r8
 800bec8:	fa09 f303 	lsl.w	r3, r9, r3
 800becc:	4313      	orrs	r3, r2
 800bece:	46a2      	mov	sl, r4
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	e7d2      	b.n	800be7a <_vfiprintf_r+0xe2>
 800bed4:	9b03      	ldr	r3, [sp, #12]
 800bed6:	1d19      	adds	r1, r3, #4
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	9103      	str	r1, [sp, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	bfbb      	ittet	lt
 800bee0:	425b      	neglt	r3, r3
 800bee2:	f042 0202 	orrlt.w	r2, r2, #2
 800bee6:	9307      	strge	r3, [sp, #28]
 800bee8:	9307      	strlt	r3, [sp, #28]
 800beea:	bfb8      	it	lt
 800beec:	9204      	strlt	r2, [sp, #16]
 800beee:	7823      	ldrb	r3, [r4, #0]
 800bef0:	2b2e      	cmp	r3, #46	; 0x2e
 800bef2:	d10c      	bne.n	800bf0e <_vfiprintf_r+0x176>
 800bef4:	7863      	ldrb	r3, [r4, #1]
 800bef6:	2b2a      	cmp	r3, #42	; 0x2a
 800bef8:	d135      	bne.n	800bf66 <_vfiprintf_r+0x1ce>
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	3402      	adds	r4, #2
 800befe:	1d1a      	adds	r2, r3, #4
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	9203      	str	r2, [sp, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bfb8      	it	lt
 800bf08:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf0c:	9305      	str	r3, [sp, #20]
 800bf0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bfe8 <_vfiprintf_r+0x250>
 800bf12:	2203      	movs	r2, #3
 800bf14:	4650      	mov	r0, sl
 800bf16:	7821      	ldrb	r1, [r4, #0]
 800bf18:	f7ff f97c 	bl	800b214 <memchr>
 800bf1c:	b140      	cbz	r0, 800bf30 <_vfiprintf_r+0x198>
 800bf1e:	2340      	movs	r3, #64	; 0x40
 800bf20:	eba0 000a 	sub.w	r0, r0, sl
 800bf24:	fa03 f000 	lsl.w	r0, r3, r0
 800bf28:	9b04      	ldr	r3, [sp, #16]
 800bf2a:	3401      	adds	r4, #1
 800bf2c:	4303      	orrs	r3, r0
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf34:	2206      	movs	r2, #6
 800bf36:	482d      	ldr	r0, [pc, #180]	; (800bfec <_vfiprintf_r+0x254>)
 800bf38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf3c:	f7ff f96a 	bl	800b214 <memchr>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d03f      	beq.n	800bfc4 <_vfiprintf_r+0x22c>
 800bf44:	4b2a      	ldr	r3, [pc, #168]	; (800bff0 <_vfiprintf_r+0x258>)
 800bf46:	bb1b      	cbnz	r3, 800bf90 <_vfiprintf_r+0x1f8>
 800bf48:	9b03      	ldr	r3, [sp, #12]
 800bf4a:	3307      	adds	r3, #7
 800bf4c:	f023 0307 	bic.w	r3, r3, #7
 800bf50:	3308      	adds	r3, #8
 800bf52:	9303      	str	r3, [sp, #12]
 800bf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf56:	443b      	add	r3, r7
 800bf58:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5a:	e767      	b.n	800be2c <_vfiprintf_r+0x94>
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	2001      	movs	r0, #1
 800bf60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf64:	e7a5      	b.n	800beb2 <_vfiprintf_r+0x11a>
 800bf66:	2300      	movs	r3, #0
 800bf68:	f04f 0c0a 	mov.w	ip, #10
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	3401      	adds	r4, #1
 800bf70:	9305      	str	r3, [sp, #20]
 800bf72:	4620      	mov	r0, r4
 800bf74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf78:	3a30      	subs	r2, #48	; 0x30
 800bf7a:	2a09      	cmp	r2, #9
 800bf7c:	d903      	bls.n	800bf86 <_vfiprintf_r+0x1ee>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0c5      	beq.n	800bf0e <_vfiprintf_r+0x176>
 800bf82:	9105      	str	r1, [sp, #20]
 800bf84:	e7c3      	b.n	800bf0e <_vfiprintf_r+0x176>
 800bf86:	4604      	mov	r4, r0
 800bf88:	2301      	movs	r3, #1
 800bf8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf8e:	e7f0      	b.n	800bf72 <_vfiprintf_r+0x1da>
 800bf90:	ab03      	add	r3, sp, #12
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	462a      	mov	r2, r5
 800bf96:	4630      	mov	r0, r6
 800bf98:	4b16      	ldr	r3, [pc, #88]	; (800bff4 <_vfiprintf_r+0x25c>)
 800bf9a:	a904      	add	r1, sp, #16
 800bf9c:	f7fd fe86 	bl	8009cac <_printf_float>
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	1c78      	adds	r0, r7, #1
 800bfa4:	d1d6      	bne.n	800bf54 <_vfiprintf_r+0x1bc>
 800bfa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfa8:	07d9      	lsls	r1, r3, #31
 800bfaa:	d405      	bmi.n	800bfb8 <_vfiprintf_r+0x220>
 800bfac:	89ab      	ldrh	r3, [r5, #12]
 800bfae:	059a      	lsls	r2, r3, #22
 800bfb0:	d402      	bmi.n	800bfb8 <_vfiprintf_r+0x220>
 800bfb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfb4:	f7ff fe6c 	bl	800bc90 <__retarget_lock_release_recursive>
 800bfb8:	89ab      	ldrh	r3, [r5, #12]
 800bfba:	065b      	lsls	r3, r3, #25
 800bfbc:	f53f af12 	bmi.w	800bde4 <_vfiprintf_r+0x4c>
 800bfc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfc2:	e711      	b.n	800bde8 <_vfiprintf_r+0x50>
 800bfc4:	ab03      	add	r3, sp, #12
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	462a      	mov	r2, r5
 800bfca:	4630      	mov	r0, r6
 800bfcc:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <_vfiprintf_r+0x25c>)
 800bfce:	a904      	add	r1, sp, #16
 800bfd0:	f7fe f908 	bl	800a1e4 <_printf_i>
 800bfd4:	e7e4      	b.n	800bfa0 <_vfiprintf_r+0x208>
 800bfd6:	bf00      	nop
 800bfd8:	0800d1ac 	.word	0x0800d1ac
 800bfdc:	0800d1cc 	.word	0x0800d1cc
 800bfe0:	0800d18c 	.word	0x0800d18c
 800bfe4:	0800d034 	.word	0x0800d034
 800bfe8:	0800d03a 	.word	0x0800d03a
 800bfec:	0800d03e 	.word	0x0800d03e
 800bff0:	08009cad 	.word	0x08009cad
 800bff4:	0800bd73 	.word	0x0800bd73

0800bff8 <__swbuf_r>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	460e      	mov	r6, r1
 800bffc:	4614      	mov	r4, r2
 800bffe:	4605      	mov	r5, r0
 800c000:	b118      	cbz	r0, 800c00a <__swbuf_r+0x12>
 800c002:	6983      	ldr	r3, [r0, #24]
 800c004:	b90b      	cbnz	r3, 800c00a <__swbuf_r+0x12>
 800c006:	f000 f9db 	bl	800c3c0 <__sinit>
 800c00a:	4b21      	ldr	r3, [pc, #132]	; (800c090 <__swbuf_r+0x98>)
 800c00c:	429c      	cmp	r4, r3
 800c00e:	d12b      	bne.n	800c068 <__swbuf_r+0x70>
 800c010:	686c      	ldr	r4, [r5, #4]
 800c012:	69a3      	ldr	r3, [r4, #24]
 800c014:	60a3      	str	r3, [r4, #8]
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	071a      	lsls	r2, r3, #28
 800c01a:	d52f      	bpl.n	800c07c <__swbuf_r+0x84>
 800c01c:	6923      	ldr	r3, [r4, #16]
 800c01e:	b36b      	cbz	r3, 800c07c <__swbuf_r+0x84>
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	6820      	ldr	r0, [r4, #0]
 800c024:	b2f6      	uxtb	r6, r6
 800c026:	1ac0      	subs	r0, r0, r3
 800c028:	6963      	ldr	r3, [r4, #20]
 800c02a:	4637      	mov	r7, r6
 800c02c:	4283      	cmp	r3, r0
 800c02e:	dc04      	bgt.n	800c03a <__swbuf_r+0x42>
 800c030:	4621      	mov	r1, r4
 800c032:	4628      	mov	r0, r5
 800c034:	f000 f930 	bl	800c298 <_fflush_r>
 800c038:	bb30      	cbnz	r0, 800c088 <__swbuf_r+0x90>
 800c03a:	68a3      	ldr	r3, [r4, #8]
 800c03c:	3001      	adds	r0, #1
 800c03e:	3b01      	subs	r3, #1
 800c040:	60a3      	str	r3, [r4, #8]
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	6022      	str	r2, [r4, #0]
 800c048:	701e      	strb	r6, [r3, #0]
 800c04a:	6963      	ldr	r3, [r4, #20]
 800c04c:	4283      	cmp	r3, r0
 800c04e:	d004      	beq.n	800c05a <__swbuf_r+0x62>
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	07db      	lsls	r3, r3, #31
 800c054:	d506      	bpl.n	800c064 <__swbuf_r+0x6c>
 800c056:	2e0a      	cmp	r6, #10
 800c058:	d104      	bne.n	800c064 <__swbuf_r+0x6c>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 f91b 	bl	800c298 <_fflush_r>
 800c062:	b988      	cbnz	r0, 800c088 <__swbuf_r+0x90>
 800c064:	4638      	mov	r0, r7
 800c066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c068:	4b0a      	ldr	r3, [pc, #40]	; (800c094 <__swbuf_r+0x9c>)
 800c06a:	429c      	cmp	r4, r3
 800c06c:	d101      	bne.n	800c072 <__swbuf_r+0x7a>
 800c06e:	68ac      	ldr	r4, [r5, #8]
 800c070:	e7cf      	b.n	800c012 <__swbuf_r+0x1a>
 800c072:	4b09      	ldr	r3, [pc, #36]	; (800c098 <__swbuf_r+0xa0>)
 800c074:	429c      	cmp	r4, r3
 800c076:	bf08      	it	eq
 800c078:	68ec      	ldreq	r4, [r5, #12]
 800c07a:	e7ca      	b.n	800c012 <__swbuf_r+0x1a>
 800c07c:	4621      	mov	r1, r4
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 f81a 	bl	800c0b8 <__swsetup_r>
 800c084:	2800      	cmp	r0, #0
 800c086:	d0cb      	beq.n	800c020 <__swbuf_r+0x28>
 800c088:	f04f 37ff 	mov.w	r7, #4294967295
 800c08c:	e7ea      	b.n	800c064 <__swbuf_r+0x6c>
 800c08e:	bf00      	nop
 800c090:	0800d1ac 	.word	0x0800d1ac
 800c094:	0800d1cc 	.word	0x0800d1cc
 800c098:	0800d18c 	.word	0x0800d18c

0800c09c <__ascii_wctomb>:
 800c09c:	4603      	mov	r3, r0
 800c09e:	4608      	mov	r0, r1
 800c0a0:	b141      	cbz	r1, 800c0b4 <__ascii_wctomb+0x18>
 800c0a2:	2aff      	cmp	r2, #255	; 0xff
 800c0a4:	d904      	bls.n	800c0b0 <__ascii_wctomb+0x14>
 800c0a6:	228a      	movs	r2, #138	; 0x8a
 800c0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ac:	601a      	str	r2, [r3, #0]
 800c0ae:	4770      	bx	lr
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	700a      	strb	r2, [r1, #0]
 800c0b4:	4770      	bx	lr
	...

0800c0b8 <__swsetup_r>:
 800c0b8:	4b32      	ldr	r3, [pc, #200]	; (800c184 <__swsetup_r+0xcc>)
 800c0ba:	b570      	push	{r4, r5, r6, lr}
 800c0bc:	681d      	ldr	r5, [r3, #0]
 800c0be:	4606      	mov	r6, r0
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	b125      	cbz	r5, 800c0ce <__swsetup_r+0x16>
 800c0c4:	69ab      	ldr	r3, [r5, #24]
 800c0c6:	b913      	cbnz	r3, 800c0ce <__swsetup_r+0x16>
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	f000 f979 	bl	800c3c0 <__sinit>
 800c0ce:	4b2e      	ldr	r3, [pc, #184]	; (800c188 <__swsetup_r+0xd0>)
 800c0d0:	429c      	cmp	r4, r3
 800c0d2:	d10f      	bne.n	800c0f4 <__swsetup_r+0x3c>
 800c0d4:	686c      	ldr	r4, [r5, #4]
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0dc:	0719      	lsls	r1, r3, #28
 800c0de:	d42c      	bmi.n	800c13a <__swsetup_r+0x82>
 800c0e0:	06dd      	lsls	r5, r3, #27
 800c0e2:	d411      	bmi.n	800c108 <__swsetup_r+0x50>
 800c0e4:	2309      	movs	r3, #9
 800c0e6:	6033      	str	r3, [r6, #0]
 800c0e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	e03e      	b.n	800c172 <__swsetup_r+0xba>
 800c0f4:	4b25      	ldr	r3, [pc, #148]	; (800c18c <__swsetup_r+0xd4>)
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	d101      	bne.n	800c0fe <__swsetup_r+0x46>
 800c0fa:	68ac      	ldr	r4, [r5, #8]
 800c0fc:	e7eb      	b.n	800c0d6 <__swsetup_r+0x1e>
 800c0fe:	4b24      	ldr	r3, [pc, #144]	; (800c190 <__swsetup_r+0xd8>)
 800c100:	429c      	cmp	r4, r3
 800c102:	bf08      	it	eq
 800c104:	68ec      	ldreq	r4, [r5, #12]
 800c106:	e7e6      	b.n	800c0d6 <__swsetup_r+0x1e>
 800c108:	0758      	lsls	r0, r3, #29
 800c10a:	d512      	bpl.n	800c132 <__swsetup_r+0x7a>
 800c10c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c10e:	b141      	cbz	r1, 800c122 <__swsetup_r+0x6a>
 800c110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c114:	4299      	cmp	r1, r3
 800c116:	d002      	beq.n	800c11e <__swsetup_r+0x66>
 800c118:	4630      	mov	r0, r6
 800c11a:	f7fd fc4d 	bl	80099b8 <_free_r>
 800c11e:	2300      	movs	r3, #0
 800c120:	6363      	str	r3, [r4, #52]	; 0x34
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c128:	81a3      	strh	r3, [r4, #12]
 800c12a:	2300      	movs	r3, #0
 800c12c:	6063      	str	r3, [r4, #4]
 800c12e:	6923      	ldr	r3, [r4, #16]
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f043 0308 	orr.w	r3, r3, #8
 800c138:	81a3      	strh	r3, [r4, #12]
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	b94b      	cbnz	r3, 800c152 <__swsetup_r+0x9a>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c148:	d003      	beq.n	800c152 <__swsetup_r+0x9a>
 800c14a:	4621      	mov	r1, r4
 800c14c:	4630      	mov	r0, r6
 800c14e:	f000 f9f9 	bl	800c544 <__smakebuf_r>
 800c152:	89a0      	ldrh	r0, [r4, #12]
 800c154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c158:	f010 0301 	ands.w	r3, r0, #1
 800c15c:	d00a      	beq.n	800c174 <__swsetup_r+0xbc>
 800c15e:	2300      	movs	r3, #0
 800c160:	60a3      	str	r3, [r4, #8]
 800c162:	6963      	ldr	r3, [r4, #20]
 800c164:	425b      	negs	r3, r3
 800c166:	61a3      	str	r3, [r4, #24]
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	b943      	cbnz	r3, 800c17e <__swsetup_r+0xc6>
 800c16c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c170:	d1ba      	bne.n	800c0e8 <__swsetup_r+0x30>
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	0781      	lsls	r1, r0, #30
 800c176:	bf58      	it	pl
 800c178:	6963      	ldrpl	r3, [r4, #20]
 800c17a:	60a3      	str	r3, [r4, #8]
 800c17c:	e7f4      	b.n	800c168 <__swsetup_r+0xb0>
 800c17e:	2000      	movs	r0, #0
 800c180:	e7f7      	b.n	800c172 <__swsetup_r+0xba>
 800c182:	bf00      	nop
 800c184:	2000000c 	.word	0x2000000c
 800c188:	0800d1ac 	.word	0x0800d1ac
 800c18c:	0800d1cc 	.word	0x0800d1cc
 800c190:	0800d18c 	.word	0x0800d18c

0800c194 <__sflush_r>:
 800c194:	898a      	ldrh	r2, [r1, #12]
 800c196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c198:	4605      	mov	r5, r0
 800c19a:	0710      	lsls	r0, r2, #28
 800c19c:	460c      	mov	r4, r1
 800c19e:	d457      	bmi.n	800c250 <__sflush_r+0xbc>
 800c1a0:	684b      	ldr	r3, [r1, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	dc04      	bgt.n	800c1b0 <__sflush_r+0x1c>
 800c1a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dc01      	bgt.n	800c1b0 <__sflush_r+0x1c>
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d0fa      	beq.n	800c1ac <__sflush_r+0x18>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1bc:	682f      	ldr	r7, [r5, #0]
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	d032      	beq.n	800c228 <__sflush_r+0x94>
 800c1c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	075a      	lsls	r2, r3, #29
 800c1c8:	d505      	bpl.n	800c1d6 <__sflush_r+0x42>
 800c1ca:	6863      	ldr	r3, [r4, #4]
 800c1cc:	1ac0      	subs	r0, r0, r3
 800c1ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1d0:	b10b      	cbz	r3, 800c1d6 <__sflush_r+0x42>
 800c1d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1d4:	1ac0      	subs	r0, r0, r3
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	4602      	mov	r2, r0
 800c1da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1dc:	4628      	mov	r0, r5
 800c1de:	6a21      	ldr	r1, [r4, #32]
 800c1e0:	47b0      	blx	r6
 800c1e2:	1c43      	adds	r3, r0, #1
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	d106      	bne.n	800c1f6 <__sflush_r+0x62>
 800c1e8:	6829      	ldr	r1, [r5, #0]
 800c1ea:	291d      	cmp	r1, #29
 800c1ec:	d82c      	bhi.n	800c248 <__sflush_r+0xb4>
 800c1ee:	4a29      	ldr	r2, [pc, #164]	; (800c294 <__sflush_r+0x100>)
 800c1f0:	40ca      	lsrs	r2, r1
 800c1f2:	07d6      	lsls	r6, r2, #31
 800c1f4:	d528      	bpl.n	800c248 <__sflush_r+0xb4>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	6062      	str	r2, [r4, #4]
 800c1fa:	6922      	ldr	r2, [r4, #16]
 800c1fc:	04d9      	lsls	r1, r3, #19
 800c1fe:	6022      	str	r2, [r4, #0]
 800c200:	d504      	bpl.n	800c20c <__sflush_r+0x78>
 800c202:	1c42      	adds	r2, r0, #1
 800c204:	d101      	bne.n	800c20a <__sflush_r+0x76>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b903      	cbnz	r3, 800c20c <__sflush_r+0x78>
 800c20a:	6560      	str	r0, [r4, #84]	; 0x54
 800c20c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c20e:	602f      	str	r7, [r5, #0]
 800c210:	2900      	cmp	r1, #0
 800c212:	d0cb      	beq.n	800c1ac <__sflush_r+0x18>
 800c214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c218:	4299      	cmp	r1, r3
 800c21a:	d002      	beq.n	800c222 <__sflush_r+0x8e>
 800c21c:	4628      	mov	r0, r5
 800c21e:	f7fd fbcb 	bl	80099b8 <_free_r>
 800c222:	2000      	movs	r0, #0
 800c224:	6360      	str	r0, [r4, #52]	; 0x34
 800c226:	e7c2      	b.n	800c1ae <__sflush_r+0x1a>
 800c228:	6a21      	ldr	r1, [r4, #32]
 800c22a:	2301      	movs	r3, #1
 800c22c:	4628      	mov	r0, r5
 800c22e:	47b0      	blx	r6
 800c230:	1c41      	adds	r1, r0, #1
 800c232:	d1c7      	bne.n	800c1c4 <__sflush_r+0x30>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0c4      	beq.n	800c1c4 <__sflush_r+0x30>
 800c23a:	2b1d      	cmp	r3, #29
 800c23c:	d001      	beq.n	800c242 <__sflush_r+0xae>
 800c23e:	2b16      	cmp	r3, #22
 800c240:	d101      	bne.n	800c246 <__sflush_r+0xb2>
 800c242:	602f      	str	r7, [r5, #0]
 800c244:	e7b2      	b.n	800c1ac <__sflush_r+0x18>
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c24c:	81a3      	strh	r3, [r4, #12]
 800c24e:	e7ae      	b.n	800c1ae <__sflush_r+0x1a>
 800c250:	690f      	ldr	r7, [r1, #16]
 800c252:	2f00      	cmp	r7, #0
 800c254:	d0aa      	beq.n	800c1ac <__sflush_r+0x18>
 800c256:	0793      	lsls	r3, r2, #30
 800c258:	bf18      	it	ne
 800c25a:	2300      	movne	r3, #0
 800c25c:	680e      	ldr	r6, [r1, #0]
 800c25e:	bf08      	it	eq
 800c260:	694b      	ldreq	r3, [r1, #20]
 800c262:	1bf6      	subs	r6, r6, r7
 800c264:	600f      	str	r7, [r1, #0]
 800c266:	608b      	str	r3, [r1, #8]
 800c268:	2e00      	cmp	r6, #0
 800c26a:	dd9f      	ble.n	800c1ac <__sflush_r+0x18>
 800c26c:	4633      	mov	r3, r6
 800c26e:	463a      	mov	r2, r7
 800c270:	4628      	mov	r0, r5
 800c272:	6a21      	ldr	r1, [r4, #32]
 800c274:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c278:	47e0      	blx	ip
 800c27a:	2800      	cmp	r0, #0
 800c27c:	dc06      	bgt.n	800c28c <__sflush_r+0xf8>
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	f04f 30ff 	mov.w	r0, #4294967295
 800c284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	e790      	b.n	800c1ae <__sflush_r+0x1a>
 800c28c:	4407      	add	r7, r0
 800c28e:	1a36      	subs	r6, r6, r0
 800c290:	e7ea      	b.n	800c268 <__sflush_r+0xd4>
 800c292:	bf00      	nop
 800c294:	20400001 	.word	0x20400001

0800c298 <_fflush_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	690b      	ldr	r3, [r1, #16]
 800c29c:	4605      	mov	r5, r0
 800c29e:	460c      	mov	r4, r1
 800c2a0:	b913      	cbnz	r3, 800c2a8 <_fflush_r+0x10>
 800c2a2:	2500      	movs	r5, #0
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	b118      	cbz	r0, 800c2b2 <_fflush_r+0x1a>
 800c2aa:	6983      	ldr	r3, [r0, #24]
 800c2ac:	b90b      	cbnz	r3, 800c2b2 <_fflush_r+0x1a>
 800c2ae:	f000 f887 	bl	800c3c0 <__sinit>
 800c2b2:	4b14      	ldr	r3, [pc, #80]	; (800c304 <_fflush_r+0x6c>)
 800c2b4:	429c      	cmp	r4, r3
 800c2b6:	d11b      	bne.n	800c2f0 <_fflush_r+0x58>
 800c2b8:	686c      	ldr	r4, [r5, #4]
 800c2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0ef      	beq.n	800c2a2 <_fflush_r+0xa>
 800c2c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2c4:	07d0      	lsls	r0, r2, #31
 800c2c6:	d404      	bmi.n	800c2d2 <_fflush_r+0x3a>
 800c2c8:	0599      	lsls	r1, r3, #22
 800c2ca:	d402      	bmi.n	800c2d2 <_fflush_r+0x3a>
 800c2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ce:	f7ff fcde 	bl	800bc8e <__retarget_lock_acquire_recursive>
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	f7ff ff5d 	bl	800c194 <__sflush_r>
 800c2da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2dc:	4605      	mov	r5, r0
 800c2de:	07da      	lsls	r2, r3, #31
 800c2e0:	d4e0      	bmi.n	800c2a4 <_fflush_r+0xc>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	059b      	lsls	r3, r3, #22
 800c2e6:	d4dd      	bmi.n	800c2a4 <_fflush_r+0xc>
 800c2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ea:	f7ff fcd1 	bl	800bc90 <__retarget_lock_release_recursive>
 800c2ee:	e7d9      	b.n	800c2a4 <_fflush_r+0xc>
 800c2f0:	4b05      	ldr	r3, [pc, #20]	; (800c308 <_fflush_r+0x70>)
 800c2f2:	429c      	cmp	r4, r3
 800c2f4:	d101      	bne.n	800c2fa <_fflush_r+0x62>
 800c2f6:	68ac      	ldr	r4, [r5, #8]
 800c2f8:	e7df      	b.n	800c2ba <_fflush_r+0x22>
 800c2fa:	4b04      	ldr	r3, [pc, #16]	; (800c30c <_fflush_r+0x74>)
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	bf08      	it	eq
 800c300:	68ec      	ldreq	r4, [r5, #12]
 800c302:	e7da      	b.n	800c2ba <_fflush_r+0x22>
 800c304:	0800d1ac 	.word	0x0800d1ac
 800c308:	0800d1cc 	.word	0x0800d1cc
 800c30c:	0800d18c 	.word	0x0800d18c

0800c310 <std>:
 800c310:	2300      	movs	r3, #0
 800c312:	b510      	push	{r4, lr}
 800c314:	4604      	mov	r4, r0
 800c316:	e9c0 3300 	strd	r3, r3, [r0]
 800c31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c31e:	6083      	str	r3, [r0, #8]
 800c320:	8181      	strh	r1, [r0, #12]
 800c322:	6643      	str	r3, [r0, #100]	; 0x64
 800c324:	81c2      	strh	r2, [r0, #14]
 800c326:	6183      	str	r3, [r0, #24]
 800c328:	4619      	mov	r1, r3
 800c32a:	2208      	movs	r2, #8
 800c32c:	305c      	adds	r0, #92	; 0x5c
 800c32e:	f7fd fb3b 	bl	80099a8 <memset>
 800c332:	4b05      	ldr	r3, [pc, #20]	; (800c348 <std+0x38>)
 800c334:	6224      	str	r4, [r4, #32]
 800c336:	6263      	str	r3, [r4, #36]	; 0x24
 800c338:	4b04      	ldr	r3, [pc, #16]	; (800c34c <std+0x3c>)
 800c33a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c33c:	4b04      	ldr	r3, [pc, #16]	; (800c350 <std+0x40>)
 800c33e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c340:	4b04      	ldr	r3, [pc, #16]	; (800c354 <std+0x44>)
 800c342:	6323      	str	r3, [r4, #48]	; 0x30
 800c344:	bd10      	pop	{r4, pc}
 800c346:	bf00      	nop
 800c348:	0800c5d5 	.word	0x0800c5d5
 800c34c:	0800c5f7 	.word	0x0800c5f7
 800c350:	0800c62f 	.word	0x0800c62f
 800c354:	0800c653 	.word	0x0800c653

0800c358 <_cleanup_r>:
 800c358:	4901      	ldr	r1, [pc, #4]	; (800c360 <_cleanup_r+0x8>)
 800c35a:	f000 b8af 	b.w	800c4bc <_fwalk_reent>
 800c35e:	bf00      	nop
 800c360:	0800c299 	.word	0x0800c299

0800c364 <__sfmoreglue>:
 800c364:	2268      	movs	r2, #104	; 0x68
 800c366:	b570      	push	{r4, r5, r6, lr}
 800c368:	1e4d      	subs	r5, r1, #1
 800c36a:	4355      	muls	r5, r2
 800c36c:	460e      	mov	r6, r1
 800c36e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c372:	f7fd fb89 	bl	8009a88 <_malloc_r>
 800c376:	4604      	mov	r4, r0
 800c378:	b140      	cbz	r0, 800c38c <__sfmoreglue+0x28>
 800c37a:	2100      	movs	r1, #0
 800c37c:	e9c0 1600 	strd	r1, r6, [r0]
 800c380:	300c      	adds	r0, #12
 800c382:	60a0      	str	r0, [r4, #8]
 800c384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c388:	f7fd fb0e 	bl	80099a8 <memset>
 800c38c:	4620      	mov	r0, r4
 800c38e:	bd70      	pop	{r4, r5, r6, pc}

0800c390 <__sfp_lock_acquire>:
 800c390:	4801      	ldr	r0, [pc, #4]	; (800c398 <__sfp_lock_acquire+0x8>)
 800c392:	f7ff bc7c 	b.w	800bc8e <__retarget_lock_acquire_recursive>
 800c396:	bf00      	nop
 800c398:	200007d5 	.word	0x200007d5

0800c39c <__sfp_lock_release>:
 800c39c:	4801      	ldr	r0, [pc, #4]	; (800c3a4 <__sfp_lock_release+0x8>)
 800c39e:	f7ff bc77 	b.w	800bc90 <__retarget_lock_release_recursive>
 800c3a2:	bf00      	nop
 800c3a4:	200007d5 	.word	0x200007d5

0800c3a8 <__sinit_lock_acquire>:
 800c3a8:	4801      	ldr	r0, [pc, #4]	; (800c3b0 <__sinit_lock_acquire+0x8>)
 800c3aa:	f7ff bc70 	b.w	800bc8e <__retarget_lock_acquire_recursive>
 800c3ae:	bf00      	nop
 800c3b0:	200007d6 	.word	0x200007d6

0800c3b4 <__sinit_lock_release>:
 800c3b4:	4801      	ldr	r0, [pc, #4]	; (800c3bc <__sinit_lock_release+0x8>)
 800c3b6:	f7ff bc6b 	b.w	800bc90 <__retarget_lock_release_recursive>
 800c3ba:	bf00      	nop
 800c3bc:	200007d6 	.word	0x200007d6

0800c3c0 <__sinit>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	f7ff fff0 	bl	800c3a8 <__sinit_lock_acquire>
 800c3c8:	69a3      	ldr	r3, [r4, #24]
 800c3ca:	b11b      	cbz	r3, 800c3d4 <__sinit+0x14>
 800c3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d0:	f7ff bff0 	b.w	800c3b4 <__sinit_lock_release>
 800c3d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3d8:	6523      	str	r3, [r4, #80]	; 0x50
 800c3da:	4b13      	ldr	r3, [pc, #76]	; (800c428 <__sinit+0x68>)
 800c3dc:	4a13      	ldr	r2, [pc, #76]	; (800c42c <__sinit+0x6c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3e2:	42a3      	cmp	r3, r4
 800c3e4:	bf08      	it	eq
 800c3e6:	2301      	moveq	r3, #1
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	bf08      	it	eq
 800c3ec:	61a3      	streq	r3, [r4, #24]
 800c3ee:	f000 f81f 	bl	800c430 <__sfp>
 800c3f2:	6060      	str	r0, [r4, #4]
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f000 f81b 	bl	800c430 <__sfp>
 800c3fa:	60a0      	str	r0, [r4, #8]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 f817 	bl	800c430 <__sfp>
 800c402:	2200      	movs	r2, #0
 800c404:	2104      	movs	r1, #4
 800c406:	60e0      	str	r0, [r4, #12]
 800c408:	6860      	ldr	r0, [r4, #4]
 800c40a:	f7ff ff81 	bl	800c310 <std>
 800c40e:	2201      	movs	r2, #1
 800c410:	2109      	movs	r1, #9
 800c412:	68a0      	ldr	r0, [r4, #8]
 800c414:	f7ff ff7c 	bl	800c310 <std>
 800c418:	2202      	movs	r2, #2
 800c41a:	2112      	movs	r1, #18
 800c41c:	68e0      	ldr	r0, [r4, #12]
 800c41e:	f7ff ff77 	bl	800c310 <std>
 800c422:	2301      	movs	r3, #1
 800c424:	61a3      	str	r3, [r4, #24]
 800c426:	e7d1      	b.n	800c3cc <__sinit+0xc>
 800c428:	0800ce10 	.word	0x0800ce10
 800c42c:	0800c359 	.word	0x0800c359

0800c430 <__sfp>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	4607      	mov	r7, r0
 800c434:	f7ff ffac 	bl	800c390 <__sfp_lock_acquire>
 800c438:	4b1e      	ldr	r3, [pc, #120]	; (800c4b4 <__sfp+0x84>)
 800c43a:	681e      	ldr	r6, [r3, #0]
 800c43c:	69b3      	ldr	r3, [r6, #24]
 800c43e:	b913      	cbnz	r3, 800c446 <__sfp+0x16>
 800c440:	4630      	mov	r0, r6
 800c442:	f7ff ffbd 	bl	800c3c0 <__sinit>
 800c446:	3648      	adds	r6, #72	; 0x48
 800c448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	d503      	bpl.n	800c458 <__sfp+0x28>
 800c450:	6833      	ldr	r3, [r6, #0]
 800c452:	b30b      	cbz	r3, 800c498 <__sfp+0x68>
 800c454:	6836      	ldr	r6, [r6, #0]
 800c456:	e7f7      	b.n	800c448 <__sfp+0x18>
 800c458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c45c:	b9d5      	cbnz	r5, 800c494 <__sfp+0x64>
 800c45e:	4b16      	ldr	r3, [pc, #88]	; (800c4b8 <__sfp+0x88>)
 800c460:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c464:	60e3      	str	r3, [r4, #12]
 800c466:	6665      	str	r5, [r4, #100]	; 0x64
 800c468:	f7ff fc10 	bl	800bc8c <__retarget_lock_init_recursive>
 800c46c:	f7ff ff96 	bl	800c39c <__sfp_lock_release>
 800c470:	2208      	movs	r2, #8
 800c472:	4629      	mov	r1, r5
 800c474:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c478:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c47c:	6025      	str	r5, [r4, #0]
 800c47e:	61a5      	str	r5, [r4, #24]
 800c480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c484:	f7fd fa90 	bl	80099a8 <memset>
 800c488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c48c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c490:	4620      	mov	r0, r4
 800c492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c494:	3468      	adds	r4, #104	; 0x68
 800c496:	e7d9      	b.n	800c44c <__sfp+0x1c>
 800c498:	2104      	movs	r1, #4
 800c49a:	4638      	mov	r0, r7
 800c49c:	f7ff ff62 	bl	800c364 <__sfmoreglue>
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	6030      	str	r0, [r6, #0]
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d1d5      	bne.n	800c454 <__sfp+0x24>
 800c4a8:	f7ff ff78 	bl	800c39c <__sfp_lock_release>
 800c4ac:	230c      	movs	r3, #12
 800c4ae:	603b      	str	r3, [r7, #0]
 800c4b0:	e7ee      	b.n	800c490 <__sfp+0x60>
 800c4b2:	bf00      	nop
 800c4b4:	0800ce10 	.word	0x0800ce10
 800c4b8:	ffff0001 	.word	0xffff0001

0800c4bc <_fwalk_reent>:
 800c4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	4688      	mov	r8, r1
 800c4c4:	2700      	movs	r7, #0
 800c4c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4ce:	f1b9 0901 	subs.w	r9, r9, #1
 800c4d2:	d505      	bpl.n	800c4e0 <_fwalk_reent+0x24>
 800c4d4:	6824      	ldr	r4, [r4, #0]
 800c4d6:	2c00      	cmp	r4, #0
 800c4d8:	d1f7      	bne.n	800c4ca <_fwalk_reent+0xe>
 800c4da:	4638      	mov	r0, r7
 800c4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4e0:	89ab      	ldrh	r3, [r5, #12]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d907      	bls.n	800c4f6 <_fwalk_reent+0x3a>
 800c4e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	d003      	beq.n	800c4f6 <_fwalk_reent+0x3a>
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	47c0      	blx	r8
 800c4f4:	4307      	orrs	r7, r0
 800c4f6:	3568      	adds	r5, #104	; 0x68
 800c4f8:	e7e9      	b.n	800c4ce <_fwalk_reent+0x12>

0800c4fa <__swhatbuf_r>:
 800c4fa:	b570      	push	{r4, r5, r6, lr}
 800c4fc:	460e      	mov	r6, r1
 800c4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c502:	4614      	mov	r4, r2
 800c504:	2900      	cmp	r1, #0
 800c506:	461d      	mov	r5, r3
 800c508:	b096      	sub	sp, #88	; 0x58
 800c50a:	da08      	bge.n	800c51e <__swhatbuf_r+0x24>
 800c50c:	2200      	movs	r2, #0
 800c50e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c512:	602a      	str	r2, [r5, #0]
 800c514:	061a      	lsls	r2, r3, #24
 800c516:	d410      	bmi.n	800c53a <__swhatbuf_r+0x40>
 800c518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c51c:	e00e      	b.n	800c53c <__swhatbuf_r+0x42>
 800c51e:	466a      	mov	r2, sp
 800c520:	f000 f8be 	bl	800c6a0 <_fstat_r>
 800c524:	2800      	cmp	r0, #0
 800c526:	dbf1      	blt.n	800c50c <__swhatbuf_r+0x12>
 800c528:	9a01      	ldr	r2, [sp, #4]
 800c52a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c52e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c532:	425a      	negs	r2, r3
 800c534:	415a      	adcs	r2, r3
 800c536:	602a      	str	r2, [r5, #0]
 800c538:	e7ee      	b.n	800c518 <__swhatbuf_r+0x1e>
 800c53a:	2340      	movs	r3, #64	; 0x40
 800c53c:	2000      	movs	r0, #0
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	b016      	add	sp, #88	; 0x58
 800c542:	bd70      	pop	{r4, r5, r6, pc}

0800c544 <__smakebuf_r>:
 800c544:	898b      	ldrh	r3, [r1, #12]
 800c546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c548:	079d      	lsls	r5, r3, #30
 800c54a:	4606      	mov	r6, r0
 800c54c:	460c      	mov	r4, r1
 800c54e:	d507      	bpl.n	800c560 <__smakebuf_r+0x1c>
 800c550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	2301      	movs	r3, #1
 800c55a:	6163      	str	r3, [r4, #20]
 800c55c:	b002      	add	sp, #8
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	466a      	mov	r2, sp
 800c562:	ab01      	add	r3, sp, #4
 800c564:	f7ff ffc9 	bl	800c4fa <__swhatbuf_r>
 800c568:	9900      	ldr	r1, [sp, #0]
 800c56a:	4605      	mov	r5, r0
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7fd fa8b 	bl	8009a88 <_malloc_r>
 800c572:	b948      	cbnz	r0, 800c588 <__smakebuf_r+0x44>
 800c574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c578:	059a      	lsls	r2, r3, #22
 800c57a:	d4ef      	bmi.n	800c55c <__smakebuf_r+0x18>
 800c57c:	f023 0303 	bic.w	r3, r3, #3
 800c580:	f043 0302 	orr.w	r3, r3, #2
 800c584:	81a3      	strh	r3, [r4, #12]
 800c586:	e7e3      	b.n	800c550 <__smakebuf_r+0xc>
 800c588:	4b0d      	ldr	r3, [pc, #52]	; (800c5c0 <__smakebuf_r+0x7c>)
 800c58a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	6020      	str	r0, [r4, #0]
 800c590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c594:	81a3      	strh	r3, [r4, #12]
 800c596:	9b00      	ldr	r3, [sp, #0]
 800c598:	6120      	str	r0, [r4, #16]
 800c59a:	6163      	str	r3, [r4, #20]
 800c59c:	9b01      	ldr	r3, [sp, #4]
 800c59e:	b15b      	cbz	r3, 800c5b8 <__smakebuf_r+0x74>
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a6:	f000 f88d 	bl	800c6c4 <_isatty_r>
 800c5aa:	b128      	cbz	r0, 800c5b8 <__smakebuf_r+0x74>
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f023 0303 	bic.w	r3, r3, #3
 800c5b2:	f043 0301 	orr.w	r3, r3, #1
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	89a0      	ldrh	r0, [r4, #12]
 800c5ba:	4305      	orrs	r5, r0
 800c5bc:	81a5      	strh	r5, [r4, #12]
 800c5be:	e7cd      	b.n	800c55c <__smakebuf_r+0x18>
 800c5c0:	0800c359 	.word	0x0800c359

0800c5c4 <_malloc_usable_size_r>:
 800c5c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c8:	1f18      	subs	r0, r3, #4
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	bfbc      	itt	lt
 800c5ce:	580b      	ldrlt	r3, [r1, r0]
 800c5d0:	18c0      	addlt	r0, r0, r3
 800c5d2:	4770      	bx	lr

0800c5d4 <__sread>:
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5dc:	f000 f894 	bl	800c708 <_read_r>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	bfab      	itete	ge
 800c5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c5e8:	181b      	addge	r3, r3, r0
 800c5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5ee:	bfac      	ite	ge
 800c5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5f2:	81a3      	strhlt	r3, [r4, #12]
 800c5f4:	bd10      	pop	{r4, pc}

0800c5f6 <__swrite>:
 800c5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fa:	461f      	mov	r7, r3
 800c5fc:	898b      	ldrh	r3, [r1, #12]
 800c5fe:	4605      	mov	r5, r0
 800c600:	05db      	lsls	r3, r3, #23
 800c602:	460c      	mov	r4, r1
 800c604:	4616      	mov	r6, r2
 800c606:	d505      	bpl.n	800c614 <__swrite+0x1e>
 800c608:	2302      	movs	r3, #2
 800c60a:	2200      	movs	r2, #0
 800c60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c610:	f000 f868 	bl	800c6e4 <_lseek_r>
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	4632      	mov	r2, r6
 800c618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c61c:	81a3      	strh	r3, [r4, #12]
 800c61e:	4628      	mov	r0, r5
 800c620:	463b      	mov	r3, r7
 800c622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c62a:	f000 b817 	b.w	800c65c <_write_r>

0800c62e <__sseek>:
 800c62e:	b510      	push	{r4, lr}
 800c630:	460c      	mov	r4, r1
 800c632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c636:	f000 f855 	bl	800c6e4 <_lseek_r>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	bf15      	itete	ne
 800c640:	6560      	strne	r0, [r4, #84]	; 0x54
 800c642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c64a:	81a3      	strheq	r3, [r4, #12]
 800c64c:	bf18      	it	ne
 800c64e:	81a3      	strhne	r3, [r4, #12]
 800c650:	bd10      	pop	{r4, pc}

0800c652 <__sclose>:
 800c652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c656:	f000 b813 	b.w	800c680 <_close_r>
	...

0800c65c <_write_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	4611      	mov	r1, r2
 800c664:	2200      	movs	r2, #0
 800c666:	4d05      	ldr	r5, [pc, #20]	; (800c67c <_write_r+0x20>)
 800c668:	602a      	str	r2, [r5, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	f7f6 ffb8 	bl	80035e0 <_write>
 800c670:	1c43      	adds	r3, r0, #1
 800c672:	d102      	bne.n	800c67a <_write_r+0x1e>
 800c674:	682b      	ldr	r3, [r5, #0]
 800c676:	b103      	cbz	r3, 800c67a <_write_r+0x1e>
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	bd38      	pop	{r3, r4, r5, pc}
 800c67c:	200007d0 	.word	0x200007d0

0800c680 <_close_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	2300      	movs	r3, #0
 800c684:	4d05      	ldr	r5, [pc, #20]	; (800c69c <_close_r+0x1c>)
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	f7f6 ffc4 	bl	8003618 <_close>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d102      	bne.n	800c69a <_close_r+0x1a>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	b103      	cbz	r3, 800c69a <_close_r+0x1a>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	200007d0 	.word	0x200007d0

0800c6a0 <_fstat_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	4d06      	ldr	r5, [pc, #24]	; (800c6c0 <_fstat_r+0x20>)
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	f7f6 ffbe 	bl	800362e <_fstat>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	d102      	bne.n	800c6bc <_fstat_r+0x1c>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	b103      	cbz	r3, 800c6bc <_fstat_r+0x1c>
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	bd38      	pop	{r3, r4, r5, pc}
 800c6be:	bf00      	nop
 800c6c0:	200007d0 	.word	0x200007d0

0800c6c4 <_isatty_r>:
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	4d05      	ldr	r5, [pc, #20]	; (800c6e0 <_isatty_r+0x1c>)
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	4608      	mov	r0, r1
 800c6ce:	602b      	str	r3, [r5, #0]
 800c6d0:	f7f6 ffbc 	bl	800364c <_isatty>
 800c6d4:	1c43      	adds	r3, r0, #1
 800c6d6:	d102      	bne.n	800c6de <_isatty_r+0x1a>
 800c6d8:	682b      	ldr	r3, [r5, #0]
 800c6da:	b103      	cbz	r3, 800c6de <_isatty_r+0x1a>
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	bd38      	pop	{r3, r4, r5, pc}
 800c6e0:	200007d0 	.word	0x200007d0

0800c6e4 <_lseek_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	4608      	mov	r0, r1
 800c6ea:	4611      	mov	r1, r2
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	4d05      	ldr	r5, [pc, #20]	; (800c704 <_lseek_r+0x20>)
 800c6f0:	602a      	str	r2, [r5, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f7f6 ffb4 	bl	8003660 <_lseek>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d102      	bne.n	800c702 <_lseek_r+0x1e>
 800c6fc:	682b      	ldr	r3, [r5, #0]
 800c6fe:	b103      	cbz	r3, 800c702 <_lseek_r+0x1e>
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	200007d0 	.word	0x200007d0

0800c708 <_read_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	4604      	mov	r4, r0
 800c70c:	4608      	mov	r0, r1
 800c70e:	4611      	mov	r1, r2
 800c710:	2200      	movs	r2, #0
 800c712:	4d05      	ldr	r5, [pc, #20]	; (800c728 <_read_r+0x20>)
 800c714:	602a      	str	r2, [r5, #0]
 800c716:	461a      	mov	r2, r3
 800c718:	f7f6 ff45 	bl	80035a6 <_read>
 800c71c:	1c43      	adds	r3, r0, #1
 800c71e:	d102      	bne.n	800c726 <_read_r+0x1e>
 800c720:	682b      	ldr	r3, [r5, #0]
 800c722:	b103      	cbz	r3, 800c726 <_read_r+0x1e>
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	200007d0 	.word	0x200007d0

0800c72c <_init>:
 800c72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72e:	bf00      	nop
 800c730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c732:	bc08      	pop	{r3}
 800c734:	469e      	mov	lr, r3
 800c736:	4770      	bx	lr

0800c738 <_fini>:
 800c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73a:	bf00      	nop
 800c73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73e:	bc08      	pop	{r3}
 800c740:	469e      	mov	lr, r3
 800c742:	4770      	bx	lr
