
AltimeX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  0800cb90  0800cb90  0001cb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d734  0800d734  0002029c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d734  0800d734  0002029c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d734  0800d734  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d734  0800d734  0001d734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d738  0800d738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800d73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  2000029c  0800d9d8  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800d9d8  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023314  00000000  00000000  000202c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004253  00000000  00000000  000435d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00047830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00048ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d75f  00000000  00000000  00049bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196ac  00000000  00000000  0006734f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093138  00000000  00000000  000809fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006468  00000000  00000000  00113b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000029c 	.word	0x2000029c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb74 	.word	0x0800cb74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a0 	.word	0x200002a0
 800014c:	0800cb74 	.word	0x0800cb74

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_f2uiz>:
 8001170:	0042      	lsls	r2, r0, #1
 8001172:	d20e      	bcs.n	8001192 <__aeabi_f2uiz+0x22>
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30b      	bcc.n	8001192 <__aeabi_f2uiz+0x22>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d409      	bmi.n	8001198 <__aeabi_f2uiz+0x28>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	4770      	bx	lr
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	4770      	bx	lr
 8001198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800119c:	d101      	bne.n	80011a2 <__aeabi_f2uiz+0x32>
 800119e:	0242      	lsls	r2, r0, #9
 80011a0:	d102      	bne.n	80011a8 <__aeabi_f2uiz+0x38>
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	4770      	bx	lr
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>:
 *  Created on: Jul 6, 2023
 *      Author: Kyle Kingsberry
 */
#include "LPS22HB.h"

LPS22HB::LPS22HB(I2C_HandleTypeDef* i2c_config, uint16_t address):
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80fb      	strh	r3, [r7, #6]
	i2c_config(i2c_config),
	address(address),
	reference_pressure(0),
	reference_temperature(0)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	88fa      	ldrh	r2, [r7, #6]
 80011c8:	809a      	strh	r2, [r3, #4]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	80da      	strh	r2, [r3, #6]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	811a      	strh	r2, [r3, #8]
{

}
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <_ZN7LPS22HB4initEv>:

LPS22HB::LPS_INIT_STATUS LPS22HB::init()
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 80011ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ee:	f002 fd2d 	bl	8003c4c <HAL_Delay>

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	2305      	movs	r3, #5
 80011f8:	2203      	movs	r2, #3
 80011fa:	21b8      	movs	r1, #184	; 0xb8
 80011fc:	f003 ff3c 	bl	8005078 <HAL_I2C_IsDeviceReady>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
	if(i2c_status == HAL_BUSY) {
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d101      	bne.n	800120e <_ZN7LPS22HB4initEv+0x2c>
		return HAL_I2C_BUSY;
 800120a:	2300      	movs	r3, #0
 800120c:	e012      	b.n	8001234 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set the ouptut data rate (odr)
	this->set_odr(ODR_75hz);
 800120e:	2105      	movs	r1, #5
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f830 	bl	8001276 <_ZN7LPS22HB7set_odrE7LPS_ODR>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = this->get_odr();
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f85d 	bl	80012d6 <_ZN7LPS22HB7get_odrEv>
 800121c:	4603      	mov	r3, r0
 800121e:	73bb      	strb	r3, [r7, #14]
	if(odr != ODR_75hz) {
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	2b05      	cmp	r3, #5
 8001224:	d001      	beq.n	800122a <_ZN7LPS22HB4initEv+0x48>
		return ODR_MISMATCH;
 8001226:	2301      	movs	r3, #1
 8001228:	e004      	b.n	8001234 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set FIFO mode to BYPASS
	this->configure_fifo(BYPASS);
 800122a:	2100      	movs	r1, #0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f865 	bl	80012fc <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return SUCCESS;
 8001232:	2302      	movs	r3, #2
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZN7LPS22HB8reg_readEttPh>:

void LPS22HB::reg_read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	817b      	strh	r3, [r7, #10]
 800124a:	4613      	mov	r3, r2
 800124c:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(this->i2c_config, (uint16_t)(this->address<<1), reg_addr, 1, data_output, reg_size, 100);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	b299      	uxth	r1, r3
 800125a:	897a      	ldrh	r2, [r7, #10]
 800125c:	2364      	movs	r3, #100	; 0x64
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	893b      	ldrh	r3, [r7, #8]
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	f003 fc9d 	bl	8004ba8 <HAL_I2C_Mem_Read>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_ZN7LPS22HB7set_odrE7LPS_ODR>:

//Configures the output data rate (ODR)
void LPS22HB::set_odr(enum LPS_ODR new_odr)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b088      	sub	sp, #32
 800127a:	af04      	add	r7, sp, #16
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	70fb      	strb	r3, [r7, #3]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2201      	movs	r2, #1
 8001288:	2110      	movs	r1, #16
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffd6 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	b2db      	uxtb	r3, r3
 8001298:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 800129a:	7a3b      	ldrb	r3, [r7, #8]
 800129c:	b25a      	sxtb	r2, r3
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t)(this->address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	889b      	ldrh	r3, [r3, #4]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b299      	uxth	r1, r3
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2301      	movs	r3, #1
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	2210      	movs	r2, #16
 80012ca:	f003 fb73 	bl	80049b4 <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN7LPS22HB7get_odrEv>:

//Reads the sensors odr
enum LPS_ODR LPS22HB::get_odr()
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2201      	movs	r2, #1
 80012e4:	2110      	movs	r1, #16
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa8 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>
	uint8_t odr_code = (existingConfig[0] >> 4);
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	73fb      	strb	r3, [r7, #15]

	return static_cast<LPS_ODR>(odr_code);
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>:

//Configures the FIFO for the desired mode
void LPS22HB::configure_fifo(enum LPS_FIFO desiredFifo)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af04      	add	r7, sp, #16
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d11d      	bne.n	800134a <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x4e>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	this->reg_read(FIFO_CTRL, 1, existingConfig);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2201      	movs	r2, #1
 8001314:	2114      	movs	r1, #20
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff90 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 800131c:	7b3b      	ldrb	r3, [r7, #12]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	b2db      	uxtb	r3, r3
 8001324:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t) (this->address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	b299      	uxth	r1, r3
 8001332:	2364      	movs	r3, #100	; 0x64
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2214      	movs	r2, #20
 8001344:	f003 fb36 	bl	80049b4 <HAL_I2C_Mem_Write>
 8001348:	e000      	b.n	800134c <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x50>
		return;
 800134a:	bf00      	nop
}
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <_ZN7LPS22HB12get_pressureEv>:

//Returns the pressure read by the sensor in HPA
double LPS22HB::get_pressure()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 4096.0;
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <_ZN7LPS22HB12get_pressureEv+0x68>)
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	this->reg_read(PRESS_OUT_H, 1, press_out_h);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2201      	movs	r2, #1
 800136c:	212a      	movs	r1, #42	; 0x2a
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff64 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_L, 1, press_out_l);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2201      	movs	r2, #1
 800137a:	2129      	movs	r1, #41	; 0x29
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff5d 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_XL, 1, press_out_xl);
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2201      	movs	r2, #1
 8001388:	2128      	movs	r1, #40	; 0x28
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff56 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 8001390:	7c3b      	ldrb	r3, [r7, #16]
 8001392:	041a      	lsls	r2, r3, #16
 8001394:	7b3b      	ldrb	r3, [r7, #12]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4413      	add	r3, r2
 800139a:	7a3a      	ldrb	r2, [r7, #8]
 800139c:	4413      	add	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

	return pressure / SCALING_FACTOR;
 80013a0:	6978      	ldr	r0, [r7, #20]
 80013a2:	f7ff f829 	bl	80003f8 <__aeabi_ui2d>
 80013a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013aa:	f7ff f9c9 	bl	8000740 <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
}
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40b00000 	.word	0x40b00000

080013c0 <_ZN7LPS22HB8get_tempEv>:

//Returns the temperature read by the sensor in C
double LPS22HB::get_temp()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 100.0;
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <_ZN7LPS22HB8get_tempEv+0x54>)
 80013ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

    this->reg_read(TEMP_OUT_H, 1, temp_out_h);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2201      	movs	r2, #1
 80013d8:	212c      	movs	r1, #44	; 0x2c
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff2e 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(TEMP_OUT_L, 1, temp_out_l);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2201      	movs	r2, #1
 80013e6:	212b      	movs	r1, #43	; 0x2b
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff27 	bl	800123c <_ZN7LPS22HB8reg_readEttPh>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 80013ee:	7c3b      	ldrb	r3, [r7, #16]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	7b3a      	ldrb	r2, [r7, #12]
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

	return temperature / SCALING_FACTOR;
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f7fe fffd 	bl	80003f8 <__aeabi_ui2d>
 80013fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001402:	f7ff f99d 	bl	8000740 <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
}
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40590000 	.word	0x40590000

08001418 <_ZN7LPS22HB9get_tempfEv>:

double LPS22HB::get_tempf()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	double tempC = this->get_temp();
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ffcd 	bl	80013c0 <_ZN7LPS22HB8get_tempEv>
 8001426:	e9c7 0102 	strd	r0, r1, [r7, #8]
	return (tempC * (9/5.0)) + 32;
 800142a:	a30b      	add	r3, pc, #44	; (adr r3, 8001458 <_ZN7LPS22HB9get_tempfEv+0x40>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7ff f85a 	bl	80004ec <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7LPS22HB9get_tempfEv+0x48>)
 8001446:	f7fe fe9b 	bl	8000180 <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
}
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	cccccccd 	.word	0xcccccccd
 800145c:	3ffccccc 	.word	0x3ffccccc
 8001460:	40400000 	.word	0x40400000
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7LPS22HB13get_relalt_ftEv>:
	return pressHPA * 0.0009869233;
}

//Reference pressure is pressure in Pa at surface
double LPS22HB::get_relalt_ft()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	double p = this->get_pressure();
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff6f 	bl	8001354 <_ZN7LPS22HB12get_pressureEv>
 8001476:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double t = this->get_temp();
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa0 	bl	80013c0 <_ZN7LPS22HB8get_tempEv>
 8001480:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)this->reference_pressure / p;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	88db      	ldrh	r3, [r3, #6]
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ffb5 	bl	80003f8 <__aeabi_ui2d>
 800148e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001492:	f7ff f955 	bl	8000740 <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exponential = pow(frac_p, (double)1.0/5.257);
 800149e:	a320      	add	r3, pc, #128	; (adr r3, 8001520 <_ZN7LPS22HB13get_relalt_ftEv+0xb8>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014a8:	f006 ffa6 	bl	80083f8 <pow>
 80014ac:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double fraction_top = (exponential - 1) * (t + 273.15);
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <_ZN7LPS22HB13get_relalt_ftEv+0xd8>)
 80014b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014ba:	f7fe fe5f 	bl	800017c <__aeabi_dsub>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	a318      	add	r3, pc, #96	; (adr r3, 8001528 <_ZN7LPS22HB13get_relalt_ftEv+0xc0>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014d0:	f7fe fe56 	bl	8000180 <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7ff f806 	bl	80004ec <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double alt_m = fraction_top / 0.0065;
 80014e8:	a311      	add	r3, pc, #68	; (adr r3, 8001530 <_ZN7LPS22HB13get_relalt_ftEv+0xc8>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014f2:	f7ff f925 	bl	8000740 <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return alt_m * 3.281; //Convert to ft and return
 80014fe:	a30e      	add	r3, pc, #56	; (adr r3, 8001538 <_ZN7LPS22HB13get_relalt_ftEv+0xd0>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001508:	f7fe fff0 	bl	80004ec <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3738      	adds	r7, #56	; 0x38
 8001516:	46bd      	mov	sp, r7
 8001518:	bdb0      	pop	{r4, r5, r7, pc}
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w
 8001520:	7dee2d4a 	.word	0x7dee2d4a
 8001524:	3fc85936 	.word	0x3fc85936
 8001528:	66666666 	.word	0x66666666
 800152c:	40711266 	.word	0x40711266
 8001530:	76c8b439 	.word	0x76c8b439
 8001534:	3f7a9fbe 	.word	0x3f7a9fbe
 8001538:	ed916873 	.word	0xed916873
 800153c:	400a3f7c 	.word	0x400a3f7c
 8001540:	3ff00000 	.word	0x3ff00000

08001544 <_ZN7LPS22HB9calibrateEhh>:

void LPS22HB::calibrate(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
 8001550:	4613      	mov	r3, r2
 8001552:	70bb      	strb	r3, [r7, #2]
	this->reference_temperature = this->get_calibration_temperature(num_samples, sample_time_ms);
 8001554:	78ba      	ldrb	r2, [r7, #2]
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f81e 	bl	800159c <_ZN7LPS22HB27get_calibration_temperatureEhh>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fa98 	bl	8000a9c <__aeabi_d2uiz>
 800156c:	4603      	mov	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	811a      	strh	r2, [r3, #8]
	this->reference_pressure = this->get_calibration_pressure(num_samples, sample_time_ms);
 8001574:	78ba      	ldrb	r2, [r7, #2]
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f868 	bl	8001650 <_ZN7LPS22HB24get_calibration_pressureEhh>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa88 	bl	8000a9c <__aeabi_d2uiz>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	80da      	strh	r2, [r3, #6]
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZN7LPS22HB27get_calibration_temperatureEhh>:

double LPS22HB::get_calibration_temperature(uint8_t num_samples, uint8_t sample_time_ms)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
 80015a8:	4613      	mov	r3, r2
 80015aa:	70bb      	strb	r3, [r7, #2]
	STM_USB::println("\r\n\nCalibrating LPS Temperature:");
 80015ac:	4825      	ldr	r0, [pc, #148]	; (8001644 <_ZN7LPS22HB27get_calibration_temperatureEhh+0xa8>)
 80015ae:	f001 fb89 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>

	double cum_val = 0;
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double avg_val = 0;
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t sample = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80015ce:	7ffa      	ldrb	r2, [r7, #31]
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d219      	bcs.n	800160a <_ZN7LPS22HB27get_calibration_temperatureEhh+0x6e>
		double _temp = this->get_temp();
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fef2 	bl	80013c0 <_ZN7LPS22HB8get_tempEv>
 80015dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
		STM_USB::print(".");
 80015e0:	4819      	ldr	r0, [pc, #100]	; (8001648 <_ZN7LPS22HB27get_calibration_temperatureEhh+0xac>)
 80015e2:	f001 fb59 	bl	8002c98 <_ZN7STM_USB5printEPc>
		cum_val += _temp;
 80015e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015ee:	f7fe fdc7 	bl	8000180 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		HAL_Delay(sample_time_ms);
 80015fa:	78bb      	ldrb	r3, [r7, #2]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fb25 	bl	8003c4c <HAL_Delay>
		sample ++;
 8001602:	7ffb      	ldrb	r3, [r7, #31]
 8001604:	3301      	adds	r3, #1
 8001606:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 8001608:	e7e1      	b.n	80015ce <_ZN7LPS22HB27get_calibration_temperatureEhh+0x32>
	}
	avg_val = cum_val / (double)num_samples;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fef3 	bl	80003f8 <__aeabi_ui2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800161a:	f7ff f891 	bl	8000740 <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9c7 2304 	strd	r2, r3, [r7, #16]
	STM_USB::print("\r\nAverage Temperature (C): ");
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <_ZN7LPS22HB27get_calibration_temperatureEhh+0xb0>)
 8001628:	f001 fb36 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(avg_val);
 800162c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001630:	f001 fab2 	bl	8002b98 <_ZN7STM_USB5printEd>
	return avg_val;
 8001634:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	0800cb90 	.word	0x0800cb90
 8001648:	0800cbb0 	.word	0x0800cbb0
 800164c:	0800cbb4 	.word	0x0800cbb4

08001650 <_ZN7LPS22HB24get_calibration_pressureEhh>:

double LPS22HB::get_calibration_pressure(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
 800165c:	4613      	mov	r3, r2
 800165e:	70bb      	strb	r3, [r7, #2]
	STM_USB::println("\r\n\nCalibrating LPS Pressure:\n");
 8001660:	4825      	ldr	r0, [pc, #148]	; (80016f8 <_ZN7LPS22HB24get_calibration_pressureEhh+0xa8>)
 8001662:	f001 fb2f 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>

	double cum_val = 0;
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double avg_val = 0;
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t sample = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 8001682:	7ffa      	ldrb	r2, [r7, #31]
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	429a      	cmp	r2, r3
 8001688:	d219      	bcs.n	80016be <_ZN7LPS22HB24get_calibration_pressureEhh+0x6e>
		double _temp = this->get_pressure();
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe62 	bl	8001354 <_ZN7LPS22HB12get_pressureEv>
 8001690:	e9c7 0102 	strd	r0, r1, [r7, #8]
		STM_USB::print(".");
 8001694:	4819      	ldr	r0, [pc, #100]	; (80016fc <_ZN7LPS22HB24get_calibration_pressureEhh+0xac>)
 8001696:	f001 faff 	bl	8002c98 <_ZN7STM_USB5printEPc>
		cum_val += _temp;
 800169a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800169e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016a2:	f7fe fd6d 	bl	8000180 <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
		HAL_Delay(sample_time_ms);
 80016ae:	78bb      	ldrb	r3, [r7, #2]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 facb 	bl	8003c4c <HAL_Delay>
		sample ++;
 80016b6:	7ffb      	ldrb	r3, [r7, #31]
 80016b8:	3301      	adds	r3, #1
 80016ba:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80016bc:	e7e1      	b.n	8001682 <_ZN7LPS22HB24get_calibration_pressureEhh+0x32>
	}
	avg_val = cum_val / (double)num_samples;
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fe99 	bl	80003f8 <__aeabi_ui2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016ce:	f7ff f837 	bl	8000740 <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	STM_USB::print("\r\nAverage Pressure (PA): ");
 80016da:	4809      	ldr	r0, [pc, #36]	; (8001700 <_ZN7LPS22HB24get_calibration_pressureEhh+0xb0>)
 80016dc:	f001 fadc 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(avg_val);
 80016e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e4:	f001 fa58 	bl	8002b98 <_ZN7STM_USB5printEd>
	return avg_val;
 80016e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800cbd0 	.word	0x0800cbd0
 80016fc:	0800cbb0 	.word	0x0800cbb0
 8001700:	0800cbf0 	.word	0x0800cbf0

08001704 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft>:
 *  Created on: Sep 23, 2023
 *      Author: kking
 */
#include "altimex.h"

Altimex::Altimex(UART_HandleTypeDef* _uart, I2C_HandleTypeDef* i2c_config, TIM_HandleTypeDef* _timer, uint16_t _writeInterval):
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b09b      	sub	sp, #108	; 0x6c
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
	alt(0.0),
	barometer(new LPS22HB(i2c_config, LPS_DEFAULT_ADDRESS)),
	step(0),
	eeprom(new AltimexEeprom(0xA0, i2c_config)),
	lastWrite(0),
	writeInterval(_writeInterval)
 8001712:	68f9      	ldr	r1, [r7, #12]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800173a:	839a      	strh	r2, [r3, #28]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	barometer(new LPS22HB(i2c_config, LPS_DEFAULT_ADDRESS)),
 8001744:	200c      	movs	r0, #12
 8001746:	f006 fe17 	bl	8008378 <_Znwj>
 800174a:	4603      	mov	r3, r0
 800174c:	461c      	mov	r4, r3
 800174e:	225c      	movs	r2, #92	; 0x5c
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff fd2c 	bl	80011b0 <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>
	writeInterval(_writeInterval)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	675c      	str	r4, [r3, #116]	; 0x74
	eeprom(new AltimexEeprom(0xA0, i2c_config)),
 800175c:	2008      	movs	r0, #8
 800175e:	f006 fe0b 	bl	8008378 <_Znwj>
 8001762:	4603      	mov	r3, r0
 8001764:	461c      	mov	r4, r3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	21a0      	movs	r1, #160	; 0xa0
 800176a:	4620      	mov	r0, r4
 800176c:	f000 f996 	bl	8001a9c <_ZN13AltimexEepromC1EtP17I2C_HandleTypeDef>
	writeInterval(_writeInterval)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	679c      	str	r4, [r3, #120]	; 0x78
{
	AltimexUsb::init(eeprom);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001778:	4618      	mov	r0, r3
 800177a:	f000 ff99 	bl	80026b0 <_ZN10AltimexUsb4initEP13AltimexEeprom>
	STM_USB::init(_uart);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f001 f9d2 	bl	8002b28 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>
	STM_USB::println("\r\n\n\n\n\n\nAltimex Boot...");
 8001784:	4830      	ldr	r0, [pc, #192]	; (8001848 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft+0x144>)
 8001786:	f001 fa9d 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
	LPS22HB::LPS_INIT_STATUS baro_init_status = barometer->init();
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fd27 	bl	80011e2 <_ZN7LPS22HB4initEv>
 8001794:	4603      	mov	r3, r0
 8001796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	if(baro_init_status != LPS22HB::LPS_INIT_STATUS::SUCCESS) {
 800179a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d007      	beq.n	80017b2 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft+0xae>
		while(true) {
			STM_USB::println("Error while initializing sensor.");
 80017a2:	482a      	ldr	r0, [pc, #168]	; (800184c <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft+0x148>)
 80017a4:	f001 fa8e 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
			HAL_Delay(1000);
 80017a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ac:	f002 fa4e 	bl	8003c4c <HAL_Delay>
			STM_USB::println("Error while initializing sensor.");
 80017b0:	e7f7      	b.n	80017a2 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft+0x9e>
		}
	}

	struct AltimexConfig loaded_config;

	STM_USB::println("Loading settings");
 80017b2:	4827      	ldr	r0, [pc, #156]	; (8001850 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft+0x14c>)
 80017b4:	f001 fa86 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
	eeprom->load_configuration(&loaded_config);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f986 	bl	8001ad4 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig>

	config = loaded_config;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3320      	adds	r3, #32
 80017cc:	f107 0110 	add.w	r1, r7, #16
 80017d0:	2250      	movs	r2, #80	; 0x50
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 fafe 	bl	8009dd4 <memcpy>
	ledController = new AltimexLedController(&config, _timer);
 80017d8:	2008      	movs	r0, #8
 80017da:	f006 fdcd 	bl	8008378 <_Znwj>
 80017de:	4603      	mov	r3, r0
 80017e0:	461c      	mov	r4, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3320      	adds	r3, #32
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	4620      	mov	r0, r4
 80017ec:	f000 fa10 	bl	8001c10 <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	601c      	str	r4, [r3, #0]
	stateController = new AltimexStateController(&config);
 80017f4:	2050      	movs	r0, #80	; 0x50
 80017f6:	f006 fdbf 	bl	8008378 <_Znwj>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461c      	mov	r4, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3320      	adds	r3, #32
 8001802:	4619      	mov	r1, r3
 8001804:	4620      	mov	r0, r4
 8001806:	f000 fcf3 	bl	80021f0 <_ZN22AltimexStateControllerC1EP13AltimexConfig>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	605c      	str	r4, [r3, #4]

	print_config_to_usb();
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f822 	bl	8001858 <_ZN7Altimex19print_config_to_usbEv>

	barometer->calibrate(10, 100);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001818:	2264      	movs	r2, #100	; 0x64
 800181a:	210a      	movs	r1, #10
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe91 	bl	8001544 <_ZN7LPS22HB9calibrateEhh>
	tempF = barometer->get_tempf();
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fdf6 	bl	8001418 <_ZN7LPS22HB9get_tempfEv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	e9c1 2302 	strd	r2, r3, [r1, #8]

	//struct AltimexDataFrame dataFrames[100] = {};
	//eeprom->load_dataframes(0, 100, dataFrames);
	//eeprom->load_dataframe(0, &dataFrame);

	STM_USB::println("Setup complete");
 8001836:	4807      	ldr	r0, [pc, #28]	; (8001854 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft+0x150>)
 8001838:	f001 fa44 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
}
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4618      	mov	r0, r3
 8001840:	376c      	adds	r7, #108	; 0x6c
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	0800cc0c 	.word	0x0800cc0c
 800184c:	0800cc24 	.word	0x0800cc24
 8001850:	0800cc48 	.word	0x0800cc48
 8001854:	0800cc5c 	.word	0x0800cc5c

08001858 <_ZN7Altimex19print_config_to_usbEv>:

void Altimex::print_config_to_usb()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	STM_USB::print("Gear Check Notification Altitude: ");
 8001860:	483b      	ldr	r0, [pc, #236]	; (8001950 <_ZN7Altimex19print_config_to_usbEv+0xf8>)
 8001862:	f001 fa19 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.gearCheckAlt);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f001 f992 	bl	8002b98 <_ZN7STM_USB5printEd>

	STM_USB::print("Exit Altitude (ft): ");
 8001874:	4837      	ldr	r0, [pc, #220]	; (8001954 <_ZN7Altimex19print_config_to_usbEv+0xfc>)
 8001876:	f001 fa0f 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.exit);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f001 f988 	bl	8002b98 <_ZN7STM_USB5printEd>

	STM_USB::print("Breakoff Altitude (ft): ");
 8001888:	4833      	ldr	r0, [pc, #204]	; (8001958 <_ZN7Altimex19print_config_to_usbEv+0x100>)
 800188a:	f001 fa05 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.breakoff);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f001 f97e 	bl	8002b98 <_ZN7STM_USB5printEd>

	STM_USB::print("Deployment Altitude (ft): ");
 800189c:	482f      	ldr	r0, [pc, #188]	; (800195c <_ZN7Altimex19print_config_to_usbEv+0x104>)
 800189e:	f001 f9fb 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.deploy);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f001 f974 	bl	8002b98 <_ZN7STM_USB5printEd>

	STM_USB::print("Ascent Threshold: ");
 80018b0:	482b      	ldr	r0, [pc, #172]	; (8001960 <_ZN7Altimex19print_config_to_usbEv+0x108>)
 80018b2:	f001 f9f1 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.ascentThreshold);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f001 f96a 	bl	8002b98 <_ZN7STM_USB5printEd>

	STM_USB::print("Ascent Threshold Time (ms): ");
 80018c4:	4827      	ldr	r0, [pc, #156]	; (8001964 <_ZN7Altimex19print_config_to_usbEv+0x10c>)
 80018c6:	f001 f9e7 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.ascentThresholdTime);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 f9a2 	bl	8002c18 <_ZN7STM_USB5printEt>

	STM_USB::print("Deploy Test Threshold Time (ms): ");
 80018d4:	4824      	ldr	r0, [pc, #144]	; (8001968 <_ZN7Altimex19print_config_to_usbEv+0x110>)
 80018d6:	f001 f9df 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.deployTestThresholdTime);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f99a 	bl	8002c18 <_ZN7STM_USB5printEt>

	STM_USB::print("Gear Check Notification Length (ms): ");
 80018e4:	4821      	ldr	r0, [pc, #132]	; (800196c <_ZN7Altimex19print_config_to_usbEv+0x114>)
 80018e6:	f001 f9d7 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.gearCheckNotificationLength);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 f9b2 	bl	8002c58 <_ZN7STM_USB5printEm>

	STM_USB::print("Freefall Threshold Time (ms): ");
 80018f4:	481e      	ldr	r0, [pc, #120]	; (8001970 <_ZN7Altimex19print_config_to_usbEv+0x118>)
 80018f6:	f001 f9cf 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.freefallThresholdTime);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 f9aa 	bl	8002c58 <_ZN7STM_USB5printEm>

	STM_USB::print("Standby Flash On Length (ms): ");
 8001904:	481b      	ldr	r0, [pc, #108]	; (8001974 <_ZN7Altimex19print_config_to_usbEv+0x11c>)
 8001906:	f001 f9c7 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.standbyFlashOnLength);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f9a2 	bl	8002c58 <_ZN7STM_USB5printEm>

	STM_USB::print("Standby Flash Off Length (ms): ");
 8001914:	4818      	ldr	r0, [pc, #96]	; (8001978 <_ZN7Altimex19print_config_to_usbEv+0x120>)
 8001916:	f001 f9bf 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.standbyFlashOffLength);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	4618      	mov	r0, r3
 8001920:	f001 f99a 	bl	8002c58 <_ZN7STM_USB5printEm>

	STM_USB::print("Brightness (0-40): ");
 8001924:	4815      	ldr	r0, [pc, #84]	; (800197c <_ZN7Altimex19print_config_to_usbEv+0x124>)
 8001926:	f001 f9b7 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.brightness);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001930:	4618      	mov	r0, r3
 8001932:	f001 f951 	bl	8002bd8 <_ZN7STM_USB5printEh>

	STM_USB::print("Standby Brightness (0-40): ");
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <_ZN7Altimex19print_config_to_usbEv+0x128>)
 8001938:	f001 f9ae 	bl	8002c98 <_ZN7STM_USB5printEPc>
	STM_USB::print(config.standbyBrightness);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001942:	4618      	mov	r0, r3
 8001944:	f001 f948 	bl	8002bd8 <_ZN7STM_USB5printEh>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	0800cc6c 	.word	0x0800cc6c
 8001954:	0800cc90 	.word	0x0800cc90
 8001958:	0800cca8 	.word	0x0800cca8
 800195c:	0800ccc4 	.word	0x0800ccc4
 8001960:	0800cce0 	.word	0x0800cce0
 8001964:	0800ccf4 	.word	0x0800ccf4
 8001968:	0800cd14 	.word	0x0800cd14
 800196c:	0800cd38 	.word	0x0800cd38
 8001970:	0800cd60 	.word	0x0800cd60
 8001974:	0800cd80 	.word	0x0800cd80
 8001978:	0800cda0 	.word	0x0800cda0
 800197c:	0800cdc0 	.word	0x0800cdc0
 8001980:	0800cdd4 	.word	0x0800cdd4

08001984 <_ZN7Altimex4tickEv>:

void Altimex::tick()
{
 8001984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001988:	b089      	sub	sp, #36	; 0x24
 800198a:	af04      	add	r7, sp, #16
 800198c:	6078      	str	r0, [r7, #4]
	tempF = barometer->get_tempf();
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fd40 	bl	8001418 <_ZN7LPS22HB9get_tempfEv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AltimexUsb::handle_received_command();
 80019a2:	f000 fe93 	bl	80026cc <_ZN10AltimexUsb23handle_received_commandEv>
		if(alt < 2500) alt -= 5;
		else alt -= 29;
	  }
	*/

	alt = barometer->get_relalt_ft();
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fd5c 	bl	8001468 <_ZN7LPS22HB13get_relalt_ftEv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	stateController->update_state(alt);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019c4:	4608      	mov	r0, r1
 80019c6:	f000 fc6b 	bl	80022a0 <_ZN22AltimexStateController12update_stateEd>
	ledController->display_leds(stateController->get_state(), step, alt);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681c      	ldr	r4, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fc56 	bl	8002284 <_ZN22AltimexStateController9get_stateEv>
 80019d8:	4603      	mov	r3, r0
 80019da:	461e      	mov	r6, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8b3 5070 	ldrh.w	r5, [r3, #112]	; 0x70
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f856 	bl	8000a9c <__aeabi_d2uiz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	462a      	mov	r2, r5
 80019f6:	4631      	mov	r1, r6
 80019f8:	4620      	mov	r0, r4
 80019fa:	f000 f929 	bl	8001c50 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>

	uint16_t temp = HAL_GetTick() - lastWrite;
 80019fe:	f002 f91b 	bl	8003c38 <HAL_GetTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	81fb      	strh	r3, [r7, #14]
	if(HAL_GetTick() - lastWrite > writeInterval) {
 8001a10:	f002 f912 	bl	8003c38 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	8b92      	ldrh	r2, [r2, #28]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	bf8c      	ite	hi
 8001a24:	2301      	movhi	r3, #1
 8001a26:	2300      	movls	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01d      	beq.n	8001a6a <_ZN7Altimex4tickEv+0xe6>
		eeprom->save_dataframe(tempF, alt, stateController->get_state());
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc1e 	bl	8002284 <_ZN22AltimexStateController9get_stateEv>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	e9cd 4500 	strd	r4, r5, [sp]
 8001a50:	4642      	mov	r2, r8
 8001a52:	464b      	mov	r3, r9
 8001a54:	4630      	mov	r0, r6
 8001a56:	f000 f869 	bl	8001b2c <_ZN13AltimexEeprom14save_dataframeEddh>
		lastWrite = HAL_GetTick();
 8001a5a:	f002 f8ed 	bl	8003c38 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
		STM_USB::println("Saved data to storage.");
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <_ZN7Altimex4tickEv+0x114>)
 8001a66:	f001 f92d 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
	}

	step++;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001a70:	3301      	adds	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	if(step > 100) step = 0;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d903      	bls.n	8001a8c <_ZN7Altimex4tickEv+0x108>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a96:	bf00      	nop
 8001a98:	0800cdf0 	.word	0x0800cdf0

08001a9c <_ZN13AltimexEepromC1EtP17I2C_HandleTypeDef>:
 *      Author: kking
 */

#include "altimex_eeprom.h"

AltimexEeprom::AltimexEeprom(uint16_t _address, I2C_HandleTypeDef* _i2cx):
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	817b      	strh	r3, [r7, #10]
	storage(new EepromStorage(_address, _i2cx)),
 8001aaa:	200c      	movs	r0, #12
 8001aac:	f006 fc64 	bl	8008378 <_Znwj>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	897b      	ldrh	r3, [r7, #10]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4620      	mov	r0, r4
 8001abc:	f000 ff2a 	bl	8002914 <_ZN13EepromStorageC1EtP17I2C_HandleTypeDef>
	dataFrameWriteIndex(0)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	601c      	str	r4, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	809a      	strh	r2, [r3, #4]
{

}
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig>:

	storage->write_from(CONFIGURATION_OFFSET, sizeof(AltimexConfig), data);
}

void AltimexEeprom::load_configuration(AltimexConfig* config)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b098      	sub	sp, #96	; 0x60
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	uint8_t data[sizeof(AltimexConfig)];
	HAL_StatusTypeDef status = storage->read(CONFIGURATION_OFFSET, sizeof(AltimexConfig), data);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2250      	movs	r2, #80	; 0x50
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f000 ff2b 	bl	8002944 <_ZN13EepromStorage4readEtjPh>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (status == HAL_OK) {
 8001af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x40>
        // Copy the data from the byte array into the config struct
        memcpy(config, data, sizeof(AltimexConfig));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2250      	movs	r2, #80	; 0x50
 8001b06:	4619      	mov	r1, r3
 8001b08:	f008 f964 	bl	8009dd4 <memcpy>
    	STM_USB::println("Loaded configuration!");
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x50>)
 8001b0e:	f001 f8d9 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
    } else {
    	STM_USB::println("Error loading configuration from EEPROM");
    }
}
 8001b12:	e002      	b.n	8001b1a <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x46>
    	STM_USB::println("Error loading configuration from EEPROM");
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x54>)
 8001b16:	f001 f8d5 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
}
 8001b1a:	bf00      	nop
 8001b1c:	3760      	adds	r7, #96	; 0x60
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	0800ce08 	.word	0x0800ce08
 8001b28:	0800ce20 	.word	0x0800ce20

08001b2c <_ZN13AltimexEeprom14save_dataframeEddh>:

void AltimexEeprom::save_dataframe(double tempF, double relAltFt, uint8_t state)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	; 0x38
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	e9c7 2300 	strd	r2, r3, [r7]
	if((dataFrameWriteIndex + 1) * sizeof(AltimexDataFrame) > STORAGE_SIZE_BYTES) {
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	889b      	ldrh	r3, [r3, #4]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <_ZN13AltimexEeprom14save_dataframeEddh+0x98>)
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d834      	bhi.n	8001bba <_ZN13AltimexEeprom14save_dataframeEddh+0x8e>
		return;
	}

	float f_tempF = (float)tempF;
 8001b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b54:	f7fe ffc2 	bl	8000adc <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
	float f_relAltFt = (float)relAltFt;
 8001b5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b60:	f7fe ffbc 	bl	8000adc <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30

	AltimexDataFrame dataFrame = {
			f_tempF,
			f_relAltFt,
			state
	};
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	uint8_t data_bytes[sizeof(AltimexDataFrame)];
	memcpy(data_bytes, &dataFrame, sizeof(AltimexDataFrame));
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	f107 0220 	add.w	r2, r7, #32
 8001b80:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_StatusTypeDef status = storage->write_from(LOGS_OFFSET + (dataFrameWriteIndex * sizeof(AltimexDataFrame)), sizeof(AltimexDataFrame), data_bytes);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	889b      	ldrh	r3, [r3, #4]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	0052      	lsls	r2, r2, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3350      	adds	r3, #80	; 0x50
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	f000 ff0d 	bl	80029c0 <_ZN13EepromStorage10write_fromEtjPh>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	//load_dataframe(dataFrameWriteIndex, &dataFrame);
	dataFrameWriteIndex ++;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	889b      	ldrh	r3, [r3, #4]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	809a      	strh	r2, [r3, #4]
 8001bb8:	e000      	b.n	8001bbc <_ZN13AltimexEeprom14save_dataframeEddh+0x90>
		return;
 8001bba:	bf00      	nop
}
 8001bbc:	3738      	adds	r7, #56	; 0x38
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	000f4240 	.word	0x000f4240

08001bc8 <_ZN13AltimexEeprom14load_dataframeEtP16AltimexDataFrame>:

void AltimexEeprom::load_dataframe(uint16_t index, AltimexDataFrame* dataFrame)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	817b      	strh	r3, [r7, #10]
	uint8_t data[sizeof(AltimexDataFrame)];
	HAL_StatusTypeDef status = storage->read(LOGS_OFFSET + (sizeof(AltimexDataFrame) * index), sizeof(AltimexDataFrame), data);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	897b      	ldrh	r3, [r7, #10]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3350      	adds	r3, #80	; 0x50
 8001be8:	b299      	uxth	r1, r3
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	220c      	movs	r2, #12
 8001bf0:	f000 fea8 	bl	8002944 <_ZN13EepromStorage4readEtjPh>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	77fb      	strb	r3, [r7, #31]
	memcpy(dataFrame, data, sizeof(AltimexDataFrame));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c02:	6020      	str	r0, [r4, #0]
 8001c04:	6061      	str	r1, [r4, #4]
 8001c06:	60a2      	str	r2, [r4, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	3724      	adds	r7, #36	; 0x24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>:
#include <altimex_led_controller.h>

uint32_t standbyLastFlash = 0;
uint32_t lastLedTurnonTime = 0;

AltimexLedController::AltimexLedController(AltimexConfig* _config, TIM_HandleTypeDef* _timer):
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
		config(_config),
		ledStrip(new LedStrip(_timer))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	2008      	movs	r0, #8
 8001c24:	f006 fba8 	bl	8008378 <_Znwj>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461c      	mov	r4, r3
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f000 fee8 	bl	8002a04 <_ZN8LedStripC1EP17TIM_HandleTypeDef>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	605c      	str	r4, [r3, #4]
{
	this->ledStrip->clear();
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 ff21 	bl	8002a84 <_ZN8LedStrip5clearEv>
}
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	0000      	movs	r0, r0
	...

08001c50 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>:

void AltimexLedController::display_leds(enum AltimexState state, uint16_t step, uint16_t alt)
{
 8001c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c54:	b08a      	sub	sp, #40	; 0x28
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	4608      	mov	r0, r1
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4603      	mov	r3, r0
 8001c62:	72fb      	strb	r3, [r7, #11]
 8001c64:	460b      	mov	r3, r1
 8001c66:	813b      	strh	r3, [r7, #8]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	80fb      	strh	r3, [r7, #6]
	//Periodically flashes to show that the device is on
	if(state == ALTIMEX_STANDBY)
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d172      	bne.n	8001d58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
	{
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7e:	4413      	add	r3, r2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
		this->ledStrip->set_brightness(this->config->standbyBrightness);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f000 ff11 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>

		//If board has just been turned on
		if(standbyLastFlash == 0 && HAL_GetTick() < 3000)
 8001c96:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 8001c9e:	f001 ffcb 	bl	8003c38 <HAL_GetTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d801      	bhi.n	8001cb0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x62>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01c      	beq.n	8001cf0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xa0>
		{
			uint8_t on = (step) % 2 == 0;
 8001cb6:	893b      	ldrh	r3, [r7, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t leds = on * this->config->numLeds;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			this->ledStrip->progress_bar_single_color(leds, PURPLE);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fea6 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001cee:	e033      	b.n	8001d58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
		}
		else {
			//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
			if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001cf0:	f001 ffa2 	bl	8003c38 <HAL_GetTick>
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4299      	cmp	r1, r3
 8001d00:	bf8c      	ite	hi
 8001d02:	2301      	movhi	r3, #1
 8001d04:	2300      	movls	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xc8>
				standbyLastFlash = HAL_GetTick();
 8001d0c:	f001 ff94 	bl	8003c38 <HAL_GetTick>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4a33      	ldr	r2, [pc, #204]	; (8001de0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01f      	b.n	8001d58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
			}
			else
			{
				//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
				if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	18d4      	adds	r4, r2, r3
 8001d24:	f001 ff88 	bl	8003c38 <HAL_GetTick>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	429c      	cmp	r4, r3
 8001d2c:	bf34      	ite	cc
 8001d2e:	2301      	movcc	r3, #1
 8001d30:	2300      	movcs	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xfe>
				{
					this->ledStrip->progress_bar_single_color(this->config->numLeds, GREEN);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6858      	ldr	r0, [r3, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d44:	2200      	movs	r2, #0
 8001d46:	4619      	mov	r1, r3
 8001d48:	f000 fe77 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001d4c:	e004      	b.n	8001d58 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
				}
				else
				{
					this->ledStrip->clear();
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fe96 	bl	8002a84 <_ZN8LedStrip5clearEv>
			}
		}
	}

	//Led bar with top led flashing. Full when at gear check altitude
	if(state == ALTIMEX_ASCENT)
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d147      	bne.n	8001dee <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	f000 fea3 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7e:	4413      	add	r3, r2
 8001d80:	61fb      	str	r3, [r7, #28]

		//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
		if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001d82:	f001 ff59 	bl	8003c38 <HAL_GetTick>
 8001d86:	4601      	mov	r1, r0
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4299      	cmp	r1, r3
 8001d92:	bf8c      	ite	hi
 8001d94:	2301      	movhi	r3, #1
 8001d96:	2300      	movls	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x15a>
			standbyLastFlash = HAL_GetTick();
 8001d9e:	f001 ff4b 	bl	8003c38 <HAL_GetTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e021      	b.n	8001dee <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
		}
		else
		{
			//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
			if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	18d4      	adds	r4, r2, r3
 8001db6:	f001 ff3f 	bl	8003c38 <HAL_GetTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	429c      	cmp	r4, r3
 8001dbe:	bf34      	ite	cc
 8001dc0:	2301      	movcc	r3, #1
 8001dc2:	2300      	movcs	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x194>
			{
				this->ledStrip->progress_bar_single_color(this->config->numLeds, YELLOW);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6858      	ldr	r0, [r3, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f000 fe2e 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001dde:	e006      	b.n	8001dee <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
 8001de0:	200002b8 	.word	0x200002b8
			}
			else
			{
				this->ledStrip->clear();
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fe4b 	bl	8002a84 <_ZN8LedStrip5clearEv>
		Strip_Progress_Bar_Single_Color(i, GREEN);
		*/
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_GEARCHECK)
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d128      	bne.n	8001e46 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x1f6>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f000 fe58 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t flash = (step / 7) % 2 == 0;
 8001e08:	893a      	ldrh	r2, [r7, #8]
 8001e0a:	4bbf      	ldr	r3, [pc, #764]	; (8002108 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b8>)
 8001e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e10:	1ad2      	subs	r2, r2, r3
 8001e12:	0852      	lsrs	r2, r2, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	76fb      	strb	r3, [r7, #27]
		this->ledStrip->progress_bar_single_color(flash * this->config->numLeds, GREEN);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6858      	ldr	r0, [r3, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e36:	7efa      	ldrb	r2, [r7, #27]
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4619      	mov	r1, r3
 8001e42:	f000 fdfa 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Solid blue while awaiting jump
	if(state == ALTIMEX_DETECT_FREEFALL_START)
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d113      	bne.n	8001e74 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x224>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 fe2c 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		this->ledStrip->progress_bar_single_color(this->config->numLeds, SKYBLUE);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6858      	ldr	r0, [r3, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f000 fde3 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude + 1500ft
	if(state == ALTIMEX_FREEFALL)
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d16a      	bne.n	8001f50 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x300>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f000 fe15 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds) * (1-(float)(alt - (this->config->breakoff + 1500)) / (this->config->exit - (this->config->breakoff + 1500)));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fabe 	bl	8000418 <__aeabi_i2d>
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4689      	mov	r9, r1
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fab8 	bl	8000418 <__aeabi_i2d>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	460d      	mov	r5, r1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001eb4:	a392      	add	r3, pc, #584	; (adr r3, 8002100 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f7fe f961 	bl	8000180 <__adddf3>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f7fe f959 	bl	800017c <__aeabi_dsub>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe03 	bl	8000adc <__aeabi_d2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe faaf 	bl	800043c <__aeabi_f2d>
 8001ede:	4682      	mov	sl, r0
 8001ee0:	468b      	mov	fp, r1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ef2:	a383      	add	r3, pc, #524	; (adr r3, 8002100 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe f942 	bl	8000180 <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4620      	mov	r0, r4
 8001f02:	4629      	mov	r1, r5
 8001f04:	f7fe f93a 	bl	800017c <__aeabi_dsub>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4650      	mov	r0, sl
 8001f0e:	4659      	mov	r1, fp
 8001f10:	f7fe fc16 	bl	8000740 <__aeabi_ddiv>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	497b      	ldr	r1, [pc, #492]	; (800210c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001f1e:	f7fe f92d 	bl	800017c <__aeabi_dsub>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4640      	mov	r0, r8
 8001f28:	4649      	mov	r1, r9
 8001f2a:	f7fe fadf 	bl	80004ec <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fdb1 	bl	8000a9c <__aeabi_d2uiz>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	76bb      	strb	r3, [r7, #26]
		this->ledStrip->progress_bar_single_color(leds + 1, SKYBLUE);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6858      	ldr	r0, [r3, #4]
 8001f42:	7ebb      	ldrb	r3, [r7, #26]
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f000 fd75 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude
	if(state == ALTIMEX_APPROACHING_BREAKOFF)
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d15e      	bne.n	8002014 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x3c4>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f000 fda7 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->breakoff) / ((this->config->breakoff + 1500) - this->config->breakoff));
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f72:	3301      	adds	r3, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fa4f 	bl	8000418 <__aeabi_i2d>
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	460d      	mov	r5, r1
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fa49 	bl	8000418 <__aeabi_i2d>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f8e:	f7fe f8f5 	bl	800017c <__aeabi_dsub>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fd9f 	bl	8000adc <__aeabi_d2f>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa4b 	bl	800043c <__aeabi_f2d>
 8001fa6:	4680      	mov	r8, r0
 8001fa8:	4689      	mov	r9, r1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001fb2:	a353      	add	r3, pc, #332	; (adr r3, 8002100 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe f8e2 	bl	8000180 <__adddf3>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001fcc:	f7fe f8d6 	bl	800017c <__aeabi_dsub>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4640      	mov	r0, r8
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	f7fe fbb2 	bl	8000740 <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	f04f 0000 	mov.w	r0, #0
 8001fe4:	4949      	ldr	r1, [pc, #292]	; (800210c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001fe6:	f7fe f8c9 	bl	800017c <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4620      	mov	r0, r4
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f7fe fa7b 	bl	80004ec <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd4d 	bl	8000a9c <__aeabi_d2uiz>
 8002002:	4603      	mov	r3, r0
 8002004:	767b      	strb	r3, [r7, #25]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	7e79      	ldrb	r1, [r7, #25]
 800200c:	2200      	movs	r2, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fd13 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_BREAKOFF)
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d121      	bne.n	800205e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x40e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f000 fd45 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 800202e:	893b      	ldrh	r3, [r7, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	763b      	strb	r3, [r7, #24]
		uint8_t leds = on * this->config->numLeds;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002048:	7e3a      	ldrb	r2, [r7, #24]
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	75fb      	strb	r3, [r7, #23]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	7df9      	ldrb	r1, [r7, #23]
 8002056:	2200      	movs	r2, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fcee 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching deployment altitude
	if(state == ALTIMEX_TRACK)
 800205e:	7afb      	ldrb	r3, [r7, #11]
 8002060:	2b07      	cmp	r3, #7
 8002062:	d169      	bne.n	8002138 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4e8>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fd20 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->deploy) / ((this->config->deploy + 500) - this->config->deploy));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002080:	3301      	adds	r3, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f9c8 	bl	8000418 <__aeabi_i2d>
 8002088:	4604      	mov	r4, r0
 800208a:	460d      	mov	r5, r1
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f9c2 	bl	8000418 <__aeabi_i2d>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800209c:	f7fe f86e 	bl	800017c <__aeabi_dsub>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fd18 	bl	8000adc <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9c4 	bl	800043c <__aeabi_f2d>
 80020b4:	4680      	mov	r8, r0
 80020b6:	4689      	mov	r9, r1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c0>)
 80020c6:	f7fe f85b 	bl	8000180 <__adddf3>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020da:	f7fe f84f 	bl	800017c <__aeabi_dsub>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4640      	mov	r0, r8
 80020e4:	4649      	mov	r1, r9
 80020e6:	f7fe fb2b 	bl	8000740 <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	f04f 0000 	mov.w	r0, #0
 80020f2:	4906      	ldr	r1, [pc, #24]	; (800210c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 80020f4:	f7fe f842 	bl	800017c <__aeabi_dsub>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	e009      	b.n	8002114 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c4>
 8002100:	00000000 	.word	0x00000000
 8002104:	40977000 	.word	0x40977000
 8002108:	24924925 	.word	0x24924925
 800210c:	3ff00000 	.word	0x3ff00000
 8002110:	407f4000 	.word	0x407f4000
 8002114:	4629      	mov	r1, r5
 8002116:	f7fe f9e9 	bl	80004ec <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe fcbb 	bl	8000a9c <__aeabi_d2uiz>
 8002126:	4603      	mov	r3, r0
 8002128:	75bb      	strb	r3, [r7, #22]
		this->ledStrip->progress_bar_single_color(leds, RED);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	7db9      	ldrb	r1, [r7, #22]
 8002130:	2202      	movs	r2, #2
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fc81 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes red until detects canopy deployment
	if(state == ALTIMEX_DEPLOY)
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d121      	bne.n	8002182 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x532>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f000 fcb3 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 8002152:	893b      	ldrh	r3, [r7, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	757b      	strb	r3, [r7, #21]
		uint8_t leds = on * this->config->numLeds;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800216c:	7d7a      	ldrb	r2, [r7, #21]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	753b      	strb	r3, [r7, #20]
		this->ledStrip->progress_bar_single_color(leds, RED);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	7d39      	ldrb	r1, [r7, #20]
 800217a:	2202      	movs	r2, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fc5c 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes purple
	if(state == ALTIMEX_CANOPY)
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	2b09      	cmp	r3, #9
 8002186:	d126      	bne.n	80021d6 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x586>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f000 fc8e 	bl	8002ab8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step/10) % 2 == 0;
 800219c:	893b      	ldrh	r3, [r7, #8]
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x59c>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	74fb      	strb	r3, [r7, #19]
		uint8_t leds = on * this->config->numLeds;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021c0:	7cfa      	ldrb	r2, [r7, #19]
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	74bb      	strb	r3, [r7, #18]
		this->ledStrip->progress_bar_single_color(leds, PURPLE);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	7cb9      	ldrb	r1, [r7, #18]
 80021ce:	2203      	movs	r2, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fc32 	bl	8002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	this->ledStrip->send();
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fc5f 	bl	8002a9e <_ZN8LedStrip4sendEv>
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	cccccccd 	.word	0xcccccccd

080021f0 <_ZN22AltimexStateControllerC1EP13AltimexConfig>:
 *      Author: kking
 */

#include <altimex_state_controller.h>

AltimexStateController::AltimexStateController(AltimexConfig* _config):
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
		freefallStartAlt(0.0),
		deployTestPrevAlt(0.0),
		deployTestPrevTime(0),
		deployTest(false),
		deployTestStart(0),
		deployTestStartAlt(0.0)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	721a      	strb	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	751a      	strb	r2, [r3, #20]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2020 	strb.w	r2, [r3, #32]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
{

}
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <_ZN22AltimexStateController9get_stateEv>:

enum AltimexState AltimexStateController::get_state()
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	return this->currentState;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	781b      	ldrb	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	0000      	movs	r0, r0
 800229c:	0000      	movs	r0, r0
	...

080022a0 <_ZN22AltimexStateController12update_stateEd>:

void AltimexStateController::update_state(double alt)
{
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentState == ALTIMEX_STANDBY)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d13f      	bne.n	8002334 <_ZN22AltimexStateController12update_stateEd+0x94>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > config->ascentThreshold)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c0:	f7fe fba4 	bl	8000a0c <__aeabi_dcmpgt>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d022      	beq.n	8002310 <_ZN22AltimexStateController12update_stateEd+0x70>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	7a1b      	ldrb	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <_ZN22AltimexStateController12update_stateEd+0x42>
			{
				testingAscent = 1;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	721a      	strb	r2, [r3, #8]
				ascentTestStart = HAL_GetTick();
 80022d8:	f001 fcae 	bl	8003c38 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	60da      	str	r2, [r3, #12]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	7a1b      	ldrb	r3, [r3, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d112      	bne.n	8002310 <_ZN22AltimexStateController12update_stateEd+0x70>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= config->ascentThresholdTime)
 80022ea:	f001 fca5 	bl	8003c38 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6852      	ldr	r2, [r2, #4]
 80022fa:	8912      	ldrh	r2, [r2, #8]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf2c      	ite	cs
 8002300:	2301      	movcs	r3, #1
 8002302:	2300      	movcc	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <_ZN22AltimexStateController12update_stateEd+0x70>
				{
					currentState = ALTIMEX_ASCENT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < config->ascentThreshold)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800231c:	f7fe fb58 	bl	80009d0 <__aeabi_dcmplt>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <_ZN22AltimexStateController12update_stateEd+0x94>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	7a1b      	ldrb	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <_ZN22AltimexStateController12update_stateEd+0x94>
			{
				testingAscent = 0;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	721a      	strb	r2, [r3, #8]
			}
		}
	}

	if(currentState == ALTIMEX_ASCENT)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10d      	bne.n	8002358 <_ZN22AltimexStateController12update_stateEd+0xb8>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > config->gearCheckAlt)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002348:	f7fe fb60 	bl	8000a0c <__aeabi_dcmpgt>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <_ZN22AltimexStateController12update_stateEd+0xb8>
		{
			currentState = ALTIMEX_GEARCHECK;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2202      	movs	r2, #2
 8002356:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_GEARCHECK)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d127      	bne.n	80023b0 <_ZN22AltimexStateController12update_stateEd+0x110>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	7d1b      	ldrb	r3, [r3, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <_ZN22AltimexStateController12update_stateEd+0xd8>
		{
			gearCheckNotificationStart = HAL_GetTick();
 8002368:	f001 fc66 	bl	8003c38 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	611a      	str	r2, [r3, #16]
			displayedGearCheck = 1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	751a      	strb	r2, [r3, #20]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck & HAL_GetTick() > gearCheckNotificationStart + config->gearCheckNotificationLength)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	7d1b      	ldrb	r3, [r3, #20]
 800237c:	461c      	mov	r4, r3
 800237e:	f001 fc5b 	bl	8003c38 <HAL_GetTick>
 8002382:	4601      	mov	r1, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	4413      	add	r3, r2
 8002390:	4299      	cmp	r1, r3
 8002392:	bf8c      	ite	hi
 8002394:	2301      	movhi	r3, #1
 8002396:	2300      	movls	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4023      	ands	r3, r4
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <_ZN22AltimexStateController12update_stateEd+0x110>
		{
			currentState = ALTIMEX_DETECT_FREEFALL_START;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2203      	movs	r2, #3
 80023ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DETECT_FREEFALL_START)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d17b      	bne.n	80024b0 <_ZN22AltimexStateController12update_stateEd+0x210>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023c2:	f7fe fb05 	bl	80009d0 <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d059      	beq.n	8002480 <_ZN22AltimexStateController12update_stateEd+0x1e0>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <_ZN22AltimexStateController12update_stateEd+0x152>
			{
				freefallTest = 1;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2020 	strb.w	r2, [r3, #32]
				freefallTestStart = HAL_GetTick();
 80023de:	f001 fc2b 	bl	8003c38 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24
				freefallStartAlt = alt;
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + config->freefallThresholdTime)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10c      	bne.n	8002416 <_ZN22AltimexStateController12update_stateEd+0x176>
 80023fc:	f001 fc1c 	bl	8003c38 <HAL_GetTick>
 8002400:	4601      	mov	r1, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4413      	add	r3, r2
 800240e:	4299      	cmp	r1, r3
 8002410:	d901      	bls.n	8002416 <_ZN22AltimexStateController12update_stateEd+0x176>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <_ZN22AltimexStateController12update_stateEd+0x178>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d031      	beq.n	8002480 <_ZN22AltimexStateController12update_stateEd+0x1e0>
			{
				double elapsedTimeSec = (double)(HAL_GetTick() - freefallTestStart) / 1000;
 800241c:	f001 fc0c 	bl	8003c38 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ffe5 	bl	80003f8 <__aeabi_ui2d>
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b9b      	ldr	r3, [pc, #620]	; (80026a0 <_ZN22AltimexStateController12update_stateEd+0x400>)
 8002434:	f7fe f984 	bl	8000740 <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				double avgSpeedFps = ((double)(freefallStartAlt - alt) / elapsedTimeSec);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800244a:	f7fd fe97 	bl	800017c <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800245a:	f7fe f971 	bl	8000740 <__aeabi_ddiv>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	e9c7 2308 	strd	r2, r3, [r7, #32]

				//If average speed is above 80mph
				if(avgSpeedFps >= 117.0) //80mph to fps
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b8e      	ldr	r3, [pc, #568]	; (80026a4 <_ZN22AltimexStateController12update_stateEd+0x404>)
 800246c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002470:	f7fe fac2 	bl	80009f8 <__aeabi_dcmpge>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <_ZN22AltimexStateController12update_stateEd+0x1e0>
				{
					currentState = ALTIMEX_FREEFALL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2204      	movs	r2, #4
 800247e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800248a:	f7fe fabf 	bl	8000a0c <__aeabi_dcmpgt>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <_ZN22AltimexStateController12update_stateEd+0x206>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d103      	bne.n	80024a6 <_ZN22AltimexStateController12update_stateEd+0x206>
			{
				freefallTest = 0;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}

		prevAlt = alt;
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	if(currentState == ALTIMEX_FREEFALL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d114      	bne.n	80024e2 <_ZN22AltimexStateController12update_stateEd+0x242>
	{
		if(alt < config->breakoff + 1500.0)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024c0:	a375      	add	r3, pc, #468	; (adr r3, 8002698 <_ZN22AltimexStateController12update_stateEd+0x3f8>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fd fe5b 	bl	8000180 <__adddf3>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024d2:	f7fe fa7d 	bl	80009d0 <__aeabi_dcmplt>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <_ZN22AltimexStateController12update_stateEd+0x242>
		{
			currentState = ALTIMEX_APPROACHING_BREAKOFF;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2205      	movs	r2, #5
 80024e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_APPROACHING_BREAKOFF)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d10d      	bne.n	8002506 <_ZN22AltimexStateController12update_stateEd+0x266>
	{
		if(alt < config->breakoff)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f6:	f7fe fa6b 	bl	80009d0 <__aeabi_dcmplt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <_ZN22AltimexStateController12update_stateEd+0x266>
		{
			currentState = ALTIMEX_BREAKOFF;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2206      	movs	r2, #6
 8002504:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_BREAKOFF)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d114      	bne.n	8002538 <_ZN22AltimexStateController12update_stateEd+0x298>
	{
		if(alt < config->breakoff - 500.0)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <_ZN22AltimexStateController12update_stateEd+0x408>)
 800251c:	f7fd fe2e 	bl	800017c <__aeabi_dsub>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002528:	f7fe fa52 	bl	80009d0 <__aeabi_dcmplt>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <_ZN22AltimexStateController12update_stateEd+0x298>
		{
			currentState = ALTIMEX_TRACK;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2207      	movs	r2, #7
 8002536:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_TRACK)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b07      	cmp	r3, #7
 800253e:	d10d      	bne.n	800255c <_ZN22AltimexStateController12update_stateEd+0x2bc>
	{
		if(alt < config->deploy)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800254c:	f7fe fa40 	bl	80009d0 <__aeabi_dcmplt>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <_ZN22AltimexStateController12update_stateEd+0x2bc>
		{
			currentState = ALTIMEX_DEPLOY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2208      	movs	r2, #8
 800255a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DEPLOY)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b08      	cmp	r3, #8
 8002562:	f040 8094 	bne.w	800268e <_ZN22AltimexStateController12update_stateEd+0x3ee>
	{

		if(deployTest == 0)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d13f      	bne.n	80025f0 <_ZN22AltimexStateController12update_stateEd+0x350>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			double elapsedTimeSec = (double)(HAL_GetTick() - deployTestStart) / 1000;
 8002570:	f001 fb62 	bl	8003c38 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd ff3b 	bl	80003f8 <__aeabi_ui2d>
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <_ZN22AltimexStateController12update_stateEd+0x400>)
 8002588:	f7fe f8da 	bl	8000740 <__aeabi_ddiv>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double avgSpeedFps = fabs((double)(deployTestStartAlt - alt) / elapsedTimeSec);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800259a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800259e:	f7fd fded 	bl	800017c <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ae:	f7fe f8c7 	bl	8000740 <__aeabi_ddiv>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	6139      	str	r1, [r7, #16]
 80025ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025be:	617b      	str	r3, [r7, #20]
			if(avgSpeedFps <= 73.0) //50mph to fps
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <_ZN22AltimexStateController12update_stateEd+0x40c>)
 80025c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ca:	f7fe fa0b 	bl	80009e4 <__aeabi_dcmple>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <_ZN22AltimexStateController12update_stateEd+0x350>
			{
				deployTest = 1;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				deployTestStart = HAL_GetTick();
 80025dc:	f001 fb2c 	bl	8003c38 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
				deployTestStartAlt = alt;
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			}
		}
		if(deployTest == 1)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d13f      	bne.n	800267a <_ZN22AltimexStateController12update_stateEd+0x3da>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002604:	f7fd fdba 	bl	800017c <__aeabi_dsub>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
 8002610:	f001 fb12 	bl	8003c38 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd feeb 	bl	80003f8 <__aeabi_ui2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4620      	mov	r0, r4
 8002628:	4629      	mov	r1, r5
 800262a:	f7fe f889 	bl	8000740 <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	2301      	movs	r3, #1
 8002638:	461c      	mov	r4, r3
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <_ZN22AltimexStateController12update_stateEd+0x40c>)
 8002640:	f7fe f9d0 	bl	80009e4 <__aeabi_dcmple>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <_ZN22AltimexStateController12update_stateEd+0x3ae>
 800264a:	2300      	movs	r3, #0
 800264c:	461c      	mov	r4, r3
 800264e:	b2e3      	uxtb	r3, r4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <_ZN22AltimexStateController12update_stateEd+0x3da>
			{
				if(HAL_GetTick() > deployTestStart + config->deployTestThresholdTime)
 8002654:	f001 faf0 	bl	8003c38 <HAL_GetTick>
 8002658:	4601      	mov	r1, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	6852      	ldr	r2, [r2, #4]
 8002662:	8952      	ldrh	r2, [r2, #10]
 8002664:	4413      	add	r3, r2
 8002666:	4299      	cmp	r1, r3
 8002668:	bf8c      	ite	hi
 800266a:	2301      	movhi	r3, #1
 800266c:	2300      	movls	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <_ZN22AltimexStateController12update_stateEd+0x3da>
				{
					currentState = ALTIMEX_CANOPY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2209      	movs	r2, #9
 8002678:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 800267a:	f001 fadd 	bl	8003c38 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
		deployTestPrevAlt = alt;
 8002684:	68f9      	ldr	r1, [r7, #12]
 8002686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800268a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		{
			StateController_currentState = COLORALTI_STANDBY;
		}
		*/
	}
}
 800268e:	bf00      	nop
 8002690:	3730      	adds	r7, #48	; 0x30
 8002692:	46bd      	mov	sp, r7
 8002694:	bdb0      	pop	{r4, r5, r7, pc}
 8002696:	bf00      	nop
 8002698:	00000000 	.word	0x00000000
 800269c:	40977000 	.word	0x40977000
 80026a0:	408f4000 	.word	0x408f4000
 80026a4:	405d4000 	.word	0x405d4000
 80026a8:	407f4000 	.word	0x407f4000
 80026ac:	40524000 	.word	0x40524000

080026b0 <_ZN10AltimexUsb4initEP13AltimexEeprom>:
			AltimexUsb::handle_download_data_raw
		}
};

void AltimexUsb::init(AltimexEeprom* eeprom)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	data_eeprom = eeprom;
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <_ZN10AltimexUsb4initEP13AltimexEeprom+0x18>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	200002bc 	.word	0x200002bc

080026cc <_ZN10AltimexUsb23handle_received_commandEv>:

void AltimexUsb::handle_received_command()
{
 80026cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026d0:	b089      	sub	sp, #36	; 0x24
 80026d2:	af00      	add	r7, sp, #0
	uint16_t buffer_size = STM_USB::get_buffer_size();
 80026d4:	f000 fb62 	bl	8002d9c <_ZN7STM_USB15get_buffer_sizeEv>
 80026d8:	4603      	mov	r3, r0
 80026da:	837b      	strh	r3, [r7, #26]

	if(buffer_size != 0) {
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8090 	beq.w	8002804 <_ZN10AltimexUsb23handle_received_commandEv+0x138>
			AltimexCommand test_command = command_table[i];
			if(strcmp(test_command.identifier, data) == 0) {
				STM_USB::println("Command received");
				test_command.handler_function();
			}
		}
 80026e4:	466b      	mov	r3, sp
 80026e6:	461e      	mov	r6, r3
		char data[STM_USB::get_max_buffer_size()] = {'\0'};
 80026e8:	f000 fb80 	bl	8002dec <_ZN7STM_USB19get_max_buffer_sizeEv>
 80026ec:	4603      	mov	r3, r0
 80026ee:	1e59      	subs	r1, r3, #1
 80026f0:	6179      	str	r1, [r7, #20]
 80026f2:	460b      	mov	r3, r1
 80026f4:	3301      	adds	r3, #1
 80026f6:	2200      	movs	r2, #0
 80026f8:	4698      	mov	r8, r3
 80026fa:	4691      	mov	r9, r2
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800270c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002710:	460b      	mov	r3, r1
 8002712:	3301      	adds	r3, #1
 8002714:	2200      	movs	r2, #0
 8002716:	461c      	mov	r4, r3
 8002718:	4615      	mov	r5, r2
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	00eb      	lsls	r3, r5, #3
 8002724:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002728:	00e2      	lsls	r2, r4, #3
 800272a:	460b      	mov	r3, r1
 800272c:	3301      	adds	r3, #1
 800272e:	3307      	adds	r3, #7
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	ebad 0d03 	sub.w	sp, sp, r3
 8002738:	466b      	mov	r3, sp
 800273a:	3300      	adds	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	1e4b      	subs	r3, r1, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	db04      	blt.n	8002756 <_ZN10AltimexUsb23handle_received_commandEv+0x8a>
 800274c:	2100      	movs	r1, #0
 800274e:	7011      	strb	r1, [r2, #0]
 8002750:	3201      	adds	r2, #1
 8002752:	3b01      	subs	r3, #1
 8002754:	e7f8      	b.n	8002748 <_ZN10AltimexUsb23handle_received_commandEv+0x7c>
		STM_USB::readto(data, end_flag);
 8002756:	213b      	movs	r1, #59	; 0x3b
 8002758:	6938      	ldr	r0, [r7, #16]
 800275a:	f000 facf 	bl	8002cfc <_ZN7STM_USB6readtoEPcc>
		STM_USB::println(data);
 800275e:	6938      	ldr	r0, [r7, #16]
 8002760:	f000 fab0 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
		bool empty_data = true;
 8002764:	2301      	movs	r3, #1
 8002766:	777b      	strb	r3, [r7, #29]
		for(uint16_t i = 0; i < STM_USB::get_max_buffer_size(); i++) {
 8002768:	2300      	movs	r3, #0
 800276a:	83fb      	strh	r3, [r7, #30]
 800276c:	f000 fb3e 	bl	8002dec <_ZN7STM_USB19get_max_buffer_sizeEv>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	8bfb      	ldrh	r3, [r7, #30]
 8002776:	4293      	cmp	r3, r2
 8002778:	bf34      	ite	cc
 800277a:	2301      	movcc	r3, #1
 800277c:	2300      	movcs	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d018      	beq.n	80027b6 <_ZN10AltimexUsb23handle_received_commandEv+0xea>
			if(data[i] == '\r' || data[i] == '\n') {
 8002784:	8bfb      	ldrh	r3, [r7, #30]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	2b0d      	cmp	r3, #13
 800278c:	d004      	beq.n	8002798 <_ZN10AltimexUsb23handle_received_commandEv+0xcc>
 800278e:	8bfb      	ldrh	r3, [r7, #30]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d103      	bne.n	80027a0 <_ZN10AltimexUsb23handle_received_commandEv+0xd4>
				data[i] = '\0';
 8002798:	8bfb      	ldrh	r3, [r7, #30]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	2100      	movs	r1, #0
 800279e:	54d1      	strb	r1, [r2, r3]
			if(data[i] != '\0') {
 80027a0:	8bfb      	ldrh	r3, [r7, #30]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <_ZN10AltimexUsb23handle_received_commandEv+0xe2>
				empty_data = false;
 80027aa:	2300      	movs	r3, #0
 80027ac:	777b      	strb	r3, [r7, #29]
		for(uint16_t i = 0; i < STM_USB::get_max_buffer_size(); i++) {
 80027ae:	8bfb      	ldrh	r3, [r7, #30]
 80027b0:	3301      	adds	r3, #1
 80027b2:	83fb      	strh	r3, [r7, #30]
 80027b4:	e7da      	b.n	800276c <_ZN10AltimexUsb23handle_received_commandEv+0xa0>
		if(empty_data) {
 80027b6:	7f7b      	ldrb	r3, [r7, #29]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <_ZN10AltimexUsb23handle_received_commandEv+0xf4>
 80027bc:	46b5      	mov	sp, r6
 80027be:	e021      	b.n	8002804 <_ZN10AltimexUsb23handle_received_commandEv+0x138>
		for(uint8_t i = 0; i < ALTIMEX_COMMAND_TABLE_SIZE; i++) {
 80027c0:	2300      	movs	r3, #0
 80027c2:	773b      	strb	r3, [r7, #28]
 80027c4:	7f3b      	ldrb	r3, [r7, #28]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	d81b      	bhi.n	8002802 <_ZN10AltimexUsb23handle_received_commandEv+0x136>
			AltimexCommand test_command = command_table[i];
 80027ca:	7f3a      	ldrb	r2, [r7, #28]
 80027cc:	490f      	ldr	r1, [pc, #60]	; (800280c <_ZN10AltimexUsb23handle_received_commandEv+0x140>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	18ca      	adds	r2, r1, r3
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	ca07      	ldmia	r2, {r0, r1, r2}
 80027dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(strcmp(test_command.identifier, data) == 0) {
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	6939      	ldr	r1, [r7, #16]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fcb3 	bl	8000150 <strcmp>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <_ZN10AltimexUsb23handle_received_commandEv+0x12e>
				STM_USB::println("Command received");
 80027f0:	4807      	ldr	r0, [pc, #28]	; (8002810 <_ZN10AltimexUsb23handle_received_commandEv+0x144>)
 80027f2:	f000 fa67 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
				test_command.handler_function();
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4798      	blx	r3
		for(uint8_t i = 0; i < ALTIMEX_COMMAND_TABLE_SIZE; i++) {
 80027fa:	7f3b      	ldrb	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	773b      	strb	r3, [r7, #28]
 8002800:	e7e0      	b.n	80027c4 <_ZN10AltimexUsb23handle_received_commandEv+0xf8>
 8002802:	46b5      	mov	sp, r6
	}
}
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800280c:	20000000 	.word	0x20000000
 8002810:	0800ce98 	.word	0x0800ce98

08002814 <_ZN10AltimexUsb27handle_download_data_prettyEv>:

void AltimexUsb::handle_download_data_pretty()
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
	while(i < STORAGE_SIZE_BYTES) {
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a1b      	ldr	r2, [pc, #108]	; (8002890 <_ZN10AltimexUsb27handle_download_data_prettyEv+0x7c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d82f      	bhi.n	8002886 <_ZN10AltimexUsb27handle_download_data_prettyEv+0x72>
		AltimexDataFrame dataFrame;
		data_eeprom->load_dataframe(i, &dataFrame);
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <_ZN10AltimexUsb27handle_download_data_prettyEv+0x80>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	b291      	uxth	r1, r2
 800282e:	463a      	mov	r2, r7
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f9c9 	bl	8001bc8 <_ZN13AltimexEeprom14load_dataframeEtP16AltimexDataFrame>

		STM_USB::print("Loaded dataframe ");
 8002836:	4818      	ldr	r0, [pc, #96]	; (8002898 <_ZN10AltimexUsb27handle_download_data_prettyEv+0x84>)
 8002838:	f000 fa2e 	bl	8002c98 <_ZN7STM_USB5printEPc>
		STM_USB::print(i);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fa0b 	bl	8002c58 <_ZN7STM_USB5printEm>
		STM_USB::println("=============================================");
 8002842:	4816      	ldr	r0, [pc, #88]	; (800289c <_ZN10AltimexUsb27handle_download_data_prettyEv+0x88>)
 8002844:	f000 fa3e 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
		STM_USB::println("Data:");
 8002848:	4815      	ldr	r0, [pc, #84]	; (80028a0 <_ZN10AltimexUsb27handle_download_data_prettyEv+0x8c>)
 800284a:	f000 fa3b 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
		STM_USB::print("Temp F: ");
 800284e:	4815      	ldr	r0, [pc, #84]	; (80028a4 <_ZN10AltimexUsb27handle_download_data_prettyEv+0x90>)
 8002850:	f000 fa22 	bl	8002c98 <_ZN7STM_USB5printEPc>
		STM_USB::print(dataFrame.tempF);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f97c 	bl	8002b54 <_ZN7STM_USB5printEf>
		STM_USB::print("Alt ft: ");
 800285c:	4812      	ldr	r0, [pc, #72]	; (80028a8 <_ZN10AltimexUsb27handle_download_data_prettyEv+0x94>)
 800285e:	f000 fa1b 	bl	8002c98 <_ZN7STM_USB5printEPc>
		STM_USB::print(dataFrame.relAltFt);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f975 	bl	8002b54 <_ZN7STM_USB5printEf>
		STM_USB::print("State: ");
 800286a:	4810      	ldr	r0, [pc, #64]	; (80028ac <_ZN10AltimexUsb27handle_download_data_prettyEv+0x98>)
 800286c:	f000 fa14 	bl	8002c98 <_ZN7STM_USB5printEPc>
		STM_USB::print(dataFrame.state);
 8002870:	7a3b      	ldrb	r3, [r7, #8]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f9b0 	bl	8002bd8 <_ZN7STM_USB5printEh>
		STM_USB::println("=============================================");
 8002878:	4808      	ldr	r0, [pc, #32]	; (800289c <_ZN10AltimexUsb27handle_download_data_prettyEv+0x88>)
 800287a:	f000 fa23 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>

		i ++;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
	while(i < STORAGE_SIZE_BYTES) {
 8002884:	e7cb      	b.n	800281e <_ZN10AltimexUsb27handle_download_data_prettyEv+0xa>
	}
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	000f423f 	.word	0x000f423f
 8002894:	200002bc 	.word	0x200002bc
 8002898:	0800ceac 	.word	0x0800ceac
 800289c:	0800cec0 	.word	0x0800cec0
 80028a0:	0800cef0 	.word	0x0800cef0
 80028a4:	0800cef8 	.word	0x0800cef8
 80028a8:	0800cf04 	.word	0x0800cf04
 80028ac:	0800cf10 	.word	0x0800cf10

080028b0 <_ZN10AltimexUsb24handle_download_data_rawEv>:

void AltimexUsb::handle_download_data_raw()
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
	while(i < STORAGE_SIZE_BYTES) {
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <_ZN10AltimexUsb24handle_download_data_rawEv+0x58>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d81d      	bhi.n	80028fe <_ZN10AltimexUsb24handle_download_data_rawEv+0x4e>
		AltimexDataFrame dataFrame;
		data_eeprom->load_dataframe(i, &dataFrame);
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <_ZN10AltimexUsb24handle_download_data_rawEv+0x5c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	b291      	uxth	r1, r2
 80028ca:	463a      	mov	r2, r7
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff f97b 	bl	8001bc8 <_ZN13AltimexEeprom14load_dataframeEtP16AltimexDataFrame>

		STM_USB::print(i);
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f9c0 	bl	8002c58 <_ZN7STM_USB5printEm>
		STM_USB::print(dataFrame.tempF);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f93a 	bl	8002b54 <_ZN7STM_USB5printEf>
		STM_USB::print(dataFrame.relAltFt);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f936 	bl	8002b54 <_ZN7STM_USB5printEf>
		STM_USB::print(dataFrame.state);
 80028e8:	7a3b      	ldrb	r3, [r7, #8]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f974 	bl	8002bd8 <_ZN7STM_USB5printEh>
		STM_USB::println(";");
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <_ZN10AltimexUsb24handle_download_data_rawEv+0x60>)
 80028f2:	f000 f9e7 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>

		i ++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3301      	adds	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
	while(i < STORAGE_SIZE_BYTES) {
 80028fc:	e7dd      	b.n	80028ba <_ZN10AltimexUsb24handle_download_data_rawEv+0xa>
	}
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	000f423f 	.word	0x000f423f
 800290c:	200002bc 	.word	0x200002bc
 8002910:	0800cf18 	.word	0x0800cf18

08002914 <_ZN13EepromStorageC1EtP17I2C_HandleTypeDef>:

/*
 * Address should be the "base" address of the chip. For example if you provide 0xA0 as the address
 * then the read address will be 0xA0 and the write address will be 0xA1
 */
EepromStorage::EepromStorage(uint16_t _address, I2C_HandleTypeDef* _i2cx):
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	460b      	mov	r3, r1
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	817b      	strh	r3, [r7, #10]
	readAddress(_address),
	writeAddress(_address + 1),
	i2cx(_i2cx)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	897a      	ldrh	r2, [r7, #10]
 8002926:	805a      	strh	r2, [r3, #2]
	writeAddress(_address + 1),
 8002928:	897b      	ldrh	r3, [r7, #10]
 800292a:	3301      	adds	r3, #1
 800292c:	b29a      	uxth	r2, r3
	i2cx(_i2cx)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	809a      	strh	r2, [r3, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]
{

}
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <_ZN13EepromStorage4readEtjPh>:

HAL_StatusTypeDef EepromStorage::read(uint16_t offset, size_t len, uint8_t* data)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af04      	add	r7, sp, #16
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	75fb      	strb	r3, [r7, #23]
	uint16_t i = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	82bb      	strh	r3, [r7, #20]
	while(i < len) {
 800295c:	8abb      	ldrh	r3, [r7, #20]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d925      	bls.n	80029b0 <_ZN13EepromStorage4readEtjPh+0x6c>
		uint8_t read_byte = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	74bb      	strb	r3, [r7, #18]
		HAL_StatusTypeDef read_res = HAL_I2C_Mem_Read(i2cx, readAddress, offset + i, 2, &read_byte, 1, 1000);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6898      	ldr	r0, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8859      	ldrh	r1, [r3, #2]
 8002970:	897a      	ldrh	r2, [r7, #10]
 8002972:	8abb      	ldrh	r3, [r7, #20]
 8002974:	4413      	add	r3, r2
 8002976:	b29a      	uxth	r2, r3
 8002978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	2301      	movs	r3, #1
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	f107 0312 	add.w	r3, r7, #18
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2302      	movs	r3, #2
 800298a:	f002 f90d 	bl	8004ba8 <HAL_I2C_Mem_Read>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]
		if(read_res != HAL_OK) {
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <_ZN13EepromStorage4readEtjPh+0x5a>
			status = read_res;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	75fb      	strb	r3, [r7, #23]
 800299c:	e008      	b.n	80029b0 <_ZN13EepromStorage4readEtjPh+0x6c>
			break;
		}
		data[i] = read_byte;
 800299e:	8abb      	ldrh	r3, [r7, #20]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	7cba      	ldrb	r2, [r7, #18]
 80029a6:	701a      	strb	r2, [r3, #0]
		i++;
 80029a8:	8abb      	ldrh	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	82bb      	strh	r3, [r7, #20]
	while(i < len) {
 80029ae:	e7d5      	b.n	800295c <_ZN13EepromStorage4readEtjPh+0x18>
	}

	HAL_Delay(10);
 80029b0:	200a      	movs	r0, #10
 80029b2:	f001 f94b 	bl	8003c4c <HAL_Delay>
	return status;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZN13EepromStorage10write_fromEtjPh>:
	HAL_Delay(10);
	return write_res;
}

HAL_StatusTypeDef EepromStorage::write_from(uint16_t offset, size_t size, uint8_t* data)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08b      	sub	sp, #44	; 0x2c
 80029c4:	af04      	add	r7, sp, #16
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	460b      	mov	r3, r1
 80029ce:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef write_res = HAL_I2C_Mem_Write(i2cx, writeAddress, offset, 2, data, size, 1000);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6898      	ldr	r0, [r3, #8]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8899      	ldrh	r1, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	897a      	ldrh	r2, [r7, #10]
 80029de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80029e2:	9402      	str	r4, [sp, #8]
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2302      	movs	r3, #2
 80029ec:	f001 ffe2 	bl	80049b4 <HAL_I2C_Mem_Write>
 80029f0:	4603      	mov	r3, r0
 80029f2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80029f4:	200a      	movs	r0, #10
 80029f6:	f001 f929 	bl	8003c4c <HAL_Delay>
	return write_res;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}

08002a04 <_ZN8LedStripC1EP17TIM_HandleTypeDef>:
 *      Author: kking
 */

#include <led_strip.h>

LedStrip::LedStrip(TIM_HandleTypeDef* _timer): timer(_timer), controller(new WS2813BController(timer))
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f44f 7025 	mov.w	r0, #660	; 0x294
 8002a18:	f005 fcae 	bl	8008378 <_Znwj>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461c      	mov	r4, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	4620      	mov	r0, r4
 8002a28:	f000 f9f4 	bl	8002e14 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	605c      	str	r4, [r3, #4]
{

}
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd90      	pop	{r4, r7, pc}

08002a3a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>:

void LedStrip::progress_bar_single_color(uint8_t num_filled, enum COLOR color)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
 8002a46:	4613      	mov	r3, r2
 8002a48:	70bb      	strb	r3, [r7, #2]
	this->clear();
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f81a 	bl	8002a84 <_ZN8LedStrip5clearEv>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	2b0a      	cmp	r3, #10
 8002a54:	d901      	bls.n	8002a5a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x20>
 8002a56:	230a      	movs	r3, #10
 8002a58:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < num_filled; i++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20a      	bcs.n	8002a7c <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x42>
		controller->set_led_from_color_name(i, color);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	7bf9      	ldrb	r1, [r7, #15]
 8002a6c:	78ba      	ldrb	r2, [r7, #2]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb5c 	bl	800312c <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>
	for(uint8_t i = 0; i < num_filled; i++) {
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	3301      	adds	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e7f0      	b.n	8002a5e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x24>
	}
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN8LedStrip5clearEv>:

void LedStrip::clear()
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	controller->clear();
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fb7b 	bl	800318c <_ZN17WS2813BController5clearEv>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_ZN8LedStrip4sendEv>:

void LedStrip::send()
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
	controller->send();
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa5e 	bl	8002f6c <_ZN17WS2813BController4sendEv>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZN8LedStrip14set_brightnessEi>:

void LedStrip::set_brightness(int brightness)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	controller->set_brightness(brightness);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f9dd 	bl	8002e88 <_ZN17WS2813BController14set_brightnessEi>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <_ZN7STM_USB20increment_read_indexEv>:
uint16_t STM_USB::read_index = 0;

//=== Private Functions ===
//Manages incrementing the read index for the circular buffer
void STM_USB::increment_read_index()
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
	if(read_index == USB_BUFFER_SIZE - 1) read_index = 0;
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <_ZN7STM_USB20increment_read_indexEv+0x2c>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d103      	bne.n	8002af0 <_ZN7STM_USB20increment_read_indexEv+0x18>
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <_ZN7STM_USB20increment_read_indexEv+0x2c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	801a      	strh	r2, [r3, #0]
	else read_index++;
}
 8002aee:	e005      	b.n	8002afc <_ZN7STM_USB20increment_read_indexEv+0x24>
	else read_index++;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <_ZN7STM_USB20increment_read_indexEv+0x2c>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <_ZN7STM_USB20increment_read_indexEv+0x2c>)
 8002afa:	801a      	strh	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	200006c4 	.word	0x200006c4

08002b08 <_ZN7STM_USB12consume_nextEv>:

//Consumes (removes) the next character from the buffer
void STM_USB::consume_next()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	buffer[read_index] = {'\0'}; //Resets the just-read character to a null-terminator so that we can know where the data "ends"
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <_ZN7STM_USB12consume_nextEv+0x18>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <_ZN7STM_USB12consume_nextEv+0x1c>)
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]
	increment_read_index();
 8002b18:	f7ff ffde 	bl	8002ad8 <_ZN7STM_USB20increment_read_indexEv>
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200006c4 	.word	0x200006c4
 8002b24:	200002c4 	.word	0x200002c4

08002b28 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>:

//=== Public Functions ===
void STM_USB::init(UART_HandleTypeDef* _uart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	STM_USB::uart = _uart; //Set STM_USB::uart to actual value
 8002b30:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <_ZN7STM_USB4initEP20__UART_HandleTypeDef+0x24>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(_uart, STM_USB::buffer, USB_BUFFER_SIZE);
 8002b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3a:	4905      	ldr	r1, [pc, #20]	; (8002b50 <_ZN7STM_USB4initEP20__UART_HandleTypeDef+0x28>)
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f004 fcde 	bl	80074fe <HAL_UART_Receive_DMA>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200002c0 	.word	0x200002c0
 8002b50:	200002c4 	.word	0x200002c4

08002b54 <_ZN7STM_USB5printEf>:

void STM_USB::print(float data)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b092      	sub	sp, #72	; 0x48
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	char charData[64] = {'\0'};
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	223c      	movs	r2, #60	; 0x3c
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f007 f941 	bl	8009df0 <memset>
	sprintf(charData, "%f", data);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd fc64 	bl	800043c <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	f107 0008 	add.w	r0, r7, #8
 8002b7c:	4905      	ldr	r1, [pc, #20]	; (8002b94 <_ZN7STM_USB5printEf+0x40>)
 8002b7e:	f007 fecf 	bl	800a920 <siprintf>
	STM_USB::println(charData);
 8002b82:	f107 0308 	add.w	r3, r7, #8
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f89c 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
}
 8002b8c:	bf00      	nop
 8002b8e:	3748      	adds	r7, #72	; 0x48
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	0800cf1c 	.word	0x0800cf1c

08002b98 <_ZN7STM_USB5printEd>:

void STM_USB::print(double data)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b092      	sub	sp, #72	; 0x48
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	e9c7 0100 	strd	r0, r1, [r7]
	char charData[64] = {'\0'};
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	223c      	movs	r2, #60	; 0x3c
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 f91e 	bl	8009df0 <memset>
	sprintf(charData, "%f", data);
 8002bb4:	f107 0008 	add.w	r0, r7, #8
 8002bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bbc:	4905      	ldr	r1, [pc, #20]	; (8002bd4 <_ZN7STM_USB5printEd+0x3c>)
 8002bbe:	f007 feaf 	bl	800a920 <siprintf>
	STM_USB::println(charData);
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f87c 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
}
 8002bcc:	bf00      	nop
 8002bce:	3748      	adds	r7, #72	; 0x48
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	0800cf1c 	.word	0x0800cf1c

08002bd8 <_ZN7STM_USB5printEh>:

void STM_USB::print(uint8_t data)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b092      	sub	sp, #72	; 0x48
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
	char charData[64] = {'\0'};
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	223c      	movs	r2, #60	; 0x3c
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f007 f8fe 	bl	8009df0 <memset>
	sprintf(charData, "%d", data);
 8002bf4:	79fa      	ldrb	r2, [r7, #7]
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4906      	ldr	r1, [pc, #24]	; (8002c14 <_ZN7STM_USB5printEh+0x3c>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f007 fe8f 	bl	800a920 <siprintf>
	STM_USB::println(charData);
 8002c02:	f107 0308 	add.w	r3, r7, #8
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f85c 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
}
 8002c0c:	bf00      	nop
 8002c0e:	3748      	adds	r7, #72	; 0x48
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	0800cf20 	.word	0x0800cf20

08002c18 <_ZN7STM_USB5printEt>:

void STM_USB::print(uint16_t data)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b092      	sub	sp, #72	; 0x48
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
	char charData[64] = {'\0'};
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	223c      	movs	r2, #60	; 0x3c
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f007 f8de 	bl	8009df0 <memset>
	sprintf(charData, "%d", data);
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	f107 0308 	add.w	r3, r7, #8
 8002c3a:	4906      	ldr	r1, [pc, #24]	; (8002c54 <_ZN7STM_USB5printEt+0x3c>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f007 fe6f 	bl	800a920 <siprintf>
	STM_USB::println(charData);
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f83c 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
}
 8002c4c:	bf00      	nop
 8002c4e:	3748      	adds	r7, #72	; 0x48
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	0800cf20 	.word	0x0800cf20

08002c58 <_ZN7STM_USB5printEm>:

void STM_USB::print(uint32_t data)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b092      	sub	sp, #72	; 0x48
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	char charData[64] = {'\0'};
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	223c      	movs	r2, #60	; 0x3c
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f007 f8bf 	bl	8009df0 <memset>
	sprintf(charData, "%d", data);
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4906      	ldr	r1, [pc, #24]	; (8002c94 <_ZN7STM_USB5printEm+0x3c>)
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f007 fe50 	bl	800a920 <siprintf>
	STM_USB::println(charData);
 8002c80:	f107 0308 	add.w	r3, r7, #8
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f81d 	bl	8002cc4 <_ZN7STM_USB7printlnEPc>
}
 8002c8a:	bf00      	nop
 8002c8c:	3748      	adds	r7, #72	; 0x48
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	0800cf20 	.word	0x0800cf20

08002c98 <_ZN7STM_USB5printEPc>:

void STM_USB::print(char* data)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(STM_USB::uart, (const uint8_t*)data, strlen(data), 100);
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <_ZN7STM_USB5printEPc+0x28>)
 8002ca2:	681c      	ldr	r4, [r3, #0]
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fd fa5d 	bl	8000164 <strlen>
 8002caa:	4603      	mov	r3, r0
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	2364      	movs	r3, #100	; 0x64
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f004 fba0 	bl	80073f8 <HAL_UART_Transmit>
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd90      	pop	{r4, r7, pc}
 8002cc0:	200002c0 	.word	0x200002c0

08002cc4 <_ZN7STM_USB7printlnEPc>:

void STM_USB::println(char* data)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	STM_USB::print(data);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe3 	bl	8002c98 <_ZN7STM_USB5printEPc>

	char newline[3] = "\r\n";
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <_ZN7STM_USB7printlnEPc+0x34>)
 8002cd4:	f107 030c 	add.w	r3, r7, #12
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	8019      	strh	r1, [r3, #0]
 8002cde:	3302      	adds	r3, #2
 8002ce0:	0c12      	lsrs	r2, r2, #16
 8002ce2:	701a      	strb	r2, [r3, #0]
	STM_USB::print(newline);
 8002ce4:	f107 030c 	add.w	r3, r7, #12
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ffd5 	bl	8002c98 <_ZN7STM_USB5printEPc>
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	0800cf24 	.word	0x0800cf24

08002cfc <_ZN7STM_USB6readtoEPcc>:
{
	STM_USB::readto(data, '\n');
}

void STM_USB::readto(char* data, char flag)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
	if(get_buffer_size() == 0) {
 8002d08:	f000 f848 	bl	8002d9c <_ZN7STM_USB15get_buffer_sizeEv>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf0c      	ite	eq
 8002d12:	2301      	moveq	r3, #1
 8002d14:	2300      	movne	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d136      	bne.n	8002d8a <_ZN7STM_USB6readtoEPcc+0x8e>
		return;
	}

	//char next_char = peek_next();
	char next_char = buffer[read_index];
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <_ZN7STM_USB6readtoEPcc+0x98>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <_ZN7STM_USB6readtoEPcc+0x9c>)
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	73fb      	strb	r3, [r7, #15]

	uint16_t i = 0; //Prevents infinite loop if buffer becomes full and flag cannot be found
 8002d28:	2300      	movs	r3, #0
 8002d2a:	81bb      	strh	r3, [r7, #12]
	while(i < USB_BUFFER_SIZE && next_char != flag && next_char != '\0') {
 8002d2c:	89bb      	ldrh	r3, [r7, #12]
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d217      	bcs.n	8002d64 <_ZN7STM_USB6readtoEPcc+0x68>
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d013      	beq.n	8002d64 <_ZN7STM_USB6readtoEPcc+0x68>
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <_ZN7STM_USB6readtoEPcc+0x68>
		data[i] = next_char;
 8002d42:	89bb      	ldrh	r3, [r7, #12]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	701a      	strb	r2, [r3, #0]
		consume_next();
 8002d4c:	f7ff fedc 	bl	8002b08 <_ZN7STM_USB12consume_nextEv>
		next_char = buffer[read_index];
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <_ZN7STM_USB6readtoEPcc+0x98>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <_ZN7STM_USB6readtoEPcc+0x9c>)
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	73fb      	strb	r3, [r7, #15]
		i ++;
 8002d5c:	89bb      	ldrh	r3, [r7, #12]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	81bb      	strh	r3, [r7, #12]
	while(i < USB_BUFFER_SIZE && next_char != flag && next_char != '\0') {
 8002d62:	e7e3      	b.n	8002d2c <_ZN7STM_USB6readtoEPcc+0x30>
	}

	consume_next(); //Removes flag from buffer
 8002d64:	f7ff fed0 	bl	8002b08 <_ZN7STM_USB12consume_nextEv>

	//If there was a trailing newline, remove that
	while(buffer[read_index] == '\r' || buffer[read_index] == '\n') {
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <_ZN7STM_USB6readtoEPcc+0x98>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <_ZN7STM_USB6readtoEPcc+0x9c>)
 8002d70:	5c9b      	ldrb	r3, [r3, r2]
 8002d72:	2b0d      	cmp	r3, #13
 8002d74:	d006      	beq.n	8002d84 <_ZN7STM_USB6readtoEPcc+0x88>
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <_ZN7STM_USB6readtoEPcc+0x98>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <_ZN7STM_USB6readtoEPcc+0x9c>)
 8002d7e:	5c9b      	ldrb	r3, [r3, r2]
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d103      	bne.n	8002d8c <_ZN7STM_USB6readtoEPcc+0x90>
		consume_next();
 8002d84:	f7ff fec0 	bl	8002b08 <_ZN7STM_USB12consume_nextEv>
	while(buffer[read_index] == '\r' || buffer[read_index] == '\n') {
 8002d88:	e7ee      	b.n	8002d68 <_ZN7STM_USB6readtoEPcc+0x6c>
		return;
 8002d8a:	bf00      	nop
	}
}
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200006c4 	.word	0x200006c4
 8002d98:	200002c4 	.word	0x200002c4

08002d9c <_ZN7STM_USB15get_buffer_sizeEv>:
{
	return get_buffer_size() > 0;
}

uint16_t STM_USB::get_buffer_size()
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
	uint16_t i = read_index;
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <_ZN7STM_USB15get_buffer_sizeEv+0x48>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	80fb      	strh	r3, [r7, #6]
	uint16_t iterations = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	80bb      	strh	r3, [r7, #4]
	char next = buffer[i];
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <_ZN7STM_USB15get_buffer_sizeEv+0x4c>)
 8002db0:	5cd3      	ldrb	r3, [r2, r3]
 8002db2:	70fb      	strb	r3, [r7, #3]
	while(iterations < USB_BUFFER_SIZE && next != '\0') {
 8002db4:	88bb      	ldrh	r3, [r7, #4]
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d20d      	bcs.n	8002dd8 <_ZN7STM_USB15get_buffer_sizeEv+0x3c>
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <_ZN7STM_USB15get_buffer_sizeEv+0x3c>
		next = buffer[i];
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <_ZN7STM_USB15get_buffer_sizeEv+0x4c>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	70fb      	strb	r3, [r7, #3]
		i ++;
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	80fb      	strh	r3, [r7, #6]
		iterations ++;
 8002dd0:	88bb      	ldrh	r3, [r7, #4]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	80bb      	strh	r3, [r7, #4]
	while(iterations < USB_BUFFER_SIZE && next != '\0') {
 8002dd6:	e7ed      	b.n	8002db4 <_ZN7STM_USB15get_buffer_sizeEv+0x18>
	}
	return iterations;
 8002dd8:	88bb      	ldrh	r3, [r7, #4]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	200006c4 	.word	0x200006c4
 8002de8:	200002c4 	.word	0x200002c4

08002dec <_ZN7STM_USB19get_max_buffer_sizeEv>:

uint16_t STM_USB::get_max_buffer_size()
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
	return USB_BUFFER_SIZE;
 8002df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f005 fad1 	bl	80083ac <tanf>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>:
*/

TIM_HandleTypeDef* WS2813BController::timer = 0ull;
bool WS2813BController::data_sent_flag = false;

WS2813BController::WS2813BController(TIM_HandleTypeDef* _timer)
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
{
	WS2813BController::timer = _timer;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef+0x1c>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	200006c8 	.word	0x200006c8

08002e34 <_ZN17WS2813BController7set_ledEiiii>:

void WS2813BController::set_led (int LEDnum, int Red, int Green, int Blue)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	b2d9      	uxtb	r1, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2d9      	uxtb	r1, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	460a      	mov	r2, r1
 8002e5c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	b2d9      	uxtb	r1, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	460a      	mov	r2, r1
 8002e6c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	b2d9      	uxtb	r1, r3
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	460a      	mov	r2, r1
 8002e7c:	70da      	strb	r2, [r3, #3]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <_ZN17WS2813BController14set_brightnessEi>:

#define PI 3.14159265

void WS2813BController::set_brightness (int brightness)  // 0-45
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b2d      	cmp	r3, #45	; 0x2d
 8002e96:	dd01      	ble.n	8002e9c <_ZN17WS2813BController14set_brightnessEi+0x14>
 8002e98:	232d      	movs	r3, #45	; 0x2d
 8002e9a:	603b      	str	r3, [r7, #0]
	for (int i=0; i<MAX_LED; i++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	dc58      	bgt.n	8002f58 <_ZN17WS2813BController14set_brightnessEi+0xd0>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	320a      	adds	r2, #10
 8002eb4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		for (int j=1; j<4; j++)
 8002eb8:	2301      	movs	r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	dc46      	bgt.n	8002f50 <_ZN17WS2813BController14set_brightnessEi+0xc8>
		{
			float angle = 90-brightness;  // in degrees
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ff11 	bl	8000cf0 <__aeabi_i2f>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7fd fab2 	bl	800043c <__aeabi_f2d>
 8002ed8:	a321      	add	r3, pc, #132	; (adr r3, 8002f60 <_ZN17WS2813BController14set_brightnessEi+0xd8>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f7fd fb05 	bl	80004ec <__aeabi_dmul>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <_ZN17WS2813BController14set_brightnessEi+0xe0>)
 8002ef0:	f7fd fc26 	bl	8000740 <__aeabi_ddiv>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7fd fdee 	bl	8000adc <__aeabi_d2f>
 8002f00:	4603      	mov	r3, r0
 8002f02:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd feec 	bl	8000cf0 <__aeabi_i2f>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff ff6e 	bl	8002dfc <_ZSt3tanf>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4620      	mov	r0, r4
 8002f26:	f7fd ffeb 	bl	8000f00 <__aeabi_fdiv>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe f91f 	bl	8001170 <__aeabi_f2uiz>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b2d9      	uxtb	r1, r3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	441a      	add	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	3328      	adds	r3, #40	; 0x28
 8002f44:	460a      	mov	r2, r1
 8002f46:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e7b5      	b.n	8002ebc <_ZN17WS2813BController14set_brightnessEi+0x34>
	for (int i=0; i<MAX_LED; i++)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e7a3      	b.n	8002ea0 <_ZN17WS2813BController14set_brightnessEi+0x18>
		}
	}

#endif

}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	53c8d4f1 	.word	0x53c8d4f1
 8002f64:	400921fb 	.word	0x400921fb
 8002f68:	40668000 	.word	0x40668000

08002f6c <_ZN17WS2813BController4sendEv>:

void WS2813BController::send ()
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	uint32_t indx=0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	dc3c      	bgt.n	8002ffc <_ZN17WS2813BController4sendEv+0x90>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f8e:	041a      	lsls	r2, r3, #16
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8002fb0:	2317      	movs	r3, #23
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db1c      	blt.n	8002ff4 <_ZN17WS2813BController4sendEv+0x88>
		{
			if (color&(1<<i))
 8002fba:	2201      	movs	r2, #1
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <_ZN17WS2813BController4sendEv+0x6e>
			{
				pwmData[indx] = 48;  // 75% of 64
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	3228      	adds	r2, #40	; 0x28
 8002fd2:	2130      	movs	r1, #48	; 0x30
 8002fd4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002fd8:	e005      	b.n	8002fe6 <_ZN17WS2813BController4sendEv+0x7a>
			}

			else pwmData[indx] = 20;  // ~30% of 64
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	3228      	adds	r2, #40	; 0x28
 8002fe0:	2114      	movs	r1, #20
 8002fe2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			indx++;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e7df      	b.n	8002fb4 <_ZN17WS2813BController4sendEv+0x48>
	for (int i= 0; i<MAX_LED; i++)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e7bf      	b.n	8002f7c <_ZN17WS2813BController4sendEv+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b31      	cmp	r3, #49	; 0x31
 8003004:	dc0c      	bgt.n	8003020 <_ZN17WS2813BController4sendEv+0xb4>
	{
		pwmData[indx] = 0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	3228      	adds	r2, #40	; 0x28
 800300c:	2100      	movs	r1, #0
 800300e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3301      	adds	r3, #1
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	e7ef      	b.n	8003000 <_ZN17WS2813BController4sendEv+0x94>
	}

	HAL_TIM_PWM_Start_DMA(timer, TIM_CHANNEL_2, (uint32_t *)pwmData, indx);
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <_ZN17WS2813BController4sendEv+0xe0>)
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	b29b      	uxth	r3, r3
 800302e:	2104      	movs	r1, #4
 8003030:	f003 f9bc 	bl	80063ac <HAL_TIM_PWM_Start_DMA>
	while (!data_sent_flag){};
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <_ZN17WS2813BController4sendEv+0xe4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <_ZN17WS2813BController4sendEv+0xd2>
 800303c:	e7fa      	b.n	8003034 <_ZN17WS2813BController4sendEv+0xc8>
	data_sent_flag = false;
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <_ZN17WS2813BController4sendEv+0xe4>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200006c8 	.word	0x200006c8
 8003050:	200006cc 	.word	0x200006cc

08003054 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>:

void WS2813BController::color_to_rgb(struct RGB* rgb, enum COLOR color)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	71fb      	strb	r3, [r7, #7]
	if(color == GREEN) {
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d108      	bne.n	800307a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x26>
		rgb->r = 0;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2214      	movs	r2, #20
 8003078:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d108      	bne.n	8003092 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x3e>
		rgb->r = 255;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2200      	movs	r2, #0
 8003090:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d108      	bne.n	80030aa <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x56>
		rgb->r = 255;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	22ff      	movs	r2, #255	; 0xff
 800309c:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2200      	movs	r2, #0
 80030a8:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d108      	bne.n	80030c2 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x6e>
		rgb->r = 255;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2200      	movs	r2, #0
 80030ba:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d108      	bne.n	80030da <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x86>
		rgb->r = 0;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	22c8      	movs	r2, #200	; 0xc8
 80030d8:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d108      	bne.n	80030f2 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x9e>
		rgb->r = 0;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	709a      	strb	r2, [r3, #2]
	}
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>:

void WS2813BController::set_led_from_rgb(int LEDnum, struct RGB* rgb)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
	set_led(LEDnum, rgb->r, rgb->g, rgb->b);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	4619      	mov	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	789b      	ldrb	r3, [r3, #2]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	460b      	mov	r3, r1
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff fe88 	bl	8002e34 <_ZN17WS2813BController7set_ledEiiii>
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>:

void WS2813BController::set_led_from_color_name(int LEDnum, enum COLOR color)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	71fb      	strb	r3, [r7, #7]
	struct RGB rgb;
	color_to_rgb(&rgb, color);
 800313a:	79fa      	ldrb	r2, [r7, #7]
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7ff ff86 	bl	8003054 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>
	set_led_from_rgb(LEDnum, &rgb);
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	461a      	mov	r2, r3
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff ffd3 	bl	80030fc <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(WS2813BController::timer, TIM_CHANNEL_2);
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2104      	movs	r1, #4
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fabe 	bl	80066f0 <HAL_TIM_PWM_Stop_DMA>
	WS2813BController::data_sent_flag = true;
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200006c8 	.word	0x200006c8
 8003188:	200006cc 	.word	0x200006cc

0800318c <_ZN17WS2813BController5clearEv>:

void WS2813BController::clear()
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MAX_LED; i++)
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b09      	cmp	r3, #9
 800319c:	d809      	bhi.n	80031b2 <_ZN17WS2813BController5clearEv+0x26>
	{
		set_led_from_color_name(i, CLEAR);
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2205      	movs	r2, #5
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ffc1 	bl	800312c <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>
	for(uint8_t i = 0; i < MAX_LED; i++)
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	3301      	adds	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
 80031b0:	e7f2      	b.n	8003198 <_ZN17WS2813BController5clearEv+0xc>
	}
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b085      	sub	sp, #20
 80031c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031c2:	f000 fce1 	bl	8003b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031c6:	f000 f825 	bl	8003214 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031ca:	f000 f9f5 	bl	80035b8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80031ce:	f000 f9cd 	bl	800356c <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80031d2:	f000 f86b 	bl	80032ac <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80031d6:	f000 f8fd 	bl	80033d4 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80031da:	f000 f89b 	bl	8003314 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 80031de:	f000 f997 	bl	8003510 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  Altimex* altimex = new Altimex(&huart1, &hi2c1, &htim2, 10000);
 80031e2:	2080      	movs	r0, #128	; 0x80
 80031e4:	f005 f8c8 	bl	8008378 <_Znwj>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461c      	mov	r4, r3
 80031ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <main+0x4c>)
 80031f4:	4a05      	ldr	r2, [pc, #20]	; (800320c <main+0x50>)
 80031f6:	4906      	ldr	r1, [pc, #24]	; (8003210 <main+0x54>)
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7fe fa83 	bl	8001704 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDeft>
 80031fe:	607c      	str	r4, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  altimex->tick();
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fe fbbf 	bl	8001984 <_ZN7Altimex4tickEv>
 8003206:	e7fb      	b.n	8003200 <main+0x44>
 8003208:	2000076c 	.word	0x2000076c
 800320c:	200006d0 	.word	0x200006d0
 8003210:	200007f8 	.word	0x200007f8

08003214 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b090      	sub	sp, #64	; 0x40
 8003218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800321a:	f107 0318 	add.w	r3, r7, #24
 800321e:	2228      	movs	r2, #40	; 0x28
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f006 fde4 	bl	8009df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003236:	2302      	movs	r3, #2
 8003238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800323a:	2301      	movs	r3, #1
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800323e:	2310      	movs	r3, #16
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003242:	2302      	movs	r3, #2
 8003244:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003246:	2300      	movs	r3, #0
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800324a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003250:	f107 0318 	add.w	r3, r7, #24
 8003254:	4618      	mov	r0, r3
 8003256:	f002 fbf1 	bl	8005a3c <HAL_RCC_OscConfig>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800326a:	f000 f9e5 	bl	8003638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800326e:	230f      	movs	r3, #15
 8003270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003272:	2302      	movs	r3, #2
 8003274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800327a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800327e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	2102      	movs	r1, #2
 8003288:	4618      	mov	r0, r3
 800328a:	f002 fe59 	bl	8005f40 <HAL_RCC_ClockConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800329e:	f000 f9cb 	bl	8003638 <Error_Handler>
  }
}
 80032a2:	bf00      	nop
 80032a4:	3740      	adds	r7, #64	; 0x40
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032b2:	4a16      	ldr	r2, [pc, #88]	; (800330c <_ZL12MX_I2C1_Initv+0x60>)
 80032b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032b8:	4a15      	ldr	r2, [pc, #84]	; (8003310 <_ZL12MX_I2C1_Initv+0x64>)
 80032ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032e8:	4807      	ldr	r0, [pc, #28]	; (8003308 <_ZL12MX_I2C1_Initv+0x5c>)
 80032ea:	f001 fa1f 	bl	800472c <HAL_I2C_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80032fe:	f000 f99b 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200006d0 	.word	0x200006d0
 800330c:	40005400 	.word	0x40005400
 8003310:	000186a0 	.word	0x000186a0

08003314 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003328:	463b      	mov	r3, r7
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 8003332:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <_ZL12MX_TIM1_Initv+0xbc>)
 8003334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8003336:	4b25      	ldr	r3, [pc, #148]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 8003338:	2203      	movs	r2, #3
 800333a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 8003344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003350:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 8003352:	2200      	movs	r2, #0
 8003354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800335c:	481b      	ldr	r0, [pc, #108]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 800335e:	f002 ff7d 	bl	800625c <HAL_TIM_Base_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8003372:	f000 f961 	bl	8003638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	4619      	mov	r1, r3
 8003382:	4812      	ldr	r0, [pc, #72]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 8003384:	f003 fb3c 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8003398:	f000 f94e 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339c:	2300      	movs	r3, #0
 800339e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033a4:	463b      	mov	r3, r7
 80033a6:	4619      	mov	r1, r3
 80033a8:	4808      	ldr	r0, [pc, #32]	; (80033cc <_ZL12MX_TIM1_Initv+0xb8>)
 80033aa:	f003 ff77 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80033be:	f000 f93b 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000724 	.word	0x20000724
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08e      	sub	sp, #56	; 0x38
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e8:	f107 0320 	add.w	r3, r7, #32
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
 8003400:	615a      	str	r2, [r3, #20]
 8003402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003404:	4b41      	ldr	r3, [pc, #260]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 8003406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800340a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800340c:	4b3f      	ldr	r3, [pc, #252]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 800340e:	2200      	movs	r2, #0
 8003410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003412:	4b3e      	ldr	r3, [pc, #248]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8003418:	4b3c      	ldr	r3, [pc, #240]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 800341a:	223f      	movs	r2, #63	; 0x3f
 800341c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003424:	4b39      	ldr	r3, [pc, #228]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800342a:	4838      	ldr	r0, [pc, #224]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 800342c:	f002 ff16 	bl	800625c <HAL_TIM_Base_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8003440:	f000 f8fa 	bl	8003638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800344a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800344e:	4619      	mov	r1, r3
 8003450:	482e      	ldr	r0, [pc, #184]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 8003452:	f003 fad5 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 8003466:	f000 f8e7 	bl	8003638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800346a:	4828      	ldr	r0, [pc, #160]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 800346c:	f002 ff45 	bl	80062fa <HAL_TIM_PWM_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	bf14      	ite	ne
 8003476:	2301      	movne	r3, #1
 8003478:	2300      	moveq	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8003480:	f000 f8da 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800348c:	f107 0320 	add.w	r3, r7, #32
 8003490:	4619      	mov	r1, r3
 8003492:	481e      	ldr	r0, [pc, #120]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 8003494:	f003 ff02 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 80034a8:	f000 f8c6 	bl	8003638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ac:	2360      	movs	r3, #96	; 0x60
 80034ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	2200      	movs	r2, #0
 80034c0:	4619      	mov	r1, r3
 80034c2:	4812      	ldr	r0, [pc, #72]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 80034c4:	f003 f9da 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 80034d8:	f000 f8ae 	bl	8003638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	2204      	movs	r2, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	480a      	ldr	r0, [pc, #40]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 80034e4:	f003 f9ca 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <_ZL12MX_TIM2_Initv+0x128>
  {
    Error_Handler();
 80034f8:	f000 f89e 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034fc:	4803      	ldr	r0, [pc, #12]	; (800350c <_ZL12MX_TIM2_Initv+0x138>)
 80034fe:	f000 f963 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 8003502:	bf00      	nop
 8003504:	3738      	adds	r7, #56	; 0x38
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000076c 	.word	0x2000076c

08003510 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003516:	4a14      	ldr	r2, [pc, #80]	; (8003568 <_ZL19MX_USART1_UART_Initv+0x58>)
 8003518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 800351c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003536:	220c      	movs	r2, #12
 8003538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003546:	4807      	ldr	r0, [pc, #28]	; (8003564 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003548:	f003 ff06 	bl	8007358 <HAL_UART_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800355c:	f000 f86c 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200007f8 	.word	0x200007f8
 8003568:	40013800 	.word	0x40013800

0800356c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <_ZL11MX_DMA_Initv+0x48>)
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4a0f      	ldr	r2, [pc, #60]	; (80035b4 <_ZL11MX_DMA_Initv+0x48>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6153      	str	r3, [r2, #20]
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <_ZL11MX_DMA_Initv+0x48>)
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800358a:	2200      	movs	r2, #0
 800358c:	2100      	movs	r1, #0
 800358e:	200f      	movs	r0, #15
 8003590:	f000 fc57 	bl	8003e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003594:	200f      	movs	r0, #15
 8003596:	f000 fc70 	bl	8003e7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800359a:	2200      	movs	r2, #0
 800359c:	2100      	movs	r1, #0
 800359e:	2011      	movs	r0, #17
 80035a0:	f000 fc4f 	bl	8003e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80035a4:	2011      	movs	r0, #17
 80035a6:	f000 fc68 	bl	8003e7a <HAL_NVIC_EnableIRQ>

}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000

080035b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035be:	f107 0308 	add.w	r3, r7, #8
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035cc:	4b18      	ldr	r3, [pc, #96]	; (8003630 <_ZL12MX_GPIO_Initv+0x78>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	4a17      	ldr	r2, [pc, #92]	; (8003630 <_ZL12MX_GPIO_Initv+0x78>)
 80035d2:	f043 0304 	orr.w	r3, r3, #4
 80035d6:	6193      	str	r3, [r2, #24]
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <_ZL12MX_GPIO_Initv+0x78>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <_ZL12MX_GPIO_Initv+0x78>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <_ZL12MX_GPIO_Initv+0x78>)
 80035ea:	f043 0308 	orr.w	r3, r3, #8
 80035ee:	6193      	str	r3, [r2, #24]
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <_ZL12MX_GPIO_Initv+0x78>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 8003602:	480c      	ldr	r0, [pc, #48]	; (8003634 <_ZL12MX_GPIO_Initv+0x7c>)
 8003604:	f001 f87a 	bl	80046fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8003608:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 800360c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360e:	2301      	movs	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2302      	movs	r3, #2
 8003618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4619      	mov	r1, r3
 8003620:	4804      	ldr	r0, [pc, #16]	; (8003634 <_ZL12MX_GPIO_Initv+0x7c>)
 8003622:	f000 fee7 	bl	80043f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	40010c00 	.word	0x40010c00

08003638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800363c:	b672      	cpsid	i
}
 800363e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003640:	e7fe      	b.n	8003640 <Error_Handler+0x8>
	...

08003644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_MspInit+0x40>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	4a0d      	ldr	r2, [pc, #52]	; (8003684 <HAL_MspInit+0x40>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6193      	str	r3, [r2, #24]
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_MspInit+0x40>)
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <HAL_MspInit+0x40>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <HAL_MspInit+0x40>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	61d3      	str	r3, [r2, #28]
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_MspInit+0x40>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <HAL_I2C_MspInit+0x70>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d123      	bne.n	80036f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <HAL_I2C_MspInit+0x74>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <HAL_I2C_MspInit+0x74>)
 80036ae:	f043 0308 	orr.w	r3, r3, #8
 80036b2:	6193      	str	r3, [r2, #24]
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_I2C_MspInit+0x74>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036c0:	23c0      	movs	r3, #192	; 0xc0
 80036c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c4:	2312      	movs	r3, #18
 80036c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c8:	2303      	movs	r3, #3
 80036ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036cc:	f107 0310 	add.w	r3, r7, #16
 80036d0:	4619      	mov	r1, r3
 80036d2:	480b      	ldr	r0, [pc, #44]	; (8003700 <HAL_I2C_MspInit+0x78>)
 80036d4:	f000 fe8e 	bl	80043f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_I2C_MspInit+0x74>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <HAL_I2C_MspInit+0x74>)
 80036de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036e2:	61d3      	str	r3, [r2, #28]
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_I2C_MspInit+0x74>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40005400 	.word	0x40005400
 80036fc:	40021000 	.word	0x40021000
 8003700:	40010c00 	.word	0x40010c00

08003704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <HAL_TIM_Base_MspInit+0xb4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10c      	bne.n	8003730 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	4a28      	ldr	r2, [pc, #160]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 800371c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003720:	6193      	str	r3, [r2, #24]
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800372e:	e03e      	b.n	80037ae <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d139      	bne.n	80037ae <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	61d3      	str	r3, [r2, #28]
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8003752:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 8003754:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003756:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 800375a:	2210      	movs	r2, #16
 800375c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003764:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 800376c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003770:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 8003774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003778:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8003786:	480e      	ldr	r0, [pc, #56]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 8003788:	f000 fb92 	bl	8003eb0 <HAL_DMA_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8003792:	f7ff ff51 	bl	8003638 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a06      	ldr	r2, [pc, #24]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
 80037a8:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6253      	str	r3, [r2, #36]	; 0x24
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	200007b4 	.word	0x200007b4
 80037c4:	40020080 	.word	0x40020080

080037c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d117      	bne.n	8003818 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_TIM_MspPostInit+0x58>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <HAL_TIM_MspPostInit+0x58>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6193      	str	r3, [r2, #24]
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_TIM_MspPostInit+0x58>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003800:	2303      	movs	r3, #3
 8003802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2302      	movs	r3, #2
 800380a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	4619      	mov	r1, r3
 8003812:	4804      	ldr	r0, [pc, #16]	; (8003824 <HAL_TIM_MspPostInit+0x5c>)
 8003814:	f000 fdee 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003818:	bf00      	nop
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	40010800 	.word	0x40010800

08003828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0310 	add.w	r3, r7, #16
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a33      	ldr	r2, [pc, #204]	; (8003910 <HAL_UART_MspInit+0xe8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d15f      	bne.n	8003908 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003848:	4b32      	ldr	r3, [pc, #200]	; (8003914 <HAL_UART_MspInit+0xec>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_UART_MspInit+0xec>)
 800384e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003852:	6193      	str	r3, [r2, #24]
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_UART_MspInit+0xec>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003860:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <HAL_UART_MspInit+0xec>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <HAL_UART_MspInit+0xec>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6193      	str	r3, [r2, #24]
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_UART_MspInit+0xec>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4619      	mov	r1, r3
 800388c:	4822      	ldr	r0, [pc, #136]	; (8003918 <HAL_UART_MspInit+0xf0>)
 800388e:	f000 fdb1 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	4619      	mov	r1, r3
 80038a6:	481c      	ldr	r0, [pc, #112]	; (8003918 <HAL_UART_MspInit+0xf0>)
 80038a8:	f000 fda4 	bl	80043f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_UART_MspInit+0xf8>)
 80038b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b8:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038d2:	2220      	movs	r2, #32
 80038d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038dc:	480f      	ldr	r0, [pc, #60]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038de:	f000 fae7 	bl	8003eb0 <HAL_DMA_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80038e8:	f7ff fea6 	bl	8003638 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <HAL_UART_MspInit+0xf4>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	2025      	movs	r0, #37	; 0x25
 80038fe:	f000 faa0 	bl	8003e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003902:	2025      	movs	r0, #37	; 0x25
 8003904:	f000 fab9 	bl	8003e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003908:	bf00      	nop
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40013800 	.word	0x40013800
 8003914:	40021000 	.word	0x40021000
 8003918:	40010800 	.word	0x40010800
 800391c:	20000840 	.word	0x20000840
 8003920:	40020058 	.word	0x40020058

08003924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003928:	e7fe      	b.n	8003928 <NMI_Handler+0x4>

0800392a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800392e:	e7fe      	b.n	800392e <HardFault_Handler+0x4>

08003930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003934:	e7fe      	b.n	8003934 <MemManage_Handler+0x4>

08003936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800393a:	e7fe      	b.n	800393a <BusFault_Handler+0x4>

0800393c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003940:	e7fe      	b.n	8003940 <UsageFault_Handler+0x4>

08003942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800396a:	f000 f953 	bl	8003c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003978:	4802      	ldr	r0, [pc, #8]	; (8003984 <DMA1_Channel5_IRQHandler+0x10>)
 800397a:	f000 fc07 	bl	800418c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000840 	.word	0x20000840

08003988 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <DMA1_Channel7_IRQHandler+0x10>)
 800398e:	f000 fbfd 	bl	800418c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200007b4 	.word	0x200007b4

0800399c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <USART1_IRQHandler+0x10>)
 80039a2:	f003 fdd1 	bl	8007548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200007f8 	.word	0x200007f8

080039b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return 1;
 80039b4:	2301      	movs	r3, #1
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <_kill>:

int _kill(int pid, int sig)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039c8:	f006 f9d2 	bl	8009d70 <__errno>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2216      	movs	r2, #22
 80039d0:	601a      	str	r2, [r3, #0]
  return -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_exit>:

void _exit (int status)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039e6:	f04f 31ff 	mov.w	r1, #4294967295
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ffe7 	bl	80039be <_kill>
  while (1) {}    /* Make sure we hang here */
 80039f0:	e7fe      	b.n	80039f0 <_exit+0x12>

080039f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e00a      	b.n	8003a1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a04:	f3af 8000 	nop.w
 8003a08:	4601      	mov	r1, r0
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	60ba      	str	r2, [r7, #8]
 8003a10:	b2ca      	uxtb	r2, r1
 8003a12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3301      	adds	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	dbf0      	blt.n	8003a04 <_read+0x12>
  }

  return len;
 8003a22:	687b      	ldr	r3, [r7, #4]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e009      	b.n	8003a52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	60ba      	str	r2, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	dbf1      	blt.n	8003a3e <_write+0x12>
  }
  return len;
 8003a5a:	687b      	ldr	r3, [r7, #4]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_close>:

int _close(int file)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <_isatty>:

int _isatty(int file)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003aa0:	2301      	movs	r3, #1
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <_sbrk+0x5c>)
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <_sbrk+0x60>)
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <_sbrk+0x64>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <_sbrk+0x64>)
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <_sbrk+0x68>)
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <_sbrk+0x64>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d207      	bcs.n	8003b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003af4:	f006 f93c 	bl	8009d70 <__errno>
 8003af8:	4603      	mov	r3, r0
 8003afa:	220c      	movs	r2, #12
 8003afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
 8003b02:	e009      	b.n	8003b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <_sbrk+0x64>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <_sbrk+0x64>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <_sbrk+0x64>)
 8003b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b16:	68fb      	ldr	r3, [r7, #12]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20005000 	.word	0x20005000
 8003b24:	00000400 	.word	0x00000400
 8003b28:	20000884 	.word	0x20000884
 8003b2c:	200008a0 	.word	0x200008a0

08003b30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b3c:	f7ff fff8 	bl	8003b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b40:	480b      	ldr	r0, [pc, #44]	; (8003b70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b42:	490c      	ldr	r1, [pc, #48]	; (8003b74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b44:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b48:	e002      	b.n	8003b50 <LoopCopyDataInit>

08003b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b4e:	3304      	adds	r3, #4

08003b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b54:	d3f9      	bcc.n	8003b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b58:	4c09      	ldr	r4, [pc, #36]	; (8003b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b5c:	e001      	b.n	8003b62 <LoopFillZerobss>

08003b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b60:	3204      	adds	r2, #4

08003b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b64:	d3fb      	bcc.n	8003b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b66:	f006 f909 	bl	8009d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b6a:	f7ff fb27 	bl	80031bc <main>
  bx lr
 8003b6e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b74:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8003b78:	0800d73c 	.word	0x0800d73c
  ldr r2, =_sbss
 8003b7c:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8003b80:	200008a0 	.word	0x200008a0

08003b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC1_2_IRQHandler>
	...

08003b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_Init+0x28>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <HAL_Init+0x28>)
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b98:	2003      	movs	r0, #3
 8003b9a:	f000 f947 	bl	8003e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b9e:	200f      	movs	r0, #15
 8003ba0:	f000 f808 	bl	8003bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ba4:	f7ff fd4e 	bl	8003644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000

08003bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_InitTick+0x54>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_InitTick+0x58>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f95f 	bl	8003e96 <HAL_SYSTICK_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00e      	b.n	8003c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0f      	cmp	r3, #15
 8003be6:	d80a      	bhi.n	8003bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be8:	2200      	movs	r2, #0
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f000 f927 	bl	8003e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bf4:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <HAL_InitTick+0x5c>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200000c0 	.word	0x200000c0
 8003c0c:	200000c8 	.word	0x200000c8
 8003c10:	200000c4 	.word	0x200000c4

08003c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_IncTick+0x1c>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_IncTick+0x20>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <HAL_IncTick+0x20>)
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	200000c8 	.word	0x200000c8
 8003c34:	20000888 	.word	0x20000888

08003c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <HAL_GetTick+0x10>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	20000888 	.word	0x20000888

08003c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d005      	beq.n	8003c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_Delay+0x44>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c72:	bf00      	nop
 8003c74:	f7ff ffe0 	bl	8003c38 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8f7      	bhi.n	8003c74 <HAL_Delay+0x28>
  {
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200000c8 	.word	0x200000c8

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4906      	ldr	r1, [pc, #24]	; (8003d2c <__NVIC_EnableIRQ+0x34>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	e000e100 	.word	0xe000e100

08003d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	db0a      	blt.n	8003d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	490c      	ldr	r1, [pc, #48]	; (8003d7c <__NVIC_SetPriority+0x4c>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	0112      	lsls	r2, r2, #4
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	440b      	add	r3, r1
 8003d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d58:	e00a      	b.n	8003d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4908      	ldr	r1, [pc, #32]	; (8003d80 <__NVIC_SetPriority+0x50>)
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3b04      	subs	r3, #4
 8003d68:	0112      	lsls	r2, r2, #4
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	761a      	strb	r2, [r3, #24]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000e100 	.word	0xe000e100
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f1c3 0307 	rsb	r3, r3, #7
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	bf28      	it	cs
 8003da2:	2304      	movcs	r3, #4
 8003da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d902      	bls.n	8003db4 <NVIC_EncodePriority+0x30>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3b03      	subs	r3, #3
 8003db2:	e000      	b.n	8003db6 <NVIC_EncodePriority+0x32>
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43d9      	mvns	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	4313      	orrs	r3, r2
         );
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3724      	adds	r7, #36	; 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df8:	d301      	bcc.n	8003dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00f      	b.n	8003e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <SysTick_Config+0x40>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e06:	210f      	movs	r1, #15
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	f7ff ff90 	bl	8003d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <SysTick_Config+0x40>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <SysTick_Config+0x40>)
 8003e18:	2207      	movs	r2, #7
 8003e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	e000e010 	.word	0xe000e010

08003e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff2d 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e54:	f7ff ff42 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7ff ff90 	bl	8003d84 <NVIC_EncodePriority>
 8003e64:	4602      	mov	r2, r0
 8003e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff5f 	bl	8003d30 <__NVIC_SetPriority>
}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff35 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffa2 	bl	8003de8 <SysTick_Config>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e043      	b.n	8003f4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_DMA_Init+0xa8>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <HAL_DMA_Init+0xac>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	009a      	lsls	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_DMA_Init+0xb0>)
 8003ee2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003efa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003efe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	bffdfff8 	.word	0xbffdfff8
 8003f5c:	cccccccd 	.word	0xcccccccd
 8003f60:	40020000 	.word	0x40020000

08003f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMA_Start_IT+0x20>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e04b      	b.n	800401c <HAL_DMA_Start_IT+0xb8>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d13a      	bne.n	800400e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f9eb 	bl	8004398 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 020e 	orr.w	r2, r2, #14
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e00f      	b.n	8003ffc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0204 	bic.w	r2, r2, #4
 8003fea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 020a 	orr.w	r2, r2, #10
 8003ffa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e005      	b.n	800401a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004016:	2302      	movs	r3, #2
 8004018:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800401a:	7dfb      	ldrb	r3, [r7, #23]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d008      	beq.n	800404e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2204      	movs	r2, #4
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e020      	b.n	8004090 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 020e 	bic.w	r2, r2, #14
 800405c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f202 	lsl.w	r2, r1, r2
 800407c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800408e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
	...

0800409c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d005      	beq.n	80040c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2204      	movs	r2, #4
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
 80040be:	e051      	b.n	8004164 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 020e 	bic.w	r2, r2, #14
 80040ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a22      	ldr	r2, [pc, #136]	; (8004170 <HAL_DMA_Abort_IT+0xd4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d029      	beq.n	800413e <HAL_DMA_Abort_IT+0xa2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a21      	ldr	r2, [pc, #132]	; (8004174 <HAL_DMA_Abort_IT+0xd8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d022      	beq.n	800413a <HAL_DMA_Abort_IT+0x9e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <HAL_DMA_Abort_IT+0xdc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01a      	beq.n	8004134 <HAL_DMA_Abort_IT+0x98>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <HAL_DMA_Abort_IT+0xe0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d012      	beq.n	800412e <HAL_DMA_Abort_IT+0x92>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_DMA_Abort_IT+0xe4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00a      	beq.n	8004128 <HAL_DMA_Abort_IT+0x8c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_DMA_Abort_IT+0xe8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d102      	bne.n	8004122 <HAL_DMA_Abort_IT+0x86>
 800411c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004120:	e00e      	b.n	8004140 <HAL_DMA_Abort_IT+0xa4>
 8004122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004126:	e00b      	b.n	8004140 <HAL_DMA_Abort_IT+0xa4>
 8004128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412c:	e008      	b.n	8004140 <HAL_DMA_Abort_IT+0xa4>
 800412e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004132:	e005      	b.n	8004140 <HAL_DMA_Abort_IT+0xa4>
 8004134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004138:	e002      	b.n	8004140 <HAL_DMA_Abort_IT+0xa4>
 800413a:	2310      	movs	r3, #16
 800413c:	e000      	b.n	8004140 <HAL_DMA_Abort_IT+0xa4>
 800413e:	2301      	movs	r3, #1
 8004140:	4a11      	ldr	r2, [pc, #68]	; (8004188 <HAL_DMA_Abort_IT+0xec>)
 8004142:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
    } 
  }
  return status;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40020008 	.word	0x40020008
 8004174:	4002001c 	.word	0x4002001c
 8004178:	40020030 	.word	0x40020030
 800417c:	40020044 	.word	0x40020044
 8004180:	40020058 	.word	0x40020058
 8004184:	4002006c 	.word	0x4002006c
 8004188:	40020000 	.word	0x40020000

0800418c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2204      	movs	r2, #4
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d04f      	beq.n	8004254 <HAL_DMA_IRQHandler+0xc8>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d04a      	beq.n	8004254 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a66      	ldr	r2, [pc, #408]	; (800437c <HAL_DMA_IRQHandler+0x1f0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d029      	beq.n	800423a <HAL_DMA_IRQHandler+0xae>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a65      	ldr	r2, [pc, #404]	; (8004380 <HAL_DMA_IRQHandler+0x1f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_DMA_IRQHandler+0xaa>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a63      	ldr	r2, [pc, #396]	; (8004384 <HAL_DMA_IRQHandler+0x1f8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01a      	beq.n	8004230 <HAL_DMA_IRQHandler+0xa4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a62      	ldr	r2, [pc, #392]	; (8004388 <HAL_DMA_IRQHandler+0x1fc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d012      	beq.n	800422a <HAL_DMA_IRQHandler+0x9e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_DMA_IRQHandler+0x200>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00a      	beq.n	8004224 <HAL_DMA_IRQHandler+0x98>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5f      	ldr	r2, [pc, #380]	; (8004390 <HAL_DMA_IRQHandler+0x204>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d102      	bne.n	800421e <HAL_DMA_IRQHandler+0x92>
 8004218:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800421c:	e00e      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 800421e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004222:	e00b      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 8004224:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004228:	e008      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 800422a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800422e:	e005      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 8004230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004234:	e002      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 8004236:	2340      	movs	r3, #64	; 0x40
 8004238:	e000      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 800423a:	2304      	movs	r3, #4
 800423c:	4a55      	ldr	r2, [pc, #340]	; (8004394 <HAL_DMA_IRQHandler+0x208>)
 800423e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8094 	beq.w	8004372 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004252:	e08e      	b.n	8004372 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2202      	movs	r2, #2
 800425a:	409a      	lsls	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d056      	beq.n	8004312 <HAL_DMA_IRQHandler+0x186>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d051      	beq.n	8004312 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020a 	bic.w	r2, r2, #10
 800428a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <HAL_DMA_IRQHandler+0x1f0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d029      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x166>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <HAL_DMA_IRQHandler+0x1f4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_IRQHandler+0x162>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a35      	ldr	r2, [pc, #212]	; (8004384 <HAL_DMA_IRQHandler+0x1f8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01a      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x15c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <HAL_DMA_IRQHandler+0x1fc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d012      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x156>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a32      	ldr	r2, [pc, #200]	; (800438c <HAL_DMA_IRQHandler+0x200>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00a      	beq.n	80042dc <HAL_DMA_IRQHandler+0x150>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a31      	ldr	r2, [pc, #196]	; (8004390 <HAL_DMA_IRQHandler+0x204>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d102      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x14a>
 80042d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042d4:	e00e      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042da:	e00b      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e0:	e008      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042e6:	e005      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ec:	e002      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042ee:	2320      	movs	r3, #32
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042f2:	2302      	movs	r3, #2
 80042f4:	4a27      	ldr	r2, [pc, #156]	; (8004394 <HAL_DMA_IRQHandler+0x208>)
 80042f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d034      	beq.n	8004372 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004310:	e02f      	b.n	8004372 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2208      	movs	r2, #8
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d028      	beq.n	8004374 <HAL_DMA_IRQHandler+0x1e8>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d023      	beq.n	8004374 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 020e 	bic.w	r2, r2, #14
 800433a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f202 	lsl.w	r2, r1, r2
 800434a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
    }
  }
  return;
 8004372:	bf00      	nop
 8004374:	bf00      	nop
}
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40020008 	.word	0x40020008
 8004380:	4002001c 	.word	0x4002001c
 8004384:	40020030 	.word	0x40020030
 8004388:	40020044 	.word	0x40020044
 800438c:	40020058 	.word	0x40020058
 8004390:	4002006c 	.word	0x4002006c
 8004394:	40020000 	.word	0x40020000

08004398 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2101      	movs	r1, #1
 80043b0:	fa01 f202 	lsl.w	r2, r1, r2
 80043b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d108      	bne.n	80043d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043d6:	e007      	b.n	80043e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b08b      	sub	sp, #44	; 0x2c
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004406:	e169      	b.n	80046dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004408:	2201      	movs	r2, #1
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	429a      	cmp	r2, r3
 8004422:	f040 8158 	bne.w	80046d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4a9a      	ldr	r2, [pc, #616]	; (8004694 <HAL_GPIO_Init+0x2a0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d05e      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004430:	4a98      	ldr	r2, [pc, #608]	; (8004694 <HAL_GPIO_Init+0x2a0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d875      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 8004436:	4a98      	ldr	r2, [pc, #608]	; (8004698 <HAL_GPIO_Init+0x2a4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d058      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 800443c:	4a96      	ldr	r2, [pc, #600]	; (8004698 <HAL_GPIO_Init+0x2a4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d86f      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 8004442:	4a96      	ldr	r2, [pc, #600]	; (800469c <HAL_GPIO_Init+0x2a8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d052      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004448:	4a94      	ldr	r2, [pc, #592]	; (800469c <HAL_GPIO_Init+0x2a8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d869      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 800444e:	4a94      	ldr	r2, [pc, #592]	; (80046a0 <HAL_GPIO_Init+0x2ac>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d04c      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004454:	4a92      	ldr	r2, [pc, #584]	; (80046a0 <HAL_GPIO_Init+0x2ac>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d863      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 800445a:	4a92      	ldr	r2, [pc, #584]	; (80046a4 <HAL_GPIO_Init+0x2b0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d046      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004460:	4a90      	ldr	r2, [pc, #576]	; (80046a4 <HAL_GPIO_Init+0x2b0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d85d      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 8004466:	2b12      	cmp	r3, #18
 8004468:	d82a      	bhi.n	80044c0 <HAL_GPIO_Init+0xcc>
 800446a:	2b12      	cmp	r3, #18
 800446c:	d859      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_GPIO_Init+0x80>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044ef 	.word	0x080044ef
 8004478:	080044c9 	.word	0x080044c9
 800447c:	080044db 	.word	0x080044db
 8004480:	0800451d 	.word	0x0800451d
 8004484:	08004523 	.word	0x08004523
 8004488:	08004523 	.word	0x08004523
 800448c:	08004523 	.word	0x08004523
 8004490:	08004523 	.word	0x08004523
 8004494:	08004523 	.word	0x08004523
 8004498:	08004523 	.word	0x08004523
 800449c:	08004523 	.word	0x08004523
 80044a0:	08004523 	.word	0x08004523
 80044a4:	08004523 	.word	0x08004523
 80044a8:	08004523 	.word	0x08004523
 80044ac:	08004523 	.word	0x08004523
 80044b0:	08004523 	.word	0x08004523
 80044b4:	08004523 	.word	0x08004523
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	4a79      	ldr	r2, [pc, #484]	; (80046a8 <HAL_GPIO_Init+0x2b4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044c6:	e02c      	b.n	8004522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	623b      	str	r3, [r7, #32]
          break;
 80044ce:	e029      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	3304      	adds	r3, #4
 80044d6:	623b      	str	r3, [r7, #32]
          break;
 80044d8:	e024      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	3308      	adds	r3, #8
 80044e0:	623b      	str	r3, [r7, #32]
          break;
 80044e2:	e01f      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	330c      	adds	r3, #12
 80044ea:	623b      	str	r3, [r7, #32]
          break;
 80044ec:	e01a      	b.n	8004524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044f6:	2304      	movs	r3, #4
 80044f8:	623b      	str	r3, [r7, #32]
          break;
 80044fa:	e013      	b.n	8004524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004504:	2308      	movs	r3, #8
 8004506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	611a      	str	r2, [r3, #16]
          break;
 800450e:	e009      	b.n	8004524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004510:	2308      	movs	r3, #8
 8004512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	615a      	str	r2, [r3, #20]
          break;
 800451a:	e003      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800451c:	2300      	movs	r3, #0
 800451e:	623b      	str	r3, [r7, #32]
          break;
 8004520:	e000      	b.n	8004524 <HAL_GPIO_Init+0x130>
          break;
 8004522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2bff      	cmp	r3, #255	; 0xff
 8004528:	d801      	bhi.n	800452e <HAL_GPIO_Init+0x13a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	e001      	b.n	8004532 <HAL_GPIO_Init+0x13e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2bff      	cmp	r3, #255	; 0xff
 8004538:	d802      	bhi.n	8004540 <HAL_GPIO_Init+0x14c>
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	e002      	b.n	8004546 <HAL_GPIO_Init+0x152>
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	3b08      	subs	r3, #8
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	210f      	movs	r1, #15
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	431a      	orrs	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80b1 	beq.w	80046d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004574:	4b4d      	ldr	r3, [pc, #308]	; (80046ac <HAL_GPIO_Init+0x2b8>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4a4c      	ldr	r2, [pc, #304]	; (80046ac <HAL_GPIO_Init+0x2b8>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6193      	str	r3, [r2, #24]
 8004580:	4b4a      	ldr	r3, [pc, #296]	; (80046ac <HAL_GPIO_Init+0x2b8>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800458c:	4a48      	ldr	r2, [pc, #288]	; (80046b0 <HAL_GPIO_Init+0x2bc>)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	220f      	movs	r2, #15
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4013      	ands	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a40      	ldr	r2, [pc, #256]	; (80046b4 <HAL_GPIO_Init+0x2c0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_GPIO_Init+0x1ec>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_GPIO_Init+0x2c4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00d      	beq.n	80045dc <HAL_GPIO_Init+0x1e8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3e      	ldr	r2, [pc, #248]	; (80046bc <HAL_GPIO_Init+0x2c8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <HAL_GPIO_Init+0x1e4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a3d      	ldr	r2, [pc, #244]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_GPIO_Init+0x1e0>
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045d4:	2304      	movs	r3, #4
 80045d6:	e004      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045d8:	2302      	movs	r3, #2
 80045da:	e002      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045e0:	2300      	movs	r3, #0
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	f002 0203 	and.w	r2, r2, #3
 80045e8:	0092      	lsls	r2, r2, #2
 80045ea:	4093      	lsls	r3, r2
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045f2:	492f      	ldr	r1, [pc, #188]	; (80046b0 <HAL_GPIO_Init+0x2bc>)
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	3302      	adds	r3, #2
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d006      	beq.n	800461a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	492c      	ldr	r1, [pc, #176]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]
 8004618:	e006      	b.n	8004628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	43db      	mvns	r3, r3
 8004622:	4928      	ldr	r1, [pc, #160]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004624:	4013      	ands	r3, r2
 8004626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4922      	ldr	r1, [pc, #136]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
 8004640:	e006      	b.n	8004650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	43db      	mvns	r3, r3
 800464a:	491e      	ldr	r1, [pc, #120]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800464c:	4013      	ands	r3, r2
 800464e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4918      	ldr	r1, [pc, #96]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	e006      	b.n	8004678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	43db      	mvns	r3, r3
 8004672:	4914      	ldr	r1, [pc, #80]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004674:	4013      	ands	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d021      	beq.n	80046c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	490e      	ldr	r1, [pc, #56]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
 8004690:	e021      	b.n	80046d6 <HAL_GPIO_Init+0x2e2>
 8004692:	bf00      	nop
 8004694:	10320000 	.word	0x10320000
 8004698:	10310000 	.word	0x10310000
 800469c:	10220000 	.word	0x10220000
 80046a0:	10210000 	.word	0x10210000
 80046a4:	10120000 	.word	0x10120000
 80046a8:	10110000 	.word	0x10110000
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010800 	.word	0x40010800
 80046b8:	40010c00 	.word	0x40010c00
 80046bc:	40011000 	.word	0x40011000
 80046c0:	40011400 	.word	0x40011400
 80046c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_GPIO_Init+0x304>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	4909      	ldr	r1, [pc, #36]	; (80046f8 <HAL_GPIO_Init+0x304>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	3301      	adds	r3, #1
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f47f ae8e 	bne.w	8004408 <HAL_GPIO_Init+0x14>
  }
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	372c      	adds	r7, #44	; 0x2c
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	40010400 	.word	0x40010400

080046fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
 8004708:	4613      	mov	r3, r2
 800470a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800470c:	787b      	ldrb	r3, [r7, #1]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004712:	887a      	ldrh	r2, [r7, #2]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004718:	e003      	b.n	8004722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800471a:	887b      	ldrh	r3, [r7, #2]
 800471c:	041a      	lsls	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e12b      	b.n	8004996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe ff98 	bl	8003688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2224      	movs	r2, #36	; 0x24
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800478e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004790:	f001 fd1e 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8004794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4a81      	ldr	r2, [pc, #516]	; (80049a0 <HAL_I2C_Init+0x274>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d807      	bhi.n	80047b0 <HAL_I2C_Init+0x84>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a80      	ldr	r2, [pc, #512]	; (80049a4 <HAL_I2C_Init+0x278>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	bf94      	ite	ls
 80047a8:	2301      	movls	r3, #1
 80047aa:	2300      	movhi	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e006      	b.n	80047be <HAL_I2C_Init+0x92>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a7d      	ldr	r2, [pc, #500]	; (80049a8 <HAL_I2C_Init+0x27c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf94      	ite	ls
 80047b8:	2301      	movls	r3, #1
 80047ba:	2300      	movhi	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0e7      	b.n	8004996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a78      	ldr	r2, [pc, #480]	; (80049ac <HAL_I2C_Init+0x280>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	0c9b      	lsrs	r3, r3, #18
 80047d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a6a      	ldr	r2, [pc, #424]	; (80049a0 <HAL_I2C_Init+0x274>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d802      	bhi.n	8004800 <HAL_I2C_Init+0xd4>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	3301      	adds	r3, #1
 80047fe:	e009      	b.n	8004814 <HAL_I2C_Init+0xe8>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	4a69      	ldr	r2, [pc, #420]	; (80049b0 <HAL_I2C_Init+0x284>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	3301      	adds	r3, #1
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	430b      	orrs	r3, r1
 800481a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	495c      	ldr	r1, [pc, #368]	; (80049a0 <HAL_I2C_Init+0x274>)
 8004830:	428b      	cmp	r3, r1
 8004832:	d819      	bhi.n	8004868 <HAL_I2C_Init+0x13c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e59      	subs	r1, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004848:	400b      	ands	r3, r1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_I2C_Init+0x138>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1e59      	subs	r1, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	fbb1 f3f3 	udiv	r3, r1, r3
 800485c:	3301      	adds	r3, #1
 800485e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004862:	e051      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 8004864:	2304      	movs	r3, #4
 8004866:	e04f      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <HAL_I2C_Init+0x168>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1e58      	subs	r0, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	440b      	add	r3, r1
 800487e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004882:	3301      	adds	r3, #1
 8004884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e012      	b.n	80048ba <HAL_I2C_Init+0x18e>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1e58      	subs	r0, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	0099      	lsls	r1, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Init+0x196>
 80048be:	2301      	movs	r3, #1
 80048c0:	e022      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10e      	bne.n	80048e8 <HAL_I2C_Init+0x1bc>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1e58      	subs	r0, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	440b      	add	r3, r1
 80048d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	e00f      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1e58      	subs	r0, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	0099      	lsls	r1, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	4313      	orrs	r3, r2
 800490e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6911      	ldr	r1, [r2, #16]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	4311      	orrs	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	000186a0 	.word	0x000186a0
 80049a4:	001e847f 	.word	0x001e847f
 80049a8:	003d08ff 	.word	0x003d08ff
 80049ac:	431bde83 	.word	0x431bde83
 80049b0:	10624dd3 	.word	0x10624dd3

080049b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	460b      	mov	r3, r1
 80049c8:	813b      	strh	r3, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ce:	f7ff f933 	bl	8003c38 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b20      	cmp	r3, #32
 80049de:	f040 80d9 	bne.w	8004b94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2319      	movs	r3, #25
 80049e8:	2201      	movs	r2, #1
 80049ea:	496d      	ldr	r1, [pc, #436]	; (8004ba0 <HAL_I2C_Mem_Write+0x1ec>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fdef 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
 80049fa:	e0cc      	b.n	8004b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Mem_Write+0x56>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e0c5      	b.n	8004b96 <HAL_I2C_Mem_Write+0x1e2>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d007      	beq.n	8004a30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2221      	movs	r2, #33	; 0x21
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a3a      	ldr	r2, [r7, #32]
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a4d      	ldr	r2, [pc, #308]	; (8004ba4 <HAL_I2C_Mem_Write+0x1f0>)
 8004a70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a72:	88f8      	ldrh	r0, [r7, #6]
 8004a74:	893a      	ldrh	r2, [r7, #8]
 8004a76:	8979      	ldrh	r1, [r7, #10]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4603      	mov	r3, r0
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fc26 	bl	80052d4 <I2C_RequestMemoryWrite>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d052      	beq.n	8004b34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e081      	b.n	8004b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 feb4 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d107      	bne.n	8004aba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e06b      	b.n	8004b96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	781a      	ldrb	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d11b      	bne.n	8004b34 <HAL_I2C_Mem_Write+0x180>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d017      	beq.n	8004b34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1aa      	bne.n	8004a92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fea7 	bl	8005894 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d107      	bne.n	8004b64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e016      	b.n	8004b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	00100002 	.word	0x00100002
 8004ba4:	ffff0000 	.word	0xffff0000

08004ba8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08c      	sub	sp, #48	; 0x30
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	817b      	strh	r3, [r7, #10]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	813b      	strh	r3, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bc6:	f7ff f837 	bl	8003c38 <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	f040 8244 	bne.w	8005062 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2319      	movs	r3, #25
 8004be0:	2201      	movs	r2, #1
 8004be2:	4982      	ldr	r1, [pc, #520]	; (8004dec <HAL_I2C_Mem_Read+0x244>)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fcf3 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e237      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_I2C_Mem_Read+0x5a>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e230      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d007      	beq.n	8004c28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2222      	movs	r2, #34	; 0x22
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a62      	ldr	r2, [pc, #392]	; (8004df0 <HAL_I2C_Mem_Read+0x248>)
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c6a:	88f8      	ldrh	r0, [r7, #6]
 8004c6c:	893a      	ldrh	r2, [r7, #8]
 8004c6e:	8979      	ldrh	r1, [r7, #10]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fbc0 	bl	8005400 <I2C_RequestMemoryRead>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1ec      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d113      	bne.n	8004cba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e1c0      	b.n	800503c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d11e      	bne.n	8004d00 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd2:	b672      	cpsid	i
}
 8004cd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cfc:	b662      	cpsie	i
}
 8004cfe:	e035      	b.n	8004d6c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d11e      	bne.n	8004d46 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d18:	b672      	cpsid	i
}
 8004d1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d42:	b662      	cpsie	i
}
 8004d44:	e012      	b.n	8004d6c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d6c:	e166      	b.n	800503c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	f200 811f 	bhi.w	8004fb6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d123      	bne.n	8004dc8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 fdcd 	bl	8005924 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e167      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dc6:	e139      	b.n	800503c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d152      	bne.n	8004e76 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4906      	ldr	r1, [pc, #24]	; (8004df4 <HAL_I2C_Mem_Read+0x24c>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fbf8 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e13c      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
 8004dea:	bf00      	nop
 8004dec:	00100002 	.word	0x00100002
 8004df0:	ffff0000 	.word	0xffff0000
 8004df4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004df8:	b672      	cpsid	i
}
 8004dfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e3e:	b662      	cpsie	i
}
 8004e40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e74:	e0e2      	b.n	800503c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	497b      	ldr	r1, [pc, #492]	; (800506c <HAL_I2C_Mem_Read+0x4c4>)
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fba5 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0e9      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea0:	b672      	cpsid	i
}
 8004ea2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ed6:	4b66      	ldr	r3, [pc, #408]	; (8005070 <HAL_I2C_Mem_Read+0x4c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	08db      	lsrs	r3, r3, #3
 8004edc:	4a65      	ldr	r2, [pc, #404]	; (8005074 <HAL_I2C_Mem_Read+0x4cc>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	0a1a      	lsrs	r2, r3, #8
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	00da      	lsls	r2, r3, #3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d118      	bne.n	8004f2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f1e:	b662      	cpsie	i
}
 8004f20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e09a      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d1d9      	bne.n	8004ef0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f7e:	b662      	cpsie	i
}
 8004f80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fb4:	e042      	b.n	800503c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 fcb2 	bl	8005924 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e04c      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b04      	cmp	r3, #4
 8005008:	d118      	bne.n	800503c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f ae94 	bne.w	8004d6e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3728      	adds	r7, #40	; 0x28
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	00010004 	.word	0x00010004
 8005070:	200000c0 	.word	0x200000c0
 8005074:	14f8b589 	.word	0x14f8b589

08005078 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	460b      	mov	r3, r1
 8005086:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005088:	f7fe fdd6 	bl	8003c38 <HAL_GetTick>
 800508c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b20      	cmp	r3, #32
 800509c:	f040 8111 	bne.w	80052c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2319      	movs	r3, #25
 80050a6:	2201      	movs	r2, #1
 80050a8:	4988      	ldr	r1, [pc, #544]	; (80052cc <HAL_I2C_IsDeviceReady+0x254>)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa90 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
 80050b8:	e104      	b.n	80052c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_I2C_IsDeviceReady+0x50>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e0fd      	b.n	80052c4 <HAL_I2C_IsDeviceReady+0x24c>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d007      	beq.n	80050ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2224      	movs	r2, #36	; 0x24
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a70      	ldr	r2, [pc, #448]	; (80052d0 <HAL_I2C_IsDeviceReady+0x258>)
 8005110:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005120:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2200      	movs	r2, #0
 800512a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fa4e 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00d      	beq.n	8005156 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005148:	d103      	bne.n	8005152 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0b6      	b.n	80052c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005156:	897b      	ldrh	r3, [r7, #10]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005164:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005166:	f7fe fd67 	bl	8003c38 <HAL_GetTick>
 800516a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	bf0c      	ite	eq
 800517a:	2301      	moveq	r3, #1
 800517c:	2300      	movne	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800519a:	e025      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800519c:	f7fe fd4c 	bl	8003c38 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <HAL_I2C_IsDeviceReady+0x13a>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	22a0      	movs	r2, #160	; 0xa0
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	bf0c      	ite	eq
 80051c8:	2301      	moveq	r3, #1
 80051ca:	2300      	movne	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2ba0      	cmp	r3, #160	; 0xa0
 80051f2:	d005      	beq.n	8005200 <HAL_I2C_IsDeviceReady+0x188>
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <HAL_I2C_IsDeviceReady+0x188>
 80051fa:	7dbb      	ldrb	r3, [r7, #22]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0cd      	beq.n	800519c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d129      	bne.n	800526a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005224:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	2319      	movs	r3, #25
 8005242:	2201      	movs	r2, #1
 8005244:	4921      	ldr	r1, [pc, #132]	; (80052cc <HAL_I2C_IsDeviceReady+0x254>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f9c2 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e036      	b.n	80052c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e02c      	b.n	80052c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005278:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005282:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2319      	movs	r3, #25
 800528a:	2201      	movs	r2, #1
 800528c:	490f      	ldr	r1, [pc, #60]	; (80052cc <HAL_I2C_IsDeviceReady+0x254>)
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f99e 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e012      	b.n	80052c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	f4ff af32 	bcc.w	8005112 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
  }
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	00100002 	.word	0x00100002
 80052d0:	ffff0000 	.word	0xffff0000

080052d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	817b      	strh	r3, [r7, #10]
 80052e6:	460b      	mov	r3, r1
 80052e8:	813b      	strh	r3, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f960 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d103      	bne.n	800532e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e05f      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	492d      	ldr	r1, [pc, #180]	; (80053fc <I2C_RequestMemoryWrite+0x128>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f9bb 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e04c      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fa46 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e02b      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	e021      	b.n	80053f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa20 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e005      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e6:	893b      	ldrh	r3, [r7, #8]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	00010002 	.word	0x00010002

08005400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005428:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2200      	movs	r2, #0
 8005442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f8c2 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d103      	bne.n	800546a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0aa      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800547c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	4952      	ldr	r1, [pc, #328]	; (80055cc <I2C_RequestMemoryRead+0x1cc>)
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f91d 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e097      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	6a39      	ldr	r1, [r7, #32]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f9a8 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d107      	bne.n	80054d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e076      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	e021      	b.n	800552c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f982 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b04      	cmp	r3, #4
 800550c:	d107      	bne.n	800551e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e050      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005522:	893b      	ldrh	r3, [r7, #8]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	6a39      	ldr	r1, [r7, #32]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f967 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b04      	cmp	r3, #4
 8005542:	d107      	bne.n	8005554 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005552:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e035      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005566:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2200      	movs	r2, #0
 8005570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f82b 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d103      	bne.n	8005598 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e013      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800559c:	897b      	ldrh	r3, [r7, #10]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	4906      	ldr	r1, [pc, #24]	; (80055cc <I2C_RequestMemoryRead+0x1cc>)
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f886 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	00010002 	.word	0x00010002

080055d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055e0:	e048      	b.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d044      	beq.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fe fb25 	bl	8003c38 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d139      	bne.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	d10d      	bne.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x56>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	43da      	mvns	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	e00c      	b.n	8005640 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	43da      	mvns	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4013      	ands	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	429a      	cmp	r2, r3
 8005644:	d116      	bne.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e023      	b.n	80056bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10d      	bne.n	800569a <I2C_WaitOnFlagUntilTimeout+0xca>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	43da      	mvns	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf0c      	ite	eq
 8005690:	2301      	moveq	r3, #1
 8005692:	2300      	movne	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	e00c      	b.n	80056b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	43da      	mvns	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d093      	beq.n	80055e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d2:	e071      	b.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d123      	bne.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f043 0204 	orr.w	r2, r3, #4
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e067      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d041      	beq.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005734:	f7fe fa80 	bl	8003c38 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d136      	bne.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10c      	bne.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e00b      	b.n	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	43da      	mvns	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4013      	ands	r3, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e021      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	0c1b      	lsrs	r3, r3, #16
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d10c      	bne.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	43da      	mvns	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e00b      	b.n	80057f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	43da      	mvns	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f af6d 	bne.w	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005810:	e034      	b.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f8e3 	bl	80059de <I2C_IsAcknowledgeFailed>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e034      	b.n	800588c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d028      	beq.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fe fa05 	bl	8003c38 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11d      	bne.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b80      	cmp	r3, #128	; 0x80
 800584c:	d016      	beq.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e007      	b.n	800588c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d1c3      	bne.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058a0:	e034      	b.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f89b 	bl	80059de <I2C_IsAcknowledgeFailed>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e034      	b.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d028      	beq.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ba:	f7fe f9bd 	bl	8003c38 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d302      	bcc.n	80058d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d11d      	bne.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d016      	beq.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	f043 0220 	orr.w	r2, r3, #32
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e007      	b.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b04      	cmp	r3, #4
 8005918:	d1c3      	bne.n	80058a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005930:	e049      	b.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b10      	cmp	r3, #16
 800593e:	d119      	bne.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e030      	b.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fe f960 	bl	8003c38 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d11d      	bne.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d016      	beq.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e007      	b.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	d1ae      	bne.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d11b      	bne.n	8005a2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e272      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8087 	beq.w	8005b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a5c:	4b92      	ldr	r3, [pc, #584]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d00c      	beq.n	8005a82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a68:	4b8f      	ldr	r3, [pc, #572]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d112      	bne.n	8005a9a <HAL_RCC_OscConfig+0x5e>
 8005a74:	4b8c      	ldr	r3, [pc, #560]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a80:	d10b      	bne.n	8005a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a82:	4b89      	ldr	r3, [pc, #548]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d06c      	beq.n	8005b68 <HAL_RCC_OscConfig+0x12c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d168      	bne.n	8005b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e24c      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x76>
 8005aa4:	4b80      	ldr	r3, [pc, #512]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a7f      	ldr	r2, [pc, #508]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	e02e      	b.n	8005b10 <HAL_RCC_OscConfig+0xd4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x98>
 8005aba:	4b7b      	ldr	r3, [pc, #492]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7a      	ldr	r2, [pc, #488]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b78      	ldr	r3, [pc, #480]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a77      	ldr	r2, [pc, #476]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e01d      	b.n	8005b10 <HAL_RCC_OscConfig+0xd4>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0xbc>
 8005ade:	4b72      	ldr	r3, [pc, #456]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a71      	ldr	r2, [pc, #452]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b6f      	ldr	r3, [pc, #444]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a6e      	ldr	r2, [pc, #440]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e00b      	b.n	8005b10 <HAL_RCC_OscConfig+0xd4>
 8005af8:	4b6b      	ldr	r3, [pc, #428]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	4b68      	ldr	r3, [pc, #416]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a67      	ldr	r2, [pc, #412]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b18:	f7fe f88e 	bl	8003c38 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b20:	f7fe f88a 	bl	8003c38 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	; 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e200      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0xe4>
 8005b3e:	e014      	b.n	8005b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b40:	f7fe f87a 	bl	8003c38 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b48:	f7fe f876 	bl	8003c38 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	; 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e1ec      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b5a:	4b53      	ldr	r3, [pc, #332]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x10c>
 8005b66:	e000      	b.n	8005b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d063      	beq.n	8005c3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b76:	4b4c      	ldr	r3, [pc, #304]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b82:	4b49      	ldr	r3, [pc, #292]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d11c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x18c>
 8005b8e:	4b46      	ldr	r3, [pc, #280]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d116      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9a:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x176>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d001      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e1c0      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb2:	4b3d      	ldr	r3, [pc, #244]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4939      	ldr	r1, [pc, #228]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc6:	e03a      	b.n	8005c3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d020      	beq.n	8005c12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd0:	4b36      	ldr	r3, [pc, #216]	; (8005cac <HAL_RCC_OscConfig+0x270>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd6:	f7fe f82f 	bl	8003c38 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bde:	f7fe f82b 	bl	8003c38 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e1a1      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4927      	ldr	r1, [pc, #156]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]
 8005c10:	e015      	b.n	8005c3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c12:	4b26      	ldr	r3, [pc, #152]	; (8005cac <HAL_RCC_OscConfig+0x270>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c18:	f7fe f80e 	bl	8003c38 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c20:	f7fe f80a 	bl	8003c38 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e180      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c32:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03a      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d019      	beq.n	8005c86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <HAL_RCC_OscConfig+0x274>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c58:	f7fd ffee 	bl	8003c38 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c60:	f7fd ffea 	bl	8003c38 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e160      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f0      	beq.n	8005c60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f000 face 	bl	8006220 <RCC_Delay>
 8005c84:	e01c      	b.n	8005cc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <HAL_RCC_OscConfig+0x274>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8c:	f7fd ffd4 	bl	8003c38 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c92:	e00f      	b.n	8005cb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c94:	f7fd ffd0 	bl	8003c38 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d908      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e146      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	42420000 	.word	0x42420000
 8005cb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb4:	4b92      	ldr	r3, [pc, #584]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e9      	bne.n	8005c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80a6 	beq.w	8005e1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd2:	4b8b      	ldr	r3, [pc, #556]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10d      	bne.n	8005cfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	4b88      	ldr	r3, [pc, #544]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4a87      	ldr	r2, [pc, #540]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	61d3      	str	r3, [r2, #28]
 8005cea:	4b85      	ldr	r3, [pc, #532]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfa:	4b82      	ldr	r3, [pc, #520]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d118      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d06:	4b7f      	ldr	r3, [pc, #508]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a7e      	ldr	r2, [pc, #504]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d12:	f7fd ff91 	bl	8003c38 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1a:	f7fd ff8d 	bl	8003c38 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b64      	cmp	r3, #100	; 0x64
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e103      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2c:	4b75      	ldr	r3, [pc, #468]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCC_OscConfig+0x312>
 8005d40:	4b6f      	ldr	r3, [pc, #444]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	4a6e      	ldr	r2, [pc, #440]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6213      	str	r3, [r2, #32]
 8005d4c:	e02d      	b.n	8005daa <HAL_RCC_OscConfig+0x36e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCC_OscConfig+0x334>
 8005d56:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	4a69      	ldr	r2, [pc, #420]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	6213      	str	r3, [r2, #32]
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4a66      	ldr	r2, [pc, #408]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	f023 0304 	bic.w	r3, r3, #4
 8005d6c:	6213      	str	r3, [r2, #32]
 8005d6e:	e01c      	b.n	8005daa <HAL_RCC_OscConfig+0x36e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b05      	cmp	r3, #5
 8005d76:	d10c      	bne.n	8005d92 <HAL_RCC_OscConfig+0x356>
 8005d78:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	4a60      	ldr	r2, [pc, #384]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	6213      	str	r3, [r2, #32]
 8005d84:	4b5e      	ldr	r3, [pc, #376]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	4a5d      	ldr	r2, [pc, #372]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6213      	str	r3, [r2, #32]
 8005d90:	e00b      	b.n	8005daa <HAL_RCC_OscConfig+0x36e>
 8005d92:	4b5b      	ldr	r3, [pc, #364]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	4a5a      	ldr	r2, [pc, #360]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	6213      	str	r3, [r2, #32]
 8005d9e:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	4a57      	ldr	r2, [pc, #348]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d015      	beq.n	8005dde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db2:	f7fd ff41 	bl	8003c38 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db8:	e00a      	b.n	8005dd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dba:	f7fd ff3d 	bl	8003c38 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e0b1      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd0:	4b4b      	ldr	r3, [pc, #300]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ee      	beq.n	8005dba <HAL_RCC_OscConfig+0x37e>
 8005ddc:	e014      	b.n	8005e08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dde:	f7fd ff2b 	bl	8003c38 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7fd ff27 	bl	8003c38 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e09b      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dfc:	4b40      	ldr	r3, [pc, #256]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1ee      	bne.n	8005de6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d105      	bne.n	8005e1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e0e:	4b3c      	ldr	r3, [pc, #240]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	4a3b      	ldr	r2, [pc, #236]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8087 	beq.w	8005f32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e24:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 030c 	and.w	r3, r3, #12
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d061      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d146      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e38:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <HAL_RCC_OscConfig+0x4cc>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3e:	f7fd fefb 	bl	8003c38 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e46:	f7fd fef7 	bl	8003c38 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e06d      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e58:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1f0      	bne.n	8005e46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6c:	d108      	bne.n	8005e80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	4921      	ldr	r1, [pc, #132]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e80:	4b1f      	ldr	r3, [pc, #124]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a19      	ldr	r1, [r3, #32]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	430b      	orrs	r3, r1
 8005e92:	491b      	ldr	r1, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <HAL_RCC_OscConfig+0x4cc>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9e:	f7fd fecb 	bl	8003c38 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea6:	f7fd fec7 	bl	8003c38 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e03d      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eb8:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x46a>
 8005ec4:	e035      	b.n	8005f32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec6:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <HAL_RCC_OscConfig+0x4cc>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ecc:	f7fd feb4 	bl	8003c38 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed4:	f7fd feb0 	bl	8003c38 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e026      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x498>
 8005ef2:	e01e      	b.n	8005f32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e019      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40007000 	.word	0x40007000
 8005f08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <HAL_RCC_OscConfig+0x500>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40021000 	.word	0x40021000

08005f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0d0      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f54:	4b6a      	ldr	r3, [pc, #424]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d910      	bls.n	8005f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f62:	4b67      	ldr	r3, [pc, #412]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f023 0207 	bic.w	r2, r3, #7
 8005f6a:	4965      	ldr	r1, [pc, #404]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	4b63      	ldr	r3, [pc, #396]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0b8      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d020      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f9c:	4b59      	ldr	r3, [pc, #356]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a58      	ldr	r2, [pc, #352]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb4:	4b53      	ldr	r3, [pc, #332]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc0:	4b50      	ldr	r3, [pc, #320]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	494d      	ldr	r1, [pc, #308]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d040      	beq.n	8006060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d115      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e07f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d107      	bne.n	800600e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffe:	4b41      	ldr	r3, [pc, #260]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e073      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600e:	4b3d      	ldr	r3, [pc, #244]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e06b      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800601e:	4b39      	ldr	r3, [pc, #228]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f023 0203 	bic.w	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4936      	ldr	r1, [pc, #216]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	4313      	orrs	r3, r2
 800602e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006030:	f7fd fe02 	bl	8003c38 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	e00a      	b.n	800604e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006038:	f7fd fdfe 	bl	8003c38 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	; 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e053      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604e:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f003 020c 	and.w	r2, r3, #12
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	429a      	cmp	r2, r3
 800605e:	d1eb      	bne.n	8006038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d210      	bcs.n	8006090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 0207 	bic.w	r2, r3, #7
 8006076:	4922      	ldr	r1, [pc, #136]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	4313      	orrs	r3, r2
 800607c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d001      	beq.n	8006090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e032      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4916      	ldr	r1, [pc, #88]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	490e      	ldr	r1, [pc, #56]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060ce:	f000 f821 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	490a      	ldr	r1, [pc, #40]	; (8006108 <HAL_RCC_ClockConfig+0x1c8>)
 80060e0:	5ccb      	ldrb	r3, [r1, r3]
 80060e2:	fa22 f303 	lsr.w	r3, r2, r3
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_RCC_ClockConfig+0x1cc>)
 80060e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <HAL_RCC_ClockConfig+0x1d0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fd fd60 	bl	8003bb4 <HAL_InitTick>

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40022000 	.word	0x40022000
 8006104:	40021000 	.word	0x40021000
 8006108:	0800cf28 	.word	0x0800cf28
 800610c:	200000c0 	.word	0x200000c0
 8006110:	200000c4 	.word	0x200000c4

08006114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800612e:	4b1e      	ldr	r3, [pc, #120]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	2b04      	cmp	r3, #4
 800613c:	d002      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x30>
 800613e:	2b08      	cmp	r3, #8
 8006140:	d003      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0x36>
 8006142:	e027      	b.n	8006194 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006144:	4b19      	ldr	r3, [pc, #100]	; (80061ac <HAL_RCC_GetSysClockFreq+0x98>)
 8006146:	613b      	str	r3, [r7, #16]
      break;
 8006148:	e027      	b.n	800619a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	0c9b      	lsrs	r3, r3, #18
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	4a17      	ldr	r2, [pc, #92]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006154:	5cd3      	ldrb	r3, [r2, r3]
 8006156:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d010      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	0c5b      	lsrs	r3, r3, #17
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	4a11      	ldr	r2, [pc, #68]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800616e:	5cd3      	ldrb	r3, [r2, r3]
 8006170:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <HAL_RCC_GetSysClockFreq+0x98>)
 8006176:	fb03 f202 	mul.w	r2, r3, r2
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e004      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006188:	fb02 f303 	mul.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	613b      	str	r3, [r7, #16]
      break;
 8006192:	e002      	b.n	800619a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <HAL_RCC_GetSysClockFreq+0x98>)
 8006196:	613b      	str	r3, [r7, #16]
      break;
 8006198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800619a:	693b      	ldr	r3, [r7, #16]
}
 800619c:	4618      	mov	r0, r3
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40021000 	.word	0x40021000
 80061ac:	007a1200 	.word	0x007a1200
 80061b0:	0800cf40 	.word	0x0800cf40
 80061b4:	0800cf50 	.word	0x0800cf50
 80061b8:	003d0900 	.word	0x003d0900

080061bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061c0:	4b02      	ldr	r3, [pc, #8]	; (80061cc <HAL_RCC_GetHCLKFreq+0x10>)
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr
 80061cc:	200000c0 	.word	0x200000c0

080061d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061d4:	f7ff fff2 	bl	80061bc <HAL_RCC_GetHCLKFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	4903      	ldr	r1, [pc, #12]	; (80061f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40021000 	.word	0x40021000
 80061f4:	0800cf38 	.word	0x0800cf38

080061f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061fc:	f7ff ffde 	bl	80061bc <HAL_RCC_GetHCLKFreq>
 8006200:	4602      	mov	r2, r0
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	0adb      	lsrs	r3, r3, #11
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	4903      	ldr	r1, [pc, #12]	; (800621c <HAL_RCC_GetPCLK2Freq+0x24>)
 800620e:	5ccb      	ldrb	r3, [r1, r3]
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40021000 	.word	0x40021000
 800621c:	0800cf38 	.word	0x0800cf38

08006220 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <RCC_Delay+0x34>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a0a      	ldr	r2, [pc, #40]	; (8006258 <RCC_Delay+0x38>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	0a5b      	lsrs	r3, r3, #9
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800623c:	bf00      	nop
  }
  while (Delay --);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1e5a      	subs	r2, r3, #1
 8006242:	60fa      	str	r2, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1f9      	bne.n	800623c <RCC_Delay+0x1c>
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	200000c0 	.word	0x200000c0
 8006258:	10624dd3 	.word	0x10624dd3

0800625c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e041      	b.n	80062f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fd fa3e 	bl	8003704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f000 fd5a 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e041      	b.n	8006390 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f839 	bl	8006398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f000 fd0b 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e022      	b.n	800641e <HAL_TIM_PWM_Start_DMA+0x72>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d109      	bne.n	80063f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	e015      	b.n	800641e <HAL_TIM_PWM_Start_DMA+0x72>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d109      	bne.n	800640c <HAL_TIM_PWM_Start_DMA+0x60>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e008      	b.n	800641e <HAL_TIM_PWM_Start_DMA+0x72>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
 8006424:	e153      	b.n	80066ce <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_TIM_PWM_Start_DMA+0x94>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e022      	b.n	8006486 <HAL_TIM_PWM_Start_DMA+0xda>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b04      	cmp	r3, #4
 8006444:	d109      	bne.n	800645a <HAL_TIM_PWM_Start_DMA+0xae>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	bf0c      	ite	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	2300      	movne	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	e015      	b.n	8006486 <HAL_TIM_PWM_Start_DMA+0xda>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d109      	bne.n	8006474 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e008      	b.n	8006486 <HAL_TIM_PWM_Start_DMA+0xda>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b01      	cmp	r3, #1
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d024      	beq.n	80064d4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_TIM_PWM_Start_DMA+0xea>
 8006490:	887b      	ldrh	r3, [r7, #2]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e119      	b.n	80066ce <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start_DMA+0xfe>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a8:	e016      	b.n	80064d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Start_DMA+0x10e>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b8:	e00e      	b.n	80064d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Start_DMA+0x11e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c8:	e006      	b.n	80064d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064d2:	e001      	b.n	80064d8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0fa      	b.n	80066ce <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b0c      	cmp	r3, #12
 80064dc:	f200 80ae 	bhi.w	800663c <HAL_TIM_PWM_Start_DMA+0x290>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	0800651d 	.word	0x0800651d
 80064ec:	0800663d 	.word	0x0800663d
 80064f0:	0800663d 	.word	0x0800663d
 80064f4:	0800663d 	.word	0x0800663d
 80064f8:	08006565 	.word	0x08006565
 80064fc:	0800663d 	.word	0x0800663d
 8006500:	0800663d 	.word	0x0800663d
 8006504:	0800663d 	.word	0x0800663d
 8006508:	080065ad 	.word	0x080065ad
 800650c:	0800663d 	.word	0x0800663d
 8006510:	0800663d 	.word	0x0800663d
 8006514:	0800663d 	.word	0x0800663d
 8006518:	080065f5 	.word	0x080065f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	4a6d      	ldr	r2, [pc, #436]	; (80066d8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	4a6c      	ldr	r2, [pc, #432]	; (80066dc <HAL_TIM_PWM_Start_DMA+0x330>)
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	4a6b      	ldr	r2, [pc, #428]	; (80066e0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3334      	adds	r3, #52	; 0x34
 8006540:	461a      	mov	r2, r3
 8006542:	887b      	ldrh	r3, [r7, #2]
 8006544:	f7fd fd0e 	bl	8003f64 <HAL_DMA_Start_IT>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e0bd      	b.n	80066ce <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006560:	60da      	str	r2, [r3, #12]
      break;
 8006562:	e06e      	b.n	8006642 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	4a5b      	ldr	r2, [pc, #364]	; (80066d8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	4a5a      	ldr	r2, [pc, #360]	; (80066dc <HAL_TIM_PWM_Start_DMA+0x330>)
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	4a59      	ldr	r2, [pc, #356]	; (80066e0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800657a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3338      	adds	r3, #56	; 0x38
 8006588:	461a      	mov	r2, r3
 800658a:	887b      	ldrh	r3, [r7, #2]
 800658c:	f7fd fcea 	bl	8003f64 <HAL_DMA_Start_IT>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e099      	b.n	80066ce <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a8:	60da      	str	r2, [r3, #12]
      break;
 80065aa:	e04a      	b.n	8006642 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4a49      	ldr	r2, [pc, #292]	; (80066d8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a48      	ldr	r2, [pc, #288]	; (80066dc <HAL_TIM_PWM_Start_DMA+0x330>)
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a47      	ldr	r2, [pc, #284]	; (80066e0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80065c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	333c      	adds	r3, #60	; 0x3c
 80065d0:	461a      	mov	r2, r3
 80065d2:	887b      	ldrh	r3, [r7, #2]
 80065d4:	f7fd fcc6 	bl	8003f64 <HAL_DMA_Start_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e075      	b.n	80066ce <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f0:	60da      	str	r2, [r3, #12]
      break;
 80065f2:	e026      	b.n	8006642 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	4a37      	ldr	r2, [pc, #220]	; (80066d8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80065fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	4a36      	ldr	r2, [pc, #216]	; (80066dc <HAL_TIM_PWM_Start_DMA+0x330>)
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	4a35      	ldr	r2, [pc, #212]	; (80066e0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800660a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3340      	adds	r3, #64	; 0x40
 8006618:	461a      	mov	r2, r3
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	f7fd fca2 	bl	8003f64 <HAL_DMA_Start_IT>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e051      	b.n	80066ce <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006638:	60da      	str	r2, [r3, #12]
      break;
 800663a:	e002      	b.n	8006642 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
      break;
 8006640:	bf00      	nop
  }

  if (status == HAL_OK)
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d141      	bne.n	80066cc <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2201      	movs	r2, #1
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fdff 	bl	8007254 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d107      	bne.n	8006670 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800666e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1b      	ldr	r2, [pc, #108]	; (80066e4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d009      	beq.n	8006698 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a16      	ldr	r2, [pc, #88]	; (80066ec <HAL_TIM_PWM_Start_DMA+0x340>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d111      	bne.n	80066bc <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b06      	cmp	r3, #6
 80066a8:	d010      	beq.n	80066cc <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ba:	e007      	b.n	80066cc <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	08006c45 	.word	0x08006c45
 80066dc:	08006ced 	.word	0x08006ced
 80066e0:	08006bb3 	.word	0x08006bb3
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800

080066f0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b0c      	cmp	r3, #12
 8006702:	d855      	bhi.n	80067b0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006741 	.word	0x08006741
 8006710:	080067b1 	.word	0x080067b1
 8006714:	080067b1 	.word	0x080067b1
 8006718:	080067b1 	.word	0x080067b1
 800671c:	0800675d 	.word	0x0800675d
 8006720:	080067b1 	.word	0x080067b1
 8006724:	080067b1 	.word	0x080067b1
 8006728:	080067b1 	.word	0x080067b1
 800672c:	08006779 	.word	0x08006779
 8006730:	080067b1 	.word	0x080067b1
 8006734:	080067b1 	.word	0x080067b1
 8006738:	080067b1 	.word	0x080067b1
 800673c:	08006795 	.word	0x08006795
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800674e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f7fd fca1 	bl	800409c <HAL_DMA_Abort_IT>
      break;
 800675a:	e02c      	b.n	80067b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	4618      	mov	r0, r3
 8006772:	f7fd fc93 	bl	800409c <HAL_DMA_Abort_IT>
      break;
 8006776:	e01e      	b.n	80067b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006786:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4618      	mov	r0, r3
 800678e:	f7fd fc85 	bl	800409c <HAL_DMA_Abort_IT>
      break;
 8006792:	e010      	b.n	80067b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fd fc77 	bl	800409c <HAL_DMA_Abort_IT>
      break;
 80067ae:	e002      	b.n	80067b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
      break;
 80067b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d157      	bne.n	800686c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2200      	movs	r2, #0
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fd45 	bl	8007254 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a2a      	ldr	r2, [pc, #168]	; (8006878 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d117      	bne.n	8006804 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f241 1311 	movw	r3, #4369	; 0x1111
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10f      	bne.n	8006804 <HAL_TIM_PWM_Stop_DMA+0x114>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	f240 4344 	movw	r3, #1092	; 0x444
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d107      	bne.n	8006804 <HAL_TIM_PWM_Stop_DMA+0x114>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006802:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6a1a      	ldr	r2, [r3, #32]
 800680a:	f241 1311 	movw	r3, #4369	; 0x1111
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10f      	bne.n	8006834 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a1a      	ldr	r2, [r3, #32]
 800681a:	f240 4344 	movw	r3, #1092	; 0x444
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d107      	bne.n	8006834 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <HAL_TIM_PWM_Stop_DMA+0x154>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006842:	e013      	b.n	800686c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b04      	cmp	r3, #4
 8006848:	d104      	bne.n	8006854 <HAL_TIM_PWM_Stop_DMA+0x164>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006852:	e00b      	b.n	800686c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d104      	bne.n	8006864 <HAL_TIM_PWM_Stop_DMA+0x174>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006862:	e003      	b.n	800686c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40012c00 	.word	0x40012c00

0800687c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006896:	2302      	movs	r3, #2
 8006898:	e0ae      	b.n	80069f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	f200 809f 	bhi.w	80069e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	080069e9 	.word	0x080069e9
 80068b8:	080069e9 	.word	0x080069e9
 80068bc:	080069e9 	.word	0x080069e9
 80068c0:	08006925 	.word	0x08006925
 80068c4:	080069e9 	.word	0x080069e9
 80068c8:	080069e9 	.word	0x080069e9
 80068cc:	080069e9 	.word	0x080069e9
 80068d0:	08006967 	.word	0x08006967
 80068d4:	080069e9 	.word	0x080069e9
 80068d8:	080069e9 	.word	0x080069e9
 80068dc:	080069e9 	.word	0x080069e9
 80068e0:	080069a7 	.word	0x080069a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fa94 	bl	8006e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0208 	orr.w	r2, r2, #8
 80068fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0204 	bic.w	r2, r2, #4
 800690e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6999      	ldr	r1, [r3, #24]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	619a      	str	r2, [r3, #24]
      break;
 8006922:	e064      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fada 	bl	8006ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6999      	ldr	r1, [r3, #24]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	021a      	lsls	r2, r3, #8
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	619a      	str	r2, [r3, #24]
      break;
 8006964:	e043      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fb23 	bl	8006fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0208 	orr.w	r2, r2, #8
 8006980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0204 	bic.w	r2, r2, #4
 8006990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69d9      	ldr	r1, [r3, #28]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	61da      	str	r2, [r3, #28]
      break;
 80069a4:	e023      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fb6d 	bl	800708c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69d9      	ldr	r1, [r3, #28]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	021a      	lsls	r2, r3, #8
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	61da      	str	r2, [r3, #28]
      break;
 80069e6:	e002      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	75fb      	strb	r3, [r7, #23]
      break;
 80069ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIM_ConfigClockSource+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e0b4      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x186>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a54:	d03e      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5a:	f200 8087 	bhi.w	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	f000 8086 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x172>
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d87f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a6c:	2b70      	cmp	r3, #112	; 0x70
 8006a6e:	d01a      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0xa6>
 8006a70:	2b70      	cmp	r3, #112	; 0x70
 8006a72:	d87b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a74:	2b60      	cmp	r3, #96	; 0x60
 8006a76:	d050      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x11a>
 8006a78:	2b60      	cmp	r3, #96	; 0x60
 8006a7a:	d877      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a7c:	2b50      	cmp	r3, #80	; 0x50
 8006a7e:	d03c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xfa>
 8006a80:	2b50      	cmp	r3, #80	; 0x50
 8006a82:	d873      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	d058      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0x13a>
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d86f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	2b30      	cmp	r3, #48	; 0x30
 8006a8e:	d064      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006a90:	2b30      	cmp	r3, #48	; 0x30
 8006a92:	d86b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d060      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d867      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05c      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d05a      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa4:	e062      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6899      	ldr	r1, [r3, #8]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f000 fbae 	bl	8007216 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
      break;
 8006ad2:	e04f      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f000 fb97 	bl	8007216 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006af6:	609a      	str	r2, [r3, #8]
      break;
 8006af8:	e03c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6859      	ldr	r1, [r3, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f000 fb0e 	bl	8007128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2150      	movs	r1, #80	; 0x50
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fb65 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006b18:	e02c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f000 fb2c 	bl	8007184 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2160      	movs	r1, #96	; 0x60
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fb55 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006b38:	e01c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f000 faee 	bl	8007128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fb45 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006b58:	e00c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 fb3c 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006b6a:	e003      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	e000      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d107      	bne.n	8006bda <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bd8:	e02a      	b.n	8006c30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d107      	bne.n	8006bf4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2202      	movs	r2, #2
 8006be8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf2:	e01d      	b.n	8006c30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d107      	bne.n	8006c0e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2204      	movs	r2, #4
 8006c02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c0c:	e010      	b.n	8006c30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d107      	bne.n	8006c28 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2208      	movs	r2, #8
 8006c1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c26:	e003      	b.n	8006c30 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ffb5 	bl	8006ba0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	771a      	strb	r2, [r3, #28]
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d10b      	bne.n	8006c74 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d136      	bne.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c72:	e031      	b.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d10b      	bne.n	8006c96 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2202      	movs	r2, #2
 8006c82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d125      	bne.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c94:	e020      	b.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d10b      	bne.n	8006cb8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d114      	bne.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb6:	e00f      	b.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d10a      	bne.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7fc fa41 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	771a      	strb	r2, [r3, #28]
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d103      	bne.n	8006d0c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	771a      	strb	r2, [r3, #28]
 8006d0a:	e019      	b.n	8006d40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d103      	bne.n	8006d1e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	771a      	strb	r2, [r3, #28]
 8006d1c:	e010      	b.n	8006d40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d103      	bne.n	8006d30 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	771a      	strb	r2, [r3, #28]
 8006d2e:	e007      	b.n	8006d40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d102      	bne.n	8006d40 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff ff24 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
}
 8006d4c:	bf00      	nop
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a29      	ldr	r2, [pc, #164]	; (8006e0c <TIM_Base_SetConfig+0xb8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_Base_SetConfig+0x30>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d007      	beq.n	8006d84 <TIM_Base_SetConfig+0x30>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a26      	ldr	r2, [pc, #152]	; (8006e10 <TIM_Base_SetConfig+0xbc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_Base_SetConfig+0x30>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a25      	ldr	r2, [pc, #148]	; (8006e14 <TIM_Base_SetConfig+0xc0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d108      	bne.n	8006d96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <TIM_Base_SetConfig+0xb8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0x62>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0x62>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a19      	ldr	r2, [pc, #100]	; (8006e10 <TIM_Base_SetConfig+0xbc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0x62>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <TIM_Base_SetConfig+0xc0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a07      	ldr	r2, [pc, #28]	; (8006e0c <TIM_Base_SetConfig+0xb8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d103      	bne.n	8006dfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	615a      	str	r2, [r3, #20]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800

08006e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f023 0201 	bic.w	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 0302 	bic.w	r3, r3, #2
 8006e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <TIM_OC1_SetConfig+0xc8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d10c      	bne.n	8006e8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0308 	bic.w	r3, r3, #8
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a13      	ldr	r2, [pc, #76]	; (8006ee0 <TIM_OC1_SetConfig+0xc8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d111      	bne.n	8006eba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00

08006ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f023 0210 	bic.w	r2, r3, #16
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0320 	bic.w	r3, r3, #32
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <TIM_OC2_SetConfig+0xd0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10d      	bne.n	8006f60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a14      	ldr	r2, [pc, #80]	; (8006fb4 <TIM_OC2_SetConfig+0xd0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d113      	bne.n	8006f90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr
 8006fb4:	40012c00 	.word	0x40012c00

08006fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <TIM_OC3_SetConfig+0xd0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d10d      	bne.n	8007032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800701c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a14      	ldr	r2, [pc, #80]	; (8007088 <TIM_OC3_SetConfig+0xd0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d113      	bne.n	8007062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	621a      	str	r2, [r3, #32]
}
 800707c:	bf00      	nop
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40012c00 	.word	0x40012c00

0800708c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	031b      	lsls	r3, r3, #12
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a0f      	ldr	r2, [pc, #60]	; (8007124 <TIM_OC4_SetConfig+0x98>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d109      	bne.n	8007100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	019b      	lsls	r3, r3, #6
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr
 8007124:	40012c00 	.word	0x40012c00

08007128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 030a 	bic.w	r3, r3, #10
 8007164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0210 	bic.w	r2, r3, #16
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	031b      	lsls	r3, r3, #12
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr

080071e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	f043 0307 	orr.w	r3, r3, #7
 8007204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	609a      	str	r2, [r3, #8]
}
 800720c:	bf00      	nop
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007216:	b480      	push	{r7}
 8007218:	b087      	sub	sp, #28
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
 8007222:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007230:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	021a      	lsls	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	431a      	orrs	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4313      	orrs	r3, r2
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	609a      	str	r2, [r3, #8]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	2201      	movs	r2, #1
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	43db      	mvns	r3, r3
 8007276:	401a      	ands	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	431a      	orrs	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e046      	b.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a16      	ldr	r2, [pc, #88]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00e      	beq.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007300:	d009      	beq.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a12      	ldr	r2, [pc, #72]	; (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d004      	beq.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a10      	ldr	r2, [pc, #64]	; (8007354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10c      	bne.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	4313      	orrs	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr
 800734c:	40012c00 	.word	0x40012c00
 8007350:	40000400 	.word	0x40000400
 8007354:	40000800 	.word	0x40000800

08007358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e042      	b.n	80073f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fc fa52 	bl	8003828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2224      	movs	r2, #36	; 0x24
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800739a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 ff5d 	bl	800825c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	; 0x28
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b20      	cmp	r3, #32
 8007416:	d16d      	bne.n	80074f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_UART_Transmit+0x2c>
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e066      	b.n	80074f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2221      	movs	r2, #33	; 0x21
 8007432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007436:	f7fc fbff 	bl	8003c38 <HAL_GetTick>
 800743a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	88fa      	ldrh	r2, [r7, #6]
 8007440:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	88fa      	ldrh	r2, [r7, #6]
 8007446:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007450:	d108      	bne.n	8007464 <HAL_UART_Transmit+0x6c>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e003      	b.n	800746c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800746c:	e02a      	b.n	80074c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2200      	movs	r2, #0
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fc24 	bl	8007cc6 <UART_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e036      	b.n	80074f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800749c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3302      	adds	r3, #2
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e007      	b.n	80074b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1cf      	bne.n	800746e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2140      	movs	r1, #64	; 0x40
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fbf4 	bl	8007cc6 <UART_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e006      	b.n	80074f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	4613      	mov	r3, r2
 800750a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b20      	cmp	r3, #32
 8007516:	d112      	bne.n	800753e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_UART_Receive_DMA+0x26>
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e00b      	b.n	8007540 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	461a      	mov	r2, r3
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fc35 	bl	8007da4 <UART_Start_Receive_DMA>
 800753a:	4603      	mov	r3, r0
 800753c:	e000      	b.n	8007540 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800753e:	2302      	movs	r3, #2
  }
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b0ba      	sub	sp, #232	; 0xe8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800756e:	2300      	movs	r3, #0
 8007570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007574:	2300      	movs	r3, #0
 8007576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10f      	bne.n	80075ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <HAL_UART_IRQHandler+0x66>
 800759a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fd9a 	bl	80080e0 <UART_Receive_IT>
      return;
 80075ac:	e25b      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80de 	beq.w	8007774 <HAL_UART_IRQHandler+0x22c>
 80075b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80d1 	beq.w	8007774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <HAL_UART_IRQHandler+0xae>
 80075de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ee:	f043 0201 	orr.w	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <HAL_UART_IRQHandler+0xd2>
 8007602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	f043 0202 	orr.w	r2, r3, #2
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800761a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00b      	beq.n	800763e <HAL_UART_IRQHandler+0xf6>
 8007626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	f043 0204 	orr.w	r2, r3, #4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800763e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d011      	beq.n	800766e <HAL_UART_IRQHandler+0x126>
 800764a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	f043 0208 	orr.w	r2, r3, #8
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 81f2 	beq.w	8007a5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_UART_IRQHandler+0x14e>
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fd25 	bl	80080e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <HAL_UART_IRQHandler+0x17a>
 80076ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d04f      	beq.n	8007762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fc2f 	bl	8007f26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d041      	beq.n	800775a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3314      	adds	r3, #20
 80076dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3314      	adds	r3, #20
 80076fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800770e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800771a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1d9      	bne.n	80076d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d013      	beq.n	8007752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	4a7e      	ldr	r2, [pc, #504]	; (8007928 <HAL_UART_IRQHandler+0x3e0>)
 8007730:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	4618      	mov	r0, r3
 8007738:	f7fc fcb0 	bl	800409c <HAL_DMA_Abort_IT>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d016      	beq.n	8007770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007750:	e00e      	b.n	8007770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9a5 	bl	8007aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	e00a      	b.n	8007770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f9a1 	bl	8007aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007760:	e006      	b.n	8007770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f99d 	bl	8007aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800776e:	e175      	b.n	8007a5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007770:	bf00      	nop
    return;
 8007772:	e173      	b.n	8007a5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	2b01      	cmp	r3, #1
 800777a:	f040 814f 	bne.w	8007a1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8148 	beq.w	8007a1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8141 	beq.w	8007a1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 80b6 	beq.w	800792c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 8145 	beq.w	8007a60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077de:	429a      	cmp	r2, r3
 80077e0:	f080 813e 	bcs.w	8007a60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	2b20      	cmp	r3, #32
 80077f4:	f000 8088 	beq.w	8007908 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	330c      	adds	r3, #12
 80077fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800780e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	330c      	adds	r3, #12
 8007820:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007824:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007828:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007830:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800783c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1d9      	bne.n	80077f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3314      	adds	r3, #20
 800784a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3314      	adds	r3, #20
 8007864:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007868:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800786c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007870:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800787a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e1      	bne.n	8007844 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3314      	adds	r3, #20
 8007886:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3314      	adds	r3, #20
 80078a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e3      	bne.n	8007880 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d8:	f023 0310 	bic.w	r3, r3, #16
 80078dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80078ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e3      	bne.n	80078c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007902:	4618      	mov	r0, r3
 8007904:	f7fc fb8e 	bl	8004024 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007916:	b29b      	uxth	r3, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	b29b      	uxth	r3, r3
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f8c8 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007924:	e09c      	b.n	8007a60 <HAL_UART_IRQHandler+0x518>
 8007926:	bf00      	nop
 8007928:	08007feb 	.word	0x08007feb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007934:	b29b      	uxth	r3, r3
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 808e 	beq.w	8007a64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8089 	beq.w	8007a64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	330c      	adds	r3, #12
 8007958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007976:	647a      	str	r2, [r7, #68]	; 0x44
 8007978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800797c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e3      	bne.n	8007952 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3314      	adds	r3, #20
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	623b      	str	r3, [r7, #32]
   return(result);
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3314      	adds	r3, #20
 80079aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079ae:	633a      	str	r2, [r7, #48]	; 0x30
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e3      	bne.n	800798a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0310 	bic.w	r3, r3, #16
 80079e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	330c      	adds	r3, #12
 80079f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079f4:	61fa      	str	r2, [r7, #28]
 80079f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	69b9      	ldr	r1, [r7, #24]
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	617b      	str	r3, [r7, #20]
   return(result);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e3      	bne.n	80079d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f84d 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a1a:	e023      	b.n	8007a64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d009      	beq.n	8007a3c <HAL_UART_IRQHandler+0x4f4>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 faec 	bl	8008012 <UART_Transmit_IT>
    return;
 8007a3a:	e014      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00e      	beq.n	8007a66 <HAL_UART_IRQHandler+0x51e>
 8007a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb2b 	bl	80080b0 <UART_EndTransmit_IT>
    return;
 8007a5a:	e004      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
    return;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8007a64:	bf00      	nop
  }
}
 8007a66:	37e8      	adds	r7, #232	; 0xe8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr

08007a7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc80      	pop	{r7}
 8007a8e:	4770      	bx	lr

08007a90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr

08007aca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b09c      	sub	sp, #112	; 0x70
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d172      	bne.n	8007bcc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae8:	2200      	movs	r2, #0
 8007aea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	330c      	adds	r3, #12
 8007b0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	667b      	str	r3, [r7, #100]	; 0x64
 8007b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3314      	adds	r3, #20
 8007b3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b40:	647a      	str	r2, [r7, #68]	; 0x44
 8007b42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	623b      	str	r3, [r7, #32]
   return(result);
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8007b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b74:	633a      	str	r2, [r7, #48]	; 0x30
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d119      	bne.n	8007bcc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	330c      	adds	r3, #12
 8007b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0310 	bic.w	r3, r3, #16
 8007bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bb8:	61fa      	str	r2, [r7, #28]
 8007bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e5      	bne.n	8007b98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bce:	2200      	movs	r2, #0
 8007bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d106      	bne.n	8007be8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bde:	4619      	mov	r1, r3
 8007be0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007be2:	f7ff ff67 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007be6:	e002      	b.n	8007bee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007be8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bea:	f7ff ff48 	bl	8007a7e <HAL_UART_RxCpltCallback>
}
 8007bee:	bf00      	nop
 8007bf0:	3770      	adds	r7, #112	; 0x70
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d108      	bne.n	8007c24 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff ff49 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c22:	e002      	b.n	8007c2a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff ff33 	bl	8007a90 <HAL_UART_RxHalfCpltCallback>
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b21      	cmp	r3, #33	; 0x21
 8007c64:	d108      	bne.n	8007c78 <UART_DMAError+0x46>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c72:	68b8      	ldr	r0, [r7, #8]
 8007c74:	f000 f930 	bl	8007ed8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bf14      	ite	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	2300      	moveq	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b22      	cmp	r3, #34	; 0x22
 8007c98:	d108      	bne.n	8007cac <UART_DMAError+0x7a>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007ca6:	68b8      	ldr	r0, [r7, #8]
 8007ca8:	f000 f93d 	bl	8007f26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb0:	f043 0210 	orr.w	r2, r3, #16
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cb8:	68b8      	ldr	r0, [r7, #8]
 8007cba:	f7ff fef2 	bl	8007aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b090      	sub	sp, #64	; 0x40
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	603b      	str	r3, [r7, #0]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd6:	e050      	b.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d04c      	beq.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ce6:	f7fb ffa7 	bl	8003c38 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d241      	bcs.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d16:	637a      	str	r2, [r7, #52]	; 0x34
 8007d18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e5      	bne.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3314      	adds	r3, #20
 8007d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f023 0301 	bic.w	r3, r3, #1
 8007d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3314      	adds	r3, #20
 8007d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4a:	623a      	str	r2, [r7, #32]
 8007d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	69f9      	ldr	r1, [r7, #28]
 8007d50:	6a3a      	ldr	r2, [r7, #32]
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e5      	bne.n	8007d2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e00f      	b.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4013      	ands	r3, r2
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	bf0c      	ite	eq
 8007d8a:	2301      	moveq	r3, #1
 8007d8c:	2300      	movne	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d09f      	beq.n	8007cd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3740      	adds	r7, #64	; 0x40
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b098      	sub	sp, #96	; 0x60
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2222      	movs	r2, #34	; 0x22
 8007dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd0:	4a3e      	ldr	r2, [pc, #248]	; (8007ecc <UART_Start_Receive_DMA+0x128>)
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd8:	4a3d      	ldr	r2, [pc, #244]	; (8007ed0 <UART_Start_Receive_DMA+0x12c>)
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de0:	4a3c      	ldr	r2, [pc, #240]	; (8007ed4 <UART_Start_Receive_DMA+0x130>)
 8007de2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de8:	2200      	movs	r2, #0
 8007dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007dec:	f107 0308 	add.w	r3, r7, #8
 8007df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	f7fc f8ae 	bl	8003f64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d019      	beq.n	8007e5a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e46:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e5      	bne.n	8007e26 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3314      	adds	r3, #20
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	f043 0301 	orr.w	r3, r3, #1
 8007e70:	657b      	str	r3, [r7, #84]	; 0x54
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3314      	adds	r3, #20
 8007e78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e5      	bne.n	8007e5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3314      	adds	r3, #20
 8007e94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007eae:	627a      	str	r2, [r7, #36]	; 0x24
 8007eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6a39      	ldr	r1, [r7, #32]
 8007eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3760      	adds	r7, #96	; 0x60
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	08007acb 	.word	0x08007acb
 8007ed0:	08007bf7 	.word	0x08007bf7
 8007ed4:	08007c33 	.word	0x08007c33

08007ed8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b089      	sub	sp, #36	; 0x24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	61ba      	str	r2, [r7, #24]
 8007f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6979      	ldr	r1, [r7, #20]
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e5      	bne.n	8007ee0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007f1c:	bf00      	nop
 8007f1e:	3724      	adds	r7, #36	; 0x24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr

08007f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b095      	sub	sp, #84	; 0x54
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	330c      	adds	r3, #12
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	330c      	adds	r3, #12
 8007f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f4e:	643a      	str	r2, [r7, #64]	; 0x40
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e5      	bne.n	8007f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3314      	adds	r3, #20
 8007f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	f023 0301 	bic.w	r3, r3, #1
 8007f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3314      	adds	r3, #20
 8007f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e5      	bne.n	8007f62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d119      	bne.n	8007fd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	330c      	adds	r3, #12
 8007fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f023 0310 	bic.w	r3, r3, #16
 8007fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	330c      	adds	r3, #12
 8007fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fbe:	61ba      	str	r2, [r7, #24]
 8007fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	613b      	str	r3, [r7, #16]
   return(result);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e5      	bne.n	8007f9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fe0:	bf00      	nop
 8007fe2:	3754      	adds	r7, #84	; 0x54
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr

08007fea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff fd4c 	bl	8007aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b21      	cmp	r3, #33	; 0x21
 8008024:	d13e      	bne.n	80080a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802e:	d114      	bne.n	800805a <UART_Transmit_IT+0x48>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d110      	bne.n	800805a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800804c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	1c9a      	adds	r2, r3, #2
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	621a      	str	r2, [r3, #32]
 8008058:	e008      	b.n	800806c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	1c59      	adds	r1, r3, #1
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6211      	str	r1, [r2, #32]
 8008064:	781a      	ldrb	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b01      	subs	r3, #1
 8008074:	b29b      	uxth	r3, r3
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4619      	mov	r1, r3
 800807a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10f      	bne.n	80080a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800808e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800809e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	e000      	b.n	80080a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080a4:	2302      	movs	r3, #2
  }
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bc80      	pop	{r7}
 80080ae:	4770      	bx	lr

080080b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fccb 	bl	8007a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08c      	sub	sp, #48	; 0x30
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b22      	cmp	r3, #34	; 0x22
 80080f2:	f040 80ae 	bne.w	8008252 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fe:	d117      	bne.n	8008130 <UART_Receive_IT+0x50>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d113      	bne.n	8008130 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008108:	2300      	movs	r3, #0
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811e:	b29a      	uxth	r2, r3
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	1c9a      	adds	r2, r3, #2
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	629a      	str	r2, [r3, #40]	; 0x28
 800812e:	e026      	b.n	800817e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008142:	d007      	beq.n	8008154 <UART_Receive_IT+0x74>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <UART_Receive_IT+0x82>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	b2da      	uxtb	r2, r3
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	e008      	b.n	8008174 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816e:	b2da      	uxtb	r2, r3
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008172:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008182:	b29b      	uxth	r3, r3
 8008184:	3b01      	subs	r3, #1
 8008186:	b29b      	uxth	r3, r3
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4619      	mov	r1, r3
 800818c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800818e:	2b00      	cmp	r3, #0
 8008190:	d15d      	bne.n	800824e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0220 	bic.w	r2, r2, #32
 80081a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695a      	ldr	r2, [r3, #20]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0201 	bic.w	r2, r2, #1
 80081c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d135      	bne.n	8008244 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	613b      	str	r3, [r7, #16]
   return(result);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f023 0310 	bic.w	r3, r3, #16
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081fe:	623a      	str	r2, [r7, #32]
 8008200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	69f9      	ldr	r1, [r7, #28]
 8008204:	6a3a      	ldr	r2, [r7, #32]
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	61bb      	str	r3, [r7, #24]
   return(result);
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e5      	bne.n	80081de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b10      	cmp	r3, #16
 800821e:	d10a      	bne.n	8008236 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff fc39 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
 8008242:	e002      	b.n	800824a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff fc1a 	bl	8007a7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	e002      	b.n	8008254 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e000      	b.n	8008254 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008252:	2302      	movs	r3, #2
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3730      	adds	r7, #48	; 0x30
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	4313      	orrs	r3, r2
 800828a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008296:	f023 030c 	bic.w	r3, r3, #12
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	430b      	orrs	r3, r1
 80082a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a2c      	ldr	r2, [pc, #176]	; (8008370 <UART_SetConfig+0x114>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d103      	bne.n	80082cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082c4:	f7fd ff98 	bl	80061f8 <HAL_RCC_GetPCLK2Freq>
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	e002      	b.n	80082d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80082cc:	f7fd ff80 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 80082d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	009a      	lsls	r2, r3, #2
 80082dc:	441a      	add	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e8:	4a22      	ldr	r2, [pc, #136]	; (8008374 <UART_SetConfig+0x118>)
 80082ea:	fba2 2303 	umull	r2, r3, r2, r3
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	0119      	lsls	r1, r3, #4
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009a      	lsls	r2, r3, #2
 80082fc:	441a      	add	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	fbb2 f2f3 	udiv	r2, r2, r3
 8008308:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <UART_SetConfig+0x118>)
 800830a:	fba3 0302 	umull	r0, r3, r3, r2
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	2064      	movs	r0, #100	; 0x64
 8008312:	fb00 f303 	mul.w	r3, r0, r3
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	3332      	adds	r3, #50	; 0x32
 800831c:	4a15      	ldr	r2, [pc, #84]	; (8008374 <UART_SetConfig+0x118>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	095b      	lsrs	r3, r3, #5
 8008324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008328:	4419      	add	r1, r3
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009a      	lsls	r2, r3, #2
 8008334:	441a      	add	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <UART_SetConfig+0x118>)
 8008342:	fba3 0302 	umull	r0, r3, r3, r2
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	2064      	movs	r0, #100	; 0x64
 800834a:	fb00 f303 	mul.w	r3, r0, r3
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	3332      	adds	r3, #50	; 0x32
 8008354:	4a07      	ldr	r2, [pc, #28]	; (8008374 <UART_SetConfig+0x118>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	f003 020f 	and.w	r2, r3, #15
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	440a      	add	r2, r1
 8008366:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008368:	bf00      	nop
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	40013800 	.word	0x40013800
 8008374:	51eb851f 	.word	0x51eb851f

08008378 <_Znwj>:
 8008378:	2801      	cmp	r0, #1
 800837a:	bf38      	it	cc
 800837c:	2001      	movcc	r0, #1
 800837e:	b510      	push	{r4, lr}
 8008380:	4604      	mov	r4, r0
 8008382:	4620      	mov	r0, r4
 8008384:	f001 fd1e 	bl	8009dc4 <malloc>
 8008388:	b930      	cbnz	r0, 8008398 <_Znwj+0x20>
 800838a:	f000 f807 	bl	800839c <_ZSt15get_new_handlerv>
 800838e:	b908      	cbnz	r0, 8008394 <_Znwj+0x1c>
 8008390:	f001 fce6 	bl	8009d60 <abort>
 8008394:	4780      	blx	r0
 8008396:	e7f4      	b.n	8008382 <_Znwj+0xa>
 8008398:	bd10      	pop	{r4, pc}
	...

0800839c <_ZSt15get_new_handlerv>:
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <_ZSt15get_new_handlerv+0xc>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	f3bf 8f5b 	dmb	ish
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	2000088c 	.word	0x2000088c

080083ac <tanf>:
 80083ac:	b507      	push	{r0, r1, r2, lr}
 80083ae:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <tanf+0x48>)
 80083b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80083b4:	4293      	cmp	r3, r2
 80083b6:	4601      	mov	r1, r0
 80083b8:	dc06      	bgt.n	80083c8 <tanf+0x1c>
 80083ba:	2201      	movs	r2, #1
 80083bc:	2100      	movs	r1, #0
 80083be:	b003      	add	sp, #12
 80083c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083c4:	f001 ba56 	b.w	8009874 <__kernel_tanf>
 80083c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083cc:	db04      	blt.n	80083d8 <tanf+0x2c>
 80083ce:	f7f8 fbd9 	bl	8000b84 <__aeabi_fsub>
 80083d2:	b003      	add	sp, #12
 80083d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80083d8:	4669      	mov	r1, sp
 80083da:	f000 fe3b 	bl	8009054 <__ieee754_rem_pio2f>
 80083de:	0042      	lsls	r2, r0, #1
 80083e0:	f002 0202 	and.w	r2, r2, #2
 80083e4:	9901      	ldr	r1, [sp, #4]
 80083e6:	9800      	ldr	r0, [sp, #0]
 80083e8:	f1c2 0201 	rsb	r2, r2, #1
 80083ec:	f001 fa42 	bl	8009874 <__kernel_tanf>
 80083f0:	e7ef      	b.n	80083d2 <tanf+0x26>
 80083f2:	bf00      	nop
 80083f4:	3f490fda 	.word	0x3f490fda

080083f8 <pow>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	4614      	mov	r4, r2
 80083fe:	461d      	mov	r5, r3
 8008400:	4680      	mov	r8, r0
 8008402:	4689      	mov	r9, r1
 8008404:	f000 f860 	bl	80084c8 <__ieee754_pow>
 8008408:	4622      	mov	r2, r4
 800840a:	4606      	mov	r6, r0
 800840c:	460f      	mov	r7, r1
 800840e:	462b      	mov	r3, r5
 8008410:	4620      	mov	r0, r4
 8008412:	4629      	mov	r1, r5
 8008414:	f7f8 fb04 	bl	8000a20 <__aeabi_dcmpun>
 8008418:	bbc8      	cbnz	r0, 800848e <pow+0x96>
 800841a:	2200      	movs	r2, #0
 800841c:	2300      	movs	r3, #0
 800841e:	4640      	mov	r0, r8
 8008420:	4649      	mov	r1, r9
 8008422:	f7f8 facb 	bl	80009bc <__aeabi_dcmpeq>
 8008426:	b1b8      	cbz	r0, 8008458 <pow+0x60>
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	4620      	mov	r0, r4
 800842e:	4629      	mov	r1, r5
 8008430:	f7f8 fac4 	bl	80009bc <__aeabi_dcmpeq>
 8008434:	2800      	cmp	r0, #0
 8008436:	d141      	bne.n	80084bc <pow+0xc4>
 8008438:	4620      	mov	r0, r4
 800843a:	4629      	mov	r1, r5
 800843c:	f001 fb77 	bl	8009b2e <finite>
 8008440:	b328      	cbz	r0, 800848e <pow+0x96>
 8008442:	2200      	movs	r2, #0
 8008444:	2300      	movs	r3, #0
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f7f8 fac1 	bl	80009d0 <__aeabi_dcmplt>
 800844e:	b1f0      	cbz	r0, 800848e <pow+0x96>
 8008450:	f001 fc8e 	bl	8009d70 <__errno>
 8008454:	2322      	movs	r3, #34	; 0x22
 8008456:	e019      	b.n	800848c <pow+0x94>
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f001 fb67 	bl	8009b2e <finite>
 8008460:	b9c8      	cbnz	r0, 8008496 <pow+0x9e>
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	f001 fb62 	bl	8009b2e <finite>
 800846a:	b1a0      	cbz	r0, 8008496 <pow+0x9e>
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f001 fb5d 	bl	8009b2e <finite>
 8008474:	b178      	cbz	r0, 8008496 <pow+0x9e>
 8008476:	4632      	mov	r2, r6
 8008478:	463b      	mov	r3, r7
 800847a:	4630      	mov	r0, r6
 800847c:	4639      	mov	r1, r7
 800847e:	f7f8 facf 	bl	8000a20 <__aeabi_dcmpun>
 8008482:	2800      	cmp	r0, #0
 8008484:	d0e4      	beq.n	8008450 <pow+0x58>
 8008486:	f001 fc73 	bl	8009d70 <__errno>
 800848a:	2321      	movs	r3, #33	; 0x21
 800848c:	6003      	str	r3, [r0, #0]
 800848e:	4630      	mov	r0, r6
 8008490:	4639      	mov	r1, r7
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008496:	2200      	movs	r2, #0
 8008498:	2300      	movs	r3, #0
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	f7f8 fa8d 	bl	80009bc <__aeabi_dcmpeq>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d0f3      	beq.n	800848e <pow+0x96>
 80084a6:	4640      	mov	r0, r8
 80084a8:	4649      	mov	r1, r9
 80084aa:	f001 fb40 	bl	8009b2e <finite>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d0ed      	beq.n	800848e <pow+0x96>
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f001 fb3a 	bl	8009b2e <finite>
 80084ba:	e7c8      	b.n	800844e <pow+0x56>
 80084bc:	2600      	movs	r6, #0
 80084be:	4f01      	ldr	r7, [pc, #4]	; (80084c4 <pow+0xcc>)
 80084c0:	e7e5      	b.n	800848e <pow+0x96>
 80084c2:	bf00      	nop
 80084c4:	3ff00000 	.word	0x3ff00000

080084c8 <__ieee754_pow>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	b093      	sub	sp, #76	; 0x4c
 80084ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084d2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80084d6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80084da:	4689      	mov	r9, r1
 80084dc:	ea56 0102 	orrs.w	r1, r6, r2
 80084e0:	4680      	mov	r8, r0
 80084e2:	d111      	bne.n	8008508 <__ieee754_pow+0x40>
 80084e4:	1803      	adds	r3, r0, r0
 80084e6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80084ea:	4152      	adcs	r2, r2
 80084ec:	4299      	cmp	r1, r3
 80084ee:	4b82      	ldr	r3, [pc, #520]	; (80086f8 <__ieee754_pow+0x230>)
 80084f0:	4193      	sbcs	r3, r2
 80084f2:	f080 84b9 	bcs.w	8008e68 <__ieee754_pow+0x9a0>
 80084f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f7 fe3f 	bl	8000180 <__adddf3>
 8008502:	4683      	mov	fp, r0
 8008504:	468c      	mov	ip, r1
 8008506:	e06f      	b.n	80085e8 <__ieee754_pow+0x120>
 8008508:	4b7c      	ldr	r3, [pc, #496]	; (80086fc <__ieee754_pow+0x234>)
 800850a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800850e:	429c      	cmp	r4, r3
 8008510:	464d      	mov	r5, r9
 8008512:	4682      	mov	sl, r0
 8008514:	dc06      	bgt.n	8008524 <__ieee754_pow+0x5c>
 8008516:	d101      	bne.n	800851c <__ieee754_pow+0x54>
 8008518:	2800      	cmp	r0, #0
 800851a:	d1ec      	bne.n	80084f6 <__ieee754_pow+0x2e>
 800851c:	429e      	cmp	r6, r3
 800851e:	dc01      	bgt.n	8008524 <__ieee754_pow+0x5c>
 8008520:	d10f      	bne.n	8008542 <__ieee754_pow+0x7a>
 8008522:	b172      	cbz	r2, 8008542 <__ieee754_pow+0x7a>
 8008524:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008528:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800852c:	ea55 050a 	orrs.w	r5, r5, sl
 8008530:	d1e1      	bne.n	80084f6 <__ieee754_pow+0x2e>
 8008532:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008536:	18db      	adds	r3, r3, r3
 8008538:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800853c:	4152      	adcs	r2, r2
 800853e:	429d      	cmp	r5, r3
 8008540:	e7d5      	b.n	80084ee <__ieee754_pow+0x26>
 8008542:	2d00      	cmp	r5, #0
 8008544:	da39      	bge.n	80085ba <__ieee754_pow+0xf2>
 8008546:	4b6e      	ldr	r3, [pc, #440]	; (8008700 <__ieee754_pow+0x238>)
 8008548:	429e      	cmp	r6, r3
 800854a:	dc52      	bgt.n	80085f2 <__ieee754_pow+0x12a>
 800854c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008550:	429e      	cmp	r6, r3
 8008552:	f340 849c 	ble.w	8008e8e <__ieee754_pow+0x9c6>
 8008556:	1533      	asrs	r3, r6, #20
 8008558:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800855c:	2b14      	cmp	r3, #20
 800855e:	dd0f      	ble.n	8008580 <__ieee754_pow+0xb8>
 8008560:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008564:	fa22 f103 	lsr.w	r1, r2, r3
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	4293      	cmp	r3, r2
 800856e:	f040 848e 	bne.w	8008e8e <__ieee754_pow+0x9c6>
 8008572:	f001 0101 	and.w	r1, r1, #1
 8008576:	f1c1 0302 	rsb	r3, r1, #2
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	b182      	cbz	r2, 80085a0 <__ieee754_pow+0xd8>
 800857e:	e05d      	b.n	800863c <__ieee754_pow+0x174>
 8008580:	2a00      	cmp	r2, #0
 8008582:	d159      	bne.n	8008638 <__ieee754_pow+0x170>
 8008584:	f1c3 0314 	rsb	r3, r3, #20
 8008588:	fa46 f103 	asr.w	r1, r6, r3
 800858c:	fa01 f303 	lsl.w	r3, r1, r3
 8008590:	42b3      	cmp	r3, r6
 8008592:	f040 8479 	bne.w	8008e88 <__ieee754_pow+0x9c0>
 8008596:	f001 0101 	and.w	r1, r1, #1
 800859a:	f1c1 0302 	rsb	r3, r1, #2
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	4b58      	ldr	r3, [pc, #352]	; (8008704 <__ieee754_pow+0x23c>)
 80085a2:	429e      	cmp	r6, r3
 80085a4:	d132      	bne.n	800860c <__ieee754_pow+0x144>
 80085a6:	2f00      	cmp	r7, #0
 80085a8:	f280 846a 	bge.w	8008e80 <__ieee754_pow+0x9b8>
 80085ac:	4642      	mov	r2, r8
 80085ae:	464b      	mov	r3, r9
 80085b0:	2000      	movs	r0, #0
 80085b2:	4954      	ldr	r1, [pc, #336]	; (8008704 <__ieee754_pow+0x23c>)
 80085b4:	f7f8 f8c4 	bl	8000740 <__aeabi_ddiv>
 80085b8:	e7a3      	b.n	8008502 <__ieee754_pow+0x3a>
 80085ba:	2300      	movs	r3, #0
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	2a00      	cmp	r2, #0
 80085c0:	d13c      	bne.n	800863c <__ieee754_pow+0x174>
 80085c2:	4b4e      	ldr	r3, [pc, #312]	; (80086fc <__ieee754_pow+0x234>)
 80085c4:	429e      	cmp	r6, r3
 80085c6:	d1eb      	bne.n	80085a0 <__ieee754_pow+0xd8>
 80085c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80085cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085d0:	ea53 030a 	orrs.w	r3, r3, sl
 80085d4:	f000 8448 	beq.w	8008e68 <__ieee754_pow+0x9a0>
 80085d8:	4b4b      	ldr	r3, [pc, #300]	; (8008708 <__ieee754_pow+0x240>)
 80085da:	429c      	cmp	r4, r3
 80085dc:	dd0b      	ble.n	80085f6 <__ieee754_pow+0x12e>
 80085de:	2f00      	cmp	r7, #0
 80085e0:	f2c0 8448 	blt.w	8008e74 <__ieee754_pow+0x9ac>
 80085e4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80085e8:	4658      	mov	r0, fp
 80085ea:	4661      	mov	r1, ip
 80085ec:	b013      	add	sp, #76	; 0x4c
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	2302      	movs	r3, #2
 80085f4:	e7e2      	b.n	80085bc <__ieee754_pow+0xf4>
 80085f6:	2f00      	cmp	r7, #0
 80085f8:	f04f 0b00 	mov.w	fp, #0
 80085fc:	f04f 0c00 	mov.w	ip, #0
 8008600:	daf2      	bge.n	80085e8 <__ieee754_pow+0x120>
 8008602:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008606:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800860a:	e7ed      	b.n	80085e8 <__ieee754_pow+0x120>
 800860c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008610:	d106      	bne.n	8008620 <__ieee754_pow+0x158>
 8008612:	4642      	mov	r2, r8
 8008614:	464b      	mov	r3, r9
 8008616:	4640      	mov	r0, r8
 8008618:	4649      	mov	r1, r9
 800861a:	f7f7 ff67 	bl	80004ec <__aeabi_dmul>
 800861e:	e770      	b.n	8008502 <__ieee754_pow+0x3a>
 8008620:	4b3a      	ldr	r3, [pc, #232]	; (800870c <__ieee754_pow+0x244>)
 8008622:	429f      	cmp	r7, r3
 8008624:	d10a      	bne.n	800863c <__ieee754_pow+0x174>
 8008626:	2d00      	cmp	r5, #0
 8008628:	db08      	blt.n	800863c <__ieee754_pow+0x174>
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	b013      	add	sp, #76	; 0x4c
 8008630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	f000 bc5e 	b.w	8008ef4 <__ieee754_sqrt>
 8008638:	2300      	movs	r3, #0
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	4640      	mov	r0, r8
 800863e:	4649      	mov	r1, r9
 8008640:	f001 fa72 	bl	8009b28 <fabs>
 8008644:	4683      	mov	fp, r0
 8008646:	468c      	mov	ip, r1
 8008648:	f1ba 0f00 	cmp.w	sl, #0
 800864c:	d128      	bne.n	80086a0 <__ieee754_pow+0x1d8>
 800864e:	b124      	cbz	r4, 800865a <__ieee754_pow+0x192>
 8008650:	4b2c      	ldr	r3, [pc, #176]	; (8008704 <__ieee754_pow+0x23c>)
 8008652:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008656:	429a      	cmp	r2, r3
 8008658:	d122      	bne.n	80086a0 <__ieee754_pow+0x1d8>
 800865a:	2f00      	cmp	r7, #0
 800865c:	da07      	bge.n	800866e <__ieee754_pow+0x1a6>
 800865e:	465a      	mov	r2, fp
 8008660:	4663      	mov	r3, ip
 8008662:	2000      	movs	r0, #0
 8008664:	4927      	ldr	r1, [pc, #156]	; (8008704 <__ieee754_pow+0x23c>)
 8008666:	f7f8 f86b 	bl	8000740 <__aeabi_ddiv>
 800866a:	4683      	mov	fp, r0
 800866c:	468c      	mov	ip, r1
 800866e:	2d00      	cmp	r5, #0
 8008670:	daba      	bge.n	80085e8 <__ieee754_pow+0x120>
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008678:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800867c:	4323      	orrs	r3, r4
 800867e:	d108      	bne.n	8008692 <__ieee754_pow+0x1ca>
 8008680:	465a      	mov	r2, fp
 8008682:	4663      	mov	r3, ip
 8008684:	4658      	mov	r0, fp
 8008686:	4661      	mov	r1, ip
 8008688:	f7f7 fd78 	bl	800017c <__aeabi_dsub>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	e790      	b.n	80085b4 <__ieee754_pow+0xec>
 8008692:	9b00      	ldr	r3, [sp, #0]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d1a7      	bne.n	80085e8 <__ieee754_pow+0x120>
 8008698:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800869c:	469c      	mov	ip, r3
 800869e:	e7a3      	b.n	80085e8 <__ieee754_pow+0x120>
 80086a0:	0feb      	lsrs	r3, r5, #31
 80086a2:	3b01      	subs	r3, #1
 80086a4:	930c      	str	r3, [sp, #48]	; 0x30
 80086a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086a8:	9b00      	ldr	r3, [sp, #0]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	d104      	bne.n	80086b8 <__ieee754_pow+0x1f0>
 80086ae:	4642      	mov	r2, r8
 80086b0:	464b      	mov	r3, r9
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	e7e7      	b.n	8008688 <__ieee754_pow+0x1c0>
 80086b8:	4b15      	ldr	r3, [pc, #84]	; (8008710 <__ieee754_pow+0x248>)
 80086ba:	429e      	cmp	r6, r3
 80086bc:	f340 80f6 	ble.w	80088ac <__ieee754_pow+0x3e4>
 80086c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80086c4:	429e      	cmp	r6, r3
 80086c6:	4b10      	ldr	r3, [pc, #64]	; (8008708 <__ieee754_pow+0x240>)
 80086c8:	dd09      	ble.n	80086de <__ieee754_pow+0x216>
 80086ca:	429c      	cmp	r4, r3
 80086cc:	dc0c      	bgt.n	80086e8 <__ieee754_pow+0x220>
 80086ce:	2f00      	cmp	r7, #0
 80086d0:	da0c      	bge.n	80086ec <__ieee754_pow+0x224>
 80086d2:	2000      	movs	r0, #0
 80086d4:	b013      	add	sp, #76	; 0x4c
 80086d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	f001 ba20 	b.w	8009b1e <__math_oflow>
 80086de:	429c      	cmp	r4, r3
 80086e0:	dbf5      	blt.n	80086ce <__ieee754_pow+0x206>
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <__ieee754_pow+0x23c>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	dd15      	ble.n	8008714 <__ieee754_pow+0x24c>
 80086e8:	2f00      	cmp	r7, #0
 80086ea:	dcf2      	bgt.n	80086d2 <__ieee754_pow+0x20a>
 80086ec:	2000      	movs	r0, #0
 80086ee:	b013      	add	sp, #76	; 0x4c
 80086f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	f001 ba0e 	b.w	8009b14 <__math_uflow>
 80086f8:	fff00000 	.word	0xfff00000
 80086fc:	7ff00000 	.word	0x7ff00000
 8008700:	433fffff 	.word	0x433fffff
 8008704:	3ff00000 	.word	0x3ff00000
 8008708:	3fefffff 	.word	0x3fefffff
 800870c:	3fe00000 	.word	0x3fe00000
 8008710:	41e00000 	.word	0x41e00000
 8008714:	4661      	mov	r1, ip
 8008716:	2200      	movs	r2, #0
 8008718:	4658      	mov	r0, fp
 800871a:	4b5f      	ldr	r3, [pc, #380]	; (8008898 <__ieee754_pow+0x3d0>)
 800871c:	f7f7 fd2e 	bl	800017c <__aeabi_dsub>
 8008720:	a355      	add	r3, pc, #340	; (adr r3, 8008878 <__ieee754_pow+0x3b0>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	4604      	mov	r4, r0
 8008728:	460d      	mov	r5, r1
 800872a:	f7f7 fedf 	bl	80004ec <__aeabi_dmul>
 800872e:	a354      	add	r3, pc, #336	; (adr r3, 8008880 <__ieee754_pow+0x3b8>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	4606      	mov	r6, r0
 8008736:	460f      	mov	r7, r1
 8008738:	4620      	mov	r0, r4
 800873a:	4629      	mov	r1, r5
 800873c:	f7f7 fed6 	bl	80004ec <__aeabi_dmul>
 8008740:	2200      	movs	r2, #0
 8008742:	4682      	mov	sl, r0
 8008744:	468b      	mov	fp, r1
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	4b54      	ldr	r3, [pc, #336]	; (800889c <__ieee754_pow+0x3d4>)
 800874c:	f7f7 fece 	bl	80004ec <__aeabi_dmul>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	a14c      	add	r1, pc, #304	; (adr r1, 8008888 <__ieee754_pow+0x3c0>)
 8008756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800875a:	f7f7 fd0f 	bl	800017c <__aeabi_dsub>
 800875e:	4622      	mov	r2, r4
 8008760:	462b      	mov	r3, r5
 8008762:	f7f7 fec3 	bl	80004ec <__aeabi_dmul>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	2000      	movs	r0, #0
 800876c:	494c      	ldr	r1, [pc, #304]	; (80088a0 <__ieee754_pow+0x3d8>)
 800876e:	f7f7 fd05 	bl	800017c <__aeabi_dsub>
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	4680      	mov	r8, r0
 8008778:	4689      	mov	r9, r1
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	f7f7 feb5 	bl	80004ec <__aeabi_dmul>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 feaf 	bl	80004ec <__aeabi_dmul>
 800878e:	a340      	add	r3, pc, #256	; (adr r3, 8008890 <__ieee754_pow+0x3c8>)
 8008790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008794:	f7f7 feaa 	bl	80004ec <__aeabi_dmul>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4650      	mov	r0, sl
 800879e:	4659      	mov	r1, fp
 80087a0:	f7f7 fcec 	bl	800017c <__aeabi_dsub>
 80087a4:	f04f 0a00 	mov.w	sl, #0
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4604      	mov	r4, r0
 80087ae:	460d      	mov	r5, r1
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f7 fce4 	bl	8000180 <__adddf3>
 80087b8:	4632      	mov	r2, r6
 80087ba:	463b      	mov	r3, r7
 80087bc:	4650      	mov	r0, sl
 80087be:	468b      	mov	fp, r1
 80087c0:	f7f7 fcdc 	bl	800017c <__aeabi_dsub>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 fcd6 	bl	800017c <__aeabi_dsub>
 80087d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d8:	3b01      	subs	r3, #1
 80087da:	4313      	orrs	r3, r2
 80087dc:	f04f 0600 	mov.w	r6, #0
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	bf0c      	ite	eq
 80087e6:	4b2f      	ldreq	r3, [pc, #188]	; (80088a4 <__ieee754_pow+0x3dc>)
 80087e8:	4b2b      	ldrne	r3, [pc, #172]	; (8008898 <__ieee754_pow+0x3d0>)
 80087ea:	4604      	mov	r4, r0
 80087ec:	460d      	mov	r5, r1
 80087ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f2:	e9cd 2300 	strd	r2, r3, [sp]
 80087f6:	4632      	mov	r2, r6
 80087f8:	463b      	mov	r3, r7
 80087fa:	f7f7 fcbf 	bl	800017c <__aeabi_dsub>
 80087fe:	4652      	mov	r2, sl
 8008800:	465b      	mov	r3, fp
 8008802:	f7f7 fe73 	bl	80004ec <__aeabi_dmul>
 8008806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800880a:	4680      	mov	r8, r0
 800880c:	4689      	mov	r9, r1
 800880e:	4620      	mov	r0, r4
 8008810:	4629      	mov	r1, r5
 8008812:	f7f7 fe6b 	bl	80004ec <__aeabi_dmul>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f7 fcaf 	bl	8000180 <__adddf3>
 8008822:	4632      	mov	r2, r6
 8008824:	463b      	mov	r3, r7
 8008826:	4680      	mov	r8, r0
 8008828:	4689      	mov	r9, r1
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	f7f7 fe5d 	bl	80004ec <__aeabi_dmul>
 8008832:	4604      	mov	r4, r0
 8008834:	460d      	mov	r5, r1
 8008836:	460b      	mov	r3, r1
 8008838:	4602      	mov	r2, r0
 800883a:	4649      	mov	r1, r9
 800883c:	4640      	mov	r0, r8
 800883e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008842:	f7f7 fc9d 	bl	8000180 <__adddf3>
 8008846:	4b18      	ldr	r3, [pc, #96]	; (80088a8 <__ieee754_pow+0x3e0>)
 8008848:	4682      	mov	sl, r0
 800884a:	4299      	cmp	r1, r3
 800884c:	460f      	mov	r7, r1
 800884e:	460e      	mov	r6, r1
 8008850:	f340 82e5 	ble.w	8008e1e <__ieee754_pow+0x956>
 8008854:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008858:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800885c:	4303      	orrs	r3, r0
 800885e:	f000 81df 	beq.w	8008c20 <__ieee754_pow+0x758>
 8008862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	f7f8 f8b1 	bl	80009d0 <__aeabi_dcmplt>
 800886e:	3800      	subs	r0, #0
 8008870:	bf18      	it	ne
 8008872:	2001      	movne	r0, #1
 8008874:	e72e      	b.n	80086d4 <__ieee754_pow+0x20c>
 8008876:	bf00      	nop
 8008878:	60000000 	.word	0x60000000
 800887c:	3ff71547 	.word	0x3ff71547
 8008880:	f85ddf44 	.word	0xf85ddf44
 8008884:	3e54ae0b 	.word	0x3e54ae0b
 8008888:	55555555 	.word	0x55555555
 800888c:	3fd55555 	.word	0x3fd55555
 8008890:	652b82fe 	.word	0x652b82fe
 8008894:	3ff71547 	.word	0x3ff71547
 8008898:	3ff00000 	.word	0x3ff00000
 800889c:	3fd00000 	.word	0x3fd00000
 80088a0:	3fe00000 	.word	0x3fe00000
 80088a4:	bff00000 	.word	0xbff00000
 80088a8:	408fffff 	.word	0x408fffff
 80088ac:	4bd2      	ldr	r3, [pc, #840]	; (8008bf8 <__ieee754_pow+0x730>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	402b      	ands	r3, r5
 80088b2:	b943      	cbnz	r3, 80088c6 <__ieee754_pow+0x3fe>
 80088b4:	4658      	mov	r0, fp
 80088b6:	4661      	mov	r1, ip
 80088b8:	4bd0      	ldr	r3, [pc, #832]	; (8008bfc <__ieee754_pow+0x734>)
 80088ba:	f7f7 fe17 	bl	80004ec <__aeabi_dmul>
 80088be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80088c2:	4683      	mov	fp, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	1523      	asrs	r3, r4, #20
 80088c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088cc:	4413      	add	r3, r2
 80088ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80088d0:	4bcb      	ldr	r3, [pc, #812]	; (8008c00 <__ieee754_pow+0x738>)
 80088d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80088d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80088da:	429c      	cmp	r4, r3
 80088dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088e0:	dd08      	ble.n	80088f4 <__ieee754_pow+0x42c>
 80088e2:	4bc8      	ldr	r3, [pc, #800]	; (8008c04 <__ieee754_pow+0x73c>)
 80088e4:	429c      	cmp	r4, r3
 80088e6:	f340 8199 	ble.w	8008c1c <__ieee754_pow+0x754>
 80088ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80088f0:	3301      	adds	r3, #1
 80088f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088f4:	2600      	movs	r6, #0
 80088f6:	00f3      	lsls	r3, r6, #3
 80088f8:	930d      	str	r3, [sp, #52]	; 0x34
 80088fa:	4bc3      	ldr	r3, [pc, #780]	; (8008c08 <__ieee754_pow+0x740>)
 80088fc:	4658      	mov	r0, fp
 80088fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008902:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008906:	4629      	mov	r1, r5
 8008908:	461a      	mov	r2, r3
 800890a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800890e:	4623      	mov	r3, r4
 8008910:	f7f7 fc34 	bl	800017c <__aeabi_dsub>
 8008914:	46da      	mov	sl, fp
 8008916:	462b      	mov	r3, r5
 8008918:	4652      	mov	r2, sl
 800891a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800891e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008922:	f7f7 fc2d 	bl	8000180 <__adddf3>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	2000      	movs	r0, #0
 800892c:	49b7      	ldr	r1, [pc, #732]	; (8008c0c <__ieee754_pow+0x744>)
 800892e:	f7f7 ff07 	bl	8000740 <__aeabi_ddiv>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800893a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800893e:	f7f7 fdd5 	bl	80004ec <__aeabi_dmul>
 8008942:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008946:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800894a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800894e:	2300      	movs	r3, #0
 8008950:	2200      	movs	r2, #0
 8008952:	46ab      	mov	fp, r5
 8008954:	106d      	asrs	r5, r5, #1
 8008956:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008960:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008964:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	4614      	mov	r4, r2
 800896e:	461d      	mov	r5, r3
 8008970:	f7f7 fdbc 	bl	80004ec <__aeabi_dmul>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800897c:	f7f7 fbfe 	bl	800017c <__aeabi_dsub>
 8008980:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008984:	4606      	mov	r6, r0
 8008986:	460f      	mov	r7, r1
 8008988:	4620      	mov	r0, r4
 800898a:	4629      	mov	r1, r5
 800898c:	f7f7 fbf6 	bl	800017c <__aeabi_dsub>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4650      	mov	r0, sl
 8008996:	4659      	mov	r1, fp
 8008998:	f7f7 fbf0 	bl	800017c <__aeabi_dsub>
 800899c:	4642      	mov	r2, r8
 800899e:	464b      	mov	r3, r9
 80089a0:	f7f7 fda4 	bl	80004ec <__aeabi_dmul>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4630      	mov	r0, r6
 80089aa:	4639      	mov	r1, r7
 80089ac:	f7f7 fbe6 	bl	800017c <__aeabi_dsub>
 80089b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089b4:	f7f7 fd9a 	bl	80004ec <__aeabi_dmul>
 80089b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089c0:	4610      	mov	r0, r2
 80089c2:	4619      	mov	r1, r3
 80089c4:	f7f7 fd92 	bl	80004ec <__aeabi_dmul>
 80089c8:	a379      	add	r3, pc, #484	; (adr r3, 8008bb0 <__ieee754_pow+0x6e8>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	f7f7 fd8b 	bl	80004ec <__aeabi_dmul>
 80089d6:	a378      	add	r3, pc, #480	; (adr r3, 8008bb8 <__ieee754_pow+0x6f0>)
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f7f7 fbd0 	bl	8000180 <__adddf3>
 80089e0:	4622      	mov	r2, r4
 80089e2:	462b      	mov	r3, r5
 80089e4:	f7f7 fd82 	bl	80004ec <__aeabi_dmul>
 80089e8:	a375      	add	r3, pc, #468	; (adr r3, 8008bc0 <__ieee754_pow+0x6f8>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fbc7 	bl	8000180 <__adddf3>
 80089f2:	4622      	mov	r2, r4
 80089f4:	462b      	mov	r3, r5
 80089f6:	f7f7 fd79 	bl	80004ec <__aeabi_dmul>
 80089fa:	a373      	add	r3, pc, #460	; (adr r3, 8008bc8 <__ieee754_pow+0x700>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f7f7 fbbe 	bl	8000180 <__adddf3>
 8008a04:	4622      	mov	r2, r4
 8008a06:	462b      	mov	r3, r5
 8008a08:	f7f7 fd70 	bl	80004ec <__aeabi_dmul>
 8008a0c:	a370      	add	r3, pc, #448	; (adr r3, 8008bd0 <__ieee754_pow+0x708>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f7 fbb5 	bl	8000180 <__adddf3>
 8008a16:	4622      	mov	r2, r4
 8008a18:	462b      	mov	r3, r5
 8008a1a:	f7f7 fd67 	bl	80004ec <__aeabi_dmul>
 8008a1e:	a36e      	add	r3, pc, #440	; (adr r3, 8008bd8 <__ieee754_pow+0x710>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f7 fbac 	bl	8000180 <__adddf3>
 8008a28:	4622      	mov	r2, r4
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	462b      	mov	r3, r5
 8008a30:	4620      	mov	r0, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7f7 fd5a 	bl	80004ec <__aeabi_dmul>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	4639      	mov	r1, r7
 8008a40:	f7f7 fd54 	bl	80004ec <__aeabi_dmul>
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	464b      	mov	r3, r9
 8008a50:	f7f7 fb96 	bl	8000180 <__adddf3>
 8008a54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a58:	f7f7 fd48 	bl	80004ec <__aeabi_dmul>
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	462b      	mov	r3, r5
 8008a60:	f7f7 fb8e 	bl	8000180 <__adddf3>
 8008a64:	4642      	mov	r2, r8
 8008a66:	4606      	mov	r6, r0
 8008a68:	460f      	mov	r7, r1
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	4649      	mov	r1, r9
 8008a70:	f7f7 fd3c 	bl	80004ec <__aeabi_dmul>
 8008a74:	2200      	movs	r2, #0
 8008a76:	4b66      	ldr	r3, [pc, #408]	; (8008c10 <__ieee754_pow+0x748>)
 8008a78:	4682      	mov	sl, r0
 8008a7a:	468b      	mov	fp, r1
 8008a7c:	f7f7 fb80 	bl	8000180 <__adddf3>
 8008a80:	4632      	mov	r2, r6
 8008a82:	463b      	mov	r3, r7
 8008a84:	f7f7 fb7c 	bl	8000180 <__adddf3>
 8008a88:	2400      	movs	r4, #0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 fd2a 	bl	80004ec <__aeabi_dmul>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4680      	mov	r8, r0
 8008a9c:	4689      	mov	r9, r1
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4b5b      	ldr	r3, [pc, #364]	; (8008c10 <__ieee754_pow+0x748>)
 8008aa4:	f7f7 fb6a 	bl	800017c <__aeabi_dsub>
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	465b      	mov	r3, fp
 8008aac:	f7f7 fb66 	bl	800017c <__aeabi_dsub>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	f7f7 fb60 	bl	800017c <__aeabi_dsub>
 8008abc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ac0:	f7f7 fd14 	bl	80004ec <__aeabi_dmul>
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ace:	462b      	mov	r3, r5
 8008ad0:	f7f7 fd0c 	bl	80004ec <__aeabi_dmul>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fb50 	bl	8000180 <__adddf3>
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	f7f7 fb47 	bl	8000180 <__adddf3>
 8008af2:	a33b      	add	r3, pc, #236	; (adr r3, 8008be0 <__ieee754_pow+0x718>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	4620      	mov	r0, r4
 8008afa:	460d      	mov	r5, r1
 8008afc:	f7f7 fcf6 	bl	80004ec <__aeabi_dmul>
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	f7f7 fb36 	bl	800017c <__aeabi_dsub>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f7 fb30 	bl	800017c <__aeabi_dsub>
 8008b1c:	a332      	add	r3, pc, #200	; (adr r3, 8008be8 <__ieee754_pow+0x720>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f7f7 fce3 	bl	80004ec <__aeabi_dmul>
 8008b26:	a332      	add	r3, pc, #200	; (adr r3, 8008bf0 <__ieee754_pow+0x728>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	460f      	mov	r7, r1
 8008b30:	4620      	mov	r0, r4
 8008b32:	4629      	mov	r1, r5
 8008b34:	f7f7 fcda 	bl	80004ec <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fb1e 	bl	8000180 <__adddf3>
 8008b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b46:	4b33      	ldr	r3, [pc, #204]	; (8008c14 <__ieee754_pow+0x74c>)
 8008b48:	f04f 0a00 	mov.w	sl, #0
 8008b4c:	4413      	add	r3, r2
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	f7f7 fb15 	bl	8000180 <__adddf3>
 8008b56:	4680      	mov	r8, r0
 8008b58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008b5a:	4689      	mov	r9, r1
 8008b5c:	f7f7 fc5c 	bl	8000418 <__aeabi_i2d>
 8008b60:	4604      	mov	r4, r0
 8008b62:	460d      	mov	r5, r1
 8008b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b66:	4b2c      	ldr	r3, [pc, #176]	; (8008c18 <__ieee754_pow+0x750>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008b6e:	4642      	mov	r2, r8
 8008b70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b74:	464b      	mov	r3, r9
 8008b76:	f7f7 fb03 	bl	8000180 <__adddf3>
 8008b7a:	4632      	mov	r2, r6
 8008b7c:	463b      	mov	r3, r7
 8008b7e:	f7f7 faff 	bl	8000180 <__adddf3>
 8008b82:	4622      	mov	r2, r4
 8008b84:	462b      	mov	r3, r5
 8008b86:	f7f7 fafb 	bl	8000180 <__adddf3>
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	4650      	mov	r0, sl
 8008b90:	468b      	mov	fp, r1
 8008b92:	f7f7 faf3 	bl	800017c <__aeabi_dsub>
 8008b96:	4632      	mov	r2, r6
 8008b98:	463b      	mov	r3, r7
 8008b9a:	f7f7 faef 	bl	800017c <__aeabi_dsub>
 8008b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ba2:	f7f7 faeb 	bl	800017c <__aeabi_dsub>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	e60d      	b.n	80087cc <__ieee754_pow+0x304>
 8008bb0:	4a454eef 	.word	0x4a454eef
 8008bb4:	3fca7e28 	.word	0x3fca7e28
 8008bb8:	93c9db65 	.word	0x93c9db65
 8008bbc:	3fcd864a 	.word	0x3fcd864a
 8008bc0:	a91d4101 	.word	0xa91d4101
 8008bc4:	3fd17460 	.word	0x3fd17460
 8008bc8:	518f264d 	.word	0x518f264d
 8008bcc:	3fd55555 	.word	0x3fd55555
 8008bd0:	db6fabff 	.word	0xdb6fabff
 8008bd4:	3fdb6db6 	.word	0x3fdb6db6
 8008bd8:	33333303 	.word	0x33333303
 8008bdc:	3fe33333 	.word	0x3fe33333
 8008be0:	e0000000 	.word	0xe0000000
 8008be4:	3feec709 	.word	0x3feec709
 8008be8:	dc3a03fd 	.word	0xdc3a03fd
 8008bec:	3feec709 	.word	0x3feec709
 8008bf0:	145b01f5 	.word	0x145b01f5
 8008bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	43400000 	.word	0x43400000
 8008c00:	0003988e 	.word	0x0003988e
 8008c04:	000bb679 	.word	0x000bb679
 8008c08:	0800cf58 	.word	0x0800cf58
 8008c0c:	3ff00000 	.word	0x3ff00000
 8008c10:	40080000 	.word	0x40080000
 8008c14:	0800cf78 	.word	0x0800cf78
 8008c18:	0800cf68 	.word	0x0800cf68
 8008c1c:	2601      	movs	r6, #1
 8008c1e:	e66a      	b.n	80088f6 <__ieee754_pow+0x42e>
 8008c20:	a39d      	add	r3, pc, #628	; (adr r3, 8008e98 <__ieee754_pow+0x9d0>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	4640      	mov	r0, r8
 8008c28:	4649      	mov	r1, r9
 8008c2a:	f7f7 faa9 	bl	8000180 <__adddf3>
 8008c2e:	4622      	mov	r2, r4
 8008c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c34:	462b      	mov	r3, r5
 8008c36:	4650      	mov	r0, sl
 8008c38:	4639      	mov	r1, r7
 8008c3a:	f7f7 fa9f 	bl	800017c <__aeabi_dsub>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c46:	f7f7 fee1 	bl	8000a0c <__aeabi_dcmpgt>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f47f ae09 	bne.w	8008862 <__ieee754_pow+0x39a>
 8008c50:	4aa3      	ldr	r2, [pc, #652]	; (8008ee0 <__ieee754_pow+0xa18>)
 8008c52:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f340 8101 	ble.w	8008e5e <__ieee754_pow+0x996>
 8008c5c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008c60:	2000      	movs	r0, #0
 8008c62:	151b      	asrs	r3, r3, #20
 8008c64:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c68:	fa4a f303 	asr.w	r3, sl, r3
 8008c6c:	4433      	add	r3, r6
 8008c6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008c72:	4f9c      	ldr	r7, [pc, #624]	; (8008ee4 <__ieee754_pow+0xa1c>)
 8008c74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008c78:	4117      	asrs	r7, r2
 8008c7a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008c7e:	ea23 0107 	bic.w	r1, r3, r7
 8008c82:	f1c2 0214 	rsb	r2, r2, #20
 8008c86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	fa4a fa02 	asr.w	sl, sl, r2
 8008c90:	2e00      	cmp	r6, #0
 8008c92:	4602      	mov	r2, r0
 8008c94:	4629      	mov	r1, r5
 8008c96:	4620      	mov	r0, r4
 8008c98:	bfb8      	it	lt
 8008c9a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c9e:	f7f7 fa6d 	bl	800017c <__aeabi_dsub>
 8008ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008caa:	2400      	movs	r4, #0
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	f7f7 fa66 	bl	8000180 <__adddf3>
 8008cb4:	a37a      	add	r3, pc, #488	; (adr r3, 8008ea0 <__ieee754_pow+0x9d8>)
 8008cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	f7f7 fc15 	bl	80004ec <__aeabi_dmul>
 8008cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	460f      	mov	r7, r1
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 fa55 	bl	800017c <__aeabi_dsub>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 fa4f 	bl	800017c <__aeabi_dsub>
 8008cde:	a372      	add	r3, pc, #456	; (adr r3, 8008ea8 <__ieee754_pow+0x9e0>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fc02 	bl	80004ec <__aeabi_dmul>
 8008ce8:	a371      	add	r3, pc, #452	; (adr r3, 8008eb0 <__ieee754_pow+0x9e8>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	4680      	mov	r8, r0
 8008cf0:	4689      	mov	r9, r1
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 fbf9 	bl	80004ec <__aeabi_dmul>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 fa3d 	bl	8000180 <__adddf3>
 8008d06:	4604      	mov	r4, r0
 8008d08:	460d      	mov	r5, r1
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4630      	mov	r0, r6
 8008d10:	4639      	mov	r1, r7
 8008d12:	f7f7 fa35 	bl	8000180 <__adddf3>
 8008d16:	4632      	mov	r2, r6
 8008d18:	463b      	mov	r3, r7
 8008d1a:	4680      	mov	r8, r0
 8008d1c:	4689      	mov	r9, r1
 8008d1e:	f7f7 fa2d 	bl	800017c <__aeabi_dsub>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 fa27 	bl	800017c <__aeabi_dsub>
 8008d2e:	4642      	mov	r2, r8
 8008d30:	4606      	mov	r6, r0
 8008d32:	460f      	mov	r7, r1
 8008d34:	464b      	mov	r3, r9
 8008d36:	4640      	mov	r0, r8
 8008d38:	4649      	mov	r1, r9
 8008d3a:	f7f7 fbd7 	bl	80004ec <__aeabi_dmul>
 8008d3e:	a35e      	add	r3, pc, #376	; (adr r3, 8008eb8 <__ieee754_pow+0x9f0>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	4604      	mov	r4, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	f7f7 fbd0 	bl	80004ec <__aeabi_dmul>
 8008d4c:	a35c      	add	r3, pc, #368	; (adr r3, 8008ec0 <__ieee754_pow+0x9f8>)
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f7f7 fa13 	bl	800017c <__aeabi_dsub>
 8008d56:	4622      	mov	r2, r4
 8008d58:	462b      	mov	r3, r5
 8008d5a:	f7f7 fbc7 	bl	80004ec <__aeabi_dmul>
 8008d5e:	a35a      	add	r3, pc, #360	; (adr r3, 8008ec8 <__ieee754_pow+0xa00>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	f7f7 fa0c 	bl	8000180 <__adddf3>
 8008d68:	4622      	mov	r2, r4
 8008d6a:	462b      	mov	r3, r5
 8008d6c:	f7f7 fbbe 	bl	80004ec <__aeabi_dmul>
 8008d70:	a357      	add	r3, pc, #348	; (adr r3, 8008ed0 <__ieee754_pow+0xa08>)
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f7f7 fa01 	bl	800017c <__aeabi_dsub>
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	462b      	mov	r3, r5
 8008d7e:	f7f7 fbb5 	bl	80004ec <__aeabi_dmul>
 8008d82:	a355      	add	r3, pc, #340	; (adr r3, 8008ed8 <__ieee754_pow+0xa10>)
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	f7f7 f9fa 	bl	8000180 <__adddf3>
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	f7f7 fbac 	bl	80004ec <__aeabi_dmul>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	f7f7 f9ee 	bl	800017c <__aeabi_dsub>
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4640      	mov	r0, r8
 8008daa:	4649      	mov	r1, r9
 8008dac:	f7f7 fb9e 	bl	80004ec <__aeabi_dmul>
 8008db0:	2200      	movs	r2, #0
 8008db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 f9dd 	bl	800017c <__aeabi_dsub>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dca:	f7f7 fcb9 	bl	8000740 <__aeabi_ddiv>
 8008dce:	4632      	mov	r2, r6
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4649      	mov	r1, r9
 8008dda:	f7f7 fb87 	bl	80004ec <__aeabi_dmul>
 8008dde:	4632      	mov	r2, r6
 8008de0:	463b      	mov	r3, r7
 8008de2:	f7f7 f9cd 	bl	8000180 <__adddf3>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 f9c5 	bl	800017c <__aeabi_dsub>
 8008df2:	4642      	mov	r2, r8
 8008df4:	464b      	mov	r3, r9
 8008df6:	f7f7 f9c1 	bl	800017c <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	2000      	movs	r0, #0
 8008e00:	4939      	ldr	r1, [pc, #228]	; (8008ee8 <__ieee754_pow+0xa20>)
 8008e02:	f7f7 f9bb 	bl	800017c <__aeabi_dsub>
 8008e06:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008e0a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008e0e:	da29      	bge.n	8008e64 <__ieee754_pow+0x99c>
 8008e10:	4652      	mov	r2, sl
 8008e12:	f000 fe95 	bl	8009b40 <scalbn>
 8008e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e1a:	f7ff bbfe 	b.w	800861a <__ieee754_pow+0x152>
 8008e1e:	4b33      	ldr	r3, [pc, #204]	; (8008eec <__ieee754_pow+0xa24>)
 8008e20:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008e24:	429f      	cmp	r7, r3
 8008e26:	f77f af13 	ble.w	8008c50 <__ieee754_pow+0x788>
 8008e2a:	4b31      	ldr	r3, [pc, #196]	; (8008ef0 <__ieee754_pow+0xa28>)
 8008e2c:	440b      	add	r3, r1
 8008e2e:	4303      	orrs	r3, r0
 8008e30:	d009      	beq.n	8008e46 <__ieee754_pow+0x97e>
 8008e32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e36:	2200      	movs	r2, #0
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f7f7 fdc9 	bl	80009d0 <__aeabi_dcmplt>
 8008e3e:	3800      	subs	r0, #0
 8008e40:	bf18      	it	ne
 8008e42:	2001      	movne	r0, #1
 8008e44:	e453      	b.n	80086ee <__ieee754_pow+0x226>
 8008e46:	4622      	mov	r2, r4
 8008e48:	462b      	mov	r3, r5
 8008e4a:	f7f7 f997 	bl	800017c <__aeabi_dsub>
 8008e4e:	4642      	mov	r2, r8
 8008e50:	464b      	mov	r3, r9
 8008e52:	f7f7 fdd1 	bl	80009f8 <__aeabi_dcmpge>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f43f aefa 	beq.w	8008c50 <__ieee754_pow+0x788>
 8008e5c:	e7e9      	b.n	8008e32 <__ieee754_pow+0x96a>
 8008e5e:	f04f 0a00 	mov.w	sl, #0
 8008e62:	e720      	b.n	8008ca6 <__ieee754_pow+0x7de>
 8008e64:	4621      	mov	r1, r4
 8008e66:	e7d6      	b.n	8008e16 <__ieee754_pow+0x94e>
 8008e68:	f04f 0b00 	mov.w	fp, #0
 8008e6c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008ee8 <__ieee754_pow+0xa20>
 8008e70:	f7ff bbba 	b.w	80085e8 <__ieee754_pow+0x120>
 8008e74:	f04f 0b00 	mov.w	fp, #0
 8008e78:	f04f 0c00 	mov.w	ip, #0
 8008e7c:	f7ff bbb4 	b.w	80085e8 <__ieee754_pow+0x120>
 8008e80:	4640      	mov	r0, r8
 8008e82:	4649      	mov	r1, r9
 8008e84:	f7ff bb3d 	b.w	8008502 <__ieee754_pow+0x3a>
 8008e88:	9200      	str	r2, [sp, #0]
 8008e8a:	f7ff bb89 	b.w	80085a0 <__ieee754_pow+0xd8>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f7ff bb73 	b.w	800857a <__ieee754_pow+0xb2>
 8008e94:	f3af 8000 	nop.w
 8008e98:	652b82fe 	.word	0x652b82fe
 8008e9c:	3c971547 	.word	0x3c971547
 8008ea0:	00000000 	.word	0x00000000
 8008ea4:	3fe62e43 	.word	0x3fe62e43
 8008ea8:	fefa39ef 	.word	0xfefa39ef
 8008eac:	3fe62e42 	.word	0x3fe62e42
 8008eb0:	0ca86c39 	.word	0x0ca86c39
 8008eb4:	be205c61 	.word	0xbe205c61
 8008eb8:	72bea4d0 	.word	0x72bea4d0
 8008ebc:	3e663769 	.word	0x3e663769
 8008ec0:	c5d26bf1 	.word	0xc5d26bf1
 8008ec4:	3ebbbd41 	.word	0x3ebbbd41
 8008ec8:	af25de2c 	.word	0xaf25de2c
 8008ecc:	3f11566a 	.word	0x3f11566a
 8008ed0:	16bebd93 	.word	0x16bebd93
 8008ed4:	3f66c16c 	.word	0x3f66c16c
 8008ed8:	5555553e 	.word	0x5555553e
 8008edc:	3fc55555 	.word	0x3fc55555
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	000fffff 	.word	0x000fffff
 8008ee8:	3ff00000 	.word	0x3ff00000
 8008eec:	4090cbff 	.word	0x4090cbff
 8008ef0:	3f6f3400 	.word	0x3f6f3400

08008ef4 <__ieee754_sqrt>:
 8008ef4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009050 <__ieee754_sqrt+0x15c>
 8008ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efc:	ea3c 0c01 	bics.w	ip, ip, r1
 8008f00:	4606      	mov	r6, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	460c      	mov	r4, r1
 8008f06:	460a      	mov	r2, r1
 8008f08:	4607      	mov	r7, r0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	d10f      	bne.n	8008f2e <__ieee754_sqrt+0x3a>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	f7f7 faeb 	bl	80004ec <__aeabi_dmul>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	f7f7 f92f 	bl	8000180 <__adddf3>
 8008f22:	4606      	mov	r6, r0
 8008f24:	460d      	mov	r5, r1
 8008f26:	4630      	mov	r0, r6
 8008f28:	4629      	mov	r1, r5
 8008f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	dc0e      	bgt.n	8008f50 <__ieee754_sqrt+0x5c>
 8008f32:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008f36:	ea5c 0707 	orrs.w	r7, ip, r7
 8008f3a:	d0f4      	beq.n	8008f26 <__ieee754_sqrt+0x32>
 8008f3c:	b141      	cbz	r1, 8008f50 <__ieee754_sqrt+0x5c>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	f7f7 f91b 	bl	800017c <__aeabi_dsub>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	f7f7 fbf9 	bl	8000740 <__aeabi_ddiv>
 8008f4e:	e7e8      	b.n	8008f22 <__ieee754_sqrt+0x2e>
 8008f50:	1521      	asrs	r1, r4, #20
 8008f52:	d075      	beq.n	8009040 <__ieee754_sqrt+0x14c>
 8008f54:	07cc      	lsls	r4, r1, #31
 8008f56:	f04f 0400 	mov.w	r4, #0
 8008f5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008f5e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008f62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008f66:	bf5e      	ittt	pl
 8008f68:	0fd9      	lsrpl	r1, r3, #31
 8008f6a:	005b      	lslpl	r3, r3, #1
 8008f6c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008f70:	0fd9      	lsrs	r1, r3, #31
 8008f72:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008f76:	2516      	movs	r5, #22
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f7e:	107f      	asrs	r7, r7, #1
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	1846      	adds	r6, r0, r1
 8008f84:	4296      	cmp	r6, r2
 8008f86:	bfde      	ittt	le
 8008f88:	1b92      	suble	r2, r2, r6
 8008f8a:	1870      	addle	r0, r6, r1
 8008f8c:	1864      	addle	r4, r4, r1
 8008f8e:	0052      	lsls	r2, r2, #1
 8008f90:	3d01      	subs	r5, #1
 8008f92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008f96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f9e:	d1f0      	bne.n	8008f82 <__ieee754_sqrt+0x8e>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f04f 0e20 	mov.w	lr, #32
 8008fa6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008faa:	4282      	cmp	r2, r0
 8008fac:	eb06 0c05 	add.w	ip, r6, r5
 8008fb0:	dc02      	bgt.n	8008fb8 <__ieee754_sqrt+0xc4>
 8008fb2:	d113      	bne.n	8008fdc <__ieee754_sqrt+0xe8>
 8008fb4:	459c      	cmp	ip, r3
 8008fb6:	d811      	bhi.n	8008fdc <__ieee754_sqrt+0xe8>
 8008fb8:	f1bc 0f00 	cmp.w	ip, #0
 8008fbc:	eb0c 0506 	add.w	r5, ip, r6
 8008fc0:	da43      	bge.n	800904a <__ieee754_sqrt+0x156>
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	db41      	blt.n	800904a <__ieee754_sqrt+0x156>
 8008fc6:	f100 0801 	add.w	r8, r0, #1
 8008fca:	1a12      	subs	r2, r2, r0
 8008fcc:	4640      	mov	r0, r8
 8008fce:	459c      	cmp	ip, r3
 8008fd0:	bf88      	it	hi
 8008fd2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008fd6:	eba3 030c 	sub.w	r3, r3, ip
 8008fda:	4431      	add	r1, r6
 8008fdc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008fe0:	f1be 0e01 	subs.w	lr, lr, #1
 8008fe4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008fe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ff0:	d1db      	bne.n	8008faa <__ieee754_sqrt+0xb6>
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	d006      	beq.n	8009004 <__ieee754_sqrt+0x110>
 8008ff6:	1c48      	adds	r0, r1, #1
 8008ff8:	bf0b      	itete	eq
 8008ffa:	4671      	moveq	r1, lr
 8008ffc:	3101      	addne	r1, #1
 8008ffe:	3401      	addeq	r4, #1
 8009000:	f021 0101 	bicne.w	r1, r1, #1
 8009004:	1063      	asrs	r3, r4, #1
 8009006:	0849      	lsrs	r1, r1, #1
 8009008:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800900c:	07e2      	lsls	r2, r4, #31
 800900e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009012:	bf48      	it	mi
 8009014:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009018:	460e      	mov	r6, r1
 800901a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800901e:	e782      	b.n	8008f26 <__ieee754_sqrt+0x32>
 8009020:	0ada      	lsrs	r2, r3, #11
 8009022:	3815      	subs	r0, #21
 8009024:	055b      	lsls	r3, r3, #21
 8009026:	2a00      	cmp	r2, #0
 8009028:	d0fa      	beq.n	8009020 <__ieee754_sqrt+0x12c>
 800902a:	02d5      	lsls	r5, r2, #11
 800902c:	d50a      	bpl.n	8009044 <__ieee754_sqrt+0x150>
 800902e:	f1c1 0420 	rsb	r4, r1, #32
 8009032:	fa23 f404 	lsr.w	r4, r3, r4
 8009036:	1e4d      	subs	r5, r1, #1
 8009038:	408b      	lsls	r3, r1
 800903a:	4322      	orrs	r2, r4
 800903c:	1b41      	subs	r1, r0, r5
 800903e:	e789      	b.n	8008f54 <__ieee754_sqrt+0x60>
 8009040:	4608      	mov	r0, r1
 8009042:	e7f0      	b.n	8009026 <__ieee754_sqrt+0x132>
 8009044:	0052      	lsls	r2, r2, #1
 8009046:	3101      	adds	r1, #1
 8009048:	e7ef      	b.n	800902a <__ieee754_sqrt+0x136>
 800904a:	4680      	mov	r8, r0
 800904c:	e7bd      	b.n	8008fca <__ieee754_sqrt+0xd6>
 800904e:	bf00      	nop
 8009050:	7ff00000 	.word	0x7ff00000

08009054 <__ieee754_rem_pio2f>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	4aa0      	ldr	r2, [pc, #640]	; (80092dc <__ieee754_rem_pio2f+0x288>)
 800905a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800905e:	4296      	cmp	r6, r2
 8009060:	460c      	mov	r4, r1
 8009062:	4682      	mov	sl, r0
 8009064:	b087      	sub	sp, #28
 8009066:	dc04      	bgt.n	8009072 <__ieee754_rem_pio2f+0x1e>
 8009068:	2300      	movs	r3, #0
 800906a:	6008      	str	r0, [r1, #0]
 800906c:	604b      	str	r3, [r1, #4]
 800906e:	2500      	movs	r5, #0
 8009070:	e01a      	b.n	80090a8 <__ieee754_rem_pio2f+0x54>
 8009072:	4a9b      	ldr	r2, [pc, #620]	; (80092e0 <__ieee754_rem_pio2f+0x28c>)
 8009074:	4296      	cmp	r6, r2
 8009076:	dc4b      	bgt.n	8009110 <__ieee754_rem_pio2f+0xbc>
 8009078:	2800      	cmp	r0, #0
 800907a:	499a      	ldr	r1, [pc, #616]	; (80092e4 <__ieee754_rem_pio2f+0x290>)
 800907c:	4f9a      	ldr	r7, [pc, #616]	; (80092e8 <__ieee754_rem_pio2f+0x294>)
 800907e:	f026 060f 	bic.w	r6, r6, #15
 8009082:	dd23      	ble.n	80090cc <__ieee754_rem_pio2f+0x78>
 8009084:	f7f7 fd7e 	bl	8000b84 <__aeabi_fsub>
 8009088:	42be      	cmp	r6, r7
 800908a:	4605      	mov	r5, r0
 800908c:	d010      	beq.n	80090b0 <__ieee754_rem_pio2f+0x5c>
 800908e:	4997      	ldr	r1, [pc, #604]	; (80092ec <__ieee754_rem_pio2f+0x298>)
 8009090:	f7f7 fd78 	bl	8000b84 <__aeabi_fsub>
 8009094:	4601      	mov	r1, r0
 8009096:	6020      	str	r0, [r4, #0]
 8009098:	4628      	mov	r0, r5
 800909a:	f7f7 fd73 	bl	8000b84 <__aeabi_fsub>
 800909e:	4993      	ldr	r1, [pc, #588]	; (80092ec <__ieee754_rem_pio2f+0x298>)
 80090a0:	f7f7 fd70 	bl	8000b84 <__aeabi_fsub>
 80090a4:	2501      	movs	r5, #1
 80090a6:	6060      	str	r0, [r4, #4]
 80090a8:	4628      	mov	r0, r5
 80090aa:	b007      	add	sp, #28
 80090ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b0:	498f      	ldr	r1, [pc, #572]	; (80092f0 <__ieee754_rem_pio2f+0x29c>)
 80090b2:	f7f7 fd67 	bl	8000b84 <__aeabi_fsub>
 80090b6:	498f      	ldr	r1, [pc, #572]	; (80092f4 <__ieee754_rem_pio2f+0x2a0>)
 80090b8:	4605      	mov	r5, r0
 80090ba:	f7f7 fd63 	bl	8000b84 <__aeabi_fsub>
 80090be:	4601      	mov	r1, r0
 80090c0:	6020      	str	r0, [r4, #0]
 80090c2:	4628      	mov	r0, r5
 80090c4:	f7f7 fd5e 	bl	8000b84 <__aeabi_fsub>
 80090c8:	498a      	ldr	r1, [pc, #552]	; (80092f4 <__ieee754_rem_pio2f+0x2a0>)
 80090ca:	e7e9      	b.n	80090a0 <__ieee754_rem_pio2f+0x4c>
 80090cc:	f7f7 fd5c 	bl	8000b88 <__addsf3>
 80090d0:	42be      	cmp	r6, r7
 80090d2:	4605      	mov	r5, r0
 80090d4:	d00e      	beq.n	80090f4 <__ieee754_rem_pio2f+0xa0>
 80090d6:	4985      	ldr	r1, [pc, #532]	; (80092ec <__ieee754_rem_pio2f+0x298>)
 80090d8:	f7f7 fd56 	bl	8000b88 <__addsf3>
 80090dc:	4601      	mov	r1, r0
 80090de:	6020      	str	r0, [r4, #0]
 80090e0:	4628      	mov	r0, r5
 80090e2:	f7f7 fd4f 	bl	8000b84 <__aeabi_fsub>
 80090e6:	4981      	ldr	r1, [pc, #516]	; (80092ec <__ieee754_rem_pio2f+0x298>)
 80090e8:	f7f7 fd4e 	bl	8000b88 <__addsf3>
 80090ec:	f04f 35ff 	mov.w	r5, #4294967295
 80090f0:	6060      	str	r0, [r4, #4]
 80090f2:	e7d9      	b.n	80090a8 <__ieee754_rem_pio2f+0x54>
 80090f4:	497e      	ldr	r1, [pc, #504]	; (80092f0 <__ieee754_rem_pio2f+0x29c>)
 80090f6:	f7f7 fd47 	bl	8000b88 <__addsf3>
 80090fa:	497e      	ldr	r1, [pc, #504]	; (80092f4 <__ieee754_rem_pio2f+0x2a0>)
 80090fc:	4605      	mov	r5, r0
 80090fe:	f7f7 fd43 	bl	8000b88 <__addsf3>
 8009102:	4601      	mov	r1, r0
 8009104:	6020      	str	r0, [r4, #0]
 8009106:	4628      	mov	r0, r5
 8009108:	f7f7 fd3c 	bl	8000b84 <__aeabi_fsub>
 800910c:	4979      	ldr	r1, [pc, #484]	; (80092f4 <__ieee754_rem_pio2f+0x2a0>)
 800910e:	e7eb      	b.n	80090e8 <__ieee754_rem_pio2f+0x94>
 8009110:	4a79      	ldr	r2, [pc, #484]	; (80092f8 <__ieee754_rem_pio2f+0x2a4>)
 8009112:	4296      	cmp	r6, r2
 8009114:	f300 8091 	bgt.w	800923a <__ieee754_rem_pio2f+0x1e6>
 8009118:	f000 fd90 	bl	8009c3c <fabsf>
 800911c:	4977      	ldr	r1, [pc, #476]	; (80092fc <__ieee754_rem_pio2f+0x2a8>)
 800911e:	4607      	mov	r7, r0
 8009120:	f7f7 fe3a 	bl	8000d98 <__aeabi_fmul>
 8009124:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009128:	f7f7 fd2e 	bl	8000b88 <__addsf3>
 800912c:	f7f7 fffa 	bl	8001124 <__aeabi_f2iz>
 8009130:	4605      	mov	r5, r0
 8009132:	f7f7 fddd 	bl	8000cf0 <__aeabi_i2f>
 8009136:	496b      	ldr	r1, [pc, #428]	; (80092e4 <__ieee754_rem_pio2f+0x290>)
 8009138:	4681      	mov	r9, r0
 800913a:	f7f7 fe2d 	bl	8000d98 <__aeabi_fmul>
 800913e:	4601      	mov	r1, r0
 8009140:	4638      	mov	r0, r7
 8009142:	f7f7 fd1f 	bl	8000b84 <__aeabi_fsub>
 8009146:	4969      	ldr	r1, [pc, #420]	; (80092ec <__ieee754_rem_pio2f+0x298>)
 8009148:	4680      	mov	r8, r0
 800914a:	4648      	mov	r0, r9
 800914c:	f7f7 fe24 	bl	8000d98 <__aeabi_fmul>
 8009150:	2d1f      	cmp	r5, #31
 8009152:	4607      	mov	r7, r0
 8009154:	dc0c      	bgt.n	8009170 <__ieee754_rem_pio2f+0x11c>
 8009156:	4a6a      	ldr	r2, [pc, #424]	; (8009300 <__ieee754_rem_pio2f+0x2ac>)
 8009158:	1e69      	subs	r1, r5, #1
 800915a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800915e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8009162:	4293      	cmp	r3, r2
 8009164:	d004      	beq.n	8009170 <__ieee754_rem_pio2f+0x11c>
 8009166:	4639      	mov	r1, r7
 8009168:	4640      	mov	r0, r8
 800916a:	f7f7 fd0b 	bl	8000b84 <__aeabi_fsub>
 800916e:	e00b      	b.n	8009188 <__ieee754_rem_pio2f+0x134>
 8009170:	4639      	mov	r1, r7
 8009172:	4640      	mov	r0, r8
 8009174:	f7f7 fd06 	bl	8000b84 <__aeabi_fsub>
 8009178:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800917c:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8009180:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8009184:	2e08      	cmp	r6, #8
 8009186:	dc01      	bgt.n	800918c <__ieee754_rem_pio2f+0x138>
 8009188:	6020      	str	r0, [r4, #0]
 800918a:	e026      	b.n	80091da <__ieee754_rem_pio2f+0x186>
 800918c:	4958      	ldr	r1, [pc, #352]	; (80092f0 <__ieee754_rem_pio2f+0x29c>)
 800918e:	4648      	mov	r0, r9
 8009190:	f7f7 fe02 	bl	8000d98 <__aeabi_fmul>
 8009194:	4607      	mov	r7, r0
 8009196:	4601      	mov	r1, r0
 8009198:	4640      	mov	r0, r8
 800919a:	f7f7 fcf3 	bl	8000b84 <__aeabi_fsub>
 800919e:	4601      	mov	r1, r0
 80091a0:	4606      	mov	r6, r0
 80091a2:	4640      	mov	r0, r8
 80091a4:	f7f7 fcee 	bl	8000b84 <__aeabi_fsub>
 80091a8:	4639      	mov	r1, r7
 80091aa:	f7f7 fceb 	bl	8000b84 <__aeabi_fsub>
 80091ae:	4607      	mov	r7, r0
 80091b0:	4950      	ldr	r1, [pc, #320]	; (80092f4 <__ieee754_rem_pio2f+0x2a0>)
 80091b2:	4648      	mov	r0, r9
 80091b4:	f7f7 fdf0 	bl	8000d98 <__aeabi_fmul>
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 fce3 	bl	8000b84 <__aeabi_fsub>
 80091be:	4601      	mov	r1, r0
 80091c0:	4607      	mov	r7, r0
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7f7 fcde 	bl	8000b84 <__aeabi_fsub>
 80091c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80091cc:	ebab 0b03 	sub.w	fp, fp, r3
 80091d0:	f1bb 0f19 	cmp.w	fp, #25
 80091d4:	dc16      	bgt.n	8009204 <__ieee754_rem_pio2f+0x1b0>
 80091d6:	46b0      	mov	r8, r6
 80091d8:	6020      	str	r0, [r4, #0]
 80091da:	6826      	ldr	r6, [r4, #0]
 80091dc:	4640      	mov	r0, r8
 80091de:	4631      	mov	r1, r6
 80091e0:	f7f7 fcd0 	bl	8000b84 <__aeabi_fsub>
 80091e4:	4639      	mov	r1, r7
 80091e6:	f7f7 fccd 	bl	8000b84 <__aeabi_fsub>
 80091ea:	f1ba 0f00 	cmp.w	sl, #0
 80091ee:	6060      	str	r0, [r4, #4]
 80091f0:	f6bf af5a 	bge.w	80090a8 <__ieee754_rem_pio2f+0x54>
 80091f4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80091f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80091fc:	6026      	str	r6, [r4, #0]
 80091fe:	6060      	str	r0, [r4, #4]
 8009200:	426d      	negs	r5, r5
 8009202:	e751      	b.n	80090a8 <__ieee754_rem_pio2f+0x54>
 8009204:	493f      	ldr	r1, [pc, #252]	; (8009304 <__ieee754_rem_pio2f+0x2b0>)
 8009206:	4648      	mov	r0, r9
 8009208:	f7f7 fdc6 	bl	8000d98 <__aeabi_fmul>
 800920c:	4607      	mov	r7, r0
 800920e:	4601      	mov	r1, r0
 8009210:	4630      	mov	r0, r6
 8009212:	f7f7 fcb7 	bl	8000b84 <__aeabi_fsub>
 8009216:	4601      	mov	r1, r0
 8009218:	4680      	mov	r8, r0
 800921a:	4630      	mov	r0, r6
 800921c:	f7f7 fcb2 	bl	8000b84 <__aeabi_fsub>
 8009220:	4639      	mov	r1, r7
 8009222:	f7f7 fcaf 	bl	8000b84 <__aeabi_fsub>
 8009226:	4606      	mov	r6, r0
 8009228:	4937      	ldr	r1, [pc, #220]	; (8009308 <__ieee754_rem_pio2f+0x2b4>)
 800922a:	4648      	mov	r0, r9
 800922c:	f7f7 fdb4 	bl	8000d98 <__aeabi_fmul>
 8009230:	4631      	mov	r1, r6
 8009232:	f7f7 fca7 	bl	8000b84 <__aeabi_fsub>
 8009236:	4607      	mov	r7, r0
 8009238:	e795      	b.n	8009166 <__ieee754_rem_pio2f+0x112>
 800923a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800923e:	db05      	blt.n	800924c <__ieee754_rem_pio2f+0x1f8>
 8009240:	4601      	mov	r1, r0
 8009242:	f7f7 fc9f 	bl	8000b84 <__aeabi_fsub>
 8009246:	6060      	str	r0, [r4, #4]
 8009248:	6020      	str	r0, [r4, #0]
 800924a:	e710      	b.n	800906e <__ieee754_rem_pio2f+0x1a>
 800924c:	15f7      	asrs	r7, r6, #23
 800924e:	3f86      	subs	r7, #134	; 0x86
 8009250:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8009254:	4630      	mov	r0, r6
 8009256:	f7f7 ff65 	bl	8001124 <__aeabi_f2iz>
 800925a:	f7f7 fd49 	bl	8000cf0 <__aeabi_i2f>
 800925e:	4601      	mov	r1, r0
 8009260:	9003      	str	r0, [sp, #12]
 8009262:	4630      	mov	r0, r6
 8009264:	f7f7 fc8e 	bl	8000b84 <__aeabi_fsub>
 8009268:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800926c:	f7f7 fd94 	bl	8000d98 <__aeabi_fmul>
 8009270:	4606      	mov	r6, r0
 8009272:	f7f7 ff57 	bl	8001124 <__aeabi_f2iz>
 8009276:	f7f7 fd3b 	bl	8000cf0 <__aeabi_i2f>
 800927a:	4601      	mov	r1, r0
 800927c:	9004      	str	r0, [sp, #16]
 800927e:	4605      	mov	r5, r0
 8009280:	4630      	mov	r0, r6
 8009282:	f7f7 fc7f 	bl	8000b84 <__aeabi_fsub>
 8009286:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800928a:	f7f7 fd85 	bl	8000d98 <__aeabi_fmul>
 800928e:	2100      	movs	r1, #0
 8009290:	9005      	str	r0, [sp, #20]
 8009292:	f7f7 ff15 	bl	80010c0 <__aeabi_fcmpeq>
 8009296:	b1f0      	cbz	r0, 80092d6 <__ieee754_rem_pio2f+0x282>
 8009298:	2100      	movs	r1, #0
 800929a:	4628      	mov	r0, r5
 800929c:	f7f7 ff10 	bl	80010c0 <__aeabi_fcmpeq>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	bf14      	ite	ne
 80092a4:	2301      	movne	r3, #1
 80092a6:	2302      	moveq	r3, #2
 80092a8:	4a18      	ldr	r2, [pc, #96]	; (800930c <__ieee754_rem_pio2f+0x2b8>)
 80092aa:	4621      	mov	r1, r4
 80092ac:	9201      	str	r2, [sp, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	a803      	add	r0, sp, #12
 80092b2:	9200      	str	r2, [sp, #0]
 80092b4:	463a      	mov	r2, r7
 80092b6:	f000 f82b 	bl	8009310 <__kernel_rem_pio2f>
 80092ba:	f1ba 0f00 	cmp.w	sl, #0
 80092be:	4605      	mov	r5, r0
 80092c0:	f6bf aef2 	bge.w	80090a8 <__ieee754_rem_pio2f+0x54>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092d2:	6063      	str	r3, [r4, #4]
 80092d4:	e794      	b.n	8009200 <__ieee754_rem_pio2f+0x1ac>
 80092d6:	2303      	movs	r3, #3
 80092d8:	e7e6      	b.n	80092a8 <__ieee754_rem_pio2f+0x254>
 80092da:	bf00      	nop
 80092dc:	3f490fd8 	.word	0x3f490fd8
 80092e0:	4016cbe3 	.word	0x4016cbe3
 80092e4:	3fc90f80 	.word	0x3fc90f80
 80092e8:	3fc90fd0 	.word	0x3fc90fd0
 80092ec:	37354443 	.word	0x37354443
 80092f0:	37354400 	.word	0x37354400
 80092f4:	2e85a308 	.word	0x2e85a308
 80092f8:	43490f80 	.word	0x43490f80
 80092fc:	3f22f984 	.word	0x3f22f984
 8009300:	0800cf88 	.word	0x0800cf88
 8009304:	2e85a300 	.word	0x2e85a300
 8009308:	248d3132 	.word	0x248d3132
 800930c:	0800d008 	.word	0x0800d008

08009310 <__kernel_rem_pio2f>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	b0db      	sub	sp, #364	; 0x16c
 8009316:	9202      	str	r2, [sp, #8]
 8009318:	9304      	str	r3, [sp, #16]
 800931a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800931c:	4bb2      	ldr	r3, [pc, #712]	; (80095e8 <__kernel_rem_pio2f+0x2d8>)
 800931e:	9005      	str	r0, [sp, #20]
 8009320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009324:	9100      	str	r1, [sp, #0]
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	9b04      	ldr	r3, [sp, #16]
 800932a:	3b01      	subs	r3, #1
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	9b02      	ldr	r3, [sp, #8]
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	f2c0 809b 	blt.w	800946c <__kernel_rem_pio2f+0x15c>
 8009336:	1edc      	subs	r4, r3, #3
 8009338:	bf48      	it	mi
 800933a:	1d1c      	addmi	r4, r3, #4
 800933c:	10e4      	asrs	r4, r4, #3
 800933e:	2500      	movs	r5, #0
 8009340:	f04f 0b00 	mov.w	fp, #0
 8009344:	1c67      	adds	r7, r4, #1
 8009346:	00fb      	lsls	r3, r7, #3
 8009348:	9306      	str	r3, [sp, #24]
 800934a:	9b02      	ldr	r3, [sp, #8]
 800934c:	9a03      	ldr	r2, [sp, #12]
 800934e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8009352:	9b01      	ldr	r3, [sp, #4]
 8009354:	eba4 0802 	sub.w	r8, r4, r2
 8009358:	eb03 0902 	add.w	r9, r3, r2
 800935c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800935e:	ae1e      	add	r6, sp, #120	; 0x78
 8009360:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8009364:	454d      	cmp	r5, r9
 8009366:	f340 8083 	ble.w	8009470 <__kernel_rem_pio2f+0x160>
 800936a:	9a04      	ldr	r2, [sp, #16]
 800936c:	ab1e      	add	r3, sp, #120	; 0x78
 800936e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8009372:	f04f 0900 	mov.w	r9, #0
 8009376:	2300      	movs	r3, #0
 8009378:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 800937c:	9a01      	ldr	r2, [sp, #4]
 800937e:	4591      	cmp	r9, r2
 8009380:	f340 809e 	ble.w	80094c0 <__kernel_rem_pio2f+0x1b0>
 8009384:	4613      	mov	r3, r2
 8009386:	aa0a      	add	r2, sp, #40	; 0x28
 8009388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800938c:	9308      	str	r3, [sp, #32]
 800938e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009390:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009394:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009398:	9307      	str	r3, [sp, #28]
 800939a:	ac0a      	add	r4, sp, #40	; 0x28
 800939c:	4626      	mov	r6, r4
 800939e:	46c3      	mov	fp, r8
 80093a0:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80093a4:	ab5a      	add	r3, sp, #360	; 0x168
 80093a6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80093aa:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80093ae:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80093b2:	f1bb 0f00 	cmp.w	fp, #0
 80093b6:	f300 8088 	bgt.w	80094ca <__kernel_rem_pio2f+0x1ba>
 80093ba:	4639      	mov	r1, r7
 80093bc:	4628      	mov	r0, r5
 80093be:	f000 fc83 	bl	8009cc8 <scalbnf>
 80093c2:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80093c6:	4605      	mov	r5, r0
 80093c8:	f7f7 fce6 	bl	8000d98 <__aeabi_fmul>
 80093cc:	f000 fc3a 	bl	8009c44 <floorf>
 80093d0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80093d4:	f7f7 fce0 	bl	8000d98 <__aeabi_fmul>
 80093d8:	4601      	mov	r1, r0
 80093da:	4628      	mov	r0, r5
 80093dc:	f7f7 fbd2 	bl	8000b84 <__aeabi_fsub>
 80093e0:	4605      	mov	r5, r0
 80093e2:	f7f7 fe9f 	bl	8001124 <__aeabi_f2iz>
 80093e6:	4606      	mov	r6, r0
 80093e8:	f7f7 fc82 	bl	8000cf0 <__aeabi_i2f>
 80093ec:	4601      	mov	r1, r0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7f7 fbc8 	bl	8000b84 <__aeabi_fsub>
 80093f4:	2f00      	cmp	r7, #0
 80093f6:	4681      	mov	r9, r0
 80093f8:	f340 8086 	ble.w	8009508 <__kernel_rem_pio2f+0x1f8>
 80093fc:	f108 32ff 	add.w	r2, r8, #4294967295
 8009400:	ab0a      	add	r3, sp, #40	; 0x28
 8009402:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8009406:	f1c7 0108 	rsb	r1, r7, #8
 800940a:	fa45 f301 	asr.w	r3, r5, r1
 800940e:	441e      	add	r6, r3
 8009410:	408b      	lsls	r3, r1
 8009412:	1aed      	subs	r5, r5, r3
 8009414:	f1c7 0007 	rsb	r0, r7, #7
 8009418:	ab0a      	add	r3, sp, #40	; 0x28
 800941a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800941e:	4105      	asrs	r5, r0
 8009420:	2d00      	cmp	r5, #0
 8009422:	dd7f      	ble.n	8009524 <__kernel_rem_pio2f+0x214>
 8009424:	2200      	movs	r2, #0
 8009426:	4692      	mov	sl, r2
 8009428:	3601      	adds	r6, #1
 800942a:	4590      	cmp	r8, r2
 800942c:	f300 80b0 	bgt.w	8009590 <__kernel_rem_pio2f+0x280>
 8009430:	2f00      	cmp	r7, #0
 8009432:	dd05      	ble.n	8009440 <__kernel_rem_pio2f+0x130>
 8009434:	2f01      	cmp	r7, #1
 8009436:	f000 80bd 	beq.w	80095b4 <__kernel_rem_pio2f+0x2a4>
 800943a:	2f02      	cmp	r7, #2
 800943c:	f000 80c5 	beq.w	80095ca <__kernel_rem_pio2f+0x2ba>
 8009440:	2d02      	cmp	r5, #2
 8009442:	d16f      	bne.n	8009524 <__kernel_rem_pio2f+0x214>
 8009444:	4649      	mov	r1, r9
 8009446:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800944a:	f7f7 fb9b 	bl	8000b84 <__aeabi_fsub>
 800944e:	4681      	mov	r9, r0
 8009450:	f1ba 0f00 	cmp.w	sl, #0
 8009454:	d066      	beq.n	8009524 <__kernel_rem_pio2f+0x214>
 8009456:	4639      	mov	r1, r7
 8009458:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800945c:	f000 fc34 	bl	8009cc8 <scalbnf>
 8009460:	4601      	mov	r1, r0
 8009462:	4648      	mov	r0, r9
 8009464:	f7f7 fb8e 	bl	8000b84 <__aeabi_fsub>
 8009468:	4681      	mov	r9, r0
 800946a:	e05b      	b.n	8009524 <__kernel_rem_pio2f+0x214>
 800946c:	2400      	movs	r4, #0
 800946e:	e766      	b.n	800933e <__kernel_rem_pio2f+0x2e>
 8009470:	eb18 0f05 	cmn.w	r8, r5
 8009474:	d407      	bmi.n	8009486 <__kernel_rem_pio2f+0x176>
 8009476:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800947a:	f7f7 fc39 	bl	8000cf0 <__aeabi_i2f>
 800947e:	f846 0b04 	str.w	r0, [r6], #4
 8009482:	3501      	adds	r5, #1
 8009484:	e76e      	b.n	8009364 <__kernel_rem_pio2f+0x54>
 8009486:	4658      	mov	r0, fp
 8009488:	e7f9      	b.n	800947e <__kernel_rem_pio2f+0x16e>
 800948a:	9307      	str	r3, [sp, #28]
 800948c:	9b05      	ldr	r3, [sp, #20]
 800948e:	f8da 1000 	ldr.w	r1, [sl]
 8009492:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009496:	f7f7 fc7f 	bl	8000d98 <__aeabi_fmul>
 800949a:	4601      	mov	r1, r0
 800949c:	4630      	mov	r0, r6
 800949e:	f7f7 fb73 	bl	8000b88 <__addsf3>
 80094a2:	4606      	mov	r6, r0
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	f108 0801 	add.w	r8, r8, #1
 80094aa:	9a03      	ldr	r2, [sp, #12]
 80094ac:	f1aa 0a04 	sub.w	sl, sl, #4
 80094b0:	4590      	cmp	r8, r2
 80094b2:	ddea      	ble.n	800948a <__kernel_rem_pio2f+0x17a>
 80094b4:	f84b 6b04 	str.w	r6, [fp], #4
 80094b8:	f109 0901 	add.w	r9, r9, #1
 80094bc:	3504      	adds	r5, #4
 80094be:	e75d      	b.n	800937c <__kernel_rem_pio2f+0x6c>
 80094c0:	46aa      	mov	sl, r5
 80094c2:	461e      	mov	r6, r3
 80094c4:	f04f 0800 	mov.w	r8, #0
 80094c8:	e7ef      	b.n	80094aa <__kernel_rem_pio2f+0x19a>
 80094ca:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7f7 fc62 	bl	8000d98 <__aeabi_fmul>
 80094d4:	f7f7 fe26 	bl	8001124 <__aeabi_f2iz>
 80094d8:	f7f7 fc0a 	bl	8000cf0 <__aeabi_i2f>
 80094dc:	4649      	mov	r1, r9
 80094de:	9009      	str	r0, [sp, #36]	; 0x24
 80094e0:	f7f7 fc5a 	bl	8000d98 <__aeabi_fmul>
 80094e4:	4601      	mov	r1, r0
 80094e6:	4628      	mov	r0, r5
 80094e8:	f7f7 fb4c 	bl	8000b84 <__aeabi_fsub>
 80094ec:	f7f7 fe1a 	bl	8001124 <__aeabi_f2iz>
 80094f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094f6:	f846 0b04 	str.w	r0, [r6], #4
 80094fa:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80094fe:	4618      	mov	r0, r3
 8009500:	f7f7 fb42 	bl	8000b88 <__addsf3>
 8009504:	4605      	mov	r5, r0
 8009506:	e754      	b.n	80093b2 <__kernel_rem_pio2f+0xa2>
 8009508:	d106      	bne.n	8009518 <__kernel_rem_pio2f+0x208>
 800950a:	f108 33ff 	add.w	r3, r8, #4294967295
 800950e:	aa0a      	add	r2, sp, #40	; 0x28
 8009510:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009514:	11ed      	asrs	r5, r5, #7
 8009516:	e783      	b.n	8009420 <__kernel_rem_pio2f+0x110>
 8009518:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800951c:	f7f7 fdee 	bl	80010fc <__aeabi_fcmpge>
 8009520:	4605      	mov	r5, r0
 8009522:	bb98      	cbnz	r0, 800958c <__kernel_rem_pio2f+0x27c>
 8009524:	2100      	movs	r1, #0
 8009526:	4648      	mov	r0, r9
 8009528:	f7f7 fdca 	bl	80010c0 <__aeabi_fcmpeq>
 800952c:	2800      	cmp	r0, #0
 800952e:	f000 8098 	beq.w	8009662 <__kernel_rem_pio2f+0x352>
 8009532:	f108 34ff 	add.w	r4, r8, #4294967295
 8009536:	4623      	mov	r3, r4
 8009538:	2200      	movs	r2, #0
 800953a:	9901      	ldr	r1, [sp, #4]
 800953c:	428b      	cmp	r3, r1
 800953e:	da4c      	bge.n	80095da <__kernel_rem_pio2f+0x2ca>
 8009540:	2a00      	cmp	r2, #0
 8009542:	d07a      	beq.n	800963a <__kernel_rem_pio2f+0x32a>
 8009544:	ab0a      	add	r3, sp, #40	; 0x28
 8009546:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800954a:	3f08      	subs	r7, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 8086 	beq.w	800965e <__kernel_rem_pio2f+0x34e>
 8009552:	4639      	mov	r1, r7
 8009554:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009558:	f000 fbb6 	bl	8009cc8 <scalbnf>
 800955c:	46a2      	mov	sl, r4
 800955e:	4681      	mov	r9, r0
 8009560:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8009564:	af46      	add	r7, sp, #280	; 0x118
 8009566:	f1ba 0f00 	cmp.w	sl, #0
 800956a:	f280 80af 	bge.w	80096cc <__kernel_rem_pio2f+0x3bc>
 800956e:	4627      	mov	r7, r4
 8009570:	2200      	movs	r2, #0
 8009572:	2f00      	cmp	r7, #0
 8009574:	f2c0 80d9 	blt.w	800972a <__kernel_rem_pio2f+0x41a>
 8009578:	a946      	add	r1, sp, #280	; 0x118
 800957a:	4690      	mov	r8, r2
 800957c:	f04f 0a00 	mov.w	sl, #0
 8009580:	4b1a      	ldr	r3, [pc, #104]	; (80095ec <__kernel_rem_pio2f+0x2dc>)
 8009582:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8009586:	eba4 0907 	sub.w	r9, r4, r7
 800958a:	e0c2      	b.n	8009712 <__kernel_rem_pio2f+0x402>
 800958c:	2502      	movs	r5, #2
 800958e:	e749      	b.n	8009424 <__kernel_rem_pio2f+0x114>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	f1ba 0f00 	cmp.w	sl, #0
 8009596:	d108      	bne.n	80095aa <__kernel_rem_pio2f+0x29a>
 8009598:	b11b      	cbz	r3, 80095a2 <__kernel_rem_pio2f+0x292>
 800959a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	2301      	movs	r3, #1
 80095a2:	469a      	mov	sl, r3
 80095a4:	3201      	adds	r2, #1
 80095a6:	3404      	adds	r4, #4
 80095a8:	e73f      	b.n	800942a <__kernel_rem_pio2f+0x11a>
 80095aa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	4653      	mov	r3, sl
 80095b2:	e7f6      	b.n	80095a2 <__kernel_rem_pio2f+0x292>
 80095b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80095b8:	ab0a      	add	r3, sp, #40	; 0x28
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c2:	a90a      	add	r1, sp, #40	; 0x28
 80095c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80095c8:	e73a      	b.n	8009440 <__kernel_rem_pio2f+0x130>
 80095ca:	f108 32ff 	add.w	r2, r8, #4294967295
 80095ce:	ab0a      	add	r3, sp, #40	; 0x28
 80095d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095d8:	e7f3      	b.n	80095c2 <__kernel_rem_pio2f+0x2b2>
 80095da:	a90a      	add	r1, sp, #40	; 0x28
 80095dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	430a      	orrs	r2, r1
 80095e4:	e7a9      	b.n	800953a <__kernel_rem_pio2f+0x22a>
 80095e6:	bf00      	nop
 80095e8:	0800d34c 	.word	0x0800d34c
 80095ec:	0800d320 	.word	0x0800d320
 80095f0:	3301      	adds	r3, #1
 80095f2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80095f6:	2900      	cmp	r1, #0
 80095f8:	d0fa      	beq.n	80095f0 <__kernel_rem_pio2f+0x2e0>
 80095fa:	9a04      	ldr	r2, [sp, #16]
 80095fc:	f108 0501 	add.w	r5, r8, #1
 8009600:	eb08 0402 	add.w	r4, r8, r2
 8009604:	aa1e      	add	r2, sp, #120	; 0x78
 8009606:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800960a:	4498      	add	r8, r3
 800960c:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8009610:	45a8      	cmp	r8, r5
 8009612:	f6ff aec2 	blt.w	800939a <__kernel_rem_pio2f+0x8a>
 8009616:	9b07      	ldr	r3, [sp, #28]
 8009618:	46a3      	mov	fp, r4
 800961a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800961e:	f7f7 fb67 	bl	8000cf0 <__aeabi_i2f>
 8009622:	f04f 0a00 	mov.w	sl, #0
 8009626:	2600      	movs	r6, #0
 8009628:	6020      	str	r0, [r4, #0]
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	459a      	cmp	sl, r3
 800962e:	dd07      	ble.n	8009640 <__kernel_rem_pio2f+0x330>
 8009630:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8009634:	3404      	adds	r4, #4
 8009636:	3501      	adds	r5, #1
 8009638:	e7ea      	b.n	8009610 <__kernel_rem_pio2f+0x300>
 800963a:	2301      	movs	r3, #1
 800963c:	9a08      	ldr	r2, [sp, #32]
 800963e:	e7d8      	b.n	80095f2 <__kernel_rem_pio2f+0x2e2>
 8009640:	9b05      	ldr	r3, [sp, #20]
 8009642:	f85b 0904 	ldr.w	r0, [fp], #-4
 8009646:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800964a:	f7f7 fba5 	bl	8000d98 <__aeabi_fmul>
 800964e:	4601      	mov	r1, r0
 8009650:	4630      	mov	r0, r6
 8009652:	f7f7 fa99 	bl	8000b88 <__addsf3>
 8009656:	f10a 0a01 	add.w	sl, sl, #1
 800965a:	4606      	mov	r6, r0
 800965c:	e7e5      	b.n	800962a <__kernel_rem_pio2f+0x31a>
 800965e:	3c01      	subs	r4, #1
 8009660:	e770      	b.n	8009544 <__kernel_rem_pio2f+0x234>
 8009662:	9b06      	ldr	r3, [sp, #24]
 8009664:	9a02      	ldr	r2, [sp, #8]
 8009666:	4648      	mov	r0, r9
 8009668:	1a99      	subs	r1, r3, r2
 800966a:	f000 fb2d 	bl	8009cc8 <scalbnf>
 800966e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009672:	4604      	mov	r4, r0
 8009674:	f7f7 fd42 	bl	80010fc <__aeabi_fcmpge>
 8009678:	b300      	cbz	r0, 80096bc <__kernel_rem_pio2f+0x3ac>
 800967a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800967e:	4620      	mov	r0, r4
 8009680:	f7f7 fb8a 	bl	8000d98 <__aeabi_fmul>
 8009684:	f7f7 fd4e 	bl	8001124 <__aeabi_f2iz>
 8009688:	f7f7 fb32 	bl	8000cf0 <__aeabi_i2f>
 800968c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009690:	4681      	mov	r9, r0
 8009692:	f7f7 fb81 	bl	8000d98 <__aeabi_fmul>
 8009696:	4601      	mov	r1, r0
 8009698:	4620      	mov	r0, r4
 800969a:	f7f7 fa73 	bl	8000b84 <__aeabi_fsub>
 800969e:	f7f7 fd41 	bl	8001124 <__aeabi_f2iz>
 80096a2:	ab0a      	add	r3, sp, #40	; 0x28
 80096a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80096a8:	4648      	mov	r0, r9
 80096aa:	f7f7 fd3b 	bl	8001124 <__aeabi_f2iz>
 80096ae:	f108 0401 	add.w	r4, r8, #1
 80096b2:	ab0a      	add	r3, sp, #40	; 0x28
 80096b4:	3708      	adds	r7, #8
 80096b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80096ba:	e74a      	b.n	8009552 <__kernel_rem_pio2f+0x242>
 80096bc:	4620      	mov	r0, r4
 80096be:	f7f7 fd31 	bl	8001124 <__aeabi_f2iz>
 80096c2:	ab0a      	add	r3, sp, #40	; 0x28
 80096c4:	4644      	mov	r4, r8
 80096c6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80096ca:	e742      	b.n	8009552 <__kernel_rem_pio2f+0x242>
 80096cc:	ab0a      	add	r3, sp, #40	; 0x28
 80096ce:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80096d2:	f7f7 fb0d 	bl	8000cf0 <__aeabi_i2f>
 80096d6:	4649      	mov	r1, r9
 80096d8:	f7f7 fb5e 	bl	8000d98 <__aeabi_fmul>
 80096dc:	4641      	mov	r1, r8
 80096de:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80096e2:	4648      	mov	r0, r9
 80096e4:	f7f7 fb58 	bl	8000d98 <__aeabi_fmul>
 80096e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ec:	4681      	mov	r9, r0
 80096ee:	e73a      	b.n	8009566 <__kernel_rem_pio2f+0x256>
 80096f0:	f853 0b04 	ldr.w	r0, [r3], #4
 80096f4:	f85b 1b04 	ldr.w	r1, [fp], #4
 80096f8:	9203      	str	r2, [sp, #12]
 80096fa:	9302      	str	r3, [sp, #8]
 80096fc:	f7f7 fb4c 	bl	8000d98 <__aeabi_fmul>
 8009700:	4601      	mov	r1, r0
 8009702:	4640      	mov	r0, r8
 8009704:	f7f7 fa40 	bl	8000b88 <__addsf3>
 8009708:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800970c:	4680      	mov	r8, r0
 800970e:	f10a 0a01 	add.w	sl, sl, #1
 8009712:	9901      	ldr	r1, [sp, #4]
 8009714:	458a      	cmp	sl, r1
 8009716:	dc01      	bgt.n	800971c <__kernel_rem_pio2f+0x40c>
 8009718:	45ca      	cmp	sl, r9
 800971a:	dde9      	ble.n	80096f0 <__kernel_rem_pio2f+0x3e0>
 800971c:	ab5a      	add	r3, sp, #360	; 0x168
 800971e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009722:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009726:	3f01      	subs	r7, #1
 8009728:	e723      	b.n	8009572 <__kernel_rem_pio2f+0x262>
 800972a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800972c:	2b02      	cmp	r3, #2
 800972e:	dc07      	bgt.n	8009740 <__kernel_rem_pio2f+0x430>
 8009730:	2b00      	cmp	r3, #0
 8009732:	dc4d      	bgt.n	80097d0 <__kernel_rem_pio2f+0x4c0>
 8009734:	d02e      	beq.n	8009794 <__kernel_rem_pio2f+0x484>
 8009736:	f006 0007 	and.w	r0, r6, #7
 800973a:	b05b      	add	sp, #364	; 0x16c
 800973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009740:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009742:	2b03      	cmp	r3, #3
 8009744:	d1f7      	bne.n	8009736 <__kernel_rem_pio2f+0x426>
 8009746:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800974a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800974e:	46b8      	mov	r8, r7
 8009750:	46a2      	mov	sl, r4
 8009752:	f1ba 0f00 	cmp.w	sl, #0
 8009756:	dc48      	bgt.n	80097ea <__kernel_rem_pio2f+0x4da>
 8009758:	46a1      	mov	r9, r4
 800975a:	f1b9 0f01 	cmp.w	r9, #1
 800975e:	dc5f      	bgt.n	8009820 <__kernel_rem_pio2f+0x510>
 8009760:	2000      	movs	r0, #0
 8009762:	2c01      	cmp	r4, #1
 8009764:	dc75      	bgt.n	8009852 <__kernel_rem_pio2f+0x542>
 8009766:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8009768:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800976a:	2d00      	cmp	r5, #0
 800976c:	d177      	bne.n	800985e <__kernel_rem_pio2f+0x54e>
 800976e:	9900      	ldr	r1, [sp, #0]
 8009770:	600a      	str	r2, [r1, #0]
 8009772:	460a      	mov	r2, r1
 8009774:	604b      	str	r3, [r1, #4]
 8009776:	6090      	str	r0, [r2, #8]
 8009778:	e7dd      	b.n	8009736 <__kernel_rem_pio2f+0x426>
 800977a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800977e:	f7f7 fa03 	bl	8000b88 <__addsf3>
 8009782:	3c01      	subs	r4, #1
 8009784:	2c00      	cmp	r4, #0
 8009786:	daf8      	bge.n	800977a <__kernel_rem_pio2f+0x46a>
 8009788:	b10d      	cbz	r5, 800978e <__kernel_rem_pio2f+0x47e>
 800978a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	6018      	str	r0, [r3, #0]
 8009792:	e7d0      	b.n	8009736 <__kernel_rem_pio2f+0x426>
 8009794:	2000      	movs	r0, #0
 8009796:	af32      	add	r7, sp, #200	; 0xc8
 8009798:	e7f4      	b.n	8009784 <__kernel_rem_pio2f+0x474>
 800979a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800979e:	f7f7 f9f3 	bl	8000b88 <__addsf3>
 80097a2:	3f01      	subs	r7, #1
 80097a4:	2f00      	cmp	r7, #0
 80097a6:	daf8      	bge.n	800979a <__kernel_rem_pio2f+0x48a>
 80097a8:	b1bd      	cbz	r5, 80097da <__kernel_rem_pio2f+0x4ca>
 80097aa:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80097ae:	9a00      	ldr	r2, [sp, #0]
 80097b0:	4601      	mov	r1, r0
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80097b6:	f7f7 f9e5 	bl	8000b84 <__aeabi_fsub>
 80097ba:	2701      	movs	r7, #1
 80097bc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80097c0:	42bc      	cmp	r4, r7
 80097c2:	da0c      	bge.n	80097de <__kernel_rem_pio2f+0x4ce>
 80097c4:	b10d      	cbz	r5, 80097ca <__kernel_rem_pio2f+0x4ba>
 80097c6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	6058      	str	r0, [r3, #4]
 80097ce:	e7b2      	b.n	8009736 <__kernel_rem_pio2f+0x426>
 80097d0:	4627      	mov	r7, r4
 80097d2:	2000      	movs	r0, #0
 80097d4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80097d8:	e7e4      	b.n	80097a4 <__kernel_rem_pio2f+0x494>
 80097da:	4603      	mov	r3, r0
 80097dc:	e7e7      	b.n	80097ae <__kernel_rem_pio2f+0x49e>
 80097de:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80097e2:	f7f7 f9d1 	bl	8000b88 <__addsf3>
 80097e6:	3701      	adds	r7, #1
 80097e8:	e7ea      	b.n	80097c0 <__kernel_rem_pio2f+0x4b0>
 80097ea:	f8d8 3000 	ldr.w	r3, [r8]
 80097ee:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80097f2:	4619      	mov	r1, r3
 80097f4:	4610      	mov	r0, r2
 80097f6:	9302      	str	r3, [sp, #8]
 80097f8:	9201      	str	r2, [sp, #4]
 80097fa:	f7f7 f9c5 	bl	8000b88 <__addsf3>
 80097fe:	9a01      	ldr	r2, [sp, #4]
 8009800:	4601      	mov	r1, r0
 8009802:	4681      	mov	r9, r0
 8009804:	4610      	mov	r0, r2
 8009806:	f7f7 f9bd 	bl	8000b84 <__aeabi_fsub>
 800980a:	9b02      	ldr	r3, [sp, #8]
 800980c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009810:	4619      	mov	r1, r3
 8009812:	f7f7 f9b9 	bl	8000b88 <__addsf3>
 8009816:	f848 0904 	str.w	r0, [r8], #-4
 800981a:	f8c8 9000 	str.w	r9, [r8]
 800981e:	e798      	b.n	8009752 <__kernel_rem_pio2f+0x442>
 8009820:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009824:	f8d7 a000 	ldr.w	sl, [r7]
 8009828:	4618      	mov	r0, r3
 800982a:	4651      	mov	r1, sl
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	f7f7 f9ab 	bl	8000b88 <__addsf3>
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	4601      	mov	r1, r0
 8009836:	4680      	mov	r8, r0
 8009838:	4618      	mov	r0, r3
 800983a:	f7f7 f9a3 	bl	8000b84 <__aeabi_fsub>
 800983e:	4651      	mov	r1, sl
 8009840:	f7f7 f9a2 	bl	8000b88 <__addsf3>
 8009844:	f847 0904 	str.w	r0, [r7], #-4
 8009848:	f109 39ff 	add.w	r9, r9, #4294967295
 800984c:	f8c7 8000 	str.w	r8, [r7]
 8009850:	e783      	b.n	800975a <__kernel_rem_pio2f+0x44a>
 8009852:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8009856:	f7f7 f997 	bl	8000b88 <__addsf3>
 800985a:	3c01      	subs	r4, #1
 800985c:	e781      	b.n	8009762 <__kernel_rem_pio2f+0x452>
 800985e:	9900      	ldr	r1, [sp, #0]
 8009860:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8009864:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009868:	600a      	str	r2, [r1, #0]
 800986a:	604b      	str	r3, [r1, #4]
 800986c:	460a      	mov	r2, r1
 800986e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009872:	e780      	b.n	8009776 <__kernel_rem_pio2f+0x466>

08009874 <__kernel_tanf>:
 8009874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 800987c:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 8009880:	4604      	mov	r4, r0
 8009882:	460e      	mov	r6, r1
 8009884:	4690      	mov	r8, r2
 8009886:	4607      	mov	r7, r0
 8009888:	da1b      	bge.n	80098c2 <__kernel_tanf+0x4e>
 800988a:	f7f7 fc4b 	bl	8001124 <__aeabi_f2iz>
 800988e:	2800      	cmp	r0, #0
 8009890:	d12f      	bne.n	80098f2 <__kernel_tanf+0x7e>
 8009892:	f108 0301 	add.w	r3, r8, #1
 8009896:	ea53 030a 	orrs.w	r3, r3, sl
 800989a:	d10c      	bne.n	80098b6 <__kernel_tanf+0x42>
 800989c:	4620      	mov	r0, r4
 800989e:	f000 f9cd 	bl	8009c3c <fabsf>
 80098a2:	4601      	mov	r1, r0
 80098a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80098a8:	f7f7 fb2a 	bl	8000f00 <__aeabi_fdiv>
 80098ac:	4604      	mov	r4, r0
 80098ae:	4620      	mov	r0, r4
 80098b0:	b003      	add	sp, #12
 80098b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b6:	f1b8 0f01 	cmp.w	r8, #1
 80098ba:	d0f8      	beq.n	80098ae <__kernel_tanf+0x3a>
 80098bc:	4621      	mov	r1, r4
 80098be:	4872      	ldr	r0, [pc, #456]	; (8009a88 <__kernel_tanf+0x214>)
 80098c0:	e7f2      	b.n	80098a8 <__kernel_tanf+0x34>
 80098c2:	4b72      	ldr	r3, [pc, #456]	; (8009a8c <__kernel_tanf+0x218>)
 80098c4:	459a      	cmp	sl, r3
 80098c6:	db14      	blt.n	80098f2 <__kernel_tanf+0x7e>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	bfbe      	ittt	lt
 80098cc:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 80098d0:	4604      	movlt	r4, r0
 80098d2:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 80098d6:	486e      	ldr	r0, [pc, #440]	; (8009a90 <__kernel_tanf+0x21c>)
 80098d8:	4621      	mov	r1, r4
 80098da:	f7f7 f953 	bl	8000b84 <__aeabi_fsub>
 80098de:	4604      	mov	r4, r0
 80098e0:	4631      	mov	r1, r6
 80098e2:	486c      	ldr	r0, [pc, #432]	; (8009a94 <__kernel_tanf+0x220>)
 80098e4:	f7f7 f94e 	bl	8000b84 <__aeabi_fsub>
 80098e8:	4621      	mov	r1, r4
 80098ea:	f7f7 f94d 	bl	8000b88 <__addsf3>
 80098ee:	2600      	movs	r6, #0
 80098f0:	4604      	mov	r4, r0
 80098f2:	4621      	mov	r1, r4
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7f7 fa4f 	bl	8000d98 <__aeabi_fmul>
 80098fa:	4601      	mov	r1, r0
 80098fc:	4681      	mov	r9, r0
 80098fe:	f7f7 fa4b 	bl	8000d98 <__aeabi_fmul>
 8009902:	4649      	mov	r1, r9
 8009904:	4605      	mov	r5, r0
 8009906:	4620      	mov	r0, r4
 8009908:	f7f7 fa46 	bl	8000d98 <__aeabi_fmul>
 800990c:	4962      	ldr	r1, [pc, #392]	; (8009a98 <__kernel_tanf+0x224>)
 800990e:	4683      	mov	fp, r0
 8009910:	4628      	mov	r0, r5
 8009912:	f7f7 fa41 	bl	8000d98 <__aeabi_fmul>
 8009916:	4961      	ldr	r1, [pc, #388]	; (8009a9c <__kernel_tanf+0x228>)
 8009918:	f7f7 f936 	bl	8000b88 <__addsf3>
 800991c:	4629      	mov	r1, r5
 800991e:	f7f7 fa3b 	bl	8000d98 <__aeabi_fmul>
 8009922:	495f      	ldr	r1, [pc, #380]	; (8009aa0 <__kernel_tanf+0x22c>)
 8009924:	f7f7 f930 	bl	8000b88 <__addsf3>
 8009928:	4629      	mov	r1, r5
 800992a:	f7f7 fa35 	bl	8000d98 <__aeabi_fmul>
 800992e:	495d      	ldr	r1, [pc, #372]	; (8009aa4 <__kernel_tanf+0x230>)
 8009930:	f7f7 f92a 	bl	8000b88 <__addsf3>
 8009934:	4629      	mov	r1, r5
 8009936:	f7f7 fa2f 	bl	8000d98 <__aeabi_fmul>
 800993a:	495b      	ldr	r1, [pc, #364]	; (8009aa8 <__kernel_tanf+0x234>)
 800993c:	f7f7 f924 	bl	8000b88 <__addsf3>
 8009940:	4629      	mov	r1, r5
 8009942:	f7f7 fa29 	bl	8000d98 <__aeabi_fmul>
 8009946:	4959      	ldr	r1, [pc, #356]	; (8009aac <__kernel_tanf+0x238>)
 8009948:	f7f7 f91e 	bl	8000b88 <__addsf3>
 800994c:	4649      	mov	r1, r9
 800994e:	f7f7 fa23 	bl	8000d98 <__aeabi_fmul>
 8009952:	4957      	ldr	r1, [pc, #348]	; (8009ab0 <__kernel_tanf+0x23c>)
 8009954:	9001      	str	r0, [sp, #4]
 8009956:	4628      	mov	r0, r5
 8009958:	f7f7 fa1e 	bl	8000d98 <__aeabi_fmul>
 800995c:	4955      	ldr	r1, [pc, #340]	; (8009ab4 <__kernel_tanf+0x240>)
 800995e:	f7f7 f913 	bl	8000b88 <__addsf3>
 8009962:	4629      	mov	r1, r5
 8009964:	f7f7 fa18 	bl	8000d98 <__aeabi_fmul>
 8009968:	4953      	ldr	r1, [pc, #332]	; (8009ab8 <__kernel_tanf+0x244>)
 800996a:	f7f7 f90d 	bl	8000b88 <__addsf3>
 800996e:	4629      	mov	r1, r5
 8009970:	f7f7 fa12 	bl	8000d98 <__aeabi_fmul>
 8009974:	4951      	ldr	r1, [pc, #324]	; (8009abc <__kernel_tanf+0x248>)
 8009976:	f7f7 f907 	bl	8000b88 <__addsf3>
 800997a:	4629      	mov	r1, r5
 800997c:	f7f7 fa0c 	bl	8000d98 <__aeabi_fmul>
 8009980:	494f      	ldr	r1, [pc, #316]	; (8009ac0 <__kernel_tanf+0x24c>)
 8009982:	f7f7 f901 	bl	8000b88 <__addsf3>
 8009986:	4629      	mov	r1, r5
 8009988:	f7f7 fa06 	bl	8000d98 <__aeabi_fmul>
 800998c:	494d      	ldr	r1, [pc, #308]	; (8009ac4 <__kernel_tanf+0x250>)
 800998e:	f7f7 f8fb 	bl	8000b88 <__addsf3>
 8009992:	9b01      	ldr	r3, [sp, #4]
 8009994:	4601      	mov	r1, r0
 8009996:	4618      	mov	r0, r3
 8009998:	f7f7 f8f6 	bl	8000b88 <__addsf3>
 800999c:	4659      	mov	r1, fp
 800999e:	f7f7 f9fb 	bl	8000d98 <__aeabi_fmul>
 80099a2:	4631      	mov	r1, r6
 80099a4:	f7f7 f8f0 	bl	8000b88 <__addsf3>
 80099a8:	4649      	mov	r1, r9
 80099aa:	f7f7 f9f5 	bl	8000d98 <__aeabi_fmul>
 80099ae:	4631      	mov	r1, r6
 80099b0:	f7f7 f8ea 	bl	8000b88 <__addsf3>
 80099b4:	4605      	mov	r5, r0
 80099b6:	4944      	ldr	r1, [pc, #272]	; (8009ac8 <__kernel_tanf+0x254>)
 80099b8:	4658      	mov	r0, fp
 80099ba:	f7f7 f9ed 	bl	8000d98 <__aeabi_fmul>
 80099be:	4629      	mov	r1, r5
 80099c0:	f7f7 f8e2 	bl	8000b88 <__addsf3>
 80099c4:	4601      	mov	r1, r0
 80099c6:	4681      	mov	r9, r0
 80099c8:	4620      	mov	r0, r4
 80099ca:	f7f7 f8dd 	bl	8000b88 <__addsf3>
 80099ce:	4b2f      	ldr	r3, [pc, #188]	; (8009a8c <__kernel_tanf+0x218>)
 80099d0:	4605      	mov	r5, r0
 80099d2:	459a      	cmp	sl, r3
 80099d4:	db2b      	blt.n	8009a2e <__kernel_tanf+0x1ba>
 80099d6:	4640      	mov	r0, r8
 80099d8:	f7f7 f98a 	bl	8000cf0 <__aeabi_i2f>
 80099dc:	4629      	mov	r1, r5
 80099de:	4606      	mov	r6, r0
 80099e0:	4628      	mov	r0, r5
 80099e2:	f7f7 f9d9 	bl	8000d98 <__aeabi_fmul>
 80099e6:	4631      	mov	r1, r6
 80099e8:	4680      	mov	r8, r0
 80099ea:	4628      	mov	r0, r5
 80099ec:	f7f7 f8cc 	bl	8000b88 <__addsf3>
 80099f0:	4601      	mov	r1, r0
 80099f2:	4640      	mov	r0, r8
 80099f4:	f7f7 fa84 	bl	8000f00 <__aeabi_fdiv>
 80099f8:	4649      	mov	r1, r9
 80099fa:	f7f7 f8c3 	bl	8000b84 <__aeabi_fsub>
 80099fe:	4601      	mov	r1, r0
 8009a00:	4620      	mov	r0, r4
 8009a02:	f7f7 f8bf 	bl	8000b84 <__aeabi_fsub>
 8009a06:	4601      	mov	r1, r0
 8009a08:	f7f7 f8be 	bl	8000b88 <__addsf3>
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7f7 f8b8 	bl	8000b84 <__aeabi_fsub>
 8009a14:	17bf      	asrs	r7, r7, #30
 8009a16:	f007 0702 	and.w	r7, r7, #2
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	f1c7 0001 	rsb	r0, r7, #1
 8009a20:	f7f7 f966 	bl	8000cf0 <__aeabi_i2f>
 8009a24:	4601      	mov	r1, r0
 8009a26:	4620      	mov	r0, r4
 8009a28:	f7f7 f9b6 	bl	8000d98 <__aeabi_fmul>
 8009a2c:	e73e      	b.n	80098ac <__kernel_tanf+0x38>
 8009a2e:	f1b8 0f01 	cmp.w	r8, #1
 8009a32:	d027      	beq.n	8009a84 <__kernel_tanf+0x210>
 8009a34:	4e25      	ldr	r6, [pc, #148]	; (8009acc <__kernel_tanf+0x258>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	ea06 0800 	and.w	r8, r6, r0
 8009a3c:	4812      	ldr	r0, [pc, #72]	; (8009a88 <__kernel_tanf+0x214>)
 8009a3e:	f7f7 fa5f 	bl	8000f00 <__aeabi_fdiv>
 8009a42:	4621      	mov	r1, r4
 8009a44:	4006      	ands	r6, r0
 8009a46:	4607      	mov	r7, r0
 8009a48:	4640      	mov	r0, r8
 8009a4a:	f7f7 f89b 	bl	8000b84 <__aeabi_fsub>
 8009a4e:	4601      	mov	r1, r0
 8009a50:	4648      	mov	r0, r9
 8009a52:	f7f7 f897 	bl	8000b84 <__aeabi_fsub>
 8009a56:	4631      	mov	r1, r6
 8009a58:	f7f7 f99e 	bl	8000d98 <__aeabi_fmul>
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4640      	mov	r0, r8
 8009a62:	f7f7 f999 	bl	8000d98 <__aeabi_fmul>
 8009a66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009a6a:	f7f7 f88d 	bl	8000b88 <__addsf3>
 8009a6e:	4601      	mov	r1, r0
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7f7 f889 	bl	8000b88 <__addsf3>
 8009a76:	4639      	mov	r1, r7
 8009a78:	f7f7 f98e 	bl	8000d98 <__aeabi_fmul>
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	f7f7 f883 	bl	8000b88 <__addsf3>
 8009a82:	e713      	b.n	80098ac <__kernel_tanf+0x38>
 8009a84:	4604      	mov	r4, r0
 8009a86:	e712      	b.n	80098ae <__kernel_tanf+0x3a>
 8009a88:	bf800000 	.word	0xbf800000
 8009a8c:	3f2ca140 	.word	0x3f2ca140
 8009a90:	3f490fda 	.word	0x3f490fda
 8009a94:	33222168 	.word	0x33222168
 8009a98:	37d95384 	.word	0x37d95384
 8009a9c:	3895c07a 	.word	0x3895c07a
 8009aa0:	398137b9 	.word	0x398137b9
 8009aa4:	3abede48 	.word	0x3abede48
 8009aa8:	3c11371f 	.word	0x3c11371f
 8009aac:	3d5d0dd1 	.word	0x3d5d0dd1
 8009ab0:	b79bae5f 	.word	0xb79bae5f
 8009ab4:	38a3f445 	.word	0x38a3f445
 8009ab8:	3a1a26c8 	.word	0x3a1a26c8
 8009abc:	3b6b6916 	.word	0x3b6b6916
 8009ac0:	3cb327a4 	.word	0x3cb327a4
 8009ac4:	3e088889 	.word	0x3e088889
 8009ac8:	3eaaaaab 	.word	0x3eaaaaab
 8009acc:	fffff000 	.word	0xfffff000

08009ad0 <with_errno>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	460d      	mov	r5, r1
 8009ad6:	4616      	mov	r6, r2
 8009ad8:	f000 f94a 	bl	8009d70 <__errno>
 8009adc:	4629      	mov	r1, r5
 8009ade:	6006      	str	r6, [r0, #0]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}

08009ae4 <xflow>:
 8009ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ae6:	4615      	mov	r5, r2
 8009ae8:	461c      	mov	r4, r3
 8009aea:	b180      	cbz	r0, 8009b0e <xflow+0x2a>
 8009aec:	4610      	mov	r0, r2
 8009aee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009af2:	e9cd 0100 	strd	r0, r1, [sp]
 8009af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afa:	4628      	mov	r0, r5
 8009afc:	4621      	mov	r1, r4
 8009afe:	f7f6 fcf5 	bl	80004ec <__aeabi_dmul>
 8009b02:	2222      	movs	r2, #34	; 0x22
 8009b04:	b003      	add	sp, #12
 8009b06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b0a:	f7ff bfe1 	b.w	8009ad0 <with_errno>
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4619      	mov	r1, r3
 8009b12:	e7ee      	b.n	8009af2 <xflow+0xe>

08009b14 <__math_uflow>:
 8009b14:	2200      	movs	r2, #0
 8009b16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b1a:	f7ff bfe3 	b.w	8009ae4 <xflow>

08009b1e <__math_oflow>:
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009b24:	f7ff bfde 	b.w	8009ae4 <xflow>

08009b28 <fabs>:
 8009b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009b2c:	4770      	bx	lr

08009b2e <finite>:
 8009b2e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009b32:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009b36:	0fc0      	lsrs	r0, r0, #31
 8009b38:	4770      	bx	lr
 8009b3a:	0000      	movs	r0, r0
 8009b3c:	0000      	movs	r0, r0
	...

08009b40 <scalbn>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009b46:	4604      	mov	r4, r0
 8009b48:	460d      	mov	r5, r1
 8009b4a:	4617      	mov	r7, r2
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	b996      	cbnz	r6, 8009b76 <scalbn+0x36>
 8009b50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b54:	4303      	orrs	r3, r0
 8009b56:	d039      	beq.n	8009bcc <scalbn+0x8c>
 8009b58:	4b33      	ldr	r3, [pc, #204]	; (8009c28 <scalbn+0xe8>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f7f6 fcc6 	bl	80004ec <__aeabi_dmul>
 8009b60:	4b32      	ldr	r3, [pc, #200]	; (8009c2c <scalbn+0xec>)
 8009b62:	4604      	mov	r4, r0
 8009b64:	429f      	cmp	r7, r3
 8009b66:	460d      	mov	r5, r1
 8009b68:	da0f      	bge.n	8009b8a <scalbn+0x4a>
 8009b6a:	a32b      	add	r3, pc, #172	; (adr r3, 8009c18 <scalbn+0xd8>)
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	f7f6 fcbc 	bl	80004ec <__aeabi_dmul>
 8009b74:	e006      	b.n	8009b84 <scalbn+0x44>
 8009b76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009b7a:	4296      	cmp	r6, r2
 8009b7c:	d10a      	bne.n	8009b94 <scalbn+0x54>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	f7f6 fafe 	bl	8000180 <__adddf3>
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	e020      	b.n	8009bcc <scalbn+0x8c>
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009b90:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009b94:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009b98:	19b9      	adds	r1, r7, r6
 8009b9a:	4291      	cmp	r1, r2
 8009b9c:	dd0e      	ble.n	8009bbc <scalbn+0x7c>
 8009b9e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009ba2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009ba6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009baa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009bae:	4820      	ldr	r0, [pc, #128]	; (8009c30 <scalbn+0xf0>)
 8009bb0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009bb4:	a31a      	add	r3, pc, #104	; (adr r3, 8009c20 <scalbn+0xe0>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	e7d9      	b.n	8009b70 <scalbn+0x30>
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	dd08      	ble.n	8009bd2 <scalbn+0x92>
 8009bc0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bc8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009bd6:	da12      	bge.n	8009bfe <scalbn+0xbe>
 8009bd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009bdc:	429f      	cmp	r7, r3
 8009bde:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009be2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009be6:	dcdc      	bgt.n	8009ba2 <scalbn+0x62>
 8009be8:	a30b      	add	r3, pc, #44	; (adr r3, 8009c18 <scalbn+0xd8>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009bf2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009bf6:	480f      	ldr	r0, [pc, #60]	; (8009c34 <scalbn+0xf4>)
 8009bf8:	f041 011f 	orr.w	r1, r1, #31
 8009bfc:	e7b8      	b.n	8009b70 <scalbn+0x30>
 8009bfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c02:	3136      	adds	r1, #54	; 0x36
 8009c04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	2200      	movs	r2, #0
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <scalbn+0xf8>)
 8009c14:	e7ac      	b.n	8009b70 <scalbn+0x30>
 8009c16:	bf00      	nop
 8009c18:	c2f8f359 	.word	0xc2f8f359
 8009c1c:	01a56e1f 	.word	0x01a56e1f
 8009c20:	8800759c 	.word	0x8800759c
 8009c24:	7e37e43c 	.word	0x7e37e43c
 8009c28:	43500000 	.word	0x43500000
 8009c2c:	ffff3cb0 	.word	0xffff3cb0
 8009c30:	8800759c 	.word	0x8800759c
 8009c34:	c2f8f359 	.word	0xc2f8f359
 8009c38:	3c900000 	.word	0x3c900000

08009c3c <fabsf>:
 8009c3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009c40:	4770      	bx	lr
	...

08009c44 <floorf>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009c4a:	3d7f      	subs	r5, #127	; 0x7f
 8009c4c:	2d16      	cmp	r5, #22
 8009c4e:	4601      	mov	r1, r0
 8009c50:	4604      	mov	r4, r0
 8009c52:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009c56:	dc26      	bgt.n	8009ca6 <floorf+0x62>
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	da0e      	bge.n	8009c7a <floorf+0x36>
 8009c5c:	4917      	ldr	r1, [pc, #92]	; (8009cbc <floorf+0x78>)
 8009c5e:	f7f6 ff93 	bl	8000b88 <__addsf3>
 8009c62:	2100      	movs	r1, #0
 8009c64:	f7f7 fa54 	bl	8001110 <__aeabi_fcmpgt>
 8009c68:	b128      	cbz	r0, 8009c76 <floorf+0x32>
 8009c6a:	2c00      	cmp	r4, #0
 8009c6c:	da23      	bge.n	8009cb6 <floorf+0x72>
 8009c6e:	4b14      	ldr	r3, [pc, #80]	; (8009cc0 <floorf+0x7c>)
 8009c70:	2e00      	cmp	r6, #0
 8009c72:	bf18      	it	ne
 8009c74:	461c      	movne	r4, r3
 8009c76:	4621      	mov	r1, r4
 8009c78:	e01b      	b.n	8009cb2 <floorf+0x6e>
 8009c7a:	4e12      	ldr	r6, [pc, #72]	; (8009cc4 <floorf+0x80>)
 8009c7c:	412e      	asrs	r6, r5
 8009c7e:	4230      	tst	r0, r6
 8009c80:	d017      	beq.n	8009cb2 <floorf+0x6e>
 8009c82:	490e      	ldr	r1, [pc, #56]	; (8009cbc <floorf+0x78>)
 8009c84:	f7f6 ff80 	bl	8000b88 <__addsf3>
 8009c88:	2100      	movs	r1, #0
 8009c8a:	f7f7 fa41 	bl	8001110 <__aeabi_fcmpgt>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d0f1      	beq.n	8009c76 <floorf+0x32>
 8009c92:	2c00      	cmp	r4, #0
 8009c94:	bfbe      	ittt	lt
 8009c96:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009c9a:	fa43 f505 	asrlt.w	r5, r3, r5
 8009c9e:	1964      	addlt	r4, r4, r5
 8009ca0:	ea24 0406 	bic.w	r4, r4, r6
 8009ca4:	e7e7      	b.n	8009c76 <floorf+0x32>
 8009ca6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009caa:	d302      	bcc.n	8009cb2 <floorf+0x6e>
 8009cac:	f7f6 ff6c 	bl	8000b88 <__addsf3>
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	4608      	mov	r0, r1
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	2400      	movs	r4, #0
 8009cb8:	e7dd      	b.n	8009c76 <floorf+0x32>
 8009cba:	bf00      	nop
 8009cbc:	7149f2ca 	.word	0x7149f2ca
 8009cc0:	bf800000 	.word	0xbf800000
 8009cc4:	007fffff 	.word	0x007fffff

08009cc8 <scalbnf>:
 8009cc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4603      	mov	r3, r0
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	d02a      	beq.n	8009d2c <scalbnf+0x64>
 8009cd6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009cda:	d304      	bcc.n	8009ce6 <scalbnf+0x1e>
 8009cdc:	4601      	mov	r1, r0
 8009cde:	f7f6 ff53 	bl	8000b88 <__addsf3>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	e022      	b.n	8009d2c <scalbnf+0x64>
 8009ce6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8009cea:	d117      	bne.n	8009d1c <scalbnf+0x54>
 8009cec:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009cf0:	f7f7 f852 	bl	8000d98 <__aeabi_fmul>
 8009cf4:	4a17      	ldr	r2, [pc, #92]	; (8009d54 <scalbnf+0x8c>)
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4295      	cmp	r5, r2
 8009cfa:	db0b      	blt.n	8009d14 <scalbnf+0x4c>
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009d02:	3a19      	subs	r2, #25
 8009d04:	442a      	add	r2, r5
 8009d06:	2afe      	cmp	r2, #254	; 0xfe
 8009d08:	dd0a      	ble.n	8009d20 <scalbnf+0x58>
 8009d0a:	4913      	ldr	r1, [pc, #76]	; (8009d58 <scalbnf+0x90>)
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f361 001e 	bfi	r0, r1, #0, #31
 8009d12:	e000      	b.n	8009d16 <scalbnf+0x4e>
 8009d14:	4911      	ldr	r1, [pc, #68]	; (8009d5c <scalbnf+0x94>)
 8009d16:	f7f7 f83f 	bl	8000d98 <__aeabi_fmul>
 8009d1a:	e7e2      	b.n	8009ce2 <scalbnf+0x1a>
 8009d1c:	0dd2      	lsrs	r2, r2, #23
 8009d1e:	e7f1      	b.n	8009d04 <scalbnf+0x3c>
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	dd05      	ble.n	8009d30 <scalbnf+0x68>
 8009d24:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8009d28:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	f112 0f16 	cmn.w	r2, #22
 8009d34:	da05      	bge.n	8009d42 <scalbnf+0x7a>
 8009d36:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009d3a:	4295      	cmp	r5, r2
 8009d3c:	dce5      	bgt.n	8009d0a <scalbnf+0x42>
 8009d3e:	4907      	ldr	r1, [pc, #28]	; (8009d5c <scalbnf+0x94>)
 8009d40:	e7e4      	b.n	8009d0c <scalbnf+0x44>
 8009d42:	3219      	adds	r2, #25
 8009d44:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009d48:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009d4c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8009d50:	e7e1      	b.n	8009d16 <scalbnf+0x4e>
 8009d52:	bf00      	nop
 8009d54:	ffff3cb0 	.word	0xffff3cb0
 8009d58:	7149f2ca 	.word	0x7149f2ca
 8009d5c:	0da24260 	.word	0x0da24260

08009d60 <abort>:
 8009d60:	2006      	movs	r0, #6
 8009d62:	b508      	push	{r3, lr}
 8009d64:	f000 fdc0 	bl	800a8e8 <raise>
 8009d68:	2001      	movs	r0, #1
 8009d6a:	f7f9 fe38 	bl	80039de <_exit>
	...

08009d70 <__errno>:
 8009d70:	4b01      	ldr	r3, [pc, #4]	; (8009d78 <__errno+0x8>)
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	200000cc 	.word	0x200000cc

08009d7c <__libc_init_array>:
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	2600      	movs	r6, #0
 8009d80:	4d0c      	ldr	r5, [pc, #48]	; (8009db4 <__libc_init_array+0x38>)
 8009d82:	4c0d      	ldr	r4, [pc, #52]	; (8009db8 <__libc_init_array+0x3c>)
 8009d84:	1b64      	subs	r4, r4, r5
 8009d86:	10a4      	asrs	r4, r4, #2
 8009d88:	42a6      	cmp	r6, r4
 8009d8a:	d109      	bne.n	8009da0 <__libc_init_array+0x24>
 8009d8c:	f002 fef2 	bl	800cb74 <_init>
 8009d90:	2600      	movs	r6, #0
 8009d92:	4d0a      	ldr	r5, [pc, #40]	; (8009dbc <__libc_init_array+0x40>)
 8009d94:	4c0a      	ldr	r4, [pc, #40]	; (8009dc0 <__libc_init_array+0x44>)
 8009d96:	1b64      	subs	r4, r4, r5
 8009d98:	10a4      	asrs	r4, r4, #2
 8009d9a:	42a6      	cmp	r6, r4
 8009d9c:	d105      	bne.n	8009daa <__libc_init_array+0x2e>
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da4:	4798      	blx	r3
 8009da6:	3601      	adds	r6, #1
 8009da8:	e7ee      	b.n	8009d88 <__libc_init_array+0xc>
 8009daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dae:	4798      	blx	r3
 8009db0:	3601      	adds	r6, #1
 8009db2:	e7f2      	b.n	8009d9a <__libc_init_array+0x1e>
 8009db4:	0800d734 	.word	0x0800d734
 8009db8:	0800d734 	.word	0x0800d734
 8009dbc:	0800d734 	.word	0x0800d734
 8009dc0:	0800d738 	.word	0x0800d738

08009dc4 <malloc>:
 8009dc4:	4b02      	ldr	r3, [pc, #8]	; (8009dd0 <malloc+0xc>)
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	f000 b881 	b.w	8009ed0 <_malloc_r>
 8009dce:	bf00      	nop
 8009dd0:	200000cc 	.word	0x200000cc

08009dd4 <memcpy>:
 8009dd4:	440a      	add	r2, r1
 8009dd6:	4291      	cmp	r1, r2
 8009dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ddc:	d100      	bne.n	8009de0 <memcpy+0xc>
 8009dde:	4770      	bx	lr
 8009de0:	b510      	push	{r4, lr}
 8009de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009de6:	4291      	cmp	r1, r2
 8009de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dec:	d1f9      	bne.n	8009de2 <memcpy+0xe>
 8009dee:	bd10      	pop	{r4, pc}

08009df0 <memset>:
 8009df0:	4603      	mov	r3, r0
 8009df2:	4402      	add	r2, r0
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d100      	bne.n	8009dfa <memset+0xa>
 8009df8:	4770      	bx	lr
 8009dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8009dfe:	e7f9      	b.n	8009df4 <memset+0x4>

08009e00 <_free_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4605      	mov	r5, r0
 8009e04:	2900      	cmp	r1, #0
 8009e06:	d040      	beq.n	8009e8a <_free_r+0x8a>
 8009e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e0c:	1f0c      	subs	r4, r1, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfb8      	it	lt
 8009e12:	18e4      	addlt	r4, r4, r3
 8009e14:	f001 fc30 	bl	800b678 <__malloc_lock>
 8009e18:	4a1c      	ldr	r2, [pc, #112]	; (8009e8c <_free_r+0x8c>)
 8009e1a:	6813      	ldr	r3, [r2, #0]
 8009e1c:	b933      	cbnz	r3, 8009e2c <_free_r+0x2c>
 8009e1e:	6063      	str	r3, [r4, #4]
 8009e20:	6014      	str	r4, [r2, #0]
 8009e22:	4628      	mov	r0, r5
 8009e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e28:	f001 bc2c 	b.w	800b684 <__malloc_unlock>
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	d908      	bls.n	8009e42 <_free_r+0x42>
 8009e30:	6820      	ldr	r0, [r4, #0]
 8009e32:	1821      	adds	r1, r4, r0
 8009e34:	428b      	cmp	r3, r1
 8009e36:	bf01      	itttt	eq
 8009e38:	6819      	ldreq	r1, [r3, #0]
 8009e3a:	685b      	ldreq	r3, [r3, #4]
 8009e3c:	1809      	addeq	r1, r1, r0
 8009e3e:	6021      	streq	r1, [r4, #0]
 8009e40:	e7ed      	b.n	8009e1e <_free_r+0x1e>
 8009e42:	461a      	mov	r2, r3
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	b10b      	cbz	r3, 8009e4c <_free_r+0x4c>
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	d9fa      	bls.n	8009e42 <_free_r+0x42>
 8009e4c:	6811      	ldr	r1, [r2, #0]
 8009e4e:	1850      	adds	r0, r2, r1
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d10b      	bne.n	8009e6c <_free_r+0x6c>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	4401      	add	r1, r0
 8009e58:	1850      	adds	r0, r2, r1
 8009e5a:	4283      	cmp	r3, r0
 8009e5c:	6011      	str	r1, [r2, #0]
 8009e5e:	d1e0      	bne.n	8009e22 <_free_r+0x22>
 8009e60:	6818      	ldr	r0, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	4401      	add	r1, r0
 8009e66:	6011      	str	r1, [r2, #0]
 8009e68:	6053      	str	r3, [r2, #4]
 8009e6a:	e7da      	b.n	8009e22 <_free_r+0x22>
 8009e6c:	d902      	bls.n	8009e74 <_free_r+0x74>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	e7d6      	b.n	8009e22 <_free_r+0x22>
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	1821      	adds	r1, r4, r0
 8009e78:	428b      	cmp	r3, r1
 8009e7a:	bf01      	itttt	eq
 8009e7c:	6819      	ldreq	r1, [r3, #0]
 8009e7e:	685b      	ldreq	r3, [r3, #4]
 8009e80:	1809      	addeq	r1, r1, r0
 8009e82:	6021      	streq	r1, [r4, #0]
 8009e84:	6063      	str	r3, [r4, #4]
 8009e86:	6054      	str	r4, [r2, #4]
 8009e88:	e7cb      	b.n	8009e22 <_free_r+0x22>
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	20000890 	.word	0x20000890

08009e90 <sbrk_aligned>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	4e0e      	ldr	r6, [pc, #56]	; (8009ecc <sbrk_aligned+0x3c>)
 8009e94:	460c      	mov	r4, r1
 8009e96:	6831      	ldr	r1, [r6, #0]
 8009e98:	4605      	mov	r5, r0
 8009e9a:	b911      	cbnz	r1, 8009ea2 <sbrk_aligned+0x12>
 8009e9c:	f000 fcec 	bl	800a878 <_sbrk_r>
 8009ea0:	6030      	str	r0, [r6, #0]
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 fce7 	bl	800a878 <_sbrk_r>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	d00a      	beq.n	8009ec4 <sbrk_aligned+0x34>
 8009eae:	1cc4      	adds	r4, r0, #3
 8009eb0:	f024 0403 	bic.w	r4, r4, #3
 8009eb4:	42a0      	cmp	r0, r4
 8009eb6:	d007      	beq.n	8009ec8 <sbrk_aligned+0x38>
 8009eb8:	1a21      	subs	r1, r4, r0
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 fcdc 	bl	800a878 <_sbrk_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d101      	bne.n	8009ec8 <sbrk_aligned+0x38>
 8009ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ec8:	4620      	mov	r0, r4
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	20000894 	.word	0x20000894

08009ed0 <_malloc_r>:
 8009ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	1ccd      	adds	r5, r1, #3
 8009ed6:	f025 0503 	bic.w	r5, r5, #3
 8009eda:	3508      	adds	r5, #8
 8009edc:	2d0c      	cmp	r5, #12
 8009ede:	bf38      	it	cc
 8009ee0:	250c      	movcc	r5, #12
 8009ee2:	2d00      	cmp	r5, #0
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	db01      	blt.n	8009eec <_malloc_r+0x1c>
 8009ee8:	42a9      	cmp	r1, r5
 8009eea:	d905      	bls.n	8009ef8 <_malloc_r+0x28>
 8009eec:	230c      	movs	r3, #12
 8009eee:	2600      	movs	r6, #0
 8009ef0:	603b      	str	r3, [r7, #0]
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef8:	4e2e      	ldr	r6, [pc, #184]	; (8009fb4 <_malloc_r+0xe4>)
 8009efa:	f001 fbbd 	bl	800b678 <__malloc_lock>
 8009efe:	6833      	ldr	r3, [r6, #0]
 8009f00:	461c      	mov	r4, r3
 8009f02:	bb34      	cbnz	r4, 8009f52 <_malloc_r+0x82>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4638      	mov	r0, r7
 8009f08:	f7ff ffc2 	bl	8009e90 <sbrk_aligned>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	4604      	mov	r4, r0
 8009f10:	d14d      	bne.n	8009fae <_malloc_r+0xde>
 8009f12:	6834      	ldr	r4, [r6, #0]
 8009f14:	4626      	mov	r6, r4
 8009f16:	2e00      	cmp	r6, #0
 8009f18:	d140      	bne.n	8009f9c <_malloc_r+0xcc>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4638      	mov	r0, r7
 8009f20:	eb04 0803 	add.w	r8, r4, r3
 8009f24:	f000 fca8 	bl	800a878 <_sbrk_r>
 8009f28:	4580      	cmp	r8, r0
 8009f2a:	d13a      	bne.n	8009fa2 <_malloc_r+0xd2>
 8009f2c:	6821      	ldr	r1, [r4, #0]
 8009f2e:	3503      	adds	r5, #3
 8009f30:	1a6d      	subs	r5, r5, r1
 8009f32:	f025 0503 	bic.w	r5, r5, #3
 8009f36:	3508      	adds	r5, #8
 8009f38:	2d0c      	cmp	r5, #12
 8009f3a:	bf38      	it	cc
 8009f3c:	250c      	movcc	r5, #12
 8009f3e:	4638      	mov	r0, r7
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7ff ffa5 	bl	8009e90 <sbrk_aligned>
 8009f46:	3001      	adds	r0, #1
 8009f48:	d02b      	beq.n	8009fa2 <_malloc_r+0xd2>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	442b      	add	r3, r5
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	e00e      	b.n	8009f70 <_malloc_r+0xa0>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	1b52      	subs	r2, r2, r5
 8009f56:	d41e      	bmi.n	8009f96 <_malloc_r+0xc6>
 8009f58:	2a0b      	cmp	r2, #11
 8009f5a:	d916      	bls.n	8009f8a <_malloc_r+0xba>
 8009f5c:	1961      	adds	r1, r4, r5
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	6025      	str	r5, [r4, #0]
 8009f62:	bf18      	it	ne
 8009f64:	6059      	strne	r1, [r3, #4]
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	bf08      	it	eq
 8009f6a:	6031      	streq	r1, [r6, #0]
 8009f6c:	5162      	str	r2, [r4, r5]
 8009f6e:	604b      	str	r3, [r1, #4]
 8009f70:	4638      	mov	r0, r7
 8009f72:	f104 060b 	add.w	r6, r4, #11
 8009f76:	f001 fb85 	bl	800b684 <__malloc_unlock>
 8009f7a:	f026 0607 	bic.w	r6, r6, #7
 8009f7e:	1d23      	adds	r3, r4, #4
 8009f80:	1af2      	subs	r2, r6, r3
 8009f82:	d0b6      	beq.n	8009ef2 <_malloc_r+0x22>
 8009f84:	1b9b      	subs	r3, r3, r6
 8009f86:	50a3      	str	r3, [r4, r2]
 8009f88:	e7b3      	b.n	8009ef2 <_malloc_r+0x22>
 8009f8a:	6862      	ldr	r2, [r4, #4]
 8009f8c:	42a3      	cmp	r3, r4
 8009f8e:	bf0c      	ite	eq
 8009f90:	6032      	streq	r2, [r6, #0]
 8009f92:	605a      	strne	r2, [r3, #4]
 8009f94:	e7ec      	b.n	8009f70 <_malloc_r+0xa0>
 8009f96:	4623      	mov	r3, r4
 8009f98:	6864      	ldr	r4, [r4, #4]
 8009f9a:	e7b2      	b.n	8009f02 <_malloc_r+0x32>
 8009f9c:	4634      	mov	r4, r6
 8009f9e:	6876      	ldr	r6, [r6, #4]
 8009fa0:	e7b9      	b.n	8009f16 <_malloc_r+0x46>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	f001 fb6c 	bl	800b684 <__malloc_unlock>
 8009fac:	e7a1      	b.n	8009ef2 <_malloc_r+0x22>
 8009fae:	6025      	str	r5, [r4, #0]
 8009fb0:	e7de      	b.n	8009f70 <_malloc_r+0xa0>
 8009fb2:	bf00      	nop
 8009fb4:	20000890 	.word	0x20000890

08009fb8 <__cvt>:
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbe:	461f      	mov	r7, r3
 8009fc0:	bfbb      	ittet	lt
 8009fc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009fc6:	461f      	movlt	r7, r3
 8009fc8:	2300      	movge	r3, #0
 8009fca:	232d      	movlt	r3, #45	; 0x2d
 8009fcc:	b088      	sub	sp, #32
 8009fce:	4614      	mov	r4, r2
 8009fd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009fd4:	7013      	strb	r3, [r2, #0]
 8009fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009fdc:	f023 0820 	bic.w	r8, r3, #32
 8009fe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fe4:	d005      	beq.n	8009ff2 <__cvt+0x3a>
 8009fe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009fea:	d100      	bne.n	8009fee <__cvt+0x36>
 8009fec:	3501      	adds	r5, #1
 8009fee:	2302      	movs	r3, #2
 8009ff0:	e000      	b.n	8009ff4 <__cvt+0x3c>
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	aa07      	add	r2, sp, #28
 8009ff6:	9204      	str	r2, [sp, #16]
 8009ff8:	aa06      	add	r2, sp, #24
 8009ffa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009ffe:	e9cd 3500 	strd	r3, r5, [sp]
 800a002:	4622      	mov	r2, r4
 800a004:	463b      	mov	r3, r7
 800a006:	f000 fd37 	bl	800aa78 <_dtoa_r>
 800a00a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a00e:	4606      	mov	r6, r0
 800a010:	d102      	bne.n	800a018 <__cvt+0x60>
 800a012:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a014:	07db      	lsls	r3, r3, #31
 800a016:	d522      	bpl.n	800a05e <__cvt+0xa6>
 800a018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a01c:	eb06 0905 	add.w	r9, r6, r5
 800a020:	d110      	bne.n	800a044 <__cvt+0x8c>
 800a022:	7833      	ldrb	r3, [r6, #0]
 800a024:	2b30      	cmp	r3, #48	; 0x30
 800a026:	d10a      	bne.n	800a03e <__cvt+0x86>
 800a028:	2200      	movs	r2, #0
 800a02a:	2300      	movs	r3, #0
 800a02c:	4620      	mov	r0, r4
 800a02e:	4639      	mov	r1, r7
 800a030:	f7f6 fcc4 	bl	80009bc <__aeabi_dcmpeq>
 800a034:	b918      	cbnz	r0, 800a03e <__cvt+0x86>
 800a036:	f1c5 0501 	rsb	r5, r5, #1
 800a03a:	f8ca 5000 	str.w	r5, [sl]
 800a03e:	f8da 3000 	ldr.w	r3, [sl]
 800a042:	4499      	add	r9, r3
 800a044:	2200      	movs	r2, #0
 800a046:	2300      	movs	r3, #0
 800a048:	4620      	mov	r0, r4
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 fcb6 	bl	80009bc <__aeabi_dcmpeq>
 800a050:	b108      	cbz	r0, 800a056 <__cvt+0x9e>
 800a052:	f8cd 901c 	str.w	r9, [sp, #28]
 800a056:	2230      	movs	r2, #48	; 0x30
 800a058:	9b07      	ldr	r3, [sp, #28]
 800a05a:	454b      	cmp	r3, r9
 800a05c:	d307      	bcc.n	800a06e <__cvt+0xb6>
 800a05e:	4630      	mov	r0, r6
 800a060:	9b07      	ldr	r3, [sp, #28]
 800a062:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a064:	1b9b      	subs	r3, r3, r6
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	b008      	add	sp, #32
 800a06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a06e:	1c59      	adds	r1, r3, #1
 800a070:	9107      	str	r1, [sp, #28]
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	e7f0      	b.n	800a058 <__cvt+0xa0>

0800a076 <__exponent>:
 800a076:	4603      	mov	r3, r0
 800a078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a07a:	2900      	cmp	r1, #0
 800a07c:	f803 2b02 	strb.w	r2, [r3], #2
 800a080:	bfb6      	itet	lt
 800a082:	222d      	movlt	r2, #45	; 0x2d
 800a084:	222b      	movge	r2, #43	; 0x2b
 800a086:	4249      	neglt	r1, r1
 800a088:	2909      	cmp	r1, #9
 800a08a:	7042      	strb	r2, [r0, #1]
 800a08c:	dd2b      	ble.n	800a0e6 <__exponent+0x70>
 800a08e:	f10d 0407 	add.w	r4, sp, #7
 800a092:	46a4      	mov	ip, r4
 800a094:	270a      	movs	r7, #10
 800a096:	fb91 f6f7 	sdiv	r6, r1, r7
 800a09a:	460a      	mov	r2, r1
 800a09c:	46a6      	mov	lr, r4
 800a09e:	fb07 1516 	mls	r5, r7, r6, r1
 800a0a2:	2a63      	cmp	r2, #99	; 0x63
 800a0a4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a0a8:	4631      	mov	r1, r6
 800a0aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a0b2:	dcf0      	bgt.n	800a096 <__exponent+0x20>
 800a0b4:	3130      	adds	r1, #48	; 0x30
 800a0b6:	f1ae 0502 	sub.w	r5, lr, #2
 800a0ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a0be:	4629      	mov	r1, r5
 800a0c0:	1c44      	adds	r4, r0, #1
 800a0c2:	4561      	cmp	r1, ip
 800a0c4:	d30a      	bcc.n	800a0dc <__exponent+0x66>
 800a0c6:	f10d 0209 	add.w	r2, sp, #9
 800a0ca:	eba2 020e 	sub.w	r2, r2, lr
 800a0ce:	4565      	cmp	r5, ip
 800a0d0:	bf88      	it	hi
 800a0d2:	2200      	movhi	r2, #0
 800a0d4:	4413      	add	r3, r2
 800a0d6:	1a18      	subs	r0, r3, r0
 800a0d8:	b003      	add	sp, #12
 800a0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a0e4:	e7ed      	b.n	800a0c2 <__exponent+0x4c>
 800a0e6:	2330      	movs	r3, #48	; 0x30
 800a0e8:	3130      	adds	r1, #48	; 0x30
 800a0ea:	7083      	strb	r3, [r0, #2]
 800a0ec:	70c1      	strb	r1, [r0, #3]
 800a0ee:	1d03      	adds	r3, r0, #4
 800a0f0:	e7f1      	b.n	800a0d6 <__exponent+0x60>
	...

0800a0f4 <_printf_float>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	b091      	sub	sp, #68	; 0x44
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a100:	4616      	mov	r6, r2
 800a102:	461f      	mov	r7, r3
 800a104:	4605      	mov	r5, r0
 800a106:	f001 faa5 	bl	800b654 <_localeconv_r>
 800a10a:	6803      	ldr	r3, [r0, #0]
 800a10c:	4618      	mov	r0, r3
 800a10e:	9309      	str	r3, [sp, #36]	; 0x24
 800a110:	f7f6 f828 	bl	8000164 <strlen>
 800a114:	2300      	movs	r3, #0
 800a116:	930e      	str	r3, [sp, #56]	; 0x38
 800a118:	f8d8 3000 	ldr.w	r3, [r8]
 800a11c:	900a      	str	r0, [sp, #40]	; 0x28
 800a11e:	3307      	adds	r3, #7
 800a120:	f023 0307 	bic.w	r3, r3, #7
 800a124:	f103 0208 	add.w	r2, r3, #8
 800a128:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a12c:	f8d4 b000 	ldr.w	fp, [r4]
 800a130:	f8c8 2000 	str.w	r2, [r8]
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a13c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a140:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a144:	930b      	str	r3, [sp, #44]	; 0x2c
 800a146:	f04f 32ff 	mov.w	r2, #4294967295
 800a14a:	4640      	mov	r0, r8
 800a14c:	4b9c      	ldr	r3, [pc, #624]	; (800a3c0 <_printf_float+0x2cc>)
 800a14e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a150:	f7f6 fc66 	bl	8000a20 <__aeabi_dcmpun>
 800a154:	bb70      	cbnz	r0, 800a1b4 <_printf_float+0xc0>
 800a156:	f04f 32ff 	mov.w	r2, #4294967295
 800a15a:	4640      	mov	r0, r8
 800a15c:	4b98      	ldr	r3, [pc, #608]	; (800a3c0 <_printf_float+0x2cc>)
 800a15e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a160:	f7f6 fc40 	bl	80009e4 <__aeabi_dcmple>
 800a164:	bb30      	cbnz	r0, 800a1b4 <_printf_float+0xc0>
 800a166:	2200      	movs	r2, #0
 800a168:	2300      	movs	r3, #0
 800a16a:	4640      	mov	r0, r8
 800a16c:	4651      	mov	r1, sl
 800a16e:	f7f6 fc2f 	bl	80009d0 <__aeabi_dcmplt>
 800a172:	b110      	cbz	r0, 800a17a <_printf_float+0x86>
 800a174:	232d      	movs	r3, #45	; 0x2d
 800a176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a17a:	4b92      	ldr	r3, [pc, #584]	; (800a3c4 <_printf_float+0x2d0>)
 800a17c:	4892      	ldr	r0, [pc, #584]	; (800a3c8 <_printf_float+0x2d4>)
 800a17e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a182:	bf94      	ite	ls
 800a184:	4698      	movls	r8, r3
 800a186:	4680      	movhi	r8, r0
 800a188:	2303      	movs	r3, #3
 800a18a:	f04f 0a00 	mov.w	sl, #0
 800a18e:	6123      	str	r3, [r4, #16]
 800a190:	f02b 0304 	bic.w	r3, fp, #4
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	4633      	mov	r3, r6
 800a198:	4621      	mov	r1, r4
 800a19a:	4628      	mov	r0, r5
 800a19c:	9700      	str	r7, [sp, #0]
 800a19e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a1a0:	f000 f9d4 	bl	800a54c <_printf_common>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	f040 8090 	bne.w	800a2ca <_printf_float+0x1d6>
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ae:	b011      	add	sp, #68	; 0x44
 800a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	4653      	mov	r3, sl
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4651      	mov	r1, sl
 800a1bc:	f7f6 fc30 	bl	8000a20 <__aeabi_dcmpun>
 800a1c0:	b148      	cbz	r0, 800a1d6 <_printf_float+0xe2>
 800a1c2:	f1ba 0f00 	cmp.w	sl, #0
 800a1c6:	bfb8      	it	lt
 800a1c8:	232d      	movlt	r3, #45	; 0x2d
 800a1ca:	4880      	ldr	r0, [pc, #512]	; (800a3cc <_printf_float+0x2d8>)
 800a1cc:	bfb8      	it	lt
 800a1ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a1d2:	4b7f      	ldr	r3, [pc, #508]	; (800a3d0 <_printf_float+0x2dc>)
 800a1d4:	e7d3      	b.n	800a17e <_printf_float+0x8a>
 800a1d6:	6863      	ldr	r3, [r4, #4]
 800a1d8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	d142      	bne.n	800a266 <_printf_float+0x172>
 800a1e0:	2306      	movs	r3, #6
 800a1e2:	6063      	str	r3, [r4, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	9206      	str	r2, [sp, #24]
 800a1e8:	aa0e      	add	r2, sp, #56	; 0x38
 800a1ea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a1ee:	aa0d      	add	r2, sp, #52	; 0x34
 800a1f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a1f4:	9203      	str	r2, [sp, #12]
 800a1f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a1fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	6863      	ldr	r3, [r4, #4]
 800a202:	4642      	mov	r2, r8
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	4628      	mov	r0, r5
 800a208:	4653      	mov	r3, sl
 800a20a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a20c:	f7ff fed4 	bl	8009fb8 <__cvt>
 800a210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a212:	4680      	mov	r8, r0
 800a214:	2947      	cmp	r1, #71	; 0x47
 800a216:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a218:	d108      	bne.n	800a22c <_printf_float+0x138>
 800a21a:	1cc8      	adds	r0, r1, #3
 800a21c:	db02      	blt.n	800a224 <_printf_float+0x130>
 800a21e:	6863      	ldr	r3, [r4, #4]
 800a220:	4299      	cmp	r1, r3
 800a222:	dd40      	ble.n	800a2a6 <_printf_float+0x1b2>
 800a224:	f1a9 0902 	sub.w	r9, r9, #2
 800a228:	fa5f f989 	uxtb.w	r9, r9
 800a22c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a230:	d81f      	bhi.n	800a272 <_printf_float+0x17e>
 800a232:	464a      	mov	r2, r9
 800a234:	3901      	subs	r1, #1
 800a236:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a23a:	910d      	str	r1, [sp, #52]	; 0x34
 800a23c:	f7ff ff1b 	bl	800a076 <__exponent>
 800a240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a242:	4682      	mov	sl, r0
 800a244:	1813      	adds	r3, r2, r0
 800a246:	2a01      	cmp	r2, #1
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	dc02      	bgt.n	800a252 <_printf_float+0x15e>
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	07d2      	lsls	r2, r2, #31
 800a250:	d501      	bpl.n	800a256 <_printf_float+0x162>
 800a252:	3301      	adds	r3, #1
 800a254:	6123      	str	r3, [r4, #16]
 800a256:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d09b      	beq.n	800a196 <_printf_float+0xa2>
 800a25e:	232d      	movs	r3, #45	; 0x2d
 800a260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a264:	e797      	b.n	800a196 <_printf_float+0xa2>
 800a266:	2947      	cmp	r1, #71	; 0x47
 800a268:	d1bc      	bne.n	800a1e4 <_printf_float+0xf0>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1ba      	bne.n	800a1e4 <_printf_float+0xf0>
 800a26e:	2301      	movs	r3, #1
 800a270:	e7b7      	b.n	800a1e2 <_printf_float+0xee>
 800a272:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a276:	d118      	bne.n	800a2aa <_printf_float+0x1b6>
 800a278:	2900      	cmp	r1, #0
 800a27a:	6863      	ldr	r3, [r4, #4]
 800a27c:	dd0b      	ble.n	800a296 <_printf_float+0x1a2>
 800a27e:	6121      	str	r1, [r4, #16]
 800a280:	b913      	cbnz	r3, 800a288 <_printf_float+0x194>
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	07d0      	lsls	r0, r2, #31
 800a286:	d502      	bpl.n	800a28e <_printf_float+0x19a>
 800a288:	3301      	adds	r3, #1
 800a28a:	440b      	add	r3, r1
 800a28c:	6123      	str	r3, [r4, #16]
 800a28e:	f04f 0a00 	mov.w	sl, #0
 800a292:	65a1      	str	r1, [r4, #88]	; 0x58
 800a294:	e7df      	b.n	800a256 <_printf_float+0x162>
 800a296:	b913      	cbnz	r3, 800a29e <_printf_float+0x1aa>
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	07d2      	lsls	r2, r2, #31
 800a29c:	d501      	bpl.n	800a2a2 <_printf_float+0x1ae>
 800a29e:	3302      	adds	r3, #2
 800a2a0:	e7f4      	b.n	800a28c <_printf_float+0x198>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7f2      	b.n	800a28c <_printf_float+0x198>
 800a2a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ac:	4299      	cmp	r1, r3
 800a2ae:	db05      	blt.n	800a2bc <_printf_float+0x1c8>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	6121      	str	r1, [r4, #16]
 800a2b4:	07d8      	lsls	r0, r3, #31
 800a2b6:	d5ea      	bpl.n	800a28e <_printf_float+0x19a>
 800a2b8:	1c4b      	adds	r3, r1, #1
 800a2ba:	e7e7      	b.n	800a28c <_printf_float+0x198>
 800a2bc:	2900      	cmp	r1, #0
 800a2be:	bfcc      	ite	gt
 800a2c0:	2201      	movgt	r2, #1
 800a2c2:	f1c1 0202 	rsble	r2, r1, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	e7e0      	b.n	800a28c <_printf_float+0x198>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	055a      	lsls	r2, r3, #21
 800a2ce:	d407      	bmi.n	800a2e0 <_printf_float+0x1ec>
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	4642      	mov	r2, r8
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b8      	blx	r7
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d12b      	bne.n	800a336 <_printf_float+0x242>
 800a2de:	e764      	b.n	800a1aa <_printf_float+0xb6>
 800a2e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a2e4:	f240 80dd 	bls.w	800a4a2 <_printf_float+0x3ae>
 800a2e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f7f6 fb64 	bl	80009bc <__aeabi_dcmpeq>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d033      	beq.n	800a360 <_printf_float+0x26c>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	4a35      	ldr	r2, [pc, #212]	; (800a3d4 <_printf_float+0x2e0>)
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f43f af51 	beq.w	800a1aa <_printf_float+0xb6>
 800a308:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a30c:	429a      	cmp	r2, r3
 800a30e:	db02      	blt.n	800a316 <_printf_float+0x222>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	07d8      	lsls	r0, r3, #31
 800a314:	d50f      	bpl.n	800a336 <_printf_float+0x242>
 800a316:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f af42 	beq.w	800a1aa <_printf_float+0xb6>
 800a326:	f04f 0800 	mov.w	r8, #0
 800a32a:	f104 091a 	add.w	r9, r4, #26
 800a32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a330:	3b01      	subs	r3, #1
 800a332:	4543      	cmp	r3, r8
 800a334:	dc09      	bgt.n	800a34a <_printf_float+0x256>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	079b      	lsls	r3, r3, #30
 800a33a:	f100 8102 	bmi.w	800a542 <_printf_float+0x44e>
 800a33e:	68e0      	ldr	r0, [r4, #12]
 800a340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a342:	4298      	cmp	r0, r3
 800a344:	bfb8      	it	lt
 800a346:	4618      	movlt	r0, r3
 800a348:	e731      	b.n	800a1ae <_printf_float+0xba>
 800a34a:	2301      	movs	r3, #1
 800a34c:	464a      	mov	r2, r9
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	f43f af28 	beq.w	800a1aa <_printf_float+0xb6>
 800a35a:	f108 0801 	add.w	r8, r8, #1
 800a35e:	e7e6      	b.n	800a32e <_printf_float+0x23a>
 800a360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a362:	2b00      	cmp	r3, #0
 800a364:	dc38      	bgt.n	800a3d8 <_printf_float+0x2e4>
 800a366:	2301      	movs	r3, #1
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	4a19      	ldr	r2, [pc, #100]	; (800a3d4 <_printf_float+0x2e0>)
 800a36e:	47b8      	blx	r7
 800a370:	3001      	adds	r0, #1
 800a372:	f43f af1a 	beq.w	800a1aa <_printf_float+0xb6>
 800a376:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a37a:	4313      	orrs	r3, r2
 800a37c:	d102      	bne.n	800a384 <_printf_float+0x290>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	07d9      	lsls	r1, r3, #31
 800a382:	d5d8      	bpl.n	800a336 <_printf_float+0x242>
 800a384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a388:	4631      	mov	r1, r6
 800a38a:	4628      	mov	r0, r5
 800a38c:	47b8      	blx	r7
 800a38e:	3001      	adds	r0, #1
 800a390:	f43f af0b 	beq.w	800a1aa <_printf_float+0xb6>
 800a394:	f04f 0900 	mov.w	r9, #0
 800a398:	f104 0a1a 	add.w	sl, r4, #26
 800a39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a39e:	425b      	negs	r3, r3
 800a3a0:	454b      	cmp	r3, r9
 800a3a2:	dc01      	bgt.n	800a3a8 <_printf_float+0x2b4>
 800a3a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a6:	e794      	b.n	800a2d2 <_printf_float+0x1de>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f aef9 	beq.w	800a1aa <_printf_float+0xb6>
 800a3b8:	f109 0901 	add.w	r9, r9, #1
 800a3bc:	e7ee      	b.n	800a39c <_printf_float+0x2a8>
 800a3be:	bf00      	nop
 800a3c0:	7fefffff 	.word	0x7fefffff
 800a3c4:	0800d35c 	.word	0x0800d35c
 800a3c8:	0800d360 	.word	0x0800d360
 800a3cc:	0800d368 	.word	0x0800d368
 800a3d0:	0800d364 	.word	0x0800d364
 800a3d4:	0800d36c 	.word	0x0800d36c
 800a3d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	bfa8      	it	ge
 800a3e0:	461a      	movge	r2, r3
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	4691      	mov	r9, r2
 800a3e6:	dc37      	bgt.n	800a458 <_printf_float+0x364>
 800a3e8:	f04f 0b00 	mov.w	fp, #0
 800a3ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3f0:	f104 021a 	add.w	r2, r4, #26
 800a3f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a3f8:	ebaa 0309 	sub.w	r3, sl, r9
 800a3fc:	455b      	cmp	r3, fp
 800a3fe:	dc33      	bgt.n	800a468 <_printf_float+0x374>
 800a400:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a404:	429a      	cmp	r2, r3
 800a406:	db3b      	blt.n	800a480 <_printf_float+0x38c>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	07da      	lsls	r2, r3, #31
 800a40c:	d438      	bmi.n	800a480 <_printf_float+0x38c>
 800a40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a410:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a412:	eba3 020a 	sub.w	r2, r3, sl
 800a416:	eba3 0901 	sub.w	r9, r3, r1
 800a41a:	4591      	cmp	r9, r2
 800a41c:	bfa8      	it	ge
 800a41e:	4691      	movge	r9, r2
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	dc34      	bgt.n	800a490 <_printf_float+0x39c>
 800a426:	f04f 0800 	mov.w	r8, #0
 800a42a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a42e:	f104 0a1a 	add.w	sl, r4, #26
 800a432:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a436:	1a9b      	subs	r3, r3, r2
 800a438:	eba3 0309 	sub.w	r3, r3, r9
 800a43c:	4543      	cmp	r3, r8
 800a43e:	f77f af7a 	ble.w	800a336 <_printf_float+0x242>
 800a442:	2301      	movs	r3, #1
 800a444:	4652      	mov	r2, sl
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	f43f aeac 	beq.w	800a1aa <_printf_float+0xb6>
 800a452:	f108 0801 	add.w	r8, r8, #1
 800a456:	e7ec      	b.n	800a432 <_printf_float+0x33e>
 800a458:	4613      	mov	r3, r2
 800a45a:	4631      	mov	r1, r6
 800a45c:	4642      	mov	r2, r8
 800a45e:	4628      	mov	r0, r5
 800a460:	47b8      	blx	r7
 800a462:	3001      	adds	r0, #1
 800a464:	d1c0      	bne.n	800a3e8 <_printf_float+0x2f4>
 800a466:	e6a0      	b.n	800a1aa <_printf_float+0xb6>
 800a468:	2301      	movs	r3, #1
 800a46a:	4631      	mov	r1, r6
 800a46c:	4628      	mov	r0, r5
 800a46e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a470:	47b8      	blx	r7
 800a472:	3001      	adds	r0, #1
 800a474:	f43f ae99 	beq.w	800a1aa <_printf_float+0xb6>
 800a478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a47a:	f10b 0b01 	add.w	fp, fp, #1
 800a47e:	e7b9      	b.n	800a3f4 <_printf_float+0x300>
 800a480:	4631      	mov	r1, r6
 800a482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a486:	4628      	mov	r0, r5
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	d1bf      	bne.n	800a40e <_printf_float+0x31a>
 800a48e:	e68c      	b.n	800a1aa <_printf_float+0xb6>
 800a490:	464b      	mov	r3, r9
 800a492:	4631      	mov	r1, r6
 800a494:	4628      	mov	r0, r5
 800a496:	eb08 020a 	add.w	r2, r8, sl
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	d1c2      	bne.n	800a426 <_printf_float+0x332>
 800a4a0:	e683      	b.n	800a1aa <_printf_float+0xb6>
 800a4a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4a4:	2a01      	cmp	r2, #1
 800a4a6:	dc01      	bgt.n	800a4ac <_printf_float+0x3b8>
 800a4a8:	07db      	lsls	r3, r3, #31
 800a4aa:	d537      	bpl.n	800a51c <_printf_float+0x428>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f ae77 	beq.w	800a1aa <_printf_float+0xb6>
 800a4bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b8      	blx	r7
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f43f ae6f 	beq.w	800a1aa <_printf_float+0xb6>
 800a4cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f7f6 fa72 	bl	80009bc <__aeabi_dcmpeq>
 800a4d8:	b9d8      	cbnz	r0, 800a512 <_printf_float+0x41e>
 800a4da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4dc:	f108 0201 	add.w	r2, r8, #1
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b8      	blx	r7
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d10e      	bne.n	800a50a <_printf_float+0x416>
 800a4ec:	e65d      	b.n	800a1aa <_printf_float+0xb6>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	464a      	mov	r2, r9
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	47b8      	blx	r7
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	f43f ae56 	beq.w	800a1aa <_printf_float+0xb6>
 800a4fe:	f108 0801 	add.w	r8, r8, #1
 800a502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a504:	3b01      	subs	r3, #1
 800a506:	4543      	cmp	r3, r8
 800a508:	dcf1      	bgt.n	800a4ee <_printf_float+0x3fa>
 800a50a:	4653      	mov	r3, sl
 800a50c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a510:	e6e0      	b.n	800a2d4 <_printf_float+0x1e0>
 800a512:	f04f 0800 	mov.w	r8, #0
 800a516:	f104 091a 	add.w	r9, r4, #26
 800a51a:	e7f2      	b.n	800a502 <_printf_float+0x40e>
 800a51c:	2301      	movs	r3, #1
 800a51e:	4642      	mov	r2, r8
 800a520:	e7df      	b.n	800a4e2 <_printf_float+0x3ee>
 800a522:	2301      	movs	r3, #1
 800a524:	464a      	mov	r2, r9
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	f43f ae3c 	beq.w	800a1aa <_printf_float+0xb6>
 800a532:	f108 0801 	add.w	r8, r8, #1
 800a536:	68e3      	ldr	r3, [r4, #12]
 800a538:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a53a:	1a5b      	subs	r3, r3, r1
 800a53c:	4543      	cmp	r3, r8
 800a53e:	dcf0      	bgt.n	800a522 <_printf_float+0x42e>
 800a540:	e6fd      	b.n	800a33e <_printf_float+0x24a>
 800a542:	f04f 0800 	mov.w	r8, #0
 800a546:	f104 0919 	add.w	r9, r4, #25
 800a54a:	e7f4      	b.n	800a536 <_printf_float+0x442>

0800a54c <_printf_common>:
 800a54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a550:	4616      	mov	r6, r2
 800a552:	4699      	mov	r9, r3
 800a554:	688a      	ldr	r2, [r1, #8]
 800a556:	690b      	ldr	r3, [r1, #16]
 800a558:	4607      	mov	r7, r0
 800a55a:	4293      	cmp	r3, r2
 800a55c:	bfb8      	it	lt
 800a55e:	4613      	movlt	r3, r2
 800a560:	6033      	str	r3, [r6, #0]
 800a562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a566:	460c      	mov	r4, r1
 800a568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a56c:	b10a      	cbz	r2, 800a572 <_printf_common+0x26>
 800a56e:	3301      	adds	r3, #1
 800a570:	6033      	str	r3, [r6, #0]
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	0699      	lsls	r1, r3, #26
 800a576:	bf42      	ittt	mi
 800a578:	6833      	ldrmi	r3, [r6, #0]
 800a57a:	3302      	addmi	r3, #2
 800a57c:	6033      	strmi	r3, [r6, #0]
 800a57e:	6825      	ldr	r5, [r4, #0]
 800a580:	f015 0506 	ands.w	r5, r5, #6
 800a584:	d106      	bne.n	800a594 <_printf_common+0x48>
 800a586:	f104 0a19 	add.w	sl, r4, #25
 800a58a:	68e3      	ldr	r3, [r4, #12]
 800a58c:	6832      	ldr	r2, [r6, #0]
 800a58e:	1a9b      	subs	r3, r3, r2
 800a590:	42ab      	cmp	r3, r5
 800a592:	dc28      	bgt.n	800a5e6 <_printf_common+0x9a>
 800a594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a598:	1e13      	subs	r3, r2, #0
 800a59a:	6822      	ldr	r2, [r4, #0]
 800a59c:	bf18      	it	ne
 800a59e:	2301      	movne	r3, #1
 800a5a0:	0692      	lsls	r2, r2, #26
 800a5a2:	d42d      	bmi.n	800a600 <_printf_common+0xb4>
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5ac:	47c0      	blx	r8
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d020      	beq.n	800a5f4 <_printf_common+0xa8>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	68e5      	ldr	r5, [r4, #12]
 800a5b6:	f003 0306 	and.w	r3, r3, #6
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	bf18      	it	ne
 800a5be:	2500      	movne	r5, #0
 800a5c0:	6832      	ldr	r2, [r6, #0]
 800a5c2:	f04f 0600 	mov.w	r6, #0
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	bf08      	it	eq
 800a5ca:	1aad      	subeq	r5, r5, r2
 800a5cc:	6922      	ldr	r2, [r4, #16]
 800a5ce:	bf08      	it	eq
 800a5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bfc4      	itt	gt
 800a5d8:	1a9b      	subgt	r3, r3, r2
 800a5da:	18ed      	addgt	r5, r5, r3
 800a5dc:	341a      	adds	r4, #26
 800a5de:	42b5      	cmp	r5, r6
 800a5e0:	d11a      	bne.n	800a618 <_printf_common+0xcc>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	e008      	b.n	800a5f8 <_printf_common+0xac>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4652      	mov	r2, sl
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	47c0      	blx	r8
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d103      	bne.n	800a5fc <_printf_common+0xb0>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	e7c4      	b.n	800a58a <_printf_common+0x3e>
 800a600:	2030      	movs	r0, #48	; 0x30
 800a602:	18e1      	adds	r1, r4, r3
 800a604:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a60e:	4422      	add	r2, r4
 800a610:	3302      	adds	r3, #2
 800a612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a616:	e7c5      	b.n	800a5a4 <_printf_common+0x58>
 800a618:	2301      	movs	r3, #1
 800a61a:	4622      	mov	r2, r4
 800a61c:	4649      	mov	r1, r9
 800a61e:	4638      	mov	r0, r7
 800a620:	47c0      	blx	r8
 800a622:	3001      	adds	r0, #1
 800a624:	d0e6      	beq.n	800a5f4 <_printf_common+0xa8>
 800a626:	3601      	adds	r6, #1
 800a628:	e7d9      	b.n	800a5de <_printf_common+0x92>
	...

0800a62c <_printf_i>:
 800a62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a630:	7e0f      	ldrb	r7, [r1, #24]
 800a632:	4691      	mov	r9, r2
 800a634:	2f78      	cmp	r7, #120	; 0x78
 800a636:	4680      	mov	r8, r0
 800a638:	460c      	mov	r4, r1
 800a63a:	469a      	mov	sl, r3
 800a63c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a63e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a642:	d807      	bhi.n	800a654 <_printf_i+0x28>
 800a644:	2f62      	cmp	r7, #98	; 0x62
 800a646:	d80a      	bhi.n	800a65e <_printf_i+0x32>
 800a648:	2f00      	cmp	r7, #0
 800a64a:	f000 80d9 	beq.w	800a800 <_printf_i+0x1d4>
 800a64e:	2f58      	cmp	r7, #88	; 0x58
 800a650:	f000 80a4 	beq.w	800a79c <_printf_i+0x170>
 800a654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a65c:	e03a      	b.n	800a6d4 <_printf_i+0xa8>
 800a65e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a662:	2b15      	cmp	r3, #21
 800a664:	d8f6      	bhi.n	800a654 <_printf_i+0x28>
 800a666:	a101      	add	r1, pc, #4	; (adr r1, 800a66c <_printf_i+0x40>)
 800a668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a66c:	0800a6c5 	.word	0x0800a6c5
 800a670:	0800a6d9 	.word	0x0800a6d9
 800a674:	0800a655 	.word	0x0800a655
 800a678:	0800a655 	.word	0x0800a655
 800a67c:	0800a655 	.word	0x0800a655
 800a680:	0800a655 	.word	0x0800a655
 800a684:	0800a6d9 	.word	0x0800a6d9
 800a688:	0800a655 	.word	0x0800a655
 800a68c:	0800a655 	.word	0x0800a655
 800a690:	0800a655 	.word	0x0800a655
 800a694:	0800a655 	.word	0x0800a655
 800a698:	0800a7e7 	.word	0x0800a7e7
 800a69c:	0800a709 	.word	0x0800a709
 800a6a0:	0800a7c9 	.word	0x0800a7c9
 800a6a4:	0800a655 	.word	0x0800a655
 800a6a8:	0800a655 	.word	0x0800a655
 800a6ac:	0800a809 	.word	0x0800a809
 800a6b0:	0800a655 	.word	0x0800a655
 800a6b4:	0800a709 	.word	0x0800a709
 800a6b8:	0800a655 	.word	0x0800a655
 800a6bc:	0800a655 	.word	0x0800a655
 800a6c0:	0800a7d1 	.word	0x0800a7d1
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	1d1a      	adds	r2, r3, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	602a      	str	r2, [r5, #0]
 800a6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e0a4      	b.n	800a822 <_printf_i+0x1f6>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	6829      	ldr	r1, [r5, #0]
 800a6dc:	0606      	lsls	r6, r0, #24
 800a6de:	f101 0304 	add.w	r3, r1, #4
 800a6e2:	d50a      	bpl.n	800a6fa <_printf_i+0xce>
 800a6e4:	680e      	ldr	r6, [r1, #0]
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	2e00      	cmp	r6, #0
 800a6ea:	da03      	bge.n	800a6f4 <_printf_i+0xc8>
 800a6ec:	232d      	movs	r3, #45	; 0x2d
 800a6ee:	4276      	negs	r6, r6
 800a6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f4:	230a      	movs	r3, #10
 800a6f6:	485e      	ldr	r0, [pc, #376]	; (800a870 <_printf_i+0x244>)
 800a6f8:	e019      	b.n	800a72e <_printf_i+0x102>
 800a6fa:	680e      	ldr	r6, [r1, #0]
 800a6fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	bf18      	it	ne
 800a704:	b236      	sxthne	r6, r6
 800a706:	e7ef      	b.n	800a6e8 <_printf_i+0xbc>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	6820      	ldr	r0, [r4, #0]
 800a70c:	1d19      	adds	r1, r3, #4
 800a70e:	6029      	str	r1, [r5, #0]
 800a710:	0601      	lsls	r1, r0, #24
 800a712:	d501      	bpl.n	800a718 <_printf_i+0xec>
 800a714:	681e      	ldr	r6, [r3, #0]
 800a716:	e002      	b.n	800a71e <_printf_i+0xf2>
 800a718:	0646      	lsls	r6, r0, #25
 800a71a:	d5fb      	bpl.n	800a714 <_printf_i+0xe8>
 800a71c:	881e      	ldrh	r6, [r3, #0]
 800a71e:	2f6f      	cmp	r7, #111	; 0x6f
 800a720:	bf0c      	ite	eq
 800a722:	2308      	moveq	r3, #8
 800a724:	230a      	movne	r3, #10
 800a726:	4852      	ldr	r0, [pc, #328]	; (800a870 <_printf_i+0x244>)
 800a728:	2100      	movs	r1, #0
 800a72a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a72e:	6865      	ldr	r5, [r4, #4]
 800a730:	2d00      	cmp	r5, #0
 800a732:	bfa8      	it	ge
 800a734:	6821      	ldrge	r1, [r4, #0]
 800a736:	60a5      	str	r5, [r4, #8]
 800a738:	bfa4      	itt	ge
 800a73a:	f021 0104 	bicge.w	r1, r1, #4
 800a73e:	6021      	strge	r1, [r4, #0]
 800a740:	b90e      	cbnz	r6, 800a746 <_printf_i+0x11a>
 800a742:	2d00      	cmp	r5, #0
 800a744:	d04d      	beq.n	800a7e2 <_printf_i+0x1b6>
 800a746:	4615      	mov	r5, r2
 800a748:	fbb6 f1f3 	udiv	r1, r6, r3
 800a74c:	fb03 6711 	mls	r7, r3, r1, r6
 800a750:	5dc7      	ldrb	r7, [r0, r7]
 800a752:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a756:	4637      	mov	r7, r6
 800a758:	42bb      	cmp	r3, r7
 800a75a:	460e      	mov	r6, r1
 800a75c:	d9f4      	bls.n	800a748 <_printf_i+0x11c>
 800a75e:	2b08      	cmp	r3, #8
 800a760:	d10b      	bne.n	800a77a <_printf_i+0x14e>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	07de      	lsls	r6, r3, #31
 800a766:	d508      	bpl.n	800a77a <_printf_i+0x14e>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	6861      	ldr	r1, [r4, #4]
 800a76c:	4299      	cmp	r1, r3
 800a76e:	bfde      	ittt	le
 800a770:	2330      	movle	r3, #48	; 0x30
 800a772:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a776:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a77a:	1b52      	subs	r2, r2, r5
 800a77c:	6122      	str	r2, [r4, #16]
 800a77e:	464b      	mov	r3, r9
 800a780:	4621      	mov	r1, r4
 800a782:	4640      	mov	r0, r8
 800a784:	f8cd a000 	str.w	sl, [sp]
 800a788:	aa03      	add	r2, sp, #12
 800a78a:	f7ff fedf 	bl	800a54c <_printf_common>
 800a78e:	3001      	adds	r0, #1
 800a790:	d14c      	bne.n	800a82c <_printf_i+0x200>
 800a792:	f04f 30ff 	mov.w	r0, #4294967295
 800a796:	b004      	add	sp, #16
 800a798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79c:	4834      	ldr	r0, [pc, #208]	; (800a870 <_printf_i+0x244>)
 800a79e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7a2:	6829      	ldr	r1, [r5, #0]
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7aa:	6029      	str	r1, [r5, #0]
 800a7ac:	061d      	lsls	r5, r3, #24
 800a7ae:	d514      	bpl.n	800a7da <_printf_i+0x1ae>
 800a7b0:	07df      	lsls	r7, r3, #31
 800a7b2:	bf44      	itt	mi
 800a7b4:	f043 0320 	orrmi.w	r3, r3, #32
 800a7b8:	6023      	strmi	r3, [r4, #0]
 800a7ba:	b91e      	cbnz	r6, 800a7c4 <_printf_i+0x198>
 800a7bc:	6823      	ldr	r3, [r4, #0]
 800a7be:	f023 0320 	bic.w	r3, r3, #32
 800a7c2:	6023      	str	r3, [r4, #0]
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	e7af      	b.n	800a728 <_printf_i+0xfc>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	f043 0320 	orr.w	r3, r3, #32
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	2378      	movs	r3, #120	; 0x78
 800a7d2:	4828      	ldr	r0, [pc, #160]	; (800a874 <_printf_i+0x248>)
 800a7d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7d8:	e7e3      	b.n	800a7a2 <_printf_i+0x176>
 800a7da:	0659      	lsls	r1, r3, #25
 800a7dc:	bf48      	it	mi
 800a7de:	b2b6      	uxthmi	r6, r6
 800a7e0:	e7e6      	b.n	800a7b0 <_printf_i+0x184>
 800a7e2:	4615      	mov	r5, r2
 800a7e4:	e7bb      	b.n	800a75e <_printf_i+0x132>
 800a7e6:	682b      	ldr	r3, [r5, #0]
 800a7e8:	6826      	ldr	r6, [r4, #0]
 800a7ea:	1d18      	adds	r0, r3, #4
 800a7ec:	6961      	ldr	r1, [r4, #20]
 800a7ee:	6028      	str	r0, [r5, #0]
 800a7f0:	0635      	lsls	r5, r6, #24
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	d501      	bpl.n	800a7fa <_printf_i+0x1ce>
 800a7f6:	6019      	str	r1, [r3, #0]
 800a7f8:	e002      	b.n	800a800 <_printf_i+0x1d4>
 800a7fa:	0670      	lsls	r0, r6, #25
 800a7fc:	d5fb      	bpl.n	800a7f6 <_printf_i+0x1ca>
 800a7fe:	8019      	strh	r1, [r3, #0]
 800a800:	2300      	movs	r3, #0
 800a802:	4615      	mov	r5, r2
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	e7ba      	b.n	800a77e <_printf_i+0x152>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	2100      	movs	r1, #0
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	602a      	str	r2, [r5, #0]
 800a810:	681d      	ldr	r5, [r3, #0]
 800a812:	6862      	ldr	r2, [r4, #4]
 800a814:	4628      	mov	r0, r5
 800a816:	f000 ff21 	bl	800b65c <memchr>
 800a81a:	b108      	cbz	r0, 800a820 <_printf_i+0x1f4>
 800a81c:	1b40      	subs	r0, r0, r5
 800a81e:	6060      	str	r0, [r4, #4]
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	2300      	movs	r3, #0
 800a826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82a:	e7a8      	b.n	800a77e <_printf_i+0x152>
 800a82c:	462a      	mov	r2, r5
 800a82e:	4649      	mov	r1, r9
 800a830:	4640      	mov	r0, r8
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	47d0      	blx	sl
 800a836:	3001      	adds	r0, #1
 800a838:	d0ab      	beq.n	800a792 <_printf_i+0x166>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	079b      	lsls	r3, r3, #30
 800a83e:	d413      	bmi.n	800a868 <_printf_i+0x23c>
 800a840:	68e0      	ldr	r0, [r4, #12]
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	4298      	cmp	r0, r3
 800a846:	bfb8      	it	lt
 800a848:	4618      	movlt	r0, r3
 800a84a:	e7a4      	b.n	800a796 <_printf_i+0x16a>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4632      	mov	r2, r6
 800a850:	4649      	mov	r1, r9
 800a852:	4640      	mov	r0, r8
 800a854:	47d0      	blx	sl
 800a856:	3001      	adds	r0, #1
 800a858:	d09b      	beq.n	800a792 <_printf_i+0x166>
 800a85a:	3501      	adds	r5, #1
 800a85c:	68e3      	ldr	r3, [r4, #12]
 800a85e:	9903      	ldr	r1, [sp, #12]
 800a860:	1a5b      	subs	r3, r3, r1
 800a862:	42ab      	cmp	r3, r5
 800a864:	dcf2      	bgt.n	800a84c <_printf_i+0x220>
 800a866:	e7eb      	b.n	800a840 <_printf_i+0x214>
 800a868:	2500      	movs	r5, #0
 800a86a:	f104 0619 	add.w	r6, r4, #25
 800a86e:	e7f5      	b.n	800a85c <_printf_i+0x230>
 800a870:	0800d36e 	.word	0x0800d36e
 800a874:	0800d37f 	.word	0x0800d37f

0800a878 <_sbrk_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	2300      	movs	r3, #0
 800a87c:	4d05      	ldr	r5, [pc, #20]	; (800a894 <_sbrk_r+0x1c>)
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f9 f91e 	bl	8003ac4 <_sbrk>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_sbrk_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_sbrk_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	20000898 	.word	0x20000898

0800a898 <_raise_r>:
 800a898:	291f      	cmp	r1, #31
 800a89a:	b538      	push	{r3, r4, r5, lr}
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
 800a8a0:	d904      	bls.n	800a8ac <_raise_r+0x14>
 800a8a2:	2316      	movs	r3, #22
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8ae:	b112      	cbz	r2, 800a8b6 <_raise_r+0x1e>
 800a8b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8b4:	b94b      	cbnz	r3, 800a8ca <_raise_r+0x32>
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f830 	bl	800a91c <_getpid_r>
 800a8bc:	462a      	mov	r2, r5
 800a8be:	4601      	mov	r1, r0
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8c6:	f000 b817 	b.w	800a8f8 <_kill_r>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d00a      	beq.n	800a8e4 <_raise_r+0x4c>
 800a8ce:	1c59      	adds	r1, r3, #1
 800a8d0:	d103      	bne.n	800a8da <_raise_r+0x42>
 800a8d2:	2316      	movs	r3, #22
 800a8d4:	6003      	str	r3, [r0, #0]
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	e7e7      	b.n	800a8aa <_raise_r+0x12>
 800a8da:	2400      	movs	r4, #0
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8e2:	4798      	blx	r3
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e7e0      	b.n	800a8aa <_raise_r+0x12>

0800a8e8 <raise>:
 800a8e8:	4b02      	ldr	r3, [pc, #8]	; (800a8f4 <raise+0xc>)
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	f7ff bfd3 	b.w	800a898 <_raise_r>
 800a8f2:	bf00      	nop
 800a8f4:	200000cc 	.word	0x200000cc

0800a8f8 <_kill_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4d06      	ldr	r5, [pc, #24]	; (800a918 <_kill_r+0x20>)
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	4611      	mov	r1, r2
 800a904:	602b      	str	r3, [r5, #0]
 800a906:	f7f9 f85a 	bl	80039be <_kill>
 800a90a:	1c43      	adds	r3, r0, #1
 800a90c:	d102      	bne.n	800a914 <_kill_r+0x1c>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	b103      	cbz	r3, 800a914 <_kill_r+0x1c>
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	20000898 	.word	0x20000898

0800a91c <_getpid_r>:
 800a91c:	f7f9 b848 	b.w	80039b0 <_getpid>

0800a920 <siprintf>:
 800a920:	b40e      	push	{r1, r2, r3}
 800a922:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a926:	b500      	push	{lr}
 800a928:	b09c      	sub	sp, #112	; 0x70
 800a92a:	ab1d      	add	r3, sp, #116	; 0x74
 800a92c:	9002      	str	r0, [sp, #8]
 800a92e:	9006      	str	r0, [sp, #24]
 800a930:	9107      	str	r1, [sp, #28]
 800a932:	9104      	str	r1, [sp, #16]
 800a934:	4808      	ldr	r0, [pc, #32]	; (800a958 <siprintf+0x38>)
 800a936:	4909      	ldr	r1, [pc, #36]	; (800a95c <siprintf+0x3c>)
 800a938:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93c:	9105      	str	r1, [sp, #20]
 800a93e:	6800      	ldr	r0, [r0, #0]
 800a940:	a902      	add	r1, sp, #8
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	f001 fa96 	bl	800be74 <_svfiprintf_r>
 800a948:	2200      	movs	r2, #0
 800a94a:	9b02      	ldr	r3, [sp, #8]
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	b01c      	add	sp, #112	; 0x70
 800a950:	f85d eb04 	ldr.w	lr, [sp], #4
 800a954:	b003      	add	sp, #12
 800a956:	4770      	bx	lr
 800a958:	200000cc 	.word	0x200000cc
 800a95c:	ffff0208 	.word	0xffff0208

0800a960 <quorem>:
 800a960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	6903      	ldr	r3, [r0, #16]
 800a966:	690c      	ldr	r4, [r1, #16]
 800a968:	4607      	mov	r7, r0
 800a96a:	42a3      	cmp	r3, r4
 800a96c:	f2c0 8082 	blt.w	800aa74 <quorem+0x114>
 800a970:	3c01      	subs	r4, #1
 800a972:	f100 0514 	add.w	r5, r0, #20
 800a976:	f101 0814 	add.w	r8, r1, #20
 800a97a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a984:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a988:	3301      	adds	r3, #1
 800a98a:	429a      	cmp	r2, r3
 800a98c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a998:	d331      	bcc.n	800a9fe <quorem+0x9e>
 800a99a:	f04f 0e00 	mov.w	lr, #0
 800a99e:	4640      	mov	r0, r8
 800a9a0:	46ac      	mov	ip, r5
 800a9a2:	46f2      	mov	sl, lr
 800a9a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9a8:	b293      	uxth	r3, r2
 800a9aa:	fb06 e303 	mla	r3, r6, r3, lr
 800a9ae:	0c12      	lsrs	r2, r2, #16
 800a9b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	fb06 e202 	mla	r2, r6, r2, lr
 800a9ba:	ebaa 0303 	sub.w	r3, sl, r3
 800a9be:	f8dc a000 	ldr.w	sl, [ip]
 800a9c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9c6:	fa1f fa8a 	uxth.w	sl, sl
 800a9ca:	4453      	add	r3, sl
 800a9cc:	f8dc a000 	ldr.w	sl, [ip]
 800a9d0:	b292      	uxth	r2, r2
 800a9d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a9d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9e0:	4581      	cmp	r9, r0
 800a9e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a9e6:	f84c 3b04 	str.w	r3, [ip], #4
 800a9ea:	d2db      	bcs.n	800a9a4 <quorem+0x44>
 800a9ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800a9f0:	b92b      	cbnz	r3, 800a9fe <quorem+0x9e>
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	429d      	cmp	r5, r3
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	d32f      	bcc.n	800aa5c <quorem+0xfc>
 800a9fc:	613c      	str	r4, [r7, #16]
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f001 f8c4 	bl	800bb8c <__mcmp>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	db25      	blt.n	800aa54 <quorem+0xf4>
 800aa08:	4628      	mov	r0, r5
 800aa0a:	f04f 0c00 	mov.w	ip, #0
 800aa0e:	3601      	adds	r6, #1
 800aa10:	f858 1b04 	ldr.w	r1, [r8], #4
 800aa14:	f8d0 e000 	ldr.w	lr, [r0]
 800aa18:	b28b      	uxth	r3, r1
 800aa1a:	ebac 0303 	sub.w	r3, ip, r3
 800aa1e:	fa1f f28e 	uxth.w	r2, lr
 800aa22:	4413      	add	r3, r2
 800aa24:	0c0a      	lsrs	r2, r1, #16
 800aa26:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa34:	45c1      	cmp	r9, r8
 800aa36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa3a:	f840 3b04 	str.w	r3, [r0], #4
 800aa3e:	d2e7      	bcs.n	800aa10 <quorem+0xb0>
 800aa40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa48:	b922      	cbnz	r2, 800aa54 <quorem+0xf4>
 800aa4a:	3b04      	subs	r3, #4
 800aa4c:	429d      	cmp	r5, r3
 800aa4e:	461a      	mov	r2, r3
 800aa50:	d30a      	bcc.n	800aa68 <quorem+0x108>
 800aa52:	613c      	str	r4, [r7, #16]
 800aa54:	4630      	mov	r0, r6
 800aa56:	b003      	add	sp, #12
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	6812      	ldr	r2, [r2, #0]
 800aa5e:	3b04      	subs	r3, #4
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d1cb      	bne.n	800a9fc <quorem+0x9c>
 800aa64:	3c01      	subs	r4, #1
 800aa66:	e7c6      	b.n	800a9f6 <quorem+0x96>
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	3b04      	subs	r3, #4
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	d1f0      	bne.n	800aa52 <quorem+0xf2>
 800aa70:	3c01      	subs	r4, #1
 800aa72:	e7eb      	b.n	800aa4c <quorem+0xec>
 800aa74:	2000      	movs	r0, #0
 800aa76:	e7ee      	b.n	800aa56 <quorem+0xf6>

0800aa78 <_dtoa_r>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4616      	mov	r6, r2
 800aa7e:	461f      	mov	r7, r3
 800aa80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa82:	b099      	sub	sp, #100	; 0x64
 800aa84:	4605      	mov	r5, r0
 800aa86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aa8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800aa8e:	b974      	cbnz	r4, 800aaae <_dtoa_r+0x36>
 800aa90:	2010      	movs	r0, #16
 800aa92:	f7ff f997 	bl	8009dc4 <malloc>
 800aa96:	4602      	mov	r2, r0
 800aa98:	6268      	str	r0, [r5, #36]	; 0x24
 800aa9a:	b920      	cbnz	r0, 800aaa6 <_dtoa_r+0x2e>
 800aa9c:	21ea      	movs	r1, #234	; 0xea
 800aa9e:	4ba8      	ldr	r3, [pc, #672]	; (800ad40 <_dtoa_r+0x2c8>)
 800aaa0:	48a8      	ldr	r0, [pc, #672]	; (800ad44 <_dtoa_r+0x2cc>)
 800aaa2:	f001 fae7 	bl	800c074 <__assert_func>
 800aaa6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aaaa:	6004      	str	r4, [r0, #0]
 800aaac:	60c4      	str	r4, [r0, #12]
 800aaae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aab0:	6819      	ldr	r1, [r3, #0]
 800aab2:	b151      	cbz	r1, 800aaca <_dtoa_r+0x52>
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	2301      	movs	r3, #1
 800aab8:	4093      	lsls	r3, r2
 800aaba:	604a      	str	r2, [r1, #4]
 800aabc:	608b      	str	r3, [r1, #8]
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 fe26 	bl	800b710 <_Bfree>
 800aac4:	2200      	movs	r2, #0
 800aac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	1e3b      	subs	r3, r7, #0
 800aacc:	bfaf      	iteee	ge
 800aace:	2300      	movge	r3, #0
 800aad0:	2201      	movlt	r2, #1
 800aad2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aad6:	9305      	strlt	r3, [sp, #20]
 800aad8:	bfa8      	it	ge
 800aada:	f8c8 3000 	strge.w	r3, [r8]
 800aade:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aae2:	4b99      	ldr	r3, [pc, #612]	; (800ad48 <_dtoa_r+0x2d0>)
 800aae4:	bfb8      	it	lt
 800aae6:	f8c8 2000 	strlt.w	r2, [r8]
 800aaea:	ea33 0309 	bics.w	r3, r3, r9
 800aaee:	d119      	bne.n	800ab24 <_dtoa_r+0xac>
 800aaf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800aaf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aafc:	4333      	orrs	r3, r6
 800aafe:	f000 857f 	beq.w	800b600 <_dtoa_r+0xb88>
 800ab02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab04:	b953      	cbnz	r3, 800ab1c <_dtoa_r+0xa4>
 800ab06:	4b91      	ldr	r3, [pc, #580]	; (800ad4c <_dtoa_r+0x2d4>)
 800ab08:	e022      	b.n	800ab50 <_dtoa_r+0xd8>
 800ab0a:	4b91      	ldr	r3, [pc, #580]	; (800ad50 <_dtoa_r+0x2d8>)
 800ab0c:	9303      	str	r3, [sp, #12]
 800ab0e:	3308      	adds	r3, #8
 800ab10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	9803      	ldr	r0, [sp, #12]
 800ab16:	b019      	add	sp, #100	; 0x64
 800ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1c:	4b8b      	ldr	r3, [pc, #556]	; (800ad4c <_dtoa_r+0x2d4>)
 800ab1e:	9303      	str	r3, [sp, #12]
 800ab20:	3303      	adds	r3, #3
 800ab22:	e7f5      	b.n	800ab10 <_dtoa_r+0x98>
 800ab24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ab28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ab2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab30:	2200      	movs	r2, #0
 800ab32:	2300      	movs	r3, #0
 800ab34:	f7f5 ff42 	bl	80009bc <__aeabi_dcmpeq>
 800ab38:	4680      	mov	r8, r0
 800ab3a:	b158      	cbz	r0, 800ab54 <_dtoa_r+0xdc>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 8558 	beq.w	800b5fa <_dtoa_r+0xb82>
 800ab4a:	4882      	ldr	r0, [pc, #520]	; (800ad54 <_dtoa_r+0x2dc>)
 800ab4c:	6018      	str	r0, [r3, #0]
 800ab4e:	1e43      	subs	r3, r0, #1
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	e7df      	b.n	800ab14 <_dtoa_r+0x9c>
 800ab54:	ab16      	add	r3, sp, #88	; 0x58
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	ab17      	add	r3, sp, #92	; 0x5c
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ab62:	f001 f8bb 	bl	800bcdc <__d2b>
 800ab66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ab6a:	4683      	mov	fp, r0
 800ab6c:	2c00      	cmp	r4, #0
 800ab6e:	d07f      	beq.n	800ac70 <_dtoa_r+0x1f8>
 800ab70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ab7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ab82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ab86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4b72      	ldr	r3, [pc, #456]	; (800ad58 <_dtoa_r+0x2e0>)
 800ab8e:	f7f5 faf5 	bl	800017c <__aeabi_dsub>
 800ab92:	a365      	add	r3, pc, #404	; (adr r3, 800ad28 <_dtoa_r+0x2b0>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fca8 	bl	80004ec <__aeabi_dmul>
 800ab9c:	a364      	add	r3, pc, #400	; (adr r3, 800ad30 <_dtoa_r+0x2b8>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 faed 	bl	8000180 <__adddf3>
 800aba6:	4606      	mov	r6, r0
 800aba8:	4620      	mov	r0, r4
 800abaa:	460f      	mov	r7, r1
 800abac:	f7f5 fc34 	bl	8000418 <__aeabi_i2d>
 800abb0:	a361      	add	r3, pc, #388	; (adr r3, 800ad38 <_dtoa_r+0x2c0>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fc99 	bl	80004ec <__aeabi_dmul>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 fadd 	bl	8000180 <__adddf3>
 800abc6:	4606      	mov	r6, r0
 800abc8:	460f      	mov	r7, r1
 800abca:	f7f5 ff3f 	bl	8000a4c <__aeabi_d2iz>
 800abce:	2200      	movs	r2, #0
 800abd0:	4682      	mov	sl, r0
 800abd2:	2300      	movs	r3, #0
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	f7f5 fefa 	bl	80009d0 <__aeabi_dcmplt>
 800abdc:	b148      	cbz	r0, 800abf2 <_dtoa_r+0x17a>
 800abde:	4650      	mov	r0, sl
 800abe0:	f7f5 fc1a 	bl	8000418 <__aeabi_i2d>
 800abe4:	4632      	mov	r2, r6
 800abe6:	463b      	mov	r3, r7
 800abe8:	f7f5 fee8 	bl	80009bc <__aeabi_dcmpeq>
 800abec:	b908      	cbnz	r0, 800abf2 <_dtoa_r+0x17a>
 800abee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abf2:	f1ba 0f16 	cmp.w	sl, #22
 800abf6:	d858      	bhi.n	800acaa <_dtoa_r+0x232>
 800abf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abfc:	4b57      	ldr	r3, [pc, #348]	; (800ad5c <_dtoa_r+0x2e4>)
 800abfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 fee3 	bl	80009d0 <__aeabi_dcmplt>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d04f      	beq.n	800acae <_dtoa_r+0x236>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac14:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac18:	1b1c      	subs	r4, r3, r4
 800ac1a:	1e63      	subs	r3, r4, #1
 800ac1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1e:	bf49      	itett	mi
 800ac20:	f1c4 0301 	rsbmi	r3, r4, #1
 800ac24:	2300      	movpl	r3, #0
 800ac26:	9306      	strmi	r3, [sp, #24]
 800ac28:	2300      	movmi	r3, #0
 800ac2a:	bf54      	ite	pl
 800ac2c:	9306      	strpl	r3, [sp, #24]
 800ac2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ac30:	f1ba 0f00 	cmp.w	sl, #0
 800ac34:	db3d      	blt.n	800acb2 <_dtoa_r+0x23a>
 800ac36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ac3c:	4453      	add	r3, sl
 800ac3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac40:	2300      	movs	r3, #0
 800ac42:	930a      	str	r3, [sp, #40]	; 0x28
 800ac44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac46:	2b09      	cmp	r3, #9
 800ac48:	f200 808c 	bhi.w	800ad64 <_dtoa_r+0x2ec>
 800ac4c:	2b05      	cmp	r3, #5
 800ac4e:	bfc4      	itt	gt
 800ac50:	3b04      	subgt	r3, #4
 800ac52:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ac54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac56:	bfc8      	it	gt
 800ac58:	2400      	movgt	r4, #0
 800ac5a:	f1a3 0302 	sub.w	r3, r3, #2
 800ac5e:	bfd8      	it	le
 800ac60:	2401      	movle	r4, #1
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	f200 808a 	bhi.w	800ad7c <_dtoa_r+0x304>
 800ac68:	e8df f003 	tbb	[pc, r3]
 800ac6c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ac70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ac74:	441c      	add	r4, r3
 800ac76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ac7a:	2b20      	cmp	r3, #32
 800ac7c:	bfc3      	ittte	gt
 800ac7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ac86:	fa09 f303 	lslgt.w	r3, r9, r3
 800ac8a:	f1c3 0320 	rsble	r3, r3, #32
 800ac8e:	bfc6      	itte	gt
 800ac90:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac94:	4318      	orrgt	r0, r3
 800ac96:	fa06 f003 	lslle.w	r0, r6, r3
 800ac9a:	f7f5 fbad 	bl	80003f8 <__aeabi_ui2d>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aca4:	3c01      	subs	r4, #1
 800aca6:	9313      	str	r3, [sp, #76]	; 0x4c
 800aca8:	e76f      	b.n	800ab8a <_dtoa_r+0x112>
 800acaa:	2301      	movs	r3, #1
 800acac:	e7b2      	b.n	800ac14 <_dtoa_r+0x19c>
 800acae:	900f      	str	r0, [sp, #60]	; 0x3c
 800acb0:	e7b1      	b.n	800ac16 <_dtoa_r+0x19e>
 800acb2:	9b06      	ldr	r3, [sp, #24]
 800acb4:	eba3 030a 	sub.w	r3, r3, sl
 800acb8:	9306      	str	r3, [sp, #24]
 800acba:	f1ca 0300 	rsb	r3, sl, #0
 800acbe:	930a      	str	r3, [sp, #40]	; 0x28
 800acc0:	2300      	movs	r3, #0
 800acc2:	930e      	str	r3, [sp, #56]	; 0x38
 800acc4:	e7be      	b.n	800ac44 <_dtoa_r+0x1cc>
 800acc6:	2300      	movs	r3, #0
 800acc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800accc:	2b00      	cmp	r3, #0
 800acce:	dc58      	bgt.n	800ad82 <_dtoa_r+0x30a>
 800acd0:	f04f 0901 	mov.w	r9, #1
 800acd4:	464b      	mov	r3, r9
 800acd6:	f8cd 9020 	str.w	r9, [sp, #32]
 800acda:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800acde:	2200      	movs	r2, #0
 800ace0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ace2:	6042      	str	r2, [r0, #4]
 800ace4:	2204      	movs	r2, #4
 800ace6:	f102 0614 	add.w	r6, r2, #20
 800acea:	429e      	cmp	r6, r3
 800acec:	6841      	ldr	r1, [r0, #4]
 800acee:	d94e      	bls.n	800ad8e <_dtoa_r+0x316>
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 fccd 	bl	800b690 <_Balloc>
 800acf6:	9003      	str	r0, [sp, #12]
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d14c      	bne.n	800ad96 <_dtoa_r+0x31e>
 800acfc:	4602      	mov	r2, r0
 800acfe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ad02:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <_dtoa_r+0x2e8>)
 800ad04:	e6cc      	b.n	800aaa0 <_dtoa_r+0x28>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e7de      	b.n	800acc8 <_dtoa_r+0x250>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad10:	eb0a 0903 	add.w	r9, sl, r3
 800ad14:	f109 0301 	add.w	r3, r9, #1
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	9308      	str	r3, [sp, #32]
 800ad1c:	bfb8      	it	lt
 800ad1e:	2301      	movlt	r3, #1
 800ad20:	e7dd      	b.n	800acde <_dtoa_r+0x266>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e7f2      	b.n	800ad0c <_dtoa_r+0x294>
 800ad26:	bf00      	nop
 800ad28:	636f4361 	.word	0x636f4361
 800ad2c:	3fd287a7 	.word	0x3fd287a7
 800ad30:	8b60c8b3 	.word	0x8b60c8b3
 800ad34:	3fc68a28 	.word	0x3fc68a28
 800ad38:	509f79fb 	.word	0x509f79fb
 800ad3c:	3fd34413 	.word	0x3fd34413
 800ad40:	0800d39d 	.word	0x0800d39d
 800ad44:	0800d3b4 	.word	0x0800d3b4
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	0800d399 	.word	0x0800d399
 800ad50:	0800d390 	.word	0x0800d390
 800ad54:	0800d36d 	.word	0x0800d36d
 800ad58:	3ff80000 	.word	0x3ff80000
 800ad5c:	0800d4a8 	.word	0x0800d4a8
 800ad60:	0800d40f 	.word	0x0800d40f
 800ad64:	2401      	movs	r4, #1
 800ad66:	2300      	movs	r3, #0
 800ad68:	940b      	str	r4, [sp, #44]	; 0x2c
 800ad6a:	9322      	str	r3, [sp, #136]	; 0x88
 800ad6c:	f04f 39ff 	mov.w	r9, #4294967295
 800ad70:	2200      	movs	r2, #0
 800ad72:	2312      	movs	r3, #18
 800ad74:	f8cd 9020 	str.w	r9, [sp, #32]
 800ad78:	9223      	str	r2, [sp, #140]	; 0x8c
 800ad7a:	e7b0      	b.n	800acde <_dtoa_r+0x266>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad80:	e7f4      	b.n	800ad6c <_dtoa_r+0x2f4>
 800ad82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ad86:	464b      	mov	r3, r9
 800ad88:	f8cd 9020 	str.w	r9, [sp, #32]
 800ad8c:	e7a7      	b.n	800acde <_dtoa_r+0x266>
 800ad8e:	3101      	adds	r1, #1
 800ad90:	6041      	str	r1, [r0, #4]
 800ad92:	0052      	lsls	r2, r2, #1
 800ad94:	e7a7      	b.n	800ace6 <_dtoa_r+0x26e>
 800ad96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad98:	9a03      	ldr	r2, [sp, #12]
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	9b08      	ldr	r3, [sp, #32]
 800ad9e:	2b0e      	cmp	r3, #14
 800ada0:	f200 80a8 	bhi.w	800aef4 <_dtoa_r+0x47c>
 800ada4:	2c00      	cmp	r4, #0
 800ada6:	f000 80a5 	beq.w	800aef4 <_dtoa_r+0x47c>
 800adaa:	f1ba 0f00 	cmp.w	sl, #0
 800adae:	dd34      	ble.n	800ae1a <_dtoa_r+0x3a2>
 800adb0:	4a9a      	ldr	r2, [pc, #616]	; (800b01c <_dtoa_r+0x5a4>)
 800adb2:	f00a 030f 	and.w	r3, sl, #15
 800adb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800adba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800adbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800adc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800adca:	d016      	beq.n	800adfa <_dtoa_r+0x382>
 800adcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800add0:	4b93      	ldr	r3, [pc, #588]	; (800b020 <_dtoa_r+0x5a8>)
 800add2:	2703      	movs	r7, #3
 800add4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800add8:	f7f5 fcb2 	bl	8000740 <__aeabi_ddiv>
 800addc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ade0:	f004 040f 	and.w	r4, r4, #15
 800ade4:	4e8e      	ldr	r6, [pc, #568]	; (800b020 <_dtoa_r+0x5a8>)
 800ade6:	b954      	cbnz	r4, 800adfe <_dtoa_r+0x386>
 800ade8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adf0:	f7f5 fca6 	bl	8000740 <__aeabi_ddiv>
 800adf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adf8:	e029      	b.n	800ae4e <_dtoa_r+0x3d6>
 800adfa:	2702      	movs	r7, #2
 800adfc:	e7f2      	b.n	800ade4 <_dtoa_r+0x36c>
 800adfe:	07e1      	lsls	r1, r4, #31
 800ae00:	d508      	bpl.n	800ae14 <_dtoa_r+0x39c>
 800ae02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae06:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae0a:	f7f5 fb6f 	bl	80004ec <__aeabi_dmul>
 800ae0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae12:	3701      	adds	r7, #1
 800ae14:	1064      	asrs	r4, r4, #1
 800ae16:	3608      	adds	r6, #8
 800ae18:	e7e5      	b.n	800ade6 <_dtoa_r+0x36e>
 800ae1a:	f000 80a5 	beq.w	800af68 <_dtoa_r+0x4f0>
 800ae1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae22:	f1ca 0400 	rsb	r4, sl, #0
 800ae26:	4b7d      	ldr	r3, [pc, #500]	; (800b01c <_dtoa_r+0x5a4>)
 800ae28:	f004 020f 	and.w	r2, r4, #15
 800ae2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f7f5 fb5a 	bl	80004ec <__aeabi_dmul>
 800ae38:	2702      	movs	r7, #2
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae40:	4e77      	ldr	r6, [pc, #476]	; (800b020 <_dtoa_r+0x5a8>)
 800ae42:	1124      	asrs	r4, r4, #4
 800ae44:	2c00      	cmp	r4, #0
 800ae46:	f040 8084 	bne.w	800af52 <_dtoa_r+0x4da>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1d2      	bne.n	800adf4 <_dtoa_r+0x37c>
 800ae4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 808b 	beq.w	800af6c <_dtoa_r+0x4f4>
 800ae56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ae5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ae5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae62:	2200      	movs	r2, #0
 800ae64:	4b6f      	ldr	r3, [pc, #444]	; (800b024 <_dtoa_r+0x5ac>)
 800ae66:	f7f5 fdb3 	bl	80009d0 <__aeabi_dcmplt>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d07e      	beq.n	800af6c <_dtoa_r+0x4f4>
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d07b      	beq.n	800af6c <_dtoa_r+0x4f4>
 800ae74:	f1b9 0f00 	cmp.w	r9, #0
 800ae78:	dd38      	ble.n	800aeec <_dtoa_r+0x474>
 800ae7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae7e:	2200      	movs	r2, #0
 800ae80:	4b69      	ldr	r3, [pc, #420]	; (800b028 <_dtoa_r+0x5b0>)
 800ae82:	f7f5 fb33 	bl	80004ec <__aeabi_dmul>
 800ae86:	464c      	mov	r4, r9
 800ae88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae8c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ae90:	3701      	adds	r7, #1
 800ae92:	4638      	mov	r0, r7
 800ae94:	f7f5 fac0 	bl	8000418 <__aeabi_i2d>
 800ae98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae9c:	f7f5 fb26 	bl	80004ec <__aeabi_dmul>
 800aea0:	2200      	movs	r2, #0
 800aea2:	4b62      	ldr	r3, [pc, #392]	; (800b02c <_dtoa_r+0x5b4>)
 800aea4:	f7f5 f96c 	bl	8000180 <__adddf3>
 800aea8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aeac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aeb0:	9611      	str	r6, [sp, #68]	; 0x44
 800aeb2:	2c00      	cmp	r4, #0
 800aeb4:	d15d      	bne.n	800af72 <_dtoa_r+0x4fa>
 800aeb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeba:	2200      	movs	r2, #0
 800aebc:	4b5c      	ldr	r3, [pc, #368]	; (800b030 <_dtoa_r+0x5b8>)
 800aebe:	f7f5 f95d 	bl	800017c <__aeabi_dsub>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aeca:	4633      	mov	r3, r6
 800aecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aece:	f7f5 fd9d 	bl	8000a0c <__aeabi_dcmpgt>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f040 829c 	bne.w	800b410 <_dtoa_r+0x998>
 800aed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aedc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aede:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aee2:	f7f5 fd75 	bl	80009d0 <__aeabi_dcmplt>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f040 8290 	bne.w	800b40c <_dtoa_r+0x994>
 800aeec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aef0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f2c0 8152 	blt.w	800b1a0 <_dtoa_r+0x728>
 800aefc:	f1ba 0f0e 	cmp.w	sl, #14
 800af00:	f300 814e 	bgt.w	800b1a0 <_dtoa_r+0x728>
 800af04:	4b45      	ldr	r3, [pc, #276]	; (800b01c <_dtoa_r+0x5a4>)
 800af06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800af0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800af12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af14:	2b00      	cmp	r3, #0
 800af16:	f280 80db 	bge.w	800b0d0 <_dtoa_r+0x658>
 800af1a:	9b08      	ldr	r3, [sp, #32]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f300 80d7 	bgt.w	800b0d0 <_dtoa_r+0x658>
 800af22:	f040 8272 	bne.w	800b40a <_dtoa_r+0x992>
 800af26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af2a:	2200      	movs	r2, #0
 800af2c:	4b40      	ldr	r3, [pc, #256]	; (800b030 <_dtoa_r+0x5b8>)
 800af2e:	f7f5 fadd 	bl	80004ec <__aeabi_dmul>
 800af32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af36:	f7f5 fd5f 	bl	80009f8 <__aeabi_dcmpge>
 800af3a:	9c08      	ldr	r4, [sp, #32]
 800af3c:	4626      	mov	r6, r4
 800af3e:	2800      	cmp	r0, #0
 800af40:	f040 8248 	bne.w	800b3d4 <_dtoa_r+0x95c>
 800af44:	2331      	movs	r3, #49	; 0x31
 800af46:	9f03      	ldr	r7, [sp, #12]
 800af48:	f10a 0a01 	add.w	sl, sl, #1
 800af4c:	f807 3b01 	strb.w	r3, [r7], #1
 800af50:	e244      	b.n	800b3dc <_dtoa_r+0x964>
 800af52:	07e2      	lsls	r2, r4, #31
 800af54:	d505      	bpl.n	800af62 <_dtoa_r+0x4ea>
 800af56:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af5a:	f7f5 fac7 	bl	80004ec <__aeabi_dmul>
 800af5e:	2301      	movs	r3, #1
 800af60:	3701      	adds	r7, #1
 800af62:	1064      	asrs	r4, r4, #1
 800af64:	3608      	adds	r6, #8
 800af66:	e76d      	b.n	800ae44 <_dtoa_r+0x3cc>
 800af68:	2702      	movs	r7, #2
 800af6a:	e770      	b.n	800ae4e <_dtoa_r+0x3d6>
 800af6c:	46d0      	mov	r8, sl
 800af6e:	9c08      	ldr	r4, [sp, #32]
 800af70:	e78f      	b.n	800ae92 <_dtoa_r+0x41a>
 800af72:	9903      	ldr	r1, [sp, #12]
 800af74:	4b29      	ldr	r3, [pc, #164]	; (800b01c <_dtoa_r+0x5a4>)
 800af76:	4421      	add	r1, r4
 800af78:	9112      	str	r1, [sp, #72]	; 0x48
 800af7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800af84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af88:	2900      	cmp	r1, #0
 800af8a:	d055      	beq.n	800b038 <_dtoa_r+0x5c0>
 800af8c:	2000      	movs	r0, #0
 800af8e:	4929      	ldr	r1, [pc, #164]	; (800b034 <_dtoa_r+0x5bc>)
 800af90:	f7f5 fbd6 	bl	8000740 <__aeabi_ddiv>
 800af94:	463b      	mov	r3, r7
 800af96:	4632      	mov	r2, r6
 800af98:	f7f5 f8f0 	bl	800017c <__aeabi_dsub>
 800af9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afa0:	9f03      	ldr	r7, [sp, #12]
 800afa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afa6:	f7f5 fd51 	bl	8000a4c <__aeabi_d2iz>
 800afaa:	4604      	mov	r4, r0
 800afac:	f7f5 fa34 	bl	8000418 <__aeabi_i2d>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afb8:	f7f5 f8e0 	bl	800017c <__aeabi_dsub>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	3430      	adds	r4, #48	; 0x30
 800afc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afca:	f807 4b01 	strb.w	r4, [r7], #1
 800afce:	f7f5 fcff 	bl	80009d0 <__aeabi_dcmplt>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d174      	bne.n	800b0c0 <_dtoa_r+0x648>
 800afd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afda:	2000      	movs	r0, #0
 800afdc:	4911      	ldr	r1, [pc, #68]	; (800b024 <_dtoa_r+0x5ac>)
 800afde:	f7f5 f8cd 	bl	800017c <__aeabi_dsub>
 800afe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afe6:	f7f5 fcf3 	bl	80009d0 <__aeabi_dcmplt>
 800afea:	2800      	cmp	r0, #0
 800afec:	f040 80b7 	bne.w	800b15e <_dtoa_r+0x6e6>
 800aff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aff2:	429f      	cmp	r7, r3
 800aff4:	f43f af7a 	beq.w	800aeec <_dtoa_r+0x474>
 800aff8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800affc:	2200      	movs	r2, #0
 800affe:	4b0a      	ldr	r3, [pc, #40]	; (800b028 <_dtoa_r+0x5b0>)
 800b000:	f7f5 fa74 	bl	80004ec <__aeabi_dmul>
 800b004:	2200      	movs	r2, #0
 800b006:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b00a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b00e:	4b06      	ldr	r3, [pc, #24]	; (800b028 <_dtoa_r+0x5b0>)
 800b010:	f7f5 fa6c 	bl	80004ec <__aeabi_dmul>
 800b014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b018:	e7c3      	b.n	800afa2 <_dtoa_r+0x52a>
 800b01a:	bf00      	nop
 800b01c:	0800d4a8 	.word	0x0800d4a8
 800b020:	0800d480 	.word	0x0800d480
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	40240000 	.word	0x40240000
 800b02c:	401c0000 	.word	0x401c0000
 800b030:	40140000 	.word	0x40140000
 800b034:	3fe00000 	.word	0x3fe00000
 800b038:	4630      	mov	r0, r6
 800b03a:	4639      	mov	r1, r7
 800b03c:	f7f5 fa56 	bl	80004ec <__aeabi_dmul>
 800b040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b042:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b046:	9c03      	ldr	r4, [sp, #12]
 800b048:	9314      	str	r3, [sp, #80]	; 0x50
 800b04a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b04e:	f7f5 fcfd 	bl	8000a4c <__aeabi_d2iz>
 800b052:	9015      	str	r0, [sp, #84]	; 0x54
 800b054:	f7f5 f9e0 	bl	8000418 <__aeabi_i2d>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b060:	f7f5 f88c 	bl	800017c <__aeabi_dsub>
 800b064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b066:	4606      	mov	r6, r0
 800b068:	3330      	adds	r3, #48	; 0x30
 800b06a:	f804 3b01 	strb.w	r3, [r4], #1
 800b06e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b070:	460f      	mov	r7, r1
 800b072:	429c      	cmp	r4, r3
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	d124      	bne.n	800b0c4 <_dtoa_r+0x64c>
 800b07a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b07e:	4bb0      	ldr	r3, [pc, #704]	; (800b340 <_dtoa_r+0x8c8>)
 800b080:	f7f5 f87e 	bl	8000180 <__adddf3>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4630      	mov	r0, r6
 800b08a:	4639      	mov	r1, r7
 800b08c:	f7f5 fcbe 	bl	8000a0c <__aeabi_dcmpgt>
 800b090:	2800      	cmp	r0, #0
 800b092:	d163      	bne.n	800b15c <_dtoa_r+0x6e4>
 800b094:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b098:	2000      	movs	r0, #0
 800b09a:	49a9      	ldr	r1, [pc, #676]	; (800b340 <_dtoa_r+0x8c8>)
 800b09c:	f7f5 f86e 	bl	800017c <__aeabi_dsub>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	f7f5 fc92 	bl	80009d0 <__aeabi_dcmplt>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	f43f af1d 	beq.w	800aeec <_dtoa_r+0x474>
 800b0b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b0b4:	1e7b      	subs	r3, r7, #1
 800b0b6:	9314      	str	r3, [sp, #80]	; 0x50
 800b0b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b0bc:	2b30      	cmp	r3, #48	; 0x30
 800b0be:	d0f8      	beq.n	800b0b2 <_dtoa_r+0x63a>
 800b0c0:	46c2      	mov	sl, r8
 800b0c2:	e03b      	b.n	800b13c <_dtoa_r+0x6c4>
 800b0c4:	4b9f      	ldr	r3, [pc, #636]	; (800b344 <_dtoa_r+0x8cc>)
 800b0c6:	f7f5 fa11 	bl	80004ec <__aeabi_dmul>
 800b0ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0ce:	e7bc      	b.n	800b04a <_dtoa_r+0x5d2>
 800b0d0:	9f03      	ldr	r7, [sp, #12]
 800b0d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0da:	4640      	mov	r0, r8
 800b0dc:	4649      	mov	r1, r9
 800b0de:	f7f5 fb2f 	bl	8000740 <__aeabi_ddiv>
 800b0e2:	f7f5 fcb3 	bl	8000a4c <__aeabi_d2iz>
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	f7f5 f996 	bl	8000418 <__aeabi_i2d>
 800b0ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0f0:	f7f5 f9fc 	bl	80004ec <__aeabi_dmul>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	f7f5 f83e 	bl	800017c <__aeabi_dsub>
 800b100:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b104:	f807 6b01 	strb.w	r6, [r7], #1
 800b108:	9e03      	ldr	r6, [sp, #12]
 800b10a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b10e:	1bbe      	subs	r6, r7, r6
 800b110:	45b4      	cmp	ip, r6
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	d136      	bne.n	800b186 <_dtoa_r+0x70e>
 800b118:	f7f5 f832 	bl	8000180 <__adddf3>
 800b11c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b120:	4680      	mov	r8, r0
 800b122:	4689      	mov	r9, r1
 800b124:	f7f5 fc72 	bl	8000a0c <__aeabi_dcmpgt>
 800b128:	bb58      	cbnz	r0, 800b182 <_dtoa_r+0x70a>
 800b12a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b12e:	4640      	mov	r0, r8
 800b130:	4649      	mov	r1, r9
 800b132:	f7f5 fc43 	bl	80009bc <__aeabi_dcmpeq>
 800b136:	b108      	cbz	r0, 800b13c <_dtoa_r+0x6c4>
 800b138:	07e1      	lsls	r1, r4, #31
 800b13a:	d422      	bmi.n	800b182 <_dtoa_r+0x70a>
 800b13c:	4628      	mov	r0, r5
 800b13e:	4659      	mov	r1, fp
 800b140:	f000 fae6 	bl	800b710 <_Bfree>
 800b144:	2300      	movs	r3, #0
 800b146:	703b      	strb	r3, [r7, #0]
 800b148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b14a:	f10a 0001 	add.w	r0, sl, #1
 800b14e:	6018      	str	r0, [r3, #0]
 800b150:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b152:	2b00      	cmp	r3, #0
 800b154:	f43f acde 	beq.w	800ab14 <_dtoa_r+0x9c>
 800b158:	601f      	str	r7, [r3, #0]
 800b15a:	e4db      	b.n	800ab14 <_dtoa_r+0x9c>
 800b15c:	4627      	mov	r7, r4
 800b15e:	463b      	mov	r3, r7
 800b160:	461f      	mov	r7, r3
 800b162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b166:	2a39      	cmp	r2, #57	; 0x39
 800b168:	d107      	bne.n	800b17a <_dtoa_r+0x702>
 800b16a:	9a03      	ldr	r2, [sp, #12]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d1f7      	bne.n	800b160 <_dtoa_r+0x6e8>
 800b170:	2230      	movs	r2, #48	; 0x30
 800b172:	9903      	ldr	r1, [sp, #12]
 800b174:	f108 0801 	add.w	r8, r8, #1
 800b178:	700a      	strb	r2, [r1, #0]
 800b17a:	781a      	ldrb	r2, [r3, #0]
 800b17c:	3201      	adds	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
 800b180:	e79e      	b.n	800b0c0 <_dtoa_r+0x648>
 800b182:	46d0      	mov	r8, sl
 800b184:	e7eb      	b.n	800b15e <_dtoa_r+0x6e6>
 800b186:	2200      	movs	r2, #0
 800b188:	4b6e      	ldr	r3, [pc, #440]	; (800b344 <_dtoa_r+0x8cc>)
 800b18a:	f7f5 f9af 	bl	80004ec <__aeabi_dmul>
 800b18e:	2200      	movs	r2, #0
 800b190:	2300      	movs	r3, #0
 800b192:	4680      	mov	r8, r0
 800b194:	4689      	mov	r9, r1
 800b196:	f7f5 fc11 	bl	80009bc <__aeabi_dcmpeq>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d09b      	beq.n	800b0d6 <_dtoa_r+0x65e>
 800b19e:	e7cd      	b.n	800b13c <_dtoa_r+0x6c4>
 800b1a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	f000 80d0 	beq.w	800b348 <_dtoa_r+0x8d0>
 800b1a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b1aa:	2a01      	cmp	r2, #1
 800b1ac:	f300 80ae 	bgt.w	800b30c <_dtoa_r+0x894>
 800b1b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1b2:	2a00      	cmp	r2, #0
 800b1b4:	f000 80a6 	beq.w	800b304 <_dtoa_r+0x88c>
 800b1b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b1bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b1be:	9f06      	ldr	r7, [sp, #24]
 800b1c0:	9a06      	ldr	r2, [sp, #24]
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	441a      	add	r2, r3
 800b1c6:	9206      	str	r2, [sp, #24]
 800b1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	441a      	add	r2, r3
 800b1ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b1d0:	f000 fb54 	bl	800b87c <__i2b>
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	2f00      	cmp	r7, #0
 800b1d8:	dd0c      	ble.n	800b1f4 <_dtoa_r+0x77c>
 800b1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	dd09      	ble.n	800b1f4 <_dtoa_r+0x77c>
 800b1e0:	42bb      	cmp	r3, r7
 800b1e2:	bfa8      	it	ge
 800b1e4:	463b      	movge	r3, r7
 800b1e6:	9a06      	ldr	r2, [sp, #24]
 800b1e8:	1aff      	subs	r7, r7, r3
 800b1ea:	1ad2      	subs	r2, r2, r3
 800b1ec:	9206      	str	r2, [sp, #24]
 800b1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f6:	b1f3      	cbz	r3, 800b236 <_dtoa_r+0x7be>
 800b1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 80a8 	beq.w	800b350 <_dtoa_r+0x8d8>
 800b200:	2c00      	cmp	r4, #0
 800b202:	dd10      	ble.n	800b226 <_dtoa_r+0x7ae>
 800b204:	4631      	mov	r1, r6
 800b206:	4622      	mov	r2, r4
 800b208:	4628      	mov	r0, r5
 800b20a:	f000 fbf5 	bl	800b9f8 <__pow5mult>
 800b20e:	465a      	mov	r2, fp
 800b210:	4601      	mov	r1, r0
 800b212:	4606      	mov	r6, r0
 800b214:	4628      	mov	r0, r5
 800b216:	f000 fb47 	bl	800b8a8 <__multiply>
 800b21a:	4680      	mov	r8, r0
 800b21c:	4659      	mov	r1, fp
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 fa76 	bl	800b710 <_Bfree>
 800b224:	46c3      	mov	fp, r8
 800b226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b228:	1b1a      	subs	r2, r3, r4
 800b22a:	d004      	beq.n	800b236 <_dtoa_r+0x7be>
 800b22c:	4659      	mov	r1, fp
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 fbe2 	bl	800b9f8 <__pow5mult>
 800b234:	4683      	mov	fp, r0
 800b236:	2101      	movs	r1, #1
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 fb1f 	bl	800b87c <__i2b>
 800b23e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b240:	4604      	mov	r4, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	f340 8086 	ble.w	800b354 <_dtoa_r+0x8dc>
 800b248:	461a      	mov	r2, r3
 800b24a:	4601      	mov	r1, r0
 800b24c:	4628      	mov	r0, r5
 800b24e:	f000 fbd3 	bl	800b9f8 <__pow5mult>
 800b252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b254:	4604      	mov	r4, r0
 800b256:	2b01      	cmp	r3, #1
 800b258:	dd7f      	ble.n	800b35a <_dtoa_r+0x8e2>
 800b25a:	f04f 0800 	mov.w	r8, #0
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b264:	6918      	ldr	r0, [r3, #16]
 800b266:	f000 fabb 	bl	800b7e0 <__hi0bits>
 800b26a:	f1c0 0020 	rsb	r0, r0, #32
 800b26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b270:	4418      	add	r0, r3
 800b272:	f010 001f 	ands.w	r0, r0, #31
 800b276:	f000 8092 	beq.w	800b39e <_dtoa_r+0x926>
 800b27a:	f1c0 0320 	rsb	r3, r0, #32
 800b27e:	2b04      	cmp	r3, #4
 800b280:	f340 808a 	ble.w	800b398 <_dtoa_r+0x920>
 800b284:	f1c0 001c 	rsb	r0, r0, #28
 800b288:	9b06      	ldr	r3, [sp, #24]
 800b28a:	4407      	add	r7, r0
 800b28c:	4403      	add	r3, r0
 800b28e:	9306      	str	r3, [sp, #24]
 800b290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b292:	4403      	add	r3, r0
 800b294:	9309      	str	r3, [sp, #36]	; 0x24
 800b296:	9b06      	ldr	r3, [sp, #24]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	dd05      	ble.n	800b2a8 <_dtoa_r+0x830>
 800b29c:	4659      	mov	r1, fp
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f000 fc03 	bl	800baac <__lshift>
 800b2a6:	4683      	mov	fp, r0
 800b2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dd05      	ble.n	800b2ba <_dtoa_r+0x842>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f000 fbfa 	bl	800baac <__lshift>
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d070      	beq.n	800b3a2 <_dtoa_r+0x92a>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4658      	mov	r0, fp
 800b2c4:	f000 fc62 	bl	800bb8c <__mcmp>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	da6a      	bge.n	800b3a2 <_dtoa_r+0x92a>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4659      	mov	r1, fp
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f000 fa3e 	bl	800b754 <__multadd>
 800b2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2da:	4683      	mov	fp, r0
 800b2dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 8194 	beq.w	800b60e <_dtoa_r+0xb96>
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	220a      	movs	r2, #10
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f000 fa31 	bl	800b754 <__multadd>
 800b2f2:	f1b9 0f00 	cmp.w	r9, #0
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	f300 8093 	bgt.w	800b422 <_dtoa_r+0x9aa>
 800b2fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	dc57      	bgt.n	800b3b2 <_dtoa_r+0x93a>
 800b302:	e08e      	b.n	800b422 <_dtoa_r+0x9aa>
 800b304:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b30a:	e757      	b.n	800b1bc <_dtoa_r+0x744>
 800b30c:	9b08      	ldr	r3, [sp, #32]
 800b30e:	1e5c      	subs	r4, r3, #1
 800b310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b312:	42a3      	cmp	r3, r4
 800b314:	bfb7      	itett	lt
 800b316:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b318:	1b1c      	subge	r4, r3, r4
 800b31a:	1ae2      	sublt	r2, r4, r3
 800b31c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b31e:	bfbe      	ittt	lt
 800b320:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b322:	189b      	addlt	r3, r3, r2
 800b324:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b326:	9b08      	ldr	r3, [sp, #32]
 800b328:	bfb8      	it	lt
 800b32a:	2400      	movlt	r4, #0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bfbb      	ittet	lt
 800b330:	9b06      	ldrlt	r3, [sp, #24]
 800b332:	9a08      	ldrlt	r2, [sp, #32]
 800b334:	9f06      	ldrge	r7, [sp, #24]
 800b336:	1a9f      	sublt	r7, r3, r2
 800b338:	bfac      	ite	ge
 800b33a:	9b08      	ldrge	r3, [sp, #32]
 800b33c:	2300      	movlt	r3, #0
 800b33e:	e73f      	b.n	800b1c0 <_dtoa_r+0x748>
 800b340:	3fe00000 	.word	0x3fe00000
 800b344:	40240000 	.word	0x40240000
 800b348:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b34a:	9f06      	ldr	r7, [sp, #24]
 800b34c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b34e:	e742      	b.n	800b1d6 <_dtoa_r+0x75e>
 800b350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b352:	e76b      	b.n	800b22c <_dtoa_r+0x7b4>
 800b354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b356:	2b01      	cmp	r3, #1
 800b358:	dc19      	bgt.n	800b38e <_dtoa_r+0x916>
 800b35a:	9b04      	ldr	r3, [sp, #16]
 800b35c:	b9bb      	cbnz	r3, 800b38e <_dtoa_r+0x916>
 800b35e:	9b05      	ldr	r3, [sp, #20]
 800b360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b364:	b99b      	cbnz	r3, 800b38e <_dtoa_r+0x916>
 800b366:	9b05      	ldr	r3, [sp, #20]
 800b368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b36c:	0d1b      	lsrs	r3, r3, #20
 800b36e:	051b      	lsls	r3, r3, #20
 800b370:	b183      	cbz	r3, 800b394 <_dtoa_r+0x91c>
 800b372:	f04f 0801 	mov.w	r8, #1
 800b376:	9b06      	ldr	r3, [sp, #24]
 800b378:	3301      	adds	r3, #1
 800b37a:	9306      	str	r3, [sp, #24]
 800b37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37e:	3301      	adds	r3, #1
 800b380:	9309      	str	r3, [sp, #36]	; 0x24
 800b382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b384:	2b00      	cmp	r3, #0
 800b386:	f47f af6a 	bne.w	800b25e <_dtoa_r+0x7e6>
 800b38a:	2001      	movs	r0, #1
 800b38c:	e76f      	b.n	800b26e <_dtoa_r+0x7f6>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	e7f6      	b.n	800b382 <_dtoa_r+0x90a>
 800b394:	4698      	mov	r8, r3
 800b396:	e7f4      	b.n	800b382 <_dtoa_r+0x90a>
 800b398:	f43f af7d 	beq.w	800b296 <_dtoa_r+0x81e>
 800b39c:	4618      	mov	r0, r3
 800b39e:	301c      	adds	r0, #28
 800b3a0:	e772      	b.n	800b288 <_dtoa_r+0x810>
 800b3a2:	9b08      	ldr	r3, [sp, #32]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dc36      	bgt.n	800b416 <_dtoa_r+0x99e>
 800b3a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	dd33      	ble.n	800b416 <_dtoa_r+0x99e>
 800b3ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3b2:	f1b9 0f00 	cmp.w	r9, #0
 800b3b6:	d10d      	bne.n	800b3d4 <_dtoa_r+0x95c>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	2205      	movs	r2, #5
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f9c8 	bl	800b754 <__multadd>
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4658      	mov	r0, fp
 800b3ca:	f000 fbdf 	bl	800bb8c <__mcmp>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	f73f adb8 	bgt.w	800af44 <_dtoa_r+0x4cc>
 800b3d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3d6:	9f03      	ldr	r7, [sp, #12]
 800b3d8:	ea6f 0a03 	mvn.w	sl, r3
 800b3dc:	f04f 0800 	mov.w	r8, #0
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 f994 	bl	800b710 <_Bfree>
 800b3e8:	2e00      	cmp	r6, #0
 800b3ea:	f43f aea7 	beq.w	800b13c <_dtoa_r+0x6c4>
 800b3ee:	f1b8 0f00 	cmp.w	r8, #0
 800b3f2:	d005      	beq.n	800b400 <_dtoa_r+0x988>
 800b3f4:	45b0      	cmp	r8, r6
 800b3f6:	d003      	beq.n	800b400 <_dtoa_r+0x988>
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f000 f988 	bl	800b710 <_Bfree>
 800b400:	4631      	mov	r1, r6
 800b402:	4628      	mov	r0, r5
 800b404:	f000 f984 	bl	800b710 <_Bfree>
 800b408:	e698      	b.n	800b13c <_dtoa_r+0x6c4>
 800b40a:	2400      	movs	r4, #0
 800b40c:	4626      	mov	r6, r4
 800b40e:	e7e1      	b.n	800b3d4 <_dtoa_r+0x95c>
 800b410:	46c2      	mov	sl, r8
 800b412:	4626      	mov	r6, r4
 800b414:	e596      	b.n	800af44 <_dtoa_r+0x4cc>
 800b416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 80fd 	beq.w	800b61c <_dtoa_r+0xba4>
 800b422:	2f00      	cmp	r7, #0
 800b424:	dd05      	ble.n	800b432 <_dtoa_r+0x9ba>
 800b426:	4631      	mov	r1, r6
 800b428:	463a      	mov	r2, r7
 800b42a:	4628      	mov	r0, r5
 800b42c:	f000 fb3e 	bl	800baac <__lshift>
 800b430:	4606      	mov	r6, r0
 800b432:	f1b8 0f00 	cmp.w	r8, #0
 800b436:	d05c      	beq.n	800b4f2 <_dtoa_r+0xa7a>
 800b438:	4628      	mov	r0, r5
 800b43a:	6871      	ldr	r1, [r6, #4]
 800b43c:	f000 f928 	bl	800b690 <_Balloc>
 800b440:	4607      	mov	r7, r0
 800b442:	b928      	cbnz	r0, 800b450 <_dtoa_r+0x9d8>
 800b444:	4602      	mov	r2, r0
 800b446:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b44a:	4b7f      	ldr	r3, [pc, #508]	; (800b648 <_dtoa_r+0xbd0>)
 800b44c:	f7ff bb28 	b.w	800aaa0 <_dtoa_r+0x28>
 800b450:	6932      	ldr	r2, [r6, #16]
 800b452:	f106 010c 	add.w	r1, r6, #12
 800b456:	3202      	adds	r2, #2
 800b458:	0092      	lsls	r2, r2, #2
 800b45a:	300c      	adds	r0, #12
 800b45c:	f7fe fcba 	bl	8009dd4 <memcpy>
 800b460:	2201      	movs	r2, #1
 800b462:	4639      	mov	r1, r7
 800b464:	4628      	mov	r0, r5
 800b466:	f000 fb21 	bl	800baac <__lshift>
 800b46a:	46b0      	mov	r8, r6
 800b46c:	4606      	mov	r6, r0
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	3301      	adds	r3, #1
 800b472:	9308      	str	r3, [sp, #32]
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	444b      	add	r3, r9
 800b478:	930a      	str	r3, [sp, #40]	; 0x28
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	9309      	str	r3, [sp, #36]	; 0x24
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	4621      	mov	r1, r4
 800b486:	3b01      	subs	r3, #1
 800b488:	4658      	mov	r0, fp
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	f7ff fa68 	bl	800a960 <quorem>
 800b490:	4603      	mov	r3, r0
 800b492:	4641      	mov	r1, r8
 800b494:	3330      	adds	r3, #48	; 0x30
 800b496:	9006      	str	r0, [sp, #24]
 800b498:	4658      	mov	r0, fp
 800b49a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b49c:	f000 fb76 	bl	800bb8c <__mcmp>
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	4681      	mov	r9, r0
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 fb8c 	bl	800bbc4 <__mdiff>
 800b4ac:	68c2      	ldr	r2, [r0, #12]
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b2:	bb02      	cbnz	r2, 800b4f6 <_dtoa_r+0xa7e>
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	4658      	mov	r0, fp
 800b4b8:	f000 fb68 	bl	800bb8c <__mcmp>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b4c8:	f000 f922 	bl	800b710 <_Bfree>
 800b4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4d0:	9f08      	ldr	r7, [sp, #32]
 800b4d2:	ea43 0102 	orr.w	r1, r3, r2
 800b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d8:	430b      	orrs	r3, r1
 800b4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4dc:	d10d      	bne.n	800b4fa <_dtoa_r+0xa82>
 800b4de:	2b39      	cmp	r3, #57	; 0x39
 800b4e0:	d029      	beq.n	800b536 <_dtoa_r+0xabe>
 800b4e2:	f1b9 0f00 	cmp.w	r9, #0
 800b4e6:	dd01      	ble.n	800b4ec <_dtoa_r+0xa74>
 800b4e8:	9b06      	ldr	r3, [sp, #24]
 800b4ea:	3331      	adds	r3, #49	; 0x31
 800b4ec:	9a04      	ldr	r2, [sp, #16]
 800b4ee:	7013      	strb	r3, [r2, #0]
 800b4f0:	e776      	b.n	800b3e0 <_dtoa_r+0x968>
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	e7b9      	b.n	800b46a <_dtoa_r+0x9f2>
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	e7e2      	b.n	800b4c0 <_dtoa_r+0xa48>
 800b4fa:	f1b9 0f00 	cmp.w	r9, #0
 800b4fe:	db06      	blt.n	800b50e <_dtoa_r+0xa96>
 800b500:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b502:	ea41 0909 	orr.w	r9, r1, r9
 800b506:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b508:	ea59 0101 	orrs.w	r1, r9, r1
 800b50c:	d120      	bne.n	800b550 <_dtoa_r+0xad8>
 800b50e:	2a00      	cmp	r2, #0
 800b510:	ddec      	ble.n	800b4ec <_dtoa_r+0xa74>
 800b512:	4659      	mov	r1, fp
 800b514:	2201      	movs	r2, #1
 800b516:	4628      	mov	r0, r5
 800b518:	9308      	str	r3, [sp, #32]
 800b51a:	f000 fac7 	bl	800baac <__lshift>
 800b51e:	4621      	mov	r1, r4
 800b520:	4683      	mov	fp, r0
 800b522:	f000 fb33 	bl	800bb8c <__mcmp>
 800b526:	2800      	cmp	r0, #0
 800b528:	9b08      	ldr	r3, [sp, #32]
 800b52a:	dc02      	bgt.n	800b532 <_dtoa_r+0xaba>
 800b52c:	d1de      	bne.n	800b4ec <_dtoa_r+0xa74>
 800b52e:	07da      	lsls	r2, r3, #31
 800b530:	d5dc      	bpl.n	800b4ec <_dtoa_r+0xa74>
 800b532:	2b39      	cmp	r3, #57	; 0x39
 800b534:	d1d8      	bne.n	800b4e8 <_dtoa_r+0xa70>
 800b536:	2339      	movs	r3, #57	; 0x39
 800b538:	9a04      	ldr	r2, [sp, #16]
 800b53a:	7013      	strb	r3, [r2, #0]
 800b53c:	463b      	mov	r3, r7
 800b53e:	461f      	mov	r7, r3
 800b540:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b544:	3b01      	subs	r3, #1
 800b546:	2a39      	cmp	r2, #57	; 0x39
 800b548:	d050      	beq.n	800b5ec <_dtoa_r+0xb74>
 800b54a:	3201      	adds	r2, #1
 800b54c:	701a      	strb	r2, [r3, #0]
 800b54e:	e747      	b.n	800b3e0 <_dtoa_r+0x968>
 800b550:	2a00      	cmp	r2, #0
 800b552:	dd03      	ble.n	800b55c <_dtoa_r+0xae4>
 800b554:	2b39      	cmp	r3, #57	; 0x39
 800b556:	d0ee      	beq.n	800b536 <_dtoa_r+0xabe>
 800b558:	3301      	adds	r3, #1
 800b55a:	e7c7      	b.n	800b4ec <_dtoa_r+0xa74>
 800b55c:	9a08      	ldr	r2, [sp, #32]
 800b55e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b560:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b564:	428a      	cmp	r2, r1
 800b566:	d02a      	beq.n	800b5be <_dtoa_r+0xb46>
 800b568:	4659      	mov	r1, fp
 800b56a:	2300      	movs	r3, #0
 800b56c:	220a      	movs	r2, #10
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 f8f0 	bl	800b754 <__multadd>
 800b574:	45b0      	cmp	r8, r6
 800b576:	4683      	mov	fp, r0
 800b578:	f04f 0300 	mov.w	r3, #0
 800b57c:	f04f 020a 	mov.w	r2, #10
 800b580:	4641      	mov	r1, r8
 800b582:	4628      	mov	r0, r5
 800b584:	d107      	bne.n	800b596 <_dtoa_r+0xb1e>
 800b586:	f000 f8e5 	bl	800b754 <__multadd>
 800b58a:	4680      	mov	r8, r0
 800b58c:	4606      	mov	r6, r0
 800b58e:	9b08      	ldr	r3, [sp, #32]
 800b590:	3301      	adds	r3, #1
 800b592:	9308      	str	r3, [sp, #32]
 800b594:	e775      	b.n	800b482 <_dtoa_r+0xa0a>
 800b596:	f000 f8dd 	bl	800b754 <__multadd>
 800b59a:	4631      	mov	r1, r6
 800b59c:	4680      	mov	r8, r0
 800b59e:	2300      	movs	r3, #0
 800b5a0:	220a      	movs	r2, #10
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f000 f8d6 	bl	800b754 <__multadd>
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	e7f0      	b.n	800b58e <_dtoa_r+0xb16>
 800b5ac:	f1b9 0f00 	cmp.w	r9, #0
 800b5b0:	bfcc      	ite	gt
 800b5b2:	464f      	movgt	r7, r9
 800b5b4:	2701      	movle	r7, #1
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	9a03      	ldr	r2, [sp, #12]
 800b5bc:	4417      	add	r7, r2
 800b5be:	4659      	mov	r1, fp
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	9308      	str	r3, [sp, #32]
 800b5c6:	f000 fa71 	bl	800baac <__lshift>
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4683      	mov	fp, r0
 800b5ce:	f000 fadd 	bl	800bb8c <__mcmp>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	dcb2      	bgt.n	800b53c <_dtoa_r+0xac4>
 800b5d6:	d102      	bne.n	800b5de <_dtoa_r+0xb66>
 800b5d8:	9b08      	ldr	r3, [sp, #32]
 800b5da:	07db      	lsls	r3, r3, #31
 800b5dc:	d4ae      	bmi.n	800b53c <_dtoa_r+0xac4>
 800b5de:	463b      	mov	r3, r7
 800b5e0:	461f      	mov	r7, r3
 800b5e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5e6:	2a30      	cmp	r2, #48	; 0x30
 800b5e8:	d0fa      	beq.n	800b5e0 <_dtoa_r+0xb68>
 800b5ea:	e6f9      	b.n	800b3e0 <_dtoa_r+0x968>
 800b5ec:	9a03      	ldr	r2, [sp, #12]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d1a5      	bne.n	800b53e <_dtoa_r+0xac6>
 800b5f2:	2331      	movs	r3, #49	; 0x31
 800b5f4:	f10a 0a01 	add.w	sl, sl, #1
 800b5f8:	e779      	b.n	800b4ee <_dtoa_r+0xa76>
 800b5fa:	4b14      	ldr	r3, [pc, #80]	; (800b64c <_dtoa_r+0xbd4>)
 800b5fc:	f7ff baa8 	b.w	800ab50 <_dtoa_r+0xd8>
 800b600:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b602:	2b00      	cmp	r3, #0
 800b604:	f47f aa81 	bne.w	800ab0a <_dtoa_r+0x92>
 800b608:	4b11      	ldr	r3, [pc, #68]	; (800b650 <_dtoa_r+0xbd8>)
 800b60a:	f7ff baa1 	b.w	800ab50 <_dtoa_r+0xd8>
 800b60e:	f1b9 0f00 	cmp.w	r9, #0
 800b612:	dc03      	bgt.n	800b61c <_dtoa_r+0xba4>
 800b614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b616:	2b02      	cmp	r3, #2
 800b618:	f73f aecb 	bgt.w	800b3b2 <_dtoa_r+0x93a>
 800b61c:	9f03      	ldr	r7, [sp, #12]
 800b61e:	4621      	mov	r1, r4
 800b620:	4658      	mov	r0, fp
 800b622:	f7ff f99d 	bl	800a960 <quorem>
 800b626:	9a03      	ldr	r2, [sp, #12]
 800b628:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b62c:	f807 3b01 	strb.w	r3, [r7], #1
 800b630:	1aba      	subs	r2, r7, r2
 800b632:	4591      	cmp	r9, r2
 800b634:	ddba      	ble.n	800b5ac <_dtoa_r+0xb34>
 800b636:	4659      	mov	r1, fp
 800b638:	2300      	movs	r3, #0
 800b63a:	220a      	movs	r2, #10
 800b63c:	4628      	mov	r0, r5
 800b63e:	f000 f889 	bl	800b754 <__multadd>
 800b642:	4683      	mov	fp, r0
 800b644:	e7eb      	b.n	800b61e <_dtoa_r+0xba6>
 800b646:	bf00      	nop
 800b648:	0800d40f 	.word	0x0800d40f
 800b64c:	0800d36c 	.word	0x0800d36c
 800b650:	0800d390 	.word	0x0800d390

0800b654 <_localeconv_r>:
 800b654:	4800      	ldr	r0, [pc, #0]	; (800b658 <_localeconv_r+0x4>)
 800b656:	4770      	bx	lr
 800b658:	20000220 	.word	0x20000220

0800b65c <memchr>:
 800b65c:	4603      	mov	r3, r0
 800b65e:	b510      	push	{r4, lr}
 800b660:	b2c9      	uxtb	r1, r1
 800b662:	4402      	add	r2, r0
 800b664:	4293      	cmp	r3, r2
 800b666:	4618      	mov	r0, r3
 800b668:	d101      	bne.n	800b66e <memchr+0x12>
 800b66a:	2000      	movs	r0, #0
 800b66c:	e003      	b.n	800b676 <memchr+0x1a>
 800b66e:	7804      	ldrb	r4, [r0, #0]
 800b670:	3301      	adds	r3, #1
 800b672:	428c      	cmp	r4, r1
 800b674:	d1f6      	bne.n	800b664 <memchr+0x8>
 800b676:	bd10      	pop	{r4, pc}

0800b678 <__malloc_lock>:
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <__malloc_lock+0x8>)
 800b67a:	f000 bd2c 	b.w	800c0d6 <__retarget_lock_acquire_recursive>
 800b67e:	bf00      	nop
 800b680:	2000089c 	.word	0x2000089c

0800b684 <__malloc_unlock>:
 800b684:	4801      	ldr	r0, [pc, #4]	; (800b68c <__malloc_unlock+0x8>)
 800b686:	f000 bd27 	b.w	800c0d8 <__retarget_lock_release_recursive>
 800b68a:	bf00      	nop
 800b68c:	2000089c 	.word	0x2000089c

0800b690 <_Balloc>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b694:	4604      	mov	r4, r0
 800b696:	460d      	mov	r5, r1
 800b698:	b976      	cbnz	r6, 800b6b8 <_Balloc+0x28>
 800b69a:	2010      	movs	r0, #16
 800b69c:	f7fe fb92 	bl	8009dc4 <malloc>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	6260      	str	r0, [r4, #36]	; 0x24
 800b6a4:	b920      	cbnz	r0, 800b6b0 <_Balloc+0x20>
 800b6a6:	2166      	movs	r1, #102	; 0x66
 800b6a8:	4b17      	ldr	r3, [pc, #92]	; (800b708 <_Balloc+0x78>)
 800b6aa:	4818      	ldr	r0, [pc, #96]	; (800b70c <_Balloc+0x7c>)
 800b6ac:	f000 fce2 	bl	800c074 <__assert_func>
 800b6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6b4:	6006      	str	r6, [r0, #0]
 800b6b6:	60c6      	str	r6, [r0, #12]
 800b6b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6ba:	68f3      	ldr	r3, [r6, #12]
 800b6bc:	b183      	cbz	r3, 800b6e0 <_Balloc+0x50>
 800b6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6c6:	b9b8      	cbnz	r0, 800b6f8 <_Balloc+0x68>
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b6ce:	1d72      	adds	r2, r6, #5
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	0092      	lsls	r2, r2, #2
 800b6d4:	f000 fb5e 	bl	800bd94 <_calloc_r>
 800b6d8:	b160      	cbz	r0, 800b6f4 <_Balloc+0x64>
 800b6da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6de:	e00e      	b.n	800b6fe <_Balloc+0x6e>
 800b6e0:	2221      	movs	r2, #33	; 0x21
 800b6e2:	2104      	movs	r1, #4
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f000 fb55 	bl	800bd94 <_calloc_r>
 800b6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6ec:	60f0      	str	r0, [r6, #12]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e4      	bne.n	800b6be <_Balloc+0x2e>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
 800b6f8:	6802      	ldr	r2, [r0, #0]
 800b6fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6fe:	2300      	movs	r3, #0
 800b700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b704:	e7f7      	b.n	800b6f6 <_Balloc+0x66>
 800b706:	bf00      	nop
 800b708:	0800d39d 	.word	0x0800d39d
 800b70c:	0800d420 	.word	0x0800d420

0800b710 <_Bfree>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b714:	4605      	mov	r5, r0
 800b716:	460c      	mov	r4, r1
 800b718:	b976      	cbnz	r6, 800b738 <_Bfree+0x28>
 800b71a:	2010      	movs	r0, #16
 800b71c:	f7fe fb52 	bl	8009dc4 <malloc>
 800b720:	4602      	mov	r2, r0
 800b722:	6268      	str	r0, [r5, #36]	; 0x24
 800b724:	b920      	cbnz	r0, 800b730 <_Bfree+0x20>
 800b726:	218a      	movs	r1, #138	; 0x8a
 800b728:	4b08      	ldr	r3, [pc, #32]	; (800b74c <_Bfree+0x3c>)
 800b72a:	4809      	ldr	r0, [pc, #36]	; (800b750 <_Bfree+0x40>)
 800b72c:	f000 fca2 	bl	800c074 <__assert_func>
 800b730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b734:	6006      	str	r6, [r0, #0]
 800b736:	60c6      	str	r6, [r0, #12]
 800b738:	b13c      	cbz	r4, 800b74a <_Bfree+0x3a>
 800b73a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b73c:	6862      	ldr	r2, [r4, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b744:	6021      	str	r1, [r4, #0]
 800b746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	0800d39d 	.word	0x0800d39d
 800b750:	0800d420 	.word	0x0800d420

0800b754 <__multadd>:
 800b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	4607      	mov	r7, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	461e      	mov	r6, r3
 800b75e:	2000      	movs	r0, #0
 800b760:	690d      	ldr	r5, [r1, #16]
 800b762:	f101 0c14 	add.w	ip, r1, #20
 800b766:	f8dc 3000 	ldr.w	r3, [ip]
 800b76a:	3001      	adds	r0, #1
 800b76c:	b299      	uxth	r1, r3
 800b76e:	fb02 6101 	mla	r1, r2, r1, r6
 800b772:	0c1e      	lsrs	r6, r3, #16
 800b774:	0c0b      	lsrs	r3, r1, #16
 800b776:	fb02 3306 	mla	r3, r2, r6, r3
 800b77a:	b289      	uxth	r1, r1
 800b77c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b780:	4285      	cmp	r5, r0
 800b782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b786:	f84c 1b04 	str.w	r1, [ip], #4
 800b78a:	dcec      	bgt.n	800b766 <__multadd+0x12>
 800b78c:	b30e      	cbz	r6, 800b7d2 <__multadd+0x7e>
 800b78e:	68a3      	ldr	r3, [r4, #8]
 800b790:	42ab      	cmp	r3, r5
 800b792:	dc19      	bgt.n	800b7c8 <__multadd+0x74>
 800b794:	6861      	ldr	r1, [r4, #4]
 800b796:	4638      	mov	r0, r7
 800b798:	3101      	adds	r1, #1
 800b79a:	f7ff ff79 	bl	800b690 <_Balloc>
 800b79e:	4680      	mov	r8, r0
 800b7a0:	b928      	cbnz	r0, 800b7ae <__multadd+0x5a>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	21b5      	movs	r1, #181	; 0xb5
 800b7a6:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <__multadd+0x84>)
 800b7a8:	480c      	ldr	r0, [pc, #48]	; (800b7dc <__multadd+0x88>)
 800b7aa:	f000 fc63 	bl	800c074 <__assert_func>
 800b7ae:	6922      	ldr	r2, [r4, #16]
 800b7b0:	f104 010c 	add.w	r1, r4, #12
 800b7b4:	3202      	adds	r2, #2
 800b7b6:	0092      	lsls	r2, r2, #2
 800b7b8:	300c      	adds	r0, #12
 800b7ba:	f7fe fb0b 	bl	8009dd4 <memcpy>
 800b7be:	4621      	mov	r1, r4
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff ffa5 	bl	800b710 <_Bfree>
 800b7c6:	4644      	mov	r4, r8
 800b7c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7cc:	3501      	adds	r5, #1
 800b7ce:	615e      	str	r6, [r3, #20]
 800b7d0:	6125      	str	r5, [r4, #16]
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d8:	0800d40f 	.word	0x0800d40f
 800b7dc:	0800d420 	.word	0x0800d420

0800b7e0 <__hi0bits>:
 800b7e0:	0c02      	lsrs	r2, r0, #16
 800b7e2:	0412      	lsls	r2, r2, #16
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	b9ca      	cbnz	r2, 800b81c <__hi0bits+0x3c>
 800b7e8:	0403      	lsls	r3, r0, #16
 800b7ea:	2010      	movs	r0, #16
 800b7ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b7f0:	bf04      	itt	eq
 800b7f2:	021b      	lsleq	r3, r3, #8
 800b7f4:	3008      	addeq	r0, #8
 800b7f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b7fa:	bf04      	itt	eq
 800b7fc:	011b      	lsleq	r3, r3, #4
 800b7fe:	3004      	addeq	r0, #4
 800b800:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b804:	bf04      	itt	eq
 800b806:	009b      	lsleq	r3, r3, #2
 800b808:	3002      	addeq	r0, #2
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	db05      	blt.n	800b81a <__hi0bits+0x3a>
 800b80e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b812:	f100 0001 	add.w	r0, r0, #1
 800b816:	bf08      	it	eq
 800b818:	2020      	moveq	r0, #32
 800b81a:	4770      	bx	lr
 800b81c:	2000      	movs	r0, #0
 800b81e:	e7e5      	b.n	800b7ec <__hi0bits+0xc>

0800b820 <__lo0bits>:
 800b820:	6803      	ldr	r3, [r0, #0]
 800b822:	4602      	mov	r2, r0
 800b824:	f013 0007 	ands.w	r0, r3, #7
 800b828:	d00b      	beq.n	800b842 <__lo0bits+0x22>
 800b82a:	07d9      	lsls	r1, r3, #31
 800b82c:	d421      	bmi.n	800b872 <__lo0bits+0x52>
 800b82e:	0798      	lsls	r0, r3, #30
 800b830:	bf49      	itett	mi
 800b832:	085b      	lsrmi	r3, r3, #1
 800b834:	089b      	lsrpl	r3, r3, #2
 800b836:	2001      	movmi	r0, #1
 800b838:	6013      	strmi	r3, [r2, #0]
 800b83a:	bf5c      	itt	pl
 800b83c:	2002      	movpl	r0, #2
 800b83e:	6013      	strpl	r3, [r2, #0]
 800b840:	4770      	bx	lr
 800b842:	b299      	uxth	r1, r3
 800b844:	b909      	cbnz	r1, 800b84a <__lo0bits+0x2a>
 800b846:	2010      	movs	r0, #16
 800b848:	0c1b      	lsrs	r3, r3, #16
 800b84a:	b2d9      	uxtb	r1, r3
 800b84c:	b909      	cbnz	r1, 800b852 <__lo0bits+0x32>
 800b84e:	3008      	adds	r0, #8
 800b850:	0a1b      	lsrs	r3, r3, #8
 800b852:	0719      	lsls	r1, r3, #28
 800b854:	bf04      	itt	eq
 800b856:	091b      	lsreq	r3, r3, #4
 800b858:	3004      	addeq	r0, #4
 800b85a:	0799      	lsls	r1, r3, #30
 800b85c:	bf04      	itt	eq
 800b85e:	089b      	lsreq	r3, r3, #2
 800b860:	3002      	addeq	r0, #2
 800b862:	07d9      	lsls	r1, r3, #31
 800b864:	d403      	bmi.n	800b86e <__lo0bits+0x4e>
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	f100 0001 	add.w	r0, r0, #1
 800b86c:	d003      	beq.n	800b876 <__lo0bits+0x56>
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	4770      	bx	lr
 800b872:	2000      	movs	r0, #0
 800b874:	4770      	bx	lr
 800b876:	2020      	movs	r0, #32
 800b878:	4770      	bx	lr
	...

0800b87c <__i2b>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	460c      	mov	r4, r1
 800b880:	2101      	movs	r1, #1
 800b882:	f7ff ff05 	bl	800b690 <_Balloc>
 800b886:	4602      	mov	r2, r0
 800b888:	b928      	cbnz	r0, 800b896 <__i2b+0x1a>
 800b88a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b88e:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <__i2b+0x24>)
 800b890:	4804      	ldr	r0, [pc, #16]	; (800b8a4 <__i2b+0x28>)
 800b892:	f000 fbef 	bl	800c074 <__assert_func>
 800b896:	2301      	movs	r3, #1
 800b898:	6144      	str	r4, [r0, #20]
 800b89a:	6103      	str	r3, [r0, #16]
 800b89c:	bd10      	pop	{r4, pc}
 800b89e:	bf00      	nop
 800b8a0:	0800d40f 	.word	0x0800d40f
 800b8a4:	0800d420 	.word	0x0800d420

0800b8a8 <__multiply>:
 800b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ac:	4691      	mov	r9, r2
 800b8ae:	690a      	ldr	r2, [r1, #16]
 800b8b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	bfbe      	ittt	lt
 800b8ba:	460b      	movlt	r3, r1
 800b8bc:	464c      	movlt	r4, r9
 800b8be:	4699      	movlt	r9, r3
 800b8c0:	6927      	ldr	r7, [r4, #16]
 800b8c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	6861      	ldr	r1, [r4, #4]
 800b8ca:	eb07 060a 	add.w	r6, r7, sl
 800b8ce:	42b3      	cmp	r3, r6
 800b8d0:	b085      	sub	sp, #20
 800b8d2:	bfb8      	it	lt
 800b8d4:	3101      	addlt	r1, #1
 800b8d6:	f7ff fedb 	bl	800b690 <_Balloc>
 800b8da:	b930      	cbnz	r0, 800b8ea <__multiply+0x42>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	f240 115d 	movw	r1, #349	; 0x15d
 800b8e2:	4b43      	ldr	r3, [pc, #268]	; (800b9f0 <__multiply+0x148>)
 800b8e4:	4843      	ldr	r0, [pc, #268]	; (800b9f4 <__multiply+0x14c>)
 800b8e6:	f000 fbc5 	bl	800c074 <__assert_func>
 800b8ea:	f100 0514 	add.w	r5, r0, #20
 800b8ee:	462b      	mov	r3, r5
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8f6:	4543      	cmp	r3, r8
 800b8f8:	d321      	bcc.n	800b93e <__multiply+0x96>
 800b8fa:	f104 0314 	add.w	r3, r4, #20
 800b8fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b902:	f109 0314 	add.w	r3, r9, #20
 800b906:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b90a:	9202      	str	r2, [sp, #8]
 800b90c:	1b3a      	subs	r2, r7, r4
 800b90e:	3a15      	subs	r2, #21
 800b910:	f022 0203 	bic.w	r2, r2, #3
 800b914:	3204      	adds	r2, #4
 800b916:	f104 0115 	add.w	r1, r4, #21
 800b91a:	428f      	cmp	r7, r1
 800b91c:	bf38      	it	cc
 800b91e:	2204      	movcc	r2, #4
 800b920:	9201      	str	r2, [sp, #4]
 800b922:	9a02      	ldr	r2, [sp, #8]
 800b924:	9303      	str	r3, [sp, #12]
 800b926:	429a      	cmp	r2, r3
 800b928:	d80c      	bhi.n	800b944 <__multiply+0x9c>
 800b92a:	2e00      	cmp	r6, #0
 800b92c:	dd03      	ble.n	800b936 <__multiply+0x8e>
 800b92e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b932:	2b00      	cmp	r3, #0
 800b934:	d059      	beq.n	800b9ea <__multiply+0x142>
 800b936:	6106      	str	r6, [r0, #16]
 800b938:	b005      	add	sp, #20
 800b93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93e:	f843 2b04 	str.w	r2, [r3], #4
 800b942:	e7d8      	b.n	800b8f6 <__multiply+0x4e>
 800b944:	f8b3 a000 	ldrh.w	sl, [r3]
 800b948:	f1ba 0f00 	cmp.w	sl, #0
 800b94c:	d023      	beq.n	800b996 <__multiply+0xee>
 800b94e:	46a9      	mov	r9, r5
 800b950:	f04f 0c00 	mov.w	ip, #0
 800b954:	f104 0e14 	add.w	lr, r4, #20
 800b958:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b95c:	f8d9 1000 	ldr.w	r1, [r9]
 800b960:	fa1f fb82 	uxth.w	fp, r2
 800b964:	b289      	uxth	r1, r1
 800b966:	fb0a 110b 	mla	r1, sl, fp, r1
 800b96a:	4461      	add	r1, ip
 800b96c:	f8d9 c000 	ldr.w	ip, [r9]
 800b970:	0c12      	lsrs	r2, r2, #16
 800b972:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b976:	fb0a c202 	mla	r2, sl, r2, ip
 800b97a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b97e:	b289      	uxth	r1, r1
 800b980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b984:	4577      	cmp	r7, lr
 800b986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b98a:	f849 1b04 	str.w	r1, [r9], #4
 800b98e:	d8e3      	bhi.n	800b958 <__multiply+0xb0>
 800b990:	9a01      	ldr	r2, [sp, #4]
 800b992:	f845 c002 	str.w	ip, [r5, r2]
 800b996:	9a03      	ldr	r2, [sp, #12]
 800b998:	3304      	adds	r3, #4
 800b99a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b99e:	f1b9 0f00 	cmp.w	r9, #0
 800b9a2:	d020      	beq.n	800b9e6 <__multiply+0x13e>
 800b9a4:	46ae      	mov	lr, r5
 800b9a6:	f04f 0a00 	mov.w	sl, #0
 800b9aa:	6829      	ldr	r1, [r5, #0]
 800b9ac:	f104 0c14 	add.w	ip, r4, #20
 800b9b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b9b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9b8:	b289      	uxth	r1, r1
 800b9ba:	fb09 220b 	mla	r2, r9, fp, r2
 800b9be:	4492      	add	sl, r2
 800b9c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b9c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b9c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b9cc:	f8be 1000 	ldrh.w	r1, [lr]
 800b9d0:	0c12      	lsrs	r2, r2, #16
 800b9d2:	fb09 1102 	mla	r1, r9, r2, r1
 800b9d6:	4567      	cmp	r7, ip
 800b9d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b9dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9e0:	d8e6      	bhi.n	800b9b0 <__multiply+0x108>
 800b9e2:	9a01      	ldr	r2, [sp, #4]
 800b9e4:	50a9      	str	r1, [r5, r2]
 800b9e6:	3504      	adds	r5, #4
 800b9e8:	e79b      	b.n	800b922 <__multiply+0x7a>
 800b9ea:	3e01      	subs	r6, #1
 800b9ec:	e79d      	b.n	800b92a <__multiply+0x82>
 800b9ee:	bf00      	nop
 800b9f0:	0800d40f 	.word	0x0800d40f
 800b9f4:	0800d420 	.word	0x0800d420

0800b9f8 <__pow5mult>:
 800b9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9fc:	4615      	mov	r5, r2
 800b9fe:	f012 0203 	ands.w	r2, r2, #3
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	d007      	beq.n	800ba18 <__pow5mult+0x20>
 800ba08:	4c25      	ldr	r4, [pc, #148]	; (800baa0 <__pow5mult+0xa8>)
 800ba0a:	3a01      	subs	r2, #1
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba12:	f7ff fe9f 	bl	800b754 <__multadd>
 800ba16:	4607      	mov	r7, r0
 800ba18:	10ad      	asrs	r5, r5, #2
 800ba1a:	d03d      	beq.n	800ba98 <__pow5mult+0xa0>
 800ba1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba1e:	b97c      	cbnz	r4, 800ba40 <__pow5mult+0x48>
 800ba20:	2010      	movs	r0, #16
 800ba22:	f7fe f9cf 	bl	8009dc4 <malloc>
 800ba26:	4602      	mov	r2, r0
 800ba28:	6270      	str	r0, [r6, #36]	; 0x24
 800ba2a:	b928      	cbnz	r0, 800ba38 <__pow5mult+0x40>
 800ba2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba30:	4b1c      	ldr	r3, [pc, #112]	; (800baa4 <__pow5mult+0xac>)
 800ba32:	481d      	ldr	r0, [pc, #116]	; (800baa8 <__pow5mult+0xb0>)
 800ba34:	f000 fb1e 	bl	800c074 <__assert_func>
 800ba38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba3c:	6004      	str	r4, [r0, #0]
 800ba3e:	60c4      	str	r4, [r0, #12]
 800ba40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba48:	b94c      	cbnz	r4, 800ba5e <__pow5mult+0x66>
 800ba4a:	f240 2171 	movw	r1, #625	; 0x271
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ff14 	bl	800b87c <__i2b>
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	f04f 0900 	mov.w	r9, #0
 800ba62:	07eb      	lsls	r3, r5, #31
 800ba64:	d50a      	bpl.n	800ba7c <__pow5mult+0x84>
 800ba66:	4639      	mov	r1, r7
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ff1c 	bl	800b8a8 <__multiply>
 800ba70:	4680      	mov	r8, r0
 800ba72:	4639      	mov	r1, r7
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7ff fe4b 	bl	800b710 <_Bfree>
 800ba7a:	4647      	mov	r7, r8
 800ba7c:	106d      	asrs	r5, r5, #1
 800ba7e:	d00b      	beq.n	800ba98 <__pow5mult+0xa0>
 800ba80:	6820      	ldr	r0, [r4, #0]
 800ba82:	b938      	cbnz	r0, 800ba94 <__pow5mult+0x9c>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4621      	mov	r1, r4
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7ff ff0d 	bl	800b8a8 <__multiply>
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	f8c0 9000 	str.w	r9, [r0]
 800ba94:	4604      	mov	r4, r0
 800ba96:	e7e4      	b.n	800ba62 <__pow5mult+0x6a>
 800ba98:	4638      	mov	r0, r7
 800ba9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9e:	bf00      	nop
 800baa0:	0800d570 	.word	0x0800d570
 800baa4:	0800d39d 	.word	0x0800d39d
 800baa8:	0800d420 	.word	0x0800d420

0800baac <__lshift>:
 800baac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab0:	460c      	mov	r4, r1
 800bab2:	4607      	mov	r7, r0
 800bab4:	4691      	mov	r9, r2
 800bab6:	6923      	ldr	r3, [r4, #16]
 800bab8:	6849      	ldr	r1, [r1, #4]
 800baba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bac4:	f108 0601 	add.w	r6, r8, #1
 800bac8:	42b3      	cmp	r3, r6
 800baca:	db0b      	blt.n	800bae4 <__lshift+0x38>
 800bacc:	4638      	mov	r0, r7
 800bace:	f7ff fddf 	bl	800b690 <_Balloc>
 800bad2:	4605      	mov	r5, r0
 800bad4:	b948      	cbnz	r0, 800baea <__lshift+0x3e>
 800bad6:	4602      	mov	r2, r0
 800bad8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800badc:	4b29      	ldr	r3, [pc, #164]	; (800bb84 <__lshift+0xd8>)
 800bade:	482a      	ldr	r0, [pc, #168]	; (800bb88 <__lshift+0xdc>)
 800bae0:	f000 fac8 	bl	800c074 <__assert_func>
 800bae4:	3101      	adds	r1, #1
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	e7ee      	b.n	800bac8 <__lshift+0x1c>
 800baea:	2300      	movs	r3, #0
 800baec:	f100 0114 	add.w	r1, r0, #20
 800baf0:	f100 0210 	add.w	r2, r0, #16
 800baf4:	4618      	mov	r0, r3
 800baf6:	4553      	cmp	r3, sl
 800baf8:	db37      	blt.n	800bb6a <__lshift+0xbe>
 800bafa:	6920      	ldr	r0, [r4, #16]
 800bafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb00:	f104 0314 	add.w	r3, r4, #20
 800bb04:	f019 091f 	ands.w	r9, r9, #31
 800bb08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb10:	d02f      	beq.n	800bb72 <__lshift+0xc6>
 800bb12:	468a      	mov	sl, r1
 800bb14:	f04f 0c00 	mov.w	ip, #0
 800bb18:	f1c9 0e20 	rsb	lr, r9, #32
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	fa02 f209 	lsl.w	r2, r2, r9
 800bb22:	ea42 020c 	orr.w	r2, r2, ip
 800bb26:	f84a 2b04 	str.w	r2, [sl], #4
 800bb2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb2e:	4298      	cmp	r0, r3
 800bb30:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb34:	d8f2      	bhi.n	800bb1c <__lshift+0x70>
 800bb36:	1b03      	subs	r3, r0, r4
 800bb38:	3b15      	subs	r3, #21
 800bb3a:	f023 0303 	bic.w	r3, r3, #3
 800bb3e:	3304      	adds	r3, #4
 800bb40:	f104 0215 	add.w	r2, r4, #21
 800bb44:	4290      	cmp	r0, r2
 800bb46:	bf38      	it	cc
 800bb48:	2304      	movcc	r3, #4
 800bb4a:	f841 c003 	str.w	ip, [r1, r3]
 800bb4e:	f1bc 0f00 	cmp.w	ip, #0
 800bb52:	d001      	beq.n	800bb58 <__lshift+0xac>
 800bb54:	f108 0602 	add.w	r6, r8, #2
 800bb58:	3e01      	subs	r6, #1
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	612e      	str	r6, [r5, #16]
 800bb60:	f7ff fdd6 	bl	800b710 <_Bfree>
 800bb64:	4628      	mov	r0, r5
 800bb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb6e:	3301      	adds	r3, #1
 800bb70:	e7c1      	b.n	800baf6 <__lshift+0x4a>
 800bb72:	3904      	subs	r1, #4
 800bb74:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb78:	4298      	cmp	r0, r3
 800bb7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb7e:	d8f9      	bhi.n	800bb74 <__lshift+0xc8>
 800bb80:	e7ea      	b.n	800bb58 <__lshift+0xac>
 800bb82:	bf00      	nop
 800bb84:	0800d40f 	.word	0x0800d40f
 800bb88:	0800d420 	.word	0x0800d420

0800bb8c <__mcmp>:
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	690a      	ldr	r2, [r1, #16]
 800bb90:	6900      	ldr	r0, [r0, #16]
 800bb92:	b530      	push	{r4, r5, lr}
 800bb94:	1a80      	subs	r0, r0, r2
 800bb96:	d10d      	bne.n	800bbb4 <__mcmp+0x28>
 800bb98:	3314      	adds	r3, #20
 800bb9a:	3114      	adds	r1, #20
 800bb9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bba0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bba4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bba8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbac:	4295      	cmp	r5, r2
 800bbae:	d002      	beq.n	800bbb6 <__mcmp+0x2a>
 800bbb0:	d304      	bcc.n	800bbbc <__mcmp+0x30>
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	bd30      	pop	{r4, r5, pc}
 800bbb6:	42a3      	cmp	r3, r4
 800bbb8:	d3f4      	bcc.n	800bba4 <__mcmp+0x18>
 800bbba:	e7fb      	b.n	800bbb4 <__mcmp+0x28>
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	e7f8      	b.n	800bbb4 <__mcmp+0x28>
	...

0800bbc4 <__mdiff>:
 800bbc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	460d      	mov	r5, r1
 800bbca:	4607      	mov	r7, r0
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4628      	mov	r0, r5
 800bbd0:	4614      	mov	r4, r2
 800bbd2:	f7ff ffdb 	bl	800bb8c <__mcmp>
 800bbd6:	1e06      	subs	r6, r0, #0
 800bbd8:	d111      	bne.n	800bbfe <__mdiff+0x3a>
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f7ff fd57 	bl	800b690 <_Balloc>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	b928      	cbnz	r0, 800bbf2 <__mdiff+0x2e>
 800bbe6:	f240 2132 	movw	r1, #562	; 0x232
 800bbea:	4b3a      	ldr	r3, [pc, #232]	; (800bcd4 <__mdiff+0x110>)
 800bbec:	483a      	ldr	r0, [pc, #232]	; (800bcd8 <__mdiff+0x114>)
 800bbee:	f000 fa41 	bl	800c074 <__assert_func>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbfe:	bfa4      	itt	ge
 800bc00:	4623      	movge	r3, r4
 800bc02:	462c      	movge	r4, r5
 800bc04:	4638      	mov	r0, r7
 800bc06:	6861      	ldr	r1, [r4, #4]
 800bc08:	bfa6      	itte	ge
 800bc0a:	461d      	movge	r5, r3
 800bc0c:	2600      	movge	r6, #0
 800bc0e:	2601      	movlt	r6, #1
 800bc10:	f7ff fd3e 	bl	800b690 <_Balloc>
 800bc14:	4602      	mov	r2, r0
 800bc16:	b918      	cbnz	r0, 800bc20 <__mdiff+0x5c>
 800bc18:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc1c:	4b2d      	ldr	r3, [pc, #180]	; (800bcd4 <__mdiff+0x110>)
 800bc1e:	e7e5      	b.n	800bbec <__mdiff+0x28>
 800bc20:	f102 0814 	add.w	r8, r2, #20
 800bc24:	46c2      	mov	sl, r8
 800bc26:	f04f 0c00 	mov.w	ip, #0
 800bc2a:	6927      	ldr	r7, [r4, #16]
 800bc2c:	60c6      	str	r6, [r0, #12]
 800bc2e:	692e      	ldr	r6, [r5, #16]
 800bc30:	f104 0014 	add.w	r0, r4, #20
 800bc34:	f105 0914 	add.w	r9, r5, #20
 800bc38:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bc3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc40:	3410      	adds	r4, #16
 800bc42:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bc46:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc4a:	fa1f f18b 	uxth.w	r1, fp
 800bc4e:	448c      	add	ip, r1
 800bc50:	b299      	uxth	r1, r3
 800bc52:	0c1b      	lsrs	r3, r3, #16
 800bc54:	ebac 0101 	sub.w	r1, ip, r1
 800bc58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bc60:	b289      	uxth	r1, r1
 800bc62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bc66:	454e      	cmp	r6, r9
 800bc68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bc6c:	f84a 3b04 	str.w	r3, [sl], #4
 800bc70:	d8e7      	bhi.n	800bc42 <__mdiff+0x7e>
 800bc72:	1b73      	subs	r3, r6, r5
 800bc74:	3b15      	subs	r3, #21
 800bc76:	f023 0303 	bic.w	r3, r3, #3
 800bc7a:	3515      	adds	r5, #21
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	42ae      	cmp	r6, r5
 800bc80:	bf38      	it	cc
 800bc82:	2304      	movcc	r3, #4
 800bc84:	4418      	add	r0, r3
 800bc86:	4443      	add	r3, r8
 800bc88:	461e      	mov	r6, r3
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	4575      	cmp	r5, lr
 800bc8e:	d30e      	bcc.n	800bcae <__mdiff+0xea>
 800bc90:	f10e 0103 	add.w	r1, lr, #3
 800bc94:	1a09      	subs	r1, r1, r0
 800bc96:	f021 0103 	bic.w	r1, r1, #3
 800bc9a:	3803      	subs	r0, #3
 800bc9c:	4586      	cmp	lr, r0
 800bc9e:	bf38      	it	cc
 800bca0:	2100      	movcc	r1, #0
 800bca2:	4419      	add	r1, r3
 800bca4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bca8:	b18b      	cbz	r3, 800bcce <__mdiff+0x10a>
 800bcaa:	6117      	str	r7, [r2, #16]
 800bcac:	e7a4      	b.n	800bbf8 <__mdiff+0x34>
 800bcae:	f855 8b04 	ldr.w	r8, [r5], #4
 800bcb2:	fa1f f188 	uxth.w	r1, r8
 800bcb6:	4461      	add	r1, ip
 800bcb8:	140c      	asrs	r4, r1, #16
 800bcba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcbe:	b289      	uxth	r1, r1
 800bcc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bcc4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bcc8:	f846 1b04 	str.w	r1, [r6], #4
 800bccc:	e7de      	b.n	800bc8c <__mdiff+0xc8>
 800bcce:	3f01      	subs	r7, #1
 800bcd0:	e7e8      	b.n	800bca4 <__mdiff+0xe0>
 800bcd2:	bf00      	nop
 800bcd4:	0800d40f 	.word	0x0800d40f
 800bcd8:	0800d420 	.word	0x0800d420

0800bcdc <__d2b>:
 800bcdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bce0:	2101      	movs	r1, #1
 800bce2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bce6:	4690      	mov	r8, r2
 800bce8:	461d      	mov	r5, r3
 800bcea:	f7ff fcd1 	bl	800b690 <_Balloc>
 800bcee:	4604      	mov	r4, r0
 800bcf0:	b930      	cbnz	r0, 800bd00 <__d2b+0x24>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	f240 310a 	movw	r1, #778	; 0x30a
 800bcf8:	4b24      	ldr	r3, [pc, #144]	; (800bd8c <__d2b+0xb0>)
 800bcfa:	4825      	ldr	r0, [pc, #148]	; (800bd90 <__d2b+0xb4>)
 800bcfc:	f000 f9ba 	bl	800c074 <__assert_func>
 800bd00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bd04:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bd08:	bb2d      	cbnz	r5, 800bd56 <__d2b+0x7a>
 800bd0a:	9301      	str	r3, [sp, #4]
 800bd0c:	f1b8 0300 	subs.w	r3, r8, #0
 800bd10:	d026      	beq.n	800bd60 <__d2b+0x84>
 800bd12:	4668      	mov	r0, sp
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	f7ff fd83 	bl	800b820 <__lo0bits>
 800bd1a:	9900      	ldr	r1, [sp, #0]
 800bd1c:	b1f0      	cbz	r0, 800bd5c <__d2b+0x80>
 800bd1e:	9a01      	ldr	r2, [sp, #4]
 800bd20:	f1c0 0320 	rsb	r3, r0, #32
 800bd24:	fa02 f303 	lsl.w	r3, r2, r3
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	40c2      	lsrs	r2, r0
 800bd2c:	6163      	str	r3, [r4, #20]
 800bd2e:	9201      	str	r2, [sp, #4]
 800bd30:	9b01      	ldr	r3, [sp, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	bf14      	ite	ne
 800bd36:	2102      	movne	r1, #2
 800bd38:	2101      	moveq	r1, #1
 800bd3a:	61a3      	str	r3, [r4, #24]
 800bd3c:	6121      	str	r1, [r4, #16]
 800bd3e:	b1c5      	cbz	r5, 800bd72 <__d2b+0x96>
 800bd40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd44:	4405      	add	r5, r0
 800bd46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd4a:	603d      	str	r5, [r7, #0]
 800bd4c:	6030      	str	r0, [r6, #0]
 800bd4e:	4620      	mov	r0, r4
 800bd50:	b002      	add	sp, #8
 800bd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd5a:	e7d6      	b.n	800bd0a <__d2b+0x2e>
 800bd5c:	6161      	str	r1, [r4, #20]
 800bd5e:	e7e7      	b.n	800bd30 <__d2b+0x54>
 800bd60:	a801      	add	r0, sp, #4
 800bd62:	f7ff fd5d 	bl	800b820 <__lo0bits>
 800bd66:	2101      	movs	r1, #1
 800bd68:	9b01      	ldr	r3, [sp, #4]
 800bd6a:	6121      	str	r1, [r4, #16]
 800bd6c:	6163      	str	r3, [r4, #20]
 800bd6e:	3020      	adds	r0, #32
 800bd70:	e7e5      	b.n	800bd3e <__d2b+0x62>
 800bd72:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bd76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd7a:	6038      	str	r0, [r7, #0]
 800bd7c:	6918      	ldr	r0, [r3, #16]
 800bd7e:	f7ff fd2f 	bl	800b7e0 <__hi0bits>
 800bd82:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bd86:	6031      	str	r1, [r6, #0]
 800bd88:	e7e1      	b.n	800bd4e <__d2b+0x72>
 800bd8a:	bf00      	nop
 800bd8c:	0800d40f 	.word	0x0800d40f
 800bd90:	0800d420 	.word	0x0800d420

0800bd94 <_calloc_r>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	fba1 5402 	umull	r5, r4, r1, r2
 800bd9a:	b934      	cbnz	r4, 800bdaa <_calloc_r+0x16>
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f7fe f897 	bl	8009ed0 <_malloc_r>
 800bda2:	4606      	mov	r6, r0
 800bda4:	b928      	cbnz	r0, 800bdb2 <_calloc_r+0x1e>
 800bda6:	4630      	mov	r0, r6
 800bda8:	bd70      	pop	{r4, r5, r6, pc}
 800bdaa:	220c      	movs	r2, #12
 800bdac:	2600      	movs	r6, #0
 800bdae:	6002      	str	r2, [r0, #0]
 800bdb0:	e7f9      	b.n	800bda6 <_calloc_r+0x12>
 800bdb2:	462a      	mov	r2, r5
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	f7fe f81b 	bl	8009df0 <memset>
 800bdba:	e7f4      	b.n	800bda6 <_calloc_r+0x12>

0800bdbc <__ssputs_r>:
 800bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc0:	688e      	ldr	r6, [r1, #8]
 800bdc2:	4682      	mov	sl, r0
 800bdc4:	429e      	cmp	r6, r3
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	4690      	mov	r8, r2
 800bdca:	461f      	mov	r7, r3
 800bdcc:	d838      	bhi.n	800be40 <__ssputs_r+0x84>
 800bdce:	898a      	ldrh	r2, [r1, #12]
 800bdd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdd4:	d032      	beq.n	800be3c <__ssputs_r+0x80>
 800bdd6:	6825      	ldr	r5, [r4, #0]
 800bdd8:	6909      	ldr	r1, [r1, #16]
 800bdda:	3301      	adds	r3, #1
 800bddc:	eba5 0901 	sub.w	r9, r5, r1
 800bde0:	6965      	ldr	r5, [r4, #20]
 800bde2:	444b      	add	r3, r9
 800bde4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bde8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdec:	106d      	asrs	r5, r5, #1
 800bdee:	429d      	cmp	r5, r3
 800bdf0:	bf38      	it	cc
 800bdf2:	461d      	movcc	r5, r3
 800bdf4:	0553      	lsls	r3, r2, #21
 800bdf6:	d531      	bpl.n	800be5c <__ssputs_r+0xa0>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7fe f869 	bl	8009ed0 <_malloc_r>
 800bdfe:	4606      	mov	r6, r0
 800be00:	b950      	cbnz	r0, 800be18 <__ssputs_r+0x5c>
 800be02:	230c      	movs	r3, #12
 800be04:	f04f 30ff 	mov.w	r0, #4294967295
 800be08:	f8ca 3000 	str.w	r3, [sl]
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be12:	81a3      	strh	r3, [r4, #12]
 800be14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be18:	464a      	mov	r2, r9
 800be1a:	6921      	ldr	r1, [r4, #16]
 800be1c:	f7fd ffda 	bl	8009dd4 <memcpy>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be2a:	81a3      	strh	r3, [r4, #12]
 800be2c:	6126      	str	r6, [r4, #16]
 800be2e:	444e      	add	r6, r9
 800be30:	6026      	str	r6, [r4, #0]
 800be32:	463e      	mov	r6, r7
 800be34:	6165      	str	r5, [r4, #20]
 800be36:	eba5 0509 	sub.w	r5, r5, r9
 800be3a:	60a5      	str	r5, [r4, #8]
 800be3c:	42be      	cmp	r6, r7
 800be3e:	d900      	bls.n	800be42 <__ssputs_r+0x86>
 800be40:	463e      	mov	r6, r7
 800be42:	4632      	mov	r2, r6
 800be44:	4641      	mov	r1, r8
 800be46:	6820      	ldr	r0, [r4, #0]
 800be48:	f000 f959 	bl	800c0fe <memmove>
 800be4c:	68a3      	ldr	r3, [r4, #8]
 800be4e:	2000      	movs	r0, #0
 800be50:	1b9b      	subs	r3, r3, r6
 800be52:	60a3      	str	r3, [r4, #8]
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	4433      	add	r3, r6
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	e7db      	b.n	800be14 <__ssputs_r+0x58>
 800be5c:	462a      	mov	r2, r5
 800be5e:	f000 f968 	bl	800c132 <_realloc_r>
 800be62:	4606      	mov	r6, r0
 800be64:	2800      	cmp	r0, #0
 800be66:	d1e1      	bne.n	800be2c <__ssputs_r+0x70>
 800be68:	4650      	mov	r0, sl
 800be6a:	6921      	ldr	r1, [r4, #16]
 800be6c:	f7fd ffc8 	bl	8009e00 <_free_r>
 800be70:	e7c7      	b.n	800be02 <__ssputs_r+0x46>
	...

0800be74 <_svfiprintf_r>:
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	4698      	mov	r8, r3
 800be7a:	898b      	ldrh	r3, [r1, #12]
 800be7c:	4607      	mov	r7, r0
 800be7e:	061b      	lsls	r3, r3, #24
 800be80:	460d      	mov	r5, r1
 800be82:	4614      	mov	r4, r2
 800be84:	b09d      	sub	sp, #116	; 0x74
 800be86:	d50e      	bpl.n	800bea6 <_svfiprintf_r+0x32>
 800be88:	690b      	ldr	r3, [r1, #16]
 800be8a:	b963      	cbnz	r3, 800bea6 <_svfiprintf_r+0x32>
 800be8c:	2140      	movs	r1, #64	; 0x40
 800be8e:	f7fe f81f 	bl	8009ed0 <_malloc_r>
 800be92:	6028      	str	r0, [r5, #0]
 800be94:	6128      	str	r0, [r5, #16]
 800be96:	b920      	cbnz	r0, 800bea2 <_svfiprintf_r+0x2e>
 800be98:	230c      	movs	r3, #12
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	e0d1      	b.n	800c046 <_svfiprintf_r+0x1d2>
 800bea2:	2340      	movs	r3, #64	; 0x40
 800bea4:	616b      	str	r3, [r5, #20]
 800bea6:	2300      	movs	r3, #0
 800bea8:	9309      	str	r3, [sp, #36]	; 0x24
 800beaa:	2320      	movs	r3, #32
 800beac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800beb0:	2330      	movs	r3, #48	; 0x30
 800beb2:	f04f 0901 	mov.w	r9, #1
 800beb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800beba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c060 <_svfiprintf_r+0x1ec>
 800bebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bec2:	4623      	mov	r3, r4
 800bec4:	469a      	mov	sl, r3
 800bec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beca:	b10a      	cbz	r2, 800bed0 <_svfiprintf_r+0x5c>
 800becc:	2a25      	cmp	r2, #37	; 0x25
 800bece:	d1f9      	bne.n	800bec4 <_svfiprintf_r+0x50>
 800bed0:	ebba 0b04 	subs.w	fp, sl, r4
 800bed4:	d00b      	beq.n	800beee <_svfiprintf_r+0x7a>
 800bed6:	465b      	mov	r3, fp
 800bed8:	4622      	mov	r2, r4
 800beda:	4629      	mov	r1, r5
 800bedc:	4638      	mov	r0, r7
 800bede:	f7ff ff6d 	bl	800bdbc <__ssputs_r>
 800bee2:	3001      	adds	r0, #1
 800bee4:	f000 80aa 	beq.w	800c03c <_svfiprintf_r+0x1c8>
 800bee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beea:	445a      	add	r2, fp
 800beec:	9209      	str	r2, [sp, #36]	; 0x24
 800beee:	f89a 3000 	ldrb.w	r3, [sl]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 80a2 	beq.w	800c03c <_svfiprintf_r+0x1c8>
 800bef8:	2300      	movs	r3, #0
 800befa:	f04f 32ff 	mov.w	r2, #4294967295
 800befe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf02:	f10a 0a01 	add.w	sl, sl, #1
 800bf06:	9304      	str	r3, [sp, #16]
 800bf08:	9307      	str	r3, [sp, #28]
 800bf0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf0e:	931a      	str	r3, [sp, #104]	; 0x68
 800bf10:	4654      	mov	r4, sl
 800bf12:	2205      	movs	r2, #5
 800bf14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf18:	4851      	ldr	r0, [pc, #324]	; (800c060 <_svfiprintf_r+0x1ec>)
 800bf1a:	f7ff fb9f 	bl	800b65c <memchr>
 800bf1e:	9a04      	ldr	r2, [sp, #16]
 800bf20:	b9d8      	cbnz	r0, 800bf5a <_svfiprintf_r+0xe6>
 800bf22:	06d0      	lsls	r0, r2, #27
 800bf24:	bf44      	itt	mi
 800bf26:	2320      	movmi	r3, #32
 800bf28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf2c:	0711      	lsls	r1, r2, #28
 800bf2e:	bf44      	itt	mi
 800bf30:	232b      	movmi	r3, #43	; 0x2b
 800bf32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf36:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf3c:	d015      	beq.n	800bf6a <_svfiprintf_r+0xf6>
 800bf3e:	4654      	mov	r4, sl
 800bf40:	2000      	movs	r0, #0
 800bf42:	f04f 0c0a 	mov.w	ip, #10
 800bf46:	9a07      	ldr	r2, [sp, #28]
 800bf48:	4621      	mov	r1, r4
 800bf4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf4e:	3b30      	subs	r3, #48	; 0x30
 800bf50:	2b09      	cmp	r3, #9
 800bf52:	d94e      	bls.n	800bff2 <_svfiprintf_r+0x17e>
 800bf54:	b1b0      	cbz	r0, 800bf84 <_svfiprintf_r+0x110>
 800bf56:	9207      	str	r2, [sp, #28]
 800bf58:	e014      	b.n	800bf84 <_svfiprintf_r+0x110>
 800bf5a:	eba0 0308 	sub.w	r3, r0, r8
 800bf5e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf62:	4313      	orrs	r3, r2
 800bf64:	46a2      	mov	sl, r4
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	e7d2      	b.n	800bf10 <_svfiprintf_r+0x9c>
 800bf6a:	9b03      	ldr	r3, [sp, #12]
 800bf6c:	1d19      	adds	r1, r3, #4
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	9103      	str	r1, [sp, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	bfbb      	ittet	lt
 800bf76:	425b      	neglt	r3, r3
 800bf78:	f042 0202 	orrlt.w	r2, r2, #2
 800bf7c:	9307      	strge	r3, [sp, #28]
 800bf7e:	9307      	strlt	r3, [sp, #28]
 800bf80:	bfb8      	it	lt
 800bf82:	9204      	strlt	r2, [sp, #16]
 800bf84:	7823      	ldrb	r3, [r4, #0]
 800bf86:	2b2e      	cmp	r3, #46	; 0x2e
 800bf88:	d10c      	bne.n	800bfa4 <_svfiprintf_r+0x130>
 800bf8a:	7863      	ldrb	r3, [r4, #1]
 800bf8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf8e:	d135      	bne.n	800bffc <_svfiprintf_r+0x188>
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	3402      	adds	r4, #2
 800bf94:	1d1a      	adds	r2, r3, #4
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	9203      	str	r2, [sp, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bfb8      	it	lt
 800bf9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfa2:	9305      	str	r3, [sp, #20]
 800bfa4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c064 <_svfiprintf_r+0x1f0>
 800bfa8:	2203      	movs	r2, #3
 800bfaa:	4650      	mov	r0, sl
 800bfac:	7821      	ldrb	r1, [r4, #0]
 800bfae:	f7ff fb55 	bl	800b65c <memchr>
 800bfb2:	b140      	cbz	r0, 800bfc6 <_svfiprintf_r+0x152>
 800bfb4:	2340      	movs	r3, #64	; 0x40
 800bfb6:	eba0 000a 	sub.w	r0, r0, sl
 800bfba:	fa03 f000 	lsl.w	r0, r3, r0
 800bfbe:	9b04      	ldr	r3, [sp, #16]
 800bfc0:	3401      	adds	r4, #1
 800bfc2:	4303      	orrs	r3, r0
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfca:	2206      	movs	r2, #6
 800bfcc:	4826      	ldr	r0, [pc, #152]	; (800c068 <_svfiprintf_r+0x1f4>)
 800bfce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfd2:	f7ff fb43 	bl	800b65c <memchr>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d038      	beq.n	800c04c <_svfiprintf_r+0x1d8>
 800bfda:	4b24      	ldr	r3, [pc, #144]	; (800c06c <_svfiprintf_r+0x1f8>)
 800bfdc:	bb1b      	cbnz	r3, 800c026 <_svfiprintf_r+0x1b2>
 800bfde:	9b03      	ldr	r3, [sp, #12]
 800bfe0:	3307      	adds	r3, #7
 800bfe2:	f023 0307 	bic.w	r3, r3, #7
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfec:	4433      	add	r3, r6
 800bfee:	9309      	str	r3, [sp, #36]	; 0x24
 800bff0:	e767      	b.n	800bec2 <_svfiprintf_r+0x4e>
 800bff2:	460c      	mov	r4, r1
 800bff4:	2001      	movs	r0, #1
 800bff6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bffa:	e7a5      	b.n	800bf48 <_svfiprintf_r+0xd4>
 800bffc:	2300      	movs	r3, #0
 800bffe:	f04f 0c0a 	mov.w	ip, #10
 800c002:	4619      	mov	r1, r3
 800c004:	3401      	adds	r4, #1
 800c006:	9305      	str	r3, [sp, #20]
 800c008:	4620      	mov	r0, r4
 800c00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c00e:	3a30      	subs	r2, #48	; 0x30
 800c010:	2a09      	cmp	r2, #9
 800c012:	d903      	bls.n	800c01c <_svfiprintf_r+0x1a8>
 800c014:	2b00      	cmp	r3, #0
 800c016:	d0c5      	beq.n	800bfa4 <_svfiprintf_r+0x130>
 800c018:	9105      	str	r1, [sp, #20]
 800c01a:	e7c3      	b.n	800bfa4 <_svfiprintf_r+0x130>
 800c01c:	4604      	mov	r4, r0
 800c01e:	2301      	movs	r3, #1
 800c020:	fb0c 2101 	mla	r1, ip, r1, r2
 800c024:	e7f0      	b.n	800c008 <_svfiprintf_r+0x194>
 800c026:	ab03      	add	r3, sp, #12
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	462a      	mov	r2, r5
 800c02c:	4638      	mov	r0, r7
 800c02e:	4b10      	ldr	r3, [pc, #64]	; (800c070 <_svfiprintf_r+0x1fc>)
 800c030:	a904      	add	r1, sp, #16
 800c032:	f7fe f85f 	bl	800a0f4 <_printf_float>
 800c036:	1c42      	adds	r2, r0, #1
 800c038:	4606      	mov	r6, r0
 800c03a:	d1d6      	bne.n	800bfea <_svfiprintf_r+0x176>
 800c03c:	89ab      	ldrh	r3, [r5, #12]
 800c03e:	065b      	lsls	r3, r3, #25
 800c040:	f53f af2c 	bmi.w	800be9c <_svfiprintf_r+0x28>
 800c044:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c046:	b01d      	add	sp, #116	; 0x74
 800c048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04c:	ab03      	add	r3, sp, #12
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	462a      	mov	r2, r5
 800c052:	4638      	mov	r0, r7
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <_svfiprintf_r+0x1fc>)
 800c056:	a904      	add	r1, sp, #16
 800c058:	f7fe fae8 	bl	800a62c <_printf_i>
 800c05c:	e7eb      	b.n	800c036 <_svfiprintf_r+0x1c2>
 800c05e:	bf00      	nop
 800c060:	0800d57c 	.word	0x0800d57c
 800c064:	0800d582 	.word	0x0800d582
 800c068:	0800d586 	.word	0x0800d586
 800c06c:	0800a0f5 	.word	0x0800a0f5
 800c070:	0800bdbd 	.word	0x0800bdbd

0800c074 <__assert_func>:
 800c074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c076:	4614      	mov	r4, r2
 800c078:	461a      	mov	r2, r3
 800c07a:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <__assert_func+0x2c>)
 800c07c:	4605      	mov	r5, r0
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68d8      	ldr	r0, [r3, #12]
 800c082:	b14c      	cbz	r4, 800c098 <__assert_func+0x24>
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <__assert_func+0x30>)
 800c086:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c08a:	9100      	str	r1, [sp, #0]
 800c08c:	462b      	mov	r3, r5
 800c08e:	4906      	ldr	r1, [pc, #24]	; (800c0a8 <__assert_func+0x34>)
 800c090:	f000 f80e 	bl	800c0b0 <fiprintf>
 800c094:	f7fd fe64 	bl	8009d60 <abort>
 800c098:	4b04      	ldr	r3, [pc, #16]	; (800c0ac <__assert_func+0x38>)
 800c09a:	461c      	mov	r4, r3
 800c09c:	e7f3      	b.n	800c086 <__assert_func+0x12>
 800c09e:	bf00      	nop
 800c0a0:	200000cc 	.word	0x200000cc
 800c0a4:	0800d58d 	.word	0x0800d58d
 800c0a8:	0800d59a 	.word	0x0800d59a
 800c0ac:	0800d5c8 	.word	0x0800d5c8

0800c0b0 <fiprintf>:
 800c0b0:	b40e      	push	{r1, r2, r3}
 800c0b2:	b503      	push	{r0, r1, lr}
 800c0b4:	4601      	mov	r1, r0
 800c0b6:	ab03      	add	r3, sp, #12
 800c0b8:	4805      	ldr	r0, [pc, #20]	; (800c0d0 <fiprintf+0x20>)
 800c0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0be:	6800      	ldr	r0, [r0, #0]
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	f000 f88d 	bl	800c1e0 <_vfiprintf_r>
 800c0c6:	b002      	add	sp, #8
 800c0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0cc:	b003      	add	sp, #12
 800c0ce:	4770      	bx	lr
 800c0d0:	200000cc 	.word	0x200000cc

0800c0d4 <__retarget_lock_init_recursive>:
 800c0d4:	4770      	bx	lr

0800c0d6 <__retarget_lock_acquire_recursive>:
 800c0d6:	4770      	bx	lr

0800c0d8 <__retarget_lock_release_recursive>:
 800c0d8:	4770      	bx	lr

0800c0da <__ascii_mbtowc>:
 800c0da:	b082      	sub	sp, #8
 800c0dc:	b901      	cbnz	r1, 800c0e0 <__ascii_mbtowc+0x6>
 800c0de:	a901      	add	r1, sp, #4
 800c0e0:	b142      	cbz	r2, 800c0f4 <__ascii_mbtowc+0x1a>
 800c0e2:	b14b      	cbz	r3, 800c0f8 <__ascii_mbtowc+0x1e>
 800c0e4:	7813      	ldrb	r3, [r2, #0]
 800c0e6:	600b      	str	r3, [r1, #0]
 800c0e8:	7812      	ldrb	r2, [r2, #0]
 800c0ea:	1e10      	subs	r0, r2, #0
 800c0ec:	bf18      	it	ne
 800c0ee:	2001      	movne	r0, #1
 800c0f0:	b002      	add	sp, #8
 800c0f2:	4770      	bx	lr
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	e7fb      	b.n	800c0f0 <__ascii_mbtowc+0x16>
 800c0f8:	f06f 0001 	mvn.w	r0, #1
 800c0fc:	e7f8      	b.n	800c0f0 <__ascii_mbtowc+0x16>

0800c0fe <memmove>:
 800c0fe:	4288      	cmp	r0, r1
 800c100:	b510      	push	{r4, lr}
 800c102:	eb01 0402 	add.w	r4, r1, r2
 800c106:	d902      	bls.n	800c10e <memmove+0x10>
 800c108:	4284      	cmp	r4, r0
 800c10a:	4623      	mov	r3, r4
 800c10c:	d807      	bhi.n	800c11e <memmove+0x20>
 800c10e:	1e43      	subs	r3, r0, #1
 800c110:	42a1      	cmp	r1, r4
 800c112:	d008      	beq.n	800c126 <memmove+0x28>
 800c114:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c118:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c11c:	e7f8      	b.n	800c110 <memmove+0x12>
 800c11e:	4601      	mov	r1, r0
 800c120:	4402      	add	r2, r0
 800c122:	428a      	cmp	r2, r1
 800c124:	d100      	bne.n	800c128 <memmove+0x2a>
 800c126:	bd10      	pop	{r4, pc}
 800c128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c12c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c130:	e7f7      	b.n	800c122 <memmove+0x24>

0800c132 <_realloc_r>:
 800c132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c136:	4680      	mov	r8, r0
 800c138:	4614      	mov	r4, r2
 800c13a:	460e      	mov	r6, r1
 800c13c:	b921      	cbnz	r1, 800c148 <_realloc_r+0x16>
 800c13e:	4611      	mov	r1, r2
 800c140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c144:	f7fd bec4 	b.w	8009ed0 <_malloc_r>
 800c148:	b92a      	cbnz	r2, 800c156 <_realloc_r+0x24>
 800c14a:	f7fd fe59 	bl	8009e00 <_free_r>
 800c14e:	4625      	mov	r5, r4
 800c150:	4628      	mov	r0, r5
 800c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c156:	f000 fc59 	bl	800ca0c <_malloc_usable_size_r>
 800c15a:	4284      	cmp	r4, r0
 800c15c:	4607      	mov	r7, r0
 800c15e:	d802      	bhi.n	800c166 <_realloc_r+0x34>
 800c160:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c164:	d812      	bhi.n	800c18c <_realloc_r+0x5a>
 800c166:	4621      	mov	r1, r4
 800c168:	4640      	mov	r0, r8
 800c16a:	f7fd feb1 	bl	8009ed0 <_malloc_r>
 800c16e:	4605      	mov	r5, r0
 800c170:	2800      	cmp	r0, #0
 800c172:	d0ed      	beq.n	800c150 <_realloc_r+0x1e>
 800c174:	42bc      	cmp	r4, r7
 800c176:	4622      	mov	r2, r4
 800c178:	4631      	mov	r1, r6
 800c17a:	bf28      	it	cs
 800c17c:	463a      	movcs	r2, r7
 800c17e:	f7fd fe29 	bl	8009dd4 <memcpy>
 800c182:	4631      	mov	r1, r6
 800c184:	4640      	mov	r0, r8
 800c186:	f7fd fe3b 	bl	8009e00 <_free_r>
 800c18a:	e7e1      	b.n	800c150 <_realloc_r+0x1e>
 800c18c:	4635      	mov	r5, r6
 800c18e:	e7df      	b.n	800c150 <_realloc_r+0x1e>

0800c190 <__sfputc_r>:
 800c190:	6893      	ldr	r3, [r2, #8]
 800c192:	b410      	push	{r4}
 800c194:	3b01      	subs	r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	6093      	str	r3, [r2, #8]
 800c19a:	da07      	bge.n	800c1ac <__sfputc_r+0x1c>
 800c19c:	6994      	ldr	r4, [r2, #24]
 800c19e:	42a3      	cmp	r3, r4
 800c1a0:	db01      	blt.n	800c1a6 <__sfputc_r+0x16>
 800c1a2:	290a      	cmp	r1, #10
 800c1a4:	d102      	bne.n	800c1ac <__sfputc_r+0x1c>
 800c1a6:	bc10      	pop	{r4}
 800c1a8:	f000 b94a 	b.w	800c440 <__swbuf_r>
 800c1ac:	6813      	ldr	r3, [r2, #0]
 800c1ae:	1c58      	adds	r0, r3, #1
 800c1b0:	6010      	str	r0, [r2, #0]
 800c1b2:	7019      	strb	r1, [r3, #0]
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	bc10      	pop	{r4}
 800c1b8:	4770      	bx	lr

0800c1ba <__sfputs_r>:
 800c1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1bc:	4606      	mov	r6, r0
 800c1be:	460f      	mov	r7, r1
 800c1c0:	4614      	mov	r4, r2
 800c1c2:	18d5      	adds	r5, r2, r3
 800c1c4:	42ac      	cmp	r4, r5
 800c1c6:	d101      	bne.n	800c1cc <__sfputs_r+0x12>
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	e007      	b.n	800c1dc <__sfputs_r+0x22>
 800c1cc:	463a      	mov	r2, r7
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d4:	f7ff ffdc 	bl	800c190 <__sfputc_r>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d1f3      	bne.n	800c1c4 <__sfputs_r+0xa>
 800c1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1e0 <_vfiprintf_r>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	4614      	mov	r4, r2
 800c1e8:	4698      	mov	r8, r3
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	b09d      	sub	sp, #116	; 0x74
 800c1ee:	b118      	cbz	r0, 800c1f8 <_vfiprintf_r+0x18>
 800c1f0:	6983      	ldr	r3, [r0, #24]
 800c1f2:	b90b      	cbnz	r3, 800c1f8 <_vfiprintf_r+0x18>
 800c1f4:	f000 fb08 	bl	800c808 <__sinit>
 800c1f8:	4b89      	ldr	r3, [pc, #548]	; (800c420 <_vfiprintf_r+0x240>)
 800c1fa:	429d      	cmp	r5, r3
 800c1fc:	d11b      	bne.n	800c236 <_vfiprintf_r+0x56>
 800c1fe:	6875      	ldr	r5, [r6, #4]
 800c200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c202:	07d9      	lsls	r1, r3, #31
 800c204:	d405      	bmi.n	800c212 <_vfiprintf_r+0x32>
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	059a      	lsls	r2, r3, #22
 800c20a:	d402      	bmi.n	800c212 <_vfiprintf_r+0x32>
 800c20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20e:	f7ff ff62 	bl	800c0d6 <__retarget_lock_acquire_recursive>
 800c212:	89ab      	ldrh	r3, [r5, #12]
 800c214:	071b      	lsls	r3, r3, #28
 800c216:	d501      	bpl.n	800c21c <_vfiprintf_r+0x3c>
 800c218:	692b      	ldr	r3, [r5, #16]
 800c21a:	b9eb      	cbnz	r3, 800c258 <_vfiprintf_r+0x78>
 800c21c:	4629      	mov	r1, r5
 800c21e:	4630      	mov	r0, r6
 800c220:	f000 f96e 	bl	800c500 <__swsetup_r>
 800c224:	b1c0      	cbz	r0, 800c258 <_vfiprintf_r+0x78>
 800c226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c228:	07dc      	lsls	r4, r3, #31
 800c22a:	d50e      	bpl.n	800c24a <_vfiprintf_r+0x6a>
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	b01d      	add	sp, #116	; 0x74
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c236:	4b7b      	ldr	r3, [pc, #492]	; (800c424 <_vfiprintf_r+0x244>)
 800c238:	429d      	cmp	r5, r3
 800c23a:	d101      	bne.n	800c240 <_vfiprintf_r+0x60>
 800c23c:	68b5      	ldr	r5, [r6, #8]
 800c23e:	e7df      	b.n	800c200 <_vfiprintf_r+0x20>
 800c240:	4b79      	ldr	r3, [pc, #484]	; (800c428 <_vfiprintf_r+0x248>)
 800c242:	429d      	cmp	r5, r3
 800c244:	bf08      	it	eq
 800c246:	68f5      	ldreq	r5, [r6, #12]
 800c248:	e7da      	b.n	800c200 <_vfiprintf_r+0x20>
 800c24a:	89ab      	ldrh	r3, [r5, #12]
 800c24c:	0598      	lsls	r0, r3, #22
 800c24e:	d4ed      	bmi.n	800c22c <_vfiprintf_r+0x4c>
 800c250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c252:	f7ff ff41 	bl	800c0d8 <__retarget_lock_release_recursive>
 800c256:	e7e9      	b.n	800c22c <_vfiprintf_r+0x4c>
 800c258:	2300      	movs	r3, #0
 800c25a:	9309      	str	r3, [sp, #36]	; 0x24
 800c25c:	2320      	movs	r3, #32
 800c25e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c262:	2330      	movs	r3, #48	; 0x30
 800c264:	f04f 0901 	mov.w	r9, #1
 800c268:	f8cd 800c 	str.w	r8, [sp, #12]
 800c26c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c42c <_vfiprintf_r+0x24c>
 800c270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c274:	4623      	mov	r3, r4
 800c276:	469a      	mov	sl, r3
 800c278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c27c:	b10a      	cbz	r2, 800c282 <_vfiprintf_r+0xa2>
 800c27e:	2a25      	cmp	r2, #37	; 0x25
 800c280:	d1f9      	bne.n	800c276 <_vfiprintf_r+0x96>
 800c282:	ebba 0b04 	subs.w	fp, sl, r4
 800c286:	d00b      	beq.n	800c2a0 <_vfiprintf_r+0xc0>
 800c288:	465b      	mov	r3, fp
 800c28a:	4622      	mov	r2, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff ff93 	bl	800c1ba <__sfputs_r>
 800c294:	3001      	adds	r0, #1
 800c296:	f000 80aa 	beq.w	800c3ee <_vfiprintf_r+0x20e>
 800c29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c29c:	445a      	add	r2, fp
 800c29e:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 80a2 	beq.w	800c3ee <_vfiprintf_r+0x20e>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b4:	f10a 0a01 	add.w	sl, sl, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	9307      	str	r3, [sp, #28]
 800c2bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2c0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2c2:	4654      	mov	r4, sl
 800c2c4:	2205      	movs	r2, #5
 800c2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ca:	4858      	ldr	r0, [pc, #352]	; (800c42c <_vfiprintf_r+0x24c>)
 800c2cc:	f7ff f9c6 	bl	800b65c <memchr>
 800c2d0:	9a04      	ldr	r2, [sp, #16]
 800c2d2:	b9d8      	cbnz	r0, 800c30c <_vfiprintf_r+0x12c>
 800c2d4:	06d1      	lsls	r1, r2, #27
 800c2d6:	bf44      	itt	mi
 800c2d8:	2320      	movmi	r3, #32
 800c2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2de:	0713      	lsls	r3, r2, #28
 800c2e0:	bf44      	itt	mi
 800c2e2:	232b      	movmi	r3, #43	; 0x2b
 800c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ee:	d015      	beq.n	800c31c <_vfiprintf_r+0x13c>
 800c2f0:	4654      	mov	r4, sl
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	f04f 0c0a 	mov.w	ip, #10
 800c2f8:	9a07      	ldr	r2, [sp, #28]
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c300:	3b30      	subs	r3, #48	; 0x30
 800c302:	2b09      	cmp	r3, #9
 800c304:	d94e      	bls.n	800c3a4 <_vfiprintf_r+0x1c4>
 800c306:	b1b0      	cbz	r0, 800c336 <_vfiprintf_r+0x156>
 800c308:	9207      	str	r2, [sp, #28]
 800c30a:	e014      	b.n	800c336 <_vfiprintf_r+0x156>
 800c30c:	eba0 0308 	sub.w	r3, r0, r8
 800c310:	fa09 f303 	lsl.w	r3, r9, r3
 800c314:	4313      	orrs	r3, r2
 800c316:	46a2      	mov	sl, r4
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	e7d2      	b.n	800c2c2 <_vfiprintf_r+0xe2>
 800c31c:	9b03      	ldr	r3, [sp, #12]
 800c31e:	1d19      	adds	r1, r3, #4
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	9103      	str	r1, [sp, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	bfbb      	ittet	lt
 800c328:	425b      	neglt	r3, r3
 800c32a:	f042 0202 	orrlt.w	r2, r2, #2
 800c32e:	9307      	strge	r3, [sp, #28]
 800c330:	9307      	strlt	r3, [sp, #28]
 800c332:	bfb8      	it	lt
 800c334:	9204      	strlt	r2, [sp, #16]
 800c336:	7823      	ldrb	r3, [r4, #0]
 800c338:	2b2e      	cmp	r3, #46	; 0x2e
 800c33a:	d10c      	bne.n	800c356 <_vfiprintf_r+0x176>
 800c33c:	7863      	ldrb	r3, [r4, #1]
 800c33e:	2b2a      	cmp	r3, #42	; 0x2a
 800c340:	d135      	bne.n	800c3ae <_vfiprintf_r+0x1ce>
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	3402      	adds	r4, #2
 800c346:	1d1a      	adds	r2, r3, #4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	9203      	str	r2, [sp, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfb8      	it	lt
 800c350:	f04f 33ff 	movlt.w	r3, #4294967295
 800c354:	9305      	str	r3, [sp, #20]
 800c356:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c430 <_vfiprintf_r+0x250>
 800c35a:	2203      	movs	r2, #3
 800c35c:	4650      	mov	r0, sl
 800c35e:	7821      	ldrb	r1, [r4, #0]
 800c360:	f7ff f97c 	bl	800b65c <memchr>
 800c364:	b140      	cbz	r0, 800c378 <_vfiprintf_r+0x198>
 800c366:	2340      	movs	r3, #64	; 0x40
 800c368:	eba0 000a 	sub.w	r0, r0, sl
 800c36c:	fa03 f000 	lsl.w	r0, r3, r0
 800c370:	9b04      	ldr	r3, [sp, #16]
 800c372:	3401      	adds	r4, #1
 800c374:	4303      	orrs	r3, r0
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37c:	2206      	movs	r2, #6
 800c37e:	482d      	ldr	r0, [pc, #180]	; (800c434 <_vfiprintf_r+0x254>)
 800c380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c384:	f7ff f96a 	bl	800b65c <memchr>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d03f      	beq.n	800c40c <_vfiprintf_r+0x22c>
 800c38c:	4b2a      	ldr	r3, [pc, #168]	; (800c438 <_vfiprintf_r+0x258>)
 800c38e:	bb1b      	cbnz	r3, 800c3d8 <_vfiprintf_r+0x1f8>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	3307      	adds	r3, #7
 800c394:	f023 0307 	bic.w	r3, r3, #7
 800c398:	3308      	adds	r3, #8
 800c39a:	9303      	str	r3, [sp, #12]
 800c39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39e:	443b      	add	r3, r7
 800c3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a2:	e767      	b.n	800c274 <_vfiprintf_r+0x94>
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	2001      	movs	r0, #1
 800c3a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ac:	e7a5      	b.n	800c2fa <_vfiprintf_r+0x11a>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f04f 0c0a 	mov.w	ip, #10
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	3401      	adds	r4, #1
 800c3b8:	9305      	str	r3, [sp, #20]
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c0:	3a30      	subs	r2, #48	; 0x30
 800c3c2:	2a09      	cmp	r2, #9
 800c3c4:	d903      	bls.n	800c3ce <_vfiprintf_r+0x1ee>
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0c5      	beq.n	800c356 <_vfiprintf_r+0x176>
 800c3ca:	9105      	str	r1, [sp, #20]
 800c3cc:	e7c3      	b.n	800c356 <_vfiprintf_r+0x176>
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d6:	e7f0      	b.n	800c3ba <_vfiprintf_r+0x1da>
 800c3d8:	ab03      	add	r3, sp, #12
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	462a      	mov	r2, r5
 800c3de:	4630      	mov	r0, r6
 800c3e0:	4b16      	ldr	r3, [pc, #88]	; (800c43c <_vfiprintf_r+0x25c>)
 800c3e2:	a904      	add	r1, sp, #16
 800c3e4:	f7fd fe86 	bl	800a0f4 <_printf_float>
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	1c78      	adds	r0, r7, #1
 800c3ec:	d1d6      	bne.n	800c39c <_vfiprintf_r+0x1bc>
 800c3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f0:	07d9      	lsls	r1, r3, #31
 800c3f2:	d405      	bmi.n	800c400 <_vfiprintf_r+0x220>
 800c3f4:	89ab      	ldrh	r3, [r5, #12]
 800c3f6:	059a      	lsls	r2, r3, #22
 800c3f8:	d402      	bmi.n	800c400 <_vfiprintf_r+0x220>
 800c3fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3fc:	f7ff fe6c 	bl	800c0d8 <__retarget_lock_release_recursive>
 800c400:	89ab      	ldrh	r3, [r5, #12]
 800c402:	065b      	lsls	r3, r3, #25
 800c404:	f53f af12 	bmi.w	800c22c <_vfiprintf_r+0x4c>
 800c408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c40a:	e711      	b.n	800c230 <_vfiprintf_r+0x50>
 800c40c:	ab03      	add	r3, sp, #12
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	462a      	mov	r2, r5
 800c412:	4630      	mov	r0, r6
 800c414:	4b09      	ldr	r3, [pc, #36]	; (800c43c <_vfiprintf_r+0x25c>)
 800c416:	a904      	add	r1, sp, #16
 800c418:	f7fe f908 	bl	800a62c <_printf_i>
 800c41c:	e7e4      	b.n	800c3e8 <_vfiprintf_r+0x208>
 800c41e:	bf00      	nop
 800c420:	0800d6f4 	.word	0x0800d6f4
 800c424:	0800d714 	.word	0x0800d714
 800c428:	0800d6d4 	.word	0x0800d6d4
 800c42c:	0800d57c 	.word	0x0800d57c
 800c430:	0800d582 	.word	0x0800d582
 800c434:	0800d586 	.word	0x0800d586
 800c438:	0800a0f5 	.word	0x0800a0f5
 800c43c:	0800c1bb 	.word	0x0800c1bb

0800c440 <__swbuf_r>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	460e      	mov	r6, r1
 800c444:	4614      	mov	r4, r2
 800c446:	4605      	mov	r5, r0
 800c448:	b118      	cbz	r0, 800c452 <__swbuf_r+0x12>
 800c44a:	6983      	ldr	r3, [r0, #24]
 800c44c:	b90b      	cbnz	r3, 800c452 <__swbuf_r+0x12>
 800c44e:	f000 f9db 	bl	800c808 <__sinit>
 800c452:	4b21      	ldr	r3, [pc, #132]	; (800c4d8 <__swbuf_r+0x98>)
 800c454:	429c      	cmp	r4, r3
 800c456:	d12b      	bne.n	800c4b0 <__swbuf_r+0x70>
 800c458:	686c      	ldr	r4, [r5, #4]
 800c45a:	69a3      	ldr	r3, [r4, #24]
 800c45c:	60a3      	str	r3, [r4, #8]
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	071a      	lsls	r2, r3, #28
 800c462:	d52f      	bpl.n	800c4c4 <__swbuf_r+0x84>
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	b36b      	cbz	r3, 800c4c4 <__swbuf_r+0x84>
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	6820      	ldr	r0, [r4, #0]
 800c46c:	b2f6      	uxtb	r6, r6
 800c46e:	1ac0      	subs	r0, r0, r3
 800c470:	6963      	ldr	r3, [r4, #20]
 800c472:	4637      	mov	r7, r6
 800c474:	4283      	cmp	r3, r0
 800c476:	dc04      	bgt.n	800c482 <__swbuf_r+0x42>
 800c478:	4621      	mov	r1, r4
 800c47a:	4628      	mov	r0, r5
 800c47c:	f000 f930 	bl	800c6e0 <_fflush_r>
 800c480:	bb30      	cbnz	r0, 800c4d0 <__swbuf_r+0x90>
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	3001      	adds	r0, #1
 800c486:	3b01      	subs	r3, #1
 800c488:	60a3      	str	r3, [r4, #8]
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	6022      	str	r2, [r4, #0]
 800c490:	701e      	strb	r6, [r3, #0]
 800c492:	6963      	ldr	r3, [r4, #20]
 800c494:	4283      	cmp	r3, r0
 800c496:	d004      	beq.n	800c4a2 <__swbuf_r+0x62>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	07db      	lsls	r3, r3, #31
 800c49c:	d506      	bpl.n	800c4ac <__swbuf_r+0x6c>
 800c49e:	2e0a      	cmp	r6, #10
 800c4a0:	d104      	bne.n	800c4ac <__swbuf_r+0x6c>
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 f91b 	bl	800c6e0 <_fflush_r>
 800c4aa:	b988      	cbnz	r0, 800c4d0 <__swbuf_r+0x90>
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4b0:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <__swbuf_r+0x9c>)
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	d101      	bne.n	800c4ba <__swbuf_r+0x7a>
 800c4b6:	68ac      	ldr	r4, [r5, #8]
 800c4b8:	e7cf      	b.n	800c45a <__swbuf_r+0x1a>
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <__swbuf_r+0xa0>)
 800c4bc:	429c      	cmp	r4, r3
 800c4be:	bf08      	it	eq
 800c4c0:	68ec      	ldreq	r4, [r5, #12]
 800c4c2:	e7ca      	b.n	800c45a <__swbuf_r+0x1a>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f000 f81a 	bl	800c500 <__swsetup_r>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d0cb      	beq.n	800c468 <__swbuf_r+0x28>
 800c4d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c4d4:	e7ea      	b.n	800c4ac <__swbuf_r+0x6c>
 800c4d6:	bf00      	nop
 800c4d8:	0800d6f4 	.word	0x0800d6f4
 800c4dc:	0800d714 	.word	0x0800d714
 800c4e0:	0800d6d4 	.word	0x0800d6d4

0800c4e4 <__ascii_wctomb>:
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	b141      	cbz	r1, 800c4fc <__ascii_wctomb+0x18>
 800c4ea:	2aff      	cmp	r2, #255	; 0xff
 800c4ec:	d904      	bls.n	800c4f8 <__ascii_wctomb+0x14>
 800c4ee:	228a      	movs	r2, #138	; 0x8a
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	4770      	bx	lr
 800c4f8:	2001      	movs	r0, #1
 800c4fa:	700a      	strb	r2, [r1, #0]
 800c4fc:	4770      	bx	lr
	...

0800c500 <__swsetup_r>:
 800c500:	4b32      	ldr	r3, [pc, #200]	; (800c5cc <__swsetup_r+0xcc>)
 800c502:	b570      	push	{r4, r5, r6, lr}
 800c504:	681d      	ldr	r5, [r3, #0]
 800c506:	4606      	mov	r6, r0
 800c508:	460c      	mov	r4, r1
 800c50a:	b125      	cbz	r5, 800c516 <__swsetup_r+0x16>
 800c50c:	69ab      	ldr	r3, [r5, #24]
 800c50e:	b913      	cbnz	r3, 800c516 <__swsetup_r+0x16>
 800c510:	4628      	mov	r0, r5
 800c512:	f000 f979 	bl	800c808 <__sinit>
 800c516:	4b2e      	ldr	r3, [pc, #184]	; (800c5d0 <__swsetup_r+0xd0>)
 800c518:	429c      	cmp	r4, r3
 800c51a:	d10f      	bne.n	800c53c <__swsetup_r+0x3c>
 800c51c:	686c      	ldr	r4, [r5, #4]
 800c51e:	89a3      	ldrh	r3, [r4, #12]
 800c520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c524:	0719      	lsls	r1, r3, #28
 800c526:	d42c      	bmi.n	800c582 <__swsetup_r+0x82>
 800c528:	06dd      	lsls	r5, r3, #27
 800c52a:	d411      	bmi.n	800c550 <__swsetup_r+0x50>
 800c52c:	2309      	movs	r3, #9
 800c52e:	6033      	str	r3, [r6, #0]
 800c530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c534:	f04f 30ff 	mov.w	r0, #4294967295
 800c538:	81a3      	strh	r3, [r4, #12]
 800c53a:	e03e      	b.n	800c5ba <__swsetup_r+0xba>
 800c53c:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <__swsetup_r+0xd4>)
 800c53e:	429c      	cmp	r4, r3
 800c540:	d101      	bne.n	800c546 <__swsetup_r+0x46>
 800c542:	68ac      	ldr	r4, [r5, #8]
 800c544:	e7eb      	b.n	800c51e <__swsetup_r+0x1e>
 800c546:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <__swsetup_r+0xd8>)
 800c548:	429c      	cmp	r4, r3
 800c54a:	bf08      	it	eq
 800c54c:	68ec      	ldreq	r4, [r5, #12]
 800c54e:	e7e6      	b.n	800c51e <__swsetup_r+0x1e>
 800c550:	0758      	lsls	r0, r3, #29
 800c552:	d512      	bpl.n	800c57a <__swsetup_r+0x7a>
 800c554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c556:	b141      	cbz	r1, 800c56a <__swsetup_r+0x6a>
 800c558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c55c:	4299      	cmp	r1, r3
 800c55e:	d002      	beq.n	800c566 <__swsetup_r+0x66>
 800c560:	4630      	mov	r0, r6
 800c562:	f7fd fc4d 	bl	8009e00 <_free_r>
 800c566:	2300      	movs	r3, #0
 800c568:	6363      	str	r3, [r4, #52]	; 0x34
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	2300      	movs	r3, #0
 800c574:	6063      	str	r3, [r4, #4]
 800c576:	6923      	ldr	r3, [r4, #16]
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	f043 0308 	orr.w	r3, r3, #8
 800c580:	81a3      	strh	r3, [r4, #12]
 800c582:	6923      	ldr	r3, [r4, #16]
 800c584:	b94b      	cbnz	r3, 800c59a <__swsetup_r+0x9a>
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c590:	d003      	beq.n	800c59a <__swsetup_r+0x9a>
 800c592:	4621      	mov	r1, r4
 800c594:	4630      	mov	r0, r6
 800c596:	f000 f9f9 	bl	800c98c <__smakebuf_r>
 800c59a:	89a0      	ldrh	r0, [r4, #12]
 800c59c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5a0:	f010 0301 	ands.w	r3, r0, #1
 800c5a4:	d00a      	beq.n	800c5bc <__swsetup_r+0xbc>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60a3      	str	r3, [r4, #8]
 800c5aa:	6963      	ldr	r3, [r4, #20]
 800c5ac:	425b      	negs	r3, r3
 800c5ae:	61a3      	str	r3, [r4, #24]
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	b943      	cbnz	r3, 800c5c6 <__swsetup_r+0xc6>
 800c5b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5b8:	d1ba      	bne.n	800c530 <__swsetup_r+0x30>
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	0781      	lsls	r1, r0, #30
 800c5be:	bf58      	it	pl
 800c5c0:	6963      	ldrpl	r3, [r4, #20]
 800c5c2:	60a3      	str	r3, [r4, #8]
 800c5c4:	e7f4      	b.n	800c5b0 <__swsetup_r+0xb0>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	e7f7      	b.n	800c5ba <__swsetup_r+0xba>
 800c5ca:	bf00      	nop
 800c5cc:	200000cc 	.word	0x200000cc
 800c5d0:	0800d6f4 	.word	0x0800d6f4
 800c5d4:	0800d714 	.word	0x0800d714
 800c5d8:	0800d6d4 	.word	0x0800d6d4

0800c5dc <__sflush_r>:
 800c5dc:	898a      	ldrh	r2, [r1, #12]
 800c5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	0710      	lsls	r0, r2, #28
 800c5e4:	460c      	mov	r4, r1
 800c5e6:	d457      	bmi.n	800c698 <__sflush_r+0xbc>
 800c5e8:	684b      	ldr	r3, [r1, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dc04      	bgt.n	800c5f8 <__sflush_r+0x1c>
 800c5ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	dc01      	bgt.n	800c5f8 <__sflush_r+0x1c>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5fa:	2e00      	cmp	r6, #0
 800c5fc:	d0fa      	beq.n	800c5f4 <__sflush_r+0x18>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c604:	682f      	ldr	r7, [r5, #0]
 800c606:	602b      	str	r3, [r5, #0]
 800c608:	d032      	beq.n	800c670 <__sflush_r+0x94>
 800c60a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	075a      	lsls	r2, r3, #29
 800c610:	d505      	bpl.n	800c61e <__sflush_r+0x42>
 800c612:	6863      	ldr	r3, [r4, #4]
 800c614:	1ac0      	subs	r0, r0, r3
 800c616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c618:	b10b      	cbz	r3, 800c61e <__sflush_r+0x42>
 800c61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c61c:	1ac0      	subs	r0, r0, r3
 800c61e:	2300      	movs	r3, #0
 800c620:	4602      	mov	r2, r0
 800c622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c624:	4628      	mov	r0, r5
 800c626:	6a21      	ldr	r1, [r4, #32]
 800c628:	47b0      	blx	r6
 800c62a:	1c43      	adds	r3, r0, #1
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	d106      	bne.n	800c63e <__sflush_r+0x62>
 800c630:	6829      	ldr	r1, [r5, #0]
 800c632:	291d      	cmp	r1, #29
 800c634:	d82c      	bhi.n	800c690 <__sflush_r+0xb4>
 800c636:	4a29      	ldr	r2, [pc, #164]	; (800c6dc <__sflush_r+0x100>)
 800c638:	40ca      	lsrs	r2, r1
 800c63a:	07d6      	lsls	r6, r2, #31
 800c63c:	d528      	bpl.n	800c690 <__sflush_r+0xb4>
 800c63e:	2200      	movs	r2, #0
 800c640:	6062      	str	r2, [r4, #4]
 800c642:	6922      	ldr	r2, [r4, #16]
 800c644:	04d9      	lsls	r1, r3, #19
 800c646:	6022      	str	r2, [r4, #0]
 800c648:	d504      	bpl.n	800c654 <__sflush_r+0x78>
 800c64a:	1c42      	adds	r2, r0, #1
 800c64c:	d101      	bne.n	800c652 <__sflush_r+0x76>
 800c64e:	682b      	ldr	r3, [r5, #0]
 800c650:	b903      	cbnz	r3, 800c654 <__sflush_r+0x78>
 800c652:	6560      	str	r0, [r4, #84]	; 0x54
 800c654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c656:	602f      	str	r7, [r5, #0]
 800c658:	2900      	cmp	r1, #0
 800c65a:	d0cb      	beq.n	800c5f4 <__sflush_r+0x18>
 800c65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c660:	4299      	cmp	r1, r3
 800c662:	d002      	beq.n	800c66a <__sflush_r+0x8e>
 800c664:	4628      	mov	r0, r5
 800c666:	f7fd fbcb 	bl	8009e00 <_free_r>
 800c66a:	2000      	movs	r0, #0
 800c66c:	6360      	str	r0, [r4, #52]	; 0x34
 800c66e:	e7c2      	b.n	800c5f6 <__sflush_r+0x1a>
 800c670:	6a21      	ldr	r1, [r4, #32]
 800c672:	2301      	movs	r3, #1
 800c674:	4628      	mov	r0, r5
 800c676:	47b0      	blx	r6
 800c678:	1c41      	adds	r1, r0, #1
 800c67a:	d1c7      	bne.n	800c60c <__sflush_r+0x30>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0c4      	beq.n	800c60c <__sflush_r+0x30>
 800c682:	2b1d      	cmp	r3, #29
 800c684:	d001      	beq.n	800c68a <__sflush_r+0xae>
 800c686:	2b16      	cmp	r3, #22
 800c688:	d101      	bne.n	800c68e <__sflush_r+0xb2>
 800c68a:	602f      	str	r7, [r5, #0]
 800c68c:	e7b2      	b.n	800c5f4 <__sflush_r+0x18>
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	e7ae      	b.n	800c5f6 <__sflush_r+0x1a>
 800c698:	690f      	ldr	r7, [r1, #16]
 800c69a:	2f00      	cmp	r7, #0
 800c69c:	d0aa      	beq.n	800c5f4 <__sflush_r+0x18>
 800c69e:	0793      	lsls	r3, r2, #30
 800c6a0:	bf18      	it	ne
 800c6a2:	2300      	movne	r3, #0
 800c6a4:	680e      	ldr	r6, [r1, #0]
 800c6a6:	bf08      	it	eq
 800c6a8:	694b      	ldreq	r3, [r1, #20]
 800c6aa:	1bf6      	subs	r6, r6, r7
 800c6ac:	600f      	str	r7, [r1, #0]
 800c6ae:	608b      	str	r3, [r1, #8]
 800c6b0:	2e00      	cmp	r6, #0
 800c6b2:	dd9f      	ble.n	800c5f4 <__sflush_r+0x18>
 800c6b4:	4633      	mov	r3, r6
 800c6b6:	463a      	mov	r2, r7
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	6a21      	ldr	r1, [r4, #32]
 800c6bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c6c0:	47e0      	blx	ip
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	dc06      	bgt.n	800c6d4 <__sflush_r+0xf8>
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d0:	81a3      	strh	r3, [r4, #12]
 800c6d2:	e790      	b.n	800c5f6 <__sflush_r+0x1a>
 800c6d4:	4407      	add	r7, r0
 800c6d6:	1a36      	subs	r6, r6, r0
 800c6d8:	e7ea      	b.n	800c6b0 <__sflush_r+0xd4>
 800c6da:	bf00      	nop
 800c6dc:	20400001 	.word	0x20400001

0800c6e0 <_fflush_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	690b      	ldr	r3, [r1, #16]
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	b913      	cbnz	r3, 800c6f0 <_fflush_r+0x10>
 800c6ea:	2500      	movs	r5, #0
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	b118      	cbz	r0, 800c6fa <_fflush_r+0x1a>
 800c6f2:	6983      	ldr	r3, [r0, #24]
 800c6f4:	b90b      	cbnz	r3, 800c6fa <_fflush_r+0x1a>
 800c6f6:	f000 f887 	bl	800c808 <__sinit>
 800c6fa:	4b14      	ldr	r3, [pc, #80]	; (800c74c <_fflush_r+0x6c>)
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	d11b      	bne.n	800c738 <_fflush_r+0x58>
 800c700:	686c      	ldr	r4, [r5, #4]
 800c702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0ef      	beq.n	800c6ea <_fflush_r+0xa>
 800c70a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c70c:	07d0      	lsls	r0, r2, #31
 800c70e:	d404      	bmi.n	800c71a <_fflush_r+0x3a>
 800c710:	0599      	lsls	r1, r3, #22
 800c712:	d402      	bmi.n	800c71a <_fflush_r+0x3a>
 800c714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c716:	f7ff fcde 	bl	800c0d6 <__retarget_lock_acquire_recursive>
 800c71a:	4628      	mov	r0, r5
 800c71c:	4621      	mov	r1, r4
 800c71e:	f7ff ff5d 	bl	800c5dc <__sflush_r>
 800c722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c724:	4605      	mov	r5, r0
 800c726:	07da      	lsls	r2, r3, #31
 800c728:	d4e0      	bmi.n	800c6ec <_fflush_r+0xc>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	059b      	lsls	r3, r3, #22
 800c72e:	d4dd      	bmi.n	800c6ec <_fflush_r+0xc>
 800c730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c732:	f7ff fcd1 	bl	800c0d8 <__retarget_lock_release_recursive>
 800c736:	e7d9      	b.n	800c6ec <_fflush_r+0xc>
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <_fflush_r+0x70>)
 800c73a:	429c      	cmp	r4, r3
 800c73c:	d101      	bne.n	800c742 <_fflush_r+0x62>
 800c73e:	68ac      	ldr	r4, [r5, #8]
 800c740:	e7df      	b.n	800c702 <_fflush_r+0x22>
 800c742:	4b04      	ldr	r3, [pc, #16]	; (800c754 <_fflush_r+0x74>)
 800c744:	429c      	cmp	r4, r3
 800c746:	bf08      	it	eq
 800c748:	68ec      	ldreq	r4, [r5, #12]
 800c74a:	e7da      	b.n	800c702 <_fflush_r+0x22>
 800c74c:	0800d6f4 	.word	0x0800d6f4
 800c750:	0800d714 	.word	0x0800d714
 800c754:	0800d6d4 	.word	0x0800d6d4

0800c758 <std>:
 800c758:	2300      	movs	r3, #0
 800c75a:	b510      	push	{r4, lr}
 800c75c:	4604      	mov	r4, r0
 800c75e:	e9c0 3300 	strd	r3, r3, [r0]
 800c762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c766:	6083      	str	r3, [r0, #8]
 800c768:	8181      	strh	r1, [r0, #12]
 800c76a:	6643      	str	r3, [r0, #100]	; 0x64
 800c76c:	81c2      	strh	r2, [r0, #14]
 800c76e:	6183      	str	r3, [r0, #24]
 800c770:	4619      	mov	r1, r3
 800c772:	2208      	movs	r2, #8
 800c774:	305c      	adds	r0, #92	; 0x5c
 800c776:	f7fd fb3b 	bl	8009df0 <memset>
 800c77a:	4b05      	ldr	r3, [pc, #20]	; (800c790 <std+0x38>)
 800c77c:	6224      	str	r4, [r4, #32]
 800c77e:	6263      	str	r3, [r4, #36]	; 0x24
 800c780:	4b04      	ldr	r3, [pc, #16]	; (800c794 <std+0x3c>)
 800c782:	62a3      	str	r3, [r4, #40]	; 0x28
 800c784:	4b04      	ldr	r3, [pc, #16]	; (800c798 <std+0x40>)
 800c786:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c788:	4b04      	ldr	r3, [pc, #16]	; (800c79c <std+0x44>)
 800c78a:	6323      	str	r3, [r4, #48]	; 0x30
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	bf00      	nop
 800c790:	0800ca1d 	.word	0x0800ca1d
 800c794:	0800ca3f 	.word	0x0800ca3f
 800c798:	0800ca77 	.word	0x0800ca77
 800c79c:	0800ca9b 	.word	0x0800ca9b

0800c7a0 <_cleanup_r>:
 800c7a0:	4901      	ldr	r1, [pc, #4]	; (800c7a8 <_cleanup_r+0x8>)
 800c7a2:	f000 b8af 	b.w	800c904 <_fwalk_reent>
 800c7a6:	bf00      	nop
 800c7a8:	0800c6e1 	.word	0x0800c6e1

0800c7ac <__sfmoreglue>:
 800c7ac:	2268      	movs	r2, #104	; 0x68
 800c7ae:	b570      	push	{r4, r5, r6, lr}
 800c7b0:	1e4d      	subs	r5, r1, #1
 800c7b2:	4355      	muls	r5, r2
 800c7b4:	460e      	mov	r6, r1
 800c7b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7ba:	f7fd fb89 	bl	8009ed0 <_malloc_r>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	b140      	cbz	r0, 800c7d4 <__sfmoreglue+0x28>
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c7c8:	300c      	adds	r0, #12
 800c7ca:	60a0      	str	r0, [r4, #8]
 800c7cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7d0:	f7fd fb0e 	bl	8009df0 <memset>
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}

0800c7d8 <__sfp_lock_acquire>:
 800c7d8:	4801      	ldr	r0, [pc, #4]	; (800c7e0 <__sfp_lock_acquire+0x8>)
 800c7da:	f7ff bc7c 	b.w	800c0d6 <__retarget_lock_acquire_recursive>
 800c7de:	bf00      	nop
 800c7e0:	2000089d 	.word	0x2000089d

0800c7e4 <__sfp_lock_release>:
 800c7e4:	4801      	ldr	r0, [pc, #4]	; (800c7ec <__sfp_lock_release+0x8>)
 800c7e6:	f7ff bc77 	b.w	800c0d8 <__retarget_lock_release_recursive>
 800c7ea:	bf00      	nop
 800c7ec:	2000089d 	.word	0x2000089d

0800c7f0 <__sinit_lock_acquire>:
 800c7f0:	4801      	ldr	r0, [pc, #4]	; (800c7f8 <__sinit_lock_acquire+0x8>)
 800c7f2:	f7ff bc70 	b.w	800c0d6 <__retarget_lock_acquire_recursive>
 800c7f6:	bf00      	nop
 800c7f8:	2000089e 	.word	0x2000089e

0800c7fc <__sinit_lock_release>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	; (800c804 <__sinit_lock_release+0x8>)
 800c7fe:	f7ff bc6b 	b.w	800c0d8 <__retarget_lock_release_recursive>
 800c802:	bf00      	nop
 800c804:	2000089e 	.word	0x2000089e

0800c808 <__sinit>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	4604      	mov	r4, r0
 800c80c:	f7ff fff0 	bl	800c7f0 <__sinit_lock_acquire>
 800c810:	69a3      	ldr	r3, [r4, #24]
 800c812:	b11b      	cbz	r3, 800c81c <__sinit+0x14>
 800c814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c818:	f7ff bff0 	b.w	800c7fc <__sinit_lock_release>
 800c81c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c820:	6523      	str	r3, [r4, #80]	; 0x50
 800c822:	4b13      	ldr	r3, [pc, #76]	; (800c870 <__sinit+0x68>)
 800c824:	4a13      	ldr	r2, [pc, #76]	; (800c874 <__sinit+0x6c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	62a2      	str	r2, [r4, #40]	; 0x28
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	bf08      	it	eq
 800c82e:	2301      	moveq	r3, #1
 800c830:	4620      	mov	r0, r4
 800c832:	bf08      	it	eq
 800c834:	61a3      	streq	r3, [r4, #24]
 800c836:	f000 f81f 	bl	800c878 <__sfp>
 800c83a:	6060      	str	r0, [r4, #4]
 800c83c:	4620      	mov	r0, r4
 800c83e:	f000 f81b 	bl	800c878 <__sfp>
 800c842:	60a0      	str	r0, [r4, #8]
 800c844:	4620      	mov	r0, r4
 800c846:	f000 f817 	bl	800c878 <__sfp>
 800c84a:	2200      	movs	r2, #0
 800c84c:	2104      	movs	r1, #4
 800c84e:	60e0      	str	r0, [r4, #12]
 800c850:	6860      	ldr	r0, [r4, #4]
 800c852:	f7ff ff81 	bl	800c758 <std>
 800c856:	2201      	movs	r2, #1
 800c858:	2109      	movs	r1, #9
 800c85a:	68a0      	ldr	r0, [r4, #8]
 800c85c:	f7ff ff7c 	bl	800c758 <std>
 800c860:	2202      	movs	r2, #2
 800c862:	2112      	movs	r1, #18
 800c864:	68e0      	ldr	r0, [r4, #12]
 800c866:	f7ff ff77 	bl	800c758 <std>
 800c86a:	2301      	movs	r3, #1
 800c86c:	61a3      	str	r3, [r4, #24]
 800c86e:	e7d1      	b.n	800c814 <__sinit+0xc>
 800c870:	0800d358 	.word	0x0800d358
 800c874:	0800c7a1 	.word	0x0800c7a1

0800c878 <__sfp>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	4607      	mov	r7, r0
 800c87c:	f7ff ffac 	bl	800c7d8 <__sfp_lock_acquire>
 800c880:	4b1e      	ldr	r3, [pc, #120]	; (800c8fc <__sfp+0x84>)
 800c882:	681e      	ldr	r6, [r3, #0]
 800c884:	69b3      	ldr	r3, [r6, #24]
 800c886:	b913      	cbnz	r3, 800c88e <__sfp+0x16>
 800c888:	4630      	mov	r0, r6
 800c88a:	f7ff ffbd 	bl	800c808 <__sinit>
 800c88e:	3648      	adds	r6, #72	; 0x48
 800c890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c894:	3b01      	subs	r3, #1
 800c896:	d503      	bpl.n	800c8a0 <__sfp+0x28>
 800c898:	6833      	ldr	r3, [r6, #0]
 800c89a:	b30b      	cbz	r3, 800c8e0 <__sfp+0x68>
 800c89c:	6836      	ldr	r6, [r6, #0]
 800c89e:	e7f7      	b.n	800c890 <__sfp+0x18>
 800c8a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8a4:	b9d5      	cbnz	r5, 800c8dc <__sfp+0x64>
 800c8a6:	4b16      	ldr	r3, [pc, #88]	; (800c900 <__sfp+0x88>)
 800c8a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8ac:	60e3      	str	r3, [r4, #12]
 800c8ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c8b0:	f7ff fc10 	bl	800c0d4 <__retarget_lock_init_recursive>
 800c8b4:	f7ff ff96 	bl	800c7e4 <__sfp_lock_release>
 800c8b8:	2208      	movs	r2, #8
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8c4:	6025      	str	r5, [r4, #0]
 800c8c6:	61a5      	str	r5, [r4, #24]
 800c8c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8cc:	f7fd fa90 	bl	8009df0 <memset>
 800c8d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8d8:	4620      	mov	r0, r4
 800c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8dc:	3468      	adds	r4, #104	; 0x68
 800c8de:	e7d9      	b.n	800c894 <__sfp+0x1c>
 800c8e0:	2104      	movs	r1, #4
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	f7ff ff62 	bl	800c7ac <__sfmoreglue>
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	6030      	str	r0, [r6, #0]
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d1d5      	bne.n	800c89c <__sfp+0x24>
 800c8f0:	f7ff ff78 	bl	800c7e4 <__sfp_lock_release>
 800c8f4:	230c      	movs	r3, #12
 800c8f6:	603b      	str	r3, [r7, #0]
 800c8f8:	e7ee      	b.n	800c8d8 <__sfp+0x60>
 800c8fa:	bf00      	nop
 800c8fc:	0800d358 	.word	0x0800d358
 800c900:	ffff0001 	.word	0xffff0001

0800c904 <_fwalk_reent>:
 800c904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c908:	4606      	mov	r6, r0
 800c90a:	4688      	mov	r8, r1
 800c90c:	2700      	movs	r7, #0
 800c90e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c916:	f1b9 0901 	subs.w	r9, r9, #1
 800c91a:	d505      	bpl.n	800c928 <_fwalk_reent+0x24>
 800c91c:	6824      	ldr	r4, [r4, #0]
 800c91e:	2c00      	cmp	r4, #0
 800c920:	d1f7      	bne.n	800c912 <_fwalk_reent+0xe>
 800c922:	4638      	mov	r0, r7
 800c924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c928:	89ab      	ldrh	r3, [r5, #12]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d907      	bls.n	800c93e <_fwalk_reent+0x3a>
 800c92e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c932:	3301      	adds	r3, #1
 800c934:	d003      	beq.n	800c93e <_fwalk_reent+0x3a>
 800c936:	4629      	mov	r1, r5
 800c938:	4630      	mov	r0, r6
 800c93a:	47c0      	blx	r8
 800c93c:	4307      	orrs	r7, r0
 800c93e:	3568      	adds	r5, #104	; 0x68
 800c940:	e7e9      	b.n	800c916 <_fwalk_reent+0x12>

0800c942 <__swhatbuf_r>:
 800c942:	b570      	push	{r4, r5, r6, lr}
 800c944:	460e      	mov	r6, r1
 800c946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c94a:	4614      	mov	r4, r2
 800c94c:	2900      	cmp	r1, #0
 800c94e:	461d      	mov	r5, r3
 800c950:	b096      	sub	sp, #88	; 0x58
 800c952:	da08      	bge.n	800c966 <__swhatbuf_r+0x24>
 800c954:	2200      	movs	r2, #0
 800c956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c95a:	602a      	str	r2, [r5, #0]
 800c95c:	061a      	lsls	r2, r3, #24
 800c95e:	d410      	bmi.n	800c982 <__swhatbuf_r+0x40>
 800c960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c964:	e00e      	b.n	800c984 <__swhatbuf_r+0x42>
 800c966:	466a      	mov	r2, sp
 800c968:	f000 f8be 	bl	800cae8 <_fstat_r>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	dbf1      	blt.n	800c954 <__swhatbuf_r+0x12>
 800c970:	9a01      	ldr	r2, [sp, #4]
 800c972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c97a:	425a      	negs	r2, r3
 800c97c:	415a      	adcs	r2, r3
 800c97e:	602a      	str	r2, [r5, #0]
 800c980:	e7ee      	b.n	800c960 <__swhatbuf_r+0x1e>
 800c982:	2340      	movs	r3, #64	; 0x40
 800c984:	2000      	movs	r0, #0
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	b016      	add	sp, #88	; 0x58
 800c98a:	bd70      	pop	{r4, r5, r6, pc}

0800c98c <__smakebuf_r>:
 800c98c:	898b      	ldrh	r3, [r1, #12]
 800c98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c990:	079d      	lsls	r5, r3, #30
 800c992:	4606      	mov	r6, r0
 800c994:	460c      	mov	r4, r1
 800c996:	d507      	bpl.n	800c9a8 <__smakebuf_r+0x1c>
 800c998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	6163      	str	r3, [r4, #20]
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	466a      	mov	r2, sp
 800c9aa:	ab01      	add	r3, sp, #4
 800c9ac:	f7ff ffc9 	bl	800c942 <__swhatbuf_r>
 800c9b0:	9900      	ldr	r1, [sp, #0]
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7fd fa8b 	bl	8009ed0 <_malloc_r>
 800c9ba:	b948      	cbnz	r0, 800c9d0 <__smakebuf_r+0x44>
 800c9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c0:	059a      	lsls	r2, r3, #22
 800c9c2:	d4ef      	bmi.n	800c9a4 <__smakebuf_r+0x18>
 800c9c4:	f023 0303 	bic.w	r3, r3, #3
 800c9c8:	f043 0302 	orr.w	r3, r3, #2
 800c9cc:	81a3      	strh	r3, [r4, #12]
 800c9ce:	e7e3      	b.n	800c998 <__smakebuf_r+0xc>
 800c9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <__smakebuf_r+0x7c>)
 800c9d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	6020      	str	r0, [r4, #0]
 800c9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9dc:	81a3      	strh	r3, [r4, #12]
 800c9de:	9b00      	ldr	r3, [sp, #0]
 800c9e0:	6120      	str	r0, [r4, #16]
 800c9e2:	6163      	str	r3, [r4, #20]
 800c9e4:	9b01      	ldr	r3, [sp, #4]
 800c9e6:	b15b      	cbz	r3, 800ca00 <__smakebuf_r+0x74>
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9ee:	f000 f88d 	bl	800cb0c <_isatty_r>
 800c9f2:	b128      	cbz	r0, 800ca00 <__smakebuf_r+0x74>
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	f023 0303 	bic.w	r3, r3, #3
 800c9fa:	f043 0301 	orr.w	r3, r3, #1
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	89a0      	ldrh	r0, [r4, #12]
 800ca02:	4305      	orrs	r5, r0
 800ca04:	81a5      	strh	r5, [r4, #12]
 800ca06:	e7cd      	b.n	800c9a4 <__smakebuf_r+0x18>
 800ca08:	0800c7a1 	.word	0x0800c7a1

0800ca0c <_malloc_usable_size_r>:
 800ca0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca10:	1f18      	subs	r0, r3, #4
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	bfbc      	itt	lt
 800ca16:	580b      	ldrlt	r3, [r1, r0]
 800ca18:	18c0      	addlt	r0, r0, r3
 800ca1a:	4770      	bx	lr

0800ca1c <__sread>:
 800ca1c:	b510      	push	{r4, lr}
 800ca1e:	460c      	mov	r4, r1
 800ca20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca24:	f000 f894 	bl	800cb50 <_read_r>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	bfab      	itete	ge
 800ca2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ca30:	181b      	addge	r3, r3, r0
 800ca32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca36:	bfac      	ite	ge
 800ca38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca3a:	81a3      	strhlt	r3, [r4, #12]
 800ca3c:	bd10      	pop	{r4, pc}

0800ca3e <__swrite>:
 800ca3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca42:	461f      	mov	r7, r3
 800ca44:	898b      	ldrh	r3, [r1, #12]
 800ca46:	4605      	mov	r5, r0
 800ca48:	05db      	lsls	r3, r3, #23
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	4616      	mov	r6, r2
 800ca4e:	d505      	bpl.n	800ca5c <__swrite+0x1e>
 800ca50:	2302      	movs	r3, #2
 800ca52:	2200      	movs	r2, #0
 800ca54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca58:	f000 f868 	bl	800cb2c <_lseek_r>
 800ca5c:	89a3      	ldrh	r3, [r4, #12]
 800ca5e:	4632      	mov	r2, r6
 800ca60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca64:	81a3      	strh	r3, [r4, #12]
 800ca66:	4628      	mov	r0, r5
 800ca68:	463b      	mov	r3, r7
 800ca6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca72:	f000 b817 	b.w	800caa4 <_write_r>

0800ca76 <__sseek>:
 800ca76:	b510      	push	{r4, lr}
 800ca78:	460c      	mov	r4, r1
 800ca7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca7e:	f000 f855 	bl	800cb2c <_lseek_r>
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	bf15      	itete	ne
 800ca88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca92:	81a3      	strheq	r3, [r4, #12]
 800ca94:	bf18      	it	ne
 800ca96:	81a3      	strhne	r3, [r4, #12]
 800ca98:	bd10      	pop	{r4, pc}

0800ca9a <__sclose>:
 800ca9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca9e:	f000 b813 	b.w	800cac8 <_close_r>
	...

0800caa4 <_write_r>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	4604      	mov	r4, r0
 800caa8:	4608      	mov	r0, r1
 800caaa:	4611      	mov	r1, r2
 800caac:	2200      	movs	r2, #0
 800caae:	4d05      	ldr	r5, [pc, #20]	; (800cac4 <_write_r+0x20>)
 800cab0:	602a      	str	r2, [r5, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	f7f6 ffba 	bl	8003a2c <_write>
 800cab8:	1c43      	adds	r3, r0, #1
 800caba:	d102      	bne.n	800cac2 <_write_r+0x1e>
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	b103      	cbz	r3, 800cac2 <_write_r+0x1e>
 800cac0:	6023      	str	r3, [r4, #0]
 800cac2:	bd38      	pop	{r3, r4, r5, pc}
 800cac4:	20000898 	.word	0x20000898

0800cac8 <_close_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	2300      	movs	r3, #0
 800cacc:	4d05      	ldr	r5, [pc, #20]	; (800cae4 <_close_r+0x1c>)
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	f7f6 ffc6 	bl	8003a64 <_close>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_close_r+0x1a>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_close_r+0x1a>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	20000898 	.word	0x20000898

0800cae8 <_fstat_r>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	2300      	movs	r3, #0
 800caec:	4d06      	ldr	r5, [pc, #24]	; (800cb08 <_fstat_r+0x20>)
 800caee:	4604      	mov	r4, r0
 800caf0:	4608      	mov	r0, r1
 800caf2:	4611      	mov	r1, r2
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	f7f6 ffc0 	bl	8003a7a <_fstat>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	d102      	bne.n	800cb04 <_fstat_r+0x1c>
 800cafe:	682b      	ldr	r3, [r5, #0]
 800cb00:	b103      	cbz	r3, 800cb04 <_fstat_r+0x1c>
 800cb02:	6023      	str	r3, [r4, #0]
 800cb04:	bd38      	pop	{r3, r4, r5, pc}
 800cb06:	bf00      	nop
 800cb08:	20000898 	.word	0x20000898

0800cb0c <_isatty_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	2300      	movs	r3, #0
 800cb10:	4d05      	ldr	r5, [pc, #20]	; (800cb28 <_isatty_r+0x1c>)
 800cb12:	4604      	mov	r4, r0
 800cb14:	4608      	mov	r0, r1
 800cb16:	602b      	str	r3, [r5, #0]
 800cb18:	f7f6 ffbe 	bl	8003a98 <_isatty>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d102      	bne.n	800cb26 <_isatty_r+0x1a>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	b103      	cbz	r3, 800cb26 <_isatty_r+0x1a>
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	20000898 	.word	0x20000898

0800cb2c <_lseek_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4604      	mov	r4, r0
 800cb30:	4608      	mov	r0, r1
 800cb32:	4611      	mov	r1, r2
 800cb34:	2200      	movs	r2, #0
 800cb36:	4d05      	ldr	r5, [pc, #20]	; (800cb4c <_lseek_r+0x20>)
 800cb38:	602a      	str	r2, [r5, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f7f6 ffb6 	bl	8003aac <_lseek>
 800cb40:	1c43      	adds	r3, r0, #1
 800cb42:	d102      	bne.n	800cb4a <_lseek_r+0x1e>
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	b103      	cbz	r3, 800cb4a <_lseek_r+0x1e>
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	20000898 	.word	0x20000898

0800cb50 <_read_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4604      	mov	r4, r0
 800cb54:	4608      	mov	r0, r1
 800cb56:	4611      	mov	r1, r2
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4d05      	ldr	r5, [pc, #20]	; (800cb70 <_read_r+0x20>)
 800cb5c:	602a      	str	r2, [r5, #0]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	f7f6 ff47 	bl	80039f2 <_read>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_read_r+0x1e>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_read_r+0x1e>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	20000898 	.word	0x20000898

0800cb74 <_init>:
 800cb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb76:	bf00      	nop
 800cb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb7a:	bc08      	pop	{r3}
 800cb7c:	469e      	mov	lr, r3
 800cb7e:	4770      	bx	lr

0800cb80 <_fini>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	bf00      	nop
 800cb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb86:	bc08      	pop	{r3}
 800cb88:	469e      	mov	lr, r3
 800cb8a:	4770      	bx	lr
