
AltimeX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800c088  0800c088  0001c088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c99c  0800c99c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c99c  0800c99c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c99c  0800c99c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001dc  0800cb80  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800cb80  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002177c  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7a  00000000  00000000  00041981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00045800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  000469d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d392  00000000  00000000  00047a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001892f  00000000  00000000  00064df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bdf  00000000  00000000  0007d721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006164  00000000  00000000  00110350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c06c 	.word	0x0800c06c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800c06c 	.word	0x0800c06c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>:
 *  Created on: Jul 6, 2023
 *      Author: Kyle Kingsberry
 */
#include "LPS22HB.h"

LPS22HB::LPS22HB(I2C_HandleTypeDef* i2c_config, uint16_t address):
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	i2c_config(i2c_config),
	address(address),
	reference_pressure(0),
	reference_temperature(0)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	88fa      	ldrh	r2, [r7, #6]
 80011b4:	809a      	strh	r2, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	80da      	strh	r2, [r3, #6]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	811a      	strh	r2, [r3, #8]
{

}
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_ZN7LPS22HB4initEv>:

LPS22HB::LPS_INIT_STATUS LPS22HB::init()
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f002 f99d 	bl	8003518 <HAL_Delay>

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	2305      	movs	r3, #5
 80011e4:	2203      	movs	r2, #3
 80011e6:	21b8      	movs	r1, #184	; 0xb8
 80011e8:	f003 fbac 	bl	8004944 <HAL_I2C_IsDeviceReady>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	if(i2c_status == HAL_BUSY) {
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d101      	bne.n	80011fa <_ZN7LPS22HB4initEv+0x2c>
		return HAL_I2C_BUSY;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e012      	b.n	8001220 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set the ouptut data rate (odr)
	this->set_odr(ODR_75hz);
 80011fa:	2105      	movs	r1, #5
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f830 	bl	8001262 <_ZN7LPS22HB7set_odrE7LPS_ODR>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = this->get_odr();
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f85d 	bl	80012c2 <_ZN7LPS22HB7get_odrEv>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]
	if(odr != ODR_75hz) {
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d001      	beq.n	8001216 <_ZN7LPS22HB4initEv+0x48>
		return ODR_MISMATCH;
 8001212:	2301      	movs	r3, #1
 8001214:	e004      	b.n	8001220 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set FIFO mode to BYPASS
	this->configure_fifo(BYPASS);
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f865 	bl	80012e8 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return SUCCESS;
 800121e:	2302      	movs	r3, #2
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN7LPS22HB8reg_readEttPh>:

void LPS22HB::reg_read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af04      	add	r7, sp, #16
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	817b      	strh	r3, [r7, #10]
 8001236:	4613      	mov	r3, r2
 8001238:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(this->i2c_config, (uint16_t)(this->address<<1), reg_addr, 1, data_output, reg_size, 100);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	897a      	ldrh	r2, [r7, #10]
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	893b      	ldrh	r3, [r7, #8]
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	f003 f90d 	bl	8004474 <HAL_I2C_Mem_Read>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN7LPS22HB7set_odrE7LPS_ODR>:

//Configures the output data rate (ODR)
void LPS22HB::set_odr(enum LPS_ODR new_odr)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b088      	sub	sp, #32
 8001266:	af04      	add	r7, sp, #16
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffd6 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	b2db      	uxtb	r3, r3
 8001284:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 8001286:	7a3b      	ldrb	r3, [r7, #8]
 8001288:	b25a      	sxtb	r2, r3
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t)(this->address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	889b      	ldrh	r3, [r3, #4]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b299      	uxth	r1, r3
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2210      	movs	r2, #16
 80012b6:	f002 ffe3 	bl	8004280 <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_ZN7LPS22HB7get_odrEv>:

//Reads the sensors odr
enum LPS_ODR LPS22HB::get_odr()
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2201      	movs	r2, #1
 80012d0:	2110      	movs	r1, #16
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa8 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
	uint8_t odr_code = (existingConfig[0] >> 4);
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	73fb      	strb	r3, [r7, #15]

	return static_cast<LPS_ODR>(odr_code);
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>:

//Configures the FIFO for the desired mode
void LPS22HB::configure_fifo(enum LPS_FIFO desiredFifo)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af04      	add	r7, sp, #16
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11d      	bne.n	8001336 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x4e>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	this->reg_read(FIFO_CTRL, 1, existingConfig);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2201      	movs	r2, #1
 8001300:	2114      	movs	r1, #20
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff90 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 8001308:	7b3b      	ldrb	r3, [r7, #12]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	b2db      	uxtb	r3, r3
 8001310:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t) (this->address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	889b      	ldrh	r3, [r3, #4]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b299      	uxth	r1, r3
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	2214      	movs	r2, #20
 8001330:	f002 ffa6 	bl	8004280 <HAL_I2C_Mem_Write>
 8001334:	e000      	b.n	8001338 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x50>
		return;
 8001336:	bf00      	nop
}
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <_ZN7LPS22HB12get_pressureEv>:

//Returns the pressure read by the sensor in HPA
double LPS22HB::get_pressure()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 4096.0;
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <_ZN7LPS22HB12get_pressureEv+0x68>)
 800134e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	this->reg_read(PRESS_OUT_H, 1, press_out_h);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2201      	movs	r2, #1
 8001358:	212a      	movs	r1, #42	; 0x2a
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff64 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_L, 1, press_out_l);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2201      	movs	r2, #1
 8001366:	2129      	movs	r1, #41	; 0x29
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff5d 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_XL, 1, press_out_xl);
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2201      	movs	r2, #1
 8001374:	2128      	movs	r1, #40	; 0x28
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff56 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 800137c:	7c3b      	ldrb	r3, [r7, #16]
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4413      	add	r3, r2
 8001386:	7a3a      	ldrb	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

	return pressure / SCALING_FACTOR;
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff f829 	bl	80003e4 <__aeabi_ui2d>
 8001392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001396:	f7ff f9c9 	bl	800072c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
}
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40b00000 	.word	0x40b00000

080013ac <_ZN7LPS22HB8get_tempEv>:

//Returns the temperature read by the sensor in C
double LPS22HB::get_temp()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 100.0;
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_ZN7LPS22HB8get_tempEv+0x54>)
 80013ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

    this->reg_read(TEMP_OUT_H, 1, temp_out_h);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2201      	movs	r2, #1
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff2e 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(TEMP_OUT_L, 1, temp_out_l);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2201      	movs	r2, #1
 80013d2:	212b      	movs	r1, #43	; 0x2b
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff27 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 80013da:	7c3b      	ldrb	r3, [r7, #16]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	7b3a      	ldrb	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]

	return temperature / SCALING_FACTOR;
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	f7fe fffd 	bl	80003e4 <__aeabi_ui2d>
 80013ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ee:	f7ff f99d 	bl	800072c <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
}
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40590000 	.word	0x40590000
 8001404:	00000000 	.word	0x00000000

08001408 <_ZN7LPS22HB9get_tempfEv>:

double LPS22HB::get_tempf()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	double tempC = this->get_temp();
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffcb 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 8001416:	e9c7 0102 	strd	r0, r1, [r7, #8]
	return (tempC * (9/5.0)) + 32;
 800141a:	a30b      	add	r3, pc, #44	; (adr r3, 8001448 <_ZN7LPS22HB9get_tempfEv+0x40>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001424:	f7ff f858 	bl	80004d8 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <_ZN7LPS22HB9get_tempfEv+0x48>)
 8001436:	f7fe fe99 	bl	800016c <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
}
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	3ffccccc 	.word	0x3ffccccc
 8001450:	40400000 	.word	0x40400000
 8001454:	00000000 	.word	0x00000000

08001458 <_ZN7LPS22HB13get_relalt_ftEv>:
	return pressHPA * 0.0009869233;
}

//Reference pressure is pressure in Pa at surface
double LPS22HB::get_relalt_ft()
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	double p = this->get_pressure();
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff6d 	bl	8001340 <_ZN7LPS22HB12get_pressureEv>
 8001466:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double t = this->get_temp();
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff9e 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 8001470:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)this->reference_pressure / p;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	88db      	ldrh	r3, [r3, #6]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ffb3 	bl	80003e4 <__aeabi_ui2d>
 800147e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001482:	f7ff f953 	bl	800072c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exponential = pow(frac_p, (double)1.0/5.257);
 800148e:	a320      	add	r3, pc, #128	; (adr r3, 8001510 <_ZN7LPS22HB13get_relalt_ftEv+0xb8>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001498:	f006 fa28 	bl	80078ec <pow>
 800149c:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double fraction_top = (exponential - 1) * (t + 273.15);
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <_ZN7LPS22HB13get_relalt_ftEv+0xd8>)
 80014a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014aa:	f7fe fe5d 	bl	8000168 <__aeabi_dsub>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	a318      	add	r3, pc, #96	; (adr r3, 8001518 <_ZN7LPS22HB13get_relalt_ftEv+0xc0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014c0:	f7fe fe54 	bl	800016c <__adddf3>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f804 	bl	80004d8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double alt_m = fraction_top / 0.0065;
 80014d8:	a311      	add	r3, pc, #68	; (adr r3, 8001520 <_ZN7LPS22HB13get_relalt_ftEv+0xc8>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e2:	f7ff f923 	bl	800072c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return alt_m * 3.281; //Convert to ft and return
 80014ee:	a30e      	add	r3, pc, #56	; (adr r3, 8001528 <_ZN7LPS22HB13get_relalt_ftEv+0xd0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f8:	f7fe ffee 	bl	80004d8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
}
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bdb0      	pop	{r4, r5, r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	7dee2d4a 	.word	0x7dee2d4a
 8001514:	3fc85936 	.word	0x3fc85936
 8001518:	66666666 	.word	0x66666666
 800151c:	40711266 	.word	0x40711266
 8001520:	76c8b439 	.word	0x76c8b439
 8001524:	3f7a9fbe 	.word	0x3f7a9fbe
 8001528:	ed916873 	.word	0xed916873
 800152c:	400a3f7c 	.word	0x400a3f7c
 8001530:	3ff00000 	.word	0x3ff00000

08001534 <_ZN7LPS22HB9calibrateEhh>:

void LPS22HB::calibrate(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	4613      	mov	r3, r2
 8001542:	70bb      	strb	r3, [r7, #2]
	this->reference_temperature = this->get_calibration_temperature(num_samples, sample_time_ms);
 8001544:	78ba      	ldrb	r2, [r7, #2]
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f81e 	bl	800158c <_ZN7LPS22HB27get_calibration_temperatureEhh>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fa96 	bl	8000a88 <__aeabi_d2uiz>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	811a      	strh	r2, [r3, #8]
	this->reference_pressure = this->get_calibration_pressure(num_samples, sample_time_ms);
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f868 	bl	8001640 <_ZN7LPS22HB24get_calibration_pressureEhh>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fa86 	bl	8000a88 <__aeabi_d2uiz>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	80da      	strh	r2, [r3, #6]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN7LPS22HB27get_calibration_temperatureEhh>:

double LPS22HB::get_calibration_temperature(uint8_t num_samples, uint8_t sample_time_ms)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	4613      	mov	r3, r2
 800159a:	70bb      	strb	r3, [r7, #2]
	STM_USB::println("\r\n\nCalibrating LPS Temperature:");
 800159c:	4825      	ldr	r0, [pc, #148]	; (8001634 <_ZN7LPS22HB27get_calibration_temperatureEhh+0xa8>)
 800159e:	f001 f867 	bl	8002670 <_ZN7STM_USB7printlnEPc>

	double cum_val = 0;
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double avg_val = 0;
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t sample = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80015be:	7ffa      	ldrb	r2, [r7, #31]
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d219      	bcs.n	80015fa <_ZN7LPS22HB27get_calibration_temperatureEhh+0x6e>
		double _temp = this->get_temp();
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fef0 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 80015cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
		STM_USB::print(".");
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <_ZN7LPS22HB27get_calibration_temperatureEhh+0xac>)
 80015d2:	f001 f833 	bl	800263c <_ZN7STM_USB5printEPc>
		cum_val += _temp;
 80015d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015de:	f7fe fdc5 	bl	800016c <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		HAL_Delay(sample_time_ms);
 80015ea:	78bb      	ldrb	r3, [r7, #2]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 ff93 	bl	8003518 <HAL_Delay>
		sample ++;
 80015f2:	7ffb      	ldrb	r3, [r7, #31]
 80015f4:	3301      	adds	r3, #1
 80015f6:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80015f8:	e7e1      	b.n	80015be <_ZN7LPS22HB27get_calibration_temperatureEhh+0x32>
	}
	avg_val = cum_val / (double)num_samples;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fef1 	bl	80003e4 <__aeabi_ui2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800160a:	f7ff f88f 	bl	800072c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	e9c7 2304 	strd	r2, r3, [r7, #16]
	STM_USB::print("\r\nAverage Temperature (C): ");
 8001616:	4809      	ldr	r0, [pc, #36]	; (800163c <_ZN7LPS22HB27get_calibration_temperatureEhh+0xb0>)
 8001618:	f001 f810 	bl	800263c <_ZN7STM_USB5printEPc>
	STM_USB::printd(avg_val);
 800161c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001620:	f000 ffe6 	bl	80025f0 <_ZN7STM_USB6printdEd>
	return avg_val;
 8001624:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	0800c088 	.word	0x0800c088
 8001638:	0800c0a8 	.word	0x0800c0a8
 800163c:	0800c0ac 	.word	0x0800c0ac

08001640 <_ZN7LPS22HB24get_calibration_pressureEhh>:

double LPS22HB::get_calibration_pressure(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	70bb      	strb	r3, [r7, #2]
	STM_USB::println("\r\n\nCalibrating LPS Pressure:\n");
 8001650:	4825      	ldr	r0, [pc, #148]	; (80016e8 <_ZN7LPS22HB24get_calibration_pressureEhh+0xa8>)
 8001652:	f001 f80d 	bl	8002670 <_ZN7STM_USB7printlnEPc>

	double cum_val = 0;
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double avg_val = 0;
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t sample = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 8001672:	7ffa      	ldrb	r2, [r7, #31]
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	429a      	cmp	r2, r3
 8001678:	d219      	bcs.n	80016ae <_ZN7LPS22HB24get_calibration_pressureEhh+0x6e>
		double _temp = this->get_pressure();
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fe60 	bl	8001340 <_ZN7LPS22HB12get_pressureEv>
 8001680:	e9c7 0102 	strd	r0, r1, [r7, #8]
		STM_USB::print(".");
 8001684:	4819      	ldr	r0, [pc, #100]	; (80016ec <_ZN7LPS22HB24get_calibration_pressureEhh+0xac>)
 8001686:	f000 ffd9 	bl	800263c <_ZN7STM_USB5printEPc>
		cum_val += _temp;
 800168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001692:	f7fe fd6b 	bl	800016c <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		HAL_Delay(sample_time_ms);
 800169e:	78bb      	ldrb	r3, [r7, #2]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 ff39 	bl	8003518 <HAL_Delay>
		sample ++;
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	3301      	adds	r3, #1
 80016aa:	77fb      	strb	r3, [r7, #31]
	while(sample < num_samples) {
 80016ac:	e7e1      	b.n	8001672 <_ZN7LPS22HB24get_calibration_pressureEhh+0x32>
	}
	avg_val = cum_val / (double)num_samples;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fe97 	bl	80003e4 <__aeabi_ui2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016be:	f7ff f835 	bl	800072c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	STM_USB::print("\r\nAverage Pressure (PA): ");
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <_ZN7LPS22HB24get_calibration_pressureEhh+0xb0>)
 80016cc:	f000 ffb6 	bl	800263c <_ZN7STM_USB5printEPc>
	STM_USB::printd(avg_val);
 80016d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d4:	f000 ff8c 	bl	80025f0 <_ZN7STM_USB6printdEd>
	return avg_val;
 80016d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800c0c8 	.word	0x0800c0c8
 80016ec:	0800c0a8 	.word	0x0800c0a8
 80016f0:	0800c0e8 	.word	0x0800c0e8

080016f4 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDefP13AltimexConfig>:
 *  Created on: Sep 23, 2023
 *      Author: kking
 */
#include "altimex.h"

Altimex::Altimex(UART_HandleTypeDef* _uart, I2C_HandleTypeDef* i2c_config, TIM_HandleTypeDef* _timer, AltimexConfig* config):
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b09b      	sub	sp, #108	; 0x6c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
	ledController(new AltimexLedController(config, _timer)),
 8001702:	2008      	movs	r0, #8
 8001704:	f006 f8b2 	bl	800786c <_Znwj>
 8001708:	4603      	mov	r3, r0
 800170a:	461c      	mov	r4, r3
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001710:	4620      	mov	r0, r4
 8001712:	f000 f92d 	bl	8001970 <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>
	stateController(new AltimexStateController(config)),
	tempF(0.0),
	alt(0.0),
	barometer(new LPS22HB(i2c_config, LPS_DEFAULT_ADDRESS)),
	step(0),
	eeprom(new AltimexEeprom(0xA0, i2c_config))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	601c      	str	r4, [r3, #0]
	stateController(new AltimexStateController(config)),
 800171a:	2050      	movs	r0, #80	; 0x50
 800171c:	f006 f8a6 	bl	800786c <_Znwj>
 8001720:	4603      	mov	r3, r0
 8001722:	461c      	mov	r4, r3
 8001724:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001726:	4620      	mov	r0, r4
 8001728:	f000 fc12 	bl	8001f50 <_ZN22AltimexStateControllerC1EP13AltimexConfig>
	eeprom(new AltimexEeprom(0xA0, i2c_config))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	605c      	str	r4, [r3, #4]
 8001730:	68f9      	ldr	r1, [r7, #12]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800173e:	68f9      	ldr	r1, [r7, #12]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	831a      	strh	r2, [r3, #24]
	barometer(new LPS22HB(i2c_config, LPS_DEFAULT_ADDRESS)),
 8001752:	200c      	movs	r0, #12
 8001754:	f006 f88a 	bl	800786c <_Znwj>
 8001758:	4603      	mov	r3, r0
 800175a:	461c      	mov	r4, r3
 800175c:	225c      	movs	r2, #92	; 0x5c
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff fd1b 	bl	800119c <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>
	eeprom(new AltimexEeprom(0xA0, i2c_config))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	61dc      	str	r4, [r3, #28]
 800176a:	2004      	movs	r0, #4
 800176c:	f006 f87e 	bl	800786c <_Znwj>
 8001770:	4603      	mov	r3, r0
 8001772:	461c      	mov	r4, r3
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	21a0      	movs	r1, #160	; 0xa0
 8001778:	4620      	mov	r0, r4
 800177a:	f000 f89a 	bl	80018b2 <_ZN13AltimexEepromC1EtP17I2C_HandleTypeDef>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	621c      	str	r4, [r3, #32]
{
	STM_USB::init(_uart);
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f000 ff26 	bl	80025d4 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>
	STM_USB::println("Altimex Boot...");
 8001788:	481e      	ldr	r0, [pc, #120]	; (8001804 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDefP13AltimexConfig+0x110>)
 800178a:	f000 ff71 	bl	8002670 <_ZN7STM_USB7printlnEPc>
	LPS22HB::LPS_INIT_STATUS baro_init_status = barometer->init();
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd1b 	bl	80011ce <_ZN7LPS22HB4initEv>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	if(baro_init_status != LPS22HB::LPS_INIT_STATUS::SUCCESS) {
 800179e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d007      	beq.n	80017b6 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDefP13AltimexConfig+0xc2>
		while(true) {
			STM_USB::println("Error while initializing sensor.");
 80017a6:	4818      	ldr	r0, [pc, #96]	; (8001808 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDefP13AltimexConfig+0x114>)
 80017a8:	f000 ff62 	bl	8002670 <_ZN7STM_USB7printlnEPc>
			HAL_Delay(1000);
 80017ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b0:	f001 feb2 	bl	8003518 <HAL_Delay>
			STM_USB::println("Error while initializing sensor.");
 80017b4:	e7f7      	b.n	80017a6 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDefP13AltimexConfig+0xb2>
		}
	}

	eeprom->save_configuration(config);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f891 	bl	80018e4 <_ZN13AltimexEeprom18save_configurationEP13AltimexConfig>
	struct AltimexConfig loaded_config;

	STM_USB::println("Loading settings");
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDefP13AltimexConfig+0x118>)
 80017c4:	f000 ff54 	bl	8002670 <_ZN7STM_USB7printlnEPc>
	eeprom->load_configuration(&loaded_config);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f107 0210 	add.w	r2, r7, #16
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f8a0 	bl	8001918 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig>

	barometer->calibrate(10, 100);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2264      	movs	r2, #100	; 0x64
 80017de:	210a      	movs	r1, #10
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fea7 	bl	8001534 <_ZN7LPS22HB9calibrateEhh>
	tempF = barometer->get_tempf();
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fe0c 	bl	8001408 <_ZN7LPS22HB9get_tempfEv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4618      	mov	r0, r3
 80017fe:	376c      	adds	r7, #108	; 0x6c
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	0800c104 	.word	0x0800c104
 8001808:	0800c114 	.word	0x0800c114
 800180c:	0800c138 	.word	0x0800c138

08001810 <_ZN7Altimex4tickEv>:

void Altimex::tick()
{
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	//STORAGE_write(&hi2c1, 0, 8, &data);
	//uint8_t data_read[8] = {'\0'};
	//STORAGE_read(&hi2c1, 0, 8, &data_read);
	//println(data_read, strlen(data_read), &huart1);

	tempF = barometer->get_tempf();
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fdf3 	bl	8001408 <_ZN7LPS22HB9get_tempfEv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	e9c1 2302 	strd	r2, r3, [r1, #8]
	STM_USB::printd(tempF);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f000 fedb 	bl	80025f0 <_ZN7STM_USB6printdEd>
		if(alt < 2500) alt -= 5;
		else alt -= 29;
	  }
	*/

	alt = barometer->get_relalt_ft();
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fe0a 	bl	8001458 <_ZN7LPS22HB13get_relalt_ftEv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	stateController->update_state(alt);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6859      	ldr	r1, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001858:	4608      	mov	r0, r1
 800185a:	f000 fbd1 	bl	8002000 <_ZN22AltimexStateController12update_stateEd>
	ledController->display_leds(stateController->get_state(), step, alt);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681c      	ldr	r4, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fbbc 	bl	8001fe4 <_ZN22AltimexStateController9get_stateEv>
 800186c:	4603      	mov	r3, r0
 800186e:	461e      	mov	r6, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	8b1d      	ldrh	r5, [r3, #24]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f903 	bl	8000a88 <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b29b      	uxth	r3, r3
 8001886:	462a      	mov	r2, r5
 8001888:	4631      	mov	r1, r6
 800188a:	4620      	mov	r0, r4
 800188c:	f000 f890 	bl	80019b0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>
	step++;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	8b1b      	ldrh	r3, [r3, #24]
 8001894:	3301      	adds	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	831a      	strh	r2, [r3, #24]
	if(step > 100) step = 0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	8b1b      	ldrh	r3, [r3, #24]
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	d902      	bls.n	80018aa <_ZN7Altimex4tickEv+0x9a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	831a      	strh	r2, [r3, #24]
	//Data is received one byte at a time
	//uint8_t Rx_data[1];
	//HAL_UART_Receive(&huart1, Rx_data, 100, 100);

	//HAL_Delay(100); //10hz
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018b2 <_ZN13AltimexEepromC1EtP17I2C_HandleTypeDef>:
 *      Author: kking
 */

#include "altimex_eeprom.h"

AltimexEeprom::AltimexEeprom(uint16_t _address, I2C_HandleTypeDef* _i2cx):
 80018b2:	b590      	push	{r4, r7, lr}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	460b      	mov	r3, r1
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	817b      	strh	r3, [r7, #10]
	storage(new EepromStorage(_address, _i2cx))
 80018c0:	200c      	movs	r0, #12
 80018c2:	f005 ffd3 	bl	800786c <_Znwj>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461c      	mov	r4, r3
 80018ca:	897b      	ldrh	r3, [r7, #10]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4620      	mov	r0, r4
 80018d2:	f000 fd9d 	bl	8002410 <_ZN13EepromStorageC1EtP17I2C_HandleTypeDef>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	601c      	str	r4, [r3, #0]
{

}
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}

080018e4 <_ZN13AltimexEeprom18save_configurationEP13AltimexConfig>:

void AltimexEeprom::save_configuration(AltimexConfig* config)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b096      	sub	sp, #88	; 0x58
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	uint8_t data[sizeof(AltimexConfig)]; // Create a byte array of the same size as the struct

	// Copy the struct data into the byte array
	memcpy(data, config, sizeof(AltimexConfig));
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	4611      	mov	r1, r2
 80018f6:	2250      	movs	r2, #80	; 0x50
 80018f8:	4618      	mov	r0, r3
 80018fa:	f007 fce7 	bl	80092cc <memcpy>

	storage->write_from(CONFIGURATION_OFFSET, sizeof(AltimexConfig), data);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2250      	movs	r2, #80	; 0x50
 8001908:	2100      	movs	r1, #0
 800190a:	f000 fdd7 	bl	80024bc <_ZN13EepromStorage10write_fromEtjPh>
}
 800190e:	bf00      	nop
 8001910:	3758      	adds	r7, #88	; 0x58
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig>:

void AltimexEeprom::load_configuration(AltimexConfig* config)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b098      	sub	sp, #96	; 0x60
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	uint8_t data[sizeof(AltimexConfig)];
	HAL_StatusTypeDef status = storage->read(CONFIGURATION_OFFSET, sizeof(AltimexConfig), data);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2250      	movs	r2, #80	; 0x50
 800192c:	2100      	movs	r1, #0
 800192e:	f000 fd87 	bl	8002440 <_ZN13EepromStorage4readEtjPh>
 8001932:	4603      	mov	r3, r0
 8001934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (status == HAL_OK) {
 8001938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10b      	bne.n	8001958 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x40>
        // Copy the data from the byte array into the config struct
        memcpy(config, data, sizeof(AltimexConfig));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2250      	movs	r2, #80	; 0x50
 800194a:	4619      	mov	r1, r3
 800194c:	f007 fcbe 	bl	80092cc <memcpy>
    	STM_USB::println("Loaded configuration!");
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x50>)
 8001952:	f000 fe8d 	bl	8002670 <_ZN7STM_USB7printlnEPc>
    } else {
    	STM_USB::println("Error loading configuration from EEPROM");
    }
}
 8001956:	e002      	b.n	800195e <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x46>
    	STM_USB::println("Error loading configuration from EEPROM");
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <_ZN13AltimexEeprom18load_configurationEP13AltimexConfig+0x54>)
 800195a:	f000 fe89 	bl	8002670 <_ZN7STM_USB7printlnEPc>
}
 800195e:	bf00      	nop
 8001960:	3760      	adds	r7, #96	; 0x60
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	0800c14c 	.word	0x0800c14c
 800196c:	0800c164 	.word	0x0800c164

08001970 <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>:
#include <altimex_led_controller.h>

uint32_t standbyLastFlash = 0;
uint32_t lastLedTurnonTime = 0;

AltimexLedController::AltimexLedController(AltimexConfig* _config, TIM_HandleTypeDef* _timer):
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
		config(_config),
		ledStrip(new LedStrip(_timer))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	2008      	movs	r0, #8
 8001984:	f005 ff72 	bl	800786c <_Znwj>
 8001988:	4603      	mov	r3, r0
 800198a:	461c      	mov	r4, r3
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4620      	mov	r0, r4
 8001990:	f000 fdb6 	bl	8002500 <_ZN8LedStripC1EP17TIM_HandleTypeDef>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	605c      	str	r4, [r3, #4]
{
	this->ledStrip->clear();
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fdef 	bl	8002580 <_ZN8LedStrip5clearEv>
}
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	0000      	movs	r0, r0
	...

080019b0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>:

void AltimexLedController::display_leds(enum AltimexState state, uint16_t step, uint16_t alt)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b08a      	sub	sp, #40	; 0x28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	4608      	mov	r0, r1
 80019bc:	4611      	mov	r1, r2
 80019be:	461a      	mov	r2, r3
 80019c0:	4603      	mov	r3, r0
 80019c2:	72fb      	strb	r3, [r7, #11]
 80019c4:	460b      	mov	r3, r1
 80019c6:	813b      	strh	r3, [r7, #8]
 80019c8:	4613      	mov	r3, r2
 80019ca:	80fb      	strh	r3, [r7, #6]
	//Periodically flashes to show that the device is on
	if(state == ALTIMEX_STANDBY)
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d172      	bne.n	8001ab8 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
	{
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019de:	4413      	add	r3, r2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
		this->ledStrip->set_brightness(this->config->standbyBrightness);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f000 fddf 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>

		//If board has just been turned on
		if(standbyLastFlash == 0 && HAL_GetTick() < 3000)
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 80019fe:	f001 fd81 	bl	8003504 <HAL_GetTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d801      	bhi.n	8001a10 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x62>
 8001a10:	2300      	movs	r3, #0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01c      	beq.n	8001a50 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xa0>
		{
			uint8_t on = (step) % 2 == 0;
 8001a16:	893b      	ldrh	r3, [r7, #8]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t leds = on * this->config->numLeds;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			this->ledStrip->progress_bar_single_color(leds, PURPLE);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001a46:	2203      	movs	r2, #3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fd74 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001a4e:	e033      	b.n	8001ab8 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
		}
		else {
			//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
			if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001a50:	f001 fd58 	bl	8003504 <HAL_GetTick>
 8001a54:	4601      	mov	r1, r0
 8001a56:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4299      	cmp	r1, r3
 8001a60:	bf8c      	ite	hi
 8001a62:	2301      	movhi	r3, #1
 8001a64:	2300      	movls	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xc8>
				standbyLastFlash = HAL_GetTick();
 8001a6c:	f001 fd4a 	bl	8003504 <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a33      	ldr	r2, [pc, #204]	; (8001b40 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01f      	b.n	8001ab8 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
			}
			else
			{
				//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
				if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	18d4      	adds	r4, r2, r3
 8001a84:	f001 fd3e 	bl	8003504 <HAL_GetTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	429c      	cmp	r4, r3
 8001a8c:	bf34      	ite	cc
 8001a8e:	2301      	movcc	r3, #1
 8001a90:	2300      	movcs	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00a      	beq.n	8001aae <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xfe>
				{
					this->ledStrip->progress_bar_single_color(this->config->numLeds, GREEN);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6858      	ldr	r0, [r3, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f000 fd45 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001aac:	e004      	b.n	8001ab8 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
				}
				else
				{
					this->ledStrip->clear();
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fd64 	bl	8002580 <_ZN8LedStrip5clearEv>
			}
		}
	}

	//Led bar with top led flashing. Full when at gear check altitude
	if(state == ALTIMEX_ASCENT)
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d147      	bne.n	8001b4e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f000 fd71 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	4413      	add	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]

		//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
		if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001ae2:	f001 fd0f 	bl	8003504 <HAL_GetTick>
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4413      	add	r3, r2
 8001af0:	4299      	cmp	r1, r3
 8001af2:	bf8c      	ite	hi
 8001af4:	2301      	movhi	r3, #1
 8001af6:	2300      	movls	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x15a>
			standbyLastFlash = HAL_GetTick();
 8001afe:	f001 fd01 	bl	8003504 <HAL_GetTick>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e021      	b.n	8001b4e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
		}
		else
		{
			//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
			if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	18d4      	adds	r4, r2, r3
 8001b16:	f001 fcf5 	bl	8003504 <HAL_GetTick>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf34      	ite	cc
 8001b20:	2301      	movcc	r3, #1
 8001b22:	2300      	movcs	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x194>
			{
				this->ledStrip->progress_bar_single_color(this->config->numLeds, YELLOW);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6858      	ldr	r0, [r3, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b36:	2201      	movs	r2, #1
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f000 fcfc 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001b3e:	e006      	b.n	8001b4e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
 8001b40:	200001f8 	.word	0x200001f8
			}
			else
			{
				this->ledStrip->clear();
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd19 	bl	8002580 <_ZN8LedStrip5clearEv>
		Strip_Progress_Bar_Single_Color(i, GREEN);
		*/
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_GEARCHECK)
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d128      	bne.n	8001ba6 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x1f6>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f000 fd26 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint8_t flash = (step / 7) % 2 == 0;
 8001b68:	893a      	ldrh	r2, [r7, #8]
 8001b6a:	4bbf      	ldr	r3, [pc, #764]	; (8001e68 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b8>)
 8001b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	0852      	lsrs	r2, r2, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf0c      	ite	eq
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2300      	movne	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	76fb      	strb	r3, [r7, #27]
		this->ledStrip->progress_bar_single_color(flash * this->config->numLeds, GREEN);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6858      	ldr	r0, [r3, #4]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b96:	7efa      	ldrb	r2, [r7, #27]
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f000 fcc8 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Solid blue while awaiting jump
	if(state == ALTIMEX_DETECT_FREEFALL_START)
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d113      	bne.n	8001bd4 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x224>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f000 fcfa 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		this->ledStrip->progress_bar_single_color(this->config->numLeds, SKYBLUE);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6858      	ldr	r0, [r3, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f000 fcb1 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude + 1500ft
	if(state == ALTIMEX_FREEFALL)
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d16a      	bne.n	8001cb0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x300>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f000 fce3 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds) * (1-(float)(alt - (this->config->breakoff + 1500)) / (this->config->exit - (this->config->breakoff + 1500)));
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fc04 	bl	8000404 <__aeabi_i2d>
 8001bfc:	4680      	mov	r8, r0
 8001bfe:	4689      	mov	r9, r1
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fbfe 	bl	8000404 <__aeabi_i2d>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c14:	a392      	add	r3, pc, #584	; (adr r3, 8001e60 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe faa7 	bl	800016c <__adddf3>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4620      	mov	r0, r4
 8001c24:	4629      	mov	r1, r5
 8001c26:	f7fe fa9f 	bl	8000168 <__aeabi_dsub>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe ff49 	bl	8000ac8 <__aeabi_d2f>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fbf5 	bl	8000428 <__aeabi_f2d>
 8001c3e:	4682      	mov	sl, r0
 8001c40:	468b      	mov	fp, r1
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c52:	a383      	add	r3, pc, #524	; (adr r3, 8001e60 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe fa88 	bl	800016c <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4620      	mov	r0, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	f7fe fa80 	bl	8000168 <__aeabi_dsub>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4650      	mov	r0, sl
 8001c6e:	4659      	mov	r1, fp
 8001c70:	f7fe fd5c 	bl	800072c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	497b      	ldr	r1, [pc, #492]	; (8001e6c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001c7e:	f7fe fa73 	bl	8000168 <__aeabi_dsub>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4640      	mov	r0, r8
 8001c88:	4649      	mov	r1, r9
 8001c8a:	f7fe fc25 	bl	80004d8 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe fef7 	bl	8000a88 <__aeabi_d2uiz>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	76bb      	strb	r3, [r7, #26]
		this->ledStrip->progress_bar_single_color(leds + 1, SKYBLUE);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6858      	ldr	r0, [r3, #4]
 8001ca2:	7ebb      	ldrb	r3, [r7, #26]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2204      	movs	r2, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	f000 fc43 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude
	if(state == ALTIMEX_APPROACHING_BREAKOFF)
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d15e      	bne.n	8001d74 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x3c4>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f000 fc75 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->breakoff) / ((this->config->breakoff + 1500) - this->config->breakoff));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fb95 	bl	8000404 <__aeabi_i2d>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fb8f 	bl	8000404 <__aeabi_i2d>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001cee:	f7fe fa3b 	bl	8000168 <__aeabi_dsub>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7fe fee5 	bl	8000ac8 <__aeabi_d2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fb91 	bl	8000428 <__aeabi_f2d>
 8001d06:	4680      	mov	r8, r0
 8001d08:	4689      	mov	r9, r1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001d12:	a353      	add	r3, pc, #332	; (adr r3, 8001e60 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fa28 	bl	800016c <__adddf3>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d2c:	f7fe fa1c 	bl	8000168 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4640      	mov	r0, r8
 8001d36:	4649      	mov	r1, r9
 8001d38:	f7fe fcf8 	bl	800072c <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	4949      	ldr	r1, [pc, #292]	; (8001e6c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001d46:	f7fe fa0f 	bl	8000168 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fbc1 	bl	80004d8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe fe93 	bl	8000a88 <__aeabi_d2uiz>
 8001d62:	4603      	mov	r3, r0
 8001d64:	767b      	strb	r3, [r7, #25]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	7e79      	ldrb	r1, [r7, #25]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fbe1 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_BREAKOFF)
 8001d74:	7afb      	ldrb	r3, [r7, #11]
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d121      	bne.n	8001dbe <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x40e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d86:	4619      	mov	r1, r3
 8001d88:	4610      	mov	r0, r2
 8001d8a:	f000 fc13 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 8001d8e:	893b      	ldrh	r3, [r7, #8]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	763b      	strb	r3, [r7, #24]
		uint8_t leds = on * this->config->numLeds;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da8:	7e3a      	ldrb	r2, [r7, #24]
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	75fb      	strb	r3, [r7, #23]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	7df9      	ldrb	r1, [r7, #23]
 8001db6:	2200      	movs	r2, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fbbc 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching deployment altitude
	if(state == ALTIMEX_TRACK)
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	d169      	bne.n	8001e98 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4e8>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 fbee 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->deploy) / ((this->config->deploy + 500) - this->config->deploy));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001de0:	3301      	adds	r3, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb0e 	bl	8000404 <__aeabi_i2d>
 8001de8:	4604      	mov	r4, r0
 8001dea:	460d      	mov	r5, r1
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb08 	bl	8000404 <__aeabi_i2d>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001dfc:	f7fe f9b4 	bl	8000168 <__aeabi_dsub>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7fe fe5e 	bl	8000ac8 <__aeabi_d2f>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb0a 	bl	8000428 <__aeabi_f2d>
 8001e14:	4680      	mov	r8, r0
 8001e16:	4689      	mov	r9, r1
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c0>)
 8001e26:	f7fe f9a1 	bl	800016c <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e3a:	f7fe f995 	bl	8000168 <__aeabi_dsub>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4640      	mov	r0, r8
 8001e44:	4649      	mov	r1, r9
 8001e46:	f7fe fc71 	bl	800072c <__aeabi_ddiv>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	4906      	ldr	r1, [pc, #24]	; (8001e6c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001e54:	f7fe f988 	bl	8000168 <__aeabi_dsub>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	e009      	b.n	8001e74 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c4>
 8001e60:	00000000 	.word	0x00000000
 8001e64:	40977000 	.word	0x40977000
 8001e68:	24924925 	.word	0x24924925
 8001e6c:	3ff00000 	.word	0x3ff00000
 8001e70:	407f4000 	.word	0x407f4000
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe fb2f 	bl	80004d8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe fe01 	bl	8000a88 <__aeabi_d2uiz>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75bb      	strb	r3, [r7, #22]
		this->ledStrip->progress_bar_single_color(leds, RED);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	7db9      	ldrb	r1, [r7, #22]
 8001e90:	2202      	movs	r2, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb4f 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes red until detects canopy deployment
	if(state == ALTIMEX_DEPLOY)
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d121      	bne.n	8001ee2 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x532>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f000 fb81 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	757b      	strb	r3, [r7, #21]
		uint8_t leds = on * this->config->numLeds;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ecc:	7d7a      	ldrb	r2, [r7, #21]
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	753b      	strb	r3, [r7, #20]
		this->ledStrip->progress_bar_single_color(leds, RED);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	7d39      	ldrb	r1, [r7, #20]
 8001eda:	2202      	movs	r2, #2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fb2a 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes purple
	if(state == ALTIMEX_CANOPY)
 8001ee2:	7afb      	ldrb	r3, [r7, #11]
 8001ee4:	2b09      	cmp	r3, #9
 8001ee6:	d126      	bne.n	8001f36 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x586>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f000 fb5c 	bl	80025b4 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step/10) % 2 == 0;
 8001efc:	893b      	ldrh	r3, [r7, #8]
 8001efe:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x59c>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	74fb      	strb	r3, [r7, #19]
		uint8_t leds = on * this->config->numLeds;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f20:	7cfa      	ldrb	r2, [r7, #19]
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	74bb      	strb	r3, [r7, #18]
		this->ledStrip->progress_bar_single_color(leds, PURPLE);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	7cb9      	ldrb	r1, [r7, #18]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fb00 	bl	8002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	this->ledStrip->send();
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fb2d 	bl	800259a <_ZN8LedStrip4sendEv>
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4a:	bf00      	nop
 8001f4c:	cccccccd 	.word	0xcccccccd

08001f50 <_ZN22AltimexStateControllerC1EP13AltimexConfig>:
 *      Author: kking
 */

#include <altimex_state_controller.h>

AltimexStateController::AltimexStateController(AltimexConfig* _config):
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
		freefallStartAlt(0.0),
		deployTestPrevAlt(0.0),
		deployTestPrevTime(0),
		deployTest(false),
		deployTestStart(0),
		deployTestStartAlt(0.0)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	721a      	strb	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	751a      	strb	r2, [r3, #20]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2020 	strb.w	r2, [r3, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	639a      	str	r2, [r3, #56]	; 0x38
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
{

}
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN22AltimexStateController9get_stateEv>:

enum AltimexState AltimexStateController::get_state()
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	return this->currentState;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	781b      	ldrb	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	0000      	movs	r0, r0
 8001ffc:	0000      	movs	r0, r0
	...

08002000 <_ZN22AltimexStateController12update_stateEd>:

void AltimexStateController::update_state(double alt)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentState == ALTIMEX_STANDBY)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d13f      	bne.n	8002094 <_ZN22AltimexStateController12update_stateEd+0x94>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > config->ascentThreshold)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002020:	f7fe fcea 	bl	80009f8 <__aeabi_dcmpgt>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d022      	beq.n	8002070 <_ZN22AltimexStateController12update_stateEd+0x70>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	7a1b      	ldrb	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d107      	bne.n	8002042 <_ZN22AltimexStateController12update_stateEd+0x42>
			{
				testingAscent = 1;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	721a      	strb	r2, [r3, #8]
				ascentTestStart = HAL_GetTick();
 8002038:	f001 fa64 	bl	8003504 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	60da      	str	r2, [r3, #12]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	7a1b      	ldrb	r3, [r3, #8]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d112      	bne.n	8002070 <_ZN22AltimexStateController12update_stateEd+0x70>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= config->ascentThresholdTime)
 800204a:	f001 fa5b 	bl	8003504 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6852      	ldr	r2, [r2, #4]
 800205a:	8912      	ldrh	r2, [r2, #8]
 800205c:	4293      	cmp	r3, r2
 800205e:	bf2c      	ite	cs
 8002060:	2301      	movcs	r3, #1
 8002062:	2300      	movcc	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <_ZN22AltimexStateController12update_stateEd+0x70>
				{
					currentState = ALTIMEX_ASCENT;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < config->ascentThreshold)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800207c:	f7fe fc9e 	bl	80009bc <__aeabi_dcmplt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <_ZN22AltimexStateController12update_stateEd+0x94>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	7a1b      	ldrb	r3, [r3, #8]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <_ZN22AltimexStateController12update_stateEd+0x94>
			{
				testingAscent = 0;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	721a      	strb	r2, [r3, #8]
			}
		}
	}

	if(currentState == ALTIMEX_ASCENT)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10d      	bne.n	80020b8 <_ZN22AltimexStateController12update_stateEd+0xb8>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > config->gearCheckAlt)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80020a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020a8:	f7fe fca6 	bl	80009f8 <__aeabi_dcmpgt>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <_ZN22AltimexStateController12update_stateEd+0xb8>
		{
			currentState = ALTIMEX_GEARCHECK;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2202      	movs	r2, #2
 80020b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_GEARCHECK)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d127      	bne.n	8002110 <_ZN22AltimexStateController12update_stateEd+0x110>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	7d1b      	ldrb	r3, [r3, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <_ZN22AltimexStateController12update_stateEd+0xd8>
		{
			gearCheckNotificationStart = HAL_GetTick();
 80020c8:	f001 fa1c 	bl	8003504 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	611a      	str	r2, [r3, #16]
			displayedGearCheck = 1;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	751a      	strb	r2, [r3, #20]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck & HAL_GetTick() > gearCheckNotificationStart + config->gearCheckNotificationLength)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	7d1b      	ldrb	r3, [r3, #20]
 80020dc:	461c      	mov	r4, r3
 80020de:	f001 fa11 	bl	8003504 <HAL_GetTick>
 80020e2:	4601      	mov	r1, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	4299      	cmp	r1, r3
 80020f2:	bf8c      	ite	hi
 80020f4:	2301      	movhi	r3, #1
 80020f6:	2300      	movls	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4023      	ands	r3, r4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <_ZN22AltimexStateController12update_stateEd+0x110>
		{
			currentState = ALTIMEX_DETECT_FREEFALL_START;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2203      	movs	r2, #3
 800210e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DETECT_FREEFALL_START)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d17b      	bne.n	8002210 <_ZN22AltimexStateController12update_stateEd+0x210>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800211e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002122:	f7fe fc4b 	bl	80009bc <__aeabi_dcmplt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d059      	beq.n	80021e0 <_ZN22AltimexStateController12update_stateEd+0x1e0>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <_ZN22AltimexStateController12update_stateEd+0x152>
			{
				freefallTest = 1;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2020 	strb.w	r2, [r3, #32]
				freefallTestStart = HAL_GetTick();
 800213e:	f001 f9e1 	bl	8003504 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
				freefallStartAlt = alt;
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800214e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + config->freefallThresholdTime)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10c      	bne.n	8002176 <_ZN22AltimexStateController12update_stateEd+0x176>
 800215c:	f001 f9d2 	bl	8003504 <HAL_GetTick>
 8002160:	4601      	mov	r1, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	4413      	add	r3, r2
 800216e:	4299      	cmp	r1, r3
 8002170:	d901      	bls.n	8002176 <_ZN22AltimexStateController12update_stateEd+0x176>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <_ZN22AltimexStateController12update_stateEd+0x178>
 8002176:	2300      	movs	r3, #0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d031      	beq.n	80021e0 <_ZN22AltimexStateController12update_stateEd+0x1e0>
			{
				double elapsedTimeSec = (double)(HAL_GetTick() - freefallTestStart) / 1000;
 800217c:	f001 f9c2 	bl	8003504 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f92b 	bl	80003e4 <__aeabi_ui2d>
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b9b      	ldr	r3, [pc, #620]	; (8002400 <_ZN22AltimexStateController12update_stateEd+0x400>)
 8002194:	f7fe faca 	bl	800072c <__aeabi_ddiv>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				double avgSpeedFps = ((double)(freefallStartAlt - alt) / elapsedTimeSec);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80021a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021aa:	f7fd ffdd 	bl	8000168 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ba:	f7fe fab7 	bl	800072c <__aeabi_ddiv>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	e9c7 2308 	strd	r2, r3, [r7, #32]

				//If average speed is above 80mph
				if(avgSpeedFps >= 117.0) //80mph to fps
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <_ZN22AltimexStateController12update_stateEd+0x404>)
 80021cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021d0:	f7fe fc08 	bl	80009e4 <__aeabi_dcmpge>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <_ZN22AltimexStateController12update_stateEd+0x1e0>
				{
					currentState = ALTIMEX_FREEFALL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2204      	movs	r2, #4
 80021de:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021ea:	f7fe fc05 	bl	80009f8 <__aeabi_dcmpgt>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <_ZN22AltimexStateController12update_stateEd+0x206>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d103      	bne.n	8002206 <_ZN22AltimexStateController12update_stateEd+0x206>
			{
				freefallTest = 0;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}

		prevAlt = alt;
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800220c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	if(currentState == ALTIMEX_FREEFALL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d114      	bne.n	8002242 <_ZN22AltimexStateController12update_stateEd+0x242>
	{
		if(alt < config->breakoff + 1500.0)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002220:	a375      	add	r3, pc, #468	; (adr r3, 80023f8 <_ZN22AltimexStateController12update_stateEd+0x3f8>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	f7fd ffa1 	bl	800016c <__adddf3>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002232:	f7fe fbc3 	bl	80009bc <__aeabi_dcmplt>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <_ZN22AltimexStateController12update_stateEd+0x242>
		{
			currentState = ALTIMEX_APPROACHING_BREAKOFF;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2205      	movs	r2, #5
 8002240:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_APPROACHING_BREAKOFF)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d10d      	bne.n	8002266 <_ZN22AltimexStateController12update_stateEd+0x266>
	{
		if(alt < config->breakoff)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002256:	f7fe fbb1 	bl	80009bc <__aeabi_dcmplt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <_ZN22AltimexStateController12update_stateEd+0x266>
		{
			currentState = ALTIMEX_BREAKOFF;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2206      	movs	r2, #6
 8002264:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_BREAKOFF)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b06      	cmp	r3, #6
 800226c:	d114      	bne.n	8002298 <_ZN22AltimexStateController12update_stateEd+0x298>
	{
		if(alt < config->breakoff - 500.0)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <_ZN22AltimexStateController12update_stateEd+0x408>)
 800227c:	f7fd ff74 	bl	8000168 <__aeabi_dsub>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002288:	f7fe fb98 	bl	80009bc <__aeabi_dcmplt>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <_ZN22AltimexStateController12update_stateEd+0x298>
		{
			currentState = ALTIMEX_TRACK;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2207      	movs	r2, #7
 8002296:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_TRACK)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b07      	cmp	r3, #7
 800229e:	d10d      	bne.n	80022bc <_ZN22AltimexStateController12update_stateEd+0x2bc>
	{
		if(alt < config->deploy)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80022a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ac:	f7fe fb86 	bl	80009bc <__aeabi_dcmplt>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <_ZN22AltimexStateController12update_stateEd+0x2bc>
		{
			currentState = ALTIMEX_DEPLOY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2208      	movs	r2, #8
 80022ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DEPLOY)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	f040 8094 	bne.w	80023ee <_ZN22AltimexStateController12update_stateEd+0x3ee>
	{

		if(deployTest == 0)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d13f      	bne.n	8002350 <_ZN22AltimexStateController12update_stateEd+0x350>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			double elapsedTimeSec = (double)(HAL_GetTick() - deployTestStart) / 1000;
 80022d0:	f001 f918 	bl	8003504 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f881 	bl	80003e4 <__aeabi_ui2d>
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <_ZN22AltimexStateController12update_stateEd+0x400>)
 80022e8:	f7fe fa20 	bl	800072c <__aeabi_ddiv>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double avgSpeedFps = fabs((double)(deployTestStartAlt - alt) / elapsedTimeSec);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80022fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fe:	f7fd ff33 	bl	8000168 <__aeabi_dsub>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800230e:	f7fe fa0d 	bl	800072c <__aeabi_ddiv>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4611      	mov	r1, r2
 8002318:	6139      	str	r1, [r7, #16]
 800231a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800231e:	617b      	str	r3, [r7, #20]
			if(avgSpeedFps <= 73.0) //50mph to fps
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b39      	ldr	r3, [pc, #228]	; (800240c <_ZN22AltimexStateController12update_stateEd+0x40c>)
 8002326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800232a:	f7fe fb51 	bl	80009d0 <__aeabi_dcmple>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00d      	beq.n	8002350 <_ZN22AltimexStateController12update_stateEd+0x350>
			{
				deployTest = 1;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				deployTestStart = HAL_GetTick();
 800233c:	f001 f8e2 	bl	8003504 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
				deployTestStartAlt = alt;
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800234c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			}
		}
		if(deployTest == 1)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d13f      	bne.n	80023da <_ZN22AltimexStateController12update_stateEd+0x3da>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002364:	f7fd ff00 	bl	8000168 <__aeabi_dsub>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	f001 f8c8 	bl	8003504 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f831 	bl	80003e4 <__aeabi_ui2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4620      	mov	r0, r4
 8002388:	4629      	mov	r1, r5
 800238a:	f7fe f9cf 	bl	800072c <__aeabi_ddiv>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	2301      	movs	r3, #1
 8002398:	461c      	mov	r4, r3
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <_ZN22AltimexStateController12update_stateEd+0x40c>)
 80023a0:	f7fe fb16 	bl	80009d0 <__aeabi_dcmple>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <_ZN22AltimexStateController12update_stateEd+0x3ae>
 80023aa:	2300      	movs	r3, #0
 80023ac:	461c      	mov	r4, r3
 80023ae:	b2e3      	uxtb	r3, r4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <_ZN22AltimexStateController12update_stateEd+0x3da>
			{
				if(HAL_GetTick() > deployTestStart + config->deployTestThresholdTime)
 80023b4:	f001 f8a6 	bl	8003504 <HAL_GetTick>
 80023b8:	4601      	mov	r1, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	6852      	ldr	r2, [r2, #4]
 80023c2:	8952      	ldrh	r2, [r2, #10]
 80023c4:	4413      	add	r3, r2
 80023c6:	4299      	cmp	r1, r3
 80023c8:	bf8c      	ite	hi
 80023ca:	2301      	movhi	r3, #1
 80023cc:	2300      	movls	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <_ZN22AltimexStateController12update_stateEd+0x3da>
				{
					currentState = ALTIMEX_CANOPY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2209      	movs	r2, #9
 80023d8:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 80023da:	f001 f893 	bl	8003504 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38
		deployTestPrevAlt = alt;
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		{
			StateController_currentState = COLORALTI_STANDBY;
		}
		*/
	}
}
 80023ee:	bf00      	nop
 80023f0:	3730      	adds	r7, #48	; 0x30
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40977000 	.word	0x40977000
 8002400:	408f4000 	.word	0x408f4000
 8002404:	405d4000 	.word	0x405d4000
 8002408:	407f4000 	.word	0x407f4000
 800240c:	40524000 	.word	0x40524000

08002410 <_ZN13EepromStorageC1EtP17I2C_HandleTypeDef>:

/*
 * Address should be the "base" address of the chip. For example if you provide 0xA0 as the address
 * then the read address will be 0xA0 and the write address will be 0xA1
 */
EepromStorage::EepromStorage(uint16_t _address, I2C_HandleTypeDef* _i2cx):
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	460b      	mov	r3, r1
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	817b      	strh	r3, [r7, #10]
	readAddress(_address),
	writeAddress(_address + 1),
	i2cx(_i2cx)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	897a      	ldrh	r2, [r7, #10]
 8002422:	805a      	strh	r2, [r3, #2]
	writeAddress(_address + 1),
 8002424:	897b      	ldrh	r3, [r7, #10]
 8002426:	3301      	adds	r3, #1
 8002428:	b29a      	uxth	r2, r3
	i2cx(_i2cx)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	809a      	strh	r2, [r3, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]
{

}
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <_ZN13EepromStorage4readEtjPh>:

HAL_StatusTypeDef EepromStorage::read(uint16_t offset, size_t len, uint8_t* data)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af04      	add	r7, sp, #16
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	460b      	mov	r3, r1
 800244e:	817b      	strh	r3, [r7, #10]
	//HAL_StatusTypeDef read_res = HAL_I2C_Mem_Read(i2cx, 0xA0, offset, 2, data, len, 1000);
	//uint8_t realdata[len];
	HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
	uint16_t i = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	82bb      	strh	r3, [r7, #20]
	while(i < len) {
 8002458:	8abb      	ldrh	r3, [r7, #20]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	d925      	bls.n	80024ac <_ZN13EepromStorage4readEtjPh+0x6c>
		uint8_t read_byte = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	74bb      	strb	r3, [r7, #18]
		HAL_StatusTypeDef read_res = HAL_I2C_Mem_Read(i2cx, readAddress, offset + i, 2, &read_byte, 1, 1000);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6898      	ldr	r0, [r3, #8]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8859      	ldrh	r1, [r3, #2]
 800246c:	897a      	ldrh	r2, [r7, #10]
 800246e:	8abb      	ldrh	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	b29a      	uxth	r2, r3
 8002474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	2301      	movs	r3, #1
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	f107 0312 	add.w	r3, r7, #18
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2302      	movs	r3, #2
 8002486:	f001 fff5 	bl	8004474 <HAL_I2C_Mem_Read>
 800248a:	4603      	mov	r3, r0
 800248c:	74fb      	strb	r3, [r7, #19]
		if(read_res != HAL_OK) {
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <_ZN13EepromStorage4readEtjPh+0x5a>
			status = read_res;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	e008      	b.n	80024ac <_ZN13EepromStorage4readEtjPh+0x6c>
			break;
		}
		data[i] = read_byte;
 800249a:	8abb      	ldrh	r3, [r7, #20]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	7cba      	ldrb	r2, [r7, #18]
 80024a2:	701a      	strb	r2, [r3, #0]
		i++;
 80024a4:	8abb      	ldrh	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	82bb      	strh	r3, [r7, #20]
	while(i < len) {
 80024aa:	e7d5      	b.n	8002458 <_ZN13EepromStorage4readEtjPh+0x18>
	}

	HAL_Delay(100);
 80024ac:	2064      	movs	r0, #100	; 0x64
 80024ae:	f001 f833 	bl	8003518 <HAL_Delay>
	return status;
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZN13EepromStorage10write_fromEtjPh>:
	HAL_Delay(100);
	return write_res;
}

HAL_StatusTypeDef EepromStorage::write_from(uint16_t offset, size_t size, uint8_t* data)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b08b      	sub	sp, #44	; 0x2c
 80024c0:	af04      	add	r7, sp, #16
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	460b      	mov	r3, r1
 80024ca:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef write_res = HAL_I2C_Mem_Write(i2cx, writeAddress, offset, 2, data, size, 1000);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6898      	ldr	r0, [r3, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8899      	ldrh	r1, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	897a      	ldrh	r2, [r7, #10]
 80024da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80024de:	9402      	str	r4, [sp, #8]
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2302      	movs	r3, #2
 80024e8:	f001 feca 	bl	8004280 <HAL_I2C_Mem_Write>
 80024ec:	4603      	mov	r3, r0
 80024ee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80024f0:	2064      	movs	r0, #100	; 0x64
 80024f2:	f001 f811 	bl	8003518 <HAL_Delay>
	return write_res;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <_ZN8LedStripC1EP17TIM_HandleTypeDef>:
 *      Author: kking
 */

#include <led_strip.h>

LedStrip::LedStrip(TIM_HandleTypeDef* _timer): timer(_timer), controller(new WS2813BController(timer))
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	f44f 7025 	mov.w	r0, #660	; 0x294
 8002514:	f005 f9aa 	bl	800786c <_Znwj>
 8002518:	4603      	mov	r3, r0
 800251a:	461c      	mov	r4, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4620      	mov	r0, r4
 8002524:	f000 f8cc 	bl	80026c0 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605c      	str	r4, [r3, #4]
{

}
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}

08002536 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>:

void LedStrip::progress_bar_single_color(uint8_t num_filled, enum COLOR color)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	70fb      	strb	r3, [r7, #3]
 8002542:	4613      	mov	r3, r2
 8002544:	70bb      	strb	r3, [r7, #2]
	this->clear();
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f81a 	bl	8002580 <_ZN8LedStrip5clearEv>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	2b0a      	cmp	r3, #10
 8002550:	d901      	bls.n	8002556 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x20>
 8002552:	230a      	movs	r3, #10
 8002554:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < num_filled; i++) {
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	429a      	cmp	r2, r3
 8002560:	d20a      	bcs.n	8002578 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x42>
		controller->set_led_from_color_name(i, color);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	7bf9      	ldrb	r1, [r7, #15]
 8002568:	78ba      	ldrb	r2, [r7, #2]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa36 	bl	80029dc <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>
	for(uint8_t i = 0; i < num_filled; i++) {
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	3301      	adds	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e7f0      	b.n	800255a <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x24>
	}
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_ZN8LedStrip5clearEv>:

void LedStrip::clear()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	controller->clear();
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fa55 	bl	8002a3c <_ZN17WS2813BController5clearEv>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_ZN8LedStrip4sendEv>:

void LedStrip::send()
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
	controller->send();
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f938 	bl	800281c <_ZN17WS2813BController4sendEv>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_ZN8LedStrip14set_brightnessEi>:

void LedStrip::set_brightness(int brightness)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	controller->set_brightness(brightness);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f8b7 	bl	8002738 <_ZN17WS2813BController14set_brightnessEi>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>:
#include <usb.h>

UART_HandleTypeDef* STM_USB::uart = 0; //Set STM_USB::uart to dummy value

void STM_USB::init(UART_HandleTypeDef* _uart)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	STM_USB::uart = _uart; //Set STM_USB::uart to actual value
 80025dc:	4a03      	ldr	r2, [pc, #12]	; (80025ec <_ZN7STM_USB4initEP20__UART_HandleTypeDef+0x18>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6013      	str	r3, [r2, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	200001fc 	.word	0x200001fc

080025f0 <_ZN7STM_USB6printdEd>:
	size_t len = strlen(charData);
	STM_USB::println(charData);
}

void STM_USB::printd(double data)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b094      	sub	sp, #80	; 0x50
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	e9c7 0100 	strd	r0, r1, [r7]
	char charData[64] = {'\0'};
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	223c      	movs	r2, #60	; 0x3c
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f006 fe6e 	bl	80092e8 <memset>
	sprintf(charData, "%f", data);
 800260c:	f107 000c 	add.w	r0, r7, #12
 8002610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002614:	4908      	ldr	r1, [pc, #32]	; (8002638 <_ZN7STM_USB6printdEd+0x48>)
 8002616:	f007 fbff 	bl	8009e18 <siprintf>
	size_t len = strlen(charData);
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd fd96 	bl	8000150 <strlen>
 8002624:	64f8      	str	r0, [r7, #76]	; 0x4c
	STM_USB::println(charData);
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f820 	bl	8002670 <_ZN7STM_USB7printlnEPc>
}
 8002630:	bf00      	nop
 8002632:	3750      	adds	r7, #80	; 0x50
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	0800c18c 	.word	0x0800c18c

0800263c <_ZN7STM_USB5printEPc>:

void STM_USB::print(char* data)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* tmp = STM_USB::uart;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <_ZN7STM_USB5printEPc+0x30>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(STM_USB::uart, (const uint8_t*)data, strlen(data), 100);
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <_ZN7STM_USB5printEPc+0x30>)
 800264c:	681c      	ldr	r4, [r3, #0]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fd fd7e 	bl	8000150 <strlen>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	2364      	movs	r3, #100	; 0x64
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4620      	mov	r0, r4
 800265e:	f004 fb31 	bl	8006cc4 <HAL_UART_Transmit>
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	200001fc 	.word	0x200001fc

08002670 <_ZN7STM_USB7printlnEPc>:

void STM_USB::println(char* data)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	STM_USB::print(data);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffdf 	bl	800263c <_ZN7STM_USB5printEPc>

	char newline[3] = "\r\n";
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <_ZN7STM_USB7printlnEPc+0x34>)
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4611      	mov	r1, r2
 8002688:	8019      	strh	r1, [r3, #0]
 800268a:	3302      	adds	r3, #2
 800268c:	0c12      	lsrs	r2, r2, #16
 800268e:	701a      	strb	r2, [r3, #0]
	STM_USB::print(newline);
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ffd1 	bl	800263c <_ZN7STM_USB5printEPc>
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	0800c190 	.word	0x0800c190

080026a8 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f005 f8f5 	bl	80078a0 <tanf>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>:
*/

TIM_HandleTypeDef* WS2813BController::timer = 0ull;
bool WS2813BController::data_sent_flag = false;

WS2813BController::WS2813BController(TIM_HandleTypeDef* _timer)
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
{
	WS2813BController::timer = _timer;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef+0x1c>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	20000200 	.word	0x20000200

080026e0 <_ZN17WS2813BController7set_ledEiiii>:

void WS2813BController::set_led (int LEDnum, int Red, int Green, int Blue)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	b2d9      	uxtb	r1, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2d9      	uxtb	r1, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	460a      	mov	r2, r1
 8002708:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	b2d9      	uxtb	r1, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	460a      	mov	r2, r1
 8002718:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	b2d9      	uxtb	r1, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	460a      	mov	r2, r1
 8002728:	70da      	strb	r2, [r3, #3]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	0000      	movs	r0, r0
	...

08002738 <_ZN17WS2813BController14set_brightnessEi>:

#define PI 3.14159265

void WS2813BController::set_brightness (int brightness)  // 0-45
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b2d      	cmp	r3, #45	; 0x2d
 8002746:	dd01      	ble.n	800274c <_ZN17WS2813BController14set_brightnessEi+0x14>
 8002748:	232d      	movs	r3, #45	; 0x2d
 800274a:	603b      	str	r3, [r7, #0]
	for (int i=0; i<MAX_LED; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b09      	cmp	r3, #9
 8002754:	dc58      	bgt.n	8002808 <_ZN17WS2813BController14set_brightnessEi+0xd0>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	320a      	adds	r2, #10
 8002764:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		for (int j=1; j<4; j++)
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b03      	cmp	r3, #3
 8002770:	dc46      	bgt.n	8002800 <_ZN17WS2813BController14set_brightnessEi+0xc8>
		{
			float angle = 90-brightness;  // in degrees
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe faaf 	bl	8000cdc <__aeabi_i2f>
 800277e:	4603      	mov	r3, r0
 8002780:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7fd fe50 	bl	8000428 <__aeabi_f2d>
 8002788:	a321      	add	r3, pc, #132	; (adr r3, 8002810 <_ZN17WS2813BController14set_brightnessEi+0xd8>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fd fea3 	bl	80004d8 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <_ZN17WS2813BController14set_brightnessEi+0xe0>)
 80027a0:	f7fd ffc4 	bl	800072c <__aeabi_ddiv>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe f98c 	bl	8000ac8 <__aeabi_d2f>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fa8a 	bl	8000cdc <__aeabi_i2f>
 80027c8:	4604      	mov	r4, r0
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff ff6c 	bl	80026a8 <_ZSt3tanf>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4619      	mov	r1, r3
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7fe fb89 	bl	8000eec <__aeabi_fdiv>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fcbd 	bl	800115c <__aeabi_f2uiz>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b2d9      	uxtb	r1, r3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	3328      	adds	r3, #40	; 0x28
 80027f4:	460a      	mov	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	3301      	adds	r3, #1
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e7b5      	b.n	800276c <_ZN17WS2813BController14set_brightnessEi+0x34>
	for (int i=0; i<MAX_LED; i++)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e7a3      	b.n	8002750 <_ZN17WS2813BController14set_brightnessEi+0x18>
		}
	}

#endif

}
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd90      	pop	{r4, r7, pc}
 8002810:	53c8d4f1 	.word	0x53c8d4f1
 8002814:	400921fb 	.word	0x400921fb
 8002818:	40668000 	.word	0x40668000

0800281c <_ZN17WS2813BController4sendEv>:

void WS2813BController::send ()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	uint32_t indx=0;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b09      	cmp	r3, #9
 8002830:	dc3c      	bgt.n	80028ac <_ZN17WS2813BController4sendEv+0x90>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	431a      	orrs	r2, r3
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8002860:	2317      	movs	r3, #23
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db1c      	blt.n	80028a4 <_ZN17WS2813BController4sendEv+0x88>
		{
			if (color&(1<<i))
 800286a:	2201      	movs	r2, #1
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <_ZN17WS2813BController4sendEv+0x6e>
			{
				pwmData[indx] = 48;  // 75% of 64
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	3228      	adds	r2, #40	; 0x28
 8002882:	2130      	movs	r1, #48	; 0x30
 8002884:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002888:	e005      	b.n	8002896 <_ZN17WS2813BController4sendEv+0x7a>
			}

			else pwmData[indx] = 20;  // ~30% of 64
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	3228      	adds	r2, #40	; 0x28
 8002890:	2114      	movs	r1, #20
 8002892:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			indx++;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3b01      	subs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e7df      	b.n	8002864 <_ZN17WS2813BController4sendEv+0x48>
	for (int i= 0; i<MAX_LED; i++)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	3301      	adds	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e7bf      	b.n	800282c <_ZN17WS2813BController4sendEv+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b31      	cmp	r3, #49	; 0x31
 80028b4:	dc0c      	bgt.n	80028d0 <_ZN17WS2813BController4sendEv+0xb4>
	{
		pwmData[indx] = 0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	3228      	adds	r2, #40	; 0x28
 80028bc:	2100      	movs	r1, #0
 80028be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	3301      	adds	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e7ef      	b.n	80028b0 <_ZN17WS2813BController4sendEv+0x94>
	}

	HAL_TIM_PWM_Start_DMA(timer, TIM_CHANNEL_2, (uint32_t *)pwmData, indx);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <_ZN17WS2813BController4sendEv+0xe0>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2104      	movs	r1, #4
 80028e0:	f003 f9ca 	bl	8005c78 <HAL_TIM_PWM_Start_DMA>
	while (!data_sent_flag){};
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <_ZN17WS2813BController4sendEv+0xe4>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d100      	bne.n	80028ee <_ZN17WS2813BController4sendEv+0xd2>
 80028ec:	e7fa      	b.n	80028e4 <_ZN17WS2813BController4sendEv+0xc8>
	data_sent_flag = false;
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <_ZN17WS2813BController4sendEv+0xe4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
}
 80028f4:	bf00      	nop
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000200 	.word	0x20000200
 8002900:	20000204 	.word	0x20000204

08002904 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>:

void WS2813BController::color_to_rgb(struct RGB* rgb, enum COLOR color)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
	if(color == GREEN) {
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x26>
		rgb->r = 0;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2214      	movs	r2, #20
 8002928:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d108      	bne.n	8002942 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x3e>
		rgb->r = 255;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	22ff      	movs	r2, #255	; 0xff
 8002934:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	22ff      	movs	r2, #255	; 0xff
 800293a:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2200      	movs	r2, #0
 8002940:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d108      	bne.n	800295a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x56>
		rgb->r = 255;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	22ff      	movs	r2, #255	; 0xff
 800294c:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d108      	bne.n	8002972 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x6e>
		rgb->r = 255;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	22ff      	movs	r2, #255	; 0xff
 8002970:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d108      	bne.n	800298a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x86>
		rgb->r = 0;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	22ff      	movs	r2, #255	; 0xff
 8002982:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	22c8      	movs	r2, #200	; 0xc8
 8002988:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d108      	bne.n	80029a2 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x9e>
		rgb->r = 0;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	709a      	strb	r2, [r3, #2]
	}
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>:

void WS2813BController::set_led_from_rgb(int LEDnum, struct RGB* rgb)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
	set_led(LEDnum, rgb->r, rgb->g, rgb->b);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	789b      	ldrb	r3, [r3, #2]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	460b      	mov	r3, r1
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff fe86 	bl	80026e0 <_ZN17WS2813BController7set_ledEiiii>
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>:

void WS2813BController::set_led_from_color_name(int LEDnum, enum COLOR color)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71fb      	strb	r3, [r7, #7]
	struct RGB rgb;
	color_to_rgb(&rgb, color);
 80029ea:	79fa      	ldrb	r2, [r7, #7]
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ff86 	bl	8002904 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>
	set_led_from_rgb(LEDnum, &rgb);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	461a      	mov	r2, r3
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ffd3 	bl	80029ac <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(WS2813BController::timer, TIM_CHANNEL_2);
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 facc 	bl	8005fbc <HAL_TIM_PWM_Stop_DMA>
	WS2813BController::data_sent_flag = true;
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000200 	.word	0x20000200
 8002a38:	20000204 	.word	0x20000204

08002a3c <_ZN17WS2813BController5clearEv>:

void WS2813BController::clear()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MAX_LED; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b09      	cmp	r3, #9
 8002a4c:	d809      	bhi.n	8002a62 <_ZN17WS2813BController5clearEv+0x26>
	{
		set_led_from_color_name(i, CLEAR);
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2205      	movs	r2, #5
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffc1 	bl	80029dc <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>
	for(uint8_t i = 0; i < MAX_LED; i++)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e7f2      	b.n	8002a48 <_ZN17WS2813BController5clearEv+0xc>
	}
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	0000      	movs	r0, r0
 8002a6c:	0000      	movs	r0, r0
	...

08002a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b099      	sub	sp, #100	; 0x64
 8002a74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a76:	f000 fced 	bl	8003454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a7a:	f000 f86d 	bl	8002b58 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a7e:	f000 fa35 	bl	8002eec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002a82:	f000 fa15 	bl	8002eb0 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002a86:	f000 f8b3 	bl	8002bf0 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002a8a:	f000 f945 	bl	8002d18 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8002a8e:	f000 f8e3 	bl	8002c58 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8002a92:	f000 f9df 	bl	8002e54 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

	struct AltimexConfig config;
	config.ascentThreshold = 500;              //The altitude you must pass for it to transition into the ascent state
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <main+0xd8>)
 8002a9c:	e9c7 2300 	strd	r2, r3, [r7]
	config.ascentThresholdTime = 1000;         //ms that altitude must be above the ascentThreshold before transitioning between states
 8002aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa4:	813b      	strh	r3, [r7, #8]
	config.deployTestThresholdTime = 2000;     //ms, threshold time that vertical speed has to be under 50mph
 8002aa6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002aaa:	817b      	strh	r3, [r7, #10]
	config.gearCheckNotificationLength = 5000; //ms, the length of the gearcheck notification
 8002aac:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab0:	60fb      	str	r3, [r7, #12]
	config.freefallThresholdTime = 2000;       //ms, the amount of time that the vertical speed must be above the freefall threshold speed to transition into freefall state
 8002ab2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ab6:	613b      	str	r3, [r7, #16]
	config.exit = 12500.0;                     //Exit altitude
 8002ab8:	a31b      	add	r3, pc, #108	; (adr r3, 8002b28 <main+0xb8>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	config.breakoff = 5500.0;                  //Breakoff altitude
 8002ac2:	a31b      	add	r3, pc, #108	; (adr r3, 8002b30 <main+0xc0>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	config.deploy = 4500.0;                    //Deployment altitude
 8002acc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b38 <main+0xc8>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	config.standbyFlashOnLength = 100;         //How long the light is on for when in standby mode
 8002ad6:	2364      	movs	r3, #100	; 0x64
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
	config.standbyFlashOffLength = 10000;      //Period between each flash in standby mode
 8002ada:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
	config.numLeds = 10;                       //The number of leds being used
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	config.gearCheckAlt = 10000.0;             //The altitude that the gear check notification is given
 8002ae6:	a316      	add	r3, pc, #88	; (adr r3, 8002b40 <main+0xd0>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	config.brightness = 20;                    //LED brightness
 8002af0:	2314      	movs	r3, #20
 8002af2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	config.standbyBrightness = 5;              //Brightness of LEDS while in standby mode
 8002af6:	2305      	movs	r3, #5
 8002af8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	Altimex* altimex = new Altimex(&huart1, &hi2c1, &htim2, &config);
 8002afc:	2028      	movs	r0, #40	; 0x28
 8002afe:	f004 feb5 	bl	800786c <_Znwj>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461c      	mov	r4, r3
 8002b06:	463b      	mov	r3, r7
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <main+0xdc>)
 8002b0c:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <main+0xe0>)
 8002b0e:	4911      	ldr	r1, [pc, #68]	; (8002b54 <main+0xe4>)
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7fe fdef 	bl	80016f4 <_ZN7AltimexC1EP20__UART_HandleTypeDefP17I2C_HandleTypeDefP17TIM_HandleTypeDefP13AltimexConfig>
 8002b16:	657c      	str	r4, [r7, #84]	; 0x54

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  altimex->tick();
 8002b18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002b1a:	f7fe fe79 	bl	8001810 <_ZN7Altimex4tickEv>
	  HAL_Delay(100); //10hz
 8002b1e:	2064      	movs	r0, #100	; 0x64
 8002b20:	f000 fcfa 	bl	8003518 <HAL_Delay>
	  altimex->tick();
 8002b24:	e7f8      	b.n	8002b18 <main+0xa8>
 8002b26:	bf00      	nop
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40c86a00 	.word	0x40c86a00
 8002b30:	00000000 	.word	0x00000000
 8002b34:	40b57c00 	.word	0x40b57c00
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	40b19400 	.word	0x40b19400
 8002b40:	00000000 	.word	0x00000000
 8002b44:	40c38800 	.word	0x40c38800
 8002b48:	407f4000 	.word	0x407f4000
 8002b4c:	200002a4 	.word	0x200002a4
 8002b50:	20000208 	.word	0x20000208
 8002b54:	20000330 	.word	0x20000330

08002b58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b090      	sub	sp, #64	; 0x40
 8002b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b5e:	f107 0318 	add.w	r3, r7, #24
 8002b62:	2228      	movs	r2, #40	; 0x28
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f006 fbbe 	bl	80092e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b82:	2310      	movs	r3, #16
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b86:	2302      	movs	r3, #2
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002b8e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b94:	f107 0318 	add.w	r3, r7, #24
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fbb5 	bl	8005308 <HAL_RCC_OscConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8002bae:	f000 f9dd 	bl	8002f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bb2:	230f      	movs	r3, #15
 8002bb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fe1d 	bl	800580c <HAL_RCC_ClockConfig>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8002be2:	f000 f9c3 	bl	8002f6c <Error_Handler>
  }
}
 8002be6:	bf00      	nop
 8002be8:	3740      	adds	r7, #64	; 0x40
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002bf6:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <_ZL12MX_I2C1_Initv+0x60>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <_ZL12MX_I2C1_Initv+0x64>)
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c2c:	4807      	ldr	r0, [pc, #28]	; (8002c4c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c2e:	f001 f9e3 	bl	8003ff8 <HAL_I2C_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002c42:	f000 f993 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000208 	.word	0x20000208
 8002c50:	40005400 	.word	0x40005400
 8002c54:	000186a0 	.word	0x000186a0

08002c58 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c74:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c76:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <_ZL12MX_TIM1_Initv+0xbc>)
 8002c78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ca0:	481b      	ldr	r0, [pc, #108]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002ca2:	f002 ff41 	bl	8005b28 <HAL_TIM_Base_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002cb6:	f000 f959 	bl	8002f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cc0:	f107 0308 	add.w	r3, r7, #8
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4812      	ldr	r0, [pc, #72]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002cc8:	f003 fb00 	bl	80062cc <HAL_TIM_ConfigClockSource>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002cdc:	f000 f946 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ce8:	463b      	mov	r3, r7
 8002cea:	4619      	mov	r1, r3
 8002cec:	4808      	ldr	r0, [pc, #32]	; (8002d10 <_ZL12MX_TIM1_Initv+0xb8>)
 8002cee:	f003 ff3b 	bl	8006b68 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002d02:	f000 f933 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000025c 	.word	0x2000025c
 8002d14:	40012c00 	.word	0x40012c00

08002d18 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2c:	f107 0320 	add.w	r3, r7, #32
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
 8002d44:	615a      	str	r2, [r3, #20]
 8002d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d50:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d5e:	223f      	movs	r2, #63	; 0x3f
 8002d60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d6e:	4838      	ldr	r0, [pc, #224]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d70:	f002 feda 	bl	8005b28 <HAL_TIM_Base_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8002d84:	f000 f8f2 	bl	8002f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d92:	4619      	mov	r1, r3
 8002d94:	482e      	ldr	r0, [pc, #184]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002d96:	f003 fa99 	bl	80062cc <HAL_TIM_ConfigClockSource>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 8002daa:	f000 f8df 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dae:	4828      	ldr	r0, [pc, #160]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002db0:	f002 ff09 	bl	8005bc6 <HAL_TIM_PWM_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8002dc4:	f000 f8d2 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dd0:	f107 0320 	add.w	r3, r7, #32
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	481e      	ldr	r0, [pc, #120]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002dd8:	f003 fec6 	bl	8006b68 <HAL_TIMEx_MasterConfigSynchronization>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 8002dec:	f000 f8be 	bl	8002f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df0:	2360      	movs	r3, #96	; 0x60
 8002df2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4812      	ldr	r0, [pc, #72]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002e08:	f003 f99e 	bl	8006148 <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 8002e1c:	f000 f8a6 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	2204      	movs	r2, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	480a      	ldr	r0, [pc, #40]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002e28:	f003 f98e 	bl	8006148 <HAL_TIM_PWM_ConfigChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <_ZL12MX_TIM2_Initv+0x128>
  {
    Error_Handler();
 8002e3c:	f000 f896 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e40:	4803      	ldr	r0, [pc, #12]	; (8002e50 <_ZL12MX_TIM2_Initv+0x138>)
 8002e42:	f000 f95b 	bl	80030fc <HAL_TIM_MspPostInit>

}
 8002e46:	bf00      	nop
 8002e48:	3738      	adds	r7, #56	; 0x38
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200002a4 	.word	0x200002a4

08002e54 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e5a:	4a14      	ldr	r2, [pc, #80]	; (8002eac <_ZL19MX_USART1_UART_Initv+0x58>)
 8002e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e8a:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e8c:	f003 feca 	bl	8006c24 <HAL_UART_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002ea0:	f000 f864 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000330 	.word	0x20000330
 8002eac:	40013800 	.word	0x40013800

08002eb0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <_ZL11MX_DMA_Initv+0x38>)
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <_ZL11MX_DMA_Initv+0x38>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6153      	str	r3, [r2, #20]
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <_ZL11MX_DMA_Initv+0x38>)
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2011      	movs	r0, #17
 8002ed4:	f000 fc1b 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002ed8:	2011      	movs	r0, #17
 8002eda:	f000 fc34 	bl	8003746 <HAL_NVIC_EnableIRQ>

}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <_ZL12MX_GPIO_Initv+0x78>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <_ZL12MX_GPIO_Initv+0x78>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6193      	str	r3, [r2, #24]
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_ZL12MX_GPIO_Initv+0x78>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <_ZL12MX_GPIO_Initv+0x78>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <_ZL12MX_GPIO_Initv+0x78>)
 8002f1e:	f043 0308 	orr.w	r3, r3, #8
 8002f22:	6193      	str	r3, [r2, #24]
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <_ZL12MX_GPIO_Initv+0x78>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002f30:	2200      	movs	r2, #0
 8002f32:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 8002f36:	480c      	ldr	r0, [pc, #48]	; (8002f68 <_ZL12MX_GPIO_Initv+0x7c>)
 8002f38:	f001 f846 	bl	8003fc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002f3c:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8002f40:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0308 	add.w	r3, r7, #8
 8002f52:	4619      	mov	r1, r3
 8002f54:	4804      	ldr	r0, [pc, #16]	; (8002f68 <_ZL12MX_GPIO_Initv+0x7c>)
 8002f56:	f000 feb3 	bl	8003cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010c00 	.word	0x40010c00

08002f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f70:	b672      	cpsid	i
}
 8002f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <Error_Handler+0x8>
	...

08002f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_MspInit+0x40>)
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_MspInit+0x40>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6193      	str	r3, [r2, #24]
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_MspInit+0x40>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_MspInit+0x40>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_MspInit+0x40>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_MspInit+0x40>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0310 	add.w	r3, r7, #16
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a15      	ldr	r2, [pc, #84]	; (800302c <HAL_I2C_MspInit+0x70>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d123      	bne.n	8003024 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_I2C_MspInit+0x74>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <HAL_I2C_MspInit+0x74>)
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6193      	str	r3, [r2, #24]
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_I2C_MspInit+0x74>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff4:	23c0      	movs	r3, #192	; 0xc0
 8002ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	4619      	mov	r1, r3
 8003006:	480b      	ldr	r0, [pc, #44]	; (8003034 <HAL_I2C_MspInit+0x78>)
 8003008:	f000 fe5a 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_I2C_MspInit+0x74>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_I2C_MspInit+0x74>)
 8003012:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003016:	61d3      	str	r3, [r2, #28]
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_I2C_MspInit+0x74>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003024:	bf00      	nop
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40005400 	.word	0x40005400
 8003030:	40021000 	.word	0x40021000
 8003034:	40010c00 	.word	0x40010c00

08003038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a29      	ldr	r2, [pc, #164]	; (80030ec <HAL_TIM_Base_MspInit+0xb4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10c      	bne.n	8003064 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <HAL_TIM_Base_MspInit+0xb8>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003054:	6193      	str	r3, [r2, #24]
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003062:	e03e      	b.n	80030e2 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d139      	bne.n	80030e2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	61d3      	str	r3, [r2, #28]
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_TIM_Base_MspInit+0xb8>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_TIM_Base_MspInit+0xc0>)
 800308a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 800308e:	2210      	movs	r2, #16
 8003090:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80030ba:	480e      	ldr	r0, [pc, #56]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030bc:	f000 fb5e 	bl	800377c <HAL_DMA_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 80030c6:	f7ff ff51 	bl	8002f6c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
 80030d0:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a06      	ldr	r2, [pc, #24]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <HAL_TIM_Base_MspInit+0xbc>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40021000 	.word	0x40021000
 80030f4:	200002ec 	.word	0x200002ec
 80030f8:	40020080 	.word	0x40020080

080030fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d117      	bne.n	800314c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_TIM_MspPostInit+0x58>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <HAL_TIM_MspPostInit+0x58>)
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_TIM_MspPostInit+0x58>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003134:	2303      	movs	r3, #3
 8003136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2302      	movs	r3, #2
 800313e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	f107 0310 	add.w	r3, r7, #16
 8003144:	4619      	mov	r1, r3
 8003146:	4804      	ldr	r0, [pc, #16]	; (8003158 <HAL_TIM_MspPostInit+0x5c>)
 8003148:	f000 fdba 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800314c:	bf00      	nop
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	40010800 	.word	0x40010800

0800315c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_UART_MspInit+0x9c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d139      	bne.n	80031f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_UART_MspInit+0xa0>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_UART_MspInit+0xa0>)
 8003182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003186:	6193      	str	r3, [r2, #24]
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_UART_MspInit+0xa0>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_UART_MspInit+0xa0>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_UART_MspInit+0xa0>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	6193      	str	r3, [r2, #24]
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_UART_MspInit+0xa0>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0310 	add.w	r3, r7, #16
 80031be:	4619      	mov	r1, r3
 80031c0:	480f      	ldr	r0, [pc, #60]	; (8003200 <HAL_UART_MspInit+0xa4>)
 80031c2:	f000 fd7d 	bl	8003cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	4619      	mov	r1, r3
 80031da:	4809      	ldr	r0, [pc, #36]	; (8003200 <HAL_UART_MspInit+0xa4>)
 80031dc:	f000 fd70 	bl	8003cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2100      	movs	r1, #0
 80031e4:	2025      	movs	r0, #37	; 0x25
 80031e6:	f000 fa92 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031ea:	2025      	movs	r0, #37	; 0x25
 80031ec:	f000 faab 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031f0:	bf00      	nop
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40021000 	.word	0x40021000
 8003200:	40010800 	.word	0x40010800

08003204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <NMI_Handler+0x4>

0800320a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800320e:	e7fe      	b.n	800320e <HardFault_Handler+0x4>

08003210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <MemManage_Handler+0x4>

08003216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <BusFault_Handler+0x4>

0800321c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <UsageFault_Handler+0x4>

08003222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800324a:	f000 f949 	bl	80034e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <DMA1_Channel7_IRQHandler+0x10>)
 800325a:	f000 fbfd 	bl	8003a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200002ec 	.word	0x200002ec

08003268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <USART1_IRQHandler+0x10>)
 800326e:	f003 fdad 	bl	8006dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000330 	.word	0x20000330

0800327c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return 1;
 8003280:	2301      	movs	r3, #1
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <_kill>:

int _kill(int pid, int sig)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003294:	f005 ffe8 	bl	8009268 <__errno>
 8003298:	4603      	mov	r3, r0
 800329a:	2216      	movs	r2, #22
 800329c:	601a      	str	r2, [r3, #0]
  return -1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_exit>:

void _exit (int status)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b2:	f04f 31ff 	mov.w	r1, #4294967295
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffe7 	bl	800328a <_kill>
  while (1) {}    /* Make sure we hang here */
 80032bc:	e7fe      	b.n	80032bc <_exit+0x12>

080032be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e00a      	b.n	80032e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d0:	f3af 8000 	nop.w
 80032d4:	4601      	mov	r1, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	60ba      	str	r2, [r7, #8]
 80032dc:	b2ca      	uxtb	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	dbf0      	blt.n	80032d0 <_read+0x12>
  }

  return len;
 80032ee:	687b      	ldr	r3, [r7, #4]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e009      	b.n	800331e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	60ba      	str	r2, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	429a      	cmp	r2, r3
 8003324:	dbf1      	blt.n	800330a <_write+0x12>
  }
  return len;
 8003326:	687b      	ldr	r3, [r7, #4]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_close>:

int _close(int file)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003356:	605a      	str	r2, [r3, #4]
  return 0;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <_isatty>:

int _isatty(int file)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800336c:	2301      	movs	r3, #1
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003398:	4a14      	ldr	r2, [pc, #80]	; (80033ec <_sbrk+0x5c>)
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <_sbrk+0x60>)
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <_sbrk+0x64>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <_sbrk+0x64>)
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <_sbrk+0x68>)
 80033b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <_sbrk+0x64>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d207      	bcs.n	80033d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c0:	f005 ff52 	bl	8009268 <__errno>
 80033c4:	4603      	mov	r3, r0
 80033c6:	220c      	movs	r2, #12
 80033c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	e009      	b.n	80033e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <_sbrk+0x64>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <_sbrk+0x64>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <_sbrk+0x64>)
 80033e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20005000 	.word	0x20005000
 80033f0:	00000400 	.word	0x00000400
 80033f4:	20000378 	.word	0x20000378
 80033f8:	20000398 	.word	0x20000398

080033fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003408:	f7ff fff8 	bl	80033fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800340c:	480b      	ldr	r0, [pc, #44]	; (800343c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800340e:	490c      	ldr	r1, [pc, #48]	; (8003440 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003410:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003414:	e002      	b.n	800341c <LoopCopyDataInit>

08003416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341a:	3304      	adds	r3, #4

0800341c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800341c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800341e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003420:	d3f9      	bcc.n	8003416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003424:	4c09      	ldr	r4, [pc, #36]	; (800344c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003428:	e001      	b.n	800342e <LoopFillZerobss>

0800342a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800342c:	3204      	adds	r2, #4

0800342e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800342e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003430:	d3fb      	bcc.n	800342a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003432:	f005 ff1f 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003436:	f7ff fb1b 	bl	8002a70 <main>
  bx lr
 800343a:	4770      	bx	lr
  ldr r0, =_sdata
 800343c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003440:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003444:	0800c9a4 	.word	0x0800c9a4
  ldr r2, =_sbss
 8003448:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800344c:	20000394 	.word	0x20000394

08003450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003450:	e7fe      	b.n	8003450 <ADC1_2_IRQHandler>
	...

08003454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_Init+0x28>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_Init+0x28>)
 800345e:	f043 0310 	orr.w	r3, r3, #16
 8003462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003464:	2003      	movs	r0, #3
 8003466:	f000 f947 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346a:	200f      	movs	r0, #15
 800346c:	f000 f808 	bl	8003480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003470:	f7ff fd82 	bl	8002f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40022000 	.word	0x40022000

08003480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_InitTick+0x54>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_InitTick+0x58>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003496:	fbb3 f3f1 	udiv	r3, r3, r1
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f95f 	bl	8003762 <HAL_SYSTICK_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00e      	b.n	80034cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d80a      	bhi.n	80034ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b4:	2200      	movs	r2, #0
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f000 f927 	bl	800370e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <HAL_InitTick+0x5c>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000008 	.word	0x20000008
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_IncTick+0x1c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_IncTick+0x20>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	4a03      	ldr	r2, [pc, #12]	; (8003500 <HAL_IncTick+0x20>)
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	20000008 	.word	0x20000008
 8003500:	2000037c 	.word	0x2000037c

08003504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b02      	ldr	r3, [pc, #8]	; (8003514 <HAL_GetTick+0x10>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	2000037c 	.word	0x2000037c

08003518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff fff0 	bl	8003504 <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d005      	beq.n	800353e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_Delay+0x44>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800353e:	bf00      	nop
 8003540:	f7ff ffe0 	bl	8003504 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d8f7      	bhi.n	8003540 <HAL_Delay+0x28>
  {
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000008 	.word	0x20000008

08003560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	60d3      	str	r3, [r2, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 0307 	and.w	r3, r3, #7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db0b      	blt.n	80035ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4906      	ldr	r1, [pc, #24]	; (80035f8 <__NVIC_EnableIRQ+0x34>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2001      	movs	r0, #1
 80035e6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f1c3 0307 	rsb	r3, r3, #7
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf28      	it	cs
 800366e:	2304      	movcs	r3, #4
 8003670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3304      	adds	r3, #4
 8003676:	2b06      	cmp	r3, #6
 8003678:	d902      	bls.n	8003680 <NVIC_EncodePriority+0x30>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3b03      	subs	r3, #3
 800367e:	e000      	b.n	8003682 <NVIC_EncodePriority+0x32>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003698:	f04f 31ff 	mov.w	r1, #4294967295
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43d9      	mvns	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	4313      	orrs	r3, r2
         );
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f7ff ff90 	bl	80035fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff2d 	bl	8003560 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003720:	f7ff ff42 	bl	80035a8 <__NVIC_GetPriorityGrouping>
 8003724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7ff ff90 	bl	8003650 <NVIC_EncodePriority>
 8003730:	4602      	mov	r2, r0
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff5f 	bl	80035fc <__NVIC_SetPriority>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff35 	bl	80035c4 <__NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffa2 	bl	80036b4 <SysTick_Config>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e043      	b.n	800381a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_DMA_Init+0xa8>)
 800379a:	4413      	add	r3, r2
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_DMA_Init+0xac>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	; (800382c <HAL_DMA_Init+0xb0>)
 80037ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	bffdfff8 	.word	0xbffdfff8
 8003828:	cccccccd 	.word	0xcccccccd
 800382c:	40020000 	.word	0x40020000

08003830 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Start_IT+0x20>
 800384c:	2302      	movs	r3, #2
 800384e:	e04b      	b.n	80038e8 <HAL_DMA_Start_IT+0xb8>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d13a      	bne.n	80038da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f9eb 	bl	8003c64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 020e 	orr.w	r2, r2, #14
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e00f      	b.n	80038c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0204 	bic.w	r2, r2, #4
 80038b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 020a 	orr.w	r2, r2, #10
 80038c6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e005      	b.n	80038e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
 80038e4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d008      	beq.n	800391a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2204      	movs	r2, #4
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e020      	b.n	800395c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 020e 	bic.w	r2, r2, #14
 8003928:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f202 	lsl.w	r2, r1, r2
 8003948:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
	...

08003968 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d005      	beq.n	800398c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2204      	movs	r2, #4
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e051      	b.n	8003a30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 020e 	bic.w	r2, r2, #14
 800399a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <HAL_DMA_Abort_IT+0xd4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d029      	beq.n	8003a0a <HAL_DMA_Abort_IT+0xa2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <HAL_DMA_Abort_IT+0xd8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d022      	beq.n	8003a06 <HAL_DMA_Abort_IT+0x9e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_DMA_Abort_IT+0xdc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01a      	beq.n	8003a00 <HAL_DMA_Abort_IT+0x98>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_DMA_Abort_IT+0xe0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_Abort_IT+0x92>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_DMA_Abort_IT+0xe4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00a      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x8c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_DMA_Abort_IT+0xe8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d102      	bne.n	80039ee <HAL_DMA_Abort_IT+0x86>
 80039e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039ec:	e00e      	b.n	8003a0c <HAL_DMA_Abort_IT+0xa4>
 80039ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f2:	e00b      	b.n	8003a0c <HAL_DMA_Abort_IT+0xa4>
 80039f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039f8:	e008      	b.n	8003a0c <HAL_DMA_Abort_IT+0xa4>
 80039fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039fe:	e005      	b.n	8003a0c <HAL_DMA_Abort_IT+0xa4>
 8003a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a04:	e002      	b.n	8003a0c <HAL_DMA_Abort_IT+0xa4>
 8003a06:	2310      	movs	r3, #16
 8003a08:	e000      	b.n	8003a0c <HAL_DMA_Abort_IT+0xa4>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <HAL_DMA_Abort_IT+0xec>)
 8003a0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
    } 
  }
  return status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40020008 	.word	0x40020008
 8003a40:	4002001c 	.word	0x4002001c
 8003a44:	40020030 	.word	0x40020030
 8003a48:	40020044 	.word	0x40020044
 8003a4c:	40020058 	.word	0x40020058
 8003a50:	4002006c 	.word	0x4002006c
 8003a54:	40020000 	.word	0x40020000

08003a58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	2204      	movs	r2, #4
 8003a76:	409a      	lsls	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d04f      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc8>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d04a      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a66      	ldr	r2, [pc, #408]	; (8003c48 <HAL_DMA_IRQHandler+0x1f0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d029      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xae>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a65      	ldr	r2, [pc, #404]	; (8003c4c <HAL_DMA_IRQHandler+0x1f4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d022      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xaa>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a63      	ldr	r2, [pc, #396]	; (8003c50 <HAL_DMA_IRQHandler+0x1f8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01a      	beq.n	8003afc <HAL_DMA_IRQHandler+0xa4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a62      	ldr	r2, [pc, #392]	; (8003c54 <HAL_DMA_IRQHandler+0x1fc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d012      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x9e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a60      	ldr	r2, [pc, #384]	; (8003c58 <HAL_DMA_IRQHandler+0x200>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00a      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x98>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5f      	ldr	r2, [pc, #380]	; (8003c5c <HAL_DMA_IRQHandler+0x204>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d102      	bne.n	8003aea <HAL_DMA_IRQHandler+0x92>
 8003ae4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ae8:	e00e      	b.n	8003b08 <HAL_DMA_IRQHandler+0xb0>
 8003aea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003aee:	e00b      	b.n	8003b08 <HAL_DMA_IRQHandler+0xb0>
 8003af0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003af4:	e008      	b.n	8003b08 <HAL_DMA_IRQHandler+0xb0>
 8003af6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003afa:	e005      	b.n	8003b08 <HAL_DMA_IRQHandler+0xb0>
 8003afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b00:	e002      	b.n	8003b08 <HAL_DMA_IRQHandler+0xb0>
 8003b02:	2340      	movs	r3, #64	; 0x40
 8003b04:	e000      	b.n	8003b08 <HAL_DMA_IRQHandler+0xb0>
 8003b06:	2304      	movs	r3, #4
 8003b08:	4a55      	ldr	r2, [pc, #340]	; (8003c60 <HAL_DMA_IRQHandler+0x208>)
 8003b0a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8094 	beq.w	8003c3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b1e:	e08e      	b.n	8003c3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2202      	movs	r2, #2
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d056      	beq.n	8003bde <HAL_DMA_IRQHandler+0x186>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d051      	beq.n	8003bde <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 020a 	bic.w	r2, r2, #10
 8003b56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_DMA_IRQHandler+0x1f0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d029      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x166>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_DMA_IRQHandler+0x1f4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d022      	beq.n	8003bba <HAL_DMA_IRQHandler+0x162>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a35      	ldr	r2, [pc, #212]	; (8003c50 <HAL_DMA_IRQHandler+0x1f8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d01a      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x15c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <HAL_DMA_IRQHandler+0x1fc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d012      	beq.n	8003bae <HAL_DMA_IRQHandler+0x156>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_DMA_IRQHandler+0x200>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00a      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x150>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_DMA_IRQHandler+0x204>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d102      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0x14a>
 8003b9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ba0:	e00e      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x168>
 8003ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba6:	e00b      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x168>
 8003ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bac:	e008      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x168>
 8003bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb2:	e005      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x168>
 8003bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bb8:	e002      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x168>
 8003bba:	2320      	movs	r3, #32
 8003bbc:	e000      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x168>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <HAL_DMA_IRQHandler+0x208>)
 8003bc2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d034      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bdc:	e02f      	b.n	8003c3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2208      	movs	r2, #8
 8003be4:	409a      	lsls	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x1e8>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d023      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 020e 	bic.w	r2, r2, #14
 8003c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f202 	lsl.w	r2, r1, r2
 8003c16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
    }
  }
  return;
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
}
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40020008 	.word	0x40020008
 8003c4c:	4002001c 	.word	0x4002001c
 8003c50:	40020030 	.word	0x40020030
 8003c54:	40020044 	.word	0x40020044
 8003c58:	40020058 	.word	0x40020058
 8003c5c:	4002006c 	.word	0x4002006c
 8003c60:	40020000 	.word	0x40020000

08003c64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d108      	bne.n	8003ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ca2:	e007      	b.n	8003cb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b08b      	sub	sp, #44	; 0x2c
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd2:	e169      	b.n	8003fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	f040 8158 	bne.w	8003fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a9a      	ldr	r2, [pc, #616]	; (8003f60 <HAL_GPIO_Init+0x2a0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d05e      	beq.n	8003dba <HAL_GPIO_Init+0xfa>
 8003cfc:	4a98      	ldr	r2, [pc, #608]	; (8003f60 <HAL_GPIO_Init+0x2a0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d875      	bhi.n	8003dee <HAL_GPIO_Init+0x12e>
 8003d02:	4a98      	ldr	r2, [pc, #608]	; (8003f64 <HAL_GPIO_Init+0x2a4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d058      	beq.n	8003dba <HAL_GPIO_Init+0xfa>
 8003d08:	4a96      	ldr	r2, [pc, #600]	; (8003f64 <HAL_GPIO_Init+0x2a4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d86f      	bhi.n	8003dee <HAL_GPIO_Init+0x12e>
 8003d0e:	4a96      	ldr	r2, [pc, #600]	; (8003f68 <HAL_GPIO_Init+0x2a8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d052      	beq.n	8003dba <HAL_GPIO_Init+0xfa>
 8003d14:	4a94      	ldr	r2, [pc, #592]	; (8003f68 <HAL_GPIO_Init+0x2a8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d869      	bhi.n	8003dee <HAL_GPIO_Init+0x12e>
 8003d1a:	4a94      	ldr	r2, [pc, #592]	; (8003f6c <HAL_GPIO_Init+0x2ac>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d04c      	beq.n	8003dba <HAL_GPIO_Init+0xfa>
 8003d20:	4a92      	ldr	r2, [pc, #584]	; (8003f6c <HAL_GPIO_Init+0x2ac>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d863      	bhi.n	8003dee <HAL_GPIO_Init+0x12e>
 8003d26:	4a92      	ldr	r2, [pc, #584]	; (8003f70 <HAL_GPIO_Init+0x2b0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d046      	beq.n	8003dba <HAL_GPIO_Init+0xfa>
 8003d2c:	4a90      	ldr	r2, [pc, #576]	; (8003f70 <HAL_GPIO_Init+0x2b0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d85d      	bhi.n	8003dee <HAL_GPIO_Init+0x12e>
 8003d32:	2b12      	cmp	r3, #18
 8003d34:	d82a      	bhi.n	8003d8c <HAL_GPIO_Init+0xcc>
 8003d36:	2b12      	cmp	r3, #18
 8003d38:	d859      	bhi.n	8003dee <HAL_GPIO_Init+0x12e>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HAL_GPIO_Init+0x80>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003dbb 	.word	0x08003dbb
 8003d44:	08003d95 	.word	0x08003d95
 8003d48:	08003da7 	.word	0x08003da7
 8003d4c:	08003de9 	.word	0x08003de9
 8003d50:	08003def 	.word	0x08003def
 8003d54:	08003def 	.word	0x08003def
 8003d58:	08003def 	.word	0x08003def
 8003d5c:	08003def 	.word	0x08003def
 8003d60:	08003def 	.word	0x08003def
 8003d64:	08003def 	.word	0x08003def
 8003d68:	08003def 	.word	0x08003def
 8003d6c:	08003def 	.word	0x08003def
 8003d70:	08003def 	.word	0x08003def
 8003d74:	08003def 	.word	0x08003def
 8003d78:	08003def 	.word	0x08003def
 8003d7c:	08003def 	.word	0x08003def
 8003d80:	08003def 	.word	0x08003def
 8003d84:	08003d9d 	.word	0x08003d9d
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	4a79      	ldr	r2, [pc, #484]	; (8003f74 <HAL_GPIO_Init+0x2b4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d92:	e02c      	b.n	8003dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	623b      	str	r3, [r7, #32]
          break;
 8003d9a:	e029      	b.n	8003df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	3304      	adds	r3, #4
 8003da2:	623b      	str	r3, [r7, #32]
          break;
 8003da4:	e024      	b.n	8003df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	3308      	adds	r3, #8
 8003dac:	623b      	str	r3, [r7, #32]
          break;
 8003dae:	e01f      	b.n	8003df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	330c      	adds	r3, #12
 8003db6:	623b      	str	r3, [r7, #32]
          break;
 8003db8:	e01a      	b.n	8003df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	623b      	str	r3, [r7, #32]
          break;
 8003dc6:	e013      	b.n	8003df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	611a      	str	r2, [r3, #16]
          break;
 8003dda:	e009      	b.n	8003df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ddc:	2308      	movs	r3, #8
 8003dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	615a      	str	r2, [r3, #20]
          break;
 8003de6:	e003      	b.n	8003df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003de8:	2300      	movs	r3, #0
 8003dea:	623b      	str	r3, [r7, #32]
          break;
 8003dec:	e000      	b.n	8003df0 <HAL_GPIO_Init+0x130>
          break;
 8003dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2bff      	cmp	r3, #255	; 0xff
 8003df4:	d801      	bhi.n	8003dfa <HAL_GPIO_Init+0x13a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	e001      	b.n	8003dfe <HAL_GPIO_Init+0x13e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2bff      	cmp	r3, #255	; 0xff
 8003e04:	d802      	bhi.n	8003e0c <HAL_GPIO_Init+0x14c>
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	e002      	b.n	8003e12 <HAL_GPIO_Init+0x152>
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	3b08      	subs	r3, #8
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	210f      	movs	r1, #15
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	6a39      	ldr	r1, [r7, #32]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80b1 	beq.w	8003fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e40:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <HAL_GPIO_Init+0x2b8>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	4a4c      	ldr	r2, [pc, #304]	; (8003f78 <HAL_GPIO_Init+0x2b8>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6193      	str	r3, [r2, #24]
 8003e4c:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <HAL_GPIO_Init+0x2b8>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e58:	4a48      	ldr	r2, [pc, #288]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	089b      	lsrs	r3, r3, #2
 8003e5e:	3302      	adds	r3, #2
 8003e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	220f      	movs	r2, #15
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <HAL_GPIO_Init+0x2c0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_GPIO_Init+0x1ec>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3f      	ldr	r2, [pc, #252]	; (8003f84 <HAL_GPIO_Init+0x2c4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_GPIO_Init+0x1e8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3e      	ldr	r2, [pc, #248]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <HAL_GPIO_Init+0x1e4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3d      	ldr	r2, [pc, #244]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_GPIO_Init+0x1e0>
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <HAL_GPIO_Init+0x1ee>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e004      	b.n	8003eae <HAL_GPIO_Init+0x1ee>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e002      	b.n	8003eae <HAL_GPIO_Init+0x1ee>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_GPIO_Init+0x1ee>
 8003eac:	2300      	movs	r3, #0
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	f002 0203 	and.w	r2, r2, #3
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	4093      	lsls	r3, r2
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ebe:	492f      	ldr	r1, [pc, #188]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	492c      	ldr	r1, [pc, #176]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]
 8003ee4:	e006      	b.n	8003ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	4928      	ldr	r1, [pc, #160]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f00:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	4922      	ldr	r1, [pc, #136]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60cb      	str	r3, [r1, #12]
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	491e      	ldr	r1, [pc, #120]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4918      	ldr	r1, [pc, #96]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f36:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	4914      	ldr	r1, [pc, #80]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d021      	beq.n	8003f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	490e      	ldr	r1, [pc, #56]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	e021      	b.n	8003fa2 <HAL_GPIO_Init+0x2e2>
 8003f5e:	bf00      	nop
 8003f60:	10320000 	.word	0x10320000
 8003f64:	10310000 	.word	0x10310000
 8003f68:	10220000 	.word	0x10220000
 8003f6c:	10210000 	.word	0x10210000
 8003f70:	10120000 	.word	0x10120000
 8003f74:	10110000 	.word	0x10110000
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40010800 	.word	0x40010800
 8003f84:	40010c00 	.word	0x40010c00
 8003f88:	40011000 	.word	0x40011000
 8003f8c:	40011400 	.word	0x40011400
 8003f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	4909      	ldr	r1, [pc, #36]	; (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f47f ae8e 	bne.w	8003cd4 <HAL_GPIO_Init+0x14>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	372c      	adds	r7, #44	; 0x2c
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fe4:	e003      	b.n	8003fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	041a      	lsls	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e12b      	b.n	8004262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fe ffcc 	bl	8002fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800404a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800405a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800405c:	f001 fd1e 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 8004060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4a81      	ldr	r2, [pc, #516]	; (800426c <HAL_I2C_Init+0x274>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d807      	bhi.n	800407c <HAL_I2C_Init+0x84>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a80      	ldr	r2, [pc, #512]	; (8004270 <HAL_I2C_Init+0x278>)
 8004070:	4293      	cmp	r3, r2
 8004072:	bf94      	ite	ls
 8004074:	2301      	movls	r3, #1
 8004076:	2300      	movhi	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e006      	b.n	800408a <HAL_I2C_Init+0x92>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a7d      	ldr	r2, [pc, #500]	; (8004274 <HAL_I2C_Init+0x27c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0e7      	b.n	8004262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a78      	ldr	r2, [pc, #480]	; (8004278 <HAL_I2C_Init+0x280>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0c9b      	lsrs	r3, r3, #18
 800409c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a6a      	ldr	r2, [pc, #424]	; (800426c <HAL_I2C_Init+0x274>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d802      	bhi.n	80040cc <HAL_I2C_Init+0xd4>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	3301      	adds	r3, #1
 80040ca:	e009      	b.n	80040e0 <HAL_I2C_Init+0xe8>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	4a69      	ldr	r2, [pc, #420]	; (800427c <HAL_I2C_Init+0x284>)
 80040d8:	fba2 2303 	umull	r2, r3, r2, r3
 80040dc:	099b      	lsrs	r3, r3, #6
 80040de:	3301      	adds	r3, #1
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	495c      	ldr	r1, [pc, #368]	; (800426c <HAL_I2C_Init+0x274>)
 80040fc:	428b      	cmp	r3, r1
 80040fe:	d819      	bhi.n	8004134 <HAL_I2C_Init+0x13c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e59      	subs	r1, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fbb1 f3f3 	udiv	r3, r1, r3
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004114:	400b      	ands	r3, r1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_I2C_Init+0x138>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1e59      	subs	r1, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fbb1 f3f3 	udiv	r3, r1, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	e051      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 8004130:	2304      	movs	r3, #4
 8004132:	e04f      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d111      	bne.n	8004160 <HAL_I2C_Init+0x168>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e58      	subs	r0, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	440b      	add	r3, r1
 800414a:	fbb0 f3f3 	udiv	r3, r0, r3
 800414e:	3301      	adds	r3, #1
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e012      	b.n	8004186 <HAL_I2C_Init+0x18e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	0099      	lsls	r1, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Init+0x196>
 800418a:	2301      	movs	r3, #1
 800418c:	e022      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <HAL_I2C_Init+0x1bc>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e58      	subs	r0, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	440b      	add	r3, r1
 80041a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b2:	e00f      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1e58      	subs	r0, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	0099      	lsls	r1, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ca:	3301      	adds	r3, #1
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6809      	ldr	r1, [r1, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6911      	ldr	r1, [r2, #16]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	430b      	orrs	r3, r1
 8004216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	000186a0 	.word	0x000186a0
 8004270:	001e847f 	.word	0x001e847f
 8004274:	003d08ff 	.word	0x003d08ff
 8004278:	431bde83 	.word	0x431bde83
 800427c:	10624dd3 	.word	0x10624dd3

08004280 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	461a      	mov	r2, r3
 800428e:	4603      	mov	r3, r0
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	460b      	mov	r3, r1
 8004294:	813b      	strh	r3, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800429a:	f7ff f933 	bl	8003504 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	f040 80d9 	bne.w	8004460 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2319      	movs	r3, #25
 80042b4:	2201      	movs	r2, #1
 80042b6:	496d      	ldr	r1, [pc, #436]	; (800446c <HAL_I2C_Mem_Write+0x1ec>)
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fdef 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0cc      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_I2C_Mem_Write+0x56>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e0c5      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d007      	beq.n	80042fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2221      	movs	r2, #33	; 0x21
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a4d      	ldr	r2, [pc, #308]	; (8004470 <HAL_I2C_Mem_Write+0x1f0>)
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800433e:	88f8      	ldrh	r0, [r7, #6]
 8004340:	893a      	ldrh	r2, [r7, #8]
 8004342:	8979      	ldrh	r1, [r7, #10]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	4603      	mov	r3, r0
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fc26 	bl	8004ba0 <I2C_RequestMemoryWrite>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d052      	beq.n	8004400 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e081      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 feb4 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00d      	beq.n	800438a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b04      	cmp	r3, #4
 8004374:	d107      	bne.n	8004386 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e06b      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d11b      	bne.n	8004400 <HAL_I2C_Mem_Write+0x180>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1aa      	bne.n	800435e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fea7 	bl	8005160 <I2C_WaitOnBTFFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2b04      	cmp	r3, #4
 800441e:	d107      	bne.n	8004430 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e016      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	00100002 	.word	0x00100002
 8004470:	ffff0000 	.word	0xffff0000

08004474 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	; 0x30
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	460b      	mov	r3, r1
 8004488:	813b      	strh	r3, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004492:	f7ff f837 	bl	8003504 <HAL_GetTick>
 8004496:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	f040 8244 	bne.w	800492e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2319      	movs	r3, #25
 80044ac:	2201      	movs	r2, #1
 80044ae:	4982      	ldr	r1, [pc, #520]	; (80046b8 <HAL_I2C_Mem_Read+0x244>)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fcf3 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
 80044be:	e237      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Mem_Read+0x5a>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e230      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d007      	beq.n	80044f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2222      	movs	r2, #34	; 0x22
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2240      	movs	r2, #64	; 0x40
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a62      	ldr	r2, [pc, #392]	; (80046bc <HAL_I2C_Mem_Read+0x248>)
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004536:	88f8      	ldrh	r0, [r7, #6]
 8004538:	893a      	ldrh	r2, [r7, #8]
 800453a:	8979      	ldrh	r1, [r7, #10]
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	4603      	mov	r3, r0
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fbc0 	bl	8004ccc <I2C_RequestMemoryRead>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e1ec      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d113      	bne.n	8004586 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e1c0      	b.n	8004908 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b01      	cmp	r3, #1
 800458c:	d11e      	bne.n	80045cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800459e:	b672      	cpsid	i
}
 80045a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045c8:	b662      	cpsie	i
}
 80045ca:	e035      	b.n	8004638 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d11e      	bne.n	8004612 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045e4:	b672      	cpsid	i
}
 80045e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800460e:	b662      	cpsie	i
}
 8004610:	e012      	b.n	8004638 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004620:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004638:	e166      	b.n	8004908 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b03      	cmp	r3, #3
 8004640:	f200 811f 	bhi.w	8004882 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b01      	cmp	r3, #1
 800464a:	d123      	bne.n	8004694 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fdcd 	bl	80051f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e167      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004692:	e139      	b.n	8004908 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b02      	cmp	r3, #2
 800469a:	d152      	bne.n	8004742 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	2200      	movs	r2, #0
 80046a4:	4906      	ldr	r1, [pc, #24]	; (80046c0 <HAL_I2C_Mem_Read+0x24c>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fbf8 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e13c      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
 80046b6:	bf00      	nop
 80046b8:	00100002 	.word	0x00100002
 80046bc:	ffff0000 	.word	0xffff0000
 80046c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
}
 80046c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800470a:	b662      	cpsie	i
}
 800470c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004740:	e0e2      	b.n	8004908 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	2200      	movs	r2, #0
 800474a:	497b      	ldr	r1, [pc, #492]	; (8004938 <HAL_I2C_Mem_Read+0x4c4>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fba5 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0e9      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800476c:	b672      	cpsid	i
}
 800476e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047a2:	4b66      	ldr	r3, [pc, #408]	; (800493c <HAL_I2C_Mem_Read+0x4c8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	4a65      	ldr	r2, [pc, #404]	; (8004940 <HAL_I2C_Mem_Read+0x4cc>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0a1a      	lsrs	r2, r3, #8
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00da      	lsls	r2, r3, #3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	3b01      	subs	r3, #1
 80047c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d118      	bne.n	80047fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80047ea:	b662      	cpsie	i
}
 80047ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e09a      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b04      	cmp	r3, #4
 8004806:	d1d9      	bne.n	80047bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800484a:	b662      	cpsie	i
}
 800484c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004880:	e042      	b.n	8004908 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fcb2 	bl	80051f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e04c      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d118      	bne.n	8004908 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	f47f ae94 	bne.w	800463a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3728      	adds	r7, #40	; 0x28
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	00010004 	.word	0x00010004
 800493c:	20000000 	.word	0x20000000
 8004940:	14f8b589 	.word	0x14f8b589

08004944 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	460b      	mov	r3, r1
 8004952:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004954:	f7fe fdd6 	bl	8003504 <HAL_GetTick>
 8004958:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b20      	cmp	r3, #32
 8004968:	f040 8111 	bne.w	8004b8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2319      	movs	r3, #25
 8004972:	2201      	movs	r2, #1
 8004974:	4988      	ldr	r1, [pc, #544]	; (8004b98 <HAL_I2C_IsDeviceReady+0x254>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fa90 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
 8004984:	e104      	b.n	8004b90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_I2C_IsDeviceReady+0x50>
 8004990:	2302      	movs	r3, #2
 8004992:	e0fd      	b.n	8004b90 <HAL_I2C_IsDeviceReady+0x24c>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d007      	beq.n	80049ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2224      	movs	r2, #36	; 0x24
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4a70      	ldr	r2, [pc, #448]	; (8004b9c <HAL_I2C_IsDeviceReady+0x258>)
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fa4e 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a14:	d103      	bne.n	8004a1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0b6      	b.n	8004b90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fe fd67 	bl	8003504 <HAL_GetTick>
 8004a36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a66:	e025      	b.n	8004ab4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a68:	f7fe fd4c 	bl	8003504 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <HAL_I2C_IsDeviceReady+0x13a>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	22a0      	movs	r2, #160	; 0xa0
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2ba0      	cmp	r3, #160	; 0xa0
 8004abe:	d005      	beq.n	8004acc <HAL_I2C_IsDeviceReady+0x188>
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_I2C_IsDeviceReady+0x188>
 8004ac6:	7dbb      	ldrb	r3, [r7, #22]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0cd      	beq.n	8004a68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d129      	bne.n	8004b36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2319      	movs	r3, #25
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4921      	ldr	r1, [pc, #132]	; (8004b98 <HAL_I2C_IsDeviceReady+0x254>)
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f9c2 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e036      	b.n	8004b90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e02c      	b.n	8004b90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2319      	movs	r3, #25
 8004b56:	2201      	movs	r2, #1
 8004b58:	490f      	ldr	r1, [pc, #60]	; (8004b98 <HAL_I2C_IsDeviceReady+0x254>)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f99e 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e012      	b.n	8004b90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	f4ff af32 	bcc.w	80049de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	00100002 	.word	0x00100002
 8004b9c:	ffff0000 	.word	0xffff0000

08004ba0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	461a      	mov	r2, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	817b      	strh	r3, [r7, #10]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	813b      	strh	r3, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f960 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00d      	beq.n	8004bfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf0:	d103      	bne.n	8004bfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e05f      	b.n	8004cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bfe:	897b      	ldrh	r3, [r7, #10]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	492d      	ldr	r1, [pc, #180]	; (8004cc8 <I2C_RequestMemoryWrite+0x128>)
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f9bb 	bl	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e04c      	b.n	8004cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	6a39      	ldr	r1, [r7, #32]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa46 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00d      	beq.n	8004c66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d107      	bne.n	8004c62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e02b      	b.n	8004cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c6c:	893b      	ldrh	r3, [r7, #8]
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	611a      	str	r2, [r3, #16]
 8004c76:	e021      	b.n	8004cbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	6a39      	ldr	r1, [r7, #32]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fa20 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d107      	bne.n	8004cae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e005      	b.n	8004cbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb2:	893b      	ldrh	r3, [r7, #8]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	00010002 	.word	0x00010002

08004ccc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	817b      	strh	r3, [r7, #10]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	813b      	strh	r3, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f8c2 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00d      	beq.n	8004d3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2c:	d103      	bne.n	8004d36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0aa      	b.n	8004e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d3a:	897b      	ldrh	r3, [r7, #10]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	6a3a      	ldr	r2, [r7, #32]
 8004d4e:	4952      	ldr	r1, [pc, #328]	; (8004e98 <I2C_RequestMemoryRead+0x1cc>)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f91d 	bl	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e097      	b.n	8004e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	6a39      	ldr	r1, [r7, #32]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f9a8 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d107      	bne.n	8004d9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e076      	b.n	8004e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004da8:	893b      	ldrh	r3, [r7, #8]
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]
 8004db2:	e021      	b.n	8004df8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	6a39      	ldr	r1, [r7, #32]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f982 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d107      	bne.n	8004dea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e050      	b.n	8004e90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dee:	893b      	ldrh	r3, [r7, #8]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	6a39      	ldr	r1, [r7, #32]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f967 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00d      	beq.n	8004e24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d107      	bne.n	8004e20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e035      	b.n	8004e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f82b 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5a:	d103      	bne.n	8004e64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e013      	b.n	8004e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	4906      	ldr	r1, [pc, #24]	; (8004e98 <I2C_RequestMemoryRead+0x1cc>)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f886 	bl	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	00010002 	.word	0x00010002

08004e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eac:	e048      	b.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d044      	beq.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7fe fb25 	bl	8003504 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d139      	bne.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10d      	bne.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	43da      	mvns	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	e00c      	b.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d116      	bne.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e023      	b.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10d      	bne.n	8004f66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	e00c      	b.n	8004f80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	43da      	mvns	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4013      	ands	r3, r2
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d093      	beq.n	8004eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f9e:	e071      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	d123      	bne.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f043 0204 	orr.w	r2, r3, #4
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e067      	b.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d041      	beq.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005000:	f7fe fa80 	bl	8003504 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d302      	bcc.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d136      	bne.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10c      	bne.n	800503a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e00b      	b.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	43da      	mvns	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e021      	b.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d10c      	bne.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	43da      	mvns	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e00b      	b.n	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f47f af6d 	bne.w	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050dc:	e034      	b.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f8e3 	bl	80052aa <I2C_IsAcknowledgeFailed>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e034      	b.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d028      	beq.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fe fa05 	bl	8003504 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d11d      	bne.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d016      	beq.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e007      	b.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b80      	cmp	r3, #128	; 0x80
 8005154:	d1c3      	bne.n	80050de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800516c:	e034      	b.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f89b 	bl	80052aa <I2C_IsAcknowledgeFailed>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e034      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d028      	beq.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fe f9bd 	bl	8003504 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d11d      	bne.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d016      	beq.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e007      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d1c3      	bne.n	800516e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051fc:	e049      	b.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b10      	cmp	r3, #16
 800520a:	d119      	bne.n	8005240 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0210 	mvn.w	r2, #16
 8005214:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e030      	b.n	80052a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7fe f960 	bl	8003504 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d11d      	bne.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d016      	beq.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e007      	b.n	80052a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d1ae      	bne.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c0:	d11b      	bne.n	80052fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f043 0204 	orr.w	r2, r3, #4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
	...

08005308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e272      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8087 	beq.w	8005436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005328:	4b92      	ldr	r3, [pc, #584]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b04      	cmp	r3, #4
 8005332:	d00c      	beq.n	800534e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005334:	4b8f      	ldr	r3, [pc, #572]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b08      	cmp	r3, #8
 800533e:	d112      	bne.n	8005366 <HAL_RCC_OscConfig+0x5e>
 8005340:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534c:	d10b      	bne.n	8005366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534e:	4b89      	ldr	r3, [pc, #548]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d06c      	beq.n	8005434 <HAL_RCC_OscConfig+0x12c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d168      	bne.n	8005434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e24c      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d106      	bne.n	800537e <HAL_RCC_OscConfig+0x76>
 8005370:	4b80      	ldr	r3, [pc, #512]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a7f      	ldr	r2, [pc, #508]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e02e      	b.n	80053dc <HAL_RCC_OscConfig+0xd4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x98>
 8005386:	4b7b      	ldr	r3, [pc, #492]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a7a      	ldr	r2, [pc, #488]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800538c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b78      	ldr	r3, [pc, #480]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a77      	ldr	r2, [pc, #476]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e01d      	b.n	80053dc <HAL_RCC_OscConfig+0xd4>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0xbc>
 80053aa:	4b72      	ldr	r3, [pc, #456]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a71      	ldr	r2, [pc, #452]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b6f      	ldr	r3, [pc, #444]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6e      	ldr	r2, [pc, #440]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0xd4>
 80053c4:	4b6b      	ldr	r3, [pc, #428]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a6a      	ldr	r2, [pc, #424]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	4b68      	ldr	r3, [pc, #416]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a67      	ldr	r2, [pc, #412]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d013      	beq.n	800540c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7fe f88e 	bl	8003504 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fe f88a 	bl	8003504 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e200      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	4b5d      	ldr	r3, [pc, #372]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0xe4>
 800540a:	e014      	b.n	8005436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fe f87a 	bl	8003504 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005414:	f7fe f876 	bl	8003504 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e1ec      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005426:	4b53      	ldr	r3, [pc, #332]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x10c>
 8005432:	e000      	b.n	8005436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d063      	beq.n	800550a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005442:	4b4c      	ldr	r3, [pc, #304]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800544e:	4b49      	ldr	r3, [pc, #292]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b08      	cmp	r3, #8
 8005458:	d11c      	bne.n	8005494 <HAL_RCC_OscConfig+0x18c>
 800545a:	4b46      	ldr	r3, [pc, #280]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d116      	bne.n	8005494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005466:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_RCC_OscConfig+0x176>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e1c0      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547e:	4b3d      	ldr	r3, [pc, #244]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4939      	ldr	r1, [pc, #228]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005492:	e03a      	b.n	800550a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a2:	f7fe f82f 	bl	8003504 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054aa:	f7fe f82b 	bl	8003504 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e1a1      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054bc:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c8:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4927      	ldr	r1, [pc, #156]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	600b      	str	r3, [r1, #0]
 80054dc:	e015      	b.n	800550a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054de:	4b26      	ldr	r3, [pc, #152]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fe f80e 	bl	8003504 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ec:	f7fe f80a 	bl	8003504 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e180      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d03a      	beq.n	800558c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <HAL_RCC_OscConfig+0x274>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005524:	f7fd ffee 	bl	8003504 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552c:	f7fd ffea 	bl	8003504 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e160      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553e:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800554a:	2001      	movs	r0, #1
 800554c:	f000 face 	bl	8005aec <RCC_Delay>
 8005550:	e01c      	b.n	800558c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_RCC_OscConfig+0x274>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005558:	f7fd ffd4 	bl	8003504 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555e:	e00f      	b.n	8005580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005560:	f7fd ffd0 	bl	8003504 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d908      	bls.n	8005580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e146      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	42420000 	.word	0x42420000
 800557c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005580:	4b92      	ldr	r3, [pc, #584]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e9      	bne.n	8005560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80a6 	beq.w	80056e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559a:	2300      	movs	r3, #0
 800559c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559e:	4b8b      	ldr	r3, [pc, #556]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10d      	bne.n	80055c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055aa:	4b88      	ldr	r3, [pc, #544]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	4a87      	ldr	r2, [pc, #540]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	61d3      	str	r3, [r2, #28]
 80055b6:	4b85      	ldr	r3, [pc, #532]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	4b82      	ldr	r3, [pc, #520]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d118      	bne.n	8005604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d2:	4b7f      	ldr	r3, [pc, #508]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a7e      	ldr	r2, [pc, #504]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055de:	f7fd ff91 	bl	8003504 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fd ff8d 	bl	8003504 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b64      	cmp	r3, #100	; 0x64
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e103      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	4b75      	ldr	r3, [pc, #468]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d106      	bne.n	800561a <HAL_RCC_OscConfig+0x312>
 800560c:	4b6f      	ldr	r3, [pc, #444]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4a6e      	ldr	r2, [pc, #440]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6213      	str	r3, [r2, #32]
 8005618:	e02d      	b.n	8005676 <HAL_RCC_OscConfig+0x36e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10c      	bne.n	800563c <HAL_RCC_OscConfig+0x334>
 8005622:	4b6a      	ldr	r3, [pc, #424]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	4a69      	ldr	r2, [pc, #420]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	6213      	str	r3, [r2, #32]
 800562e:	4b67      	ldr	r3, [pc, #412]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	4a66      	ldr	r2, [pc, #408]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005634:	f023 0304 	bic.w	r3, r3, #4
 8005638:	6213      	str	r3, [r2, #32]
 800563a:	e01c      	b.n	8005676 <HAL_RCC_OscConfig+0x36e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b05      	cmp	r3, #5
 8005642:	d10c      	bne.n	800565e <HAL_RCC_OscConfig+0x356>
 8005644:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	4a60      	ldr	r2, [pc, #384]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	6213      	str	r3, [r2, #32]
 8005650:	4b5e      	ldr	r3, [pc, #376]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4a5d      	ldr	r2, [pc, #372]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	6213      	str	r3, [r2, #32]
 800565c:	e00b      	b.n	8005676 <HAL_RCC_OscConfig+0x36e>
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	4a5a      	ldr	r2, [pc, #360]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6213      	str	r3, [r2, #32]
 800566a:	4b58      	ldr	r3, [pc, #352]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4a57      	ldr	r2, [pc, #348]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d015      	beq.n	80056aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567e:	f7fd ff41 	bl	8003504 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005684:	e00a      	b.n	800569c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fd ff3d 	bl	8003504 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f241 3288 	movw	r2, #5000	; 0x1388
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e0b1      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569c:	4b4b      	ldr	r3, [pc, #300]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0ee      	beq.n	8005686 <HAL_RCC_OscConfig+0x37e>
 80056a8:	e014      	b.n	80056d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056aa:	f7fd ff2b 	bl	8003504 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b0:	e00a      	b.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b2:	f7fd ff27 	bl	8003504 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e09b      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c8:	4b40      	ldr	r3, [pc, #256]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ee      	bne.n	80056b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d105      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056da:	4b3c      	ldr	r3, [pc, #240]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4a3b      	ldr	r2, [pc, #236]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8087 	beq.w	80057fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d061      	beq.n	80057c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d146      	bne.n	8005792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005704:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <HAL_RCC_OscConfig+0x4cc>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570a:	f7fd fefb 	bl	8003504 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005712:	f7fd fef7 	bl	8003504 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e06d      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005724:	4b29      	ldr	r3, [pc, #164]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d108      	bne.n	800574c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800573a:	4b24      	ldr	r3, [pc, #144]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4921      	ldr	r1, [pc, #132]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005748:	4313      	orrs	r3, r2
 800574a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574c:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a19      	ldr	r1, [r3, #32]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	430b      	orrs	r3, r1
 800575e:	491b      	ldr	r1, [pc, #108]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <HAL_RCC_OscConfig+0x4cc>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576a:	f7fd fecb 	bl	8003504 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005772:	f7fd fec7 	bl	8003504 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e03d      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x46a>
 8005790:	e035      	b.n	80057fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCC_OscConfig+0x4cc>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fd feb4 	bl	8003504 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fd feb0 	bl	8003504 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e026      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x498>
 80057be:	e01e      	b.n	80057fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e019      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40007000 	.word	0x40007000
 80057d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <HAL_RCC_OscConfig+0x500>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d106      	bne.n	80057fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d001      	beq.n	80057fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40021000 	.word	0x40021000

0800580c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0d0      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d910      	bls.n	8005850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b67      	ldr	r3, [pc, #412]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 0207 	bic.w	r2, r3, #7
 8005836:	4965      	ldr	r1, [pc, #404]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b63      	ldr	r3, [pc, #396]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0b8      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005868:	4b59      	ldr	r3, [pc, #356]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a58      	ldr	r2, [pc, #352]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800586e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005880:	4b53      	ldr	r3, [pc, #332]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a52      	ldr	r2, [pc, #328]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800588a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588c:	4b50      	ldr	r3, [pc, #320]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	494d      	ldr	r1, [pc, #308]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d040      	beq.n	800592c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	4b47      	ldr	r3, [pc, #284]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d115      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e07f      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d107      	bne.n	80058da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	4b41      	ldr	r3, [pc, #260]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e073      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b3d      	ldr	r3, [pc, #244]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e06b      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ea:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4936      	ldr	r1, [pc, #216]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058fc:	f7fd fe02 	bl	8003504 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	e00a      	b.n	800591a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005904:	f7fd fdfe 	bl	8003504 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e053      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	4b2d      	ldr	r3, [pc, #180]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 020c 	and.w	r2, r3, #12
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	429a      	cmp	r2, r3
 800592a:	d1eb      	bne.n	8005904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d210      	bcs.n	800595c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 0207 	bic.w	r2, r3, #7
 8005942:	4922      	ldr	r1, [pc, #136]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b20      	ldr	r3, [pc, #128]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e032      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4916      	ldr	r1, [pc, #88]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005976:	4313      	orrs	r3, r2
 8005978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	490e      	ldr	r1, [pc, #56]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	4313      	orrs	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800599a:	f000 f821 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	490a      	ldr	r1, [pc, #40]	; (80059d4 <HAL_RCC_ClockConfig+0x1c8>)
 80059ac:	5ccb      	ldrb	r3, [r1, r3]
 80059ae:	fa22 f303 	lsr.w	r3, r2, r3
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1cc>)
 80059b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_ClockConfig+0x1d0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fd60 	bl	8003480 <HAL_InitTick>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40022000 	.word	0x40022000
 80059d0:	40021000 	.word	0x40021000
 80059d4:	0800c194 	.word	0x0800c194
 80059d8:	20000000 	.word	0x20000000
 80059dc:	20000004 	.word	0x20000004

080059e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	2300      	movs	r3, #0
 80059f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059fa:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d002      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x30>
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_GetSysClockFreq+0x36>
 8005a0e:	e027      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a12:	613b      	str	r3, [r7, #16]
      break;
 8005a14:	e027      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	0c9b      	lsrs	r3, r3, #18
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a20:	5cd3      	ldrb	r3, [r2, r3]
 8005a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d010      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	0c5b      	lsrs	r3, r3, #17
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a3a:	5cd3      	ldrb	r3, [r2, r3]
 8005a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a42:	fb03 f202 	mul.w	r2, r3, r2
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e004      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	613b      	str	r3, [r7, #16]
      break;
 8005a5e:	e002      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a62:	613b      	str	r3, [r7, #16]
      break;
 8005a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a66:	693b      	ldr	r3, [r7, #16]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	007a1200 	.word	0x007a1200
 8005a7c:	0800c1ac 	.word	0x0800c1ac
 8005a80:	0800c1bc 	.word	0x0800c1bc
 8005a84:	003d0900 	.word	0x003d0900

08005a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a8c:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	20000000 	.word	0x20000000

08005a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aa0:	f7ff fff2 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4903      	ldr	r1, [pc, #12]	; (8005ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	0800c1a4 	.word	0x0800c1a4

08005ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ac8:	f7ff ffde 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	0adb      	lsrs	r3, r3, #11
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	; (8005ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	0800c1a4 	.word	0x0800c1a4

08005aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <RCC_Delay+0x34>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <RCC_Delay+0x38>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	0a5b      	lsrs	r3, r3, #9
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b08:	bf00      	nop
  }
  while (Delay --);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	60fa      	str	r2, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f9      	bne.n	8005b08 <RCC_Delay+0x1c>
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	20000000 	.word	0x20000000
 8005b24:	10624dd3 	.word	0x10624dd3

08005b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e041      	b.n	8005bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fd fa72 	bl	8003038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f000 fd5a 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e041      	b.n	8005c5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f839 	bl	8005c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f000 fd0b 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	e022      	b.n	8005cea <HAL_TIM_PWM_Start_DMA+0x72>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d109      	bne.n	8005cbe <HAL_TIM_PWM_Start_DMA+0x46>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	bf0c      	ite	eq
 8005cb6:	2301      	moveq	r3, #1
 8005cb8:	2300      	movne	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	e015      	b.n	8005cea <HAL_TIM_PWM_Start_DMA+0x72>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d109      	bne.n	8005cd8 <HAL_TIM_PWM_Start_DMA+0x60>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e008      	b.n	8005cea <HAL_TIM_PWM_Start_DMA+0x72>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e153      	b.n	8005f9a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <HAL_TIM_PWM_Start_DMA+0x94>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	e022      	b.n	8005d52 <HAL_TIM_PWM_Start_DMA+0xda>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d109      	bne.n	8005d26 <HAL_TIM_PWM_Start_DMA+0xae>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2301      	moveq	r3, #1
 8005d20:	2300      	movne	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	e015      	b.n	8005d52 <HAL_TIM_PWM_Start_DMA+0xda>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d109      	bne.n	8005d40 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	e008      	b.n	8005d52 <HAL_TIM_PWM_Start_DMA+0xda>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d024      	beq.n	8005da0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_TIM_PWM_Start_DMA+0xea>
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e119      	b.n	8005f9a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d74:	e016      	b.n	8005da4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d104      	bne.n	8005d86 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d84:	e00e      	b.n	8005da4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d94:	e006      	b.n	8005da4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d9e:	e001      	b.n	8005da4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0fa      	b.n	8005f9a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	f200 80ae 	bhi.w	8005f08 <HAL_TIM_PWM_Start_DMA+0x290>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	08005f09 	.word	0x08005f09
 8005dbc:	08005f09 	.word	0x08005f09
 8005dc0:	08005f09 	.word	0x08005f09
 8005dc4:	08005e31 	.word	0x08005e31
 8005dc8:	08005f09 	.word	0x08005f09
 8005dcc:	08005f09 	.word	0x08005f09
 8005dd0:	08005f09 	.word	0x08005f09
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005f09 	.word	0x08005f09
 8005ddc:	08005f09 	.word	0x08005f09
 8005de0:	08005f09 	.word	0x08005f09
 8005de4:	08005ec1 	.word	0x08005ec1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	4a6d      	ldr	r2, [pc, #436]	; (8005fa4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	4a6c      	ldr	r2, [pc, #432]	; (8005fa8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	4a6b      	ldr	r2, [pc, #428]	; (8005fac <HAL_TIM_PWM_Start_DMA+0x334>)
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3334      	adds	r3, #52	; 0x34
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	887b      	ldrh	r3, [r7, #2]
 8005e10:	f7fd fd0e 	bl	8003830 <HAL_DMA_Start_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e0bd      	b.n	8005f9a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2c:	60da      	str	r2, [r3, #12]
      break;
 8005e2e:	e06e      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	4a5b      	ldr	r2, [pc, #364]	; (8005fa4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	4a5a      	ldr	r2, [pc, #360]	; (8005fa8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	4a59      	ldr	r2, [pc, #356]	; (8005fac <HAL_TIM_PWM_Start_DMA+0x334>)
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3338      	adds	r3, #56	; 0x38
 8005e54:	461a      	mov	r2, r3
 8005e56:	887b      	ldrh	r3, [r7, #2]
 8005e58:	f7fd fcea 	bl	8003830 <HAL_DMA_Start_IT>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e099      	b.n	8005f9a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e74:	60da      	str	r2, [r3, #12]
      break;
 8005e76:	e04a      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	4a49      	ldr	r2, [pc, #292]	; (8005fa4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4a48      	ldr	r2, [pc, #288]	; (8005fa8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005e86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4a47      	ldr	r2, [pc, #284]	; (8005fac <HAL_TIM_PWM_Start_DMA+0x334>)
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	333c      	adds	r3, #60	; 0x3c
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	887b      	ldrh	r3, [r7, #2]
 8005ea0:	f7fd fcc6 	bl	8003830 <HAL_DMA_Start_IT>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e075      	b.n	8005f9a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ebc:	60da      	str	r2, [r3, #12]
      break;
 8005ebe:	e026      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	4a37      	ldr	r2, [pc, #220]	; (8005fa4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005ec6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	4a36      	ldr	r2, [pc, #216]	; (8005fa8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	4a35      	ldr	r2, [pc, #212]	; (8005fac <HAL_TIM_PWM_Start_DMA+0x334>)
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3340      	adds	r3, #64	; 0x40
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	887b      	ldrh	r3, [r7, #2]
 8005ee8:	f7fd fca2 	bl	8003830 <HAL_DMA_Start_IT>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e051      	b.n	8005f9a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f04:	60da      	str	r2, [r3, #12]
      break;
 8005f06:	e002      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d141      	bne.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fdff 	bl	8006b20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d107      	bne.n	8005f3c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f3a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00e      	beq.n	8005f64 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d009      	beq.n	8005f64 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d111      	bne.n	8005f88 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b06      	cmp	r3, #6
 8005f74:	d010      	beq.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0201 	orr.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f86:	e007      	b.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	08006511 	.word	0x08006511
 8005fa8:	080065b9 	.word	0x080065b9
 8005fac:	0800647f 	.word	0x0800647f
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800

08005fbc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b0c      	cmp	r3, #12
 8005fce:	d855      	bhi.n	800607c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	0800600d 	.word	0x0800600d
 8005fdc:	0800607d 	.word	0x0800607d
 8005fe0:	0800607d 	.word	0x0800607d
 8005fe4:	0800607d 	.word	0x0800607d
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	0800607d 	.word	0x0800607d
 8005ff0:	0800607d 	.word	0x0800607d
 8005ff4:	0800607d 	.word	0x0800607d
 8005ff8:	08006045 	.word	0x08006045
 8005ffc:	0800607d 	.word	0x0800607d
 8006000:	0800607d 	.word	0x0800607d
 8006004:	0800607d 	.word	0x0800607d
 8006008:	08006061 	.word	0x08006061
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800601a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7fd fca1 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 8006026:	e02c      	b.n	8006082 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006036:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	4618      	mov	r0, r3
 800603e:	f7fd fc93 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 8006042:	e01e      	b.n	8006082 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006052:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	4618      	mov	r0, r3
 800605a:	f7fd fc85 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 800605e:	e010      	b.n	8006082 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800606e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	4618      	mov	r0, r3
 8006076:	f7fd fc77 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 800607a:	e002      	b.n	8006082 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	bf00      	nop
  }

  if (status == HAL_OK)
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d157      	bne.n	8006138 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fd45 	bl	8006b20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d117      	bne.n	80060d0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	f240 4344 	movw	r3, #1092	; 0x444
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10f      	bne.n	8006100 <HAL_TIM_PWM_Stop_DMA+0x144>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	f240 4344 	movw	r3, #1092	; 0x444
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_PWM_Stop_DMA+0x144>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610e:	e013      	b.n	8006138 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b04      	cmp	r3, #4
 8006114:	d104      	bne.n	8006120 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611e:	e00b      	b.n	8006138 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b08      	cmp	r3, #8
 8006124:	d104      	bne.n	8006130 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612e:	e003      	b.n	8006138 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40012c00 	.word	0x40012c00

08006148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006162:	2302      	movs	r3, #2
 8006164:	e0ae      	b.n	80062c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b0c      	cmp	r3, #12
 8006172:	f200 809f 	bhi.w	80062b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006176:	a201      	add	r2, pc, #4	; (adr r2, 800617c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	080061b1 	.word	0x080061b1
 8006180:	080062b5 	.word	0x080062b5
 8006184:	080062b5 	.word	0x080062b5
 8006188:	080062b5 	.word	0x080062b5
 800618c:	080061f1 	.word	0x080061f1
 8006190:	080062b5 	.word	0x080062b5
 8006194:	080062b5 	.word	0x080062b5
 8006198:	080062b5 	.word	0x080062b5
 800619c:	08006233 	.word	0x08006233
 80061a0:	080062b5 	.word	0x080062b5
 80061a4:	080062b5 	.word	0x080062b5
 80061a8:	080062b5 	.word	0x080062b5
 80061ac:	08006273 	.word	0x08006273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fa94 	bl	80066e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0208 	orr.w	r2, r2, #8
 80061ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0204 	bic.w	r2, r2, #4
 80061da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6999      	ldr	r1, [r3, #24]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	619a      	str	r2, [r3, #24]
      break;
 80061ee:	e064      	b.n	80062ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fada 	bl	80067b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6999      	ldr	r1, [r3, #24]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	021a      	lsls	r2, r3, #8
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	619a      	str	r2, [r3, #24]
      break;
 8006230:	e043      	b.n	80062ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fb23 	bl	8006884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0208 	orr.w	r2, r2, #8
 800624c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0204 	bic.w	r2, r2, #4
 800625c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69d9      	ldr	r1, [r3, #28]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	61da      	str	r2, [r3, #28]
      break;
 8006270:	e023      	b.n	80062ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fb6d 	bl	8006958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800628c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69d9      	ldr	r1, [r3, #28]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	021a      	lsls	r2, r3, #8
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	61da      	str	r2, [r3, #28]
      break;
 80062b2:	e002      	b.n	80062ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
      break;
 80062b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e0b4      	b.n	8006452 <HAL_TIM_ConfigClockSource+0x186>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800630e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006320:	d03e      	beq.n	80063a0 <HAL_TIM_ConfigClockSource+0xd4>
 8006322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006326:	f200 8087 	bhi.w	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632e:	f000 8086 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x172>
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d87f      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 8006338:	2b70      	cmp	r3, #112	; 0x70
 800633a:	d01a      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0xa6>
 800633c:	2b70      	cmp	r3, #112	; 0x70
 800633e:	d87b      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b60      	cmp	r3, #96	; 0x60
 8006342:	d050      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x11a>
 8006344:	2b60      	cmp	r3, #96	; 0x60
 8006346:	d877      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b50      	cmp	r3, #80	; 0x50
 800634a:	d03c      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0xfa>
 800634c:	2b50      	cmp	r3, #80	; 0x50
 800634e:	d873      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 8006350:	2b40      	cmp	r3, #64	; 0x40
 8006352:	d058      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x13a>
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d86f      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 8006358:	2b30      	cmp	r3, #48	; 0x30
 800635a:	d064      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15a>
 800635c:	2b30      	cmp	r3, #48	; 0x30
 800635e:	d86b      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b20      	cmp	r3, #32
 8006362:	d060      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15a>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d867      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d05c      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15a>
 800636c:	2b10      	cmp	r3, #16
 800636e:	d05a      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15a>
 8006370:	e062      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6899      	ldr	r1, [r3, #8]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f000 fbae 	bl	8006ae2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	609a      	str	r2, [r3, #8]
      break;
 800639e:	e04f      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6899      	ldr	r1, [r3, #8]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f000 fb97 	bl	8006ae2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063c2:	609a      	str	r2, [r3, #8]
      break;
 80063c4:	e03c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fb0e 	bl	80069f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2150      	movs	r1, #80	; 0x50
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fb65 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80063e4:	e02c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 fb2c 	bl	8006a50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2160      	movs	r1, #96	; 0x60
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fb55 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 8006404:	e01c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	461a      	mov	r2, r3
 8006414:	f000 faee 	bl	80069f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2140      	movs	r1, #64	; 0x40
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fb45 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 8006424:	e00c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f000 fb3c 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 8006436:	e003      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e000      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800643e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr

0800647e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d107      	bne.n	80064a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	e02a      	b.n	80064fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d107      	bne.n	80064c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2202      	movs	r2, #2
 80064b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064be:	e01d      	b.n	80064fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d107      	bne.n	80064da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2204      	movs	r2, #4
 80064ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d8:	e010      	b.n	80064fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d107      	bne.n	80064f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2208      	movs	r2, #8
 80064e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f2:	e003      	b.n	80064fc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff ffb5 	bl	800646c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d10b      	bne.n	8006540 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d136      	bne.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800653e:	e031      	b.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	429a      	cmp	r2, r3
 8006548:	d10b      	bne.n	8006562 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2202      	movs	r2, #2
 800654e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d125      	bne.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006560:	e020      	b.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d10b      	bne.n	8006584 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2204      	movs	r2, #4
 8006570:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d114      	bne.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006582:	e00f      	b.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d10a      	bne.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2208      	movs	r2, #8
 8006592:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7fc fa33 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d103      	bne.n	80065d8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	771a      	strb	r2, [r3, #28]
 80065d6:	e019      	b.n	800660c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d103      	bne.n	80065ea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2202      	movs	r2, #2
 80065e6:	771a      	strb	r2, [r3, #28]
 80065e8:	e010      	b.n	800660c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d103      	bne.n	80065fc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2204      	movs	r2, #4
 80065f8:	771a      	strb	r2, [r3, #28]
 80065fa:	e007      	b.n	800660c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d102      	bne.n	800660c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2208      	movs	r2, #8
 800660a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff ff24 	bl	800645a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <TIM_Base_SetConfig+0xb8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00b      	beq.n	8006650 <TIM_Base_SetConfig+0x30>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d007      	beq.n	8006650 <TIM_Base_SetConfig+0x30>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a26      	ldr	r2, [pc, #152]	; (80066dc <TIM_Base_SetConfig+0xbc>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_Base_SetConfig+0x30>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <TIM_Base_SetConfig+0xc0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d108      	bne.n	8006662 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1c      	ldr	r2, [pc, #112]	; (80066d8 <TIM_Base_SetConfig+0xb8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00b      	beq.n	8006682 <TIM_Base_SetConfig+0x62>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d007      	beq.n	8006682 <TIM_Base_SetConfig+0x62>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <TIM_Base_SetConfig+0xbc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_Base_SetConfig+0x62>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_Base_SetConfig+0xc0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d108      	bne.n	8006694 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <TIM_Base_SetConfig+0xb8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d103      	bne.n	80066c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	615a      	str	r2, [r3, #20]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800

080066e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f023 0201 	bic.w	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 0302 	bic.w	r3, r3, #2
 800672c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <TIM_OC1_SetConfig+0xc8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10c      	bne.n	800675a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f023 0308 	bic.w	r3, r3, #8
 8006746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a13      	ldr	r2, [pc, #76]	; (80067ac <TIM_OC1_SetConfig+0xc8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d111      	bne.n	8006786 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	621a      	str	r2, [r3, #32]
}
 80067a0:	bf00      	nop
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40012c00 	.word	0x40012c00

080067b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f023 0210 	bic.w	r2, r3, #16
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0320 	bic.w	r3, r3, #32
 80067fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <TIM_OC2_SetConfig+0xd0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10d      	bne.n	800682c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a14      	ldr	r2, [pc, #80]	; (8006880 <TIM_OC2_SetConfig+0xd0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d113      	bne.n	800685c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800683a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr
 8006880:	40012c00 	.word	0x40012c00

08006884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <TIM_OC3_SetConfig+0xd0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10d      	bne.n	80068fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a14      	ldr	r2, [pc, #80]	; (8006954 <TIM_OC3_SetConfig+0xd0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d113      	bne.n	800692e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800690c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40012c00 	.word	0x40012c00

08006958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	031b      	lsls	r3, r3, #12
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <TIM_OC4_SetConfig+0x98>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d109      	bne.n	80069cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	019b      	lsls	r3, r3, #6
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr
 80069f0:	40012c00 	.word	0x40012c00

080069f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 030a 	bic.w	r3, r3, #10
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0210 	bic.w	r2, r3, #16
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	031b      	lsls	r3, r3, #12
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	621a      	str	r2, [r3, #32]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f043 0307 	orr.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr

08006ae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006afc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	021a      	lsls	r2, r3, #8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	609a      	str	r2, [r3, #8]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	2201      	movs	r2, #1
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1a      	ldr	r2, [r3, #32]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	43db      	mvns	r3, r3
 8006b42:	401a      	ands	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a1a      	ldr	r2, [r3, #32]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	fa01 f303 	lsl.w	r3, r1, r3
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e046      	b.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d009      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a10      	ldr	r2, [pc, #64]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d10c      	bne.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40000400 	.word	0x40000400
 8006c20:	40000800 	.word	0x40000800

08006c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e042      	b.n	8006cbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fc fa86 	bl	800315c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2224      	movs	r2, #36	; 0x24
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fd71 	bl	8007750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d16d      	bne.n	8006dc0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_UART_Transmit+0x2c>
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e066      	b.n	8006dc2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2221      	movs	r2, #33	; 0x21
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d02:	f7fc fbff 	bl	8003504 <HAL_GetTick>
 8006d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	88fa      	ldrh	r2, [r7, #6]
 8006d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1c:	d108      	bne.n	8006d30 <HAL_UART_Transmit+0x6c>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	e003      	b.n	8006d38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d38:	e02a      	b.n	8006d90 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	2180      	movs	r1, #128	; 0x80
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 faf9 	bl	800733c <UART_WaitOnFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e036      	b.n	8006dc2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	e007      	b.n	8006d82 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1cf      	bne.n	8006d3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2140      	movs	r1, #64	; 0x40
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fac9 	bl	800733c <UART_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e006      	b.n	8006dc2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b0ba      	sub	sp, #232	; 0xe8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10f      	bne.n	8006e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <HAL_UART_IRQHandler+0x66>
 8006e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fbd1 	bl	80075d2 <UART_Receive_IT>
      return;
 8006e30:	e25b      	b.n	80072ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 80de 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x22c>
 8006e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d106      	bne.n	8006e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80d1 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00b      	beq.n	8006e7a <HAL_UART_IRQHandler+0xae>
 8006e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	f043 0201 	orr.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00b      	beq.n	8006e9e <HAL_UART_IRQHandler+0xd2>
 8006e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e96:	f043 0202 	orr.w	r2, r3, #2
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xf6>
 8006eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eba:	f043 0204 	orr.w	r2, r3, #4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d011      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x126>
 8006ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	f043 0208 	orr.w	r2, r3, #8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 81f2 	beq.w	80072e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <HAL_UART_IRQHandler+0x14e>
 8006f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fb5c 	bl	80075d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <HAL_UART_IRQHandler+0x17a>
 8006f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d04f      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa66 	bl	8007418 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d041      	beq.n	8006fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3314      	adds	r3, #20
 8006f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1d9      	bne.n	8006f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d013      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb2:	4a7e      	ldr	r2, [pc, #504]	; (80071ac <HAL_UART_IRQHandler+0x3e0>)
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fc fcd4 	bl	8003968 <HAL_DMA_Abort_IT>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d016      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd4:	e00e      	b.n	8006ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f99c 	bl	8007314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	e00a      	b.n	8006ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f998 	bl	8007314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe4:	e006      	b.n	8006ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f994 	bl	8007314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006ff2:	e175      	b.n	80072e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	bf00      	nop
    return;
 8006ff6:	e173      	b.n	80072e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f040 814f 	bne.w	80072a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8148 	beq.w	80072a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8141 	beq.w	80072a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	60bb      	str	r3, [r7, #8]
 8007032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 80b6 	beq.w	80071b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8145 	beq.w	80072e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800705e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007062:	429a      	cmp	r2, r3
 8007064:	f080 813e 	bcs.w	80072e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800706e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	2b20      	cmp	r3, #32
 8007078:	f000 8088 	beq.w	800718c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1d9      	bne.n	800707c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3314      	adds	r3, #20
 80070e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e1      	bne.n	80070c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3314      	adds	r3, #20
 8007124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007128:	66fa      	str	r2, [r7, #108]	; 0x6c
 800712a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800712e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e3      	bne.n	8007104 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800715a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715c:	f023 0310 	bic.w	r3, r3, #16
 8007160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800716e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007170:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800717c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e3      	bne.n	800714a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007186:	4618      	mov	r0, r3
 8007188:	f7fc fbb2 	bl	80038f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800719a:	b29b      	uxth	r3, r3
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8bf 	bl	8007326 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071a8:	e09c      	b.n	80072e4 <HAL_UART_IRQHandler+0x518>
 80071aa:	bf00      	nop
 80071ac:	080074dd 	.word	0x080074dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 808e 	beq.w	80072e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80071cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8089 	beq.w	80072e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	330c      	adds	r3, #12
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80071fa:	647a      	str	r2, [r7, #68]	; 0x44
 80071fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e3      	bne.n	80071d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3314      	adds	r3, #20
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	623b      	str	r3, [r7, #32]
   return(result);
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3314      	adds	r3, #20
 800722e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007232:	633a      	str	r2, [r7, #48]	; 0x30
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e3      	bne.n	800720e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	330c      	adds	r3, #12
 800725a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	60fb      	str	r3, [r7, #12]
   return(result);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0310 	bic.w	r3, r3, #16
 800726a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007278:	61fa      	str	r2, [r7, #28]
 800727a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	69b9      	ldr	r1, [r7, #24]
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	617b      	str	r3, [r7, #20]
   return(result);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e3      	bne.n	8007254 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f844 	bl	8007326 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800729e:	e023      	b.n	80072e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <HAL_UART_IRQHandler+0x4f4>
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f923 	bl	8007504 <UART_Transmit_IT>
    return;
 80072be:	e014      	b.n	80072ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00e      	beq.n	80072ea <HAL_UART_IRQHandler+0x51e>
 80072cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d008      	beq.n	80072ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f962 	bl	80075a2 <UART_EndTransmit_IT>
    return;
 80072de:	e004      	b.n	80072ea <HAL_UART_IRQHandler+0x51e>
    return;
 80072e0:	bf00      	nop
 80072e2:	e002      	b.n	80072ea <HAL_UART_IRQHandler+0x51e>
      return;
 80072e4:	bf00      	nop
 80072e6:	e000      	b.n	80072ea <HAL_UART_IRQHandler+0x51e>
      return;
 80072e8:	bf00      	nop
  }
}
 80072ea:	37e8      	adds	r7, #232	; 0xe8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr

08007302 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b090      	sub	sp, #64	; 0x40
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4613      	mov	r3, r2
 800734a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800734c:	e050      	b.n	80073f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d04c      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <UART_WaitOnFlagUntilTimeout+0x30>
 800735c:	f7fc f8d2 	bl	8003504 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007368:	429a      	cmp	r2, r3
 800736a:	d241      	bcs.n	80073f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800738c:	637a      	str	r2, [r7, #52]	; 0x34
 800738e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3314      	adds	r3, #20
 80073a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	613b      	str	r3, [r7, #16]
   return(result);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c0:	623a      	str	r2, [r7, #32]
 80073c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	69f9      	ldr	r1, [r7, #28]
 80073c6:	6a3a      	ldr	r2, [r7, #32]
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e5      	bne.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e00f      	b.n	8007410 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4013      	ands	r3, r2
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	bf0c      	ite	eq
 8007400:	2301      	moveq	r3, #1
 8007402:	2300      	movne	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	429a      	cmp	r2, r3
 800740c:	d09f      	beq.n	800734e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3740      	adds	r7, #64	; 0x40
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b095      	sub	sp, #84	; 0x54
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	330c      	adds	r3, #12
 800743e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007440:	643a      	str	r2, [r7, #64]	; 0x40
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e5      	bne.n	8007420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3314      	adds	r3, #20
 800745a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	61fb      	str	r3, [r7, #28]
   return(result);
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	64bb      	str	r3, [r7, #72]	; 0x48
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3314      	adds	r3, #20
 8007472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800747a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e5      	bne.n	8007454 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	2b01      	cmp	r3, #1
 800748e:	d119      	bne.n	80074c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	647b      	str	r3, [r7, #68]	; 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	330c      	adds	r3, #12
 80074ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b0:	61ba      	str	r2, [r7, #24]
 80074b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6979      	ldr	r1, [r7, #20]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	613b      	str	r3, [r7, #16]
   return(result);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074d2:	bf00      	nop
 80074d4:	3754      	adds	r7, #84	; 0x54
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr

080074dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff ff0c 	bl	8007314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b21      	cmp	r3, #33	; 0x21
 8007516:	d13e      	bne.n	8007596 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007520:	d114      	bne.n	800754c <UART_Transmit_IT+0x48>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d110      	bne.n	800754c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800753e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	1c9a      	adds	r2, r3, #2
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	621a      	str	r2, [r3, #32]
 800754a:	e008      	b.n	800755e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	1c59      	adds	r1, r3, #1
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6211      	str	r1, [r2, #32]
 8007556:	781a      	ldrb	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29b      	uxth	r3, r3
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10f      	bne.n	8007592 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007580:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007590:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
  }
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr

080075a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fe94 	bl	80072f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b08c      	sub	sp, #48	; 0x30
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b22      	cmp	r3, #34	; 0x22
 80075e4:	f040 80ae 	bne.w	8007744 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f0:	d117      	bne.n	8007622 <UART_Receive_IT+0x50>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d113      	bne.n	8007622 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007610:	b29a      	uxth	r2, r3
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	1c9a      	adds	r2, r3, #2
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28
 8007620:	e026      	b.n	8007670 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007628:	2300      	movs	r3, #0
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007634:	d007      	beq.n	8007646 <UART_Receive_IT+0x74>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <UART_Receive_IT+0x82>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e008      	b.n	8007666 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007660:	b2da      	uxtb	r2, r3
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29b      	uxth	r3, r3
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4619      	mov	r1, r3
 800767e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007680:	2b00      	cmp	r3, #0
 8007682:	d15d      	bne.n	8007740 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0220 	bic.w	r2, r2, #32
 8007692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0201 	bic.w	r2, r2, #1
 80076b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d135      	bne.n	8007736 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	613b      	str	r3, [r7, #16]
   return(result);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f023 0310 	bic.w	r3, r3, #16
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	623a      	str	r2, [r7, #32]
 80076f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	6a3a      	ldr	r2, [r7, #32]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e5      	bne.n	80076d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b10      	cmp	r3, #16
 8007710:	d10a      	bne.n	8007728 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fdf9 	bl	8007326 <HAL_UARTEx_RxEventCallback>
 8007734:	e002      	b.n	800773c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff fde3 	bl	8007302 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e002      	b.n	8007746 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e000      	b.n	8007746 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
  }
}
 8007746:	4618      	mov	r0, r3
 8007748:	3730      	adds	r7, #48	; 0x30
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800778a:	f023 030c 	bic.w	r3, r3, #12
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	430b      	orrs	r3, r1
 8007796:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a2c      	ldr	r2, [pc, #176]	; (8007864 <UART_SetConfig+0x114>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d103      	bne.n	80077c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80077b8:	f7fe f984 	bl	8005ac4 <HAL_RCC_GetPCLK2Freq>
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	e002      	b.n	80077c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80077c0:	f7fe f96c 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 80077c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009a      	lsls	r2, r3, #2
 80077d0:	441a      	add	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	4a22      	ldr	r2, [pc, #136]	; (8007868 <UART_SetConfig+0x118>)
 80077de:	fba2 2303 	umull	r2, r3, r2, r3
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	0119      	lsls	r1, r3, #4
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009a      	lsls	r2, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80077fc:	4b1a      	ldr	r3, [pc, #104]	; (8007868 <UART_SetConfig+0x118>)
 80077fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2064      	movs	r0, #100	; 0x64
 8007806:	fb00 f303 	mul.w	r3, r0, r3
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	3332      	adds	r3, #50	; 0x32
 8007810:	4a15      	ldr	r2, [pc, #84]	; (8007868 <UART_SetConfig+0x118>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800781c:	4419      	add	r1, r3
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009a      	lsls	r2, r3, #2
 8007828:	441a      	add	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	fbb2 f2f3 	udiv	r2, r2, r3
 8007834:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <UART_SetConfig+0x118>)
 8007836:	fba3 0302 	umull	r0, r3, r3, r2
 800783a:	095b      	lsrs	r3, r3, #5
 800783c:	2064      	movs	r0, #100	; 0x64
 800783e:	fb00 f303 	mul.w	r3, r0, r3
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	3332      	adds	r3, #50	; 0x32
 8007848:	4a07      	ldr	r2, [pc, #28]	; (8007868 <UART_SetConfig+0x118>)
 800784a:	fba2 2303 	umull	r2, r3, r2, r3
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	f003 020f 	and.w	r2, r3, #15
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	440a      	add	r2, r1
 800785a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40013800 	.word	0x40013800
 8007868:	51eb851f 	.word	0x51eb851f

0800786c <_Znwj>:
 800786c:	2801      	cmp	r0, #1
 800786e:	bf38      	it	cc
 8007870:	2001      	movcc	r0, #1
 8007872:	b510      	push	{r4, lr}
 8007874:	4604      	mov	r4, r0
 8007876:	4620      	mov	r0, r4
 8007878:	f001 fd20 	bl	80092bc <malloc>
 800787c:	b930      	cbnz	r0, 800788c <_Znwj+0x20>
 800787e:	f000 f807 	bl	8007890 <_ZSt15get_new_handlerv>
 8007882:	b908      	cbnz	r0, 8007888 <_Znwj+0x1c>
 8007884:	f001 fce8 	bl	8009258 <abort>
 8007888:	4780      	blx	r0
 800788a:	e7f4      	b.n	8007876 <_Znwj+0xa>
 800788c:	bd10      	pop	{r4, pc}
	...

08007890 <_ZSt15get_new_handlerv>:
 8007890:	4b02      	ldr	r3, [pc, #8]	; (800789c <_ZSt15get_new_handlerv+0xc>)
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	f3bf 8f5b 	dmb	ish
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	20000380 	.word	0x20000380

080078a0 <tanf>:
 80078a0:	b507      	push	{r0, r1, r2, lr}
 80078a2:	4a11      	ldr	r2, [pc, #68]	; (80078e8 <tanf+0x48>)
 80078a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80078a8:	4293      	cmp	r3, r2
 80078aa:	4601      	mov	r1, r0
 80078ac:	dc06      	bgt.n	80078bc <tanf+0x1c>
 80078ae:	2201      	movs	r2, #1
 80078b0:	2100      	movs	r1, #0
 80078b2:	b003      	add	sp, #12
 80078b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b8:	f001 ba58 	b.w	8008d6c <__kernel_tanf>
 80078bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80078c0:	db04      	blt.n	80078cc <tanf+0x2c>
 80078c2:	f7f9 f955 	bl	8000b70 <__aeabi_fsub>
 80078c6:	b003      	add	sp, #12
 80078c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80078cc:	4669      	mov	r1, sp
 80078ce:	f000 fe3d 	bl	800854c <__ieee754_rem_pio2f>
 80078d2:	0042      	lsls	r2, r0, #1
 80078d4:	f002 0202 	and.w	r2, r2, #2
 80078d8:	9901      	ldr	r1, [sp, #4]
 80078da:	9800      	ldr	r0, [sp, #0]
 80078dc:	f1c2 0201 	rsb	r2, r2, #1
 80078e0:	f001 fa44 	bl	8008d6c <__kernel_tanf>
 80078e4:	e7ef      	b.n	80078c6 <tanf+0x26>
 80078e6:	bf00      	nop
 80078e8:	3f490fda 	.word	0x3f490fda

080078ec <pow>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	4680      	mov	r8, r0
 80078f6:	4689      	mov	r9, r1
 80078f8:	f000 f862 	bl	80079c0 <__ieee754_pow>
 80078fc:	4622      	mov	r2, r4
 80078fe:	4606      	mov	r6, r0
 8007900:	460f      	mov	r7, r1
 8007902:	462b      	mov	r3, r5
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f9 f880 	bl	8000a0c <__aeabi_dcmpun>
 800790c:	bbc8      	cbnz	r0, 8007982 <pow+0x96>
 800790e:	2200      	movs	r2, #0
 8007910:	2300      	movs	r3, #0
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f9 f847 	bl	80009a8 <__aeabi_dcmpeq>
 800791a:	b1b8      	cbz	r0, 800794c <pow+0x60>
 800791c:	2200      	movs	r2, #0
 800791e:	2300      	movs	r3, #0
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f9 f840 	bl	80009a8 <__aeabi_dcmpeq>
 8007928:	2800      	cmp	r0, #0
 800792a:	d141      	bne.n	80079b0 <pow+0xc4>
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f001 fb79 	bl	8009026 <finite>
 8007934:	b328      	cbz	r0, 8007982 <pow+0x96>
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f7f9 f83d 	bl	80009bc <__aeabi_dcmplt>
 8007942:	b1f0      	cbz	r0, 8007982 <pow+0x96>
 8007944:	f001 fc90 	bl	8009268 <__errno>
 8007948:	2322      	movs	r3, #34	; 0x22
 800794a:	e019      	b.n	8007980 <pow+0x94>
 800794c:	4630      	mov	r0, r6
 800794e:	4639      	mov	r1, r7
 8007950:	f001 fb69 	bl	8009026 <finite>
 8007954:	b9c8      	cbnz	r0, 800798a <pow+0x9e>
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	f001 fb64 	bl	8009026 <finite>
 800795e:	b1a0      	cbz	r0, 800798a <pow+0x9e>
 8007960:	4620      	mov	r0, r4
 8007962:	4629      	mov	r1, r5
 8007964:	f001 fb5f 	bl	8009026 <finite>
 8007968:	b178      	cbz	r0, 800798a <pow+0x9e>
 800796a:	4632      	mov	r2, r6
 800796c:	463b      	mov	r3, r7
 800796e:	4630      	mov	r0, r6
 8007970:	4639      	mov	r1, r7
 8007972:	f7f9 f84b 	bl	8000a0c <__aeabi_dcmpun>
 8007976:	2800      	cmp	r0, #0
 8007978:	d0e4      	beq.n	8007944 <pow+0x58>
 800797a:	f001 fc75 	bl	8009268 <__errno>
 800797e:	2321      	movs	r3, #33	; 0x21
 8007980:	6003      	str	r3, [r0, #0]
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f9 f809 	bl	80009a8 <__aeabi_dcmpeq>
 8007996:	2800      	cmp	r0, #0
 8007998:	d0f3      	beq.n	8007982 <pow+0x96>
 800799a:	4640      	mov	r0, r8
 800799c:	4649      	mov	r1, r9
 800799e:	f001 fb42 	bl	8009026 <finite>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d0ed      	beq.n	8007982 <pow+0x96>
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	f001 fb3c 	bl	8009026 <finite>
 80079ae:	e7c8      	b.n	8007942 <pow+0x56>
 80079b0:	2600      	movs	r6, #0
 80079b2:	4f01      	ldr	r7, [pc, #4]	; (80079b8 <pow+0xcc>)
 80079b4:	e7e5      	b.n	8007982 <pow+0x96>
 80079b6:	bf00      	nop
 80079b8:	3ff00000 	.word	0x3ff00000
 80079bc:	00000000 	.word	0x00000000

080079c0 <__ieee754_pow>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	b093      	sub	sp, #76	; 0x4c
 80079c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079ca:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80079ce:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80079d2:	4689      	mov	r9, r1
 80079d4:	ea56 0102 	orrs.w	r1, r6, r2
 80079d8:	4680      	mov	r8, r0
 80079da:	d111      	bne.n	8007a00 <__ieee754_pow+0x40>
 80079dc:	1803      	adds	r3, r0, r0
 80079de:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80079e2:	4152      	adcs	r2, r2
 80079e4:	4299      	cmp	r1, r3
 80079e6:	4b82      	ldr	r3, [pc, #520]	; (8007bf0 <__ieee754_pow+0x230>)
 80079e8:	4193      	sbcs	r3, r2
 80079ea:	f080 84b9 	bcs.w	8008360 <__ieee754_pow+0x9a0>
 80079ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	f7f8 fbb9 	bl	800016c <__adddf3>
 80079fa:	4683      	mov	fp, r0
 80079fc:	468c      	mov	ip, r1
 80079fe:	e06f      	b.n	8007ae0 <__ieee754_pow+0x120>
 8007a00:	4b7c      	ldr	r3, [pc, #496]	; (8007bf4 <__ieee754_pow+0x234>)
 8007a02:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007a06:	429c      	cmp	r4, r3
 8007a08:	464d      	mov	r5, r9
 8007a0a:	4682      	mov	sl, r0
 8007a0c:	dc06      	bgt.n	8007a1c <__ieee754_pow+0x5c>
 8007a0e:	d101      	bne.n	8007a14 <__ieee754_pow+0x54>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d1ec      	bne.n	80079ee <__ieee754_pow+0x2e>
 8007a14:	429e      	cmp	r6, r3
 8007a16:	dc01      	bgt.n	8007a1c <__ieee754_pow+0x5c>
 8007a18:	d10f      	bne.n	8007a3a <__ieee754_pow+0x7a>
 8007a1a:	b172      	cbz	r2, 8007a3a <__ieee754_pow+0x7a>
 8007a1c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007a20:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007a24:	ea55 050a 	orrs.w	r5, r5, sl
 8007a28:	d1e1      	bne.n	80079ee <__ieee754_pow+0x2e>
 8007a2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007a2e:	18db      	adds	r3, r3, r3
 8007a30:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007a34:	4152      	adcs	r2, r2
 8007a36:	429d      	cmp	r5, r3
 8007a38:	e7d5      	b.n	80079e6 <__ieee754_pow+0x26>
 8007a3a:	2d00      	cmp	r5, #0
 8007a3c:	da39      	bge.n	8007ab2 <__ieee754_pow+0xf2>
 8007a3e:	4b6e      	ldr	r3, [pc, #440]	; (8007bf8 <__ieee754_pow+0x238>)
 8007a40:	429e      	cmp	r6, r3
 8007a42:	dc52      	bgt.n	8007aea <__ieee754_pow+0x12a>
 8007a44:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007a48:	429e      	cmp	r6, r3
 8007a4a:	f340 849c 	ble.w	8008386 <__ieee754_pow+0x9c6>
 8007a4e:	1533      	asrs	r3, r6, #20
 8007a50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a54:	2b14      	cmp	r3, #20
 8007a56:	dd0f      	ble.n	8007a78 <__ieee754_pow+0xb8>
 8007a58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007a5c:	fa22 f103 	lsr.w	r1, r2, r3
 8007a60:	fa01 f303 	lsl.w	r3, r1, r3
 8007a64:	4293      	cmp	r3, r2
 8007a66:	f040 848e 	bne.w	8008386 <__ieee754_pow+0x9c6>
 8007a6a:	f001 0101 	and.w	r1, r1, #1
 8007a6e:	f1c1 0302 	rsb	r3, r1, #2
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	b182      	cbz	r2, 8007a98 <__ieee754_pow+0xd8>
 8007a76:	e05d      	b.n	8007b34 <__ieee754_pow+0x174>
 8007a78:	2a00      	cmp	r2, #0
 8007a7a:	d159      	bne.n	8007b30 <__ieee754_pow+0x170>
 8007a7c:	f1c3 0314 	rsb	r3, r3, #20
 8007a80:	fa46 f103 	asr.w	r1, r6, r3
 8007a84:	fa01 f303 	lsl.w	r3, r1, r3
 8007a88:	42b3      	cmp	r3, r6
 8007a8a:	f040 8479 	bne.w	8008380 <__ieee754_pow+0x9c0>
 8007a8e:	f001 0101 	and.w	r1, r1, #1
 8007a92:	f1c1 0302 	rsb	r3, r1, #2
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4b58      	ldr	r3, [pc, #352]	; (8007bfc <__ieee754_pow+0x23c>)
 8007a9a:	429e      	cmp	r6, r3
 8007a9c:	d132      	bne.n	8007b04 <__ieee754_pow+0x144>
 8007a9e:	2f00      	cmp	r7, #0
 8007aa0:	f280 846a 	bge.w	8008378 <__ieee754_pow+0x9b8>
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	4954      	ldr	r1, [pc, #336]	; (8007bfc <__ieee754_pow+0x23c>)
 8007aac:	f7f8 fe3e 	bl	800072c <__aeabi_ddiv>
 8007ab0:	e7a3      	b.n	80079fa <__ieee754_pow+0x3a>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	d13c      	bne.n	8007b34 <__ieee754_pow+0x174>
 8007aba:	4b4e      	ldr	r3, [pc, #312]	; (8007bf4 <__ieee754_pow+0x234>)
 8007abc:	429e      	cmp	r6, r3
 8007abe:	d1eb      	bne.n	8007a98 <__ieee754_pow+0xd8>
 8007ac0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007ac4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007ac8:	ea53 030a 	orrs.w	r3, r3, sl
 8007acc:	f000 8448 	beq.w	8008360 <__ieee754_pow+0x9a0>
 8007ad0:	4b4b      	ldr	r3, [pc, #300]	; (8007c00 <__ieee754_pow+0x240>)
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	dd0b      	ble.n	8007aee <__ieee754_pow+0x12e>
 8007ad6:	2f00      	cmp	r7, #0
 8007ad8:	f2c0 8448 	blt.w	800836c <__ieee754_pow+0x9ac>
 8007adc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007ae0:	4658      	mov	r0, fp
 8007ae2:	4661      	mov	r1, ip
 8007ae4:	b013      	add	sp, #76	; 0x4c
 8007ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aea:	2302      	movs	r3, #2
 8007aec:	e7e2      	b.n	8007ab4 <__ieee754_pow+0xf4>
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	f04f 0b00 	mov.w	fp, #0
 8007af4:	f04f 0c00 	mov.w	ip, #0
 8007af8:	daf2      	bge.n	8007ae0 <__ieee754_pow+0x120>
 8007afa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007afe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007b02:	e7ed      	b.n	8007ae0 <__ieee754_pow+0x120>
 8007b04:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007b08:	d106      	bne.n	8007b18 <__ieee754_pow+0x158>
 8007b0a:	4642      	mov	r2, r8
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 fce1 	bl	80004d8 <__aeabi_dmul>
 8007b16:	e770      	b.n	80079fa <__ieee754_pow+0x3a>
 8007b18:	4b3a      	ldr	r3, [pc, #232]	; (8007c04 <__ieee754_pow+0x244>)
 8007b1a:	429f      	cmp	r7, r3
 8007b1c:	d10a      	bne.n	8007b34 <__ieee754_pow+0x174>
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	db08      	blt.n	8007b34 <__ieee754_pow+0x174>
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	b013      	add	sp, #76	; 0x4c
 8007b28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	f000 bc5e 	b.w	80083ec <__ieee754_sqrt>
 8007b30:	2300      	movs	r3, #0
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4640      	mov	r0, r8
 8007b36:	4649      	mov	r1, r9
 8007b38:	f001 fa72 	bl	8009020 <fabs>
 8007b3c:	4683      	mov	fp, r0
 8007b3e:	468c      	mov	ip, r1
 8007b40:	f1ba 0f00 	cmp.w	sl, #0
 8007b44:	d128      	bne.n	8007b98 <__ieee754_pow+0x1d8>
 8007b46:	b124      	cbz	r4, 8007b52 <__ieee754_pow+0x192>
 8007b48:	4b2c      	ldr	r3, [pc, #176]	; (8007bfc <__ieee754_pow+0x23c>)
 8007b4a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d122      	bne.n	8007b98 <__ieee754_pow+0x1d8>
 8007b52:	2f00      	cmp	r7, #0
 8007b54:	da07      	bge.n	8007b66 <__ieee754_pow+0x1a6>
 8007b56:	465a      	mov	r2, fp
 8007b58:	4663      	mov	r3, ip
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	4927      	ldr	r1, [pc, #156]	; (8007bfc <__ieee754_pow+0x23c>)
 8007b5e:	f7f8 fde5 	bl	800072c <__aeabi_ddiv>
 8007b62:	4683      	mov	fp, r0
 8007b64:	468c      	mov	ip, r1
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	daba      	bge.n	8007ae0 <__ieee754_pow+0x120>
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b74:	4323      	orrs	r3, r4
 8007b76:	d108      	bne.n	8007b8a <__ieee754_pow+0x1ca>
 8007b78:	465a      	mov	r2, fp
 8007b7a:	4663      	mov	r3, ip
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	4661      	mov	r1, ip
 8007b80:	f7f8 faf2 	bl	8000168 <__aeabi_dsub>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	e790      	b.n	8007aac <__ieee754_pow+0xec>
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d1a7      	bne.n	8007ae0 <__ieee754_pow+0x120>
 8007b90:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007b94:	469c      	mov	ip, r3
 8007b96:	e7a3      	b.n	8007ae0 <__ieee754_pow+0x120>
 8007b98:	0feb      	lsrs	r3, r5, #31
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	d104      	bne.n	8007bb0 <__ieee754_pow+0x1f0>
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	e7e7      	b.n	8007b80 <__ieee754_pow+0x1c0>
 8007bb0:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <__ieee754_pow+0x248>)
 8007bb2:	429e      	cmp	r6, r3
 8007bb4:	f340 80f6 	ble.w	8007da4 <__ieee754_pow+0x3e4>
 8007bb8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007bbc:	429e      	cmp	r6, r3
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <__ieee754_pow+0x240>)
 8007bc0:	dd09      	ble.n	8007bd6 <__ieee754_pow+0x216>
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	dc0c      	bgt.n	8007be0 <__ieee754_pow+0x220>
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	da0c      	bge.n	8007be4 <__ieee754_pow+0x224>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	b013      	add	sp, #76	; 0x4c
 8007bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd2:	f001 ba20 	b.w	8009016 <__math_oflow>
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	dbf5      	blt.n	8007bc6 <__ieee754_pow+0x206>
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <__ieee754_pow+0x23c>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	dd15      	ble.n	8007c0c <__ieee754_pow+0x24c>
 8007be0:	2f00      	cmp	r7, #0
 8007be2:	dcf2      	bgt.n	8007bca <__ieee754_pow+0x20a>
 8007be4:	2000      	movs	r0, #0
 8007be6:	b013      	add	sp, #76	; 0x4c
 8007be8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	f001 ba0e 	b.w	800900c <__math_uflow>
 8007bf0:	fff00000 	.word	0xfff00000
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	433fffff 	.word	0x433fffff
 8007bfc:	3ff00000 	.word	0x3ff00000
 8007c00:	3fefffff 	.word	0x3fefffff
 8007c04:	3fe00000 	.word	0x3fe00000
 8007c08:	41e00000 	.word	0x41e00000
 8007c0c:	4661      	mov	r1, ip
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4658      	mov	r0, fp
 8007c12:	4b5f      	ldr	r3, [pc, #380]	; (8007d90 <__ieee754_pow+0x3d0>)
 8007c14:	f7f8 faa8 	bl	8000168 <__aeabi_dsub>
 8007c18:	a355      	add	r3, pc, #340	; (adr r3, 8007d70 <__ieee754_pow+0x3b0>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	f7f8 fc59 	bl	80004d8 <__aeabi_dmul>
 8007c26:	a354      	add	r3, pc, #336	; (adr r3, 8007d78 <__ieee754_pow+0x3b8>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	460f      	mov	r7, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fc50 	bl	80004d8 <__aeabi_dmul>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4682      	mov	sl, r0
 8007c3c:	468b      	mov	fp, r1
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	4b54      	ldr	r3, [pc, #336]	; (8007d94 <__ieee754_pow+0x3d4>)
 8007c44:	f7f8 fc48 	bl	80004d8 <__aeabi_dmul>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	a14c      	add	r1, pc, #304	; (adr r1, 8007d80 <__ieee754_pow+0x3c0>)
 8007c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c52:	f7f8 fa89 	bl	8000168 <__aeabi_dsub>
 8007c56:	4622      	mov	r2, r4
 8007c58:	462b      	mov	r3, r5
 8007c5a:	f7f8 fc3d 	bl	80004d8 <__aeabi_dmul>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	2000      	movs	r0, #0
 8007c64:	494c      	ldr	r1, [pc, #304]	; (8007d98 <__ieee754_pow+0x3d8>)
 8007c66:	f7f8 fa7f 	bl	8000168 <__aeabi_dsub>
 8007c6a:	4622      	mov	r2, r4
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4689      	mov	r9, r1
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7f8 fc2f 	bl	80004d8 <__aeabi_dmul>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	f7f8 fc29 	bl	80004d8 <__aeabi_dmul>
 8007c86:	a340      	add	r3, pc, #256	; (adr r3, 8007d88 <__ieee754_pow+0x3c8>)
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f7f8 fc24 	bl	80004d8 <__aeabi_dmul>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4650      	mov	r0, sl
 8007c96:	4659      	mov	r1, fp
 8007c98:	f7f8 fa66 	bl	8000168 <__aeabi_dsub>
 8007c9c:	f04f 0a00 	mov.w	sl, #0
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 fa5e 	bl	800016c <__adddf3>
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	4650      	mov	r0, sl
 8007cb6:	468b      	mov	fp, r1
 8007cb8:	f7f8 fa56 	bl	8000168 <__aeabi_dsub>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f7f8 fa50 	bl	8000168 <__aeabi_dsub>
 8007cc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ccc:	9b00      	ldr	r3, [sp, #0]
 8007cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f04f 0600 	mov.w	r6, #0
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	bf0c      	ite	eq
 8007cde:	4b2f      	ldreq	r3, [pc, #188]	; (8007d9c <__ieee754_pow+0x3dc>)
 8007ce0:	4b2b      	ldrne	r3, [pc, #172]	; (8007d90 <__ieee754_pow+0x3d0>)
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cea:	e9cd 2300 	strd	r2, r3, [sp]
 8007cee:	4632      	mov	r2, r6
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	f7f8 fa39 	bl	8000168 <__aeabi_dsub>
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	465b      	mov	r3, fp
 8007cfa:	f7f8 fbed 	bl	80004d8 <__aeabi_dmul>
 8007cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d02:	4680      	mov	r8, r0
 8007d04:	4689      	mov	r9, r1
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 fbe5 	bl	80004d8 <__aeabi_dmul>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fa29 	bl	800016c <__adddf3>
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	4680      	mov	r8, r0
 8007d20:	4689      	mov	r9, r1
 8007d22:	4650      	mov	r0, sl
 8007d24:	4659      	mov	r1, fp
 8007d26:	f7f8 fbd7 	bl	80004d8 <__aeabi_dmul>
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	460d      	mov	r5, r1
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4602      	mov	r2, r0
 8007d32:	4649      	mov	r1, r9
 8007d34:	4640      	mov	r0, r8
 8007d36:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007d3a:	f7f8 fa17 	bl	800016c <__adddf3>
 8007d3e:	4b18      	ldr	r3, [pc, #96]	; (8007da0 <__ieee754_pow+0x3e0>)
 8007d40:	4682      	mov	sl, r0
 8007d42:	4299      	cmp	r1, r3
 8007d44:	460f      	mov	r7, r1
 8007d46:	460e      	mov	r6, r1
 8007d48:	f340 82e5 	ble.w	8008316 <__ieee754_pow+0x956>
 8007d4c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007d50:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007d54:	4303      	orrs	r3, r0
 8007d56:	f000 81df 	beq.w	8008118 <__ieee754_pow+0x758>
 8007d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	f7f8 fe2b 	bl	80009bc <__aeabi_dcmplt>
 8007d66:	3800      	subs	r0, #0
 8007d68:	bf18      	it	ne
 8007d6a:	2001      	movne	r0, #1
 8007d6c:	e72e      	b.n	8007bcc <__ieee754_pow+0x20c>
 8007d6e:	bf00      	nop
 8007d70:	60000000 	.word	0x60000000
 8007d74:	3ff71547 	.word	0x3ff71547
 8007d78:	f85ddf44 	.word	0xf85ddf44
 8007d7c:	3e54ae0b 	.word	0x3e54ae0b
 8007d80:	55555555 	.word	0x55555555
 8007d84:	3fd55555 	.word	0x3fd55555
 8007d88:	652b82fe 	.word	0x652b82fe
 8007d8c:	3ff71547 	.word	0x3ff71547
 8007d90:	3ff00000 	.word	0x3ff00000
 8007d94:	3fd00000 	.word	0x3fd00000
 8007d98:	3fe00000 	.word	0x3fe00000
 8007d9c:	bff00000 	.word	0xbff00000
 8007da0:	408fffff 	.word	0x408fffff
 8007da4:	4bd2      	ldr	r3, [pc, #840]	; (80080f0 <__ieee754_pow+0x730>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	402b      	ands	r3, r5
 8007daa:	b943      	cbnz	r3, 8007dbe <__ieee754_pow+0x3fe>
 8007dac:	4658      	mov	r0, fp
 8007dae:	4661      	mov	r1, ip
 8007db0:	4bd0      	ldr	r3, [pc, #832]	; (80080f4 <__ieee754_pow+0x734>)
 8007db2:	f7f8 fb91 	bl	80004d8 <__aeabi_dmul>
 8007db6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007dba:	4683      	mov	fp, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	1523      	asrs	r3, r4, #20
 8007dc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007dc4:	4413      	add	r3, r2
 8007dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc8:	4bcb      	ldr	r3, [pc, #812]	; (80080f8 <__ieee754_pow+0x738>)
 8007dca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007dce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007dd8:	dd08      	ble.n	8007dec <__ieee754_pow+0x42c>
 8007dda:	4bc8      	ldr	r3, [pc, #800]	; (80080fc <__ieee754_pow+0x73c>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	f340 8199 	ble.w	8008114 <__ieee754_pow+0x754>
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007de8:	3301      	adds	r3, #1
 8007dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dec:	2600      	movs	r6, #0
 8007dee:	00f3      	lsls	r3, r6, #3
 8007df0:	930d      	str	r3, [sp, #52]	; 0x34
 8007df2:	4bc3      	ldr	r3, [pc, #780]	; (8008100 <__ieee754_pow+0x740>)
 8007df4:	4658      	mov	r0, fp
 8007df6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007dfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dfe:	4629      	mov	r1, r5
 8007e00:	461a      	mov	r2, r3
 8007e02:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007e06:	4623      	mov	r3, r4
 8007e08:	f7f8 f9ae 	bl	8000168 <__aeabi_dsub>
 8007e0c:	46da      	mov	sl, fp
 8007e0e:	462b      	mov	r3, r5
 8007e10:	4652      	mov	r2, sl
 8007e12:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007e16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e1a:	f7f8 f9a7 	bl	800016c <__adddf3>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	2000      	movs	r0, #0
 8007e24:	49b7      	ldr	r1, [pc, #732]	; (8008104 <__ieee754_pow+0x744>)
 8007e26:	f7f8 fc81 	bl	800072c <__aeabi_ddiv>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e36:	f7f8 fb4f 	bl	80004d8 <__aeabi_dmul>
 8007e3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e3e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007e42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e46:	2300      	movs	r3, #0
 8007e48:	2200      	movs	r2, #0
 8007e4a:	46ab      	mov	fp, r5
 8007e4c:	106d      	asrs	r5, r5, #1
 8007e4e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007e58:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007e5c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	4614      	mov	r4, r2
 8007e66:	461d      	mov	r5, r3
 8007e68:	f7f8 fb36 	bl	80004d8 <__aeabi_dmul>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e74:	f7f8 f978 	bl	8000168 <__aeabi_dsub>
 8007e78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	460f      	mov	r7, r1
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 f970 	bl	8000168 <__aeabi_dsub>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	4659      	mov	r1, fp
 8007e90:	f7f8 f96a 	bl	8000168 <__aeabi_dsub>
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	f7f8 fb1e 	bl	80004d8 <__aeabi_dmul>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 f960 	bl	8000168 <__aeabi_dsub>
 8007ea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007eac:	f7f8 fb14 	bl	80004d8 <__aeabi_dmul>
 8007eb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f7f8 fb0c 	bl	80004d8 <__aeabi_dmul>
 8007ec0:	a379      	add	r3, pc, #484	; (adr r3, 80080a8 <__ieee754_pow+0x6e8>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	f7f8 fb05 	bl	80004d8 <__aeabi_dmul>
 8007ece:	a378      	add	r3, pc, #480	; (adr r3, 80080b0 <__ieee754_pow+0x6f0>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 f94a 	bl	800016c <__adddf3>
 8007ed8:	4622      	mov	r2, r4
 8007eda:	462b      	mov	r3, r5
 8007edc:	f7f8 fafc 	bl	80004d8 <__aeabi_dmul>
 8007ee0:	a375      	add	r3, pc, #468	; (adr r3, 80080b8 <__ieee754_pow+0x6f8>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 f941 	bl	800016c <__adddf3>
 8007eea:	4622      	mov	r2, r4
 8007eec:	462b      	mov	r3, r5
 8007eee:	f7f8 faf3 	bl	80004d8 <__aeabi_dmul>
 8007ef2:	a373      	add	r3, pc, #460	; (adr r3, 80080c0 <__ieee754_pow+0x700>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f938 	bl	800016c <__adddf3>
 8007efc:	4622      	mov	r2, r4
 8007efe:	462b      	mov	r3, r5
 8007f00:	f7f8 faea 	bl	80004d8 <__aeabi_dmul>
 8007f04:	a370      	add	r3, pc, #448	; (adr r3, 80080c8 <__ieee754_pow+0x708>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f92f 	bl	800016c <__adddf3>
 8007f0e:	4622      	mov	r2, r4
 8007f10:	462b      	mov	r3, r5
 8007f12:	f7f8 fae1 	bl	80004d8 <__aeabi_dmul>
 8007f16:	a36e      	add	r3, pc, #440	; (adr r3, 80080d0 <__ieee754_pow+0x710>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f926 	bl	800016c <__adddf3>
 8007f20:	4622      	mov	r2, r4
 8007f22:	4606      	mov	r6, r0
 8007f24:	460f      	mov	r7, r1
 8007f26:	462b      	mov	r3, r5
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7f8 fad4 	bl	80004d8 <__aeabi_dmul>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4630      	mov	r0, r6
 8007f36:	4639      	mov	r1, r7
 8007f38:	f7f8 face 	bl	80004d8 <__aeabi_dmul>
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	460d      	mov	r5, r1
 8007f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f44:	4642      	mov	r2, r8
 8007f46:	464b      	mov	r3, r9
 8007f48:	f7f8 f910 	bl	800016c <__adddf3>
 8007f4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f50:	f7f8 fac2 	bl	80004d8 <__aeabi_dmul>
 8007f54:	4622      	mov	r2, r4
 8007f56:	462b      	mov	r3, r5
 8007f58:	f7f8 f908 	bl	800016c <__adddf3>
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460f      	mov	r7, r1
 8007f62:	464b      	mov	r3, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 fab6 	bl	80004d8 <__aeabi_dmul>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4b66      	ldr	r3, [pc, #408]	; (8008108 <__ieee754_pow+0x748>)
 8007f70:	4682      	mov	sl, r0
 8007f72:	468b      	mov	fp, r1
 8007f74:	f7f8 f8fa 	bl	800016c <__adddf3>
 8007f78:	4632      	mov	r2, r6
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	f7f8 f8f6 	bl	800016c <__adddf3>
 8007f80:	2400      	movs	r4, #0
 8007f82:	460d      	mov	r5, r1
 8007f84:	4622      	mov	r2, r4
 8007f86:	460b      	mov	r3, r1
 8007f88:	4640      	mov	r0, r8
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	f7f8 faa4 	bl	80004d8 <__aeabi_dmul>
 8007f90:	2200      	movs	r2, #0
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	4620      	mov	r0, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4b5b      	ldr	r3, [pc, #364]	; (8008108 <__ieee754_pow+0x748>)
 8007f9c:	f7f8 f8e4 	bl	8000168 <__aeabi_dsub>
 8007fa0:	4652      	mov	r2, sl
 8007fa2:	465b      	mov	r3, fp
 8007fa4:	f7f8 f8e0 	bl	8000168 <__aeabi_dsub>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f8da 	bl	8000168 <__aeabi_dsub>
 8007fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fb8:	f7f8 fa8e 	bl	80004d8 <__aeabi_dmul>
 8007fbc:	4622      	mov	r2, r4
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fc6:	462b      	mov	r3, r5
 8007fc8:	f7f8 fa86 	bl	80004d8 <__aeabi_dmul>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 f8ca 	bl	800016c <__adddf3>
 8007fd8:	2400      	movs	r4, #0
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	f7f8 f8c1 	bl	800016c <__adddf3>
 8007fea:	a33b      	add	r3, pc, #236	; (adr r3, 80080d8 <__ieee754_pow+0x718>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	f7f8 fa70 	bl	80004d8 <__aeabi_dmul>
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f8b0 	bl	8000168 <__aeabi_dsub>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 f8aa 	bl	8000168 <__aeabi_dsub>
 8008014:	a332      	add	r3, pc, #200	; (adr r3, 80080e0 <__ieee754_pow+0x720>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 fa5d 	bl	80004d8 <__aeabi_dmul>
 800801e:	a332      	add	r3, pc, #200	; (adr r3, 80080e8 <__ieee754_pow+0x728>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	4606      	mov	r6, r0
 8008026:	460f      	mov	r7, r1
 8008028:	4620      	mov	r0, r4
 800802a:	4629      	mov	r1, r5
 800802c:	f7f8 fa54 	bl	80004d8 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4630      	mov	r0, r6
 8008036:	4639      	mov	r1, r7
 8008038:	f7f8 f898 	bl	800016c <__adddf3>
 800803c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800803e:	4b33      	ldr	r3, [pc, #204]	; (800810c <__ieee754_pow+0x74c>)
 8008040:	f04f 0a00 	mov.w	sl, #0
 8008044:	4413      	add	r3, r2
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f88f 	bl	800016c <__adddf3>
 800804e:	4680      	mov	r8, r0
 8008050:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008052:	4689      	mov	r9, r1
 8008054:	f7f8 f9d6 	bl	8000404 <__aeabi_i2d>
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800805e:	4b2c      	ldr	r3, [pc, #176]	; (8008110 <__ieee754_pow+0x750>)
 8008060:	4413      	add	r3, r2
 8008062:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008066:	4642      	mov	r2, r8
 8008068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800806c:	464b      	mov	r3, r9
 800806e:	f7f8 f87d 	bl	800016c <__adddf3>
 8008072:	4632      	mov	r2, r6
 8008074:	463b      	mov	r3, r7
 8008076:	f7f8 f879 	bl	800016c <__adddf3>
 800807a:	4622      	mov	r2, r4
 800807c:	462b      	mov	r3, r5
 800807e:	f7f8 f875 	bl	800016c <__adddf3>
 8008082:	4622      	mov	r2, r4
 8008084:	462b      	mov	r3, r5
 8008086:	4650      	mov	r0, sl
 8008088:	468b      	mov	fp, r1
 800808a:	f7f8 f86d 	bl	8000168 <__aeabi_dsub>
 800808e:	4632      	mov	r2, r6
 8008090:	463b      	mov	r3, r7
 8008092:	f7f8 f869 	bl	8000168 <__aeabi_dsub>
 8008096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800809a:	f7f8 f865 	bl	8000168 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	e60d      	b.n	8007cc4 <__ieee754_pow+0x304>
 80080a8:	4a454eef 	.word	0x4a454eef
 80080ac:	3fca7e28 	.word	0x3fca7e28
 80080b0:	93c9db65 	.word	0x93c9db65
 80080b4:	3fcd864a 	.word	0x3fcd864a
 80080b8:	a91d4101 	.word	0xa91d4101
 80080bc:	3fd17460 	.word	0x3fd17460
 80080c0:	518f264d 	.word	0x518f264d
 80080c4:	3fd55555 	.word	0x3fd55555
 80080c8:	db6fabff 	.word	0xdb6fabff
 80080cc:	3fdb6db6 	.word	0x3fdb6db6
 80080d0:	33333303 	.word	0x33333303
 80080d4:	3fe33333 	.word	0x3fe33333
 80080d8:	e0000000 	.word	0xe0000000
 80080dc:	3feec709 	.word	0x3feec709
 80080e0:	dc3a03fd 	.word	0xdc3a03fd
 80080e4:	3feec709 	.word	0x3feec709
 80080e8:	145b01f5 	.word	0x145b01f5
 80080ec:	be3e2fe0 	.word	0xbe3e2fe0
 80080f0:	7ff00000 	.word	0x7ff00000
 80080f4:	43400000 	.word	0x43400000
 80080f8:	0003988e 	.word	0x0003988e
 80080fc:	000bb679 	.word	0x000bb679
 8008100:	0800c1c0 	.word	0x0800c1c0
 8008104:	3ff00000 	.word	0x3ff00000
 8008108:	40080000 	.word	0x40080000
 800810c:	0800c1e0 	.word	0x0800c1e0
 8008110:	0800c1d0 	.word	0x0800c1d0
 8008114:	2601      	movs	r6, #1
 8008116:	e66a      	b.n	8007dee <__ieee754_pow+0x42e>
 8008118:	a39d      	add	r3, pc, #628	; (adr r3, 8008390 <__ieee754_pow+0x9d0>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	4640      	mov	r0, r8
 8008120:	4649      	mov	r1, r9
 8008122:	f7f8 f823 	bl	800016c <__adddf3>
 8008126:	4622      	mov	r2, r4
 8008128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800812c:	462b      	mov	r3, r5
 800812e:	4650      	mov	r0, sl
 8008130:	4639      	mov	r1, r7
 8008132:	f7f8 f819 	bl	8000168 <__aeabi_dsub>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800813e:	f7f8 fc5b 	bl	80009f8 <__aeabi_dcmpgt>
 8008142:	2800      	cmp	r0, #0
 8008144:	f47f ae09 	bne.w	8007d5a <__ieee754_pow+0x39a>
 8008148:	4aa3      	ldr	r2, [pc, #652]	; (80083d8 <__ieee754_pow+0xa18>)
 800814a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800814e:	4293      	cmp	r3, r2
 8008150:	f340 8101 	ble.w	8008356 <__ieee754_pow+0x996>
 8008154:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008158:	2000      	movs	r0, #0
 800815a:	151b      	asrs	r3, r3, #20
 800815c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008160:	fa4a f303 	asr.w	r3, sl, r3
 8008164:	4433      	add	r3, r6
 8008166:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800816a:	4f9c      	ldr	r7, [pc, #624]	; (80083dc <__ieee754_pow+0xa1c>)
 800816c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008170:	4117      	asrs	r7, r2
 8008172:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008176:	ea23 0107 	bic.w	r1, r3, r7
 800817a:	f1c2 0214 	rsb	r2, r2, #20
 800817e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008182:	460b      	mov	r3, r1
 8008184:	fa4a fa02 	asr.w	sl, sl, r2
 8008188:	2e00      	cmp	r6, #0
 800818a:	4602      	mov	r2, r0
 800818c:	4629      	mov	r1, r5
 800818e:	4620      	mov	r0, r4
 8008190:	bfb8      	it	lt
 8008192:	f1ca 0a00 	rsblt	sl, sl, #0
 8008196:	f7f7 ffe7 	bl	8000168 <__aeabi_dsub>
 800819a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800819e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a2:	2400      	movs	r4, #0
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	f7f7 ffe0 	bl	800016c <__adddf3>
 80081ac:	a37a      	add	r3, pc, #488	; (adr r3, 8008398 <__ieee754_pow+0x9d8>)
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	4620      	mov	r0, r4
 80081b4:	460d      	mov	r5, r1
 80081b6:	f7f8 f98f 	bl	80004d8 <__aeabi_dmul>
 80081ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081be:	4606      	mov	r6, r0
 80081c0:	460f      	mov	r7, r1
 80081c2:	4620      	mov	r0, r4
 80081c4:	4629      	mov	r1, r5
 80081c6:	f7f7 ffcf 	bl	8000168 <__aeabi_dsub>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f7 ffc9 	bl	8000168 <__aeabi_dsub>
 80081d6:	a372      	add	r3, pc, #456	; (adr r3, 80083a0 <__ieee754_pow+0x9e0>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f7f8 f97c 	bl	80004d8 <__aeabi_dmul>
 80081e0:	a371      	add	r3, pc, #452	; (adr r3, 80083a8 <__ieee754_pow+0x9e8>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	4680      	mov	r8, r0
 80081e8:	4689      	mov	r9, r1
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f8 f973 	bl	80004d8 <__aeabi_dmul>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4640      	mov	r0, r8
 80081f8:	4649      	mov	r1, r9
 80081fa:	f7f7 ffb7 	bl	800016c <__adddf3>
 80081fe:	4604      	mov	r4, r0
 8008200:	460d      	mov	r5, r1
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4630      	mov	r0, r6
 8008208:	4639      	mov	r1, r7
 800820a:	f7f7 ffaf 	bl	800016c <__adddf3>
 800820e:	4632      	mov	r2, r6
 8008210:	463b      	mov	r3, r7
 8008212:	4680      	mov	r8, r0
 8008214:	4689      	mov	r9, r1
 8008216:	f7f7 ffa7 	bl	8000168 <__aeabi_dsub>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f7 ffa1 	bl	8000168 <__aeabi_dsub>
 8008226:	4642      	mov	r2, r8
 8008228:	4606      	mov	r6, r0
 800822a:	460f      	mov	r7, r1
 800822c:	464b      	mov	r3, r9
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	f7f8 f951 	bl	80004d8 <__aeabi_dmul>
 8008236:	a35e      	add	r3, pc, #376	; (adr r3, 80083b0 <__ieee754_pow+0x9f0>)
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	4604      	mov	r4, r0
 800823e:	460d      	mov	r5, r1
 8008240:	f7f8 f94a 	bl	80004d8 <__aeabi_dmul>
 8008244:	a35c      	add	r3, pc, #368	; (adr r3, 80083b8 <__ieee754_pow+0x9f8>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f7f7 ff8d 	bl	8000168 <__aeabi_dsub>
 800824e:	4622      	mov	r2, r4
 8008250:	462b      	mov	r3, r5
 8008252:	f7f8 f941 	bl	80004d8 <__aeabi_dmul>
 8008256:	a35a      	add	r3, pc, #360	; (adr r3, 80083c0 <__ieee754_pow+0xa00>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f7 ff86 	bl	800016c <__adddf3>
 8008260:	4622      	mov	r2, r4
 8008262:	462b      	mov	r3, r5
 8008264:	f7f8 f938 	bl	80004d8 <__aeabi_dmul>
 8008268:	a357      	add	r3, pc, #348	; (adr r3, 80083c8 <__ieee754_pow+0xa08>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f7f7 ff7b 	bl	8000168 <__aeabi_dsub>
 8008272:	4622      	mov	r2, r4
 8008274:	462b      	mov	r3, r5
 8008276:	f7f8 f92f 	bl	80004d8 <__aeabi_dmul>
 800827a:	a355      	add	r3, pc, #340	; (adr r3, 80083d0 <__ieee754_pow+0xa10>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f7 ff74 	bl	800016c <__adddf3>
 8008284:	4622      	mov	r2, r4
 8008286:	462b      	mov	r3, r5
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4640      	mov	r0, r8
 8008292:	4649      	mov	r1, r9
 8008294:	f7f7 ff68 	bl	8000168 <__aeabi_dsub>
 8008298:	4604      	mov	r4, r0
 800829a:	460d      	mov	r5, r1
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	f7f8 f918 	bl	80004d8 <__aeabi_dmul>
 80082a8:	2200      	movs	r2, #0
 80082aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f7 ff57 	bl	8000168 <__aeabi_dsub>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c2:	f7f8 fa33 	bl	800072c <__aeabi_ddiv>
 80082c6:	4632      	mov	r2, r6
 80082c8:	4604      	mov	r4, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	463b      	mov	r3, r7
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	f7f8 f901 	bl	80004d8 <__aeabi_dmul>
 80082d6:	4632      	mov	r2, r6
 80082d8:	463b      	mov	r3, r7
 80082da:	f7f7 ff47 	bl	800016c <__adddf3>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4620      	mov	r0, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	f7f7 ff3f 	bl	8000168 <__aeabi_dsub>
 80082ea:	4642      	mov	r2, r8
 80082ec:	464b      	mov	r3, r9
 80082ee:	f7f7 ff3b 	bl	8000168 <__aeabi_dsub>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	2000      	movs	r0, #0
 80082f8:	4939      	ldr	r1, [pc, #228]	; (80083e0 <__ieee754_pow+0xa20>)
 80082fa:	f7f7 ff35 	bl	8000168 <__aeabi_dsub>
 80082fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008302:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008306:	da29      	bge.n	800835c <__ieee754_pow+0x99c>
 8008308:	4652      	mov	r2, sl
 800830a:	f000 fe95 	bl	8009038 <scalbn>
 800830e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008312:	f7ff bbfe 	b.w	8007b12 <__ieee754_pow+0x152>
 8008316:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <__ieee754_pow+0xa24>)
 8008318:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800831c:	429f      	cmp	r7, r3
 800831e:	f77f af13 	ble.w	8008148 <__ieee754_pow+0x788>
 8008322:	4b31      	ldr	r3, [pc, #196]	; (80083e8 <__ieee754_pow+0xa28>)
 8008324:	440b      	add	r3, r1
 8008326:	4303      	orrs	r3, r0
 8008328:	d009      	beq.n	800833e <__ieee754_pow+0x97e>
 800832a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800832e:	2200      	movs	r2, #0
 8008330:	2300      	movs	r3, #0
 8008332:	f7f8 fb43 	bl	80009bc <__aeabi_dcmplt>
 8008336:	3800      	subs	r0, #0
 8008338:	bf18      	it	ne
 800833a:	2001      	movne	r0, #1
 800833c:	e453      	b.n	8007be6 <__ieee754_pow+0x226>
 800833e:	4622      	mov	r2, r4
 8008340:	462b      	mov	r3, r5
 8008342:	f7f7 ff11 	bl	8000168 <__aeabi_dsub>
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	f7f8 fb4b 	bl	80009e4 <__aeabi_dcmpge>
 800834e:	2800      	cmp	r0, #0
 8008350:	f43f aefa 	beq.w	8008148 <__ieee754_pow+0x788>
 8008354:	e7e9      	b.n	800832a <__ieee754_pow+0x96a>
 8008356:	f04f 0a00 	mov.w	sl, #0
 800835a:	e720      	b.n	800819e <__ieee754_pow+0x7de>
 800835c:	4621      	mov	r1, r4
 800835e:	e7d6      	b.n	800830e <__ieee754_pow+0x94e>
 8008360:	f04f 0b00 	mov.w	fp, #0
 8008364:	f8df c078 	ldr.w	ip, [pc, #120]	; 80083e0 <__ieee754_pow+0xa20>
 8008368:	f7ff bbba 	b.w	8007ae0 <__ieee754_pow+0x120>
 800836c:	f04f 0b00 	mov.w	fp, #0
 8008370:	f04f 0c00 	mov.w	ip, #0
 8008374:	f7ff bbb4 	b.w	8007ae0 <__ieee754_pow+0x120>
 8008378:	4640      	mov	r0, r8
 800837a:	4649      	mov	r1, r9
 800837c:	f7ff bb3d 	b.w	80079fa <__ieee754_pow+0x3a>
 8008380:	9200      	str	r2, [sp, #0]
 8008382:	f7ff bb89 	b.w	8007a98 <__ieee754_pow+0xd8>
 8008386:	2300      	movs	r3, #0
 8008388:	f7ff bb73 	b.w	8007a72 <__ieee754_pow+0xb2>
 800838c:	f3af 8000 	nop.w
 8008390:	652b82fe 	.word	0x652b82fe
 8008394:	3c971547 	.word	0x3c971547
 8008398:	00000000 	.word	0x00000000
 800839c:	3fe62e43 	.word	0x3fe62e43
 80083a0:	fefa39ef 	.word	0xfefa39ef
 80083a4:	3fe62e42 	.word	0x3fe62e42
 80083a8:	0ca86c39 	.word	0x0ca86c39
 80083ac:	be205c61 	.word	0xbe205c61
 80083b0:	72bea4d0 	.word	0x72bea4d0
 80083b4:	3e663769 	.word	0x3e663769
 80083b8:	c5d26bf1 	.word	0xc5d26bf1
 80083bc:	3ebbbd41 	.word	0x3ebbbd41
 80083c0:	af25de2c 	.word	0xaf25de2c
 80083c4:	3f11566a 	.word	0x3f11566a
 80083c8:	16bebd93 	.word	0x16bebd93
 80083cc:	3f66c16c 	.word	0x3f66c16c
 80083d0:	5555553e 	.word	0x5555553e
 80083d4:	3fc55555 	.word	0x3fc55555
 80083d8:	3fe00000 	.word	0x3fe00000
 80083dc:	000fffff 	.word	0x000fffff
 80083e0:	3ff00000 	.word	0x3ff00000
 80083e4:	4090cbff 	.word	0x4090cbff
 80083e8:	3f6f3400 	.word	0x3f6f3400

080083ec <__ieee754_sqrt>:
 80083ec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008548 <__ieee754_sqrt+0x15c>
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	ea3c 0c01 	bics.w	ip, ip, r1
 80083f8:	4606      	mov	r6, r0
 80083fa:	460d      	mov	r5, r1
 80083fc:	460c      	mov	r4, r1
 80083fe:	460a      	mov	r2, r1
 8008400:	4607      	mov	r7, r0
 8008402:	4603      	mov	r3, r0
 8008404:	d10f      	bne.n	8008426 <__ieee754_sqrt+0x3a>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	f7f8 f865 	bl	80004d8 <__aeabi_dmul>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4630      	mov	r0, r6
 8008414:	4629      	mov	r1, r5
 8008416:	f7f7 fea9 	bl	800016c <__adddf3>
 800841a:	4606      	mov	r6, r0
 800841c:	460d      	mov	r5, r1
 800841e:	4630      	mov	r0, r6
 8008420:	4629      	mov	r1, r5
 8008422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008426:	2900      	cmp	r1, #0
 8008428:	dc0e      	bgt.n	8008448 <__ieee754_sqrt+0x5c>
 800842a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800842e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008432:	d0f4      	beq.n	800841e <__ieee754_sqrt+0x32>
 8008434:	b141      	cbz	r1, 8008448 <__ieee754_sqrt+0x5c>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	f7f7 fe95 	bl	8000168 <__aeabi_dsub>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	f7f8 f973 	bl	800072c <__aeabi_ddiv>
 8008446:	e7e8      	b.n	800841a <__ieee754_sqrt+0x2e>
 8008448:	1521      	asrs	r1, r4, #20
 800844a:	d075      	beq.n	8008538 <__ieee754_sqrt+0x14c>
 800844c:	07cc      	lsls	r4, r1, #31
 800844e:	f04f 0400 	mov.w	r4, #0
 8008452:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008456:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800845a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800845e:	bf5e      	ittt	pl
 8008460:	0fd9      	lsrpl	r1, r3, #31
 8008462:	005b      	lslpl	r3, r3, #1
 8008464:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008468:	0fd9      	lsrs	r1, r3, #31
 800846a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800846e:	2516      	movs	r5, #22
 8008470:	4620      	mov	r0, r4
 8008472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008476:	107f      	asrs	r7, r7, #1
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	1846      	adds	r6, r0, r1
 800847c:	4296      	cmp	r6, r2
 800847e:	bfde      	ittt	le
 8008480:	1b92      	suble	r2, r2, r6
 8008482:	1870      	addle	r0, r6, r1
 8008484:	1864      	addle	r4, r4, r1
 8008486:	0052      	lsls	r2, r2, #1
 8008488:	3d01      	subs	r5, #1
 800848a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800848e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008492:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008496:	d1f0      	bne.n	800847a <__ieee754_sqrt+0x8e>
 8008498:	4629      	mov	r1, r5
 800849a:	f04f 0e20 	mov.w	lr, #32
 800849e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80084a2:	4282      	cmp	r2, r0
 80084a4:	eb06 0c05 	add.w	ip, r6, r5
 80084a8:	dc02      	bgt.n	80084b0 <__ieee754_sqrt+0xc4>
 80084aa:	d113      	bne.n	80084d4 <__ieee754_sqrt+0xe8>
 80084ac:	459c      	cmp	ip, r3
 80084ae:	d811      	bhi.n	80084d4 <__ieee754_sqrt+0xe8>
 80084b0:	f1bc 0f00 	cmp.w	ip, #0
 80084b4:	eb0c 0506 	add.w	r5, ip, r6
 80084b8:	da43      	bge.n	8008542 <__ieee754_sqrt+0x156>
 80084ba:	2d00      	cmp	r5, #0
 80084bc:	db41      	blt.n	8008542 <__ieee754_sqrt+0x156>
 80084be:	f100 0801 	add.w	r8, r0, #1
 80084c2:	1a12      	subs	r2, r2, r0
 80084c4:	4640      	mov	r0, r8
 80084c6:	459c      	cmp	ip, r3
 80084c8:	bf88      	it	hi
 80084ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80084ce:	eba3 030c 	sub.w	r3, r3, ip
 80084d2:	4431      	add	r1, r6
 80084d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80084d8:	f1be 0e01 	subs.w	lr, lr, #1
 80084dc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80084e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80084e8:	d1db      	bne.n	80084a2 <__ieee754_sqrt+0xb6>
 80084ea:	4313      	orrs	r3, r2
 80084ec:	d006      	beq.n	80084fc <__ieee754_sqrt+0x110>
 80084ee:	1c48      	adds	r0, r1, #1
 80084f0:	bf0b      	itete	eq
 80084f2:	4671      	moveq	r1, lr
 80084f4:	3101      	addne	r1, #1
 80084f6:	3401      	addeq	r4, #1
 80084f8:	f021 0101 	bicne.w	r1, r1, #1
 80084fc:	1063      	asrs	r3, r4, #1
 80084fe:	0849      	lsrs	r1, r1, #1
 8008500:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008504:	07e2      	lsls	r2, r4, #31
 8008506:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800850a:	bf48      	it	mi
 800850c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008510:	460e      	mov	r6, r1
 8008512:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008516:	e782      	b.n	800841e <__ieee754_sqrt+0x32>
 8008518:	0ada      	lsrs	r2, r3, #11
 800851a:	3815      	subs	r0, #21
 800851c:	055b      	lsls	r3, r3, #21
 800851e:	2a00      	cmp	r2, #0
 8008520:	d0fa      	beq.n	8008518 <__ieee754_sqrt+0x12c>
 8008522:	02d5      	lsls	r5, r2, #11
 8008524:	d50a      	bpl.n	800853c <__ieee754_sqrt+0x150>
 8008526:	f1c1 0420 	rsb	r4, r1, #32
 800852a:	fa23 f404 	lsr.w	r4, r3, r4
 800852e:	1e4d      	subs	r5, r1, #1
 8008530:	408b      	lsls	r3, r1
 8008532:	4322      	orrs	r2, r4
 8008534:	1b41      	subs	r1, r0, r5
 8008536:	e789      	b.n	800844c <__ieee754_sqrt+0x60>
 8008538:	4608      	mov	r0, r1
 800853a:	e7f0      	b.n	800851e <__ieee754_sqrt+0x132>
 800853c:	0052      	lsls	r2, r2, #1
 800853e:	3101      	adds	r1, #1
 8008540:	e7ef      	b.n	8008522 <__ieee754_sqrt+0x136>
 8008542:	4680      	mov	r8, r0
 8008544:	e7bd      	b.n	80084c2 <__ieee754_sqrt+0xd6>
 8008546:	bf00      	nop
 8008548:	7ff00000 	.word	0x7ff00000

0800854c <__ieee754_rem_pio2f>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	4aa0      	ldr	r2, [pc, #640]	; (80087d4 <__ieee754_rem_pio2f+0x288>)
 8008552:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008556:	4296      	cmp	r6, r2
 8008558:	460c      	mov	r4, r1
 800855a:	4682      	mov	sl, r0
 800855c:	b087      	sub	sp, #28
 800855e:	dc04      	bgt.n	800856a <__ieee754_rem_pio2f+0x1e>
 8008560:	2300      	movs	r3, #0
 8008562:	6008      	str	r0, [r1, #0]
 8008564:	604b      	str	r3, [r1, #4]
 8008566:	2500      	movs	r5, #0
 8008568:	e01a      	b.n	80085a0 <__ieee754_rem_pio2f+0x54>
 800856a:	4a9b      	ldr	r2, [pc, #620]	; (80087d8 <__ieee754_rem_pio2f+0x28c>)
 800856c:	4296      	cmp	r6, r2
 800856e:	dc4b      	bgt.n	8008608 <__ieee754_rem_pio2f+0xbc>
 8008570:	2800      	cmp	r0, #0
 8008572:	499a      	ldr	r1, [pc, #616]	; (80087dc <__ieee754_rem_pio2f+0x290>)
 8008574:	4f9a      	ldr	r7, [pc, #616]	; (80087e0 <__ieee754_rem_pio2f+0x294>)
 8008576:	f026 060f 	bic.w	r6, r6, #15
 800857a:	dd23      	ble.n	80085c4 <__ieee754_rem_pio2f+0x78>
 800857c:	f7f8 faf8 	bl	8000b70 <__aeabi_fsub>
 8008580:	42be      	cmp	r6, r7
 8008582:	4605      	mov	r5, r0
 8008584:	d010      	beq.n	80085a8 <__ieee754_rem_pio2f+0x5c>
 8008586:	4997      	ldr	r1, [pc, #604]	; (80087e4 <__ieee754_rem_pio2f+0x298>)
 8008588:	f7f8 faf2 	bl	8000b70 <__aeabi_fsub>
 800858c:	4601      	mov	r1, r0
 800858e:	6020      	str	r0, [r4, #0]
 8008590:	4628      	mov	r0, r5
 8008592:	f7f8 faed 	bl	8000b70 <__aeabi_fsub>
 8008596:	4993      	ldr	r1, [pc, #588]	; (80087e4 <__ieee754_rem_pio2f+0x298>)
 8008598:	f7f8 faea 	bl	8000b70 <__aeabi_fsub>
 800859c:	2501      	movs	r5, #1
 800859e:	6060      	str	r0, [r4, #4]
 80085a0:	4628      	mov	r0, r5
 80085a2:	b007      	add	sp, #28
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	498f      	ldr	r1, [pc, #572]	; (80087e8 <__ieee754_rem_pio2f+0x29c>)
 80085aa:	f7f8 fae1 	bl	8000b70 <__aeabi_fsub>
 80085ae:	498f      	ldr	r1, [pc, #572]	; (80087ec <__ieee754_rem_pio2f+0x2a0>)
 80085b0:	4605      	mov	r5, r0
 80085b2:	f7f8 fadd 	bl	8000b70 <__aeabi_fsub>
 80085b6:	4601      	mov	r1, r0
 80085b8:	6020      	str	r0, [r4, #0]
 80085ba:	4628      	mov	r0, r5
 80085bc:	f7f8 fad8 	bl	8000b70 <__aeabi_fsub>
 80085c0:	498a      	ldr	r1, [pc, #552]	; (80087ec <__ieee754_rem_pio2f+0x2a0>)
 80085c2:	e7e9      	b.n	8008598 <__ieee754_rem_pio2f+0x4c>
 80085c4:	f7f8 fad6 	bl	8000b74 <__addsf3>
 80085c8:	42be      	cmp	r6, r7
 80085ca:	4605      	mov	r5, r0
 80085cc:	d00e      	beq.n	80085ec <__ieee754_rem_pio2f+0xa0>
 80085ce:	4985      	ldr	r1, [pc, #532]	; (80087e4 <__ieee754_rem_pio2f+0x298>)
 80085d0:	f7f8 fad0 	bl	8000b74 <__addsf3>
 80085d4:	4601      	mov	r1, r0
 80085d6:	6020      	str	r0, [r4, #0]
 80085d8:	4628      	mov	r0, r5
 80085da:	f7f8 fac9 	bl	8000b70 <__aeabi_fsub>
 80085de:	4981      	ldr	r1, [pc, #516]	; (80087e4 <__ieee754_rem_pio2f+0x298>)
 80085e0:	f7f8 fac8 	bl	8000b74 <__addsf3>
 80085e4:	f04f 35ff 	mov.w	r5, #4294967295
 80085e8:	6060      	str	r0, [r4, #4]
 80085ea:	e7d9      	b.n	80085a0 <__ieee754_rem_pio2f+0x54>
 80085ec:	497e      	ldr	r1, [pc, #504]	; (80087e8 <__ieee754_rem_pio2f+0x29c>)
 80085ee:	f7f8 fac1 	bl	8000b74 <__addsf3>
 80085f2:	497e      	ldr	r1, [pc, #504]	; (80087ec <__ieee754_rem_pio2f+0x2a0>)
 80085f4:	4605      	mov	r5, r0
 80085f6:	f7f8 fabd 	bl	8000b74 <__addsf3>
 80085fa:	4601      	mov	r1, r0
 80085fc:	6020      	str	r0, [r4, #0]
 80085fe:	4628      	mov	r0, r5
 8008600:	f7f8 fab6 	bl	8000b70 <__aeabi_fsub>
 8008604:	4979      	ldr	r1, [pc, #484]	; (80087ec <__ieee754_rem_pio2f+0x2a0>)
 8008606:	e7eb      	b.n	80085e0 <__ieee754_rem_pio2f+0x94>
 8008608:	4a79      	ldr	r2, [pc, #484]	; (80087f0 <__ieee754_rem_pio2f+0x2a4>)
 800860a:	4296      	cmp	r6, r2
 800860c:	f300 8091 	bgt.w	8008732 <__ieee754_rem_pio2f+0x1e6>
 8008610:	f000 fd90 	bl	8009134 <fabsf>
 8008614:	4977      	ldr	r1, [pc, #476]	; (80087f4 <__ieee754_rem_pio2f+0x2a8>)
 8008616:	4607      	mov	r7, r0
 8008618:	f7f8 fbb4 	bl	8000d84 <__aeabi_fmul>
 800861c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008620:	f7f8 faa8 	bl	8000b74 <__addsf3>
 8008624:	f7f8 fd74 	bl	8001110 <__aeabi_f2iz>
 8008628:	4605      	mov	r5, r0
 800862a:	f7f8 fb57 	bl	8000cdc <__aeabi_i2f>
 800862e:	496b      	ldr	r1, [pc, #428]	; (80087dc <__ieee754_rem_pio2f+0x290>)
 8008630:	4681      	mov	r9, r0
 8008632:	f7f8 fba7 	bl	8000d84 <__aeabi_fmul>
 8008636:	4601      	mov	r1, r0
 8008638:	4638      	mov	r0, r7
 800863a:	f7f8 fa99 	bl	8000b70 <__aeabi_fsub>
 800863e:	4969      	ldr	r1, [pc, #420]	; (80087e4 <__ieee754_rem_pio2f+0x298>)
 8008640:	4680      	mov	r8, r0
 8008642:	4648      	mov	r0, r9
 8008644:	f7f8 fb9e 	bl	8000d84 <__aeabi_fmul>
 8008648:	2d1f      	cmp	r5, #31
 800864a:	4607      	mov	r7, r0
 800864c:	dc0c      	bgt.n	8008668 <__ieee754_rem_pio2f+0x11c>
 800864e:	4a6a      	ldr	r2, [pc, #424]	; (80087f8 <__ieee754_rem_pio2f+0x2ac>)
 8008650:	1e69      	subs	r1, r5, #1
 8008652:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008656:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800865a:	4293      	cmp	r3, r2
 800865c:	d004      	beq.n	8008668 <__ieee754_rem_pio2f+0x11c>
 800865e:	4639      	mov	r1, r7
 8008660:	4640      	mov	r0, r8
 8008662:	f7f8 fa85 	bl	8000b70 <__aeabi_fsub>
 8008666:	e00b      	b.n	8008680 <__ieee754_rem_pio2f+0x134>
 8008668:	4639      	mov	r1, r7
 800866a:	4640      	mov	r0, r8
 800866c:	f7f8 fa80 	bl	8000b70 <__aeabi_fsub>
 8008670:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008674:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8008678:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800867c:	2e08      	cmp	r6, #8
 800867e:	dc01      	bgt.n	8008684 <__ieee754_rem_pio2f+0x138>
 8008680:	6020      	str	r0, [r4, #0]
 8008682:	e026      	b.n	80086d2 <__ieee754_rem_pio2f+0x186>
 8008684:	4958      	ldr	r1, [pc, #352]	; (80087e8 <__ieee754_rem_pio2f+0x29c>)
 8008686:	4648      	mov	r0, r9
 8008688:	f7f8 fb7c 	bl	8000d84 <__aeabi_fmul>
 800868c:	4607      	mov	r7, r0
 800868e:	4601      	mov	r1, r0
 8008690:	4640      	mov	r0, r8
 8008692:	f7f8 fa6d 	bl	8000b70 <__aeabi_fsub>
 8008696:	4601      	mov	r1, r0
 8008698:	4606      	mov	r6, r0
 800869a:	4640      	mov	r0, r8
 800869c:	f7f8 fa68 	bl	8000b70 <__aeabi_fsub>
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f8 fa65 	bl	8000b70 <__aeabi_fsub>
 80086a6:	4607      	mov	r7, r0
 80086a8:	4950      	ldr	r1, [pc, #320]	; (80087ec <__ieee754_rem_pio2f+0x2a0>)
 80086aa:	4648      	mov	r0, r9
 80086ac:	f7f8 fb6a 	bl	8000d84 <__aeabi_fmul>
 80086b0:	4639      	mov	r1, r7
 80086b2:	f7f8 fa5d 	bl	8000b70 <__aeabi_fsub>
 80086b6:	4601      	mov	r1, r0
 80086b8:	4607      	mov	r7, r0
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7f8 fa58 	bl	8000b70 <__aeabi_fsub>
 80086c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80086c4:	ebab 0b03 	sub.w	fp, fp, r3
 80086c8:	f1bb 0f19 	cmp.w	fp, #25
 80086cc:	dc16      	bgt.n	80086fc <__ieee754_rem_pio2f+0x1b0>
 80086ce:	46b0      	mov	r8, r6
 80086d0:	6020      	str	r0, [r4, #0]
 80086d2:	6826      	ldr	r6, [r4, #0]
 80086d4:	4640      	mov	r0, r8
 80086d6:	4631      	mov	r1, r6
 80086d8:	f7f8 fa4a 	bl	8000b70 <__aeabi_fsub>
 80086dc:	4639      	mov	r1, r7
 80086de:	f7f8 fa47 	bl	8000b70 <__aeabi_fsub>
 80086e2:	f1ba 0f00 	cmp.w	sl, #0
 80086e6:	6060      	str	r0, [r4, #4]
 80086e8:	f6bf af5a 	bge.w	80085a0 <__ieee754_rem_pio2f+0x54>
 80086ec:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80086f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80086f4:	6026      	str	r6, [r4, #0]
 80086f6:	6060      	str	r0, [r4, #4]
 80086f8:	426d      	negs	r5, r5
 80086fa:	e751      	b.n	80085a0 <__ieee754_rem_pio2f+0x54>
 80086fc:	493f      	ldr	r1, [pc, #252]	; (80087fc <__ieee754_rem_pio2f+0x2b0>)
 80086fe:	4648      	mov	r0, r9
 8008700:	f7f8 fb40 	bl	8000d84 <__aeabi_fmul>
 8008704:	4607      	mov	r7, r0
 8008706:	4601      	mov	r1, r0
 8008708:	4630      	mov	r0, r6
 800870a:	f7f8 fa31 	bl	8000b70 <__aeabi_fsub>
 800870e:	4601      	mov	r1, r0
 8008710:	4680      	mov	r8, r0
 8008712:	4630      	mov	r0, r6
 8008714:	f7f8 fa2c 	bl	8000b70 <__aeabi_fsub>
 8008718:	4639      	mov	r1, r7
 800871a:	f7f8 fa29 	bl	8000b70 <__aeabi_fsub>
 800871e:	4606      	mov	r6, r0
 8008720:	4937      	ldr	r1, [pc, #220]	; (8008800 <__ieee754_rem_pio2f+0x2b4>)
 8008722:	4648      	mov	r0, r9
 8008724:	f7f8 fb2e 	bl	8000d84 <__aeabi_fmul>
 8008728:	4631      	mov	r1, r6
 800872a:	f7f8 fa21 	bl	8000b70 <__aeabi_fsub>
 800872e:	4607      	mov	r7, r0
 8008730:	e795      	b.n	800865e <__ieee754_rem_pio2f+0x112>
 8008732:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008736:	db05      	blt.n	8008744 <__ieee754_rem_pio2f+0x1f8>
 8008738:	4601      	mov	r1, r0
 800873a:	f7f8 fa19 	bl	8000b70 <__aeabi_fsub>
 800873e:	6060      	str	r0, [r4, #4]
 8008740:	6020      	str	r0, [r4, #0]
 8008742:	e710      	b.n	8008566 <__ieee754_rem_pio2f+0x1a>
 8008744:	15f7      	asrs	r7, r6, #23
 8008746:	3f86      	subs	r7, #134	; 0x86
 8008748:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800874c:	4630      	mov	r0, r6
 800874e:	f7f8 fcdf 	bl	8001110 <__aeabi_f2iz>
 8008752:	f7f8 fac3 	bl	8000cdc <__aeabi_i2f>
 8008756:	4601      	mov	r1, r0
 8008758:	9003      	str	r0, [sp, #12]
 800875a:	4630      	mov	r0, r6
 800875c:	f7f8 fa08 	bl	8000b70 <__aeabi_fsub>
 8008760:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008764:	f7f8 fb0e 	bl	8000d84 <__aeabi_fmul>
 8008768:	4606      	mov	r6, r0
 800876a:	f7f8 fcd1 	bl	8001110 <__aeabi_f2iz>
 800876e:	f7f8 fab5 	bl	8000cdc <__aeabi_i2f>
 8008772:	4601      	mov	r1, r0
 8008774:	9004      	str	r0, [sp, #16]
 8008776:	4605      	mov	r5, r0
 8008778:	4630      	mov	r0, r6
 800877a:	f7f8 f9f9 	bl	8000b70 <__aeabi_fsub>
 800877e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008782:	f7f8 faff 	bl	8000d84 <__aeabi_fmul>
 8008786:	2100      	movs	r1, #0
 8008788:	9005      	str	r0, [sp, #20]
 800878a:	f7f8 fc8f 	bl	80010ac <__aeabi_fcmpeq>
 800878e:	b1f0      	cbz	r0, 80087ce <__ieee754_rem_pio2f+0x282>
 8008790:	2100      	movs	r1, #0
 8008792:	4628      	mov	r0, r5
 8008794:	f7f8 fc8a 	bl	80010ac <__aeabi_fcmpeq>
 8008798:	2800      	cmp	r0, #0
 800879a:	bf14      	ite	ne
 800879c:	2301      	movne	r3, #1
 800879e:	2302      	moveq	r3, #2
 80087a0:	4a18      	ldr	r2, [pc, #96]	; (8008804 <__ieee754_rem_pio2f+0x2b8>)
 80087a2:	4621      	mov	r1, r4
 80087a4:	9201      	str	r2, [sp, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	a803      	add	r0, sp, #12
 80087aa:	9200      	str	r2, [sp, #0]
 80087ac:	463a      	mov	r2, r7
 80087ae:	f000 f82b 	bl	8008808 <__kernel_rem_pio2f>
 80087b2:	f1ba 0f00 	cmp.w	sl, #0
 80087b6:	4605      	mov	r5, r0
 80087b8:	f6bf aef2 	bge.w	80085a0 <__ieee754_rem_pio2f+0x54>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80087ca:	6063      	str	r3, [r4, #4]
 80087cc:	e794      	b.n	80086f8 <__ieee754_rem_pio2f+0x1ac>
 80087ce:	2303      	movs	r3, #3
 80087d0:	e7e6      	b.n	80087a0 <__ieee754_rem_pio2f+0x254>
 80087d2:	bf00      	nop
 80087d4:	3f490fd8 	.word	0x3f490fd8
 80087d8:	4016cbe3 	.word	0x4016cbe3
 80087dc:	3fc90f80 	.word	0x3fc90f80
 80087e0:	3fc90fd0 	.word	0x3fc90fd0
 80087e4:	37354443 	.word	0x37354443
 80087e8:	37354400 	.word	0x37354400
 80087ec:	2e85a308 	.word	0x2e85a308
 80087f0:	43490f80 	.word	0x43490f80
 80087f4:	3f22f984 	.word	0x3f22f984
 80087f8:	0800c1f0 	.word	0x0800c1f0
 80087fc:	2e85a300 	.word	0x2e85a300
 8008800:	248d3132 	.word	0x248d3132
 8008804:	0800c270 	.word	0x0800c270

08008808 <__kernel_rem_pio2f>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b0db      	sub	sp, #364	; 0x16c
 800880e:	9202      	str	r2, [sp, #8]
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008814:	4bb2      	ldr	r3, [pc, #712]	; (8008ae0 <__kernel_rem_pio2f+0x2d8>)
 8008816:	9005      	str	r0, [sp, #20]
 8008818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881c:	9100      	str	r1, [sp, #0]
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	3b01      	subs	r3, #1
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	1d1a      	adds	r2, r3, #4
 800882a:	f2c0 809b 	blt.w	8008964 <__kernel_rem_pio2f+0x15c>
 800882e:	1edc      	subs	r4, r3, #3
 8008830:	bf48      	it	mi
 8008832:	1d1c      	addmi	r4, r3, #4
 8008834:	10e4      	asrs	r4, r4, #3
 8008836:	2500      	movs	r5, #0
 8008838:	f04f 0b00 	mov.w	fp, #0
 800883c:	1c67      	adds	r7, r4, #1
 800883e:	00fb      	lsls	r3, r7, #3
 8008840:	9306      	str	r3, [sp, #24]
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	9a03      	ldr	r2, [sp, #12]
 8008846:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	eba4 0802 	sub.w	r8, r4, r2
 8008850:	eb03 0902 	add.w	r9, r3, r2
 8008854:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008856:	ae1e      	add	r6, sp, #120	; 0x78
 8008858:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800885c:	454d      	cmp	r5, r9
 800885e:	f340 8083 	ble.w	8008968 <__kernel_rem_pio2f+0x160>
 8008862:	9a04      	ldr	r2, [sp, #16]
 8008864:	ab1e      	add	r3, sp, #120	; 0x78
 8008866:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	2300      	movs	r3, #0
 8008870:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8008874:	9a01      	ldr	r2, [sp, #4]
 8008876:	4591      	cmp	r9, r2
 8008878:	f340 809e 	ble.w	80089b8 <__kernel_rem_pio2f+0x1b0>
 800887c:	4613      	mov	r3, r2
 800887e:	aa0a      	add	r2, sp, #40	; 0x28
 8008880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008884:	9308      	str	r3, [sp, #32]
 8008886:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008888:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800888c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	ac0a      	add	r4, sp, #40	; 0x28
 8008894:	4626      	mov	r6, r4
 8008896:	46c3      	mov	fp, r8
 8008898:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800889c:	ab5a      	add	r3, sp, #360	; 0x168
 800889e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80088a2:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80088a6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80088aa:	f1bb 0f00 	cmp.w	fp, #0
 80088ae:	f300 8088 	bgt.w	80089c2 <__kernel_rem_pio2f+0x1ba>
 80088b2:	4639      	mov	r1, r7
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 fc83 	bl	80091c0 <scalbnf>
 80088ba:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80088be:	4605      	mov	r5, r0
 80088c0:	f7f8 fa60 	bl	8000d84 <__aeabi_fmul>
 80088c4:	f000 fc3a 	bl	800913c <floorf>
 80088c8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80088cc:	f7f8 fa5a 	bl	8000d84 <__aeabi_fmul>
 80088d0:	4601      	mov	r1, r0
 80088d2:	4628      	mov	r0, r5
 80088d4:	f7f8 f94c 	bl	8000b70 <__aeabi_fsub>
 80088d8:	4605      	mov	r5, r0
 80088da:	f7f8 fc19 	bl	8001110 <__aeabi_f2iz>
 80088de:	4606      	mov	r6, r0
 80088e0:	f7f8 f9fc 	bl	8000cdc <__aeabi_i2f>
 80088e4:	4601      	mov	r1, r0
 80088e6:	4628      	mov	r0, r5
 80088e8:	f7f8 f942 	bl	8000b70 <__aeabi_fsub>
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	4681      	mov	r9, r0
 80088f0:	f340 8086 	ble.w	8008a00 <__kernel_rem_pio2f+0x1f8>
 80088f4:	f108 32ff 	add.w	r2, r8, #4294967295
 80088f8:	ab0a      	add	r3, sp, #40	; 0x28
 80088fa:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80088fe:	f1c7 0108 	rsb	r1, r7, #8
 8008902:	fa45 f301 	asr.w	r3, r5, r1
 8008906:	441e      	add	r6, r3
 8008908:	408b      	lsls	r3, r1
 800890a:	1aed      	subs	r5, r5, r3
 800890c:	f1c7 0007 	rsb	r0, r7, #7
 8008910:	ab0a      	add	r3, sp, #40	; 0x28
 8008912:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008916:	4105      	asrs	r5, r0
 8008918:	2d00      	cmp	r5, #0
 800891a:	dd7f      	ble.n	8008a1c <__kernel_rem_pio2f+0x214>
 800891c:	2200      	movs	r2, #0
 800891e:	4692      	mov	sl, r2
 8008920:	3601      	adds	r6, #1
 8008922:	4590      	cmp	r8, r2
 8008924:	f300 80b0 	bgt.w	8008a88 <__kernel_rem_pio2f+0x280>
 8008928:	2f00      	cmp	r7, #0
 800892a:	dd05      	ble.n	8008938 <__kernel_rem_pio2f+0x130>
 800892c:	2f01      	cmp	r7, #1
 800892e:	f000 80bd 	beq.w	8008aac <__kernel_rem_pio2f+0x2a4>
 8008932:	2f02      	cmp	r7, #2
 8008934:	f000 80c5 	beq.w	8008ac2 <__kernel_rem_pio2f+0x2ba>
 8008938:	2d02      	cmp	r5, #2
 800893a:	d16f      	bne.n	8008a1c <__kernel_rem_pio2f+0x214>
 800893c:	4649      	mov	r1, r9
 800893e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008942:	f7f8 f915 	bl	8000b70 <__aeabi_fsub>
 8008946:	4681      	mov	r9, r0
 8008948:	f1ba 0f00 	cmp.w	sl, #0
 800894c:	d066      	beq.n	8008a1c <__kernel_rem_pio2f+0x214>
 800894e:	4639      	mov	r1, r7
 8008950:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008954:	f000 fc34 	bl	80091c0 <scalbnf>
 8008958:	4601      	mov	r1, r0
 800895a:	4648      	mov	r0, r9
 800895c:	f7f8 f908 	bl	8000b70 <__aeabi_fsub>
 8008960:	4681      	mov	r9, r0
 8008962:	e05b      	b.n	8008a1c <__kernel_rem_pio2f+0x214>
 8008964:	2400      	movs	r4, #0
 8008966:	e766      	b.n	8008836 <__kernel_rem_pio2f+0x2e>
 8008968:	eb18 0f05 	cmn.w	r8, r5
 800896c:	d407      	bmi.n	800897e <__kernel_rem_pio2f+0x176>
 800896e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8008972:	f7f8 f9b3 	bl	8000cdc <__aeabi_i2f>
 8008976:	f846 0b04 	str.w	r0, [r6], #4
 800897a:	3501      	adds	r5, #1
 800897c:	e76e      	b.n	800885c <__kernel_rem_pio2f+0x54>
 800897e:	4658      	mov	r0, fp
 8008980:	e7f9      	b.n	8008976 <__kernel_rem_pio2f+0x16e>
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	9b05      	ldr	r3, [sp, #20]
 8008986:	f8da 1000 	ldr.w	r1, [sl]
 800898a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800898e:	f7f8 f9f9 	bl	8000d84 <__aeabi_fmul>
 8008992:	4601      	mov	r1, r0
 8008994:	4630      	mov	r0, r6
 8008996:	f7f8 f8ed 	bl	8000b74 <__addsf3>
 800899a:	4606      	mov	r6, r0
 800899c:	9b07      	ldr	r3, [sp, #28]
 800899e:	f108 0801 	add.w	r8, r8, #1
 80089a2:	9a03      	ldr	r2, [sp, #12]
 80089a4:	f1aa 0a04 	sub.w	sl, sl, #4
 80089a8:	4590      	cmp	r8, r2
 80089aa:	ddea      	ble.n	8008982 <__kernel_rem_pio2f+0x17a>
 80089ac:	f84b 6b04 	str.w	r6, [fp], #4
 80089b0:	f109 0901 	add.w	r9, r9, #1
 80089b4:	3504      	adds	r5, #4
 80089b6:	e75d      	b.n	8008874 <__kernel_rem_pio2f+0x6c>
 80089b8:	46aa      	mov	sl, r5
 80089ba:	461e      	mov	r6, r3
 80089bc:	f04f 0800 	mov.w	r8, #0
 80089c0:	e7ef      	b.n	80089a2 <__kernel_rem_pio2f+0x19a>
 80089c2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7f8 f9dc 	bl	8000d84 <__aeabi_fmul>
 80089cc:	f7f8 fba0 	bl	8001110 <__aeabi_f2iz>
 80089d0:	f7f8 f984 	bl	8000cdc <__aeabi_i2f>
 80089d4:	4649      	mov	r1, r9
 80089d6:	9009      	str	r0, [sp, #36]	; 0x24
 80089d8:	f7f8 f9d4 	bl	8000d84 <__aeabi_fmul>
 80089dc:	4601      	mov	r1, r0
 80089de:	4628      	mov	r0, r5
 80089e0:	f7f8 f8c6 	bl	8000b70 <__aeabi_fsub>
 80089e4:	f7f8 fb94 	bl	8001110 <__aeabi_f2iz>
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089ee:	f846 0b04 	str.w	r0, [r6], #4
 80089f2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7f8 f8bc 	bl	8000b74 <__addsf3>
 80089fc:	4605      	mov	r5, r0
 80089fe:	e754      	b.n	80088aa <__kernel_rem_pio2f+0xa2>
 8008a00:	d106      	bne.n	8008a10 <__kernel_rem_pio2f+0x208>
 8008a02:	f108 33ff 	add.w	r3, r8, #4294967295
 8008a06:	aa0a      	add	r2, sp, #40	; 0x28
 8008a08:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8008a0c:	11ed      	asrs	r5, r5, #7
 8008a0e:	e783      	b.n	8008918 <__kernel_rem_pio2f+0x110>
 8008a10:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008a14:	f7f8 fb68 	bl	80010e8 <__aeabi_fcmpge>
 8008a18:	4605      	mov	r5, r0
 8008a1a:	bb98      	cbnz	r0, 8008a84 <__kernel_rem_pio2f+0x27c>
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	4648      	mov	r0, r9
 8008a20:	f7f8 fb44 	bl	80010ac <__aeabi_fcmpeq>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f000 8098 	beq.w	8008b5a <__kernel_rem_pio2f+0x352>
 8008a2a:	f108 34ff 	add.w	r4, r8, #4294967295
 8008a2e:	4623      	mov	r3, r4
 8008a30:	2200      	movs	r2, #0
 8008a32:	9901      	ldr	r1, [sp, #4]
 8008a34:	428b      	cmp	r3, r1
 8008a36:	da4c      	bge.n	8008ad2 <__kernel_rem_pio2f+0x2ca>
 8008a38:	2a00      	cmp	r2, #0
 8008a3a:	d07a      	beq.n	8008b32 <__kernel_rem_pio2f+0x32a>
 8008a3c:	ab0a      	add	r3, sp, #40	; 0x28
 8008a3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a42:	3f08      	subs	r7, #8
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 8086 	beq.w	8008b56 <__kernel_rem_pio2f+0x34e>
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008a50:	f000 fbb6 	bl	80091c0 <scalbnf>
 8008a54:	46a2      	mov	sl, r4
 8008a56:	4681      	mov	r9, r0
 8008a58:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8008a5c:	af46      	add	r7, sp, #280	; 0x118
 8008a5e:	f1ba 0f00 	cmp.w	sl, #0
 8008a62:	f280 80af 	bge.w	8008bc4 <__kernel_rem_pio2f+0x3bc>
 8008a66:	4627      	mov	r7, r4
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	f2c0 80d9 	blt.w	8008c22 <__kernel_rem_pio2f+0x41a>
 8008a70:	a946      	add	r1, sp, #280	; 0x118
 8008a72:	4690      	mov	r8, r2
 8008a74:	f04f 0a00 	mov.w	sl, #0
 8008a78:	4b1a      	ldr	r3, [pc, #104]	; (8008ae4 <__kernel_rem_pio2f+0x2dc>)
 8008a7a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8008a7e:	eba4 0907 	sub.w	r9, r4, r7
 8008a82:	e0c2      	b.n	8008c0a <__kernel_rem_pio2f+0x402>
 8008a84:	2502      	movs	r5, #2
 8008a86:	e749      	b.n	800891c <__kernel_rem_pio2f+0x114>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	f1ba 0f00 	cmp.w	sl, #0
 8008a8e:	d108      	bne.n	8008aa2 <__kernel_rem_pio2f+0x29a>
 8008a90:	b11b      	cbz	r3, 8008a9a <__kernel_rem_pio2f+0x292>
 8008a92:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	469a      	mov	sl, r3
 8008a9c:	3201      	adds	r2, #1
 8008a9e:	3404      	adds	r4, #4
 8008aa0:	e73f      	b.n	8008922 <__kernel_rem_pio2f+0x11a>
 8008aa2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	4653      	mov	r3, sl
 8008aaa:	e7f6      	b.n	8008a9a <__kernel_rem_pio2f+0x292>
 8008aac:	f108 32ff 	add.w	r2, r8, #4294967295
 8008ab0:	ab0a      	add	r3, sp, #40	; 0x28
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aba:	a90a      	add	r1, sp, #40	; 0x28
 8008abc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008ac0:	e73a      	b.n	8008938 <__kernel_rem_pio2f+0x130>
 8008ac2:	f108 32ff 	add.w	r2, r8, #4294967295
 8008ac6:	ab0a      	add	r3, sp, #40	; 0x28
 8008ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad0:	e7f3      	b.n	8008aba <__kernel_rem_pio2f+0x2b2>
 8008ad2:	a90a      	add	r1, sp, #40	; 0x28
 8008ad4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	430a      	orrs	r2, r1
 8008adc:	e7a9      	b.n	8008a32 <__kernel_rem_pio2f+0x22a>
 8008ade:	bf00      	nop
 8008ae0:	0800c5b4 	.word	0x0800c5b4
 8008ae4:	0800c588 	.word	0x0800c588
 8008ae8:	3301      	adds	r3, #1
 8008aea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d0fa      	beq.n	8008ae8 <__kernel_rem_pio2f+0x2e0>
 8008af2:	9a04      	ldr	r2, [sp, #16]
 8008af4:	f108 0501 	add.w	r5, r8, #1
 8008af8:	eb08 0402 	add.w	r4, r8, r2
 8008afc:	aa1e      	add	r2, sp, #120	; 0x78
 8008afe:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008b02:	4498      	add	r8, r3
 8008b04:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8008b08:	45a8      	cmp	r8, r5
 8008b0a:	f6ff aec2 	blt.w	8008892 <__kernel_rem_pio2f+0x8a>
 8008b0e:	9b07      	ldr	r3, [sp, #28]
 8008b10:	46a3      	mov	fp, r4
 8008b12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b16:	f7f8 f8e1 	bl	8000cdc <__aeabi_i2f>
 8008b1a:	f04f 0a00 	mov.w	sl, #0
 8008b1e:	2600      	movs	r6, #0
 8008b20:	6020      	str	r0, [r4, #0]
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	459a      	cmp	sl, r3
 8008b26:	dd07      	ble.n	8008b38 <__kernel_rem_pio2f+0x330>
 8008b28:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8008b2c:	3404      	adds	r4, #4
 8008b2e:	3501      	adds	r5, #1
 8008b30:	e7ea      	b.n	8008b08 <__kernel_rem_pio2f+0x300>
 8008b32:	2301      	movs	r3, #1
 8008b34:	9a08      	ldr	r2, [sp, #32]
 8008b36:	e7d8      	b.n	8008aea <__kernel_rem_pio2f+0x2e2>
 8008b38:	9b05      	ldr	r3, [sp, #20]
 8008b3a:	f85b 0904 	ldr.w	r0, [fp], #-4
 8008b3e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8008b42:	f7f8 f91f 	bl	8000d84 <__aeabi_fmul>
 8008b46:	4601      	mov	r1, r0
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7f8 f813 	bl	8000b74 <__addsf3>
 8008b4e:	f10a 0a01 	add.w	sl, sl, #1
 8008b52:	4606      	mov	r6, r0
 8008b54:	e7e5      	b.n	8008b22 <__kernel_rem_pio2f+0x31a>
 8008b56:	3c01      	subs	r4, #1
 8008b58:	e770      	b.n	8008a3c <__kernel_rem_pio2f+0x234>
 8008b5a:	9b06      	ldr	r3, [sp, #24]
 8008b5c:	9a02      	ldr	r2, [sp, #8]
 8008b5e:	4648      	mov	r0, r9
 8008b60:	1a99      	subs	r1, r3, r2
 8008b62:	f000 fb2d 	bl	80091c0 <scalbnf>
 8008b66:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	f7f8 fabc 	bl	80010e8 <__aeabi_fcmpge>
 8008b70:	b300      	cbz	r0, 8008bb4 <__kernel_rem_pio2f+0x3ac>
 8008b72:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8008b76:	4620      	mov	r0, r4
 8008b78:	f7f8 f904 	bl	8000d84 <__aeabi_fmul>
 8008b7c:	f7f8 fac8 	bl	8001110 <__aeabi_f2iz>
 8008b80:	f7f8 f8ac 	bl	8000cdc <__aeabi_i2f>
 8008b84:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008b88:	4681      	mov	r9, r0
 8008b8a:	f7f8 f8fb 	bl	8000d84 <__aeabi_fmul>
 8008b8e:	4601      	mov	r1, r0
 8008b90:	4620      	mov	r0, r4
 8008b92:	f7f7 ffed 	bl	8000b70 <__aeabi_fsub>
 8008b96:	f7f8 fabb 	bl	8001110 <__aeabi_f2iz>
 8008b9a:	ab0a      	add	r3, sp, #40	; 0x28
 8008b9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008ba0:	4648      	mov	r0, r9
 8008ba2:	f7f8 fab5 	bl	8001110 <__aeabi_f2iz>
 8008ba6:	f108 0401 	add.w	r4, r8, #1
 8008baa:	ab0a      	add	r3, sp, #40	; 0x28
 8008bac:	3708      	adds	r7, #8
 8008bae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008bb2:	e74a      	b.n	8008a4a <__kernel_rem_pio2f+0x242>
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f7f8 faab 	bl	8001110 <__aeabi_f2iz>
 8008bba:	ab0a      	add	r3, sp, #40	; 0x28
 8008bbc:	4644      	mov	r4, r8
 8008bbe:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008bc2:	e742      	b.n	8008a4a <__kernel_rem_pio2f+0x242>
 8008bc4:	ab0a      	add	r3, sp, #40	; 0x28
 8008bc6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008bca:	f7f8 f887 	bl	8000cdc <__aeabi_i2f>
 8008bce:	4649      	mov	r1, r9
 8008bd0:	f7f8 f8d8 	bl	8000d84 <__aeabi_fmul>
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8008bda:	4648      	mov	r0, r9
 8008bdc:	f7f8 f8d2 	bl	8000d84 <__aeabi_fmul>
 8008be0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008be4:	4681      	mov	r9, r0
 8008be6:	e73a      	b.n	8008a5e <__kernel_rem_pio2f+0x256>
 8008be8:	f853 0b04 	ldr.w	r0, [r3], #4
 8008bec:	f85b 1b04 	ldr.w	r1, [fp], #4
 8008bf0:	9203      	str	r2, [sp, #12]
 8008bf2:	9302      	str	r3, [sp, #8]
 8008bf4:	f7f8 f8c6 	bl	8000d84 <__aeabi_fmul>
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	f7f7 ffba 	bl	8000b74 <__addsf3>
 8008c00:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c04:	4680      	mov	r8, r0
 8008c06:	f10a 0a01 	add.w	sl, sl, #1
 8008c0a:	9901      	ldr	r1, [sp, #4]
 8008c0c:	458a      	cmp	sl, r1
 8008c0e:	dc01      	bgt.n	8008c14 <__kernel_rem_pio2f+0x40c>
 8008c10:	45ca      	cmp	sl, r9
 8008c12:	dde9      	ble.n	8008be8 <__kernel_rem_pio2f+0x3e0>
 8008c14:	ab5a      	add	r3, sp, #360	; 0x168
 8008c16:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8008c1a:	f849 8ca0 	str.w	r8, [r9, #-160]
 8008c1e:	3f01      	subs	r7, #1
 8008c20:	e723      	b.n	8008a6a <__kernel_rem_pio2f+0x262>
 8008c22:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	dc07      	bgt.n	8008c38 <__kernel_rem_pio2f+0x430>
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dc4d      	bgt.n	8008cc8 <__kernel_rem_pio2f+0x4c0>
 8008c2c:	d02e      	beq.n	8008c8c <__kernel_rem_pio2f+0x484>
 8008c2e:	f006 0007 	and.w	r0, r6, #7
 8008c32:	b05b      	add	sp, #364	; 0x16c
 8008c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c38:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d1f7      	bne.n	8008c2e <__kernel_rem_pio2f+0x426>
 8008c3e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8008c42:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8008c46:	46b8      	mov	r8, r7
 8008c48:	46a2      	mov	sl, r4
 8008c4a:	f1ba 0f00 	cmp.w	sl, #0
 8008c4e:	dc48      	bgt.n	8008ce2 <__kernel_rem_pio2f+0x4da>
 8008c50:	46a1      	mov	r9, r4
 8008c52:	f1b9 0f01 	cmp.w	r9, #1
 8008c56:	dc5f      	bgt.n	8008d18 <__kernel_rem_pio2f+0x510>
 8008c58:	2000      	movs	r0, #0
 8008c5a:	2c01      	cmp	r4, #1
 8008c5c:	dc75      	bgt.n	8008d4a <__kernel_rem_pio2f+0x542>
 8008c5e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008c60:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8008c62:	2d00      	cmp	r5, #0
 8008c64:	d177      	bne.n	8008d56 <__kernel_rem_pio2f+0x54e>
 8008c66:	9900      	ldr	r1, [sp, #0]
 8008c68:	600a      	str	r2, [r1, #0]
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	604b      	str	r3, [r1, #4]
 8008c6e:	6090      	str	r0, [r2, #8]
 8008c70:	e7dd      	b.n	8008c2e <__kernel_rem_pio2f+0x426>
 8008c72:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8008c76:	f7f7 ff7d 	bl	8000b74 <__addsf3>
 8008c7a:	3c01      	subs	r4, #1
 8008c7c:	2c00      	cmp	r4, #0
 8008c7e:	daf8      	bge.n	8008c72 <__kernel_rem_pio2f+0x46a>
 8008c80:	b10d      	cbz	r5, 8008c86 <__kernel_rem_pio2f+0x47e>
 8008c82:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	6018      	str	r0, [r3, #0]
 8008c8a:	e7d0      	b.n	8008c2e <__kernel_rem_pio2f+0x426>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	af32      	add	r7, sp, #200	; 0xc8
 8008c90:	e7f4      	b.n	8008c7c <__kernel_rem_pio2f+0x474>
 8008c92:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8008c96:	f7f7 ff6d 	bl	8000b74 <__addsf3>
 8008c9a:	3f01      	subs	r7, #1
 8008c9c:	2f00      	cmp	r7, #0
 8008c9e:	daf8      	bge.n	8008c92 <__kernel_rem_pio2f+0x48a>
 8008ca0:	b1bd      	cbz	r5, 8008cd2 <__kernel_rem_pio2f+0x4ca>
 8008ca2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8008ca6:	9a00      	ldr	r2, [sp, #0]
 8008ca8:	4601      	mov	r1, r0
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8008cae:	f7f7 ff5f 	bl	8000b70 <__aeabi_fsub>
 8008cb2:	2701      	movs	r7, #1
 8008cb4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8008cb8:	42bc      	cmp	r4, r7
 8008cba:	da0c      	bge.n	8008cd6 <__kernel_rem_pio2f+0x4ce>
 8008cbc:	b10d      	cbz	r5, 8008cc2 <__kernel_rem_pio2f+0x4ba>
 8008cbe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008cc2:	9b00      	ldr	r3, [sp, #0]
 8008cc4:	6058      	str	r0, [r3, #4]
 8008cc6:	e7b2      	b.n	8008c2e <__kernel_rem_pio2f+0x426>
 8008cc8:	4627      	mov	r7, r4
 8008cca:	2000      	movs	r0, #0
 8008ccc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8008cd0:	e7e4      	b.n	8008c9c <__kernel_rem_pio2f+0x494>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	e7e7      	b.n	8008ca6 <__kernel_rem_pio2f+0x49e>
 8008cd6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8008cda:	f7f7 ff4b 	bl	8000b74 <__addsf3>
 8008cde:	3701      	adds	r7, #1
 8008ce0:	e7ea      	b.n	8008cb8 <__kernel_rem_pio2f+0x4b0>
 8008ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	9302      	str	r3, [sp, #8]
 8008cf0:	9201      	str	r2, [sp, #4]
 8008cf2:	f7f7 ff3f 	bl	8000b74 <__addsf3>
 8008cf6:	9a01      	ldr	r2, [sp, #4]
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	4681      	mov	r9, r0
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	f7f7 ff37 	bl	8000b70 <__aeabi_fsub>
 8008d02:	9b02      	ldr	r3, [sp, #8]
 8008d04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7f7 ff33 	bl	8000b74 <__addsf3>
 8008d0e:	f848 0904 	str.w	r0, [r8], #-4
 8008d12:	f8c8 9000 	str.w	r9, [r8]
 8008d16:	e798      	b.n	8008c4a <__kernel_rem_pio2f+0x442>
 8008d18:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8008d1c:	f8d7 a000 	ldr.w	sl, [r7]
 8008d20:	4618      	mov	r0, r3
 8008d22:	4651      	mov	r1, sl
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	f7f7 ff25 	bl	8000b74 <__addsf3>
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	4680      	mov	r8, r0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f7 ff1d 	bl	8000b70 <__aeabi_fsub>
 8008d36:	4651      	mov	r1, sl
 8008d38:	f7f7 ff1c 	bl	8000b74 <__addsf3>
 8008d3c:	f847 0904 	str.w	r0, [r7], #-4
 8008d40:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d44:	f8c7 8000 	str.w	r8, [r7]
 8008d48:	e783      	b.n	8008c52 <__kernel_rem_pio2f+0x44a>
 8008d4a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8008d4e:	f7f7 ff11 	bl	8000b74 <__addsf3>
 8008d52:	3c01      	subs	r4, #1
 8008d54:	e781      	b.n	8008c5a <__kernel_rem_pio2f+0x452>
 8008d56:	9900      	ldr	r1, [sp, #0]
 8008d58:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8008d5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d60:	600a      	str	r2, [r1, #0]
 8008d62:	604b      	str	r3, [r1, #4]
 8008d64:	460a      	mov	r2, r1
 8008d66:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008d6a:	e780      	b.n	8008c6e <__kernel_rem_pio2f+0x466>

08008d6c <__kernel_tanf>:
 8008d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 8008d74:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 8008d78:	4604      	mov	r4, r0
 8008d7a:	460e      	mov	r6, r1
 8008d7c:	4690      	mov	r8, r2
 8008d7e:	4607      	mov	r7, r0
 8008d80:	da1b      	bge.n	8008dba <__kernel_tanf+0x4e>
 8008d82:	f7f8 f9c5 	bl	8001110 <__aeabi_f2iz>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d12f      	bne.n	8008dea <__kernel_tanf+0x7e>
 8008d8a:	f108 0301 	add.w	r3, r8, #1
 8008d8e:	ea53 030a 	orrs.w	r3, r3, sl
 8008d92:	d10c      	bne.n	8008dae <__kernel_tanf+0x42>
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 f9cd 	bl	8009134 <fabsf>
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008da0:	f7f8 f8a4 	bl	8000eec <__aeabi_fdiv>
 8008da4:	4604      	mov	r4, r0
 8008da6:	4620      	mov	r0, r4
 8008da8:	b003      	add	sp, #12
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	f1b8 0f01 	cmp.w	r8, #1
 8008db2:	d0f8      	beq.n	8008da6 <__kernel_tanf+0x3a>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4872      	ldr	r0, [pc, #456]	; (8008f80 <__kernel_tanf+0x214>)
 8008db8:	e7f2      	b.n	8008da0 <__kernel_tanf+0x34>
 8008dba:	4b72      	ldr	r3, [pc, #456]	; (8008f84 <__kernel_tanf+0x218>)
 8008dbc:	459a      	cmp	sl, r3
 8008dbe:	db14      	blt.n	8008dea <__kernel_tanf+0x7e>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	bfbe      	ittt	lt
 8008dc4:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 8008dc8:	4604      	movlt	r4, r0
 8008dca:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 8008dce:	486e      	ldr	r0, [pc, #440]	; (8008f88 <__kernel_tanf+0x21c>)
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f7f7 fecd 	bl	8000b70 <__aeabi_fsub>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4631      	mov	r1, r6
 8008dda:	486c      	ldr	r0, [pc, #432]	; (8008f8c <__kernel_tanf+0x220>)
 8008ddc:	f7f7 fec8 	bl	8000b70 <__aeabi_fsub>
 8008de0:	4621      	mov	r1, r4
 8008de2:	f7f7 fec7 	bl	8000b74 <__addsf3>
 8008de6:	2600      	movs	r6, #0
 8008de8:	4604      	mov	r4, r0
 8008dea:	4621      	mov	r1, r4
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7f7 ffc9 	bl	8000d84 <__aeabi_fmul>
 8008df2:	4601      	mov	r1, r0
 8008df4:	4681      	mov	r9, r0
 8008df6:	f7f7 ffc5 	bl	8000d84 <__aeabi_fmul>
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7f7 ffc0 	bl	8000d84 <__aeabi_fmul>
 8008e04:	4962      	ldr	r1, [pc, #392]	; (8008f90 <__kernel_tanf+0x224>)
 8008e06:	4683      	mov	fp, r0
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7f7 ffbb 	bl	8000d84 <__aeabi_fmul>
 8008e0e:	4961      	ldr	r1, [pc, #388]	; (8008f94 <__kernel_tanf+0x228>)
 8008e10:	f7f7 feb0 	bl	8000b74 <__addsf3>
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 ffb5 	bl	8000d84 <__aeabi_fmul>
 8008e1a:	495f      	ldr	r1, [pc, #380]	; (8008f98 <__kernel_tanf+0x22c>)
 8008e1c:	f7f7 feaa 	bl	8000b74 <__addsf3>
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 ffaf 	bl	8000d84 <__aeabi_fmul>
 8008e26:	495d      	ldr	r1, [pc, #372]	; (8008f9c <__kernel_tanf+0x230>)
 8008e28:	f7f7 fea4 	bl	8000b74 <__addsf3>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	f7f7 ffa9 	bl	8000d84 <__aeabi_fmul>
 8008e32:	495b      	ldr	r1, [pc, #364]	; (8008fa0 <__kernel_tanf+0x234>)
 8008e34:	f7f7 fe9e 	bl	8000b74 <__addsf3>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	f7f7 ffa3 	bl	8000d84 <__aeabi_fmul>
 8008e3e:	4959      	ldr	r1, [pc, #356]	; (8008fa4 <__kernel_tanf+0x238>)
 8008e40:	f7f7 fe98 	bl	8000b74 <__addsf3>
 8008e44:	4649      	mov	r1, r9
 8008e46:	f7f7 ff9d 	bl	8000d84 <__aeabi_fmul>
 8008e4a:	4957      	ldr	r1, [pc, #348]	; (8008fa8 <__kernel_tanf+0x23c>)
 8008e4c:	9001      	str	r0, [sp, #4]
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7f7 ff98 	bl	8000d84 <__aeabi_fmul>
 8008e54:	4955      	ldr	r1, [pc, #340]	; (8008fac <__kernel_tanf+0x240>)
 8008e56:	f7f7 fe8d 	bl	8000b74 <__addsf3>
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	f7f7 ff92 	bl	8000d84 <__aeabi_fmul>
 8008e60:	4953      	ldr	r1, [pc, #332]	; (8008fb0 <__kernel_tanf+0x244>)
 8008e62:	f7f7 fe87 	bl	8000b74 <__addsf3>
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7f7 ff8c 	bl	8000d84 <__aeabi_fmul>
 8008e6c:	4951      	ldr	r1, [pc, #324]	; (8008fb4 <__kernel_tanf+0x248>)
 8008e6e:	f7f7 fe81 	bl	8000b74 <__addsf3>
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 ff86 	bl	8000d84 <__aeabi_fmul>
 8008e78:	494f      	ldr	r1, [pc, #316]	; (8008fb8 <__kernel_tanf+0x24c>)
 8008e7a:	f7f7 fe7b 	bl	8000b74 <__addsf3>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 ff80 	bl	8000d84 <__aeabi_fmul>
 8008e84:	494d      	ldr	r1, [pc, #308]	; (8008fbc <__kernel_tanf+0x250>)
 8008e86:	f7f7 fe75 	bl	8000b74 <__addsf3>
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	4601      	mov	r1, r0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7f7 fe70 	bl	8000b74 <__addsf3>
 8008e94:	4659      	mov	r1, fp
 8008e96:	f7f7 ff75 	bl	8000d84 <__aeabi_fmul>
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	f7f7 fe6a 	bl	8000b74 <__addsf3>
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	f7f7 ff6f 	bl	8000d84 <__aeabi_fmul>
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	f7f7 fe64 	bl	8000b74 <__addsf3>
 8008eac:	4605      	mov	r5, r0
 8008eae:	4944      	ldr	r1, [pc, #272]	; (8008fc0 <__kernel_tanf+0x254>)
 8008eb0:	4658      	mov	r0, fp
 8008eb2:	f7f7 ff67 	bl	8000d84 <__aeabi_fmul>
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fe5c 	bl	8000b74 <__addsf3>
 8008ebc:	4601      	mov	r1, r0
 8008ebe:	4681      	mov	r9, r0
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f7f7 fe57 	bl	8000b74 <__addsf3>
 8008ec6:	4b2f      	ldr	r3, [pc, #188]	; (8008f84 <__kernel_tanf+0x218>)
 8008ec8:	4605      	mov	r5, r0
 8008eca:	459a      	cmp	sl, r3
 8008ecc:	db2b      	blt.n	8008f26 <__kernel_tanf+0x1ba>
 8008ece:	4640      	mov	r0, r8
 8008ed0:	f7f7 ff04 	bl	8000cdc <__aeabi_i2f>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f7f7 ff53 	bl	8000d84 <__aeabi_fmul>
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7f7 fe46 	bl	8000b74 <__addsf3>
 8008ee8:	4601      	mov	r1, r0
 8008eea:	4640      	mov	r0, r8
 8008eec:	f7f7 fffe 	bl	8000eec <__aeabi_fdiv>
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	f7f7 fe3d 	bl	8000b70 <__aeabi_fsub>
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f7f7 fe39 	bl	8000b70 <__aeabi_fsub>
 8008efe:	4601      	mov	r1, r0
 8008f00:	f7f7 fe38 	bl	8000b74 <__addsf3>
 8008f04:	4601      	mov	r1, r0
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7f7 fe32 	bl	8000b70 <__aeabi_fsub>
 8008f0c:	17bf      	asrs	r7, r7, #30
 8008f0e:	f007 0702 	and.w	r7, r7, #2
 8008f12:	4604      	mov	r4, r0
 8008f14:	f1c7 0001 	rsb	r0, r7, #1
 8008f18:	f7f7 fee0 	bl	8000cdc <__aeabi_i2f>
 8008f1c:	4601      	mov	r1, r0
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7f7 ff30 	bl	8000d84 <__aeabi_fmul>
 8008f24:	e73e      	b.n	8008da4 <__kernel_tanf+0x38>
 8008f26:	f1b8 0f01 	cmp.w	r8, #1
 8008f2a:	d027      	beq.n	8008f7c <__kernel_tanf+0x210>
 8008f2c:	4e25      	ldr	r6, [pc, #148]	; (8008fc4 <__kernel_tanf+0x258>)
 8008f2e:	4601      	mov	r1, r0
 8008f30:	ea06 0800 	and.w	r8, r6, r0
 8008f34:	4812      	ldr	r0, [pc, #72]	; (8008f80 <__kernel_tanf+0x214>)
 8008f36:	f7f7 ffd9 	bl	8000eec <__aeabi_fdiv>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4006      	ands	r6, r0
 8008f3e:	4607      	mov	r7, r0
 8008f40:	4640      	mov	r0, r8
 8008f42:	f7f7 fe15 	bl	8000b70 <__aeabi_fsub>
 8008f46:	4601      	mov	r1, r0
 8008f48:	4648      	mov	r0, r9
 8008f4a:	f7f7 fe11 	bl	8000b70 <__aeabi_fsub>
 8008f4e:	4631      	mov	r1, r6
 8008f50:	f7f7 ff18 	bl	8000d84 <__aeabi_fmul>
 8008f54:	4631      	mov	r1, r6
 8008f56:	4604      	mov	r4, r0
 8008f58:	4640      	mov	r0, r8
 8008f5a:	f7f7 ff13 	bl	8000d84 <__aeabi_fmul>
 8008f5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008f62:	f7f7 fe07 	bl	8000b74 <__addsf3>
 8008f66:	4601      	mov	r1, r0
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7f7 fe03 	bl	8000b74 <__addsf3>
 8008f6e:	4639      	mov	r1, r7
 8008f70:	f7f7 ff08 	bl	8000d84 <__aeabi_fmul>
 8008f74:	4631      	mov	r1, r6
 8008f76:	f7f7 fdfd 	bl	8000b74 <__addsf3>
 8008f7a:	e713      	b.n	8008da4 <__kernel_tanf+0x38>
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	e712      	b.n	8008da6 <__kernel_tanf+0x3a>
 8008f80:	bf800000 	.word	0xbf800000
 8008f84:	3f2ca140 	.word	0x3f2ca140
 8008f88:	3f490fda 	.word	0x3f490fda
 8008f8c:	33222168 	.word	0x33222168
 8008f90:	37d95384 	.word	0x37d95384
 8008f94:	3895c07a 	.word	0x3895c07a
 8008f98:	398137b9 	.word	0x398137b9
 8008f9c:	3abede48 	.word	0x3abede48
 8008fa0:	3c11371f 	.word	0x3c11371f
 8008fa4:	3d5d0dd1 	.word	0x3d5d0dd1
 8008fa8:	b79bae5f 	.word	0xb79bae5f
 8008fac:	38a3f445 	.word	0x38a3f445
 8008fb0:	3a1a26c8 	.word	0x3a1a26c8
 8008fb4:	3b6b6916 	.word	0x3b6b6916
 8008fb8:	3cb327a4 	.word	0x3cb327a4
 8008fbc:	3e088889 	.word	0x3e088889
 8008fc0:	3eaaaaab 	.word	0x3eaaaaab
 8008fc4:	fffff000 	.word	0xfffff000

08008fc8 <with_errno>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460d      	mov	r5, r1
 8008fce:	4616      	mov	r6, r2
 8008fd0:	f000 f94a 	bl	8009268 <__errno>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	6006      	str	r6, [r0, #0]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	bd70      	pop	{r4, r5, r6, pc}

08008fdc <xflow>:
 8008fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fde:	4615      	mov	r5, r2
 8008fe0:	461c      	mov	r4, r3
 8008fe2:	b180      	cbz	r0, 8009006 <xflow+0x2a>
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008fea:	e9cd 0100 	strd	r0, r1, [sp]
 8008fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f7f7 fa6f 	bl	80004d8 <__aeabi_dmul>
 8008ffa:	2222      	movs	r2, #34	; 0x22
 8008ffc:	b003      	add	sp, #12
 8008ffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009002:	f7ff bfe1 	b.w	8008fc8 <with_errno>
 8009006:	4610      	mov	r0, r2
 8009008:	4619      	mov	r1, r3
 800900a:	e7ee      	b.n	8008fea <xflow+0xe>

0800900c <__math_uflow>:
 800900c:	2200      	movs	r2, #0
 800900e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009012:	f7ff bfe3 	b.w	8008fdc <xflow>

08009016 <__math_oflow>:
 8009016:	2200      	movs	r2, #0
 8009018:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800901c:	f7ff bfde 	b.w	8008fdc <xflow>

08009020 <fabs>:
 8009020:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009024:	4770      	bx	lr

08009026 <finite>:
 8009026:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800902a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800902e:	0fc0      	lsrs	r0, r0, #31
 8009030:	4770      	bx	lr
 8009032:	0000      	movs	r0, r0
 8009034:	0000      	movs	r0, r0
	...

08009038 <scalbn>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	4617      	mov	r7, r2
 8009044:	460b      	mov	r3, r1
 8009046:	b996      	cbnz	r6, 800906e <scalbn+0x36>
 8009048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800904c:	4303      	orrs	r3, r0
 800904e:	d039      	beq.n	80090c4 <scalbn+0x8c>
 8009050:	4b33      	ldr	r3, [pc, #204]	; (8009120 <scalbn+0xe8>)
 8009052:	2200      	movs	r2, #0
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	4b32      	ldr	r3, [pc, #200]	; (8009124 <scalbn+0xec>)
 800905a:	4604      	mov	r4, r0
 800905c:	429f      	cmp	r7, r3
 800905e:	460d      	mov	r5, r1
 8009060:	da0f      	bge.n	8009082 <scalbn+0x4a>
 8009062:	a32b      	add	r3, pc, #172	; (adr r3, 8009110 <scalbn+0xd8>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f7f7 fa36 	bl	80004d8 <__aeabi_dmul>
 800906c:	e006      	b.n	800907c <scalbn+0x44>
 800906e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009072:	4296      	cmp	r6, r2
 8009074:	d10a      	bne.n	800908c <scalbn+0x54>
 8009076:	4602      	mov	r2, r0
 8009078:	f7f7 f878 	bl	800016c <__adddf3>
 800907c:	4604      	mov	r4, r0
 800907e:	460d      	mov	r5, r1
 8009080:	e020      	b.n	80090c4 <scalbn+0x8c>
 8009082:	460b      	mov	r3, r1
 8009084:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009088:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800908c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009090:	19b9      	adds	r1, r7, r6
 8009092:	4291      	cmp	r1, r2
 8009094:	dd0e      	ble.n	80090b4 <scalbn+0x7c>
 8009096:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800909a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800909e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80090a2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80090a6:	4820      	ldr	r0, [pc, #128]	; (8009128 <scalbn+0xf0>)
 80090a8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80090ac:	a31a      	add	r3, pc, #104	; (adr r3, 8009118 <scalbn+0xe0>)
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	e7d9      	b.n	8009068 <scalbn+0x30>
 80090b4:	2900      	cmp	r1, #0
 80090b6:	dd08      	ble.n	80090ca <scalbn+0x92>
 80090b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80090c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80090ce:	da12      	bge.n	80090f6 <scalbn+0xbe>
 80090d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80090d4:	429f      	cmp	r7, r3
 80090d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80090da:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80090de:	dcdc      	bgt.n	800909a <scalbn+0x62>
 80090e0:	a30b      	add	r3, pc, #44	; (adr r3, 8009110 <scalbn+0xd8>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80090ea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80090ee:	480f      	ldr	r0, [pc, #60]	; (800912c <scalbn+0xf4>)
 80090f0:	f041 011f 	orr.w	r1, r1, #31
 80090f4:	e7b8      	b.n	8009068 <scalbn+0x30>
 80090f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090fa:	3136      	adds	r1, #54	; 0x36
 80090fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009100:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	2200      	movs	r2, #0
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <scalbn+0xf8>)
 800910c:	e7ac      	b.n	8009068 <scalbn+0x30>
 800910e:	bf00      	nop
 8009110:	c2f8f359 	.word	0xc2f8f359
 8009114:	01a56e1f 	.word	0x01a56e1f
 8009118:	8800759c 	.word	0x8800759c
 800911c:	7e37e43c 	.word	0x7e37e43c
 8009120:	43500000 	.word	0x43500000
 8009124:	ffff3cb0 	.word	0xffff3cb0
 8009128:	8800759c 	.word	0x8800759c
 800912c:	c2f8f359 	.word	0xc2f8f359
 8009130:	3c900000 	.word	0x3c900000

08009134 <fabsf>:
 8009134:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009138:	4770      	bx	lr
	...

0800913c <floorf>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009142:	3d7f      	subs	r5, #127	; 0x7f
 8009144:	2d16      	cmp	r5, #22
 8009146:	4601      	mov	r1, r0
 8009148:	4604      	mov	r4, r0
 800914a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800914e:	dc26      	bgt.n	800919e <floorf+0x62>
 8009150:	2d00      	cmp	r5, #0
 8009152:	da0e      	bge.n	8009172 <floorf+0x36>
 8009154:	4917      	ldr	r1, [pc, #92]	; (80091b4 <floorf+0x78>)
 8009156:	f7f7 fd0d 	bl	8000b74 <__addsf3>
 800915a:	2100      	movs	r1, #0
 800915c:	f7f7 ffce 	bl	80010fc <__aeabi_fcmpgt>
 8009160:	b128      	cbz	r0, 800916e <floorf+0x32>
 8009162:	2c00      	cmp	r4, #0
 8009164:	da23      	bge.n	80091ae <floorf+0x72>
 8009166:	4b14      	ldr	r3, [pc, #80]	; (80091b8 <floorf+0x7c>)
 8009168:	2e00      	cmp	r6, #0
 800916a:	bf18      	it	ne
 800916c:	461c      	movne	r4, r3
 800916e:	4621      	mov	r1, r4
 8009170:	e01b      	b.n	80091aa <floorf+0x6e>
 8009172:	4e12      	ldr	r6, [pc, #72]	; (80091bc <floorf+0x80>)
 8009174:	412e      	asrs	r6, r5
 8009176:	4230      	tst	r0, r6
 8009178:	d017      	beq.n	80091aa <floorf+0x6e>
 800917a:	490e      	ldr	r1, [pc, #56]	; (80091b4 <floorf+0x78>)
 800917c:	f7f7 fcfa 	bl	8000b74 <__addsf3>
 8009180:	2100      	movs	r1, #0
 8009182:	f7f7 ffbb 	bl	80010fc <__aeabi_fcmpgt>
 8009186:	2800      	cmp	r0, #0
 8009188:	d0f1      	beq.n	800916e <floorf+0x32>
 800918a:	2c00      	cmp	r4, #0
 800918c:	bfbe      	ittt	lt
 800918e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009192:	fa43 f505 	asrlt.w	r5, r3, r5
 8009196:	1964      	addlt	r4, r4, r5
 8009198:	ea24 0406 	bic.w	r4, r4, r6
 800919c:	e7e7      	b.n	800916e <floorf+0x32>
 800919e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80091a2:	d302      	bcc.n	80091aa <floorf+0x6e>
 80091a4:	f7f7 fce6 	bl	8000b74 <__addsf3>
 80091a8:	4601      	mov	r1, r0
 80091aa:	4608      	mov	r0, r1
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
 80091ae:	2400      	movs	r4, #0
 80091b0:	e7dd      	b.n	800916e <floorf+0x32>
 80091b2:	bf00      	nop
 80091b4:	7149f2ca 	.word	0x7149f2ca
 80091b8:	bf800000 	.word	0xbf800000
 80091bc:	007fffff 	.word	0x007fffff

080091c0 <scalbnf>:
 80091c0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4603      	mov	r3, r0
 80091c8:	460d      	mov	r5, r1
 80091ca:	4604      	mov	r4, r0
 80091cc:	d02a      	beq.n	8009224 <scalbnf+0x64>
 80091ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80091d2:	d304      	bcc.n	80091de <scalbnf+0x1e>
 80091d4:	4601      	mov	r1, r0
 80091d6:	f7f7 fccd 	bl	8000b74 <__addsf3>
 80091da:	4603      	mov	r3, r0
 80091dc:	e022      	b.n	8009224 <scalbnf+0x64>
 80091de:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80091e2:	d117      	bne.n	8009214 <scalbnf+0x54>
 80091e4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80091e8:	f7f7 fdcc 	bl	8000d84 <__aeabi_fmul>
 80091ec:	4a17      	ldr	r2, [pc, #92]	; (800924c <scalbnf+0x8c>)
 80091ee:	4603      	mov	r3, r0
 80091f0:	4295      	cmp	r5, r2
 80091f2:	db0b      	blt.n	800920c <scalbnf+0x4c>
 80091f4:	4604      	mov	r4, r0
 80091f6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80091fa:	3a19      	subs	r2, #25
 80091fc:	442a      	add	r2, r5
 80091fe:	2afe      	cmp	r2, #254	; 0xfe
 8009200:	dd0a      	ble.n	8009218 <scalbnf+0x58>
 8009202:	4913      	ldr	r1, [pc, #76]	; (8009250 <scalbnf+0x90>)
 8009204:	4618      	mov	r0, r3
 8009206:	f361 001e 	bfi	r0, r1, #0, #31
 800920a:	e000      	b.n	800920e <scalbnf+0x4e>
 800920c:	4911      	ldr	r1, [pc, #68]	; (8009254 <scalbnf+0x94>)
 800920e:	f7f7 fdb9 	bl	8000d84 <__aeabi_fmul>
 8009212:	e7e2      	b.n	80091da <scalbnf+0x1a>
 8009214:	0dd2      	lsrs	r2, r2, #23
 8009216:	e7f1      	b.n	80091fc <scalbnf+0x3c>
 8009218:	2a00      	cmp	r2, #0
 800921a:	dd05      	ble.n	8009228 <scalbnf+0x68>
 800921c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8009220:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8009224:	4618      	mov	r0, r3
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	f112 0f16 	cmn.w	r2, #22
 800922c:	da05      	bge.n	800923a <scalbnf+0x7a>
 800922e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009232:	4295      	cmp	r5, r2
 8009234:	dce5      	bgt.n	8009202 <scalbnf+0x42>
 8009236:	4907      	ldr	r1, [pc, #28]	; (8009254 <scalbnf+0x94>)
 8009238:	e7e4      	b.n	8009204 <scalbnf+0x44>
 800923a:	3219      	adds	r2, #25
 800923c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009240:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009244:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8009248:	e7e1      	b.n	800920e <scalbnf+0x4e>
 800924a:	bf00      	nop
 800924c:	ffff3cb0 	.word	0xffff3cb0
 8009250:	7149f2ca 	.word	0x7149f2ca
 8009254:	0da24260 	.word	0x0da24260

08009258 <abort>:
 8009258:	2006      	movs	r0, #6
 800925a:	b508      	push	{r3, lr}
 800925c:	f000 fdc0 	bl	8009de0 <raise>
 8009260:	2001      	movs	r0, #1
 8009262:	f7fa f822 	bl	80032aa <_exit>
	...

08009268 <__errno>:
 8009268:	4b01      	ldr	r3, [pc, #4]	; (8009270 <__errno+0x8>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	2000000c 	.word	0x2000000c

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	2600      	movs	r6, #0
 8009278:	4d0c      	ldr	r5, [pc, #48]	; (80092ac <__libc_init_array+0x38>)
 800927a:	4c0d      	ldr	r4, [pc, #52]	; (80092b0 <__libc_init_array+0x3c>)
 800927c:	1b64      	subs	r4, r4, r5
 800927e:	10a4      	asrs	r4, r4, #2
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	f002 fef2 	bl	800c06c <_init>
 8009288:	2600      	movs	r6, #0
 800928a:	4d0a      	ldr	r5, [pc, #40]	; (80092b4 <__libc_init_array+0x40>)
 800928c:	4c0a      	ldr	r4, [pc, #40]	; (80092b8 <__libc_init_array+0x44>)
 800928e:	1b64      	subs	r4, r4, r5
 8009290:	10a4      	asrs	r4, r4, #2
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	f855 3b04 	ldr.w	r3, [r5], #4
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800c99c 	.word	0x0800c99c
 80092b0:	0800c99c 	.word	0x0800c99c
 80092b4:	0800c99c 	.word	0x0800c99c
 80092b8:	0800c9a0 	.word	0x0800c9a0

080092bc <malloc>:
 80092bc:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <malloc+0xc>)
 80092be:	4601      	mov	r1, r0
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	f000 b881 	b.w	80093c8 <_malloc_r>
 80092c6:	bf00      	nop
 80092c8:	2000000c 	.word	0x2000000c

080092cc <memcpy>:
 80092cc:	440a      	add	r2, r1
 80092ce:	4291      	cmp	r1, r2
 80092d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092d4:	d100      	bne.n	80092d8 <memcpy+0xc>
 80092d6:	4770      	bx	lr
 80092d8:	b510      	push	{r4, lr}
 80092da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092de:	4291      	cmp	r1, r2
 80092e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092e4:	d1f9      	bne.n	80092da <memcpy+0xe>
 80092e6:	bd10      	pop	{r4, pc}

080092e8 <memset>:
 80092e8:	4603      	mov	r3, r0
 80092ea:	4402      	add	r2, r0
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d100      	bne.n	80092f2 <memset+0xa>
 80092f0:	4770      	bx	lr
 80092f2:	f803 1b01 	strb.w	r1, [r3], #1
 80092f6:	e7f9      	b.n	80092ec <memset+0x4>

080092f8 <_free_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4605      	mov	r5, r0
 80092fc:	2900      	cmp	r1, #0
 80092fe:	d040      	beq.n	8009382 <_free_r+0x8a>
 8009300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009304:	1f0c      	subs	r4, r1, #4
 8009306:	2b00      	cmp	r3, #0
 8009308:	bfb8      	it	lt
 800930a:	18e4      	addlt	r4, r4, r3
 800930c:	f001 fc30 	bl	800ab70 <__malloc_lock>
 8009310:	4a1c      	ldr	r2, [pc, #112]	; (8009384 <_free_r+0x8c>)
 8009312:	6813      	ldr	r3, [r2, #0]
 8009314:	b933      	cbnz	r3, 8009324 <_free_r+0x2c>
 8009316:	6063      	str	r3, [r4, #4]
 8009318:	6014      	str	r4, [r2, #0]
 800931a:	4628      	mov	r0, r5
 800931c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009320:	f001 bc2c 	b.w	800ab7c <__malloc_unlock>
 8009324:	42a3      	cmp	r3, r4
 8009326:	d908      	bls.n	800933a <_free_r+0x42>
 8009328:	6820      	ldr	r0, [r4, #0]
 800932a:	1821      	adds	r1, r4, r0
 800932c:	428b      	cmp	r3, r1
 800932e:	bf01      	itttt	eq
 8009330:	6819      	ldreq	r1, [r3, #0]
 8009332:	685b      	ldreq	r3, [r3, #4]
 8009334:	1809      	addeq	r1, r1, r0
 8009336:	6021      	streq	r1, [r4, #0]
 8009338:	e7ed      	b.n	8009316 <_free_r+0x1e>
 800933a:	461a      	mov	r2, r3
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	b10b      	cbz	r3, 8009344 <_free_r+0x4c>
 8009340:	42a3      	cmp	r3, r4
 8009342:	d9fa      	bls.n	800933a <_free_r+0x42>
 8009344:	6811      	ldr	r1, [r2, #0]
 8009346:	1850      	adds	r0, r2, r1
 8009348:	42a0      	cmp	r0, r4
 800934a:	d10b      	bne.n	8009364 <_free_r+0x6c>
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	4401      	add	r1, r0
 8009350:	1850      	adds	r0, r2, r1
 8009352:	4283      	cmp	r3, r0
 8009354:	6011      	str	r1, [r2, #0]
 8009356:	d1e0      	bne.n	800931a <_free_r+0x22>
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	4401      	add	r1, r0
 800935e:	6011      	str	r1, [r2, #0]
 8009360:	6053      	str	r3, [r2, #4]
 8009362:	e7da      	b.n	800931a <_free_r+0x22>
 8009364:	d902      	bls.n	800936c <_free_r+0x74>
 8009366:	230c      	movs	r3, #12
 8009368:	602b      	str	r3, [r5, #0]
 800936a:	e7d6      	b.n	800931a <_free_r+0x22>
 800936c:	6820      	ldr	r0, [r4, #0]
 800936e:	1821      	adds	r1, r4, r0
 8009370:	428b      	cmp	r3, r1
 8009372:	bf01      	itttt	eq
 8009374:	6819      	ldreq	r1, [r3, #0]
 8009376:	685b      	ldreq	r3, [r3, #4]
 8009378:	1809      	addeq	r1, r1, r0
 800937a:	6021      	streq	r1, [r4, #0]
 800937c:	6063      	str	r3, [r4, #4]
 800937e:	6054      	str	r4, [r2, #4]
 8009380:	e7cb      	b.n	800931a <_free_r+0x22>
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000384 	.word	0x20000384

08009388 <sbrk_aligned>:
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	4e0e      	ldr	r6, [pc, #56]	; (80093c4 <sbrk_aligned+0x3c>)
 800938c:	460c      	mov	r4, r1
 800938e:	6831      	ldr	r1, [r6, #0]
 8009390:	4605      	mov	r5, r0
 8009392:	b911      	cbnz	r1, 800939a <sbrk_aligned+0x12>
 8009394:	f000 fcec 	bl	8009d70 <_sbrk_r>
 8009398:	6030      	str	r0, [r6, #0]
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f000 fce7 	bl	8009d70 <_sbrk_r>
 80093a2:	1c43      	adds	r3, r0, #1
 80093a4:	d00a      	beq.n	80093bc <sbrk_aligned+0x34>
 80093a6:	1cc4      	adds	r4, r0, #3
 80093a8:	f024 0403 	bic.w	r4, r4, #3
 80093ac:	42a0      	cmp	r0, r4
 80093ae:	d007      	beq.n	80093c0 <sbrk_aligned+0x38>
 80093b0:	1a21      	subs	r1, r4, r0
 80093b2:	4628      	mov	r0, r5
 80093b4:	f000 fcdc 	bl	8009d70 <_sbrk_r>
 80093b8:	3001      	adds	r0, #1
 80093ba:	d101      	bne.n	80093c0 <sbrk_aligned+0x38>
 80093bc:	f04f 34ff 	mov.w	r4, #4294967295
 80093c0:	4620      	mov	r0, r4
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	20000388 	.word	0x20000388

080093c8 <_malloc_r>:
 80093c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093cc:	1ccd      	adds	r5, r1, #3
 80093ce:	f025 0503 	bic.w	r5, r5, #3
 80093d2:	3508      	adds	r5, #8
 80093d4:	2d0c      	cmp	r5, #12
 80093d6:	bf38      	it	cc
 80093d8:	250c      	movcc	r5, #12
 80093da:	2d00      	cmp	r5, #0
 80093dc:	4607      	mov	r7, r0
 80093de:	db01      	blt.n	80093e4 <_malloc_r+0x1c>
 80093e0:	42a9      	cmp	r1, r5
 80093e2:	d905      	bls.n	80093f0 <_malloc_r+0x28>
 80093e4:	230c      	movs	r3, #12
 80093e6:	2600      	movs	r6, #0
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	4630      	mov	r0, r6
 80093ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f0:	4e2e      	ldr	r6, [pc, #184]	; (80094ac <_malloc_r+0xe4>)
 80093f2:	f001 fbbd 	bl	800ab70 <__malloc_lock>
 80093f6:	6833      	ldr	r3, [r6, #0]
 80093f8:	461c      	mov	r4, r3
 80093fa:	bb34      	cbnz	r4, 800944a <_malloc_r+0x82>
 80093fc:	4629      	mov	r1, r5
 80093fe:	4638      	mov	r0, r7
 8009400:	f7ff ffc2 	bl	8009388 <sbrk_aligned>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	4604      	mov	r4, r0
 8009408:	d14d      	bne.n	80094a6 <_malloc_r+0xde>
 800940a:	6834      	ldr	r4, [r6, #0]
 800940c:	4626      	mov	r6, r4
 800940e:	2e00      	cmp	r6, #0
 8009410:	d140      	bne.n	8009494 <_malloc_r+0xcc>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	4631      	mov	r1, r6
 8009416:	4638      	mov	r0, r7
 8009418:	eb04 0803 	add.w	r8, r4, r3
 800941c:	f000 fca8 	bl	8009d70 <_sbrk_r>
 8009420:	4580      	cmp	r8, r0
 8009422:	d13a      	bne.n	800949a <_malloc_r+0xd2>
 8009424:	6821      	ldr	r1, [r4, #0]
 8009426:	3503      	adds	r5, #3
 8009428:	1a6d      	subs	r5, r5, r1
 800942a:	f025 0503 	bic.w	r5, r5, #3
 800942e:	3508      	adds	r5, #8
 8009430:	2d0c      	cmp	r5, #12
 8009432:	bf38      	it	cc
 8009434:	250c      	movcc	r5, #12
 8009436:	4638      	mov	r0, r7
 8009438:	4629      	mov	r1, r5
 800943a:	f7ff ffa5 	bl	8009388 <sbrk_aligned>
 800943e:	3001      	adds	r0, #1
 8009440:	d02b      	beq.n	800949a <_malloc_r+0xd2>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	442b      	add	r3, r5
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	e00e      	b.n	8009468 <_malloc_r+0xa0>
 800944a:	6822      	ldr	r2, [r4, #0]
 800944c:	1b52      	subs	r2, r2, r5
 800944e:	d41e      	bmi.n	800948e <_malloc_r+0xc6>
 8009450:	2a0b      	cmp	r2, #11
 8009452:	d916      	bls.n	8009482 <_malloc_r+0xba>
 8009454:	1961      	adds	r1, r4, r5
 8009456:	42a3      	cmp	r3, r4
 8009458:	6025      	str	r5, [r4, #0]
 800945a:	bf18      	it	ne
 800945c:	6059      	strne	r1, [r3, #4]
 800945e:	6863      	ldr	r3, [r4, #4]
 8009460:	bf08      	it	eq
 8009462:	6031      	streq	r1, [r6, #0]
 8009464:	5162      	str	r2, [r4, r5]
 8009466:	604b      	str	r3, [r1, #4]
 8009468:	4638      	mov	r0, r7
 800946a:	f104 060b 	add.w	r6, r4, #11
 800946e:	f001 fb85 	bl	800ab7c <__malloc_unlock>
 8009472:	f026 0607 	bic.w	r6, r6, #7
 8009476:	1d23      	adds	r3, r4, #4
 8009478:	1af2      	subs	r2, r6, r3
 800947a:	d0b6      	beq.n	80093ea <_malloc_r+0x22>
 800947c:	1b9b      	subs	r3, r3, r6
 800947e:	50a3      	str	r3, [r4, r2]
 8009480:	e7b3      	b.n	80093ea <_malloc_r+0x22>
 8009482:	6862      	ldr	r2, [r4, #4]
 8009484:	42a3      	cmp	r3, r4
 8009486:	bf0c      	ite	eq
 8009488:	6032      	streq	r2, [r6, #0]
 800948a:	605a      	strne	r2, [r3, #4]
 800948c:	e7ec      	b.n	8009468 <_malloc_r+0xa0>
 800948e:	4623      	mov	r3, r4
 8009490:	6864      	ldr	r4, [r4, #4]
 8009492:	e7b2      	b.n	80093fa <_malloc_r+0x32>
 8009494:	4634      	mov	r4, r6
 8009496:	6876      	ldr	r6, [r6, #4]
 8009498:	e7b9      	b.n	800940e <_malloc_r+0x46>
 800949a:	230c      	movs	r3, #12
 800949c:	4638      	mov	r0, r7
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	f001 fb6c 	bl	800ab7c <__malloc_unlock>
 80094a4:	e7a1      	b.n	80093ea <_malloc_r+0x22>
 80094a6:	6025      	str	r5, [r4, #0]
 80094a8:	e7de      	b.n	8009468 <_malloc_r+0xa0>
 80094aa:	bf00      	nop
 80094ac:	20000384 	.word	0x20000384

080094b0 <__cvt>:
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b6:	461f      	mov	r7, r3
 80094b8:	bfbb      	ittet	lt
 80094ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80094be:	461f      	movlt	r7, r3
 80094c0:	2300      	movge	r3, #0
 80094c2:	232d      	movlt	r3, #45	; 0x2d
 80094c4:	b088      	sub	sp, #32
 80094c6:	4614      	mov	r4, r2
 80094c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80094cc:	7013      	strb	r3, [r2, #0]
 80094ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80094d4:	f023 0820 	bic.w	r8, r3, #32
 80094d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094dc:	d005      	beq.n	80094ea <__cvt+0x3a>
 80094de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094e2:	d100      	bne.n	80094e6 <__cvt+0x36>
 80094e4:	3501      	adds	r5, #1
 80094e6:	2302      	movs	r3, #2
 80094e8:	e000      	b.n	80094ec <__cvt+0x3c>
 80094ea:	2303      	movs	r3, #3
 80094ec:	aa07      	add	r2, sp, #28
 80094ee:	9204      	str	r2, [sp, #16]
 80094f0:	aa06      	add	r2, sp, #24
 80094f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80094f6:	e9cd 3500 	strd	r3, r5, [sp]
 80094fa:	4622      	mov	r2, r4
 80094fc:	463b      	mov	r3, r7
 80094fe:	f000 fd37 	bl	8009f70 <_dtoa_r>
 8009502:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009506:	4606      	mov	r6, r0
 8009508:	d102      	bne.n	8009510 <__cvt+0x60>
 800950a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800950c:	07db      	lsls	r3, r3, #31
 800950e:	d522      	bpl.n	8009556 <__cvt+0xa6>
 8009510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009514:	eb06 0905 	add.w	r9, r6, r5
 8009518:	d110      	bne.n	800953c <__cvt+0x8c>
 800951a:	7833      	ldrb	r3, [r6, #0]
 800951c:	2b30      	cmp	r3, #48	; 0x30
 800951e:	d10a      	bne.n	8009536 <__cvt+0x86>
 8009520:	2200      	movs	r2, #0
 8009522:	2300      	movs	r3, #0
 8009524:	4620      	mov	r0, r4
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800952c:	b918      	cbnz	r0, 8009536 <__cvt+0x86>
 800952e:	f1c5 0501 	rsb	r5, r5, #1
 8009532:	f8ca 5000 	str.w	r5, [sl]
 8009536:	f8da 3000 	ldr.w	r3, [sl]
 800953a:	4499      	add	r9, r3
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	4620      	mov	r0, r4
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 fa30 	bl	80009a8 <__aeabi_dcmpeq>
 8009548:	b108      	cbz	r0, 800954e <__cvt+0x9e>
 800954a:	f8cd 901c 	str.w	r9, [sp, #28]
 800954e:	2230      	movs	r2, #48	; 0x30
 8009550:	9b07      	ldr	r3, [sp, #28]
 8009552:	454b      	cmp	r3, r9
 8009554:	d307      	bcc.n	8009566 <__cvt+0xb6>
 8009556:	4630      	mov	r0, r6
 8009558:	9b07      	ldr	r3, [sp, #28]
 800955a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800955c:	1b9b      	subs	r3, r3, r6
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	b008      	add	sp, #32
 8009562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009566:	1c59      	adds	r1, r3, #1
 8009568:	9107      	str	r1, [sp, #28]
 800956a:	701a      	strb	r2, [r3, #0]
 800956c:	e7f0      	b.n	8009550 <__cvt+0xa0>

0800956e <__exponent>:
 800956e:	4603      	mov	r3, r0
 8009570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009572:	2900      	cmp	r1, #0
 8009574:	f803 2b02 	strb.w	r2, [r3], #2
 8009578:	bfb6      	itet	lt
 800957a:	222d      	movlt	r2, #45	; 0x2d
 800957c:	222b      	movge	r2, #43	; 0x2b
 800957e:	4249      	neglt	r1, r1
 8009580:	2909      	cmp	r1, #9
 8009582:	7042      	strb	r2, [r0, #1]
 8009584:	dd2b      	ble.n	80095de <__exponent+0x70>
 8009586:	f10d 0407 	add.w	r4, sp, #7
 800958a:	46a4      	mov	ip, r4
 800958c:	270a      	movs	r7, #10
 800958e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009592:	460a      	mov	r2, r1
 8009594:	46a6      	mov	lr, r4
 8009596:	fb07 1516 	mls	r5, r7, r6, r1
 800959a:	2a63      	cmp	r2, #99	; 0x63
 800959c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80095a0:	4631      	mov	r1, r6
 80095a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80095a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095aa:	dcf0      	bgt.n	800958e <__exponent+0x20>
 80095ac:	3130      	adds	r1, #48	; 0x30
 80095ae:	f1ae 0502 	sub.w	r5, lr, #2
 80095b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095b6:	4629      	mov	r1, r5
 80095b8:	1c44      	adds	r4, r0, #1
 80095ba:	4561      	cmp	r1, ip
 80095bc:	d30a      	bcc.n	80095d4 <__exponent+0x66>
 80095be:	f10d 0209 	add.w	r2, sp, #9
 80095c2:	eba2 020e 	sub.w	r2, r2, lr
 80095c6:	4565      	cmp	r5, ip
 80095c8:	bf88      	it	hi
 80095ca:	2200      	movhi	r2, #0
 80095cc:	4413      	add	r3, r2
 80095ce:	1a18      	subs	r0, r3, r0
 80095d0:	b003      	add	sp, #12
 80095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80095dc:	e7ed      	b.n	80095ba <__exponent+0x4c>
 80095de:	2330      	movs	r3, #48	; 0x30
 80095e0:	3130      	adds	r1, #48	; 0x30
 80095e2:	7083      	strb	r3, [r0, #2]
 80095e4:	70c1      	strb	r1, [r0, #3]
 80095e6:	1d03      	adds	r3, r0, #4
 80095e8:	e7f1      	b.n	80095ce <__exponent+0x60>
	...

080095ec <_printf_float>:
 80095ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	b091      	sub	sp, #68	; 0x44
 80095f2:	460c      	mov	r4, r1
 80095f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80095f8:	4616      	mov	r6, r2
 80095fa:	461f      	mov	r7, r3
 80095fc:	4605      	mov	r5, r0
 80095fe:	f001 faa5 	bl	800ab4c <_localeconv_r>
 8009602:	6803      	ldr	r3, [r0, #0]
 8009604:	4618      	mov	r0, r3
 8009606:	9309      	str	r3, [sp, #36]	; 0x24
 8009608:	f7f6 fda2 	bl	8000150 <strlen>
 800960c:	2300      	movs	r3, #0
 800960e:	930e      	str	r3, [sp, #56]	; 0x38
 8009610:	f8d8 3000 	ldr.w	r3, [r8]
 8009614:	900a      	str	r0, [sp, #40]	; 0x28
 8009616:	3307      	adds	r3, #7
 8009618:	f023 0307 	bic.w	r3, r3, #7
 800961c:	f103 0208 	add.w	r2, r3, #8
 8009620:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009624:	f8d4 b000 	ldr.w	fp, [r4]
 8009628:	f8c8 2000 	str.w	r2, [r8]
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009634:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009638:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800963c:	930b      	str	r3, [sp, #44]	; 0x2c
 800963e:	f04f 32ff 	mov.w	r2, #4294967295
 8009642:	4640      	mov	r0, r8
 8009644:	4b9c      	ldr	r3, [pc, #624]	; (80098b8 <_printf_float+0x2cc>)
 8009646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009648:	f7f7 f9e0 	bl	8000a0c <__aeabi_dcmpun>
 800964c:	bb70      	cbnz	r0, 80096ac <_printf_float+0xc0>
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	4640      	mov	r0, r8
 8009654:	4b98      	ldr	r3, [pc, #608]	; (80098b8 <_printf_float+0x2cc>)
 8009656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009658:	f7f7 f9ba 	bl	80009d0 <__aeabi_dcmple>
 800965c:	bb30      	cbnz	r0, 80096ac <_printf_float+0xc0>
 800965e:	2200      	movs	r2, #0
 8009660:	2300      	movs	r3, #0
 8009662:	4640      	mov	r0, r8
 8009664:	4651      	mov	r1, sl
 8009666:	f7f7 f9a9 	bl	80009bc <__aeabi_dcmplt>
 800966a:	b110      	cbz	r0, 8009672 <_printf_float+0x86>
 800966c:	232d      	movs	r3, #45	; 0x2d
 800966e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009672:	4b92      	ldr	r3, [pc, #584]	; (80098bc <_printf_float+0x2d0>)
 8009674:	4892      	ldr	r0, [pc, #584]	; (80098c0 <_printf_float+0x2d4>)
 8009676:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800967a:	bf94      	ite	ls
 800967c:	4698      	movls	r8, r3
 800967e:	4680      	movhi	r8, r0
 8009680:	2303      	movs	r3, #3
 8009682:	f04f 0a00 	mov.w	sl, #0
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	f02b 0304 	bic.w	r3, fp, #4
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	4633      	mov	r3, r6
 8009690:	4621      	mov	r1, r4
 8009692:	4628      	mov	r0, r5
 8009694:	9700      	str	r7, [sp, #0]
 8009696:	aa0f      	add	r2, sp, #60	; 0x3c
 8009698:	f000 f9d4 	bl	8009a44 <_printf_common>
 800969c:	3001      	adds	r0, #1
 800969e:	f040 8090 	bne.w	80097c2 <_printf_float+0x1d6>
 80096a2:	f04f 30ff 	mov.w	r0, #4294967295
 80096a6:	b011      	add	sp, #68	; 0x44
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	4642      	mov	r2, r8
 80096ae:	4653      	mov	r3, sl
 80096b0:	4640      	mov	r0, r8
 80096b2:	4651      	mov	r1, sl
 80096b4:	f7f7 f9aa 	bl	8000a0c <__aeabi_dcmpun>
 80096b8:	b148      	cbz	r0, 80096ce <_printf_float+0xe2>
 80096ba:	f1ba 0f00 	cmp.w	sl, #0
 80096be:	bfb8      	it	lt
 80096c0:	232d      	movlt	r3, #45	; 0x2d
 80096c2:	4880      	ldr	r0, [pc, #512]	; (80098c4 <_printf_float+0x2d8>)
 80096c4:	bfb8      	it	lt
 80096c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096ca:	4b7f      	ldr	r3, [pc, #508]	; (80098c8 <_printf_float+0x2dc>)
 80096cc:	e7d3      	b.n	8009676 <_printf_float+0x8a>
 80096ce:	6863      	ldr	r3, [r4, #4]
 80096d0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	d142      	bne.n	800975e <_printf_float+0x172>
 80096d8:	2306      	movs	r3, #6
 80096da:	6063      	str	r3, [r4, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	9206      	str	r2, [sp, #24]
 80096e0:	aa0e      	add	r2, sp, #56	; 0x38
 80096e2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80096e6:	aa0d      	add	r2, sp, #52	; 0x34
 80096e8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80096ec:	9203      	str	r2, [sp, #12]
 80096ee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80096f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	6863      	ldr	r3, [r4, #4]
 80096fa:	4642      	mov	r2, r8
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	4628      	mov	r0, r5
 8009700:	4653      	mov	r3, sl
 8009702:	910b      	str	r1, [sp, #44]	; 0x2c
 8009704:	f7ff fed4 	bl	80094b0 <__cvt>
 8009708:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800970a:	4680      	mov	r8, r0
 800970c:	2947      	cmp	r1, #71	; 0x47
 800970e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009710:	d108      	bne.n	8009724 <_printf_float+0x138>
 8009712:	1cc8      	adds	r0, r1, #3
 8009714:	db02      	blt.n	800971c <_printf_float+0x130>
 8009716:	6863      	ldr	r3, [r4, #4]
 8009718:	4299      	cmp	r1, r3
 800971a:	dd40      	ble.n	800979e <_printf_float+0x1b2>
 800971c:	f1a9 0902 	sub.w	r9, r9, #2
 8009720:	fa5f f989 	uxtb.w	r9, r9
 8009724:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009728:	d81f      	bhi.n	800976a <_printf_float+0x17e>
 800972a:	464a      	mov	r2, r9
 800972c:	3901      	subs	r1, #1
 800972e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009732:	910d      	str	r1, [sp, #52]	; 0x34
 8009734:	f7ff ff1b 	bl	800956e <__exponent>
 8009738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800973a:	4682      	mov	sl, r0
 800973c:	1813      	adds	r3, r2, r0
 800973e:	2a01      	cmp	r2, #1
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	dc02      	bgt.n	800974a <_printf_float+0x15e>
 8009744:	6822      	ldr	r2, [r4, #0]
 8009746:	07d2      	lsls	r2, r2, #31
 8009748:	d501      	bpl.n	800974e <_printf_float+0x162>
 800974a:	3301      	adds	r3, #1
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009752:	2b00      	cmp	r3, #0
 8009754:	d09b      	beq.n	800968e <_printf_float+0xa2>
 8009756:	232d      	movs	r3, #45	; 0x2d
 8009758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975c:	e797      	b.n	800968e <_printf_float+0xa2>
 800975e:	2947      	cmp	r1, #71	; 0x47
 8009760:	d1bc      	bne.n	80096dc <_printf_float+0xf0>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1ba      	bne.n	80096dc <_printf_float+0xf0>
 8009766:	2301      	movs	r3, #1
 8009768:	e7b7      	b.n	80096da <_printf_float+0xee>
 800976a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800976e:	d118      	bne.n	80097a2 <_printf_float+0x1b6>
 8009770:	2900      	cmp	r1, #0
 8009772:	6863      	ldr	r3, [r4, #4]
 8009774:	dd0b      	ble.n	800978e <_printf_float+0x1a2>
 8009776:	6121      	str	r1, [r4, #16]
 8009778:	b913      	cbnz	r3, 8009780 <_printf_float+0x194>
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	07d0      	lsls	r0, r2, #31
 800977e:	d502      	bpl.n	8009786 <_printf_float+0x19a>
 8009780:	3301      	adds	r3, #1
 8009782:	440b      	add	r3, r1
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	f04f 0a00 	mov.w	sl, #0
 800978a:	65a1      	str	r1, [r4, #88]	; 0x58
 800978c:	e7df      	b.n	800974e <_printf_float+0x162>
 800978e:	b913      	cbnz	r3, 8009796 <_printf_float+0x1aa>
 8009790:	6822      	ldr	r2, [r4, #0]
 8009792:	07d2      	lsls	r2, r2, #31
 8009794:	d501      	bpl.n	800979a <_printf_float+0x1ae>
 8009796:	3302      	adds	r3, #2
 8009798:	e7f4      	b.n	8009784 <_printf_float+0x198>
 800979a:	2301      	movs	r3, #1
 800979c:	e7f2      	b.n	8009784 <_printf_float+0x198>
 800979e:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a4:	4299      	cmp	r1, r3
 80097a6:	db05      	blt.n	80097b4 <_printf_float+0x1c8>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	6121      	str	r1, [r4, #16]
 80097ac:	07d8      	lsls	r0, r3, #31
 80097ae:	d5ea      	bpl.n	8009786 <_printf_float+0x19a>
 80097b0:	1c4b      	adds	r3, r1, #1
 80097b2:	e7e7      	b.n	8009784 <_printf_float+0x198>
 80097b4:	2900      	cmp	r1, #0
 80097b6:	bfcc      	ite	gt
 80097b8:	2201      	movgt	r2, #1
 80097ba:	f1c1 0202 	rsble	r2, r1, #2
 80097be:	4413      	add	r3, r2
 80097c0:	e7e0      	b.n	8009784 <_printf_float+0x198>
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	055a      	lsls	r2, r3, #21
 80097c6:	d407      	bmi.n	80097d8 <_printf_float+0x1ec>
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	4642      	mov	r2, r8
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	47b8      	blx	r7
 80097d2:	3001      	adds	r0, #1
 80097d4:	d12b      	bne.n	800982e <_printf_float+0x242>
 80097d6:	e764      	b.n	80096a2 <_printf_float+0xb6>
 80097d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80097dc:	f240 80dd 	bls.w	800999a <_printf_float+0x3ae>
 80097e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097e4:	2200      	movs	r2, #0
 80097e6:	2300      	movs	r3, #0
 80097e8:	f7f7 f8de 	bl	80009a8 <__aeabi_dcmpeq>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d033      	beq.n	8009858 <_printf_float+0x26c>
 80097f0:	2301      	movs	r3, #1
 80097f2:	4631      	mov	r1, r6
 80097f4:	4628      	mov	r0, r5
 80097f6:	4a35      	ldr	r2, [pc, #212]	; (80098cc <_printf_float+0x2e0>)
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	f43f af51 	beq.w	80096a2 <_printf_float+0xb6>
 8009800:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009804:	429a      	cmp	r2, r3
 8009806:	db02      	blt.n	800980e <_printf_float+0x222>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	07d8      	lsls	r0, r3, #31
 800980c:	d50f      	bpl.n	800982e <_printf_float+0x242>
 800980e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009812:	4631      	mov	r1, r6
 8009814:	4628      	mov	r0, r5
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	f43f af42 	beq.w	80096a2 <_printf_float+0xb6>
 800981e:	f04f 0800 	mov.w	r8, #0
 8009822:	f104 091a 	add.w	r9, r4, #26
 8009826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009828:	3b01      	subs	r3, #1
 800982a:	4543      	cmp	r3, r8
 800982c:	dc09      	bgt.n	8009842 <_printf_float+0x256>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	079b      	lsls	r3, r3, #30
 8009832:	f100 8102 	bmi.w	8009a3a <_printf_float+0x44e>
 8009836:	68e0      	ldr	r0, [r4, #12]
 8009838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800983a:	4298      	cmp	r0, r3
 800983c:	bfb8      	it	lt
 800983e:	4618      	movlt	r0, r3
 8009840:	e731      	b.n	80096a6 <_printf_float+0xba>
 8009842:	2301      	movs	r3, #1
 8009844:	464a      	mov	r2, r9
 8009846:	4631      	mov	r1, r6
 8009848:	4628      	mov	r0, r5
 800984a:	47b8      	blx	r7
 800984c:	3001      	adds	r0, #1
 800984e:	f43f af28 	beq.w	80096a2 <_printf_float+0xb6>
 8009852:	f108 0801 	add.w	r8, r8, #1
 8009856:	e7e6      	b.n	8009826 <_printf_float+0x23a>
 8009858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800985a:	2b00      	cmp	r3, #0
 800985c:	dc38      	bgt.n	80098d0 <_printf_float+0x2e4>
 800985e:	2301      	movs	r3, #1
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	4a19      	ldr	r2, [pc, #100]	; (80098cc <_printf_float+0x2e0>)
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	f43f af1a 	beq.w	80096a2 <_printf_float+0xb6>
 800986e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009872:	4313      	orrs	r3, r2
 8009874:	d102      	bne.n	800987c <_printf_float+0x290>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	07d9      	lsls	r1, r3, #31
 800987a:	d5d8      	bpl.n	800982e <_printf_float+0x242>
 800987c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009880:	4631      	mov	r1, r6
 8009882:	4628      	mov	r0, r5
 8009884:	47b8      	blx	r7
 8009886:	3001      	adds	r0, #1
 8009888:	f43f af0b 	beq.w	80096a2 <_printf_float+0xb6>
 800988c:	f04f 0900 	mov.w	r9, #0
 8009890:	f104 0a1a 	add.w	sl, r4, #26
 8009894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009896:	425b      	negs	r3, r3
 8009898:	454b      	cmp	r3, r9
 800989a:	dc01      	bgt.n	80098a0 <_printf_float+0x2b4>
 800989c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800989e:	e794      	b.n	80097ca <_printf_float+0x1de>
 80098a0:	2301      	movs	r3, #1
 80098a2:	4652      	mov	r2, sl
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f aef9 	beq.w	80096a2 <_printf_float+0xb6>
 80098b0:	f109 0901 	add.w	r9, r9, #1
 80098b4:	e7ee      	b.n	8009894 <_printf_float+0x2a8>
 80098b6:	bf00      	nop
 80098b8:	7fefffff 	.word	0x7fefffff
 80098bc:	0800c5c4 	.word	0x0800c5c4
 80098c0:	0800c5c8 	.word	0x0800c5c8
 80098c4:	0800c5d0 	.word	0x0800c5d0
 80098c8:	0800c5cc 	.word	0x0800c5cc
 80098cc:	0800c5d4 	.word	0x0800c5d4
 80098d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098d4:	429a      	cmp	r2, r3
 80098d6:	bfa8      	it	ge
 80098d8:	461a      	movge	r2, r3
 80098da:	2a00      	cmp	r2, #0
 80098dc:	4691      	mov	r9, r2
 80098de:	dc37      	bgt.n	8009950 <_printf_float+0x364>
 80098e0:	f04f 0b00 	mov.w	fp, #0
 80098e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098e8:	f104 021a 	add.w	r2, r4, #26
 80098ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80098f0:	ebaa 0309 	sub.w	r3, sl, r9
 80098f4:	455b      	cmp	r3, fp
 80098f6:	dc33      	bgt.n	8009960 <_printf_float+0x374>
 80098f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098fc:	429a      	cmp	r2, r3
 80098fe:	db3b      	blt.n	8009978 <_printf_float+0x38c>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	07da      	lsls	r2, r3, #31
 8009904:	d438      	bmi.n	8009978 <_printf_float+0x38c>
 8009906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009908:	990d      	ldr	r1, [sp, #52]	; 0x34
 800990a:	eba3 020a 	sub.w	r2, r3, sl
 800990e:	eba3 0901 	sub.w	r9, r3, r1
 8009912:	4591      	cmp	r9, r2
 8009914:	bfa8      	it	ge
 8009916:	4691      	movge	r9, r2
 8009918:	f1b9 0f00 	cmp.w	r9, #0
 800991c:	dc34      	bgt.n	8009988 <_printf_float+0x39c>
 800991e:	f04f 0800 	mov.w	r8, #0
 8009922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009926:	f104 0a1a 	add.w	sl, r4, #26
 800992a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	eba3 0309 	sub.w	r3, r3, r9
 8009934:	4543      	cmp	r3, r8
 8009936:	f77f af7a 	ble.w	800982e <_printf_float+0x242>
 800993a:	2301      	movs	r3, #1
 800993c:	4652      	mov	r2, sl
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	f43f aeac 	beq.w	80096a2 <_printf_float+0xb6>
 800994a:	f108 0801 	add.w	r8, r8, #1
 800994e:	e7ec      	b.n	800992a <_printf_float+0x33e>
 8009950:	4613      	mov	r3, r2
 8009952:	4631      	mov	r1, r6
 8009954:	4642      	mov	r2, r8
 8009956:	4628      	mov	r0, r5
 8009958:	47b8      	blx	r7
 800995a:	3001      	adds	r0, #1
 800995c:	d1c0      	bne.n	80098e0 <_printf_float+0x2f4>
 800995e:	e6a0      	b.n	80096a2 <_printf_float+0xb6>
 8009960:	2301      	movs	r3, #1
 8009962:	4631      	mov	r1, r6
 8009964:	4628      	mov	r0, r5
 8009966:	920b      	str	r2, [sp, #44]	; 0x2c
 8009968:	47b8      	blx	r7
 800996a:	3001      	adds	r0, #1
 800996c:	f43f ae99 	beq.w	80096a2 <_printf_float+0xb6>
 8009970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009972:	f10b 0b01 	add.w	fp, fp, #1
 8009976:	e7b9      	b.n	80098ec <_printf_float+0x300>
 8009978:	4631      	mov	r1, r6
 800997a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	d1bf      	bne.n	8009906 <_printf_float+0x31a>
 8009986:	e68c      	b.n	80096a2 <_printf_float+0xb6>
 8009988:	464b      	mov	r3, r9
 800998a:	4631      	mov	r1, r6
 800998c:	4628      	mov	r0, r5
 800998e:	eb08 020a 	add.w	r2, r8, sl
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	d1c2      	bne.n	800991e <_printf_float+0x332>
 8009998:	e683      	b.n	80096a2 <_printf_float+0xb6>
 800999a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800999c:	2a01      	cmp	r2, #1
 800999e:	dc01      	bgt.n	80099a4 <_printf_float+0x3b8>
 80099a0:	07db      	lsls	r3, r3, #31
 80099a2:	d537      	bpl.n	8009a14 <_printf_float+0x428>
 80099a4:	2301      	movs	r3, #1
 80099a6:	4642      	mov	r2, r8
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	f43f ae77 	beq.w	80096a2 <_printf_float+0xb6>
 80099b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f ae6f 	beq.w	80096a2 <_printf_float+0xb6>
 80099c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099c8:	2200      	movs	r2, #0
 80099ca:	2300      	movs	r3, #0
 80099cc:	f7f6 ffec 	bl	80009a8 <__aeabi_dcmpeq>
 80099d0:	b9d8      	cbnz	r0, 8009a0a <_printf_float+0x41e>
 80099d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099d4:	f108 0201 	add.w	r2, r8, #1
 80099d8:	3b01      	subs	r3, #1
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	d10e      	bne.n	8009a02 <_printf_float+0x416>
 80099e4:	e65d      	b.n	80096a2 <_printf_float+0xb6>
 80099e6:	2301      	movs	r3, #1
 80099e8:	464a      	mov	r2, r9
 80099ea:	4631      	mov	r1, r6
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b8      	blx	r7
 80099f0:	3001      	adds	r0, #1
 80099f2:	f43f ae56 	beq.w	80096a2 <_printf_float+0xb6>
 80099f6:	f108 0801 	add.w	r8, r8, #1
 80099fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099fc:	3b01      	subs	r3, #1
 80099fe:	4543      	cmp	r3, r8
 8009a00:	dcf1      	bgt.n	80099e6 <_printf_float+0x3fa>
 8009a02:	4653      	mov	r3, sl
 8009a04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a08:	e6e0      	b.n	80097cc <_printf_float+0x1e0>
 8009a0a:	f04f 0800 	mov.w	r8, #0
 8009a0e:	f104 091a 	add.w	r9, r4, #26
 8009a12:	e7f2      	b.n	80099fa <_printf_float+0x40e>
 8009a14:	2301      	movs	r3, #1
 8009a16:	4642      	mov	r2, r8
 8009a18:	e7df      	b.n	80099da <_printf_float+0x3ee>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	464a      	mov	r2, r9
 8009a1e:	4631      	mov	r1, r6
 8009a20:	4628      	mov	r0, r5
 8009a22:	47b8      	blx	r7
 8009a24:	3001      	adds	r0, #1
 8009a26:	f43f ae3c 	beq.w	80096a2 <_printf_float+0xb6>
 8009a2a:	f108 0801 	add.w	r8, r8, #1
 8009a2e:	68e3      	ldr	r3, [r4, #12]
 8009a30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a32:	1a5b      	subs	r3, r3, r1
 8009a34:	4543      	cmp	r3, r8
 8009a36:	dcf0      	bgt.n	8009a1a <_printf_float+0x42e>
 8009a38:	e6fd      	b.n	8009836 <_printf_float+0x24a>
 8009a3a:	f04f 0800 	mov.w	r8, #0
 8009a3e:	f104 0919 	add.w	r9, r4, #25
 8009a42:	e7f4      	b.n	8009a2e <_printf_float+0x442>

08009a44 <_printf_common>:
 8009a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	4616      	mov	r6, r2
 8009a4a:	4699      	mov	r9, r3
 8009a4c:	688a      	ldr	r2, [r1, #8]
 8009a4e:	690b      	ldr	r3, [r1, #16]
 8009a50:	4607      	mov	r7, r0
 8009a52:	4293      	cmp	r3, r2
 8009a54:	bfb8      	it	lt
 8009a56:	4613      	movlt	r3, r2
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a64:	b10a      	cbz	r2, 8009a6a <_printf_common+0x26>
 8009a66:	3301      	adds	r3, #1
 8009a68:	6033      	str	r3, [r6, #0]
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	0699      	lsls	r1, r3, #26
 8009a6e:	bf42      	ittt	mi
 8009a70:	6833      	ldrmi	r3, [r6, #0]
 8009a72:	3302      	addmi	r3, #2
 8009a74:	6033      	strmi	r3, [r6, #0]
 8009a76:	6825      	ldr	r5, [r4, #0]
 8009a78:	f015 0506 	ands.w	r5, r5, #6
 8009a7c:	d106      	bne.n	8009a8c <_printf_common+0x48>
 8009a7e:	f104 0a19 	add.w	sl, r4, #25
 8009a82:	68e3      	ldr	r3, [r4, #12]
 8009a84:	6832      	ldr	r2, [r6, #0]
 8009a86:	1a9b      	subs	r3, r3, r2
 8009a88:	42ab      	cmp	r3, r5
 8009a8a:	dc28      	bgt.n	8009ade <_printf_common+0x9a>
 8009a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a90:	1e13      	subs	r3, r2, #0
 8009a92:	6822      	ldr	r2, [r4, #0]
 8009a94:	bf18      	it	ne
 8009a96:	2301      	movne	r3, #1
 8009a98:	0692      	lsls	r2, r2, #26
 8009a9a:	d42d      	bmi.n	8009af8 <_printf_common+0xb4>
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009aa4:	47c0      	blx	r8
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	d020      	beq.n	8009aec <_printf_common+0xa8>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	68e5      	ldr	r5, [r4, #12]
 8009aae:	f003 0306 	and.w	r3, r3, #6
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	bf18      	it	ne
 8009ab6:	2500      	movne	r5, #0
 8009ab8:	6832      	ldr	r2, [r6, #0]
 8009aba:	f04f 0600 	mov.w	r6, #0
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	bf08      	it	eq
 8009ac2:	1aad      	subeq	r5, r5, r2
 8009ac4:	6922      	ldr	r2, [r4, #16]
 8009ac6:	bf08      	it	eq
 8009ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009acc:	4293      	cmp	r3, r2
 8009ace:	bfc4      	itt	gt
 8009ad0:	1a9b      	subgt	r3, r3, r2
 8009ad2:	18ed      	addgt	r5, r5, r3
 8009ad4:	341a      	adds	r4, #26
 8009ad6:	42b5      	cmp	r5, r6
 8009ad8:	d11a      	bne.n	8009b10 <_printf_common+0xcc>
 8009ada:	2000      	movs	r0, #0
 8009adc:	e008      	b.n	8009af0 <_printf_common+0xac>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4652      	mov	r2, sl
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	47c0      	blx	r8
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d103      	bne.n	8009af4 <_printf_common+0xb0>
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af4:	3501      	adds	r5, #1
 8009af6:	e7c4      	b.n	8009a82 <_printf_common+0x3e>
 8009af8:	2030      	movs	r0, #48	; 0x30
 8009afa:	18e1      	adds	r1, r4, r3
 8009afc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b06:	4422      	add	r2, r4
 8009b08:	3302      	adds	r3, #2
 8009b0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b0e:	e7c5      	b.n	8009a9c <_printf_common+0x58>
 8009b10:	2301      	movs	r3, #1
 8009b12:	4622      	mov	r2, r4
 8009b14:	4649      	mov	r1, r9
 8009b16:	4638      	mov	r0, r7
 8009b18:	47c0      	blx	r8
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d0e6      	beq.n	8009aec <_printf_common+0xa8>
 8009b1e:	3601      	adds	r6, #1
 8009b20:	e7d9      	b.n	8009ad6 <_printf_common+0x92>
	...

08009b24 <_printf_i>:
 8009b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	7e0f      	ldrb	r7, [r1, #24]
 8009b2a:	4691      	mov	r9, r2
 8009b2c:	2f78      	cmp	r7, #120	; 0x78
 8009b2e:	4680      	mov	r8, r0
 8009b30:	460c      	mov	r4, r1
 8009b32:	469a      	mov	sl, r3
 8009b34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b3a:	d807      	bhi.n	8009b4c <_printf_i+0x28>
 8009b3c:	2f62      	cmp	r7, #98	; 0x62
 8009b3e:	d80a      	bhi.n	8009b56 <_printf_i+0x32>
 8009b40:	2f00      	cmp	r7, #0
 8009b42:	f000 80d9 	beq.w	8009cf8 <_printf_i+0x1d4>
 8009b46:	2f58      	cmp	r7, #88	; 0x58
 8009b48:	f000 80a4 	beq.w	8009c94 <_printf_i+0x170>
 8009b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b54:	e03a      	b.n	8009bcc <_printf_i+0xa8>
 8009b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b5a:	2b15      	cmp	r3, #21
 8009b5c:	d8f6      	bhi.n	8009b4c <_printf_i+0x28>
 8009b5e:	a101      	add	r1, pc, #4	; (adr r1, 8009b64 <_printf_i+0x40>)
 8009b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b64:	08009bbd 	.word	0x08009bbd
 8009b68:	08009bd1 	.word	0x08009bd1
 8009b6c:	08009b4d 	.word	0x08009b4d
 8009b70:	08009b4d 	.word	0x08009b4d
 8009b74:	08009b4d 	.word	0x08009b4d
 8009b78:	08009b4d 	.word	0x08009b4d
 8009b7c:	08009bd1 	.word	0x08009bd1
 8009b80:	08009b4d 	.word	0x08009b4d
 8009b84:	08009b4d 	.word	0x08009b4d
 8009b88:	08009b4d 	.word	0x08009b4d
 8009b8c:	08009b4d 	.word	0x08009b4d
 8009b90:	08009cdf 	.word	0x08009cdf
 8009b94:	08009c01 	.word	0x08009c01
 8009b98:	08009cc1 	.word	0x08009cc1
 8009b9c:	08009b4d 	.word	0x08009b4d
 8009ba0:	08009b4d 	.word	0x08009b4d
 8009ba4:	08009d01 	.word	0x08009d01
 8009ba8:	08009b4d 	.word	0x08009b4d
 8009bac:	08009c01 	.word	0x08009c01
 8009bb0:	08009b4d 	.word	0x08009b4d
 8009bb4:	08009b4d 	.word	0x08009b4d
 8009bb8:	08009cc9 	.word	0x08009cc9
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	1d1a      	adds	r2, r3, #4
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	602a      	str	r2, [r5, #0]
 8009bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e0a4      	b.n	8009d1a <_printf_i+0x1f6>
 8009bd0:	6820      	ldr	r0, [r4, #0]
 8009bd2:	6829      	ldr	r1, [r5, #0]
 8009bd4:	0606      	lsls	r6, r0, #24
 8009bd6:	f101 0304 	add.w	r3, r1, #4
 8009bda:	d50a      	bpl.n	8009bf2 <_printf_i+0xce>
 8009bdc:	680e      	ldr	r6, [r1, #0]
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	2e00      	cmp	r6, #0
 8009be2:	da03      	bge.n	8009bec <_printf_i+0xc8>
 8009be4:	232d      	movs	r3, #45	; 0x2d
 8009be6:	4276      	negs	r6, r6
 8009be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bec:	230a      	movs	r3, #10
 8009bee:	485e      	ldr	r0, [pc, #376]	; (8009d68 <_printf_i+0x244>)
 8009bf0:	e019      	b.n	8009c26 <_printf_i+0x102>
 8009bf2:	680e      	ldr	r6, [r1, #0]
 8009bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	bf18      	it	ne
 8009bfc:	b236      	sxthne	r6, r6
 8009bfe:	e7ef      	b.n	8009be0 <_printf_i+0xbc>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	6820      	ldr	r0, [r4, #0]
 8009c04:	1d19      	adds	r1, r3, #4
 8009c06:	6029      	str	r1, [r5, #0]
 8009c08:	0601      	lsls	r1, r0, #24
 8009c0a:	d501      	bpl.n	8009c10 <_printf_i+0xec>
 8009c0c:	681e      	ldr	r6, [r3, #0]
 8009c0e:	e002      	b.n	8009c16 <_printf_i+0xf2>
 8009c10:	0646      	lsls	r6, r0, #25
 8009c12:	d5fb      	bpl.n	8009c0c <_printf_i+0xe8>
 8009c14:	881e      	ldrh	r6, [r3, #0]
 8009c16:	2f6f      	cmp	r7, #111	; 0x6f
 8009c18:	bf0c      	ite	eq
 8009c1a:	2308      	moveq	r3, #8
 8009c1c:	230a      	movne	r3, #10
 8009c1e:	4852      	ldr	r0, [pc, #328]	; (8009d68 <_printf_i+0x244>)
 8009c20:	2100      	movs	r1, #0
 8009c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c26:	6865      	ldr	r5, [r4, #4]
 8009c28:	2d00      	cmp	r5, #0
 8009c2a:	bfa8      	it	ge
 8009c2c:	6821      	ldrge	r1, [r4, #0]
 8009c2e:	60a5      	str	r5, [r4, #8]
 8009c30:	bfa4      	itt	ge
 8009c32:	f021 0104 	bicge.w	r1, r1, #4
 8009c36:	6021      	strge	r1, [r4, #0]
 8009c38:	b90e      	cbnz	r6, 8009c3e <_printf_i+0x11a>
 8009c3a:	2d00      	cmp	r5, #0
 8009c3c:	d04d      	beq.n	8009cda <_printf_i+0x1b6>
 8009c3e:	4615      	mov	r5, r2
 8009c40:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c44:	fb03 6711 	mls	r7, r3, r1, r6
 8009c48:	5dc7      	ldrb	r7, [r0, r7]
 8009c4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c4e:	4637      	mov	r7, r6
 8009c50:	42bb      	cmp	r3, r7
 8009c52:	460e      	mov	r6, r1
 8009c54:	d9f4      	bls.n	8009c40 <_printf_i+0x11c>
 8009c56:	2b08      	cmp	r3, #8
 8009c58:	d10b      	bne.n	8009c72 <_printf_i+0x14e>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	07de      	lsls	r6, r3, #31
 8009c5e:	d508      	bpl.n	8009c72 <_printf_i+0x14e>
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	6861      	ldr	r1, [r4, #4]
 8009c64:	4299      	cmp	r1, r3
 8009c66:	bfde      	ittt	le
 8009c68:	2330      	movle	r3, #48	; 0x30
 8009c6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c72:	1b52      	subs	r2, r2, r5
 8009c74:	6122      	str	r2, [r4, #16]
 8009c76:	464b      	mov	r3, r9
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	f8cd a000 	str.w	sl, [sp]
 8009c80:	aa03      	add	r2, sp, #12
 8009c82:	f7ff fedf 	bl	8009a44 <_printf_common>
 8009c86:	3001      	adds	r0, #1
 8009c88:	d14c      	bne.n	8009d24 <_printf_i+0x200>
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8e:	b004      	add	sp, #16
 8009c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c94:	4834      	ldr	r0, [pc, #208]	; (8009d68 <_printf_i+0x244>)
 8009c96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c9a:	6829      	ldr	r1, [r5, #0]
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ca2:	6029      	str	r1, [r5, #0]
 8009ca4:	061d      	lsls	r5, r3, #24
 8009ca6:	d514      	bpl.n	8009cd2 <_printf_i+0x1ae>
 8009ca8:	07df      	lsls	r7, r3, #31
 8009caa:	bf44      	itt	mi
 8009cac:	f043 0320 	orrmi.w	r3, r3, #32
 8009cb0:	6023      	strmi	r3, [r4, #0]
 8009cb2:	b91e      	cbnz	r6, 8009cbc <_printf_i+0x198>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	f023 0320 	bic.w	r3, r3, #32
 8009cba:	6023      	str	r3, [r4, #0]
 8009cbc:	2310      	movs	r3, #16
 8009cbe:	e7af      	b.n	8009c20 <_printf_i+0xfc>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	f043 0320 	orr.w	r3, r3, #32
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	2378      	movs	r3, #120	; 0x78
 8009cca:	4828      	ldr	r0, [pc, #160]	; (8009d6c <_printf_i+0x248>)
 8009ccc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cd0:	e7e3      	b.n	8009c9a <_printf_i+0x176>
 8009cd2:	0659      	lsls	r1, r3, #25
 8009cd4:	bf48      	it	mi
 8009cd6:	b2b6      	uxthmi	r6, r6
 8009cd8:	e7e6      	b.n	8009ca8 <_printf_i+0x184>
 8009cda:	4615      	mov	r5, r2
 8009cdc:	e7bb      	b.n	8009c56 <_printf_i+0x132>
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	6826      	ldr	r6, [r4, #0]
 8009ce2:	1d18      	adds	r0, r3, #4
 8009ce4:	6961      	ldr	r1, [r4, #20]
 8009ce6:	6028      	str	r0, [r5, #0]
 8009ce8:	0635      	lsls	r5, r6, #24
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	d501      	bpl.n	8009cf2 <_printf_i+0x1ce>
 8009cee:	6019      	str	r1, [r3, #0]
 8009cf0:	e002      	b.n	8009cf8 <_printf_i+0x1d4>
 8009cf2:	0670      	lsls	r0, r6, #25
 8009cf4:	d5fb      	bpl.n	8009cee <_printf_i+0x1ca>
 8009cf6:	8019      	strh	r1, [r3, #0]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4615      	mov	r5, r2
 8009cfc:	6123      	str	r3, [r4, #16]
 8009cfe:	e7ba      	b.n	8009c76 <_printf_i+0x152>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	2100      	movs	r1, #0
 8009d04:	1d1a      	adds	r2, r3, #4
 8009d06:	602a      	str	r2, [r5, #0]
 8009d08:	681d      	ldr	r5, [r3, #0]
 8009d0a:	6862      	ldr	r2, [r4, #4]
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 ff21 	bl	800ab54 <memchr>
 8009d12:	b108      	cbz	r0, 8009d18 <_printf_i+0x1f4>
 8009d14:	1b40      	subs	r0, r0, r5
 8009d16:	6060      	str	r0, [r4, #4]
 8009d18:	6863      	ldr	r3, [r4, #4]
 8009d1a:	6123      	str	r3, [r4, #16]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d22:	e7a8      	b.n	8009c76 <_printf_i+0x152>
 8009d24:	462a      	mov	r2, r5
 8009d26:	4649      	mov	r1, r9
 8009d28:	4640      	mov	r0, r8
 8009d2a:	6923      	ldr	r3, [r4, #16]
 8009d2c:	47d0      	blx	sl
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d0ab      	beq.n	8009c8a <_printf_i+0x166>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	079b      	lsls	r3, r3, #30
 8009d36:	d413      	bmi.n	8009d60 <_printf_i+0x23c>
 8009d38:	68e0      	ldr	r0, [r4, #12]
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	4298      	cmp	r0, r3
 8009d3e:	bfb8      	it	lt
 8009d40:	4618      	movlt	r0, r3
 8009d42:	e7a4      	b.n	8009c8e <_printf_i+0x16a>
 8009d44:	2301      	movs	r3, #1
 8009d46:	4632      	mov	r2, r6
 8009d48:	4649      	mov	r1, r9
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	47d0      	blx	sl
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d09b      	beq.n	8009c8a <_printf_i+0x166>
 8009d52:	3501      	adds	r5, #1
 8009d54:	68e3      	ldr	r3, [r4, #12]
 8009d56:	9903      	ldr	r1, [sp, #12]
 8009d58:	1a5b      	subs	r3, r3, r1
 8009d5a:	42ab      	cmp	r3, r5
 8009d5c:	dcf2      	bgt.n	8009d44 <_printf_i+0x220>
 8009d5e:	e7eb      	b.n	8009d38 <_printf_i+0x214>
 8009d60:	2500      	movs	r5, #0
 8009d62:	f104 0619 	add.w	r6, r4, #25
 8009d66:	e7f5      	b.n	8009d54 <_printf_i+0x230>
 8009d68:	0800c5d6 	.word	0x0800c5d6
 8009d6c:	0800c5e7 	.word	0x0800c5e7

08009d70 <_sbrk_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	2300      	movs	r3, #0
 8009d74:	4d05      	ldr	r5, [pc, #20]	; (8009d8c <_sbrk_r+0x1c>)
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	602b      	str	r3, [r5, #0]
 8009d7c:	f7f9 fb08 	bl	8003390 <_sbrk>
 8009d80:	1c43      	adds	r3, r0, #1
 8009d82:	d102      	bne.n	8009d8a <_sbrk_r+0x1a>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	b103      	cbz	r3, 8009d8a <_sbrk_r+0x1a>
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	2000038c 	.word	0x2000038c

08009d90 <_raise_r>:
 8009d90:	291f      	cmp	r1, #31
 8009d92:	b538      	push	{r3, r4, r5, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	460d      	mov	r5, r1
 8009d98:	d904      	bls.n	8009da4 <_raise_r+0x14>
 8009d9a:	2316      	movs	r3, #22
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009da6:	b112      	cbz	r2, 8009dae <_raise_r+0x1e>
 8009da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dac:	b94b      	cbnz	r3, 8009dc2 <_raise_r+0x32>
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 f830 	bl	8009e14 <_getpid_r>
 8009db4:	462a      	mov	r2, r5
 8009db6:	4601      	mov	r1, r0
 8009db8:	4620      	mov	r0, r4
 8009dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dbe:	f000 b817 	b.w	8009df0 <_kill_r>
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d00a      	beq.n	8009ddc <_raise_r+0x4c>
 8009dc6:	1c59      	adds	r1, r3, #1
 8009dc8:	d103      	bne.n	8009dd2 <_raise_r+0x42>
 8009dca:	2316      	movs	r3, #22
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	2001      	movs	r0, #1
 8009dd0:	e7e7      	b.n	8009da2 <_raise_r+0x12>
 8009dd2:	2400      	movs	r4, #0
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dda:	4798      	blx	r3
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e7e0      	b.n	8009da2 <_raise_r+0x12>

08009de0 <raise>:
 8009de0:	4b02      	ldr	r3, [pc, #8]	; (8009dec <raise+0xc>)
 8009de2:	4601      	mov	r1, r0
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f7ff bfd3 	b.w	8009d90 <_raise_r>
 8009dea:	bf00      	nop
 8009dec:	2000000c 	.word	0x2000000c

08009df0 <_kill_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	2300      	movs	r3, #0
 8009df4:	4d06      	ldr	r5, [pc, #24]	; (8009e10 <_kill_r+0x20>)
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	f7f9 fa44 	bl	800328a <_kill>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d102      	bne.n	8009e0c <_kill_r+0x1c>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	b103      	cbz	r3, 8009e0c <_kill_r+0x1c>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	2000038c 	.word	0x2000038c

08009e14 <_getpid_r>:
 8009e14:	f7f9 ba32 	b.w	800327c <_getpid>

08009e18 <siprintf>:
 8009e18:	b40e      	push	{r1, r2, r3}
 8009e1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e1e:	b500      	push	{lr}
 8009e20:	b09c      	sub	sp, #112	; 0x70
 8009e22:	ab1d      	add	r3, sp, #116	; 0x74
 8009e24:	9002      	str	r0, [sp, #8]
 8009e26:	9006      	str	r0, [sp, #24]
 8009e28:	9107      	str	r1, [sp, #28]
 8009e2a:	9104      	str	r1, [sp, #16]
 8009e2c:	4808      	ldr	r0, [pc, #32]	; (8009e50 <siprintf+0x38>)
 8009e2e:	4909      	ldr	r1, [pc, #36]	; (8009e54 <siprintf+0x3c>)
 8009e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e34:	9105      	str	r1, [sp, #20]
 8009e36:	6800      	ldr	r0, [r0, #0]
 8009e38:	a902      	add	r1, sp, #8
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	f001 fa96 	bl	800b36c <_svfiprintf_r>
 8009e40:	2200      	movs	r2, #0
 8009e42:	9b02      	ldr	r3, [sp, #8]
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	b01c      	add	sp, #112	; 0x70
 8009e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e4c:	b003      	add	sp, #12
 8009e4e:	4770      	bx	lr
 8009e50:	2000000c 	.word	0x2000000c
 8009e54:	ffff0208 	.word	0xffff0208

08009e58 <quorem>:
 8009e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	6903      	ldr	r3, [r0, #16]
 8009e5e:	690c      	ldr	r4, [r1, #16]
 8009e60:	4607      	mov	r7, r0
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	f2c0 8082 	blt.w	8009f6c <quorem+0x114>
 8009e68:	3c01      	subs	r4, #1
 8009e6a:	f100 0514 	add.w	r5, r0, #20
 8009e6e:	f101 0814 	add.w	r8, r1, #20
 8009e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e80:	3301      	adds	r3, #1
 8009e82:	429a      	cmp	r2, r3
 8009e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e90:	d331      	bcc.n	8009ef6 <quorem+0x9e>
 8009e92:	f04f 0e00 	mov.w	lr, #0
 8009e96:	4640      	mov	r0, r8
 8009e98:	46ac      	mov	ip, r5
 8009e9a:	46f2      	mov	sl, lr
 8009e9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ea0:	b293      	uxth	r3, r2
 8009ea2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ea6:	0c12      	lsrs	r2, r2, #16
 8009ea8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	fb06 e202 	mla	r2, r6, r2, lr
 8009eb2:	ebaa 0303 	sub.w	r3, sl, r3
 8009eb6:	f8dc a000 	ldr.w	sl, [ip]
 8009eba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ebe:	fa1f fa8a 	uxth.w	sl, sl
 8009ec2:	4453      	add	r3, sl
 8009ec4:	f8dc a000 	ldr.w	sl, [ip]
 8009ec8:	b292      	uxth	r2, r2
 8009eca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ece:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ed8:	4581      	cmp	r9, r0
 8009eda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ede:	f84c 3b04 	str.w	r3, [ip], #4
 8009ee2:	d2db      	bcs.n	8009e9c <quorem+0x44>
 8009ee4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ee8:	b92b      	cbnz	r3, 8009ef6 <quorem+0x9e>
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	3b04      	subs	r3, #4
 8009eee:	429d      	cmp	r5, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	d32f      	bcc.n	8009f54 <quorem+0xfc>
 8009ef4:	613c      	str	r4, [r7, #16]
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f001 f8c4 	bl	800b084 <__mcmp>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	db25      	blt.n	8009f4c <quorem+0xf4>
 8009f00:	4628      	mov	r0, r5
 8009f02:	f04f 0c00 	mov.w	ip, #0
 8009f06:	3601      	adds	r6, #1
 8009f08:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f0c:	f8d0 e000 	ldr.w	lr, [r0]
 8009f10:	b28b      	uxth	r3, r1
 8009f12:	ebac 0303 	sub.w	r3, ip, r3
 8009f16:	fa1f f28e 	uxth.w	r2, lr
 8009f1a:	4413      	add	r3, r2
 8009f1c:	0c0a      	lsrs	r2, r1, #16
 8009f1e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f2c:	45c1      	cmp	r9, r8
 8009f2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f32:	f840 3b04 	str.w	r3, [r0], #4
 8009f36:	d2e7      	bcs.n	8009f08 <quorem+0xb0>
 8009f38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f40:	b922      	cbnz	r2, 8009f4c <quorem+0xf4>
 8009f42:	3b04      	subs	r3, #4
 8009f44:	429d      	cmp	r5, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	d30a      	bcc.n	8009f60 <quorem+0x108>
 8009f4a:	613c      	str	r4, [r7, #16]
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	b003      	add	sp, #12
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	6812      	ldr	r2, [r2, #0]
 8009f56:	3b04      	subs	r3, #4
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	d1cb      	bne.n	8009ef4 <quorem+0x9c>
 8009f5c:	3c01      	subs	r4, #1
 8009f5e:	e7c6      	b.n	8009eee <quorem+0x96>
 8009f60:	6812      	ldr	r2, [r2, #0]
 8009f62:	3b04      	subs	r3, #4
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	d1f0      	bne.n	8009f4a <quorem+0xf2>
 8009f68:	3c01      	subs	r4, #1
 8009f6a:	e7eb      	b.n	8009f44 <quorem+0xec>
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	e7ee      	b.n	8009f4e <quorem+0xf6>

08009f70 <_dtoa_r>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	4616      	mov	r6, r2
 8009f76:	461f      	mov	r7, r3
 8009f78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f7a:	b099      	sub	sp, #100	; 0x64
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009f86:	b974      	cbnz	r4, 8009fa6 <_dtoa_r+0x36>
 8009f88:	2010      	movs	r0, #16
 8009f8a:	f7ff f997 	bl	80092bc <malloc>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	6268      	str	r0, [r5, #36]	; 0x24
 8009f92:	b920      	cbnz	r0, 8009f9e <_dtoa_r+0x2e>
 8009f94:	21ea      	movs	r1, #234	; 0xea
 8009f96:	4ba8      	ldr	r3, [pc, #672]	; (800a238 <_dtoa_r+0x2c8>)
 8009f98:	48a8      	ldr	r0, [pc, #672]	; (800a23c <_dtoa_r+0x2cc>)
 8009f9a:	f001 fae7 	bl	800b56c <__assert_func>
 8009f9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fa2:	6004      	str	r4, [r0, #0]
 8009fa4:	60c4      	str	r4, [r0, #12]
 8009fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fa8:	6819      	ldr	r1, [r3, #0]
 8009faa:	b151      	cbz	r1, 8009fc2 <_dtoa_r+0x52>
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	2301      	movs	r3, #1
 8009fb0:	4093      	lsls	r3, r2
 8009fb2:	604a      	str	r2, [r1, #4]
 8009fb4:	608b      	str	r3, [r1, #8]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 fe26 	bl	800ac08 <_Bfree>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	1e3b      	subs	r3, r7, #0
 8009fc4:	bfaf      	iteee	ge
 8009fc6:	2300      	movge	r3, #0
 8009fc8:	2201      	movlt	r2, #1
 8009fca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fce:	9305      	strlt	r3, [sp, #20]
 8009fd0:	bfa8      	it	ge
 8009fd2:	f8c8 3000 	strge.w	r3, [r8]
 8009fd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009fda:	4b99      	ldr	r3, [pc, #612]	; (800a240 <_dtoa_r+0x2d0>)
 8009fdc:	bfb8      	it	lt
 8009fde:	f8c8 2000 	strlt.w	r2, [r8]
 8009fe2:	ea33 0309 	bics.w	r3, r3, r9
 8009fe6:	d119      	bne.n	800a01c <_dtoa_r+0xac>
 8009fe8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ff4:	4333      	orrs	r3, r6
 8009ff6:	f000 857f 	beq.w	800aaf8 <_dtoa_r+0xb88>
 8009ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ffc:	b953      	cbnz	r3, 800a014 <_dtoa_r+0xa4>
 8009ffe:	4b91      	ldr	r3, [pc, #580]	; (800a244 <_dtoa_r+0x2d4>)
 800a000:	e022      	b.n	800a048 <_dtoa_r+0xd8>
 800a002:	4b91      	ldr	r3, [pc, #580]	; (800a248 <_dtoa_r+0x2d8>)
 800a004:	9303      	str	r3, [sp, #12]
 800a006:	3308      	adds	r3, #8
 800a008:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	9803      	ldr	r0, [sp, #12]
 800a00e:	b019      	add	sp, #100	; 0x64
 800a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	4b8b      	ldr	r3, [pc, #556]	; (800a244 <_dtoa_r+0x2d4>)
 800a016:	9303      	str	r3, [sp, #12]
 800a018:	3303      	adds	r3, #3
 800a01a:	e7f5      	b.n	800a008 <_dtoa_r+0x98>
 800a01c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a020:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a028:	2200      	movs	r2, #0
 800a02a:	2300      	movs	r3, #0
 800a02c:	f7f6 fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 800a030:	4680      	mov	r8, r0
 800a032:	b158      	cbz	r0, 800a04c <_dtoa_r+0xdc>
 800a034:	2301      	movs	r3, #1
 800a036:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 8558 	beq.w	800aaf2 <_dtoa_r+0xb82>
 800a042:	4882      	ldr	r0, [pc, #520]	; (800a24c <_dtoa_r+0x2dc>)
 800a044:	6018      	str	r0, [r3, #0]
 800a046:	1e43      	subs	r3, r0, #1
 800a048:	9303      	str	r3, [sp, #12]
 800a04a:	e7df      	b.n	800a00c <_dtoa_r+0x9c>
 800a04c:	ab16      	add	r3, sp, #88	; 0x58
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	ab17      	add	r3, sp, #92	; 0x5c
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	4628      	mov	r0, r5
 800a056:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a05a:	f001 f8bb 	bl	800b1d4 <__d2b>
 800a05e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a062:	4683      	mov	fp, r0
 800a064:	2c00      	cmp	r4, #0
 800a066:	d07f      	beq.n	800a168 <_dtoa_r+0x1f8>
 800a068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a06e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a072:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a076:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a07a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a07e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a082:	2200      	movs	r2, #0
 800a084:	4b72      	ldr	r3, [pc, #456]	; (800a250 <_dtoa_r+0x2e0>)
 800a086:	f7f6 f86f 	bl	8000168 <__aeabi_dsub>
 800a08a:	a365      	add	r3, pc, #404	; (adr r3, 800a220 <_dtoa_r+0x2b0>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f7f6 fa22 	bl	80004d8 <__aeabi_dmul>
 800a094:	a364      	add	r3, pc, #400	; (adr r3, 800a228 <_dtoa_r+0x2b8>)
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f7f6 f867 	bl	800016c <__adddf3>
 800a09e:	4606      	mov	r6, r0
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	460f      	mov	r7, r1
 800a0a4:	f7f6 f9ae 	bl	8000404 <__aeabi_i2d>
 800a0a8:	a361      	add	r3, pc, #388	; (adr r3, 800a230 <_dtoa_r+0x2c0>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 fa13 	bl	80004d8 <__aeabi_dmul>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	f7f6 f857 	bl	800016c <__adddf3>
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	f7f6 fcb9 	bl	8000a38 <__aeabi_d2iz>
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4682      	mov	sl, r0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	f7f6 fc74 	bl	80009bc <__aeabi_dcmplt>
 800a0d4:	b148      	cbz	r0, 800a0ea <_dtoa_r+0x17a>
 800a0d6:	4650      	mov	r0, sl
 800a0d8:	f7f6 f994 	bl	8000404 <__aeabi_i2d>
 800a0dc:	4632      	mov	r2, r6
 800a0de:	463b      	mov	r3, r7
 800a0e0:	f7f6 fc62 	bl	80009a8 <__aeabi_dcmpeq>
 800a0e4:	b908      	cbnz	r0, 800a0ea <_dtoa_r+0x17a>
 800a0e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ea:	f1ba 0f16 	cmp.w	sl, #22
 800a0ee:	d858      	bhi.n	800a1a2 <_dtoa_r+0x232>
 800a0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0f4:	4b57      	ldr	r3, [pc, #348]	; (800a254 <_dtoa_r+0x2e4>)
 800a0f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	f7f6 fc5d 	bl	80009bc <__aeabi_dcmplt>
 800a102:	2800      	cmp	r0, #0
 800a104:	d04f      	beq.n	800a1a6 <_dtoa_r+0x236>
 800a106:	2300      	movs	r3, #0
 800a108:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a10c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a10e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a110:	1b1c      	subs	r4, r3, r4
 800a112:	1e63      	subs	r3, r4, #1
 800a114:	9309      	str	r3, [sp, #36]	; 0x24
 800a116:	bf49      	itett	mi
 800a118:	f1c4 0301 	rsbmi	r3, r4, #1
 800a11c:	2300      	movpl	r3, #0
 800a11e:	9306      	strmi	r3, [sp, #24]
 800a120:	2300      	movmi	r3, #0
 800a122:	bf54      	ite	pl
 800a124:	9306      	strpl	r3, [sp, #24]
 800a126:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a128:	f1ba 0f00 	cmp.w	sl, #0
 800a12c:	db3d      	blt.n	800a1aa <_dtoa_r+0x23a>
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a134:	4453      	add	r3, sl
 800a136:	9309      	str	r3, [sp, #36]	; 0x24
 800a138:	2300      	movs	r3, #0
 800a13a:	930a      	str	r3, [sp, #40]	; 0x28
 800a13c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a13e:	2b09      	cmp	r3, #9
 800a140:	f200 808c 	bhi.w	800a25c <_dtoa_r+0x2ec>
 800a144:	2b05      	cmp	r3, #5
 800a146:	bfc4      	itt	gt
 800a148:	3b04      	subgt	r3, #4
 800a14a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a14c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a14e:	bfc8      	it	gt
 800a150:	2400      	movgt	r4, #0
 800a152:	f1a3 0302 	sub.w	r3, r3, #2
 800a156:	bfd8      	it	le
 800a158:	2401      	movle	r4, #1
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	f200 808a 	bhi.w	800a274 <_dtoa_r+0x304>
 800a160:	e8df f003 	tbb	[pc, r3]
 800a164:	5b4d4f2d 	.word	0x5b4d4f2d
 800a168:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a16c:	441c      	add	r4, r3
 800a16e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a172:	2b20      	cmp	r3, #32
 800a174:	bfc3      	ittte	gt
 800a176:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a17a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a17e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a182:	f1c3 0320 	rsble	r3, r3, #32
 800a186:	bfc6      	itte	gt
 800a188:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a18c:	4318      	orrgt	r0, r3
 800a18e:	fa06 f003 	lslle.w	r0, r6, r3
 800a192:	f7f6 f927 	bl	80003e4 <__aeabi_ui2d>
 800a196:	2301      	movs	r3, #1
 800a198:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a19c:	3c01      	subs	r4, #1
 800a19e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1a0:	e76f      	b.n	800a082 <_dtoa_r+0x112>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e7b2      	b.n	800a10c <_dtoa_r+0x19c>
 800a1a6:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1a8:	e7b1      	b.n	800a10e <_dtoa_r+0x19e>
 800a1aa:	9b06      	ldr	r3, [sp, #24]
 800a1ac:	eba3 030a 	sub.w	r3, r3, sl
 800a1b0:	9306      	str	r3, [sp, #24]
 800a1b2:	f1ca 0300 	rsb	r3, sl, #0
 800a1b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	930e      	str	r3, [sp, #56]	; 0x38
 800a1bc:	e7be      	b.n	800a13c <_dtoa_r+0x1cc>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dc58      	bgt.n	800a27a <_dtoa_r+0x30a>
 800a1c8:	f04f 0901 	mov.w	r9, #1
 800a1cc:	464b      	mov	r3, r9
 800a1ce:	f8cd 9020 	str.w	r9, [sp, #32]
 800a1d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a1da:	6042      	str	r2, [r0, #4]
 800a1dc:	2204      	movs	r2, #4
 800a1de:	f102 0614 	add.w	r6, r2, #20
 800a1e2:	429e      	cmp	r6, r3
 800a1e4:	6841      	ldr	r1, [r0, #4]
 800a1e6:	d94e      	bls.n	800a286 <_dtoa_r+0x316>
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f000 fccd 	bl	800ab88 <_Balloc>
 800a1ee:	9003      	str	r0, [sp, #12]
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d14c      	bne.n	800a28e <_dtoa_r+0x31e>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1fa:	4b17      	ldr	r3, [pc, #92]	; (800a258 <_dtoa_r+0x2e8>)
 800a1fc:	e6cc      	b.n	8009f98 <_dtoa_r+0x28>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e7de      	b.n	800a1c0 <_dtoa_r+0x250>
 800a202:	2300      	movs	r3, #0
 800a204:	930b      	str	r3, [sp, #44]	; 0x2c
 800a206:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a208:	eb0a 0903 	add.w	r9, sl, r3
 800a20c:	f109 0301 	add.w	r3, r9, #1
 800a210:	2b01      	cmp	r3, #1
 800a212:	9308      	str	r3, [sp, #32]
 800a214:	bfb8      	it	lt
 800a216:	2301      	movlt	r3, #1
 800a218:	e7dd      	b.n	800a1d6 <_dtoa_r+0x266>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e7f2      	b.n	800a204 <_dtoa_r+0x294>
 800a21e:	bf00      	nop
 800a220:	636f4361 	.word	0x636f4361
 800a224:	3fd287a7 	.word	0x3fd287a7
 800a228:	8b60c8b3 	.word	0x8b60c8b3
 800a22c:	3fc68a28 	.word	0x3fc68a28
 800a230:	509f79fb 	.word	0x509f79fb
 800a234:	3fd34413 	.word	0x3fd34413
 800a238:	0800c605 	.word	0x0800c605
 800a23c:	0800c61c 	.word	0x0800c61c
 800a240:	7ff00000 	.word	0x7ff00000
 800a244:	0800c601 	.word	0x0800c601
 800a248:	0800c5f8 	.word	0x0800c5f8
 800a24c:	0800c5d5 	.word	0x0800c5d5
 800a250:	3ff80000 	.word	0x3ff80000
 800a254:	0800c710 	.word	0x0800c710
 800a258:	0800c677 	.word	0x0800c677
 800a25c:	2401      	movs	r4, #1
 800a25e:	2300      	movs	r3, #0
 800a260:	940b      	str	r4, [sp, #44]	; 0x2c
 800a262:	9322      	str	r3, [sp, #136]	; 0x88
 800a264:	f04f 39ff 	mov.w	r9, #4294967295
 800a268:	2200      	movs	r2, #0
 800a26a:	2312      	movs	r3, #18
 800a26c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a270:	9223      	str	r2, [sp, #140]	; 0x8c
 800a272:	e7b0      	b.n	800a1d6 <_dtoa_r+0x266>
 800a274:	2301      	movs	r3, #1
 800a276:	930b      	str	r3, [sp, #44]	; 0x2c
 800a278:	e7f4      	b.n	800a264 <_dtoa_r+0x2f4>
 800a27a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a27e:	464b      	mov	r3, r9
 800a280:	f8cd 9020 	str.w	r9, [sp, #32]
 800a284:	e7a7      	b.n	800a1d6 <_dtoa_r+0x266>
 800a286:	3101      	adds	r1, #1
 800a288:	6041      	str	r1, [r0, #4]
 800a28a:	0052      	lsls	r2, r2, #1
 800a28c:	e7a7      	b.n	800a1de <_dtoa_r+0x26e>
 800a28e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a290:	9a03      	ldr	r2, [sp, #12]
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	9b08      	ldr	r3, [sp, #32]
 800a296:	2b0e      	cmp	r3, #14
 800a298:	f200 80a8 	bhi.w	800a3ec <_dtoa_r+0x47c>
 800a29c:	2c00      	cmp	r4, #0
 800a29e:	f000 80a5 	beq.w	800a3ec <_dtoa_r+0x47c>
 800a2a2:	f1ba 0f00 	cmp.w	sl, #0
 800a2a6:	dd34      	ble.n	800a312 <_dtoa_r+0x3a2>
 800a2a8:	4a9a      	ldr	r2, [pc, #616]	; (800a514 <_dtoa_r+0x5a4>)
 800a2aa:	f00a 030f 	and.w	r3, sl, #15
 800a2ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2be:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a2c2:	d016      	beq.n	800a2f2 <_dtoa_r+0x382>
 800a2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2c8:	4b93      	ldr	r3, [pc, #588]	; (800a518 <_dtoa_r+0x5a8>)
 800a2ca:	2703      	movs	r7, #3
 800a2cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2d0:	f7f6 fa2c 	bl	800072c <__aeabi_ddiv>
 800a2d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2d8:	f004 040f 	and.w	r4, r4, #15
 800a2dc:	4e8e      	ldr	r6, [pc, #568]	; (800a518 <_dtoa_r+0x5a8>)
 800a2de:	b954      	cbnz	r4, 800a2f6 <_dtoa_r+0x386>
 800a2e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2e8:	f7f6 fa20 	bl	800072c <__aeabi_ddiv>
 800a2ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2f0:	e029      	b.n	800a346 <_dtoa_r+0x3d6>
 800a2f2:	2702      	movs	r7, #2
 800a2f4:	e7f2      	b.n	800a2dc <_dtoa_r+0x36c>
 800a2f6:	07e1      	lsls	r1, r4, #31
 800a2f8:	d508      	bpl.n	800a30c <_dtoa_r+0x39c>
 800a2fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a302:	f7f6 f8e9 	bl	80004d8 <__aeabi_dmul>
 800a306:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a30a:	3701      	adds	r7, #1
 800a30c:	1064      	asrs	r4, r4, #1
 800a30e:	3608      	adds	r6, #8
 800a310:	e7e5      	b.n	800a2de <_dtoa_r+0x36e>
 800a312:	f000 80a5 	beq.w	800a460 <_dtoa_r+0x4f0>
 800a316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a31a:	f1ca 0400 	rsb	r4, sl, #0
 800a31e:	4b7d      	ldr	r3, [pc, #500]	; (800a514 <_dtoa_r+0x5a4>)
 800a320:	f004 020f 	and.w	r2, r4, #15
 800a324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f7f6 f8d4 	bl	80004d8 <__aeabi_dmul>
 800a330:	2702      	movs	r7, #2
 800a332:	2300      	movs	r3, #0
 800a334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a338:	4e77      	ldr	r6, [pc, #476]	; (800a518 <_dtoa_r+0x5a8>)
 800a33a:	1124      	asrs	r4, r4, #4
 800a33c:	2c00      	cmp	r4, #0
 800a33e:	f040 8084 	bne.w	800a44a <_dtoa_r+0x4da>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1d2      	bne.n	800a2ec <_dtoa_r+0x37c>
 800a346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 808b 	beq.w	800a464 <_dtoa_r+0x4f4>
 800a34e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a352:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a356:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a35a:	2200      	movs	r2, #0
 800a35c:	4b6f      	ldr	r3, [pc, #444]	; (800a51c <_dtoa_r+0x5ac>)
 800a35e:	f7f6 fb2d 	bl	80009bc <__aeabi_dcmplt>
 800a362:	2800      	cmp	r0, #0
 800a364:	d07e      	beq.n	800a464 <_dtoa_r+0x4f4>
 800a366:	9b08      	ldr	r3, [sp, #32]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d07b      	beq.n	800a464 <_dtoa_r+0x4f4>
 800a36c:	f1b9 0f00 	cmp.w	r9, #0
 800a370:	dd38      	ble.n	800a3e4 <_dtoa_r+0x474>
 800a372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a376:	2200      	movs	r2, #0
 800a378:	4b69      	ldr	r3, [pc, #420]	; (800a520 <_dtoa_r+0x5b0>)
 800a37a:	f7f6 f8ad 	bl	80004d8 <__aeabi_dmul>
 800a37e:	464c      	mov	r4, r9
 800a380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a384:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a388:	3701      	adds	r7, #1
 800a38a:	4638      	mov	r0, r7
 800a38c:	f7f6 f83a 	bl	8000404 <__aeabi_i2d>
 800a390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a394:	f7f6 f8a0 	bl	80004d8 <__aeabi_dmul>
 800a398:	2200      	movs	r2, #0
 800a39a:	4b62      	ldr	r3, [pc, #392]	; (800a524 <_dtoa_r+0x5b4>)
 800a39c:	f7f5 fee6 	bl	800016c <__adddf3>
 800a3a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3a8:	9611      	str	r6, [sp, #68]	; 0x44
 800a3aa:	2c00      	cmp	r4, #0
 800a3ac:	d15d      	bne.n	800a46a <_dtoa_r+0x4fa>
 800a3ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4b5c      	ldr	r3, [pc, #368]	; (800a528 <_dtoa_r+0x5b8>)
 800a3b6:	f7f5 fed7 	bl	8000168 <__aeabi_dsub>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3c2:	4633      	mov	r3, r6
 800a3c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3c6:	f7f6 fb17 	bl	80009f8 <__aeabi_dcmpgt>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f040 829c 	bne.w	800a908 <_dtoa_r+0x998>
 800a3d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a3da:	f7f6 faef 	bl	80009bc <__aeabi_dcmplt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f040 8290 	bne.w	800a904 <_dtoa_r+0x994>
 800a3e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a3e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f2c0 8152 	blt.w	800a698 <_dtoa_r+0x728>
 800a3f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a3f8:	f300 814e 	bgt.w	800a698 <_dtoa_r+0x728>
 800a3fc:	4b45      	ldr	r3, [pc, #276]	; (800a514 <_dtoa_r+0x5a4>)
 800a3fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a402:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a406:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a40a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f280 80db 	bge.w	800a5c8 <_dtoa_r+0x658>
 800a412:	9b08      	ldr	r3, [sp, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f300 80d7 	bgt.w	800a5c8 <_dtoa_r+0x658>
 800a41a:	f040 8272 	bne.w	800a902 <_dtoa_r+0x992>
 800a41e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a422:	2200      	movs	r2, #0
 800a424:	4b40      	ldr	r3, [pc, #256]	; (800a528 <_dtoa_r+0x5b8>)
 800a426:	f7f6 f857 	bl	80004d8 <__aeabi_dmul>
 800a42a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42e:	f7f6 fad9 	bl	80009e4 <__aeabi_dcmpge>
 800a432:	9c08      	ldr	r4, [sp, #32]
 800a434:	4626      	mov	r6, r4
 800a436:	2800      	cmp	r0, #0
 800a438:	f040 8248 	bne.w	800a8cc <_dtoa_r+0x95c>
 800a43c:	2331      	movs	r3, #49	; 0x31
 800a43e:	9f03      	ldr	r7, [sp, #12]
 800a440:	f10a 0a01 	add.w	sl, sl, #1
 800a444:	f807 3b01 	strb.w	r3, [r7], #1
 800a448:	e244      	b.n	800a8d4 <_dtoa_r+0x964>
 800a44a:	07e2      	lsls	r2, r4, #31
 800a44c:	d505      	bpl.n	800a45a <_dtoa_r+0x4ea>
 800a44e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a452:	f7f6 f841 	bl	80004d8 <__aeabi_dmul>
 800a456:	2301      	movs	r3, #1
 800a458:	3701      	adds	r7, #1
 800a45a:	1064      	asrs	r4, r4, #1
 800a45c:	3608      	adds	r6, #8
 800a45e:	e76d      	b.n	800a33c <_dtoa_r+0x3cc>
 800a460:	2702      	movs	r7, #2
 800a462:	e770      	b.n	800a346 <_dtoa_r+0x3d6>
 800a464:	46d0      	mov	r8, sl
 800a466:	9c08      	ldr	r4, [sp, #32]
 800a468:	e78f      	b.n	800a38a <_dtoa_r+0x41a>
 800a46a:	9903      	ldr	r1, [sp, #12]
 800a46c:	4b29      	ldr	r3, [pc, #164]	; (800a514 <_dtoa_r+0x5a4>)
 800a46e:	4421      	add	r1, r4
 800a470:	9112      	str	r1, [sp, #72]	; 0x48
 800a472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a474:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a478:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a47c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a480:	2900      	cmp	r1, #0
 800a482:	d055      	beq.n	800a530 <_dtoa_r+0x5c0>
 800a484:	2000      	movs	r0, #0
 800a486:	4929      	ldr	r1, [pc, #164]	; (800a52c <_dtoa_r+0x5bc>)
 800a488:	f7f6 f950 	bl	800072c <__aeabi_ddiv>
 800a48c:	463b      	mov	r3, r7
 800a48e:	4632      	mov	r2, r6
 800a490:	f7f5 fe6a 	bl	8000168 <__aeabi_dsub>
 800a494:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a498:	9f03      	ldr	r7, [sp, #12]
 800a49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a49e:	f7f6 facb 	bl	8000a38 <__aeabi_d2iz>
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	f7f5 ffae 	bl	8000404 <__aeabi_i2d>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b0:	f7f5 fe5a 	bl	8000168 <__aeabi_dsub>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	3430      	adds	r4, #48	; 0x30
 800a4ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4c2:	f807 4b01 	strb.w	r4, [r7], #1
 800a4c6:	f7f6 fa79 	bl	80009bc <__aeabi_dcmplt>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d174      	bne.n	800a5b8 <_dtoa_r+0x648>
 800a4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	4911      	ldr	r1, [pc, #68]	; (800a51c <_dtoa_r+0x5ac>)
 800a4d6:	f7f5 fe47 	bl	8000168 <__aeabi_dsub>
 800a4da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4de:	f7f6 fa6d 	bl	80009bc <__aeabi_dcmplt>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	f040 80b7 	bne.w	800a656 <_dtoa_r+0x6e6>
 800a4e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4ea:	429f      	cmp	r7, r3
 800a4ec:	f43f af7a 	beq.w	800a3e4 <_dtoa_r+0x474>
 800a4f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <_dtoa_r+0x5b0>)
 800a4f8:	f7f5 ffee 	bl	80004d8 <__aeabi_dmul>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <_dtoa_r+0x5b0>)
 800a508:	f7f5 ffe6 	bl	80004d8 <__aeabi_dmul>
 800a50c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a510:	e7c3      	b.n	800a49a <_dtoa_r+0x52a>
 800a512:	bf00      	nop
 800a514:	0800c710 	.word	0x0800c710
 800a518:	0800c6e8 	.word	0x0800c6e8
 800a51c:	3ff00000 	.word	0x3ff00000
 800a520:	40240000 	.word	0x40240000
 800a524:	401c0000 	.word	0x401c0000
 800a528:	40140000 	.word	0x40140000
 800a52c:	3fe00000 	.word	0x3fe00000
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f5 ffd0 	bl	80004d8 <__aeabi_dmul>
 800a538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a53a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a53e:	9c03      	ldr	r4, [sp, #12]
 800a540:	9314      	str	r3, [sp, #80]	; 0x50
 800a542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a546:	f7f6 fa77 	bl	8000a38 <__aeabi_d2iz>
 800a54a:	9015      	str	r0, [sp, #84]	; 0x54
 800a54c:	f7f5 ff5a 	bl	8000404 <__aeabi_i2d>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a558:	f7f5 fe06 	bl	8000168 <__aeabi_dsub>
 800a55c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a55e:	4606      	mov	r6, r0
 800a560:	3330      	adds	r3, #48	; 0x30
 800a562:	f804 3b01 	strb.w	r3, [r4], #1
 800a566:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a568:	460f      	mov	r7, r1
 800a56a:	429c      	cmp	r4, r3
 800a56c:	f04f 0200 	mov.w	r2, #0
 800a570:	d124      	bne.n	800a5bc <_dtoa_r+0x64c>
 800a572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a576:	4bb0      	ldr	r3, [pc, #704]	; (800a838 <_dtoa_r+0x8c8>)
 800a578:	f7f5 fdf8 	bl	800016c <__adddf3>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	f7f6 fa38 	bl	80009f8 <__aeabi_dcmpgt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d163      	bne.n	800a654 <_dtoa_r+0x6e4>
 800a58c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a590:	2000      	movs	r0, #0
 800a592:	49a9      	ldr	r1, [pc, #676]	; (800a838 <_dtoa_r+0x8c8>)
 800a594:	f7f5 fde8 	bl	8000168 <__aeabi_dsub>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4630      	mov	r0, r6
 800a59e:	4639      	mov	r1, r7
 800a5a0:	f7f6 fa0c 	bl	80009bc <__aeabi_dcmplt>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f43f af1d 	beq.w	800a3e4 <_dtoa_r+0x474>
 800a5aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5ac:	1e7b      	subs	r3, r7, #1
 800a5ae:	9314      	str	r3, [sp, #80]	; 0x50
 800a5b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a5b4:	2b30      	cmp	r3, #48	; 0x30
 800a5b6:	d0f8      	beq.n	800a5aa <_dtoa_r+0x63a>
 800a5b8:	46c2      	mov	sl, r8
 800a5ba:	e03b      	b.n	800a634 <_dtoa_r+0x6c4>
 800a5bc:	4b9f      	ldr	r3, [pc, #636]	; (800a83c <_dtoa_r+0x8cc>)
 800a5be:	f7f5 ff8b 	bl	80004d8 <__aeabi_dmul>
 800a5c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5c6:	e7bc      	b.n	800a542 <_dtoa_r+0x5d2>
 800a5c8:	9f03      	ldr	r7, [sp, #12]
 800a5ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a5ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f6 f8a9 	bl	800072c <__aeabi_ddiv>
 800a5da:	f7f6 fa2d 	bl	8000a38 <__aeabi_d2iz>
 800a5de:	4604      	mov	r4, r0
 800a5e0:	f7f5 ff10 	bl	8000404 <__aeabi_i2d>
 800a5e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5e8:	f7f5 ff76 	bl	80004d8 <__aeabi_dmul>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	f7f5 fdb8 	bl	8000168 <__aeabi_dsub>
 800a5f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a5fc:	f807 6b01 	strb.w	r6, [r7], #1
 800a600:	9e03      	ldr	r6, [sp, #12]
 800a602:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a606:	1bbe      	subs	r6, r7, r6
 800a608:	45b4      	cmp	ip, r6
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	d136      	bne.n	800a67e <_dtoa_r+0x70e>
 800a610:	f7f5 fdac 	bl	800016c <__adddf3>
 800a614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a618:	4680      	mov	r8, r0
 800a61a:	4689      	mov	r9, r1
 800a61c:	f7f6 f9ec 	bl	80009f8 <__aeabi_dcmpgt>
 800a620:	bb58      	cbnz	r0, 800a67a <_dtoa_r+0x70a>
 800a622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a626:	4640      	mov	r0, r8
 800a628:	4649      	mov	r1, r9
 800a62a:	f7f6 f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800a62e:	b108      	cbz	r0, 800a634 <_dtoa_r+0x6c4>
 800a630:	07e1      	lsls	r1, r4, #31
 800a632:	d422      	bmi.n	800a67a <_dtoa_r+0x70a>
 800a634:	4628      	mov	r0, r5
 800a636:	4659      	mov	r1, fp
 800a638:	f000 fae6 	bl	800ac08 <_Bfree>
 800a63c:	2300      	movs	r3, #0
 800a63e:	703b      	strb	r3, [r7, #0]
 800a640:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a642:	f10a 0001 	add.w	r0, sl, #1
 800a646:	6018      	str	r0, [r3, #0]
 800a648:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f43f acde 	beq.w	800a00c <_dtoa_r+0x9c>
 800a650:	601f      	str	r7, [r3, #0]
 800a652:	e4db      	b.n	800a00c <_dtoa_r+0x9c>
 800a654:	4627      	mov	r7, r4
 800a656:	463b      	mov	r3, r7
 800a658:	461f      	mov	r7, r3
 800a65a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a65e:	2a39      	cmp	r2, #57	; 0x39
 800a660:	d107      	bne.n	800a672 <_dtoa_r+0x702>
 800a662:	9a03      	ldr	r2, [sp, #12]
 800a664:	429a      	cmp	r2, r3
 800a666:	d1f7      	bne.n	800a658 <_dtoa_r+0x6e8>
 800a668:	2230      	movs	r2, #48	; 0x30
 800a66a:	9903      	ldr	r1, [sp, #12]
 800a66c:	f108 0801 	add.w	r8, r8, #1
 800a670:	700a      	strb	r2, [r1, #0]
 800a672:	781a      	ldrb	r2, [r3, #0]
 800a674:	3201      	adds	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
 800a678:	e79e      	b.n	800a5b8 <_dtoa_r+0x648>
 800a67a:	46d0      	mov	r8, sl
 800a67c:	e7eb      	b.n	800a656 <_dtoa_r+0x6e6>
 800a67e:	2200      	movs	r2, #0
 800a680:	4b6e      	ldr	r3, [pc, #440]	; (800a83c <_dtoa_r+0x8cc>)
 800a682:	f7f5 ff29 	bl	80004d8 <__aeabi_dmul>
 800a686:	2200      	movs	r2, #0
 800a688:	2300      	movs	r3, #0
 800a68a:	4680      	mov	r8, r0
 800a68c:	4689      	mov	r9, r1
 800a68e:	f7f6 f98b 	bl	80009a8 <__aeabi_dcmpeq>
 800a692:	2800      	cmp	r0, #0
 800a694:	d09b      	beq.n	800a5ce <_dtoa_r+0x65e>
 800a696:	e7cd      	b.n	800a634 <_dtoa_r+0x6c4>
 800a698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	f000 80d0 	beq.w	800a840 <_dtoa_r+0x8d0>
 800a6a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6a2:	2a01      	cmp	r2, #1
 800a6a4:	f300 80ae 	bgt.w	800a804 <_dtoa_r+0x894>
 800a6a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	f000 80a6 	beq.w	800a7fc <_dtoa_r+0x88c>
 800a6b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6b6:	9f06      	ldr	r7, [sp, #24]
 800a6b8:	9a06      	ldr	r2, [sp, #24]
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	441a      	add	r2, r3
 800a6be:	9206      	str	r2, [sp, #24]
 800a6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	441a      	add	r2, r3
 800a6c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6c8:	f000 fb54 	bl	800ad74 <__i2b>
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	dd0c      	ble.n	800a6ec <_dtoa_r+0x77c>
 800a6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd09      	ble.n	800a6ec <_dtoa_r+0x77c>
 800a6d8:	42bb      	cmp	r3, r7
 800a6da:	bfa8      	it	ge
 800a6dc:	463b      	movge	r3, r7
 800a6de:	9a06      	ldr	r2, [sp, #24]
 800a6e0:	1aff      	subs	r7, r7, r3
 800a6e2:	1ad2      	subs	r2, r2, r3
 800a6e4:	9206      	str	r2, [sp, #24]
 800a6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ee:	b1f3      	cbz	r3, 800a72e <_dtoa_r+0x7be>
 800a6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 80a8 	beq.w	800a848 <_dtoa_r+0x8d8>
 800a6f8:	2c00      	cmp	r4, #0
 800a6fa:	dd10      	ble.n	800a71e <_dtoa_r+0x7ae>
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4622      	mov	r2, r4
 800a700:	4628      	mov	r0, r5
 800a702:	f000 fbf5 	bl	800aef0 <__pow5mult>
 800a706:	465a      	mov	r2, fp
 800a708:	4601      	mov	r1, r0
 800a70a:	4606      	mov	r6, r0
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 fb47 	bl	800ada0 <__multiply>
 800a712:	4680      	mov	r8, r0
 800a714:	4659      	mov	r1, fp
 800a716:	4628      	mov	r0, r5
 800a718:	f000 fa76 	bl	800ac08 <_Bfree>
 800a71c:	46c3      	mov	fp, r8
 800a71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a720:	1b1a      	subs	r2, r3, r4
 800a722:	d004      	beq.n	800a72e <_dtoa_r+0x7be>
 800a724:	4659      	mov	r1, fp
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fbe2 	bl	800aef0 <__pow5mult>
 800a72c:	4683      	mov	fp, r0
 800a72e:	2101      	movs	r1, #1
 800a730:	4628      	mov	r0, r5
 800a732:	f000 fb1f 	bl	800ad74 <__i2b>
 800a736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a738:	4604      	mov	r4, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f340 8086 	ble.w	800a84c <_dtoa_r+0x8dc>
 800a740:	461a      	mov	r2, r3
 800a742:	4601      	mov	r1, r0
 800a744:	4628      	mov	r0, r5
 800a746:	f000 fbd3 	bl	800aef0 <__pow5mult>
 800a74a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a74c:	4604      	mov	r4, r0
 800a74e:	2b01      	cmp	r3, #1
 800a750:	dd7f      	ble.n	800a852 <_dtoa_r+0x8e2>
 800a752:	f04f 0800 	mov.w	r8, #0
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a75c:	6918      	ldr	r0, [r3, #16]
 800a75e:	f000 fabb 	bl	800acd8 <__hi0bits>
 800a762:	f1c0 0020 	rsb	r0, r0, #32
 800a766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a768:	4418      	add	r0, r3
 800a76a:	f010 001f 	ands.w	r0, r0, #31
 800a76e:	f000 8092 	beq.w	800a896 <_dtoa_r+0x926>
 800a772:	f1c0 0320 	rsb	r3, r0, #32
 800a776:	2b04      	cmp	r3, #4
 800a778:	f340 808a 	ble.w	800a890 <_dtoa_r+0x920>
 800a77c:	f1c0 001c 	rsb	r0, r0, #28
 800a780:	9b06      	ldr	r3, [sp, #24]
 800a782:	4407      	add	r7, r0
 800a784:	4403      	add	r3, r0
 800a786:	9306      	str	r3, [sp, #24]
 800a788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78a:	4403      	add	r3, r0
 800a78c:	9309      	str	r3, [sp, #36]	; 0x24
 800a78e:	9b06      	ldr	r3, [sp, #24]
 800a790:	2b00      	cmp	r3, #0
 800a792:	dd05      	ble.n	800a7a0 <_dtoa_r+0x830>
 800a794:	4659      	mov	r1, fp
 800a796:	461a      	mov	r2, r3
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 fc03 	bl	800afa4 <__lshift>
 800a79e:	4683      	mov	fp, r0
 800a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	dd05      	ble.n	800a7b2 <_dtoa_r+0x842>
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f000 fbfa 	bl	800afa4 <__lshift>
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d070      	beq.n	800a89a <_dtoa_r+0x92a>
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f000 fc62 	bl	800b084 <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	da6a      	bge.n	800a89a <_dtoa_r+0x92a>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	220a      	movs	r2, #10
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f000 fa3e 	bl	800ac4c <__multadd>
 800a7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d2:	4683      	mov	fp, r0
 800a7d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 8194 	beq.w	800ab06 <_dtoa_r+0xb96>
 800a7de:	4631      	mov	r1, r6
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	220a      	movs	r2, #10
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f000 fa31 	bl	800ac4c <__multadd>
 800a7ea:	f1b9 0f00 	cmp.w	r9, #0
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	f300 8093 	bgt.w	800a91a <_dtoa_r+0x9aa>
 800a7f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	dc57      	bgt.n	800a8aa <_dtoa_r+0x93a>
 800a7fa:	e08e      	b.n	800a91a <_dtoa_r+0x9aa>
 800a7fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a802:	e757      	b.n	800a6b4 <_dtoa_r+0x744>
 800a804:	9b08      	ldr	r3, [sp, #32]
 800a806:	1e5c      	subs	r4, r3, #1
 800a808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80a:	42a3      	cmp	r3, r4
 800a80c:	bfb7      	itett	lt
 800a80e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a810:	1b1c      	subge	r4, r3, r4
 800a812:	1ae2      	sublt	r2, r4, r3
 800a814:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a816:	bfbe      	ittt	lt
 800a818:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a81a:	189b      	addlt	r3, r3, r2
 800a81c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a81e:	9b08      	ldr	r3, [sp, #32]
 800a820:	bfb8      	it	lt
 800a822:	2400      	movlt	r4, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfbb      	ittet	lt
 800a828:	9b06      	ldrlt	r3, [sp, #24]
 800a82a:	9a08      	ldrlt	r2, [sp, #32]
 800a82c:	9f06      	ldrge	r7, [sp, #24]
 800a82e:	1a9f      	sublt	r7, r3, r2
 800a830:	bfac      	ite	ge
 800a832:	9b08      	ldrge	r3, [sp, #32]
 800a834:	2300      	movlt	r3, #0
 800a836:	e73f      	b.n	800a6b8 <_dtoa_r+0x748>
 800a838:	3fe00000 	.word	0x3fe00000
 800a83c:	40240000 	.word	0x40240000
 800a840:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a842:	9f06      	ldr	r7, [sp, #24]
 800a844:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a846:	e742      	b.n	800a6ce <_dtoa_r+0x75e>
 800a848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a84a:	e76b      	b.n	800a724 <_dtoa_r+0x7b4>
 800a84c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a84e:	2b01      	cmp	r3, #1
 800a850:	dc19      	bgt.n	800a886 <_dtoa_r+0x916>
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	b9bb      	cbnz	r3, 800a886 <_dtoa_r+0x916>
 800a856:	9b05      	ldr	r3, [sp, #20]
 800a858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a85c:	b99b      	cbnz	r3, 800a886 <_dtoa_r+0x916>
 800a85e:	9b05      	ldr	r3, [sp, #20]
 800a860:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a864:	0d1b      	lsrs	r3, r3, #20
 800a866:	051b      	lsls	r3, r3, #20
 800a868:	b183      	cbz	r3, 800a88c <_dtoa_r+0x91c>
 800a86a:	f04f 0801 	mov.w	r8, #1
 800a86e:	9b06      	ldr	r3, [sp, #24]
 800a870:	3301      	adds	r3, #1
 800a872:	9306      	str	r3, [sp, #24]
 800a874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a876:	3301      	adds	r3, #1
 800a878:	9309      	str	r3, [sp, #36]	; 0x24
 800a87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f47f af6a 	bne.w	800a756 <_dtoa_r+0x7e6>
 800a882:	2001      	movs	r0, #1
 800a884:	e76f      	b.n	800a766 <_dtoa_r+0x7f6>
 800a886:	f04f 0800 	mov.w	r8, #0
 800a88a:	e7f6      	b.n	800a87a <_dtoa_r+0x90a>
 800a88c:	4698      	mov	r8, r3
 800a88e:	e7f4      	b.n	800a87a <_dtoa_r+0x90a>
 800a890:	f43f af7d 	beq.w	800a78e <_dtoa_r+0x81e>
 800a894:	4618      	mov	r0, r3
 800a896:	301c      	adds	r0, #28
 800a898:	e772      	b.n	800a780 <_dtoa_r+0x810>
 800a89a:	9b08      	ldr	r3, [sp, #32]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dc36      	bgt.n	800a90e <_dtoa_r+0x99e>
 800a8a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	dd33      	ble.n	800a90e <_dtoa_r+0x99e>
 800a8a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8aa:	f1b9 0f00 	cmp.w	r9, #0
 800a8ae:	d10d      	bne.n	800a8cc <_dtoa_r+0x95c>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 f9c8 	bl	800ac4c <__multadd>
 800a8bc:	4601      	mov	r1, r0
 800a8be:	4604      	mov	r4, r0
 800a8c0:	4658      	mov	r0, fp
 800a8c2:	f000 fbdf 	bl	800b084 <__mcmp>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f73f adb8 	bgt.w	800a43c <_dtoa_r+0x4cc>
 800a8cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8ce:	9f03      	ldr	r7, [sp, #12]
 800a8d0:	ea6f 0a03 	mvn.w	sl, r3
 800a8d4:	f04f 0800 	mov.w	r8, #0
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 f994 	bl	800ac08 <_Bfree>
 800a8e0:	2e00      	cmp	r6, #0
 800a8e2:	f43f aea7 	beq.w	800a634 <_dtoa_r+0x6c4>
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	d005      	beq.n	800a8f8 <_dtoa_r+0x988>
 800a8ec:	45b0      	cmp	r8, r6
 800a8ee:	d003      	beq.n	800a8f8 <_dtoa_r+0x988>
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 f988 	bl	800ac08 <_Bfree>
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 f984 	bl	800ac08 <_Bfree>
 800a900:	e698      	b.n	800a634 <_dtoa_r+0x6c4>
 800a902:	2400      	movs	r4, #0
 800a904:	4626      	mov	r6, r4
 800a906:	e7e1      	b.n	800a8cc <_dtoa_r+0x95c>
 800a908:	46c2      	mov	sl, r8
 800a90a:	4626      	mov	r6, r4
 800a90c:	e596      	b.n	800a43c <_dtoa_r+0x4cc>
 800a90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 80fd 	beq.w	800ab14 <_dtoa_r+0xba4>
 800a91a:	2f00      	cmp	r7, #0
 800a91c:	dd05      	ble.n	800a92a <_dtoa_r+0x9ba>
 800a91e:	4631      	mov	r1, r6
 800a920:	463a      	mov	r2, r7
 800a922:	4628      	mov	r0, r5
 800a924:	f000 fb3e 	bl	800afa4 <__lshift>
 800a928:	4606      	mov	r6, r0
 800a92a:	f1b8 0f00 	cmp.w	r8, #0
 800a92e:	d05c      	beq.n	800a9ea <_dtoa_r+0xa7a>
 800a930:	4628      	mov	r0, r5
 800a932:	6871      	ldr	r1, [r6, #4]
 800a934:	f000 f928 	bl	800ab88 <_Balloc>
 800a938:	4607      	mov	r7, r0
 800a93a:	b928      	cbnz	r0, 800a948 <_dtoa_r+0x9d8>
 800a93c:	4602      	mov	r2, r0
 800a93e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a942:	4b7f      	ldr	r3, [pc, #508]	; (800ab40 <_dtoa_r+0xbd0>)
 800a944:	f7ff bb28 	b.w	8009f98 <_dtoa_r+0x28>
 800a948:	6932      	ldr	r2, [r6, #16]
 800a94a:	f106 010c 	add.w	r1, r6, #12
 800a94e:	3202      	adds	r2, #2
 800a950:	0092      	lsls	r2, r2, #2
 800a952:	300c      	adds	r0, #12
 800a954:	f7fe fcba 	bl	80092cc <memcpy>
 800a958:	2201      	movs	r2, #1
 800a95a:	4639      	mov	r1, r7
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 fb21 	bl	800afa4 <__lshift>
 800a962:	46b0      	mov	r8, r6
 800a964:	4606      	mov	r6, r0
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	9308      	str	r3, [sp, #32]
 800a96c:	9b03      	ldr	r3, [sp, #12]
 800a96e:	444b      	add	r3, r9
 800a970:	930a      	str	r3, [sp, #40]	; 0x28
 800a972:	9b04      	ldr	r3, [sp, #16]
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	9309      	str	r3, [sp, #36]	; 0x24
 800a97a:	9b08      	ldr	r3, [sp, #32]
 800a97c:	4621      	mov	r1, r4
 800a97e:	3b01      	subs	r3, #1
 800a980:	4658      	mov	r0, fp
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	f7ff fa68 	bl	8009e58 <quorem>
 800a988:	4603      	mov	r3, r0
 800a98a:	4641      	mov	r1, r8
 800a98c:	3330      	adds	r3, #48	; 0x30
 800a98e:	9006      	str	r0, [sp, #24]
 800a990:	4658      	mov	r0, fp
 800a992:	930b      	str	r3, [sp, #44]	; 0x2c
 800a994:	f000 fb76 	bl	800b084 <__mcmp>
 800a998:	4632      	mov	r2, r6
 800a99a:	4681      	mov	r9, r0
 800a99c:	4621      	mov	r1, r4
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 fb8c 	bl	800b0bc <__mdiff>
 800a9a4:	68c2      	ldr	r2, [r0, #12]
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9aa:	bb02      	cbnz	r2, 800a9ee <_dtoa_r+0xa7e>
 800a9ac:	4601      	mov	r1, r0
 800a9ae:	4658      	mov	r0, fp
 800a9b0:	f000 fb68 	bl	800b084 <__mcmp>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a9c0:	f000 f922 	bl	800ac08 <_Bfree>
 800a9c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9c8:	9f08      	ldr	r7, [sp, #32]
 800a9ca:	ea43 0102 	orr.w	r1, r3, r2
 800a9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d4:	d10d      	bne.n	800a9f2 <_dtoa_r+0xa82>
 800a9d6:	2b39      	cmp	r3, #57	; 0x39
 800a9d8:	d029      	beq.n	800aa2e <_dtoa_r+0xabe>
 800a9da:	f1b9 0f00 	cmp.w	r9, #0
 800a9de:	dd01      	ble.n	800a9e4 <_dtoa_r+0xa74>
 800a9e0:	9b06      	ldr	r3, [sp, #24]
 800a9e2:	3331      	adds	r3, #49	; 0x31
 800a9e4:	9a04      	ldr	r2, [sp, #16]
 800a9e6:	7013      	strb	r3, [r2, #0]
 800a9e8:	e776      	b.n	800a8d8 <_dtoa_r+0x968>
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	e7b9      	b.n	800a962 <_dtoa_r+0x9f2>
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	e7e2      	b.n	800a9b8 <_dtoa_r+0xa48>
 800a9f2:	f1b9 0f00 	cmp.w	r9, #0
 800a9f6:	db06      	blt.n	800aa06 <_dtoa_r+0xa96>
 800a9f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a9fa:	ea41 0909 	orr.w	r9, r1, r9
 800a9fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa00:	ea59 0101 	orrs.w	r1, r9, r1
 800aa04:	d120      	bne.n	800aa48 <_dtoa_r+0xad8>
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	ddec      	ble.n	800a9e4 <_dtoa_r+0xa74>
 800aa0a:	4659      	mov	r1, fp
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4628      	mov	r0, r5
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	f000 fac7 	bl	800afa4 <__lshift>
 800aa16:	4621      	mov	r1, r4
 800aa18:	4683      	mov	fp, r0
 800aa1a:	f000 fb33 	bl	800b084 <__mcmp>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	9b08      	ldr	r3, [sp, #32]
 800aa22:	dc02      	bgt.n	800aa2a <_dtoa_r+0xaba>
 800aa24:	d1de      	bne.n	800a9e4 <_dtoa_r+0xa74>
 800aa26:	07da      	lsls	r2, r3, #31
 800aa28:	d5dc      	bpl.n	800a9e4 <_dtoa_r+0xa74>
 800aa2a:	2b39      	cmp	r3, #57	; 0x39
 800aa2c:	d1d8      	bne.n	800a9e0 <_dtoa_r+0xa70>
 800aa2e:	2339      	movs	r3, #57	; 0x39
 800aa30:	9a04      	ldr	r2, [sp, #16]
 800aa32:	7013      	strb	r3, [r2, #0]
 800aa34:	463b      	mov	r3, r7
 800aa36:	461f      	mov	r7, r3
 800aa38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	2a39      	cmp	r2, #57	; 0x39
 800aa40:	d050      	beq.n	800aae4 <_dtoa_r+0xb74>
 800aa42:	3201      	adds	r2, #1
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	e747      	b.n	800a8d8 <_dtoa_r+0x968>
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	dd03      	ble.n	800aa54 <_dtoa_r+0xae4>
 800aa4c:	2b39      	cmp	r3, #57	; 0x39
 800aa4e:	d0ee      	beq.n	800aa2e <_dtoa_r+0xabe>
 800aa50:	3301      	adds	r3, #1
 800aa52:	e7c7      	b.n	800a9e4 <_dtoa_r+0xa74>
 800aa54:	9a08      	ldr	r2, [sp, #32]
 800aa56:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa58:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa5c:	428a      	cmp	r2, r1
 800aa5e:	d02a      	beq.n	800aab6 <_dtoa_r+0xb46>
 800aa60:	4659      	mov	r1, fp
 800aa62:	2300      	movs	r3, #0
 800aa64:	220a      	movs	r2, #10
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f8f0 	bl	800ac4c <__multadd>
 800aa6c:	45b0      	cmp	r8, r6
 800aa6e:	4683      	mov	fp, r0
 800aa70:	f04f 0300 	mov.w	r3, #0
 800aa74:	f04f 020a 	mov.w	r2, #10
 800aa78:	4641      	mov	r1, r8
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	d107      	bne.n	800aa8e <_dtoa_r+0xb1e>
 800aa7e:	f000 f8e5 	bl	800ac4c <__multadd>
 800aa82:	4680      	mov	r8, r0
 800aa84:	4606      	mov	r6, r0
 800aa86:	9b08      	ldr	r3, [sp, #32]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	9308      	str	r3, [sp, #32]
 800aa8c:	e775      	b.n	800a97a <_dtoa_r+0xa0a>
 800aa8e:	f000 f8dd 	bl	800ac4c <__multadd>
 800aa92:	4631      	mov	r1, r6
 800aa94:	4680      	mov	r8, r0
 800aa96:	2300      	movs	r3, #0
 800aa98:	220a      	movs	r2, #10
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f000 f8d6 	bl	800ac4c <__multadd>
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	e7f0      	b.n	800aa86 <_dtoa_r+0xb16>
 800aaa4:	f1b9 0f00 	cmp.w	r9, #0
 800aaa8:	bfcc      	ite	gt
 800aaaa:	464f      	movgt	r7, r9
 800aaac:	2701      	movle	r7, #1
 800aaae:	f04f 0800 	mov.w	r8, #0
 800aab2:	9a03      	ldr	r2, [sp, #12]
 800aab4:	4417      	add	r7, r2
 800aab6:	4659      	mov	r1, fp
 800aab8:	2201      	movs	r2, #1
 800aaba:	4628      	mov	r0, r5
 800aabc:	9308      	str	r3, [sp, #32]
 800aabe:	f000 fa71 	bl	800afa4 <__lshift>
 800aac2:	4621      	mov	r1, r4
 800aac4:	4683      	mov	fp, r0
 800aac6:	f000 fadd 	bl	800b084 <__mcmp>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	dcb2      	bgt.n	800aa34 <_dtoa_r+0xac4>
 800aace:	d102      	bne.n	800aad6 <_dtoa_r+0xb66>
 800aad0:	9b08      	ldr	r3, [sp, #32]
 800aad2:	07db      	lsls	r3, r3, #31
 800aad4:	d4ae      	bmi.n	800aa34 <_dtoa_r+0xac4>
 800aad6:	463b      	mov	r3, r7
 800aad8:	461f      	mov	r7, r3
 800aada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aade:	2a30      	cmp	r2, #48	; 0x30
 800aae0:	d0fa      	beq.n	800aad8 <_dtoa_r+0xb68>
 800aae2:	e6f9      	b.n	800a8d8 <_dtoa_r+0x968>
 800aae4:	9a03      	ldr	r2, [sp, #12]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d1a5      	bne.n	800aa36 <_dtoa_r+0xac6>
 800aaea:	2331      	movs	r3, #49	; 0x31
 800aaec:	f10a 0a01 	add.w	sl, sl, #1
 800aaf0:	e779      	b.n	800a9e6 <_dtoa_r+0xa76>
 800aaf2:	4b14      	ldr	r3, [pc, #80]	; (800ab44 <_dtoa_r+0xbd4>)
 800aaf4:	f7ff baa8 	b.w	800a048 <_dtoa_r+0xd8>
 800aaf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f47f aa81 	bne.w	800a002 <_dtoa_r+0x92>
 800ab00:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <_dtoa_r+0xbd8>)
 800ab02:	f7ff baa1 	b.w	800a048 <_dtoa_r+0xd8>
 800ab06:	f1b9 0f00 	cmp.w	r9, #0
 800ab0a:	dc03      	bgt.n	800ab14 <_dtoa_r+0xba4>
 800ab0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	f73f aecb 	bgt.w	800a8aa <_dtoa_r+0x93a>
 800ab14:	9f03      	ldr	r7, [sp, #12]
 800ab16:	4621      	mov	r1, r4
 800ab18:	4658      	mov	r0, fp
 800ab1a:	f7ff f99d 	bl	8009e58 <quorem>
 800ab1e:	9a03      	ldr	r2, [sp, #12]
 800ab20:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab24:	f807 3b01 	strb.w	r3, [r7], #1
 800ab28:	1aba      	subs	r2, r7, r2
 800ab2a:	4591      	cmp	r9, r2
 800ab2c:	ddba      	ble.n	800aaa4 <_dtoa_r+0xb34>
 800ab2e:	4659      	mov	r1, fp
 800ab30:	2300      	movs	r3, #0
 800ab32:	220a      	movs	r2, #10
 800ab34:	4628      	mov	r0, r5
 800ab36:	f000 f889 	bl	800ac4c <__multadd>
 800ab3a:	4683      	mov	fp, r0
 800ab3c:	e7eb      	b.n	800ab16 <_dtoa_r+0xba6>
 800ab3e:	bf00      	nop
 800ab40:	0800c677 	.word	0x0800c677
 800ab44:	0800c5d4 	.word	0x0800c5d4
 800ab48:	0800c5f8 	.word	0x0800c5f8

0800ab4c <_localeconv_r>:
 800ab4c:	4800      	ldr	r0, [pc, #0]	; (800ab50 <_localeconv_r+0x4>)
 800ab4e:	4770      	bx	lr
 800ab50:	20000160 	.word	0x20000160

0800ab54 <memchr>:
 800ab54:	4603      	mov	r3, r0
 800ab56:	b510      	push	{r4, lr}
 800ab58:	b2c9      	uxtb	r1, r1
 800ab5a:	4402      	add	r2, r0
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	d101      	bne.n	800ab66 <memchr+0x12>
 800ab62:	2000      	movs	r0, #0
 800ab64:	e003      	b.n	800ab6e <memchr+0x1a>
 800ab66:	7804      	ldrb	r4, [r0, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	428c      	cmp	r4, r1
 800ab6c:	d1f6      	bne.n	800ab5c <memchr+0x8>
 800ab6e:	bd10      	pop	{r4, pc}

0800ab70 <__malloc_lock>:
 800ab70:	4801      	ldr	r0, [pc, #4]	; (800ab78 <__malloc_lock+0x8>)
 800ab72:	f000 bd2c 	b.w	800b5ce <__retarget_lock_acquire_recursive>
 800ab76:	bf00      	nop
 800ab78:	20000390 	.word	0x20000390

0800ab7c <__malloc_unlock>:
 800ab7c:	4801      	ldr	r0, [pc, #4]	; (800ab84 <__malloc_unlock+0x8>)
 800ab7e:	f000 bd27 	b.w	800b5d0 <__retarget_lock_release_recursive>
 800ab82:	bf00      	nop
 800ab84:	20000390 	.word	0x20000390

0800ab88 <_Balloc>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	b976      	cbnz	r6, 800abb0 <_Balloc+0x28>
 800ab92:	2010      	movs	r0, #16
 800ab94:	f7fe fb92 	bl	80092bc <malloc>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab9c:	b920      	cbnz	r0, 800aba8 <_Balloc+0x20>
 800ab9e:	2166      	movs	r1, #102	; 0x66
 800aba0:	4b17      	ldr	r3, [pc, #92]	; (800ac00 <_Balloc+0x78>)
 800aba2:	4818      	ldr	r0, [pc, #96]	; (800ac04 <_Balloc+0x7c>)
 800aba4:	f000 fce2 	bl	800b56c <__assert_func>
 800aba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abac:	6006      	str	r6, [r0, #0]
 800abae:	60c6      	str	r6, [r0, #12]
 800abb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abb2:	68f3      	ldr	r3, [r6, #12]
 800abb4:	b183      	cbz	r3, 800abd8 <_Balloc+0x50>
 800abb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abbe:	b9b8      	cbnz	r0, 800abf0 <_Balloc+0x68>
 800abc0:	2101      	movs	r1, #1
 800abc2:	fa01 f605 	lsl.w	r6, r1, r5
 800abc6:	1d72      	adds	r2, r6, #5
 800abc8:	4620      	mov	r0, r4
 800abca:	0092      	lsls	r2, r2, #2
 800abcc:	f000 fb5e 	bl	800b28c <_calloc_r>
 800abd0:	b160      	cbz	r0, 800abec <_Balloc+0x64>
 800abd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abd6:	e00e      	b.n	800abf6 <_Balloc+0x6e>
 800abd8:	2221      	movs	r2, #33	; 0x21
 800abda:	2104      	movs	r1, #4
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 fb55 	bl	800b28c <_calloc_r>
 800abe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abe4:	60f0      	str	r0, [r6, #12]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e4      	bne.n	800abb6 <_Balloc+0x2e>
 800abec:	2000      	movs	r0, #0
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	6802      	ldr	r2, [r0, #0]
 800abf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abf6:	2300      	movs	r3, #0
 800abf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abfc:	e7f7      	b.n	800abee <_Balloc+0x66>
 800abfe:	bf00      	nop
 800ac00:	0800c605 	.word	0x0800c605
 800ac04:	0800c688 	.word	0x0800c688

0800ac08 <_Bfree>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	b976      	cbnz	r6, 800ac30 <_Bfree+0x28>
 800ac12:	2010      	movs	r0, #16
 800ac14:	f7fe fb52 	bl	80092bc <malloc>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	6268      	str	r0, [r5, #36]	; 0x24
 800ac1c:	b920      	cbnz	r0, 800ac28 <_Bfree+0x20>
 800ac1e:	218a      	movs	r1, #138	; 0x8a
 800ac20:	4b08      	ldr	r3, [pc, #32]	; (800ac44 <_Bfree+0x3c>)
 800ac22:	4809      	ldr	r0, [pc, #36]	; (800ac48 <_Bfree+0x40>)
 800ac24:	f000 fca2 	bl	800b56c <__assert_func>
 800ac28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac2c:	6006      	str	r6, [r0, #0]
 800ac2e:	60c6      	str	r6, [r0, #12]
 800ac30:	b13c      	cbz	r4, 800ac42 <_Bfree+0x3a>
 800ac32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac34:	6862      	ldr	r2, [r4, #4]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac3c:	6021      	str	r1, [r4, #0]
 800ac3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	0800c605 	.word	0x0800c605
 800ac48:	0800c688 	.word	0x0800c688

0800ac4c <__multadd>:
 800ac4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac50:	4607      	mov	r7, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	461e      	mov	r6, r3
 800ac56:	2000      	movs	r0, #0
 800ac58:	690d      	ldr	r5, [r1, #16]
 800ac5a:	f101 0c14 	add.w	ip, r1, #20
 800ac5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac62:	3001      	adds	r0, #1
 800ac64:	b299      	uxth	r1, r3
 800ac66:	fb02 6101 	mla	r1, r2, r1, r6
 800ac6a:	0c1e      	lsrs	r6, r3, #16
 800ac6c:	0c0b      	lsrs	r3, r1, #16
 800ac6e:	fb02 3306 	mla	r3, r2, r6, r3
 800ac72:	b289      	uxth	r1, r1
 800ac74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac78:	4285      	cmp	r5, r0
 800ac7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ac82:	dcec      	bgt.n	800ac5e <__multadd+0x12>
 800ac84:	b30e      	cbz	r6, 800acca <__multadd+0x7e>
 800ac86:	68a3      	ldr	r3, [r4, #8]
 800ac88:	42ab      	cmp	r3, r5
 800ac8a:	dc19      	bgt.n	800acc0 <__multadd+0x74>
 800ac8c:	6861      	ldr	r1, [r4, #4]
 800ac8e:	4638      	mov	r0, r7
 800ac90:	3101      	adds	r1, #1
 800ac92:	f7ff ff79 	bl	800ab88 <_Balloc>
 800ac96:	4680      	mov	r8, r0
 800ac98:	b928      	cbnz	r0, 800aca6 <__multadd+0x5a>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	21b5      	movs	r1, #181	; 0xb5
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <__multadd+0x84>)
 800aca0:	480c      	ldr	r0, [pc, #48]	; (800acd4 <__multadd+0x88>)
 800aca2:	f000 fc63 	bl	800b56c <__assert_func>
 800aca6:	6922      	ldr	r2, [r4, #16]
 800aca8:	f104 010c 	add.w	r1, r4, #12
 800acac:	3202      	adds	r2, #2
 800acae:	0092      	lsls	r2, r2, #2
 800acb0:	300c      	adds	r0, #12
 800acb2:	f7fe fb0b 	bl	80092cc <memcpy>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4638      	mov	r0, r7
 800acba:	f7ff ffa5 	bl	800ac08 <_Bfree>
 800acbe:	4644      	mov	r4, r8
 800acc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acc4:	3501      	adds	r5, #1
 800acc6:	615e      	str	r6, [r3, #20]
 800acc8:	6125      	str	r5, [r4, #16]
 800acca:	4620      	mov	r0, r4
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	0800c677 	.word	0x0800c677
 800acd4:	0800c688 	.word	0x0800c688

0800acd8 <__hi0bits>:
 800acd8:	0c02      	lsrs	r2, r0, #16
 800acda:	0412      	lsls	r2, r2, #16
 800acdc:	4603      	mov	r3, r0
 800acde:	b9ca      	cbnz	r2, 800ad14 <__hi0bits+0x3c>
 800ace0:	0403      	lsls	r3, r0, #16
 800ace2:	2010      	movs	r0, #16
 800ace4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ace8:	bf04      	itt	eq
 800acea:	021b      	lsleq	r3, r3, #8
 800acec:	3008      	addeq	r0, #8
 800acee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800acf2:	bf04      	itt	eq
 800acf4:	011b      	lsleq	r3, r3, #4
 800acf6:	3004      	addeq	r0, #4
 800acf8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acfc:	bf04      	itt	eq
 800acfe:	009b      	lsleq	r3, r3, #2
 800ad00:	3002      	addeq	r0, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	db05      	blt.n	800ad12 <__hi0bits+0x3a>
 800ad06:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad0a:	f100 0001 	add.w	r0, r0, #1
 800ad0e:	bf08      	it	eq
 800ad10:	2020      	moveq	r0, #32
 800ad12:	4770      	bx	lr
 800ad14:	2000      	movs	r0, #0
 800ad16:	e7e5      	b.n	800ace4 <__hi0bits+0xc>

0800ad18 <__lo0bits>:
 800ad18:	6803      	ldr	r3, [r0, #0]
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	f013 0007 	ands.w	r0, r3, #7
 800ad20:	d00b      	beq.n	800ad3a <__lo0bits+0x22>
 800ad22:	07d9      	lsls	r1, r3, #31
 800ad24:	d421      	bmi.n	800ad6a <__lo0bits+0x52>
 800ad26:	0798      	lsls	r0, r3, #30
 800ad28:	bf49      	itett	mi
 800ad2a:	085b      	lsrmi	r3, r3, #1
 800ad2c:	089b      	lsrpl	r3, r3, #2
 800ad2e:	2001      	movmi	r0, #1
 800ad30:	6013      	strmi	r3, [r2, #0]
 800ad32:	bf5c      	itt	pl
 800ad34:	2002      	movpl	r0, #2
 800ad36:	6013      	strpl	r3, [r2, #0]
 800ad38:	4770      	bx	lr
 800ad3a:	b299      	uxth	r1, r3
 800ad3c:	b909      	cbnz	r1, 800ad42 <__lo0bits+0x2a>
 800ad3e:	2010      	movs	r0, #16
 800ad40:	0c1b      	lsrs	r3, r3, #16
 800ad42:	b2d9      	uxtb	r1, r3
 800ad44:	b909      	cbnz	r1, 800ad4a <__lo0bits+0x32>
 800ad46:	3008      	adds	r0, #8
 800ad48:	0a1b      	lsrs	r3, r3, #8
 800ad4a:	0719      	lsls	r1, r3, #28
 800ad4c:	bf04      	itt	eq
 800ad4e:	091b      	lsreq	r3, r3, #4
 800ad50:	3004      	addeq	r0, #4
 800ad52:	0799      	lsls	r1, r3, #30
 800ad54:	bf04      	itt	eq
 800ad56:	089b      	lsreq	r3, r3, #2
 800ad58:	3002      	addeq	r0, #2
 800ad5a:	07d9      	lsls	r1, r3, #31
 800ad5c:	d403      	bmi.n	800ad66 <__lo0bits+0x4e>
 800ad5e:	085b      	lsrs	r3, r3, #1
 800ad60:	f100 0001 	add.w	r0, r0, #1
 800ad64:	d003      	beq.n	800ad6e <__lo0bits+0x56>
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	4770      	bx	lr
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	4770      	bx	lr
 800ad6e:	2020      	movs	r0, #32
 800ad70:	4770      	bx	lr
	...

0800ad74 <__i2b>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	460c      	mov	r4, r1
 800ad78:	2101      	movs	r1, #1
 800ad7a:	f7ff ff05 	bl	800ab88 <_Balloc>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	b928      	cbnz	r0, 800ad8e <__i2b+0x1a>
 800ad82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad86:	4b04      	ldr	r3, [pc, #16]	; (800ad98 <__i2b+0x24>)
 800ad88:	4804      	ldr	r0, [pc, #16]	; (800ad9c <__i2b+0x28>)
 800ad8a:	f000 fbef 	bl	800b56c <__assert_func>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	6144      	str	r4, [r0, #20]
 800ad92:	6103      	str	r3, [r0, #16]
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	bf00      	nop
 800ad98:	0800c677 	.word	0x0800c677
 800ad9c:	0800c688 	.word	0x0800c688

0800ada0 <__multiply>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	4691      	mov	r9, r2
 800ada6:	690a      	ldr	r2, [r1, #16]
 800ada8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adac:	460c      	mov	r4, r1
 800adae:	429a      	cmp	r2, r3
 800adb0:	bfbe      	ittt	lt
 800adb2:	460b      	movlt	r3, r1
 800adb4:	464c      	movlt	r4, r9
 800adb6:	4699      	movlt	r9, r3
 800adb8:	6927      	ldr	r7, [r4, #16]
 800adba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adbe:	68a3      	ldr	r3, [r4, #8]
 800adc0:	6861      	ldr	r1, [r4, #4]
 800adc2:	eb07 060a 	add.w	r6, r7, sl
 800adc6:	42b3      	cmp	r3, r6
 800adc8:	b085      	sub	sp, #20
 800adca:	bfb8      	it	lt
 800adcc:	3101      	addlt	r1, #1
 800adce:	f7ff fedb 	bl	800ab88 <_Balloc>
 800add2:	b930      	cbnz	r0, 800ade2 <__multiply+0x42>
 800add4:	4602      	mov	r2, r0
 800add6:	f240 115d 	movw	r1, #349	; 0x15d
 800adda:	4b43      	ldr	r3, [pc, #268]	; (800aee8 <__multiply+0x148>)
 800addc:	4843      	ldr	r0, [pc, #268]	; (800aeec <__multiply+0x14c>)
 800adde:	f000 fbc5 	bl	800b56c <__assert_func>
 800ade2:	f100 0514 	add.w	r5, r0, #20
 800ade6:	462b      	mov	r3, r5
 800ade8:	2200      	movs	r2, #0
 800adea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adee:	4543      	cmp	r3, r8
 800adf0:	d321      	bcc.n	800ae36 <__multiply+0x96>
 800adf2:	f104 0314 	add.w	r3, r4, #20
 800adf6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adfa:	f109 0314 	add.w	r3, r9, #20
 800adfe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae02:	9202      	str	r2, [sp, #8]
 800ae04:	1b3a      	subs	r2, r7, r4
 800ae06:	3a15      	subs	r2, #21
 800ae08:	f022 0203 	bic.w	r2, r2, #3
 800ae0c:	3204      	adds	r2, #4
 800ae0e:	f104 0115 	add.w	r1, r4, #21
 800ae12:	428f      	cmp	r7, r1
 800ae14:	bf38      	it	cc
 800ae16:	2204      	movcc	r2, #4
 800ae18:	9201      	str	r2, [sp, #4]
 800ae1a:	9a02      	ldr	r2, [sp, #8]
 800ae1c:	9303      	str	r3, [sp, #12]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d80c      	bhi.n	800ae3c <__multiply+0x9c>
 800ae22:	2e00      	cmp	r6, #0
 800ae24:	dd03      	ble.n	800ae2e <__multiply+0x8e>
 800ae26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d059      	beq.n	800aee2 <__multiply+0x142>
 800ae2e:	6106      	str	r6, [r0, #16]
 800ae30:	b005      	add	sp, #20
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	f843 2b04 	str.w	r2, [r3], #4
 800ae3a:	e7d8      	b.n	800adee <__multiply+0x4e>
 800ae3c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae40:	f1ba 0f00 	cmp.w	sl, #0
 800ae44:	d023      	beq.n	800ae8e <__multiply+0xee>
 800ae46:	46a9      	mov	r9, r5
 800ae48:	f04f 0c00 	mov.w	ip, #0
 800ae4c:	f104 0e14 	add.w	lr, r4, #20
 800ae50:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae54:	f8d9 1000 	ldr.w	r1, [r9]
 800ae58:	fa1f fb82 	uxth.w	fp, r2
 800ae5c:	b289      	uxth	r1, r1
 800ae5e:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae62:	4461      	add	r1, ip
 800ae64:	f8d9 c000 	ldr.w	ip, [r9]
 800ae68:	0c12      	lsrs	r2, r2, #16
 800ae6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae6e:	fb0a c202 	mla	r2, sl, r2, ip
 800ae72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae76:	b289      	uxth	r1, r1
 800ae78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae7c:	4577      	cmp	r7, lr
 800ae7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae82:	f849 1b04 	str.w	r1, [r9], #4
 800ae86:	d8e3      	bhi.n	800ae50 <__multiply+0xb0>
 800ae88:	9a01      	ldr	r2, [sp, #4]
 800ae8a:	f845 c002 	str.w	ip, [r5, r2]
 800ae8e:	9a03      	ldr	r2, [sp, #12]
 800ae90:	3304      	adds	r3, #4
 800ae92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae96:	f1b9 0f00 	cmp.w	r9, #0
 800ae9a:	d020      	beq.n	800aede <__multiply+0x13e>
 800ae9c:	46ae      	mov	lr, r5
 800ae9e:	f04f 0a00 	mov.w	sl, #0
 800aea2:	6829      	ldr	r1, [r5, #0]
 800aea4:	f104 0c14 	add.w	ip, r4, #20
 800aea8:	f8bc b000 	ldrh.w	fp, [ip]
 800aeac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aeb0:	b289      	uxth	r1, r1
 800aeb2:	fb09 220b 	mla	r2, r9, fp, r2
 800aeb6:	4492      	add	sl, r2
 800aeb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aebc:	f84e 1b04 	str.w	r1, [lr], #4
 800aec0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aec4:	f8be 1000 	ldrh.w	r1, [lr]
 800aec8:	0c12      	lsrs	r2, r2, #16
 800aeca:	fb09 1102 	mla	r1, r9, r2, r1
 800aece:	4567      	cmp	r7, ip
 800aed0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aed8:	d8e6      	bhi.n	800aea8 <__multiply+0x108>
 800aeda:	9a01      	ldr	r2, [sp, #4]
 800aedc:	50a9      	str	r1, [r5, r2]
 800aede:	3504      	adds	r5, #4
 800aee0:	e79b      	b.n	800ae1a <__multiply+0x7a>
 800aee2:	3e01      	subs	r6, #1
 800aee4:	e79d      	b.n	800ae22 <__multiply+0x82>
 800aee6:	bf00      	nop
 800aee8:	0800c677 	.word	0x0800c677
 800aeec:	0800c688 	.word	0x0800c688

0800aef0 <__pow5mult>:
 800aef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aef4:	4615      	mov	r5, r2
 800aef6:	f012 0203 	ands.w	r2, r2, #3
 800aefa:	4606      	mov	r6, r0
 800aefc:	460f      	mov	r7, r1
 800aefe:	d007      	beq.n	800af10 <__pow5mult+0x20>
 800af00:	4c25      	ldr	r4, [pc, #148]	; (800af98 <__pow5mult+0xa8>)
 800af02:	3a01      	subs	r2, #1
 800af04:	2300      	movs	r3, #0
 800af06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af0a:	f7ff fe9f 	bl	800ac4c <__multadd>
 800af0e:	4607      	mov	r7, r0
 800af10:	10ad      	asrs	r5, r5, #2
 800af12:	d03d      	beq.n	800af90 <__pow5mult+0xa0>
 800af14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af16:	b97c      	cbnz	r4, 800af38 <__pow5mult+0x48>
 800af18:	2010      	movs	r0, #16
 800af1a:	f7fe f9cf 	bl	80092bc <malloc>
 800af1e:	4602      	mov	r2, r0
 800af20:	6270      	str	r0, [r6, #36]	; 0x24
 800af22:	b928      	cbnz	r0, 800af30 <__pow5mult+0x40>
 800af24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af28:	4b1c      	ldr	r3, [pc, #112]	; (800af9c <__pow5mult+0xac>)
 800af2a:	481d      	ldr	r0, [pc, #116]	; (800afa0 <__pow5mult+0xb0>)
 800af2c:	f000 fb1e 	bl	800b56c <__assert_func>
 800af30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af34:	6004      	str	r4, [r0, #0]
 800af36:	60c4      	str	r4, [r0, #12]
 800af38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af40:	b94c      	cbnz	r4, 800af56 <__pow5mult+0x66>
 800af42:	f240 2171 	movw	r1, #625	; 0x271
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff ff14 	bl	800ad74 <__i2b>
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	f8c8 0008 	str.w	r0, [r8, #8]
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	f04f 0900 	mov.w	r9, #0
 800af5a:	07eb      	lsls	r3, r5, #31
 800af5c:	d50a      	bpl.n	800af74 <__pow5mult+0x84>
 800af5e:	4639      	mov	r1, r7
 800af60:	4622      	mov	r2, r4
 800af62:	4630      	mov	r0, r6
 800af64:	f7ff ff1c 	bl	800ada0 <__multiply>
 800af68:	4680      	mov	r8, r0
 800af6a:	4639      	mov	r1, r7
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7ff fe4b 	bl	800ac08 <_Bfree>
 800af72:	4647      	mov	r7, r8
 800af74:	106d      	asrs	r5, r5, #1
 800af76:	d00b      	beq.n	800af90 <__pow5mult+0xa0>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	b938      	cbnz	r0, 800af8c <__pow5mult+0x9c>
 800af7c:	4622      	mov	r2, r4
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	f7ff ff0d 	bl	800ada0 <__multiply>
 800af86:	6020      	str	r0, [r4, #0]
 800af88:	f8c0 9000 	str.w	r9, [r0]
 800af8c:	4604      	mov	r4, r0
 800af8e:	e7e4      	b.n	800af5a <__pow5mult+0x6a>
 800af90:	4638      	mov	r0, r7
 800af92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af96:	bf00      	nop
 800af98:	0800c7d8 	.word	0x0800c7d8
 800af9c:	0800c605 	.word	0x0800c605
 800afa0:	0800c688 	.word	0x0800c688

0800afa4 <__lshift>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	460c      	mov	r4, r1
 800afaa:	4607      	mov	r7, r0
 800afac:	4691      	mov	r9, r2
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	6849      	ldr	r1, [r1, #4]
 800afb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afb6:	68a3      	ldr	r3, [r4, #8]
 800afb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afbc:	f108 0601 	add.w	r6, r8, #1
 800afc0:	42b3      	cmp	r3, r6
 800afc2:	db0b      	blt.n	800afdc <__lshift+0x38>
 800afc4:	4638      	mov	r0, r7
 800afc6:	f7ff fddf 	bl	800ab88 <_Balloc>
 800afca:	4605      	mov	r5, r0
 800afcc:	b948      	cbnz	r0, 800afe2 <__lshift+0x3e>
 800afce:	4602      	mov	r2, r0
 800afd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afd4:	4b29      	ldr	r3, [pc, #164]	; (800b07c <__lshift+0xd8>)
 800afd6:	482a      	ldr	r0, [pc, #168]	; (800b080 <__lshift+0xdc>)
 800afd8:	f000 fac8 	bl	800b56c <__assert_func>
 800afdc:	3101      	adds	r1, #1
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	e7ee      	b.n	800afc0 <__lshift+0x1c>
 800afe2:	2300      	movs	r3, #0
 800afe4:	f100 0114 	add.w	r1, r0, #20
 800afe8:	f100 0210 	add.w	r2, r0, #16
 800afec:	4618      	mov	r0, r3
 800afee:	4553      	cmp	r3, sl
 800aff0:	db37      	blt.n	800b062 <__lshift+0xbe>
 800aff2:	6920      	ldr	r0, [r4, #16]
 800aff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aff8:	f104 0314 	add.w	r3, r4, #20
 800affc:	f019 091f 	ands.w	r9, r9, #31
 800b000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b008:	d02f      	beq.n	800b06a <__lshift+0xc6>
 800b00a:	468a      	mov	sl, r1
 800b00c:	f04f 0c00 	mov.w	ip, #0
 800b010:	f1c9 0e20 	rsb	lr, r9, #32
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	fa02 f209 	lsl.w	r2, r2, r9
 800b01a:	ea42 020c 	orr.w	r2, r2, ip
 800b01e:	f84a 2b04 	str.w	r2, [sl], #4
 800b022:	f853 2b04 	ldr.w	r2, [r3], #4
 800b026:	4298      	cmp	r0, r3
 800b028:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b02c:	d8f2      	bhi.n	800b014 <__lshift+0x70>
 800b02e:	1b03      	subs	r3, r0, r4
 800b030:	3b15      	subs	r3, #21
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	3304      	adds	r3, #4
 800b038:	f104 0215 	add.w	r2, r4, #21
 800b03c:	4290      	cmp	r0, r2
 800b03e:	bf38      	it	cc
 800b040:	2304      	movcc	r3, #4
 800b042:	f841 c003 	str.w	ip, [r1, r3]
 800b046:	f1bc 0f00 	cmp.w	ip, #0
 800b04a:	d001      	beq.n	800b050 <__lshift+0xac>
 800b04c:	f108 0602 	add.w	r6, r8, #2
 800b050:	3e01      	subs	r6, #1
 800b052:	4638      	mov	r0, r7
 800b054:	4621      	mov	r1, r4
 800b056:	612e      	str	r6, [r5, #16]
 800b058:	f7ff fdd6 	bl	800ac08 <_Bfree>
 800b05c:	4628      	mov	r0, r5
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	f842 0f04 	str.w	r0, [r2, #4]!
 800b066:	3301      	adds	r3, #1
 800b068:	e7c1      	b.n	800afee <__lshift+0x4a>
 800b06a:	3904      	subs	r1, #4
 800b06c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b070:	4298      	cmp	r0, r3
 800b072:	f841 2f04 	str.w	r2, [r1, #4]!
 800b076:	d8f9      	bhi.n	800b06c <__lshift+0xc8>
 800b078:	e7ea      	b.n	800b050 <__lshift+0xac>
 800b07a:	bf00      	nop
 800b07c:	0800c677 	.word	0x0800c677
 800b080:	0800c688 	.word	0x0800c688

0800b084 <__mcmp>:
 800b084:	4603      	mov	r3, r0
 800b086:	690a      	ldr	r2, [r1, #16]
 800b088:	6900      	ldr	r0, [r0, #16]
 800b08a:	b530      	push	{r4, r5, lr}
 800b08c:	1a80      	subs	r0, r0, r2
 800b08e:	d10d      	bne.n	800b0ac <__mcmp+0x28>
 800b090:	3314      	adds	r3, #20
 800b092:	3114      	adds	r1, #20
 800b094:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b098:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b09c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0a4:	4295      	cmp	r5, r2
 800b0a6:	d002      	beq.n	800b0ae <__mcmp+0x2a>
 800b0a8:	d304      	bcc.n	800b0b4 <__mcmp+0x30>
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	bd30      	pop	{r4, r5, pc}
 800b0ae:	42a3      	cmp	r3, r4
 800b0b0:	d3f4      	bcc.n	800b09c <__mcmp+0x18>
 800b0b2:	e7fb      	b.n	800b0ac <__mcmp+0x28>
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	e7f8      	b.n	800b0ac <__mcmp+0x28>
	...

0800b0bc <__mdiff>:
 800b0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	460d      	mov	r5, r1
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	f7ff ffdb 	bl	800b084 <__mcmp>
 800b0ce:	1e06      	subs	r6, r0, #0
 800b0d0:	d111      	bne.n	800b0f6 <__mdiff+0x3a>
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	f7ff fd57 	bl	800ab88 <_Balloc>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	b928      	cbnz	r0, 800b0ea <__mdiff+0x2e>
 800b0de:	f240 2132 	movw	r1, #562	; 0x232
 800b0e2:	4b3a      	ldr	r3, [pc, #232]	; (800b1cc <__mdiff+0x110>)
 800b0e4:	483a      	ldr	r0, [pc, #232]	; (800b1d0 <__mdiff+0x114>)
 800b0e6:	f000 fa41 	bl	800b56c <__assert_func>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	bfa4      	itt	ge
 800b0f8:	4623      	movge	r3, r4
 800b0fa:	462c      	movge	r4, r5
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	6861      	ldr	r1, [r4, #4]
 800b100:	bfa6      	itte	ge
 800b102:	461d      	movge	r5, r3
 800b104:	2600      	movge	r6, #0
 800b106:	2601      	movlt	r6, #1
 800b108:	f7ff fd3e 	bl	800ab88 <_Balloc>
 800b10c:	4602      	mov	r2, r0
 800b10e:	b918      	cbnz	r0, 800b118 <__mdiff+0x5c>
 800b110:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b114:	4b2d      	ldr	r3, [pc, #180]	; (800b1cc <__mdiff+0x110>)
 800b116:	e7e5      	b.n	800b0e4 <__mdiff+0x28>
 800b118:	f102 0814 	add.w	r8, r2, #20
 800b11c:	46c2      	mov	sl, r8
 800b11e:	f04f 0c00 	mov.w	ip, #0
 800b122:	6927      	ldr	r7, [r4, #16]
 800b124:	60c6      	str	r6, [r0, #12]
 800b126:	692e      	ldr	r6, [r5, #16]
 800b128:	f104 0014 	add.w	r0, r4, #20
 800b12c:	f105 0914 	add.w	r9, r5, #20
 800b130:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b134:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b138:	3410      	adds	r4, #16
 800b13a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b13e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b142:	fa1f f18b 	uxth.w	r1, fp
 800b146:	448c      	add	ip, r1
 800b148:	b299      	uxth	r1, r3
 800b14a:	0c1b      	lsrs	r3, r3, #16
 800b14c:	ebac 0101 	sub.w	r1, ip, r1
 800b150:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b154:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b158:	b289      	uxth	r1, r1
 800b15a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b15e:	454e      	cmp	r6, r9
 800b160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b164:	f84a 3b04 	str.w	r3, [sl], #4
 800b168:	d8e7      	bhi.n	800b13a <__mdiff+0x7e>
 800b16a:	1b73      	subs	r3, r6, r5
 800b16c:	3b15      	subs	r3, #21
 800b16e:	f023 0303 	bic.w	r3, r3, #3
 800b172:	3515      	adds	r5, #21
 800b174:	3304      	adds	r3, #4
 800b176:	42ae      	cmp	r6, r5
 800b178:	bf38      	it	cc
 800b17a:	2304      	movcc	r3, #4
 800b17c:	4418      	add	r0, r3
 800b17e:	4443      	add	r3, r8
 800b180:	461e      	mov	r6, r3
 800b182:	4605      	mov	r5, r0
 800b184:	4575      	cmp	r5, lr
 800b186:	d30e      	bcc.n	800b1a6 <__mdiff+0xea>
 800b188:	f10e 0103 	add.w	r1, lr, #3
 800b18c:	1a09      	subs	r1, r1, r0
 800b18e:	f021 0103 	bic.w	r1, r1, #3
 800b192:	3803      	subs	r0, #3
 800b194:	4586      	cmp	lr, r0
 800b196:	bf38      	it	cc
 800b198:	2100      	movcc	r1, #0
 800b19a:	4419      	add	r1, r3
 800b19c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b1a0:	b18b      	cbz	r3, 800b1c6 <__mdiff+0x10a>
 800b1a2:	6117      	str	r7, [r2, #16]
 800b1a4:	e7a4      	b.n	800b0f0 <__mdiff+0x34>
 800b1a6:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1aa:	fa1f f188 	uxth.w	r1, r8
 800b1ae:	4461      	add	r1, ip
 800b1b0:	140c      	asrs	r4, r1, #16
 800b1b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1b6:	b289      	uxth	r1, r1
 800b1b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1bc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b1c0:	f846 1b04 	str.w	r1, [r6], #4
 800b1c4:	e7de      	b.n	800b184 <__mdiff+0xc8>
 800b1c6:	3f01      	subs	r7, #1
 800b1c8:	e7e8      	b.n	800b19c <__mdiff+0xe0>
 800b1ca:	bf00      	nop
 800b1cc:	0800c677 	.word	0x0800c677
 800b1d0:	0800c688 	.word	0x0800c688

0800b1d4 <__d2b>:
 800b1d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b1d8:	2101      	movs	r1, #1
 800b1da:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b1de:	4690      	mov	r8, r2
 800b1e0:	461d      	mov	r5, r3
 800b1e2:	f7ff fcd1 	bl	800ab88 <_Balloc>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	b930      	cbnz	r0, 800b1f8 <__d2b+0x24>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	f240 310a 	movw	r1, #778	; 0x30a
 800b1f0:	4b24      	ldr	r3, [pc, #144]	; (800b284 <__d2b+0xb0>)
 800b1f2:	4825      	ldr	r0, [pc, #148]	; (800b288 <__d2b+0xb4>)
 800b1f4:	f000 f9ba 	bl	800b56c <__assert_func>
 800b1f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b1fc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b200:	bb2d      	cbnz	r5, 800b24e <__d2b+0x7a>
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	f1b8 0300 	subs.w	r3, r8, #0
 800b208:	d026      	beq.n	800b258 <__d2b+0x84>
 800b20a:	4668      	mov	r0, sp
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	f7ff fd83 	bl	800ad18 <__lo0bits>
 800b212:	9900      	ldr	r1, [sp, #0]
 800b214:	b1f0      	cbz	r0, 800b254 <__d2b+0x80>
 800b216:	9a01      	ldr	r2, [sp, #4]
 800b218:	f1c0 0320 	rsb	r3, r0, #32
 800b21c:	fa02 f303 	lsl.w	r3, r2, r3
 800b220:	430b      	orrs	r3, r1
 800b222:	40c2      	lsrs	r2, r0
 800b224:	6163      	str	r3, [r4, #20]
 800b226:	9201      	str	r2, [sp, #4]
 800b228:	9b01      	ldr	r3, [sp, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	bf14      	ite	ne
 800b22e:	2102      	movne	r1, #2
 800b230:	2101      	moveq	r1, #1
 800b232:	61a3      	str	r3, [r4, #24]
 800b234:	6121      	str	r1, [r4, #16]
 800b236:	b1c5      	cbz	r5, 800b26a <__d2b+0x96>
 800b238:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b23c:	4405      	add	r5, r0
 800b23e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b242:	603d      	str	r5, [r7, #0]
 800b244:	6030      	str	r0, [r6, #0]
 800b246:	4620      	mov	r0, r4
 800b248:	b002      	add	sp, #8
 800b24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b24e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b252:	e7d6      	b.n	800b202 <__d2b+0x2e>
 800b254:	6161      	str	r1, [r4, #20]
 800b256:	e7e7      	b.n	800b228 <__d2b+0x54>
 800b258:	a801      	add	r0, sp, #4
 800b25a:	f7ff fd5d 	bl	800ad18 <__lo0bits>
 800b25e:	2101      	movs	r1, #1
 800b260:	9b01      	ldr	r3, [sp, #4]
 800b262:	6121      	str	r1, [r4, #16]
 800b264:	6163      	str	r3, [r4, #20]
 800b266:	3020      	adds	r0, #32
 800b268:	e7e5      	b.n	800b236 <__d2b+0x62>
 800b26a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b26e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b272:	6038      	str	r0, [r7, #0]
 800b274:	6918      	ldr	r0, [r3, #16]
 800b276:	f7ff fd2f 	bl	800acd8 <__hi0bits>
 800b27a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b27e:	6031      	str	r1, [r6, #0]
 800b280:	e7e1      	b.n	800b246 <__d2b+0x72>
 800b282:	bf00      	nop
 800b284:	0800c677 	.word	0x0800c677
 800b288:	0800c688 	.word	0x0800c688

0800b28c <_calloc_r>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	fba1 5402 	umull	r5, r4, r1, r2
 800b292:	b934      	cbnz	r4, 800b2a2 <_calloc_r+0x16>
 800b294:	4629      	mov	r1, r5
 800b296:	f7fe f897 	bl	80093c8 <_malloc_r>
 800b29a:	4606      	mov	r6, r0
 800b29c:	b928      	cbnz	r0, 800b2aa <_calloc_r+0x1e>
 800b29e:	4630      	mov	r0, r6
 800b2a0:	bd70      	pop	{r4, r5, r6, pc}
 800b2a2:	220c      	movs	r2, #12
 800b2a4:	2600      	movs	r6, #0
 800b2a6:	6002      	str	r2, [r0, #0]
 800b2a8:	e7f9      	b.n	800b29e <_calloc_r+0x12>
 800b2aa:	462a      	mov	r2, r5
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7fe f81b 	bl	80092e8 <memset>
 800b2b2:	e7f4      	b.n	800b29e <_calloc_r+0x12>

0800b2b4 <__ssputs_r>:
 800b2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b8:	688e      	ldr	r6, [r1, #8]
 800b2ba:	4682      	mov	sl, r0
 800b2bc:	429e      	cmp	r6, r3
 800b2be:	460c      	mov	r4, r1
 800b2c0:	4690      	mov	r8, r2
 800b2c2:	461f      	mov	r7, r3
 800b2c4:	d838      	bhi.n	800b338 <__ssputs_r+0x84>
 800b2c6:	898a      	ldrh	r2, [r1, #12]
 800b2c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2cc:	d032      	beq.n	800b334 <__ssputs_r+0x80>
 800b2ce:	6825      	ldr	r5, [r4, #0]
 800b2d0:	6909      	ldr	r1, [r1, #16]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	eba5 0901 	sub.w	r9, r5, r1
 800b2d8:	6965      	ldr	r5, [r4, #20]
 800b2da:	444b      	add	r3, r9
 800b2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2e4:	106d      	asrs	r5, r5, #1
 800b2e6:	429d      	cmp	r5, r3
 800b2e8:	bf38      	it	cc
 800b2ea:	461d      	movcc	r5, r3
 800b2ec:	0553      	lsls	r3, r2, #21
 800b2ee:	d531      	bpl.n	800b354 <__ssputs_r+0xa0>
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7fe f869 	bl	80093c8 <_malloc_r>
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	b950      	cbnz	r0, 800b310 <__ssputs_r+0x5c>
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	f8ca 3000 	str.w	r3, [sl]
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b30a:	81a3      	strh	r3, [r4, #12]
 800b30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b310:	464a      	mov	r2, r9
 800b312:	6921      	ldr	r1, [r4, #16]
 800b314:	f7fd ffda 	bl	80092cc <memcpy>
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b31e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	6126      	str	r6, [r4, #16]
 800b326:	444e      	add	r6, r9
 800b328:	6026      	str	r6, [r4, #0]
 800b32a:	463e      	mov	r6, r7
 800b32c:	6165      	str	r5, [r4, #20]
 800b32e:	eba5 0509 	sub.w	r5, r5, r9
 800b332:	60a5      	str	r5, [r4, #8]
 800b334:	42be      	cmp	r6, r7
 800b336:	d900      	bls.n	800b33a <__ssputs_r+0x86>
 800b338:	463e      	mov	r6, r7
 800b33a:	4632      	mov	r2, r6
 800b33c:	4641      	mov	r1, r8
 800b33e:	6820      	ldr	r0, [r4, #0]
 800b340:	f000 f959 	bl	800b5f6 <memmove>
 800b344:	68a3      	ldr	r3, [r4, #8]
 800b346:	2000      	movs	r0, #0
 800b348:	1b9b      	subs	r3, r3, r6
 800b34a:	60a3      	str	r3, [r4, #8]
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	4433      	add	r3, r6
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	e7db      	b.n	800b30c <__ssputs_r+0x58>
 800b354:	462a      	mov	r2, r5
 800b356:	f000 f968 	bl	800b62a <_realloc_r>
 800b35a:	4606      	mov	r6, r0
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1e1      	bne.n	800b324 <__ssputs_r+0x70>
 800b360:	4650      	mov	r0, sl
 800b362:	6921      	ldr	r1, [r4, #16]
 800b364:	f7fd ffc8 	bl	80092f8 <_free_r>
 800b368:	e7c7      	b.n	800b2fa <__ssputs_r+0x46>
	...

0800b36c <_svfiprintf_r>:
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	4698      	mov	r8, r3
 800b372:	898b      	ldrh	r3, [r1, #12]
 800b374:	4607      	mov	r7, r0
 800b376:	061b      	lsls	r3, r3, #24
 800b378:	460d      	mov	r5, r1
 800b37a:	4614      	mov	r4, r2
 800b37c:	b09d      	sub	sp, #116	; 0x74
 800b37e:	d50e      	bpl.n	800b39e <_svfiprintf_r+0x32>
 800b380:	690b      	ldr	r3, [r1, #16]
 800b382:	b963      	cbnz	r3, 800b39e <_svfiprintf_r+0x32>
 800b384:	2140      	movs	r1, #64	; 0x40
 800b386:	f7fe f81f 	bl	80093c8 <_malloc_r>
 800b38a:	6028      	str	r0, [r5, #0]
 800b38c:	6128      	str	r0, [r5, #16]
 800b38e:	b920      	cbnz	r0, 800b39a <_svfiprintf_r+0x2e>
 800b390:	230c      	movs	r3, #12
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	f04f 30ff 	mov.w	r0, #4294967295
 800b398:	e0d1      	b.n	800b53e <_svfiprintf_r+0x1d2>
 800b39a:	2340      	movs	r3, #64	; 0x40
 800b39c:	616b      	str	r3, [r5, #20]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a2:	2320      	movs	r3, #32
 800b3a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3a8:	2330      	movs	r3, #48	; 0x30
 800b3aa:	f04f 0901 	mov.w	r9, #1
 800b3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b558 <_svfiprintf_r+0x1ec>
 800b3b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3ba:	4623      	mov	r3, r4
 800b3bc:	469a      	mov	sl, r3
 800b3be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c2:	b10a      	cbz	r2, 800b3c8 <_svfiprintf_r+0x5c>
 800b3c4:	2a25      	cmp	r2, #37	; 0x25
 800b3c6:	d1f9      	bne.n	800b3bc <_svfiprintf_r+0x50>
 800b3c8:	ebba 0b04 	subs.w	fp, sl, r4
 800b3cc:	d00b      	beq.n	800b3e6 <_svfiprintf_r+0x7a>
 800b3ce:	465b      	mov	r3, fp
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	f7ff ff6d 	bl	800b2b4 <__ssputs_r>
 800b3da:	3001      	adds	r0, #1
 800b3dc:	f000 80aa 	beq.w	800b534 <_svfiprintf_r+0x1c8>
 800b3e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e2:	445a      	add	r2, fp
 800b3e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 80a2 	beq.w	800b534 <_svfiprintf_r+0x1c8>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3fa:	f10a 0a01 	add.w	sl, sl, #1
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	9307      	str	r3, [sp, #28]
 800b402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b406:	931a      	str	r3, [sp, #104]	; 0x68
 800b408:	4654      	mov	r4, sl
 800b40a:	2205      	movs	r2, #5
 800b40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b410:	4851      	ldr	r0, [pc, #324]	; (800b558 <_svfiprintf_r+0x1ec>)
 800b412:	f7ff fb9f 	bl	800ab54 <memchr>
 800b416:	9a04      	ldr	r2, [sp, #16]
 800b418:	b9d8      	cbnz	r0, 800b452 <_svfiprintf_r+0xe6>
 800b41a:	06d0      	lsls	r0, r2, #27
 800b41c:	bf44      	itt	mi
 800b41e:	2320      	movmi	r3, #32
 800b420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b424:	0711      	lsls	r1, r2, #28
 800b426:	bf44      	itt	mi
 800b428:	232b      	movmi	r3, #43	; 0x2b
 800b42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b42e:	f89a 3000 	ldrb.w	r3, [sl]
 800b432:	2b2a      	cmp	r3, #42	; 0x2a
 800b434:	d015      	beq.n	800b462 <_svfiprintf_r+0xf6>
 800b436:	4654      	mov	r4, sl
 800b438:	2000      	movs	r0, #0
 800b43a:	f04f 0c0a 	mov.w	ip, #10
 800b43e:	9a07      	ldr	r2, [sp, #28]
 800b440:	4621      	mov	r1, r4
 800b442:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b446:	3b30      	subs	r3, #48	; 0x30
 800b448:	2b09      	cmp	r3, #9
 800b44a:	d94e      	bls.n	800b4ea <_svfiprintf_r+0x17e>
 800b44c:	b1b0      	cbz	r0, 800b47c <_svfiprintf_r+0x110>
 800b44e:	9207      	str	r2, [sp, #28]
 800b450:	e014      	b.n	800b47c <_svfiprintf_r+0x110>
 800b452:	eba0 0308 	sub.w	r3, r0, r8
 800b456:	fa09 f303 	lsl.w	r3, r9, r3
 800b45a:	4313      	orrs	r3, r2
 800b45c:	46a2      	mov	sl, r4
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	e7d2      	b.n	800b408 <_svfiprintf_r+0x9c>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	1d19      	adds	r1, r3, #4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	9103      	str	r1, [sp, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bfbb      	ittet	lt
 800b46e:	425b      	neglt	r3, r3
 800b470:	f042 0202 	orrlt.w	r2, r2, #2
 800b474:	9307      	strge	r3, [sp, #28]
 800b476:	9307      	strlt	r3, [sp, #28]
 800b478:	bfb8      	it	lt
 800b47a:	9204      	strlt	r2, [sp, #16]
 800b47c:	7823      	ldrb	r3, [r4, #0]
 800b47e:	2b2e      	cmp	r3, #46	; 0x2e
 800b480:	d10c      	bne.n	800b49c <_svfiprintf_r+0x130>
 800b482:	7863      	ldrb	r3, [r4, #1]
 800b484:	2b2a      	cmp	r3, #42	; 0x2a
 800b486:	d135      	bne.n	800b4f4 <_svfiprintf_r+0x188>
 800b488:	9b03      	ldr	r3, [sp, #12]
 800b48a:	3402      	adds	r4, #2
 800b48c:	1d1a      	adds	r2, r3, #4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	9203      	str	r2, [sp, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfb8      	it	lt
 800b496:	f04f 33ff 	movlt.w	r3, #4294967295
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b55c <_svfiprintf_r+0x1f0>
 800b4a0:	2203      	movs	r2, #3
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	7821      	ldrb	r1, [r4, #0]
 800b4a6:	f7ff fb55 	bl	800ab54 <memchr>
 800b4aa:	b140      	cbz	r0, 800b4be <_svfiprintf_r+0x152>
 800b4ac:	2340      	movs	r3, #64	; 0x40
 800b4ae:	eba0 000a 	sub.w	r0, r0, sl
 800b4b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	3401      	adds	r4, #1
 800b4ba:	4303      	orrs	r3, r0
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c2:	2206      	movs	r2, #6
 800b4c4:	4826      	ldr	r0, [pc, #152]	; (800b560 <_svfiprintf_r+0x1f4>)
 800b4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ca:	f7ff fb43 	bl	800ab54 <memchr>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d038      	beq.n	800b544 <_svfiprintf_r+0x1d8>
 800b4d2:	4b24      	ldr	r3, [pc, #144]	; (800b564 <_svfiprintf_r+0x1f8>)
 800b4d4:	bb1b      	cbnz	r3, 800b51e <_svfiprintf_r+0x1b2>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	3308      	adds	r3, #8
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e4:	4433      	add	r3, r6
 800b4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e8:	e767      	b.n	800b3ba <_svfiprintf_r+0x4e>
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	2001      	movs	r0, #1
 800b4ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f2:	e7a5      	b.n	800b440 <_svfiprintf_r+0xd4>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f04f 0c0a 	mov.w	ip, #10
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	3401      	adds	r4, #1
 800b4fe:	9305      	str	r3, [sp, #20]
 800b500:	4620      	mov	r0, r4
 800b502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b506:	3a30      	subs	r2, #48	; 0x30
 800b508:	2a09      	cmp	r2, #9
 800b50a:	d903      	bls.n	800b514 <_svfiprintf_r+0x1a8>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0c5      	beq.n	800b49c <_svfiprintf_r+0x130>
 800b510:	9105      	str	r1, [sp, #20]
 800b512:	e7c3      	b.n	800b49c <_svfiprintf_r+0x130>
 800b514:	4604      	mov	r4, r0
 800b516:	2301      	movs	r3, #1
 800b518:	fb0c 2101 	mla	r1, ip, r1, r2
 800b51c:	e7f0      	b.n	800b500 <_svfiprintf_r+0x194>
 800b51e:	ab03      	add	r3, sp, #12
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	462a      	mov	r2, r5
 800b524:	4638      	mov	r0, r7
 800b526:	4b10      	ldr	r3, [pc, #64]	; (800b568 <_svfiprintf_r+0x1fc>)
 800b528:	a904      	add	r1, sp, #16
 800b52a:	f7fe f85f 	bl	80095ec <_printf_float>
 800b52e:	1c42      	adds	r2, r0, #1
 800b530:	4606      	mov	r6, r0
 800b532:	d1d6      	bne.n	800b4e2 <_svfiprintf_r+0x176>
 800b534:	89ab      	ldrh	r3, [r5, #12]
 800b536:	065b      	lsls	r3, r3, #25
 800b538:	f53f af2c 	bmi.w	800b394 <_svfiprintf_r+0x28>
 800b53c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b53e:	b01d      	add	sp, #116	; 0x74
 800b540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b544:	ab03      	add	r3, sp, #12
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	462a      	mov	r2, r5
 800b54a:	4638      	mov	r0, r7
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <_svfiprintf_r+0x1fc>)
 800b54e:	a904      	add	r1, sp, #16
 800b550:	f7fe fae8 	bl	8009b24 <_printf_i>
 800b554:	e7eb      	b.n	800b52e <_svfiprintf_r+0x1c2>
 800b556:	bf00      	nop
 800b558:	0800c7e4 	.word	0x0800c7e4
 800b55c:	0800c7ea 	.word	0x0800c7ea
 800b560:	0800c7ee 	.word	0x0800c7ee
 800b564:	080095ed 	.word	0x080095ed
 800b568:	0800b2b5 	.word	0x0800b2b5

0800b56c <__assert_func>:
 800b56c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b56e:	4614      	mov	r4, r2
 800b570:	461a      	mov	r2, r3
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <__assert_func+0x2c>)
 800b574:	4605      	mov	r5, r0
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68d8      	ldr	r0, [r3, #12]
 800b57a:	b14c      	cbz	r4, 800b590 <__assert_func+0x24>
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <__assert_func+0x30>)
 800b57e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b582:	9100      	str	r1, [sp, #0]
 800b584:	462b      	mov	r3, r5
 800b586:	4906      	ldr	r1, [pc, #24]	; (800b5a0 <__assert_func+0x34>)
 800b588:	f000 f80e 	bl	800b5a8 <fiprintf>
 800b58c:	f7fd fe64 	bl	8009258 <abort>
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <__assert_func+0x38>)
 800b592:	461c      	mov	r4, r3
 800b594:	e7f3      	b.n	800b57e <__assert_func+0x12>
 800b596:	bf00      	nop
 800b598:	2000000c 	.word	0x2000000c
 800b59c:	0800c7f5 	.word	0x0800c7f5
 800b5a0:	0800c802 	.word	0x0800c802
 800b5a4:	0800c830 	.word	0x0800c830

0800b5a8 <fiprintf>:
 800b5a8:	b40e      	push	{r1, r2, r3}
 800b5aa:	b503      	push	{r0, r1, lr}
 800b5ac:	4601      	mov	r1, r0
 800b5ae:	ab03      	add	r3, sp, #12
 800b5b0:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <fiprintf+0x20>)
 800b5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b6:	6800      	ldr	r0, [r0, #0]
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	f000 f88d 	bl	800b6d8 <_vfiprintf_r>
 800b5be:	b002      	add	sp, #8
 800b5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c4:	b003      	add	sp, #12
 800b5c6:	4770      	bx	lr
 800b5c8:	2000000c 	.word	0x2000000c

0800b5cc <__retarget_lock_init_recursive>:
 800b5cc:	4770      	bx	lr

0800b5ce <__retarget_lock_acquire_recursive>:
 800b5ce:	4770      	bx	lr

0800b5d0 <__retarget_lock_release_recursive>:
 800b5d0:	4770      	bx	lr

0800b5d2 <__ascii_mbtowc>:
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	b901      	cbnz	r1, 800b5d8 <__ascii_mbtowc+0x6>
 800b5d6:	a901      	add	r1, sp, #4
 800b5d8:	b142      	cbz	r2, 800b5ec <__ascii_mbtowc+0x1a>
 800b5da:	b14b      	cbz	r3, 800b5f0 <__ascii_mbtowc+0x1e>
 800b5dc:	7813      	ldrb	r3, [r2, #0]
 800b5de:	600b      	str	r3, [r1, #0]
 800b5e0:	7812      	ldrb	r2, [r2, #0]
 800b5e2:	1e10      	subs	r0, r2, #0
 800b5e4:	bf18      	it	ne
 800b5e6:	2001      	movne	r0, #1
 800b5e8:	b002      	add	sp, #8
 800b5ea:	4770      	bx	lr
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	e7fb      	b.n	800b5e8 <__ascii_mbtowc+0x16>
 800b5f0:	f06f 0001 	mvn.w	r0, #1
 800b5f4:	e7f8      	b.n	800b5e8 <__ascii_mbtowc+0x16>

0800b5f6 <memmove>:
 800b5f6:	4288      	cmp	r0, r1
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	eb01 0402 	add.w	r4, r1, r2
 800b5fe:	d902      	bls.n	800b606 <memmove+0x10>
 800b600:	4284      	cmp	r4, r0
 800b602:	4623      	mov	r3, r4
 800b604:	d807      	bhi.n	800b616 <memmove+0x20>
 800b606:	1e43      	subs	r3, r0, #1
 800b608:	42a1      	cmp	r1, r4
 800b60a:	d008      	beq.n	800b61e <memmove+0x28>
 800b60c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b610:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b614:	e7f8      	b.n	800b608 <memmove+0x12>
 800b616:	4601      	mov	r1, r0
 800b618:	4402      	add	r2, r0
 800b61a:	428a      	cmp	r2, r1
 800b61c:	d100      	bne.n	800b620 <memmove+0x2a>
 800b61e:	bd10      	pop	{r4, pc}
 800b620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b624:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b628:	e7f7      	b.n	800b61a <memmove+0x24>

0800b62a <_realloc_r>:
 800b62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62e:	4680      	mov	r8, r0
 800b630:	4614      	mov	r4, r2
 800b632:	460e      	mov	r6, r1
 800b634:	b921      	cbnz	r1, 800b640 <_realloc_r+0x16>
 800b636:	4611      	mov	r1, r2
 800b638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63c:	f7fd bec4 	b.w	80093c8 <_malloc_r>
 800b640:	b92a      	cbnz	r2, 800b64e <_realloc_r+0x24>
 800b642:	f7fd fe59 	bl	80092f8 <_free_r>
 800b646:	4625      	mov	r5, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64e:	f000 fc59 	bl	800bf04 <_malloc_usable_size_r>
 800b652:	4284      	cmp	r4, r0
 800b654:	4607      	mov	r7, r0
 800b656:	d802      	bhi.n	800b65e <_realloc_r+0x34>
 800b658:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b65c:	d812      	bhi.n	800b684 <_realloc_r+0x5a>
 800b65e:	4621      	mov	r1, r4
 800b660:	4640      	mov	r0, r8
 800b662:	f7fd feb1 	bl	80093c8 <_malloc_r>
 800b666:	4605      	mov	r5, r0
 800b668:	2800      	cmp	r0, #0
 800b66a:	d0ed      	beq.n	800b648 <_realloc_r+0x1e>
 800b66c:	42bc      	cmp	r4, r7
 800b66e:	4622      	mov	r2, r4
 800b670:	4631      	mov	r1, r6
 800b672:	bf28      	it	cs
 800b674:	463a      	movcs	r2, r7
 800b676:	f7fd fe29 	bl	80092cc <memcpy>
 800b67a:	4631      	mov	r1, r6
 800b67c:	4640      	mov	r0, r8
 800b67e:	f7fd fe3b 	bl	80092f8 <_free_r>
 800b682:	e7e1      	b.n	800b648 <_realloc_r+0x1e>
 800b684:	4635      	mov	r5, r6
 800b686:	e7df      	b.n	800b648 <_realloc_r+0x1e>

0800b688 <__sfputc_r>:
 800b688:	6893      	ldr	r3, [r2, #8]
 800b68a:	b410      	push	{r4}
 800b68c:	3b01      	subs	r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	6093      	str	r3, [r2, #8]
 800b692:	da07      	bge.n	800b6a4 <__sfputc_r+0x1c>
 800b694:	6994      	ldr	r4, [r2, #24]
 800b696:	42a3      	cmp	r3, r4
 800b698:	db01      	blt.n	800b69e <__sfputc_r+0x16>
 800b69a:	290a      	cmp	r1, #10
 800b69c:	d102      	bne.n	800b6a4 <__sfputc_r+0x1c>
 800b69e:	bc10      	pop	{r4}
 800b6a0:	f000 b94a 	b.w	800b938 <__swbuf_r>
 800b6a4:	6813      	ldr	r3, [r2, #0]
 800b6a6:	1c58      	adds	r0, r3, #1
 800b6a8:	6010      	str	r0, [r2, #0]
 800b6aa:	7019      	strb	r1, [r3, #0]
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	bc10      	pop	{r4}
 800b6b0:	4770      	bx	lr

0800b6b2 <__sfputs_r>:
 800b6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	18d5      	adds	r5, r2, r3
 800b6bc:	42ac      	cmp	r4, r5
 800b6be:	d101      	bne.n	800b6c4 <__sfputs_r+0x12>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e007      	b.n	800b6d4 <__sfputs_r+0x22>
 800b6c4:	463a      	mov	r2, r7
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6cc:	f7ff ffdc 	bl	800b688 <__sfputc_r>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d1f3      	bne.n	800b6bc <__sfputs_r+0xa>
 800b6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6d8 <_vfiprintf_r>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	460d      	mov	r5, r1
 800b6de:	4614      	mov	r4, r2
 800b6e0:	4698      	mov	r8, r3
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	b09d      	sub	sp, #116	; 0x74
 800b6e6:	b118      	cbz	r0, 800b6f0 <_vfiprintf_r+0x18>
 800b6e8:	6983      	ldr	r3, [r0, #24]
 800b6ea:	b90b      	cbnz	r3, 800b6f0 <_vfiprintf_r+0x18>
 800b6ec:	f000 fb08 	bl	800bd00 <__sinit>
 800b6f0:	4b89      	ldr	r3, [pc, #548]	; (800b918 <_vfiprintf_r+0x240>)
 800b6f2:	429d      	cmp	r5, r3
 800b6f4:	d11b      	bne.n	800b72e <_vfiprintf_r+0x56>
 800b6f6:	6875      	ldr	r5, [r6, #4]
 800b6f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6fa:	07d9      	lsls	r1, r3, #31
 800b6fc:	d405      	bmi.n	800b70a <_vfiprintf_r+0x32>
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	059a      	lsls	r2, r3, #22
 800b702:	d402      	bmi.n	800b70a <_vfiprintf_r+0x32>
 800b704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b706:	f7ff ff62 	bl	800b5ce <__retarget_lock_acquire_recursive>
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	071b      	lsls	r3, r3, #28
 800b70e:	d501      	bpl.n	800b714 <_vfiprintf_r+0x3c>
 800b710:	692b      	ldr	r3, [r5, #16]
 800b712:	b9eb      	cbnz	r3, 800b750 <_vfiprintf_r+0x78>
 800b714:	4629      	mov	r1, r5
 800b716:	4630      	mov	r0, r6
 800b718:	f000 f96e 	bl	800b9f8 <__swsetup_r>
 800b71c:	b1c0      	cbz	r0, 800b750 <_vfiprintf_r+0x78>
 800b71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b720:	07dc      	lsls	r4, r3, #31
 800b722:	d50e      	bpl.n	800b742 <_vfiprintf_r+0x6a>
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	b01d      	add	sp, #116	; 0x74
 800b72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72e:	4b7b      	ldr	r3, [pc, #492]	; (800b91c <_vfiprintf_r+0x244>)
 800b730:	429d      	cmp	r5, r3
 800b732:	d101      	bne.n	800b738 <_vfiprintf_r+0x60>
 800b734:	68b5      	ldr	r5, [r6, #8]
 800b736:	e7df      	b.n	800b6f8 <_vfiprintf_r+0x20>
 800b738:	4b79      	ldr	r3, [pc, #484]	; (800b920 <_vfiprintf_r+0x248>)
 800b73a:	429d      	cmp	r5, r3
 800b73c:	bf08      	it	eq
 800b73e:	68f5      	ldreq	r5, [r6, #12]
 800b740:	e7da      	b.n	800b6f8 <_vfiprintf_r+0x20>
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	0598      	lsls	r0, r3, #22
 800b746:	d4ed      	bmi.n	800b724 <_vfiprintf_r+0x4c>
 800b748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b74a:	f7ff ff41 	bl	800b5d0 <__retarget_lock_release_recursive>
 800b74e:	e7e9      	b.n	800b724 <_vfiprintf_r+0x4c>
 800b750:	2300      	movs	r3, #0
 800b752:	9309      	str	r3, [sp, #36]	; 0x24
 800b754:	2320      	movs	r3, #32
 800b756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b75a:	2330      	movs	r3, #48	; 0x30
 800b75c:	f04f 0901 	mov.w	r9, #1
 800b760:	f8cd 800c 	str.w	r8, [sp, #12]
 800b764:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b924 <_vfiprintf_r+0x24c>
 800b768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b76c:	4623      	mov	r3, r4
 800b76e:	469a      	mov	sl, r3
 800b770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b774:	b10a      	cbz	r2, 800b77a <_vfiprintf_r+0xa2>
 800b776:	2a25      	cmp	r2, #37	; 0x25
 800b778:	d1f9      	bne.n	800b76e <_vfiprintf_r+0x96>
 800b77a:	ebba 0b04 	subs.w	fp, sl, r4
 800b77e:	d00b      	beq.n	800b798 <_vfiprintf_r+0xc0>
 800b780:	465b      	mov	r3, fp
 800b782:	4622      	mov	r2, r4
 800b784:	4629      	mov	r1, r5
 800b786:	4630      	mov	r0, r6
 800b788:	f7ff ff93 	bl	800b6b2 <__sfputs_r>
 800b78c:	3001      	adds	r0, #1
 800b78e:	f000 80aa 	beq.w	800b8e6 <_vfiprintf_r+0x20e>
 800b792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b794:	445a      	add	r2, fp
 800b796:	9209      	str	r2, [sp, #36]	; 0x24
 800b798:	f89a 3000 	ldrb.w	r3, [sl]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 80a2 	beq.w	800b8e6 <_vfiprintf_r+0x20e>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ac:	f10a 0a01 	add.w	sl, sl, #1
 800b7b0:	9304      	str	r3, [sp, #16]
 800b7b2:	9307      	str	r3, [sp, #28]
 800b7b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7b8:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ba:	4654      	mov	r4, sl
 800b7bc:	2205      	movs	r2, #5
 800b7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c2:	4858      	ldr	r0, [pc, #352]	; (800b924 <_vfiprintf_r+0x24c>)
 800b7c4:	f7ff f9c6 	bl	800ab54 <memchr>
 800b7c8:	9a04      	ldr	r2, [sp, #16]
 800b7ca:	b9d8      	cbnz	r0, 800b804 <_vfiprintf_r+0x12c>
 800b7cc:	06d1      	lsls	r1, r2, #27
 800b7ce:	bf44      	itt	mi
 800b7d0:	2320      	movmi	r3, #32
 800b7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d6:	0713      	lsls	r3, r2, #28
 800b7d8:	bf44      	itt	mi
 800b7da:	232b      	movmi	r3, #43	; 0x2b
 800b7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e6:	d015      	beq.n	800b814 <_vfiprintf_r+0x13c>
 800b7e8:	4654      	mov	r4, sl
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	f04f 0c0a 	mov.w	ip, #10
 800b7f0:	9a07      	ldr	r2, [sp, #28]
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7f8:	3b30      	subs	r3, #48	; 0x30
 800b7fa:	2b09      	cmp	r3, #9
 800b7fc:	d94e      	bls.n	800b89c <_vfiprintf_r+0x1c4>
 800b7fe:	b1b0      	cbz	r0, 800b82e <_vfiprintf_r+0x156>
 800b800:	9207      	str	r2, [sp, #28]
 800b802:	e014      	b.n	800b82e <_vfiprintf_r+0x156>
 800b804:	eba0 0308 	sub.w	r3, r0, r8
 800b808:	fa09 f303 	lsl.w	r3, r9, r3
 800b80c:	4313      	orrs	r3, r2
 800b80e:	46a2      	mov	sl, r4
 800b810:	9304      	str	r3, [sp, #16]
 800b812:	e7d2      	b.n	800b7ba <_vfiprintf_r+0xe2>
 800b814:	9b03      	ldr	r3, [sp, #12]
 800b816:	1d19      	adds	r1, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	9103      	str	r1, [sp, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	bfbb      	ittet	lt
 800b820:	425b      	neglt	r3, r3
 800b822:	f042 0202 	orrlt.w	r2, r2, #2
 800b826:	9307      	strge	r3, [sp, #28]
 800b828:	9307      	strlt	r3, [sp, #28]
 800b82a:	bfb8      	it	lt
 800b82c:	9204      	strlt	r2, [sp, #16]
 800b82e:	7823      	ldrb	r3, [r4, #0]
 800b830:	2b2e      	cmp	r3, #46	; 0x2e
 800b832:	d10c      	bne.n	800b84e <_vfiprintf_r+0x176>
 800b834:	7863      	ldrb	r3, [r4, #1]
 800b836:	2b2a      	cmp	r3, #42	; 0x2a
 800b838:	d135      	bne.n	800b8a6 <_vfiprintf_r+0x1ce>
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	3402      	adds	r4, #2
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	9203      	str	r2, [sp, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	bfb8      	it	lt
 800b848:	f04f 33ff 	movlt.w	r3, #4294967295
 800b84c:	9305      	str	r3, [sp, #20]
 800b84e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b928 <_vfiprintf_r+0x250>
 800b852:	2203      	movs	r2, #3
 800b854:	4650      	mov	r0, sl
 800b856:	7821      	ldrb	r1, [r4, #0]
 800b858:	f7ff f97c 	bl	800ab54 <memchr>
 800b85c:	b140      	cbz	r0, 800b870 <_vfiprintf_r+0x198>
 800b85e:	2340      	movs	r3, #64	; 0x40
 800b860:	eba0 000a 	sub.w	r0, r0, sl
 800b864:	fa03 f000 	lsl.w	r0, r3, r0
 800b868:	9b04      	ldr	r3, [sp, #16]
 800b86a:	3401      	adds	r4, #1
 800b86c:	4303      	orrs	r3, r0
 800b86e:	9304      	str	r3, [sp, #16]
 800b870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b874:	2206      	movs	r2, #6
 800b876:	482d      	ldr	r0, [pc, #180]	; (800b92c <_vfiprintf_r+0x254>)
 800b878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b87c:	f7ff f96a 	bl	800ab54 <memchr>
 800b880:	2800      	cmp	r0, #0
 800b882:	d03f      	beq.n	800b904 <_vfiprintf_r+0x22c>
 800b884:	4b2a      	ldr	r3, [pc, #168]	; (800b930 <_vfiprintf_r+0x258>)
 800b886:	bb1b      	cbnz	r3, 800b8d0 <_vfiprintf_r+0x1f8>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	3307      	adds	r3, #7
 800b88c:	f023 0307 	bic.w	r3, r3, #7
 800b890:	3308      	adds	r3, #8
 800b892:	9303      	str	r3, [sp, #12]
 800b894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b896:	443b      	add	r3, r7
 800b898:	9309      	str	r3, [sp, #36]	; 0x24
 800b89a:	e767      	b.n	800b76c <_vfiprintf_r+0x94>
 800b89c:	460c      	mov	r4, r1
 800b89e:	2001      	movs	r0, #1
 800b8a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a4:	e7a5      	b.n	800b7f2 <_vfiprintf_r+0x11a>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f04f 0c0a 	mov.w	ip, #10
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	3401      	adds	r4, #1
 800b8b0:	9305      	str	r3, [sp, #20]
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b8:	3a30      	subs	r2, #48	; 0x30
 800b8ba:	2a09      	cmp	r2, #9
 800b8bc:	d903      	bls.n	800b8c6 <_vfiprintf_r+0x1ee>
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d0c5      	beq.n	800b84e <_vfiprintf_r+0x176>
 800b8c2:	9105      	str	r1, [sp, #20]
 800b8c4:	e7c3      	b.n	800b84e <_vfiprintf_r+0x176>
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ce:	e7f0      	b.n	800b8b2 <_vfiprintf_r+0x1da>
 800b8d0:	ab03      	add	r3, sp, #12
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	462a      	mov	r2, r5
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	4b16      	ldr	r3, [pc, #88]	; (800b934 <_vfiprintf_r+0x25c>)
 800b8da:	a904      	add	r1, sp, #16
 800b8dc:	f7fd fe86 	bl	80095ec <_printf_float>
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	1c78      	adds	r0, r7, #1
 800b8e4:	d1d6      	bne.n	800b894 <_vfiprintf_r+0x1bc>
 800b8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8e8:	07d9      	lsls	r1, r3, #31
 800b8ea:	d405      	bmi.n	800b8f8 <_vfiprintf_r+0x220>
 800b8ec:	89ab      	ldrh	r3, [r5, #12]
 800b8ee:	059a      	lsls	r2, r3, #22
 800b8f0:	d402      	bmi.n	800b8f8 <_vfiprintf_r+0x220>
 800b8f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8f4:	f7ff fe6c 	bl	800b5d0 <__retarget_lock_release_recursive>
 800b8f8:	89ab      	ldrh	r3, [r5, #12]
 800b8fa:	065b      	lsls	r3, r3, #25
 800b8fc:	f53f af12 	bmi.w	800b724 <_vfiprintf_r+0x4c>
 800b900:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b902:	e711      	b.n	800b728 <_vfiprintf_r+0x50>
 800b904:	ab03      	add	r3, sp, #12
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	462a      	mov	r2, r5
 800b90a:	4630      	mov	r0, r6
 800b90c:	4b09      	ldr	r3, [pc, #36]	; (800b934 <_vfiprintf_r+0x25c>)
 800b90e:	a904      	add	r1, sp, #16
 800b910:	f7fe f908 	bl	8009b24 <_printf_i>
 800b914:	e7e4      	b.n	800b8e0 <_vfiprintf_r+0x208>
 800b916:	bf00      	nop
 800b918:	0800c95c 	.word	0x0800c95c
 800b91c:	0800c97c 	.word	0x0800c97c
 800b920:	0800c93c 	.word	0x0800c93c
 800b924:	0800c7e4 	.word	0x0800c7e4
 800b928:	0800c7ea 	.word	0x0800c7ea
 800b92c:	0800c7ee 	.word	0x0800c7ee
 800b930:	080095ed 	.word	0x080095ed
 800b934:	0800b6b3 	.word	0x0800b6b3

0800b938 <__swbuf_r>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	460e      	mov	r6, r1
 800b93c:	4614      	mov	r4, r2
 800b93e:	4605      	mov	r5, r0
 800b940:	b118      	cbz	r0, 800b94a <__swbuf_r+0x12>
 800b942:	6983      	ldr	r3, [r0, #24]
 800b944:	b90b      	cbnz	r3, 800b94a <__swbuf_r+0x12>
 800b946:	f000 f9db 	bl	800bd00 <__sinit>
 800b94a:	4b21      	ldr	r3, [pc, #132]	; (800b9d0 <__swbuf_r+0x98>)
 800b94c:	429c      	cmp	r4, r3
 800b94e:	d12b      	bne.n	800b9a8 <__swbuf_r+0x70>
 800b950:	686c      	ldr	r4, [r5, #4]
 800b952:	69a3      	ldr	r3, [r4, #24]
 800b954:	60a3      	str	r3, [r4, #8]
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	071a      	lsls	r2, r3, #28
 800b95a:	d52f      	bpl.n	800b9bc <__swbuf_r+0x84>
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	b36b      	cbz	r3, 800b9bc <__swbuf_r+0x84>
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	b2f6      	uxtb	r6, r6
 800b966:	1ac0      	subs	r0, r0, r3
 800b968:	6963      	ldr	r3, [r4, #20]
 800b96a:	4637      	mov	r7, r6
 800b96c:	4283      	cmp	r3, r0
 800b96e:	dc04      	bgt.n	800b97a <__swbuf_r+0x42>
 800b970:	4621      	mov	r1, r4
 800b972:	4628      	mov	r0, r5
 800b974:	f000 f930 	bl	800bbd8 <_fflush_r>
 800b978:	bb30      	cbnz	r0, 800b9c8 <__swbuf_r+0x90>
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	3001      	adds	r0, #1
 800b97e:	3b01      	subs	r3, #1
 800b980:	60a3      	str	r3, [r4, #8]
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	6022      	str	r2, [r4, #0]
 800b988:	701e      	strb	r6, [r3, #0]
 800b98a:	6963      	ldr	r3, [r4, #20]
 800b98c:	4283      	cmp	r3, r0
 800b98e:	d004      	beq.n	800b99a <__swbuf_r+0x62>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	07db      	lsls	r3, r3, #31
 800b994:	d506      	bpl.n	800b9a4 <__swbuf_r+0x6c>
 800b996:	2e0a      	cmp	r6, #10
 800b998:	d104      	bne.n	800b9a4 <__swbuf_r+0x6c>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4628      	mov	r0, r5
 800b99e:	f000 f91b 	bl	800bbd8 <_fflush_r>
 800b9a2:	b988      	cbnz	r0, 800b9c8 <__swbuf_r+0x90>
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a8:	4b0a      	ldr	r3, [pc, #40]	; (800b9d4 <__swbuf_r+0x9c>)
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	d101      	bne.n	800b9b2 <__swbuf_r+0x7a>
 800b9ae:	68ac      	ldr	r4, [r5, #8]
 800b9b0:	e7cf      	b.n	800b952 <__swbuf_r+0x1a>
 800b9b2:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <__swbuf_r+0xa0>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	bf08      	it	eq
 800b9b8:	68ec      	ldreq	r4, [r5, #12]
 800b9ba:	e7ca      	b.n	800b952 <__swbuf_r+0x1a>
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f000 f81a 	bl	800b9f8 <__swsetup_r>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d0cb      	beq.n	800b960 <__swbuf_r+0x28>
 800b9c8:	f04f 37ff 	mov.w	r7, #4294967295
 800b9cc:	e7ea      	b.n	800b9a4 <__swbuf_r+0x6c>
 800b9ce:	bf00      	nop
 800b9d0:	0800c95c 	.word	0x0800c95c
 800b9d4:	0800c97c 	.word	0x0800c97c
 800b9d8:	0800c93c 	.word	0x0800c93c

0800b9dc <__ascii_wctomb>:
 800b9dc:	4603      	mov	r3, r0
 800b9de:	4608      	mov	r0, r1
 800b9e0:	b141      	cbz	r1, 800b9f4 <__ascii_wctomb+0x18>
 800b9e2:	2aff      	cmp	r2, #255	; 0xff
 800b9e4:	d904      	bls.n	800b9f0 <__ascii_wctomb+0x14>
 800b9e6:	228a      	movs	r2, #138	; 0x8a
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	4770      	bx	lr
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	700a      	strb	r2, [r1, #0]
 800b9f4:	4770      	bx	lr
	...

0800b9f8 <__swsetup_r>:
 800b9f8:	4b32      	ldr	r3, [pc, #200]	; (800bac4 <__swsetup_r+0xcc>)
 800b9fa:	b570      	push	{r4, r5, r6, lr}
 800b9fc:	681d      	ldr	r5, [r3, #0]
 800b9fe:	4606      	mov	r6, r0
 800ba00:	460c      	mov	r4, r1
 800ba02:	b125      	cbz	r5, 800ba0e <__swsetup_r+0x16>
 800ba04:	69ab      	ldr	r3, [r5, #24]
 800ba06:	b913      	cbnz	r3, 800ba0e <__swsetup_r+0x16>
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f000 f979 	bl	800bd00 <__sinit>
 800ba0e:	4b2e      	ldr	r3, [pc, #184]	; (800bac8 <__swsetup_r+0xd0>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	d10f      	bne.n	800ba34 <__swsetup_r+0x3c>
 800ba14:	686c      	ldr	r4, [r5, #4]
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba1c:	0719      	lsls	r1, r3, #28
 800ba1e:	d42c      	bmi.n	800ba7a <__swsetup_r+0x82>
 800ba20:	06dd      	lsls	r5, r3, #27
 800ba22:	d411      	bmi.n	800ba48 <__swsetup_r+0x50>
 800ba24:	2309      	movs	r3, #9
 800ba26:	6033      	str	r3, [r6, #0]
 800ba28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	81a3      	strh	r3, [r4, #12]
 800ba32:	e03e      	b.n	800bab2 <__swsetup_r+0xba>
 800ba34:	4b25      	ldr	r3, [pc, #148]	; (800bacc <__swsetup_r+0xd4>)
 800ba36:	429c      	cmp	r4, r3
 800ba38:	d101      	bne.n	800ba3e <__swsetup_r+0x46>
 800ba3a:	68ac      	ldr	r4, [r5, #8]
 800ba3c:	e7eb      	b.n	800ba16 <__swsetup_r+0x1e>
 800ba3e:	4b24      	ldr	r3, [pc, #144]	; (800bad0 <__swsetup_r+0xd8>)
 800ba40:	429c      	cmp	r4, r3
 800ba42:	bf08      	it	eq
 800ba44:	68ec      	ldreq	r4, [r5, #12]
 800ba46:	e7e6      	b.n	800ba16 <__swsetup_r+0x1e>
 800ba48:	0758      	lsls	r0, r3, #29
 800ba4a:	d512      	bpl.n	800ba72 <__swsetup_r+0x7a>
 800ba4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba4e:	b141      	cbz	r1, 800ba62 <__swsetup_r+0x6a>
 800ba50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba54:	4299      	cmp	r1, r3
 800ba56:	d002      	beq.n	800ba5e <__swsetup_r+0x66>
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7fd fc4d 	bl	80092f8 <_free_r>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6363      	str	r3, [r4, #52]	; 0x34
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba68:	81a3      	strh	r3, [r4, #12]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	6063      	str	r3, [r4, #4]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f043 0308 	orr.w	r3, r3, #8
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	b94b      	cbnz	r3, 800ba92 <__swsetup_r+0x9a>
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba88:	d003      	beq.n	800ba92 <__swsetup_r+0x9a>
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	f000 f9f9 	bl	800be84 <__smakebuf_r>
 800ba92:	89a0      	ldrh	r0, [r4, #12]
 800ba94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba98:	f010 0301 	ands.w	r3, r0, #1
 800ba9c:	d00a      	beq.n	800bab4 <__swsetup_r+0xbc>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60a3      	str	r3, [r4, #8]
 800baa2:	6963      	ldr	r3, [r4, #20]
 800baa4:	425b      	negs	r3, r3
 800baa6:	61a3      	str	r3, [r4, #24]
 800baa8:	6923      	ldr	r3, [r4, #16]
 800baaa:	b943      	cbnz	r3, 800babe <__swsetup_r+0xc6>
 800baac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bab0:	d1ba      	bne.n	800ba28 <__swsetup_r+0x30>
 800bab2:	bd70      	pop	{r4, r5, r6, pc}
 800bab4:	0781      	lsls	r1, r0, #30
 800bab6:	bf58      	it	pl
 800bab8:	6963      	ldrpl	r3, [r4, #20]
 800baba:	60a3      	str	r3, [r4, #8]
 800babc:	e7f4      	b.n	800baa8 <__swsetup_r+0xb0>
 800babe:	2000      	movs	r0, #0
 800bac0:	e7f7      	b.n	800bab2 <__swsetup_r+0xba>
 800bac2:	bf00      	nop
 800bac4:	2000000c 	.word	0x2000000c
 800bac8:	0800c95c 	.word	0x0800c95c
 800bacc:	0800c97c 	.word	0x0800c97c
 800bad0:	0800c93c 	.word	0x0800c93c

0800bad4 <__sflush_r>:
 800bad4:	898a      	ldrh	r2, [r1, #12]
 800bad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad8:	4605      	mov	r5, r0
 800bada:	0710      	lsls	r0, r2, #28
 800badc:	460c      	mov	r4, r1
 800bade:	d457      	bmi.n	800bb90 <__sflush_r+0xbc>
 800bae0:	684b      	ldr	r3, [r1, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dc04      	bgt.n	800baf0 <__sflush_r+0x1c>
 800bae6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dc01      	bgt.n	800baf0 <__sflush_r+0x1c>
 800baec:	2000      	movs	r0, #0
 800baee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baf2:	2e00      	cmp	r6, #0
 800baf4:	d0fa      	beq.n	800baec <__sflush_r+0x18>
 800baf6:	2300      	movs	r3, #0
 800baf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bafc:	682f      	ldr	r7, [r5, #0]
 800bafe:	602b      	str	r3, [r5, #0]
 800bb00:	d032      	beq.n	800bb68 <__sflush_r+0x94>
 800bb02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	075a      	lsls	r2, r3, #29
 800bb08:	d505      	bpl.n	800bb16 <__sflush_r+0x42>
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	1ac0      	subs	r0, r0, r3
 800bb0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb10:	b10b      	cbz	r3, 800bb16 <__sflush_r+0x42>
 800bb12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb14:	1ac0      	subs	r0, r0, r3
 800bb16:	2300      	movs	r3, #0
 800bb18:	4602      	mov	r2, r0
 800bb1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	6a21      	ldr	r1, [r4, #32]
 800bb20:	47b0      	blx	r6
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	d106      	bne.n	800bb36 <__sflush_r+0x62>
 800bb28:	6829      	ldr	r1, [r5, #0]
 800bb2a:	291d      	cmp	r1, #29
 800bb2c:	d82c      	bhi.n	800bb88 <__sflush_r+0xb4>
 800bb2e:	4a29      	ldr	r2, [pc, #164]	; (800bbd4 <__sflush_r+0x100>)
 800bb30:	40ca      	lsrs	r2, r1
 800bb32:	07d6      	lsls	r6, r2, #31
 800bb34:	d528      	bpl.n	800bb88 <__sflush_r+0xb4>
 800bb36:	2200      	movs	r2, #0
 800bb38:	6062      	str	r2, [r4, #4]
 800bb3a:	6922      	ldr	r2, [r4, #16]
 800bb3c:	04d9      	lsls	r1, r3, #19
 800bb3e:	6022      	str	r2, [r4, #0]
 800bb40:	d504      	bpl.n	800bb4c <__sflush_r+0x78>
 800bb42:	1c42      	adds	r2, r0, #1
 800bb44:	d101      	bne.n	800bb4a <__sflush_r+0x76>
 800bb46:	682b      	ldr	r3, [r5, #0]
 800bb48:	b903      	cbnz	r3, 800bb4c <__sflush_r+0x78>
 800bb4a:	6560      	str	r0, [r4, #84]	; 0x54
 800bb4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb4e:	602f      	str	r7, [r5, #0]
 800bb50:	2900      	cmp	r1, #0
 800bb52:	d0cb      	beq.n	800baec <__sflush_r+0x18>
 800bb54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb58:	4299      	cmp	r1, r3
 800bb5a:	d002      	beq.n	800bb62 <__sflush_r+0x8e>
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f7fd fbcb 	bl	80092f8 <_free_r>
 800bb62:	2000      	movs	r0, #0
 800bb64:	6360      	str	r0, [r4, #52]	; 0x34
 800bb66:	e7c2      	b.n	800baee <__sflush_r+0x1a>
 800bb68:	6a21      	ldr	r1, [r4, #32]
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	47b0      	blx	r6
 800bb70:	1c41      	adds	r1, r0, #1
 800bb72:	d1c7      	bne.n	800bb04 <__sflush_r+0x30>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d0c4      	beq.n	800bb04 <__sflush_r+0x30>
 800bb7a:	2b1d      	cmp	r3, #29
 800bb7c:	d001      	beq.n	800bb82 <__sflush_r+0xae>
 800bb7e:	2b16      	cmp	r3, #22
 800bb80:	d101      	bne.n	800bb86 <__sflush_r+0xb2>
 800bb82:	602f      	str	r7, [r5, #0]
 800bb84:	e7b2      	b.n	800baec <__sflush_r+0x18>
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	e7ae      	b.n	800baee <__sflush_r+0x1a>
 800bb90:	690f      	ldr	r7, [r1, #16]
 800bb92:	2f00      	cmp	r7, #0
 800bb94:	d0aa      	beq.n	800baec <__sflush_r+0x18>
 800bb96:	0793      	lsls	r3, r2, #30
 800bb98:	bf18      	it	ne
 800bb9a:	2300      	movne	r3, #0
 800bb9c:	680e      	ldr	r6, [r1, #0]
 800bb9e:	bf08      	it	eq
 800bba0:	694b      	ldreq	r3, [r1, #20]
 800bba2:	1bf6      	subs	r6, r6, r7
 800bba4:	600f      	str	r7, [r1, #0]
 800bba6:	608b      	str	r3, [r1, #8]
 800bba8:	2e00      	cmp	r6, #0
 800bbaa:	dd9f      	ble.n	800baec <__sflush_r+0x18>
 800bbac:	4633      	mov	r3, r6
 800bbae:	463a      	mov	r2, r7
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	6a21      	ldr	r1, [r4, #32]
 800bbb4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bbb8:	47e0      	blx	ip
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	dc06      	bgt.n	800bbcc <__sflush_r+0xf8>
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e790      	b.n	800baee <__sflush_r+0x1a>
 800bbcc:	4407      	add	r7, r0
 800bbce:	1a36      	subs	r6, r6, r0
 800bbd0:	e7ea      	b.n	800bba8 <__sflush_r+0xd4>
 800bbd2:	bf00      	nop
 800bbd4:	20400001 	.word	0x20400001

0800bbd8 <_fflush_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	690b      	ldr	r3, [r1, #16]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	b913      	cbnz	r3, 800bbe8 <_fflush_r+0x10>
 800bbe2:	2500      	movs	r5, #0
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}
 800bbe8:	b118      	cbz	r0, 800bbf2 <_fflush_r+0x1a>
 800bbea:	6983      	ldr	r3, [r0, #24]
 800bbec:	b90b      	cbnz	r3, 800bbf2 <_fflush_r+0x1a>
 800bbee:	f000 f887 	bl	800bd00 <__sinit>
 800bbf2:	4b14      	ldr	r3, [pc, #80]	; (800bc44 <_fflush_r+0x6c>)
 800bbf4:	429c      	cmp	r4, r3
 800bbf6:	d11b      	bne.n	800bc30 <_fflush_r+0x58>
 800bbf8:	686c      	ldr	r4, [r5, #4]
 800bbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0ef      	beq.n	800bbe2 <_fflush_r+0xa>
 800bc02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc04:	07d0      	lsls	r0, r2, #31
 800bc06:	d404      	bmi.n	800bc12 <_fflush_r+0x3a>
 800bc08:	0599      	lsls	r1, r3, #22
 800bc0a:	d402      	bmi.n	800bc12 <_fflush_r+0x3a>
 800bc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc0e:	f7ff fcde 	bl	800b5ce <__retarget_lock_acquire_recursive>
 800bc12:	4628      	mov	r0, r5
 800bc14:	4621      	mov	r1, r4
 800bc16:	f7ff ff5d 	bl	800bad4 <__sflush_r>
 800bc1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	07da      	lsls	r2, r3, #31
 800bc20:	d4e0      	bmi.n	800bbe4 <_fflush_r+0xc>
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	059b      	lsls	r3, r3, #22
 800bc26:	d4dd      	bmi.n	800bbe4 <_fflush_r+0xc>
 800bc28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc2a:	f7ff fcd1 	bl	800b5d0 <__retarget_lock_release_recursive>
 800bc2e:	e7d9      	b.n	800bbe4 <_fflush_r+0xc>
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <_fflush_r+0x70>)
 800bc32:	429c      	cmp	r4, r3
 800bc34:	d101      	bne.n	800bc3a <_fflush_r+0x62>
 800bc36:	68ac      	ldr	r4, [r5, #8]
 800bc38:	e7df      	b.n	800bbfa <_fflush_r+0x22>
 800bc3a:	4b04      	ldr	r3, [pc, #16]	; (800bc4c <_fflush_r+0x74>)
 800bc3c:	429c      	cmp	r4, r3
 800bc3e:	bf08      	it	eq
 800bc40:	68ec      	ldreq	r4, [r5, #12]
 800bc42:	e7da      	b.n	800bbfa <_fflush_r+0x22>
 800bc44:	0800c95c 	.word	0x0800c95c
 800bc48:	0800c97c 	.word	0x0800c97c
 800bc4c:	0800c93c 	.word	0x0800c93c

0800bc50 <std>:
 800bc50:	2300      	movs	r3, #0
 800bc52:	b510      	push	{r4, lr}
 800bc54:	4604      	mov	r4, r0
 800bc56:	e9c0 3300 	strd	r3, r3, [r0]
 800bc5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc5e:	6083      	str	r3, [r0, #8]
 800bc60:	8181      	strh	r1, [r0, #12]
 800bc62:	6643      	str	r3, [r0, #100]	; 0x64
 800bc64:	81c2      	strh	r2, [r0, #14]
 800bc66:	6183      	str	r3, [r0, #24]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	2208      	movs	r2, #8
 800bc6c:	305c      	adds	r0, #92	; 0x5c
 800bc6e:	f7fd fb3b 	bl	80092e8 <memset>
 800bc72:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <std+0x38>)
 800bc74:	6224      	str	r4, [r4, #32]
 800bc76:	6263      	str	r3, [r4, #36]	; 0x24
 800bc78:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <std+0x3c>)
 800bc7a:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc7c:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <std+0x40>)
 800bc7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <std+0x44>)
 800bc82:	6323      	str	r3, [r4, #48]	; 0x30
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	bf00      	nop
 800bc88:	0800bf15 	.word	0x0800bf15
 800bc8c:	0800bf37 	.word	0x0800bf37
 800bc90:	0800bf6f 	.word	0x0800bf6f
 800bc94:	0800bf93 	.word	0x0800bf93

0800bc98 <_cleanup_r>:
 800bc98:	4901      	ldr	r1, [pc, #4]	; (800bca0 <_cleanup_r+0x8>)
 800bc9a:	f000 b8af 	b.w	800bdfc <_fwalk_reent>
 800bc9e:	bf00      	nop
 800bca0:	0800bbd9 	.word	0x0800bbd9

0800bca4 <__sfmoreglue>:
 800bca4:	2268      	movs	r2, #104	; 0x68
 800bca6:	b570      	push	{r4, r5, r6, lr}
 800bca8:	1e4d      	subs	r5, r1, #1
 800bcaa:	4355      	muls	r5, r2
 800bcac:	460e      	mov	r6, r1
 800bcae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcb2:	f7fd fb89 	bl	80093c8 <_malloc_r>
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	b140      	cbz	r0, 800bccc <__sfmoreglue+0x28>
 800bcba:	2100      	movs	r1, #0
 800bcbc:	e9c0 1600 	strd	r1, r6, [r0]
 800bcc0:	300c      	adds	r0, #12
 800bcc2:	60a0      	str	r0, [r4, #8]
 800bcc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcc8:	f7fd fb0e 	bl	80092e8 <memset>
 800bccc:	4620      	mov	r0, r4
 800bcce:	bd70      	pop	{r4, r5, r6, pc}

0800bcd0 <__sfp_lock_acquire>:
 800bcd0:	4801      	ldr	r0, [pc, #4]	; (800bcd8 <__sfp_lock_acquire+0x8>)
 800bcd2:	f7ff bc7c 	b.w	800b5ce <__retarget_lock_acquire_recursive>
 800bcd6:	bf00      	nop
 800bcd8:	20000391 	.word	0x20000391

0800bcdc <__sfp_lock_release>:
 800bcdc:	4801      	ldr	r0, [pc, #4]	; (800bce4 <__sfp_lock_release+0x8>)
 800bcde:	f7ff bc77 	b.w	800b5d0 <__retarget_lock_release_recursive>
 800bce2:	bf00      	nop
 800bce4:	20000391 	.word	0x20000391

0800bce8 <__sinit_lock_acquire>:
 800bce8:	4801      	ldr	r0, [pc, #4]	; (800bcf0 <__sinit_lock_acquire+0x8>)
 800bcea:	f7ff bc70 	b.w	800b5ce <__retarget_lock_acquire_recursive>
 800bcee:	bf00      	nop
 800bcf0:	20000392 	.word	0x20000392

0800bcf4 <__sinit_lock_release>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	; (800bcfc <__sinit_lock_release+0x8>)
 800bcf6:	f7ff bc6b 	b.w	800b5d0 <__retarget_lock_release_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	20000392 	.word	0x20000392

0800bd00 <__sinit>:
 800bd00:	b510      	push	{r4, lr}
 800bd02:	4604      	mov	r4, r0
 800bd04:	f7ff fff0 	bl	800bce8 <__sinit_lock_acquire>
 800bd08:	69a3      	ldr	r3, [r4, #24]
 800bd0a:	b11b      	cbz	r3, 800bd14 <__sinit+0x14>
 800bd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd10:	f7ff bff0 	b.w	800bcf4 <__sinit_lock_release>
 800bd14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd18:	6523      	str	r3, [r4, #80]	; 0x50
 800bd1a:	4b13      	ldr	r3, [pc, #76]	; (800bd68 <__sinit+0x68>)
 800bd1c:	4a13      	ldr	r2, [pc, #76]	; (800bd6c <__sinit+0x6c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd22:	42a3      	cmp	r3, r4
 800bd24:	bf08      	it	eq
 800bd26:	2301      	moveq	r3, #1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	bf08      	it	eq
 800bd2c:	61a3      	streq	r3, [r4, #24]
 800bd2e:	f000 f81f 	bl	800bd70 <__sfp>
 800bd32:	6060      	str	r0, [r4, #4]
 800bd34:	4620      	mov	r0, r4
 800bd36:	f000 f81b 	bl	800bd70 <__sfp>
 800bd3a:	60a0      	str	r0, [r4, #8]
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 f817 	bl	800bd70 <__sfp>
 800bd42:	2200      	movs	r2, #0
 800bd44:	2104      	movs	r1, #4
 800bd46:	60e0      	str	r0, [r4, #12]
 800bd48:	6860      	ldr	r0, [r4, #4]
 800bd4a:	f7ff ff81 	bl	800bc50 <std>
 800bd4e:	2201      	movs	r2, #1
 800bd50:	2109      	movs	r1, #9
 800bd52:	68a0      	ldr	r0, [r4, #8]
 800bd54:	f7ff ff7c 	bl	800bc50 <std>
 800bd58:	2202      	movs	r2, #2
 800bd5a:	2112      	movs	r1, #18
 800bd5c:	68e0      	ldr	r0, [r4, #12]
 800bd5e:	f7ff ff77 	bl	800bc50 <std>
 800bd62:	2301      	movs	r3, #1
 800bd64:	61a3      	str	r3, [r4, #24]
 800bd66:	e7d1      	b.n	800bd0c <__sinit+0xc>
 800bd68:	0800c5c0 	.word	0x0800c5c0
 800bd6c:	0800bc99 	.word	0x0800bc99

0800bd70 <__sfp>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	4607      	mov	r7, r0
 800bd74:	f7ff ffac 	bl	800bcd0 <__sfp_lock_acquire>
 800bd78:	4b1e      	ldr	r3, [pc, #120]	; (800bdf4 <__sfp+0x84>)
 800bd7a:	681e      	ldr	r6, [r3, #0]
 800bd7c:	69b3      	ldr	r3, [r6, #24]
 800bd7e:	b913      	cbnz	r3, 800bd86 <__sfp+0x16>
 800bd80:	4630      	mov	r0, r6
 800bd82:	f7ff ffbd 	bl	800bd00 <__sinit>
 800bd86:	3648      	adds	r6, #72	; 0x48
 800bd88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	d503      	bpl.n	800bd98 <__sfp+0x28>
 800bd90:	6833      	ldr	r3, [r6, #0]
 800bd92:	b30b      	cbz	r3, 800bdd8 <__sfp+0x68>
 800bd94:	6836      	ldr	r6, [r6, #0]
 800bd96:	e7f7      	b.n	800bd88 <__sfp+0x18>
 800bd98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd9c:	b9d5      	cbnz	r5, 800bdd4 <__sfp+0x64>
 800bd9e:	4b16      	ldr	r3, [pc, #88]	; (800bdf8 <__sfp+0x88>)
 800bda0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bda4:	60e3      	str	r3, [r4, #12]
 800bda6:	6665      	str	r5, [r4, #100]	; 0x64
 800bda8:	f7ff fc10 	bl	800b5cc <__retarget_lock_init_recursive>
 800bdac:	f7ff ff96 	bl	800bcdc <__sfp_lock_release>
 800bdb0:	2208      	movs	r2, #8
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bdb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdbc:	6025      	str	r5, [r4, #0]
 800bdbe:	61a5      	str	r5, [r4, #24]
 800bdc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdc4:	f7fd fa90 	bl	80092e8 <memset>
 800bdc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd4:	3468      	adds	r4, #104	; 0x68
 800bdd6:	e7d9      	b.n	800bd8c <__sfp+0x1c>
 800bdd8:	2104      	movs	r1, #4
 800bdda:	4638      	mov	r0, r7
 800bddc:	f7ff ff62 	bl	800bca4 <__sfmoreglue>
 800bde0:	4604      	mov	r4, r0
 800bde2:	6030      	str	r0, [r6, #0]
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d1d5      	bne.n	800bd94 <__sfp+0x24>
 800bde8:	f7ff ff78 	bl	800bcdc <__sfp_lock_release>
 800bdec:	230c      	movs	r3, #12
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	e7ee      	b.n	800bdd0 <__sfp+0x60>
 800bdf2:	bf00      	nop
 800bdf4:	0800c5c0 	.word	0x0800c5c0
 800bdf8:	ffff0001 	.word	0xffff0001

0800bdfc <_fwalk_reent>:
 800bdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be00:	4606      	mov	r6, r0
 800be02:	4688      	mov	r8, r1
 800be04:	2700      	movs	r7, #0
 800be06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be0e:	f1b9 0901 	subs.w	r9, r9, #1
 800be12:	d505      	bpl.n	800be20 <_fwalk_reent+0x24>
 800be14:	6824      	ldr	r4, [r4, #0]
 800be16:	2c00      	cmp	r4, #0
 800be18:	d1f7      	bne.n	800be0a <_fwalk_reent+0xe>
 800be1a:	4638      	mov	r0, r7
 800be1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be20:	89ab      	ldrh	r3, [r5, #12]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d907      	bls.n	800be36 <_fwalk_reent+0x3a>
 800be26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be2a:	3301      	adds	r3, #1
 800be2c:	d003      	beq.n	800be36 <_fwalk_reent+0x3a>
 800be2e:	4629      	mov	r1, r5
 800be30:	4630      	mov	r0, r6
 800be32:	47c0      	blx	r8
 800be34:	4307      	orrs	r7, r0
 800be36:	3568      	adds	r5, #104	; 0x68
 800be38:	e7e9      	b.n	800be0e <_fwalk_reent+0x12>

0800be3a <__swhatbuf_r>:
 800be3a:	b570      	push	{r4, r5, r6, lr}
 800be3c:	460e      	mov	r6, r1
 800be3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be42:	4614      	mov	r4, r2
 800be44:	2900      	cmp	r1, #0
 800be46:	461d      	mov	r5, r3
 800be48:	b096      	sub	sp, #88	; 0x58
 800be4a:	da08      	bge.n	800be5e <__swhatbuf_r+0x24>
 800be4c:	2200      	movs	r2, #0
 800be4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be52:	602a      	str	r2, [r5, #0]
 800be54:	061a      	lsls	r2, r3, #24
 800be56:	d410      	bmi.n	800be7a <__swhatbuf_r+0x40>
 800be58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be5c:	e00e      	b.n	800be7c <__swhatbuf_r+0x42>
 800be5e:	466a      	mov	r2, sp
 800be60:	f000 f8be 	bl	800bfe0 <_fstat_r>
 800be64:	2800      	cmp	r0, #0
 800be66:	dbf1      	blt.n	800be4c <__swhatbuf_r+0x12>
 800be68:	9a01      	ldr	r2, [sp, #4]
 800be6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be72:	425a      	negs	r2, r3
 800be74:	415a      	adcs	r2, r3
 800be76:	602a      	str	r2, [r5, #0]
 800be78:	e7ee      	b.n	800be58 <__swhatbuf_r+0x1e>
 800be7a:	2340      	movs	r3, #64	; 0x40
 800be7c:	2000      	movs	r0, #0
 800be7e:	6023      	str	r3, [r4, #0]
 800be80:	b016      	add	sp, #88	; 0x58
 800be82:	bd70      	pop	{r4, r5, r6, pc}

0800be84 <__smakebuf_r>:
 800be84:	898b      	ldrh	r3, [r1, #12]
 800be86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be88:	079d      	lsls	r5, r3, #30
 800be8a:	4606      	mov	r6, r0
 800be8c:	460c      	mov	r4, r1
 800be8e:	d507      	bpl.n	800bea0 <__smakebuf_r+0x1c>
 800be90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	6123      	str	r3, [r4, #16]
 800be98:	2301      	movs	r3, #1
 800be9a:	6163      	str	r3, [r4, #20]
 800be9c:	b002      	add	sp, #8
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	466a      	mov	r2, sp
 800bea2:	ab01      	add	r3, sp, #4
 800bea4:	f7ff ffc9 	bl	800be3a <__swhatbuf_r>
 800bea8:	9900      	ldr	r1, [sp, #0]
 800beaa:	4605      	mov	r5, r0
 800beac:	4630      	mov	r0, r6
 800beae:	f7fd fa8b 	bl	80093c8 <_malloc_r>
 800beb2:	b948      	cbnz	r0, 800bec8 <__smakebuf_r+0x44>
 800beb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb8:	059a      	lsls	r2, r3, #22
 800beba:	d4ef      	bmi.n	800be9c <__smakebuf_r+0x18>
 800bebc:	f023 0303 	bic.w	r3, r3, #3
 800bec0:	f043 0302 	orr.w	r3, r3, #2
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	e7e3      	b.n	800be90 <__smakebuf_r+0xc>
 800bec8:	4b0d      	ldr	r3, [pc, #52]	; (800bf00 <__smakebuf_r+0x7c>)
 800beca:	62b3      	str	r3, [r6, #40]	; 0x28
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	6020      	str	r0, [r4, #0]
 800bed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bed4:	81a3      	strh	r3, [r4, #12]
 800bed6:	9b00      	ldr	r3, [sp, #0]
 800bed8:	6120      	str	r0, [r4, #16]
 800beda:	6163      	str	r3, [r4, #20]
 800bedc:	9b01      	ldr	r3, [sp, #4]
 800bede:	b15b      	cbz	r3, 800bef8 <__smakebuf_r+0x74>
 800bee0:	4630      	mov	r0, r6
 800bee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bee6:	f000 f88d 	bl	800c004 <_isatty_r>
 800beea:	b128      	cbz	r0, 800bef8 <__smakebuf_r+0x74>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	f023 0303 	bic.w	r3, r3, #3
 800bef2:	f043 0301 	orr.w	r3, r3, #1
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	89a0      	ldrh	r0, [r4, #12]
 800befa:	4305      	orrs	r5, r0
 800befc:	81a5      	strh	r5, [r4, #12]
 800befe:	e7cd      	b.n	800be9c <__smakebuf_r+0x18>
 800bf00:	0800bc99 	.word	0x0800bc99

0800bf04 <_malloc_usable_size_r>:
 800bf04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf08:	1f18      	subs	r0, r3, #4
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	bfbc      	itt	lt
 800bf0e:	580b      	ldrlt	r3, [r1, r0]
 800bf10:	18c0      	addlt	r0, r0, r3
 800bf12:	4770      	bx	lr

0800bf14 <__sread>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	460c      	mov	r4, r1
 800bf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1c:	f000 f894 	bl	800c048 <_read_r>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	bfab      	itete	ge
 800bf24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf26:	89a3      	ldrhlt	r3, [r4, #12]
 800bf28:	181b      	addge	r3, r3, r0
 800bf2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf2e:	bfac      	ite	ge
 800bf30:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf32:	81a3      	strhlt	r3, [r4, #12]
 800bf34:	bd10      	pop	{r4, pc}

0800bf36 <__swrite>:
 800bf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3a:	461f      	mov	r7, r3
 800bf3c:	898b      	ldrh	r3, [r1, #12]
 800bf3e:	4605      	mov	r5, r0
 800bf40:	05db      	lsls	r3, r3, #23
 800bf42:	460c      	mov	r4, r1
 800bf44:	4616      	mov	r6, r2
 800bf46:	d505      	bpl.n	800bf54 <__swrite+0x1e>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf50:	f000 f868 	bl	800c024 <_lseek_r>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	4632      	mov	r2, r6
 800bf58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	4628      	mov	r0, r5
 800bf60:	463b      	mov	r3, r7
 800bf62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6a:	f000 b817 	b.w	800bf9c <_write_r>

0800bf6e <__sseek>:
 800bf6e:	b510      	push	{r4, lr}
 800bf70:	460c      	mov	r4, r1
 800bf72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf76:	f000 f855 	bl	800c024 <_lseek_r>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	bf15      	itete	ne
 800bf80:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf8a:	81a3      	strheq	r3, [r4, #12]
 800bf8c:	bf18      	it	ne
 800bf8e:	81a3      	strhne	r3, [r4, #12]
 800bf90:	bd10      	pop	{r4, pc}

0800bf92 <__sclose>:
 800bf92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf96:	f000 b813 	b.w	800bfc0 <_close_r>
	...

0800bf9c <_write_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	4d05      	ldr	r5, [pc, #20]	; (800bfbc <_write_r+0x20>)
 800bfa8:	602a      	str	r2, [r5, #0]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f7f7 f9a4 	bl	80032f8 <_write>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d102      	bne.n	800bfba <_write_r+0x1e>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	b103      	cbz	r3, 800bfba <_write_r+0x1e>
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	2000038c 	.word	0x2000038c

0800bfc0 <_close_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4d05      	ldr	r5, [pc, #20]	; (800bfdc <_close_r+0x1c>)
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	4608      	mov	r0, r1
 800bfca:	602b      	str	r3, [r5, #0]
 800bfcc:	f7f7 f9b0 	bl	8003330 <_close>
 800bfd0:	1c43      	adds	r3, r0, #1
 800bfd2:	d102      	bne.n	800bfda <_close_r+0x1a>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	b103      	cbz	r3, 800bfda <_close_r+0x1a>
 800bfd8:	6023      	str	r3, [r4, #0]
 800bfda:	bd38      	pop	{r3, r4, r5, pc}
 800bfdc:	2000038c 	.word	0x2000038c

0800bfe0 <_fstat_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	4d06      	ldr	r5, [pc, #24]	; (800c000 <_fstat_r+0x20>)
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	4608      	mov	r0, r1
 800bfea:	4611      	mov	r1, r2
 800bfec:	602b      	str	r3, [r5, #0]
 800bfee:	f7f7 f9aa 	bl	8003346 <_fstat>
 800bff2:	1c43      	adds	r3, r0, #1
 800bff4:	d102      	bne.n	800bffc <_fstat_r+0x1c>
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	b103      	cbz	r3, 800bffc <_fstat_r+0x1c>
 800bffa:	6023      	str	r3, [r4, #0]
 800bffc:	bd38      	pop	{r3, r4, r5, pc}
 800bffe:	bf00      	nop
 800c000:	2000038c 	.word	0x2000038c

0800c004 <_isatty_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	2300      	movs	r3, #0
 800c008:	4d05      	ldr	r5, [pc, #20]	; (800c020 <_isatty_r+0x1c>)
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	602b      	str	r3, [r5, #0]
 800c010:	f7f7 f9a8 	bl	8003364 <_isatty>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d102      	bne.n	800c01e <_isatty_r+0x1a>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	b103      	cbz	r3, 800c01e <_isatty_r+0x1a>
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	2000038c 	.word	0x2000038c

0800c024 <_lseek_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	4611      	mov	r1, r2
 800c02c:	2200      	movs	r2, #0
 800c02e:	4d05      	ldr	r5, [pc, #20]	; (800c044 <_lseek_r+0x20>)
 800c030:	602a      	str	r2, [r5, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	f7f7 f9a0 	bl	8003378 <_lseek>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_lseek_r+0x1e>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_lseek_r+0x1e>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	2000038c 	.word	0x2000038c

0800c048 <_read_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	4611      	mov	r1, r2
 800c050:	2200      	movs	r2, #0
 800c052:	4d05      	ldr	r5, [pc, #20]	; (800c068 <_read_r+0x20>)
 800c054:	602a      	str	r2, [r5, #0]
 800c056:	461a      	mov	r2, r3
 800c058:	f7f7 f931 	bl	80032be <_read>
 800c05c:	1c43      	adds	r3, r0, #1
 800c05e:	d102      	bne.n	800c066 <_read_r+0x1e>
 800c060:	682b      	ldr	r3, [r5, #0]
 800c062:	b103      	cbz	r3, 800c066 <_read_r+0x1e>
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	2000038c 	.word	0x2000038c

0800c06c <_init>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	bf00      	nop
 800c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c072:	bc08      	pop	{r3}
 800c074:	469e      	mov	lr, r3
 800c076:	4770      	bx	lr

0800c078 <_fini>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	bf00      	nop
 800c07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07e:	bc08      	pop	{r3}
 800c080:	469e      	mov	lr, r3
 800c082:	4770      	bx	lr
