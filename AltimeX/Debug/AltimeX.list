
AltimeX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  0800bcd0  0800bcd0  0001bcd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c56c  0800c56c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c56c  0800c56c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c56c  0800c56c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c56c  0800c56c  0001c56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c570  0800c570  0001c570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200001dc  0800c750  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800c750  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d158  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003537  00000000  00000000  0003d35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00040898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000419d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0d4  00000000  00000000  000429f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016aeb  00000000  00000000  0005dacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092727  00000000  00000000  000745b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  00106d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bcb8 	.word	0x0800bcb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800bcb8 	.word	0x0800bcb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>:
 *  Created on: Jul 6, 2023
 *      Author: Kyle Kingsberry
 */
#include "LPS22HB.h"

LPS22HB::LPS22HB(I2C_HandleTypeDef* i2c_config, uint16_t address):
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	i2c_config(i2c_config),
	address(address),
	reference_pressure(0),
	reference_temperature(0)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	88fa      	ldrh	r2, [r7, #6]
 80011b4:	809a      	strh	r2, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	80da      	strh	r2, [r3, #6]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	811a      	strh	r2, [r3, #8]
{

}
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_ZN7LPS22HB4initEv>:

uint8_t LPS22HB::init()
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f002 f87f 	bl	80032dc <HAL_Delay>

	//Make sure the sensor is powered on and discovered on the I2C bus
	HAL_StatusTypeDef i2c_status = HAL_I2C_IsDeviceReady(i2c_config, (uint16_t)(LPS_DEFAULT_ADDRESS<<1), 3, 5);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	2305      	movs	r3, #5
 80011e4:	2203      	movs	r2, #3
 80011e6:	21b8      	movs	r1, #184	; 0xb8
 80011e8:	f003 fa8e 	bl	8004708 <HAL_I2C_IsDeviceReady>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	if(i2c_status == HAL_BUSY) {
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d101      	bne.n	80011fa <_ZN7LPS22HB4initEv+0x2c>
		return 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e012      	b.n	8001220 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set the ouptut data rate (odr)
	this->set_odr(ODR_75hz);
 80011fa:	2105      	movs	r1, #5
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f830 	bl	8001262 <_ZN7LPS22HB7set_odrE7LPS_ODR>

	//Make sure the odr matches the desired odr
	enum LPS_ODR odr = this->get_odr();
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f85d 	bl	80012c2 <_ZN7LPS22HB7get_odrEv>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]
	if(odr != ODR_75hz) {
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d001      	beq.n	8001216 <_ZN7LPS22HB4initEv+0x48>
		return 0;
 8001212:	2300      	movs	r3, #0
 8001214:	e004      	b.n	8001220 <_ZN7LPS22HB4initEv+0x52>
	}

	//Set FIFO mode to BYPASS
	this->configure_fifo(BYPASS);
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f865 	bl	80012e8 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>

	//Enable low pass filter
	//LPS_Configure_LPFP(ODR_9);

	return 1;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN7LPS22HB8reg_readEttPh>:

void LPS22HB::reg_read(uint16_t reg_addr, uint16_t reg_size, uint8_t* data_output)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af04      	add	r7, sp, #16
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	817b      	strh	r3, [r7, #10]
 8001236:	4613      	mov	r3, r2
 8001238:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(this->i2c_config, (uint16_t)(this->address<<1), reg_addr, 1, data_output, reg_size, 100);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	897a      	ldrh	r2, [r7, #10]
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	893b      	ldrh	r3, [r7, #8]
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	f002 ffef 	bl	8004238 <HAL_I2C_Mem_Read>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN7LPS22HB7set_odrE7LPS_ODR>:

//Configures the output data rate (ODR)
void LPS22HB::set_odr(enum LPS_ODR new_odr)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b088      	sub	sp, #32
 8001266:	af04      	add	r7, sp, #16
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	//Read the existing configuration from the CTRL_REG 1
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffd6 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	//Clear top 4 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x0F;
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	b2db      	uxtb	r3, r3
 8001284:	723b      	strb	r3, [r7, #8]

	//Store the new ODR configuration
	newConfig[0] |= (new_odr << 4);
 8001286:	7a3b      	ldrb	r3, [r7, #8]
 8001288:	b25a      	sxtb	r2, r3
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	723b      	strb	r3, [r7, #8]

	//Write new ODR to register
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t)(this->address<<1), CTRL_REG1, 1, newConfig, 1, 100);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	889b      	ldrh	r3, [r3, #4]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b299      	uxth	r1, r3
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2210      	movs	r2, #16
 80012b6:	f002 fec5 	bl	8004044 <HAL_I2C_Mem_Write>

	/*
	uint8_t actualNewConfig[1];
	LPS_Reg_Read(CTRL_REG1, 1, actualNewConfig);
	*/
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_ZN7LPS22HB7get_odrEv>:

//Reads the sensors odr
enum LPS_ODR LPS22HB::get_odr()
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	uint8_t existingConfig[1];
	this->reg_read(CTRL_REG1, 1, existingConfig);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2201      	movs	r2, #1
 80012d0:	2110      	movs	r1, #16
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa8 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
	uint8_t odr_code = (existingConfig[0] >> 4);
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	73fb      	strb	r3, [r7, #15]

	return static_cast<LPS_ODR>(odr_code);
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO>:

//Configures the FIFO for the desired mode
void LPS22HB::configure_fifo(enum LPS_FIFO desiredFifo)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af04      	add	r7, sp, #16
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
	//Only supports bypass mode for now
	if(desiredFifo != BYPASS) {
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11d      	bne.n	8001336 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x4e>
		return;
	}

	//Read existing FIFO config from sensor
	uint8_t existingConfig[1];
	this->reg_read(FIFO_CTRL, 1, existingConfig);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2201      	movs	r2, #1
 8001300:	2114      	movs	r1, #20
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff90 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	//Clear the top 3 bits from the existing config
	uint8_t newConfig[1];
	newConfig[0] = existingConfig[0] & 0x1F;
 8001308:	7b3b      	ldrb	r3, [r7, #12]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	b2db      	uxtb	r3, r3
 8001310:	723b      	strb	r3, [r7, #8]

	//Write new FIFO config to sensor
	HAL_I2C_Mem_Write(this->i2c_config, (uint16_t) (this->address<<1), FIFO_CTRL, 1, newConfig, 1, 100);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	889b      	ldrh	r3, [r3, #4]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b299      	uxth	r1, r3
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	2214      	movs	r2, #20
 8001330:	f002 fe88 	bl	8004044 <HAL_I2C_Mem_Write>
 8001334:	e000      	b.n	8001338 <_ZN7LPS22HB14configure_fifoE8LPS_FIFO+0x50>
		return;
 8001336:	bf00      	nop
}
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <_ZN7LPS22HB12get_pressureEv>:

//Returns the pressure read by the sensor in HPA
double LPS22HB::get_pressure()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 4096.0;
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <_ZN7LPS22HB12get_pressureEv+0x68>)
 800134e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	uint8_t press_out_h[1];
	uint8_t press_out_l[1];
	uint8_t press_out_xl[1];

	this->reg_read(PRESS_OUT_H, 1, press_out_h);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2201      	movs	r2, #1
 8001358:	212a      	movs	r1, #42	; 0x2a
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff64 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_L, 1, press_out_l);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2201      	movs	r2, #1
 8001366:	2129      	movs	r1, #41	; 0x29
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff5d 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(PRESS_OUT_XL, 1, press_out_xl);
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2201      	movs	r2, #1
 8001374:	2128      	movs	r1, #40	; 0x28
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff56 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	uint32_t pressure = (press_out_h[0] << 16) + (press_out_l[0] << 8) + press_out_xl[0];
 800137c:	7c3b      	ldrb	r3, [r7, #16]
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4413      	add	r3, r2
 8001386:	7a3a      	ldrb	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

	return pressure / SCALING_FACTOR;
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff f829 	bl	80003e4 <__aeabi_ui2d>
 8001392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001396:	f7ff f9c9 	bl	800072c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
}
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40b00000 	.word	0x40b00000

080013ac <_ZN7LPS22HB8get_tempEv>:

//Returns the temperature read by the sensor in C
double LPS22HB::get_temp()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	double SCALING_FACTOR = 100.0;
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_ZN7LPS22HB8get_tempEv+0x54>)
 80013ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t temp_out_h[1];
	uint8_t temp_out_l[1];

    this->reg_read(TEMP_OUT_H, 1, temp_out_h);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2201      	movs	r2, #1
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff2e 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>
    this->reg_read(TEMP_OUT_L, 1, temp_out_l);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2201      	movs	r2, #1
 80013d2:	212b      	movs	r1, #43	; 0x2b
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff27 	bl	8001228 <_ZN7LPS22HB8reg_readEttPh>

	uint32_t temperature = (temp_out_h[0] << 8) + temp_out_l[0];
 80013da:	7c3b      	ldrb	r3, [r7, #16]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	7b3a      	ldrb	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]

	return temperature / SCALING_FACTOR;
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	f7fe fffd 	bl	80003e4 <__aeabi_ui2d>
 80013ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ee:	f7ff f99d 	bl	800072c <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
}
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40590000 	.word	0x40590000
 8001404:	00000000 	.word	0x00000000

08001408 <_ZN7LPS22HB9get_tempfEv>:

double LPS22HB::get_tempf()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	double tempC = this->get_temp();
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffcb 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 8001416:	e9c7 0102 	strd	r0, r1, [r7, #8]
	return (tempC * (9/5.0)) + 32;
 800141a:	a30b      	add	r3, pc, #44	; (adr r3, 8001448 <_ZN7LPS22HB9get_tempfEv+0x40>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001424:	f7ff f858 	bl	80004d8 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <_ZN7LPS22HB9get_tempfEv+0x48>)
 8001436:	f7fe fe99 	bl	800016c <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
}
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	3ffccccc 	.word	0x3ffccccc
 8001450:	40400000 	.word	0x40400000
 8001454:	00000000 	.word	0x00000000

08001458 <_ZN7LPS22HB13get_relalt_ftEv>:
	return pressHPA * 0.0009869233;
}

//Reference pressure is pressure in Pa at surface
double LPS22HB::get_relalt_ft()
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	double p = this->get_pressure();
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff6d 	bl	8001340 <_ZN7LPS22HB12get_pressureEv>
 8001466:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double t = this->get_temp();
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff9e 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 8001470:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	//Hypsometric formula: https://keisan.casio.com/exec/system/1224585971
	double frac_p = (double)this->reference_pressure / p;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	88db      	ldrh	r3, [r3, #6]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ffb3 	bl	80003e4 <__aeabi_ui2d>
 800147e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001482:	f7ff f953 	bl	800072c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exponential = pow(frac_p, (double)1.0/5.257);
 800148e:	a320      	add	r3, pc, #128	; (adr r3, 8001510 <_ZN7LPS22HB13get_relalt_ftEv+0xb8>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001498:	f006 f84e 	bl	8007538 <pow>
 800149c:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double fraction_top = (exponential - 1) * (t + 273.15);
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <_ZN7LPS22HB13get_relalt_ftEv+0xd8>)
 80014a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014aa:	f7fe fe5d 	bl	8000168 <__aeabi_dsub>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	a318      	add	r3, pc, #96	; (adr r3, 8001518 <_ZN7LPS22HB13get_relalt_ftEv+0xc0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014c0:	f7fe fe54 	bl	800016c <__adddf3>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f804 	bl	80004d8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double alt_m = fraction_top / 0.0065;
 80014d8:	a311      	add	r3, pc, #68	; (adr r3, 8001520 <_ZN7LPS22HB13get_relalt_ftEv+0xc8>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e2:	f7ff f923 	bl	800072c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return alt_m * 3.281; //Convert to ft and return
 80014ee:	a30e      	add	r3, pc, #56	; (adr r3, 8001528 <_ZN7LPS22HB13get_relalt_ftEv+0xd0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f8:	f7fe ffee 	bl	80004d8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
}
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bdb0      	pop	{r4, r5, r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	7dee2d4a 	.word	0x7dee2d4a
 8001514:	3fc85936 	.word	0x3fc85936
 8001518:	66666666 	.word	0x66666666
 800151c:	40711266 	.word	0x40711266
 8001520:	76c8b439 	.word	0x76c8b439
 8001524:	3f7a9fbe 	.word	0x3f7a9fbe
 8001528:	ed916873 	.word	0xed916873
 800152c:	400a3f7c 	.word	0x400a3f7c
 8001530:	3ff00000 	.word	0x3ff00000

08001534 <_ZN7LPS22HB9calibrateEhh>:

void LPS22HB::calibrate(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	4613      	mov	r3, r2
 8001542:	70bb      	strb	r3, [r7, #2]
	this->reference_temperature = this->get_calibration_temperature(num_samples, sample_time_ms);
 8001544:	78ba      	ldrb	r2, [r7, #2]
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f81e 	bl	800158c <_ZN7LPS22HB27get_calibration_temperatureEhh>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fa96 	bl	8000a88 <__aeabi_d2uiz>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	811a      	strh	r2, [r3, #8]
	this->reference_pressure = this->get_calibration_pressure(num_samples, sample_time_ms);
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f892 	bl	8001694 <_ZN7LPS22HB24get_calibration_pressureEhh>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fa86 	bl	8000a88 <__aeabi_d2uiz>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	80da      	strh	r2, [r3, #6]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN7LPS22HB27get_calibration_temperatureEhh>:

double LPS22HB::get_calibration_temperature(uint8_t num_samples, uint8_t sample_time_ms)
{
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b09a      	sub	sp, #104	; 0x68
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	4613      	mov	r3, r2
 800159a:	70bb      	strb	r3, [r7, #2]
	char msg[] = "\r\n\nCalibrating LPS Temperature:";
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <_ZN7LPS22HB27get_calibration_temperatureEhh+0xfc>)
 800159e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015a2:	461d      	mov	r5, r3
 80015a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	STM_USB::println(msg, strlen(msg));
 80015b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fdcb 	bl	8000150 <strlen>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 feea 	bl	800239c <_ZN7STM_USB7printlnEPcj>

	double cum_val = 0;
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double avg_val = 0;
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint8_t sample = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 80015e6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d21c      	bcs.n	800162a <_ZN7LPS22HB27get_calibration_temperatureEhh+0x9e>
		double _temp = this->get_temp();
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fedb 	bl	80013ac <_ZN7LPS22HB8get_tempEv>
 80015f6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		STM_USB::print(".", 1);
 80015fa:	2101      	movs	r1, #1
 80015fc:	4823      	ldr	r0, [pc, #140]	; (800168c <_ZN7LPS22HB27get_calibration_temperatureEhh+0x100>)
 80015fe:	f000 feb9 	bl	8002374 <_ZN7STM_USB5printEPcj>
		cum_val += _temp;
 8001602:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001606:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800160a:	f7fe fdaf 	bl	800016c <__adddf3>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		HAL_Delay(sample_time_ms);
 8001616:	78bb      	ldrb	r3, [r7, #2]
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fe5f 	bl	80032dc <HAL_Delay>
		sample ++;
 800161e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001622:	3301      	adds	r3, #1
 8001624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 8001628:	e7dd      	b.n	80015e6 <_ZN7LPS22HB27get_calibration_temperatureEhh+0x5a>
	}
	avg_val = cum_val / (double)num_samples;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fed9 	bl	80003e4 <__aeabi_ui2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800163a:	f7ff f877 	bl	800072c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	char msg2[] = "\r\nAverage Temperature (C): ";
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <_ZN7LPS22HB27get_calibration_temperatureEhh+0x104>)
 8001648:	f107 040c 	add.w	r4, r7, #12
 800164c:	461d      	mov	r5, r3
 800164e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	STM_USB::print(msg2, strlen(msg2));
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fd76 	bl	8000150 <strlen>
 8001664:	4602      	mov	r2, r0
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fe81 	bl	8002374 <_ZN7STM_USB5printEPcj>
	STM_USB::printd(avg_val);
 8001672:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001676:	f000 fe55 	bl	8002324 <_ZN7STM_USB6printdEd>
	return avg_val;
 800167a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	3768      	adds	r7, #104	; 0x68
 8001684:	46bd      	mov	sp, r7
 8001686:	bdb0      	pop	{r4, r5, r7, pc}
 8001688:	0800bcd4 	.word	0x0800bcd4
 800168c:	0800bcd0 	.word	0x0800bcd0
 8001690:	0800bcf4 	.word	0x0800bcf4

08001694 <_ZN7LPS22HB24get_calibration_pressureEhh>:

double LPS22HB::get_calibration_pressure(uint8_t num_samples, uint8_t sample_time_ms)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b09a      	sub	sp, #104	; 0x68
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
 80016a0:	4613      	mov	r3, r2
 80016a2:	70bb      	strb	r3, [r7, #2]
	char msg[] = "\r\n\nCalibrating LPS Pressure:\n";
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <_ZN7LPS22HB24get_calibration_pressureEhh+0xfc>)
 80016a6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80016aa:	461d      	mov	r5, r3
 80016ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016b4:	c407      	stmia	r4!, {r0, r1, r2}
 80016b6:	8023      	strh	r3, [r4, #0]
	STM_USB::println(msg, strlen(msg));
 80016b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fd47 	bl	8000150 <strlen>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fe66 	bl	800239c <_ZN7STM_USB7printlnEPcj>

	double cum_val = 0;
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double avg_val = 0;
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint8_t sample = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 80016ee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d21c      	bcs.n	8001732 <_ZN7LPS22HB24get_calibration_pressureEhh+0x9e>
		double _temp = this->get_pressure();
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe21 	bl	8001340 <_ZN7LPS22HB12get_pressureEv>
 80016fe:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		STM_USB::print(".", 1);
 8001702:	2101      	movs	r1, #1
 8001704:	4823      	ldr	r0, [pc, #140]	; (8001794 <_ZN7LPS22HB24get_calibration_pressureEhh+0x100>)
 8001706:	f000 fe35 	bl	8002374 <_ZN7STM_USB5printEPcj>
		cum_val += _temp;
 800170a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800170e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001712:	f7fe fd2b 	bl	800016c <__adddf3>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		HAL_Delay(sample_time_ms);
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fddb 	bl	80032dc <HAL_Delay>
		sample ++;
 8001726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800172a:	3301      	adds	r3, #1
 800172c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(sample < num_samples) {
 8001730:	e7dd      	b.n	80016ee <_ZN7LPS22HB24get_calibration_pressureEhh+0x5a>
	}
	avg_val = cum_val / (double)num_samples;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fe55 	bl	80003e4 <__aeabi_ui2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001742:	f7fe fff3 	bl	800072c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	char msg2[] = "\r\nAverage Pressure (PA): ";
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <_ZN7LPS22HB24get_calibration_pressureEhh+0x104>)
 8001750:	f107 040c 	add.w	r4, r7, #12
 8001754:	461d      	mov	r5, r3
 8001756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800175e:	c403      	stmia	r4!, {r0, r1}
 8001760:	8022      	strh	r2, [r4, #0]
	STM_USB::print(msg2, strlen(msg2));
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fcf2 	bl	8000150 <strlen>
 800176c:	4602      	mov	r2, r0
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fdfd 	bl	8002374 <_ZN7STM_USB5printEPcj>
	STM_USB::printd(avg_val);
 800177a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800177e:	f000 fdd1 	bl	8002324 <_ZN7STM_USB6printdEd>
	return avg_val;
 8001782:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	3768      	adds	r7, #104	; 0x68
 800178c:	46bd      	mov	sp, r7
 800178e:	bdb0      	pop	{r4, r5, r7, pc}
 8001790:	0800bd10 	.word	0x0800bd10
 8001794:	0800bcd0 	.word	0x0800bcd0
 8001798:	0800bd30 	.word	0x0800bd30

0800179c <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>:
#include <altimex_led_controller.h>

uint32_t standbyLastFlash = 0;
uint32_t lastLedTurnonTime = 0;

AltimexLedController::AltimexLedController(AltimexConfig* _config, TIM_HandleTypeDef* _timer):
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
		config(_config),
		ledStrip(new LedStrip(_timer))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	2008      	movs	r0, #8
 80017b0:	f005 fe82 	bl	80074b8 <_Znwj>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4620      	mov	r0, r4
 80017bc:	f000 fd3c 	bl	8002238 <_ZN8LedStripC1EP17TIM_HandleTypeDef>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605c      	str	r4, [r3, #4]
{
	this->ledStrip->clear();
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd75 	bl	80022b8 <_ZN8LedStrip5clearEv>
}
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>:

void AltimexLedController::display_leds(enum AltimexState state, uint16_t step, uint16_t alt)
{
 80017d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017dc:	b08a      	sub	sp, #40	; 0x28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	4608      	mov	r0, r1
 80017e4:	4611      	mov	r1, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	72fb      	strb	r3, [r7, #11]
 80017ec:	460b      	mov	r3, r1
 80017ee:	813b      	strh	r3, [r7, #8]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80fb      	strh	r3, [r7, #6]
	//Periodically flashes to show that the device is on
	if(state == ALTIMEX_STANDBY)
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d172      	bne.n	80018e0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
	{
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	4413      	add	r3, r2
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
		this->ledStrip->set_brightness(this->config->standbyBrightness);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f000 fd65 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>

		//If board has just been turned on
		if(standbyLastFlash == 0 && HAL_GetTick() < 3000)
 800181e:	4b52      	ldr	r3, [pc, #328]	; (8001968 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d108      	bne.n	8001838 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 8001826:	f001 fd4f 	bl	80032c8 <HAL_GetTick>
 800182a:	4603      	mov	r3, r0
 800182c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001830:	4293      	cmp	r3, r2
 8001832:	d801      	bhi.n	8001838 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x60>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x62>
 8001838:	2300      	movs	r3, #0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01c      	beq.n	8001878 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xa0>
		{
			uint8_t on = (step) % 2 == 0;
 800183e:	893b      	ldrh	r3, [r7, #8]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t leds = on * this->config->numLeds;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800185a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			this->ledStrip->progress_bar_single_color(leds, PURPLE);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800186e:	2203      	movs	r2, #3
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fcfc 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001876:	e033      	b.n	80018e0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
		}
		else {
			//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
			if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 8001878:	f001 fd26 	bl	80032c8 <HAL_GetTick>
 800187c:	4601      	mov	r1, r0
 800187e:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	4413      	add	r3, r2
 8001886:	4299      	cmp	r1, r3
 8001888:	bf8c      	ite	hi
 800188a:	2301      	movhi	r3, #1
 800188c:	2300      	movls	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xc8>
				standbyLastFlash = HAL_GetTick();
 8001894:	f001 fd18 	bl	80032c8 <HAL_GetTick>
 8001898:	4603      	mov	r3, r0
 800189a:	4a33      	ldr	r2, [pc, #204]	; (8001968 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01f      	b.n	80018e0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
			}
			else
			{
				//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
				if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	18d4      	adds	r4, r2, r3
 80018ac:	f001 fd0c 	bl	80032c8 <HAL_GetTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	429c      	cmp	r4, r3
 80018b4:	bf34      	ite	cc
 80018b6:	2301      	movcc	r3, #1
 80018b8:	2300      	movcs	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00a      	beq.n	80018d6 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0xfe>
				{
					this->ledStrip->progress_bar_single_color(this->config->numLeds, GREEN);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6858      	ldr	r0, [r3, #4]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f000 fccd 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 80018d4:	e004      	b.n	80018e0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x108>
				}
				else
				{
					this->ledStrip->clear();
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fcec 	bl	80022b8 <_ZN8LedStrip5clearEv>
			}
		}
	}

	//Led bar with top led flashing. Full when at gear check altitude
	if(state == ALTIMEX_ASCENT)
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d147      	bne.n	8001976 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f000 fcf7 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint32_t standbyFlashLength = this->config->standbyFlashOnLength + this->config->standbyFlashOffLength;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	4413      	add	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]

		//If the current time is greater than the last flash time + the flash length, we are onto a new flash now.
		if(HAL_GetTick() > standbyLastFlash + standbyFlashLength) {
 800190a:	f001 fcdd 	bl	80032c8 <HAL_GetTick>
 800190e:	4601      	mov	r1, r0
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	4299      	cmp	r1, r3
 800191a:	bf8c      	ite	hi
 800191c:	2301      	movhi	r3, #1
 800191e:	2300      	movls	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x15a>
			standbyLastFlash = HAL_GetTick();
 8001926:	f001 fccf 	bl	80032c8 <HAL_GetTick>
 800192a:	4603      	mov	r3, r0
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e021      	b.n	8001976 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
		}
		else
		{
			//If the current time is greater than the last flash time + the flash, we are in the on portion of the flash.
			if(standbyLastFlash + this->config->standbyFlashOffLength < HAL_GetTick())
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x190>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	18d4      	adds	r4, r2, r3
 800193e:	f001 fcc3 	bl	80032c8 <HAL_GetTick>
 8001942:	4603      	mov	r3, r0
 8001944:	429c      	cmp	r4, r3
 8001946:	bf34      	ite	cc
 8001948:	2301      	movcc	r3, #1
 800194a:	2300      	movcs	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x194>
			{
				this->ledStrip->progress_bar_single_color(this->config->numLeds, YELLOW);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6858      	ldr	r0, [r3, #4]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800195e:	2201      	movs	r2, #1
 8001960:	4619      	mov	r1, r3
 8001962:	f000 fc84 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
 8001966:	e006      	b.n	8001976 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x19e>
 8001968:	200001f8 	.word	0x200001f8
			}
			else
			{
				this->ledStrip->clear();
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fca1 	bl	80022b8 <_ZN8LedStrip5clearEv>
		Strip_Progress_Bar_Single_Color(i, GREEN);
		*/
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_GEARCHECK)
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d128      	bne.n	80019ce <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x1f6>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f000 fcac 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t flash = (step / 7) % 2 == 0;
 8001990:	893a      	ldrh	r2, [r7, #8]
 8001992:	4bbf      	ldr	r3, [pc, #764]	; (8001c90 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b8>)
 8001994:	fba3 1302 	umull	r1, r3, r3, r2
 8001998:	1ad2      	subs	r2, r2, r3
 800199a:	0852      	lsrs	r2, r2, #1
 800199c:	4413      	add	r3, r2
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	76fb      	strb	r3, [r7, #27]
		this->ledStrip->progress_bar_single_color(flash * this->config->numLeds, GREEN);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6858      	ldr	r0, [r3, #4]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019be:	7efa      	ldrb	r2, [r7, #27]
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	f000 fc50 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Solid blue while awaiting jump
	if(state == ALTIMEX_DETECT_FREEFALL_START)
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d113      	bne.n	80019fc <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x224>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f000 fc80 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		this->ledStrip->progress_bar_single_color(this->config->numLeds, SKYBLUE);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6858      	ldr	r0, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	f000 fc39 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude + 1500ft
	if(state == ALTIMEX_FREEFALL)
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d16a      	bne.n	8001ad8 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x300>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f000 fc69 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds) * (1-(float)(alt - (this->config->breakoff + 1500)) / (this->config->exit - (this->config->breakoff + 1500)));
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fcf0 	bl	8000404 <__aeabi_i2d>
 8001a24:	4680      	mov	r8, r0
 8001a26:	4689      	mov	r9, r1
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fcea 	bl	8000404 <__aeabi_i2d>
 8001a30:	4604      	mov	r4, r0
 8001a32:	460d      	mov	r5, r1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a3c:	a392      	add	r3, pc, #584	; (adr r3, 8001c88 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fb93 	bl	800016c <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fb8b 	bl	8000168 <__aeabi_dsub>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f835 	bl	8000ac8 <__aeabi_d2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fce1 	bl	8000428 <__aeabi_f2d>
 8001a66:	4682      	mov	sl, r0
 8001a68:	468b      	mov	fp, r1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a7a:	a383      	add	r3, pc, #524	; (adr r3, 8001c88 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fb74 	bl	800016c <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fb6c 	bl	8000168 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4650      	mov	r0, sl
 8001a96:	4659      	mov	r1, fp
 8001a98:	f7fe fe48 	bl	800072c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	497b      	ldr	r1, [pc, #492]	; (8001c94 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001aa6:	f7fe fb5f 	bl	8000168 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4640      	mov	r0, r8
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	f7fe fd11 	bl	80004d8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7fe ffe3 	bl	8000a88 <__aeabi_d2uiz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	76bb      	strb	r3, [r7, #26]
		this->ledStrip->progress_bar_single_color(leds + 1, SKYBLUE);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6858      	ldr	r0, [r3, #4]
 8001aca:	7ebb      	ldrb	r3, [r7, #26]
 8001acc:	3301      	adds	r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f000 fbcb 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching breakoff altitude
	if(state == ALTIMEX_APPROACHING_BREAKOFF)
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d15e      	bne.n	8001b9c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x3c4>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001aea:	4619      	mov	r1, r3
 8001aec:	4610      	mov	r0, r2
 8001aee:	f000 fbfb 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->breakoff) / ((this->config->breakoff + 1500) - this->config->breakoff));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001afa:	3301      	adds	r3, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fc81 	bl	8000404 <__aeabi_i2d>
 8001b02:	4604      	mov	r4, r0
 8001b04:	460d      	mov	r5, r1
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fc7b 	bl	8000404 <__aeabi_i2d>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b16:	f7fe fb27 	bl	8000168 <__aeabi_dsub>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7fe ffd1 	bl	8000ac8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fc7d 	bl	8000428 <__aeabi_f2d>
 8001b2e:	4680      	mov	r8, r0
 8001b30:	4689      	mov	r9, r1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b3a:	a353      	add	r3, pc, #332	; (adr r3, 8001c88 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4b0>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fb14 	bl	800016c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b54:	f7fe fb08 	bl	8000168 <__aeabi_dsub>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	4649      	mov	r1, r9
 8001b60:	f7fe fde4 	bl	800072c <__aeabi_ddiv>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	4949      	ldr	r1, [pc, #292]	; (8001c94 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001b6e:	f7fe fafb 	bl	8000168 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fcad 	bl	80004d8 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7fe ff7f 	bl	8000a88 <__aeabi_d2uiz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	767b      	strb	r3, [r7, #25]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	7e79      	ldrb	r1, [r7, #25]
 8001b94:	2200      	movs	r2, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fb69 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes green for a few secs
	if(state == ALTIMEX_BREAKOFF)
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d121      	bne.n	8001be6 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x40e>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f000 fb99 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 8001bb6:	893b      	ldrh	r3, [r7, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	763b      	strb	r3, [r7, #24]
		uint8_t leds = on * this->config->numLeds;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd0:	7e3a      	ldrb	r2, [r7, #24]
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	75fb      	strb	r3, [r7, #23]
		this->ledStrip->progress_bar_single_color(leds, GREEN);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	7df9      	ldrb	r1, [r7, #23]
 8001bde:	2200      	movs	r2, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fb44 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//LED bar fills up approaching deployment altitude
	if(state == ALTIMEX_TRACK)
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	2b07      	cmp	r3, #7
 8001bea:	d169      	bne.n	8001cc0 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4e8>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 fb74 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t leds = (this->config->numLeds + 1) * (1-(float)(alt - this->config->deploy) / ((this->config->deploy + 500) - this->config->deploy));
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fbfa 	bl	8000404 <__aeabi_i2d>
 8001c10:	4604      	mov	r4, r0
 8001c12:	460d      	mov	r5, r1
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fbf4 	bl	8000404 <__aeabi_i2d>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c24:	f7fe faa0 	bl	8000168 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7fe ff4a 	bl	8000ac8 <__aeabi_d2f>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fbf6 	bl	8000428 <__aeabi_f2d>
 8001c3c:	4680      	mov	r8, r0
 8001c3e:	4689      	mov	r9, r1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c0>)
 8001c4e:	f7fe fa8d 	bl	800016c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c62:	f7fe fa81 	bl	8000168 <__aeabi_dsub>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	f7fe fd5d 	bl	800072c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	4906      	ldr	r1, [pc, #24]	; (8001c94 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4bc>)
 8001c7c:	f7fe fa74 	bl	8000168 <__aeabi_dsub>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4620      	mov	r0, r4
 8001c86:	e009      	b.n	8001c9c <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x4c4>
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40977000 	.word	0x40977000
 8001c90:	24924925 	.word	0x24924925
 8001c94:	3ff00000 	.word	0x3ff00000
 8001c98:	407f4000 	.word	0x407f4000
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fc1b 	bl	80004d8 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe feed 	bl	8000a88 <__aeabi_d2uiz>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75bb      	strb	r3, [r7, #22]
		this->ledStrip->progress_bar_single_color(leds, RED);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	7db9      	ldrb	r1, [r7, #22]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fad7 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes red until detects canopy deployment
	if(state == ALTIMEX_DEPLOY)
 8001cc0:	7afb      	ldrb	r3, [r7, #11]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d121      	bne.n	8001d0a <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x532>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	f000 fb07 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step) % 2 == 0;
 8001cda:	893b      	ldrh	r3, [r7, #8]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	757b      	strb	r3, [r7, #21]
		uint8_t leds = on * this->config->numLeds;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cf4:	7d7a      	ldrb	r2, [r7, #21]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	753b      	strb	r3, [r7, #20]
		this->ledStrip->progress_bar_single_color(leds, RED);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	7d39      	ldrb	r1, [r7, #20]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fab2 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	//Flashes purple
	if(state == ALTIMEX_CANOPY)
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d126      	bne.n	8001d5e <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x586>
	{
		this->ledStrip->set_brightness(this->config->brightness);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 fae2 	bl	80022e8 <_ZN8LedStrip14set_brightnessEi>
		uint8_t on = (step/10) % 2 == 0;
 8001d24:	893b      	ldrh	r3, [r7, #8]
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <_ZN20AltimexLedController12display_ledsE12AltimexStatett+0x59c>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	74fb      	strb	r3, [r7, #19]
		uint8_t leds = on * this->config->numLeds;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d48:	7cfa      	ldrb	r2, [r7, #19]
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	74bb      	strb	r3, [r7, #18]
		this->ledStrip->progress_bar_single_color(leds, PURPLE);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	7cb9      	ldrb	r1, [r7, #18]
 8001d56:	2203      	movs	r2, #3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa88 	bl	800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>
	}

	this->ledStrip->send();
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fab3 	bl	80022ce <_ZN8LedStrip4sendEv>
}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d72:	bf00      	nop
 8001d74:	cccccccd 	.word	0xcccccccd

08001d78 <_ZN22AltimexStateControllerC1EP13AltimexConfig>:
 *      Author: kking
 */

#include <altimex_state_controller.h>

AltimexStateController::AltimexStateController(AltimexConfig* _config):
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
		freefallStartAlt(0.0),
		deployTestPrevAlt(0.0),
		deployTestPrevTime(0),
		deployTest(false),
		deployTestStart(0),
		deployTestStartAlt(0.0)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	721a      	strb	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	751a      	strb	r2, [r3, #20]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2020 	strb.w	r2, [r3, #32]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
{

}
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <_ZN22AltimexStateController9get_stateEv>:

enum AltimexState AltimexStateController::get_state()
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	return this->currentState;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	781b      	ldrb	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	0000      	movs	r0, r0
 8001e24:	0000      	movs	r0, r0
	...

08001e28 <_ZN22AltimexStateController12update_stateEd>:

void AltimexStateController::update_state(double alt)
{
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentState == ALTIMEX_STANDBY)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d13f      	bne.n	8001ebc <_ZN22AltimexStateController12update_stateEd+0x94>
	{
		//If the altitude is above the ascent threshold altitude
		if(alt > config->ascentThreshold)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e48:	f7fe fdd6 	bl	80009f8 <__aeabi_dcmpgt>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d022      	beq.n	8001e98 <_ZN22AltimexStateController12update_stateEd+0x70>
		{
			//If this is the first tick where above ascent threshold altitude
			if(testingAscent == 0)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	7a1b      	ldrb	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <_ZN22AltimexStateController12update_stateEd+0x42>
			{
				testingAscent = 1;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	721a      	strb	r2, [r3, #8]
				ascentTestStart = HAL_GetTick();
 8001e60:	f001 fa32 	bl	80032c8 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	60da      	str	r2, [r3, #12]
			}

			//If it was already above the ascent threshold altitude
			if(testingAscent == 1)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	7a1b      	ldrb	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d112      	bne.n	8001e98 <_ZN22AltimexStateController12update_stateEd+0x70>
			{
				//If ascentThresholdTime has elapsed, transition to ASCENT state
				if(HAL_GetTick() - ascentTestStart >= config->ascentThresholdTime)
 8001e72:	f001 fa29 	bl	80032c8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	8912      	ldrh	r2, [r2, #8]
 8001e84:	4293      	cmp	r3, r2
 8001e86:	bf2c      	ite	cs
 8001e88:	2301      	movcs	r3, #1
 8001e8a:	2300      	movcc	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <_ZN22AltimexStateController12update_stateEd+0x70>
				{
					currentState = ALTIMEX_ASCENT;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If the altitude is below the ascent threshold altitude
		if(alt < config->ascentThreshold)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ea4:	f7fe fd8a 	bl	80009bc <__aeabi_dcmplt>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <_ZN22AltimexStateController12update_stateEd+0x94>
		{
			//Set testingAscent to false if it was true
			if(testingAscent == 1)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	7a1b      	ldrb	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <_ZN22AltimexStateController12update_stateEd+0x94>
			{
				testingAscent = 0;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	721a      	strb	r2, [r3, #8]
			}
		}
	}

	if(currentState == ALTIMEX_ASCENT)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10d      	bne.n	8001ee0 <_ZN22AltimexStateController12update_stateEd+0xb8>
	{
		//If the altitude is above 10k ft, change to gear check state
		if(alt > config->gearCheckAlt)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001ecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ed0:	f7fe fd92 	bl	80009f8 <__aeabi_dcmpgt>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <_ZN22AltimexStateController12update_stateEd+0xb8>
		{
			currentState = ALTIMEX_GEARCHECK;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2202      	movs	r2, #2
 8001ede:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_GEARCHECK)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d127      	bne.n	8001f38 <_ZN22AltimexStateController12update_stateEd+0x110>
	{
		//Gear check notificiation is shown while in GEARCHECK state
		if(displayedGearCheck == 0)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	7d1b      	ldrb	r3, [r3, #20]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <_ZN22AltimexStateController12update_stateEd+0xd8>
		{
			gearCheckNotificationStart = HAL_GetTick();
 8001ef0:	f001 f9ea 	bl	80032c8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	611a      	str	r2, [r3, #16]
			displayedGearCheck = 1;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	751a      	strb	r2, [r3, #20]
		}

		//If gearCheckNotificaitonLength has elapsed, transition out of GEARCHECK state
		if(displayedGearCheck & HAL_GetTick() > gearCheckNotificationStart + config->gearCheckNotificationLength)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	7d1b      	ldrb	r3, [r3, #20]
 8001f04:	461c      	mov	r4, r3
 8001f06:	f001 f9df 	bl	80032c8 <HAL_GetTick>
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	4299      	cmp	r1, r3
 8001f1a:	bf8c      	ite	hi
 8001f1c:	2301      	movhi	r3, #1
 8001f1e:	2300      	movls	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4023      	ands	r3, r4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <_ZN22AltimexStateController12update_stateEd+0x110>
		{
			currentState = ALTIMEX_DETECT_FREEFALL_START;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2203      	movs	r2, #3
 8001f36:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DETECT_FREEFALL_START)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d17b      	bne.n	8002038 <_ZN22AltimexStateController12update_stateEd+0x210>
		 */

		//NOTE TO FUTURE SELF: If there are any issues with it not detecting freefall, it is probably due to sensor noise. Use a filter / moving average on the sensor data to smooth

		//If currently lower than the previously calculated altitude
		if(prevAlt > alt)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f4a:	f7fe fd37 	bl	80009bc <__aeabi_dcmplt>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d059      	beq.n	8002008 <_ZN22AltimexStateController12update_stateEd+0x1e0>
		{
			//If not currently testing for freefall, start testing for freefall
			if(freefallTest == 0)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <_ZN22AltimexStateController12update_stateEd+0x152>
			{
				freefallTest = 1;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2020 	strb.w	r2, [r3, #32]
				freefallTestStart = HAL_GetTick();
 8001f66:	f001 f9af 	bl	80032c8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
				freefallStartAlt = alt;
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f76:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}

			//If we have been successfully testing for freefall for longer than the threshold time
			if(freefallTest == 1 && HAL_GetTick() > freefallTestStart + config->freefallThresholdTime)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10c      	bne.n	8001f9e <_ZN22AltimexStateController12update_stateEd+0x176>
 8001f84:	f001 f9a0 	bl	80032c8 <HAL_GetTick>
 8001f88:	4601      	mov	r1, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	4299      	cmp	r1, r3
 8001f98:	d901      	bls.n	8001f9e <_ZN22AltimexStateController12update_stateEd+0x176>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <_ZN22AltimexStateController12update_stateEd+0x178>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d031      	beq.n	8002008 <_ZN22AltimexStateController12update_stateEd+0x1e0>
			{
				double elapsedTimeSec = (double)(HAL_GetTick() - freefallTestStart) / 1000;
 8001fa4:	f001 f990 	bl	80032c8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fa17 	bl	80003e4 <__aeabi_ui2d>
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	4b9b      	ldr	r3, [pc, #620]	; (8002228 <_ZN22AltimexStateController12update_stateEd+0x400>)
 8001fbc:	f7fe fbb6 	bl	800072c <__aeabi_ddiv>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				double avgSpeedFps = ((double)(freefallStartAlt - alt) / elapsedTimeSec);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fd2:	f7fe f8c9 	bl	8000168 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fe2:	f7fe fba3 	bl	800072c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9c7 2308 	strd	r2, r3, [r7, #32]

				//If average speed is above 80mph
				if(avgSpeedFps >= 117.0) //80mph to fps
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b8e      	ldr	r3, [pc, #568]	; (800222c <_ZN22AltimexStateController12update_stateEd+0x404>)
 8001ff4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ff8:	f7fe fcf4 	bl	80009e4 <__aeabi_dcmpge>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <_ZN22AltimexStateController12update_stateEd+0x1e0>
				{
					currentState = ALTIMEX_FREEFALL;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2204      	movs	r2, #4
 8002006:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//If currently higher than previously calculated altitude
		if(prevAlt < alt)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800200e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002012:	f7fe fcf1 	bl	80009f8 <__aeabi_dcmpgt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <_ZN22AltimexStateController12update_stateEd+0x206>
		{
			//Stop testing for freefall
			if(freefallTest == 1)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d103      	bne.n	800202e <_ZN22AltimexStateController12update_stateEd+0x206>
			{
				freefallTest = 0;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}

		prevAlt = alt;
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002034:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	if(currentState == ALTIMEX_FREEFALL)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d114      	bne.n	800206a <_ZN22AltimexStateController12update_stateEd+0x242>
	{
		if(alt < config->breakoff + 1500.0)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002048:	a375      	add	r3, pc, #468	; (adr r3, 8002220 <_ZN22AltimexStateController12update_stateEd+0x3f8>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	f7fe f88d 	bl	800016c <__adddf3>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800205a:	f7fe fcaf 	bl	80009bc <__aeabi_dcmplt>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <_ZN22AltimexStateController12update_stateEd+0x242>
		{
			currentState = ALTIMEX_APPROACHING_BREAKOFF;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2205      	movs	r2, #5
 8002068:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_APPROACHING_BREAKOFF)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b05      	cmp	r3, #5
 8002070:	d10d      	bne.n	800208e <_ZN22AltimexStateController12update_stateEd+0x266>
	{
		if(alt < config->breakoff)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800207a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800207e:	f7fe fc9d 	bl	80009bc <__aeabi_dcmplt>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <_ZN22AltimexStateController12update_stateEd+0x266>
		{
			currentState = ALTIMEX_BREAKOFF;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2206      	movs	r2, #6
 800208c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_BREAKOFF)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d114      	bne.n	80020c0 <_ZN22AltimexStateController12update_stateEd+0x298>
	{
		if(alt < config->breakoff - 500.0)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <_ZN22AltimexStateController12update_stateEd+0x408>)
 80020a4:	f7fe f860 	bl	8000168 <__aeabi_dsub>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020b0:	f7fe fc84 	bl	80009bc <__aeabi_dcmplt>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <_ZN22AltimexStateController12update_stateEd+0x298>
		{
			currentState = ALTIMEX_TRACK;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2207      	movs	r2, #7
 80020be:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_TRACK)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b07      	cmp	r3, #7
 80020c6:	d10d      	bne.n	80020e4 <_ZN22AltimexStateController12update_stateEd+0x2bc>
	{
		if(alt < config->deploy)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020d4:	f7fe fc72 	bl	80009bc <__aeabi_dcmplt>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <_ZN22AltimexStateController12update_stateEd+0x2bc>
		{
			currentState = ALTIMEX_DEPLOY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2208      	movs	r2, #8
 80020e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentState == ALTIMEX_DEPLOY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	f040 8094 	bne.w	8002216 <_ZN22AltimexStateController12update_stateEd+0x3ee>
	{

		if(deployTest == 0)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d13f      	bne.n	8002178 <_ZN22AltimexStateController12update_stateEd+0x350>
		{
			//If average vertical speed over last two measurements is less than than 50mph
			double elapsedTimeSec = (double)(HAL_GetTick() - deployTestStart) / 1000;
 80020f8:	f001 f8e6 	bl	80032c8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f96d 	bl	80003e4 <__aeabi_ui2d>
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <_ZN22AltimexStateController12update_stateEd+0x400>)
 8002110:	f7fe fb0c 	bl	800072c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double avgSpeedFps = fabs((double)(deployTestStartAlt - alt) / elapsedTimeSec);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002126:	f7fe f81f 	bl	8000168 <__aeabi_dsub>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002136:	f7fe faf9 	bl	800072c <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4611      	mov	r1, r2
 8002140:	6139      	str	r1, [r7, #16]
 8002142:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002146:	617b      	str	r3, [r7, #20]
			if(avgSpeedFps <= 73.0) //50mph to fps
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <_ZN22AltimexStateController12update_stateEd+0x40c>)
 800214e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002152:	f7fe fc3d 	bl	80009d0 <__aeabi_dcmple>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <_ZN22AltimexStateController12update_stateEd+0x350>
			{
				deployTest = 1;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				deployTestStart = HAL_GetTick();
 8002164:	f001 f8b0 	bl	80032c8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
				deployTestStartAlt = alt;
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002174:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			}
		}
		if(deployTest == 1)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217e:	2b01      	cmp	r3, #1
 8002180:	d13f      	bne.n	8002202 <_ZN22AltimexStateController12update_stateEd+0x3da>
		{
			//If average vertical speed has been < 50mph for deployThresholdTime
			if(((double)(deployTestStartAlt - alt) / (double)(HAL_GetTick() - deployTestStart)) <= 73.0)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	f7fd ffec 	bl	8000168 <__aeabi_dsub>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
 8002198:	f001 f896 	bl	80032c8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f91d 	bl	80003e4 <__aeabi_ui2d>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fe fabb 	bl	800072c <__aeabi_ddiv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	2301      	movs	r3, #1
 80021c0:	461c      	mov	r4, r3
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <_ZN22AltimexStateController12update_stateEd+0x40c>)
 80021c8:	f7fe fc02 	bl	80009d0 <__aeabi_dcmple>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <_ZN22AltimexStateController12update_stateEd+0x3ae>
 80021d2:	2300      	movs	r3, #0
 80021d4:	461c      	mov	r4, r3
 80021d6:	b2e3      	uxtb	r3, r4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d012      	beq.n	8002202 <_ZN22AltimexStateController12update_stateEd+0x3da>
			{
				if(HAL_GetTick() > deployTestStart + config->deployTestThresholdTime)
 80021dc:	f001 f874 	bl	80032c8 <HAL_GetTick>
 80021e0:	4601      	mov	r1, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	6852      	ldr	r2, [r2, #4]
 80021ea:	8952      	ldrh	r2, [r2, #10]
 80021ec:	4413      	add	r3, r2
 80021ee:	4299      	cmp	r1, r3
 80021f0:	bf8c      	ite	hi
 80021f2:	2301      	movhi	r3, #1
 80021f4:	2300      	movls	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <_ZN22AltimexStateController12update_stateEd+0x3da>
				{
					currentState = ALTIMEX_CANOPY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2209      	movs	r2, #9
 8002200:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		deployTestPrevTime = HAL_GetTick();
 8002202:	f001 f861 	bl	80032c8 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
		deployTestPrevAlt = alt;
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002212:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		{
			StateController_currentState = COLORALTI_STANDBY;
		}
		*/
	}
}
 8002216:	bf00      	nop
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	bdb0      	pop	{r4, r5, r7, pc}
 800221e:	bf00      	nop
 8002220:	00000000 	.word	0x00000000
 8002224:	40977000 	.word	0x40977000
 8002228:	408f4000 	.word	0x408f4000
 800222c:	405d4000 	.word	0x405d4000
 8002230:	407f4000 	.word	0x407f4000
 8002234:	40524000 	.word	0x40524000

08002238 <_ZN8LedStripC1EP17TIM_HandleTypeDef>:
 *      Author: kking
 */

#include <led_strip.h>

LedStrip::LedStrip(TIM_HandleTypeDef* _timer): timer(_timer), controller(new WS2813BController(timer))
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f44f 7027 	mov.w	r0, #668	; 0x29c
 800224c:	f005 f934 	bl	80074b8 <_Znwj>
 8002250:	4603      	mov	r3, r0
 8002252:	461c      	mov	r4, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	4620      	mov	r0, r4
 800225c:	f000 f8c8 	bl	80023f0 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	605c      	str	r4, [r3, #4]
{

}
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}

0800226e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR>:

void LedStrip::progress_bar_single_color(uint8_t num_filled, enum COLOR color)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
 800227a:	4613      	mov	r3, r2
 800227c:	70bb      	strb	r3, [r7, #2]
	this->clear();
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f81a 	bl	80022b8 <_ZN8LedStrip5clearEv>
	if(num_filled > MAX_LED) num_filled = MAX_LED;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b0a      	cmp	r3, #10
 8002288:	d901      	bls.n	800228e <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x20>
 800228a:	230a      	movs	r3, #10
 800228c:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < num_filled; i++) {
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	429a      	cmp	r2, r3
 8002298:	d20a      	bcs.n	80022b0 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x42>
		this->controller->set_led_from_color_name(i, color);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	7bf9      	ldrb	r1, [r7, #15]
 80022a0:	78ba      	ldrb	r2, [r7, #2]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fa35 	bl	8002712 <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>
	for(uint8_t i = 0; i < num_filled; i++) {
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e7f0      	b.n	8002292 <_ZN8LedStrip25progress_bar_single_colorEh5COLOR+0x24>
	}
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_ZN8LedStrip5clearEv>:

void LedStrip::clear()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	this->clear();
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fff9 	bl	80022b8 <_ZN8LedStrip5clearEv>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZN8LedStrip4sendEv>:

void LedStrip::send()
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	this->controller->send();
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f93a 	bl	8002554 <_ZN17WS2813BController4sendEv>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_ZN8LedStrip14set_brightnessEi>:

void LedStrip::set_brightness(int brightness)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	this->controller->set_brightness(brightness);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	6839      	ldr	r1, [r7, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f8b5 	bl	8002468 <_ZN17WS2813BController14set_brightnessEi>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>:
#include <usb.h>

UART_HandleTypeDef* STM_USB::uart = 0; //Set STM_USB::uart to dummy value

void STM_USB::init(UART_HandleTypeDef* _uart)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	STM_USB::uart = _uart; //Set STM_USB::uart to actual value
 8002310:	4a03      	ldr	r2, [pc, #12]	; (8002320 <_ZN7STM_USB4initEP20__UART_HandleTypeDef+0x18>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	200001fc 	.word	0x200001fc

08002324 <_ZN7STM_USB6printdEd>:
	size_t len = strlen(charData);
	STM_USB::println(charData, len);
}

void STM_USB::printd(double data)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b094      	sub	sp, #80	; 0x50
 8002328:	af00      	add	r7, sp, #0
 800232a:	e9c7 0100 	strd	r0, r1, [r7]
	char charData[64] = {'\0'};
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	223c      	movs	r2, #60	; 0x3c
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f006 fdea 	bl	8008f14 <memset>
	sprintf(charData, "%f", data);
 8002340:	f107 000c 	add.w	r0, r7, #12
 8002344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002348:	4909      	ldr	r1, [pc, #36]	; (8002370 <_ZN7STM_USB6printdEd+0x4c>)
 800234a:	f007 fb7b 	bl	8009a44 <siprintf>
	size_t len = strlen(charData);
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4618      	mov	r0, r3
 8002354:	f7fd fefc 	bl	8000150 <strlen>
 8002358:	64f8      	str	r0, [r7, #76]	; 0x4c
	STM_USB::println(charData, len);
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f81b 	bl	800239c <_ZN7STM_USB7printlnEPcj>
}
 8002366:	bf00      	nop
 8002368:	3750      	adds	r7, #80	; 0x50
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	0800bd4c 	.word	0x0800bd4c

08002374 <_ZN7STM_USB5printEPcj>:

void STM_USB::print(char* data, size_t len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(STM_USB::uart, (const uint8_t*)data, len, 100);
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <_ZN7STM_USB5printEPcj+0x24>)
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b29a      	uxth	r2, r3
 8002386:	2364      	movs	r3, #100	; 0x64
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	f004 fac1 	bl	8006910 <HAL_UART_Transmit>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200001fc 	.word	0x200001fc

0800239c <_ZN7STM_USB7printlnEPcj>:

void STM_USB::println(char* data, size_t len)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	STM_USB::print(data, len);
 80023a6:	6839      	ldr	r1, [r7, #0]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe3 	bl	8002374 <_ZN7STM_USB5printEPcj>

	char newline[3] = "\r\n";
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <_ZN7STM_USB7printlnEPcj+0x38>)
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	4611      	mov	r1, r2
 80023b8:	8019      	strh	r1, [r3, #0]
 80023ba:	3302      	adds	r3, #2
 80023bc:	0c12      	lsrs	r2, r2, #16
 80023be:	701a      	strb	r2, [r3, #0]
	STM_USB::print(newline, 2);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2102      	movs	r1, #2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ffd4 	bl	8002374 <_ZN7STM_USB5printEPcj>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	0800bd50 	.word	0x0800bd50

080023d8 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f005 f883 	bl	80074ec <tanf>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_ZN17WS2813BControllerC1EP17TIM_HandleTypeDef>:

uint16_t pwmData[(24*MAX_LED)+50];
uint8_t datasentflag = 0;
*/

WS2813BController::WS2813BController(TIM_HandleTypeDef* _timer): timer(_timer)
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	601a      	str	r2, [r3, #0]
{

}
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <_ZN17WS2813BController7set_ledEiiii>:

void WS2813BController::set_led (int LEDnum, int Red, int Green, int Blue)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
	this->LED_Data[LEDnum][0] = LEDnum;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	b2d9      	uxtb	r1, r3
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	460a      	mov	r2, r1
 8002428:	715a      	strb	r2, [r3, #5]
	this->LED_Data[LEDnum][1] = Green;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	460a      	mov	r2, r1
 8002438:	719a      	strb	r2, [r3, #6]
	this->LED_Data[LEDnum][2] = Red;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	b2d9      	uxtb	r1, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	460a      	mov	r2, r1
 8002448:	71da      	strb	r2, [r3, #7]
	this->LED_Data[LEDnum][3] = Blue;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	b2d9      	uxtb	r1, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	460a      	mov	r2, r1
 8002458:	721a      	strb	r2, [r3, #8]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	0000      	movs	r0, r0
	...

08002468 <_ZN17WS2813BController14set_brightnessEi>:

#define PI 3.14159265

void WS2813BController::set_brightness (int brightness)  // 0-45
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b2d      	cmp	r3, #45	; 0x2d
 8002476:	dd01      	ble.n	800247c <_ZN17WS2813BController14set_brightnessEi+0x14>
 8002478:	232d      	movs	r3, #45	; 0x2d
 800247a:	603b      	str	r3, [r7, #0]
	for (int i=0; i<MAX_LED; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b09      	cmp	r3, #9
 8002484:	dc5c      	bgt.n	8002540 <_ZN17WS2813BController14set_brightnessEi+0xd8>
	{
		this->LED_Mod[i][0] = this->LED_Data[i][0];
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	7959      	ldrb	r1, [r3, #5]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	330a      	adds	r3, #10
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	460a      	mov	r2, r1
 800249c:	715a      	strb	r2, [r3, #5]
		for (int j=1; j<4; j++)
 800249e:	2301      	movs	r3, #1
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	dc47      	bgt.n	8002538 <_ZN17WS2813BController14set_brightnessEi+0xd0>
		{
			float angle = 90-brightness;  // in degrees
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fc14 	bl	8000cdc <__aeabi_i2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7fd ffb5 	bl	8000428 <__aeabi_f2d>
 80024be:	a322      	add	r3, pc, #136	; (adr r3, 8002548 <_ZN17WS2813BController14set_brightnessEi+0xe0>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f808 	bl	80004d8 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <_ZN17WS2813BController14set_brightnessEi+0xe8>)
 80024d6:	f7fe f929 	bl	800072c <__aeabi_ddiv>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7fe faf1 	bl	8000ac8 <__aeabi_d2f>
 80024e6:	4603      	mov	r3, r0
 80024e8:	60fb      	str	r3, [r7, #12]
			this->LED_Mod[i][j] = (this->LED_Data[i][j])/(tan(angle));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	3305      	adds	r3, #5
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fbee 	bl	8000cdc <__aeabi_i2f>
 8002500:	4604      	mov	r4, r0
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff ff68 	bl	80023d8 <_ZSt3tanf>
 8002508:	4603      	mov	r3, r0
 800250a:	4619      	mov	r1, r3
 800250c:	4620      	mov	r0, r4
 800250e:	f7fe fced 	bl	8000eec <__aeabi_fdiv>
 8002512:	4603      	mov	r3, r0
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fe21 	bl	800115c <__aeabi_f2uiz>
 800251a:	4603      	mov	r3, r0
 800251c:	b2d9      	uxtb	r1, r3
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	441a      	add	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	332d      	adds	r3, #45	; 0x2d
 800252c:	460a      	mov	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	3301      	adds	r3, #1
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e7b4      	b.n	80024a2 <_ZN17WS2813BController14set_brightnessEi+0x3a>
	for (int i=0; i<MAX_LED; i++)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e79f      	b.n	8002480 <_ZN17WS2813BController14set_brightnessEi+0x18>
		}
	}

#endif

}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	53c8d4f1 	.word	0x53c8d4f1
 800254c:	400921fb 	.word	0x400921fb
 8002550:	40668000 	.word	0x40668000

08002554 <_ZN17WS2813BController4sendEv>:

void WS2813BController::send ()
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	uint32_t indx=0;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b09      	cmp	r3, #9
 8002568:	dc3e      	bgt.n	80025e8 <_ZN17WS2813BController4sendEv+0x94>
	{
#if USE_BRIGHTNESS
		color = ((this->LED_Mod[i][1]<<16) | (this->LED_Mod[i][2]<<8) | (this->LED_Mod[i][3]));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002576:	041a      	lsls	r2, r3, #16
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	431a      	orrs	r2, r3
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
#else
		color = ((this->LED_Data[i][1]<<16) | (this->LED_Data[i][2]<<8) | (this->LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8002598:	2317      	movs	r3, #23
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db1e      	blt.n	80025e0 <_ZN17WS2813BController4sendEv+0x8c>
		{
			if (color&(1<<i))
 80025a2:	2201      	movs	r2, #1
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <_ZN17WS2813BController4sendEv+0x70>
			{
				this->pwmData[indx] = 48;  // 75% of 64
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3328      	adds	r3, #40	; 0x28
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	2230      	movs	r2, #48	; 0x30
 80025c0:	80da      	strh	r2, [r3, #6]
 80025c2:	e006      	b.n	80025d2 <_ZN17WS2813BController4sendEv+0x7e>
			}

			else this->pwmData[indx] = 20;  // ~30% of 64
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3328      	adds	r3, #40	; 0x28
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	2214      	movs	r2, #20
 80025d0:	80da      	strh	r2, [r3, #6]

			indx++;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3b01      	subs	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e7dd      	b.n	800259c <_ZN17WS2813BController4sendEv+0x48>
	for (int i= 0; i<MAX_LED; i++)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	e7bd      	b.n	8002564 <_ZN17WS2813BController4sendEv+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b31      	cmp	r3, #49	; 0x31
 80025f0:	dc0d      	bgt.n	800260e <_ZN17WS2813BController4sendEv+0xba>
	{
		this->pwmData[indx] = 0;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3328      	adds	r3, #40	; 0x28
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	2200      	movs	r2, #0
 80025fe:	80da      	strh	r2, [r3, #6]
		indx++;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	3301      	adds	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	3301      	adds	r3, #1
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e7ee      	b.n	80025ec <_ZN17WS2813BController4sendEv+0x98>
	}

	HAL_TIM_PWM_Start_DMA(this->timer, TIM_CHANNEL_2, (uint32_t *)this->pwmData, indx);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	b29b      	uxth	r3, r3
 800261c:	2104      	movs	r1, #4
 800261e:	f003 fa0d 	bl	8005a3c <HAL_TIM_PWM_Start_DMA>
	while (!this->data_sent_flag){};
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d100      	bne.n	800262c <_ZN17WS2813BController4sendEv+0xd8>
 800262a:	e7fa      	b.n	8002622 <_ZN17WS2813BController4sendEv+0xce>
	this->data_sent_flag = 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	711a      	strb	r2, [r3, #4]
}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>:

void WS2813BController::color_to_rgb(struct RGB* rgb, enum COLOR color)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	4613      	mov	r3, r2
 8002646:	71fb      	strb	r3, [r7, #7]
	if(color == GREEN) {
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x26>
		rgb->r = 0;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2214      	movs	r2, #20
 800265e:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x3e>
		rgb->r = 255;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	22ff      	movs	r2, #255	; 0xff
 8002670:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d108      	bne.n	8002690 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x56>
		rgb->r = 255;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	22ff      	movs	r2, #255	; 0xff
 8002682:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d108      	bne.n	80026a8 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x6e>
		rgb->r = 255;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	22ff      	movs	r2, #255	; 0xff
 80026a6:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d108      	bne.n	80026c0 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x86>
		rgb->r = 0;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	22c8      	movs	r2, #200	; 0xc8
 80026be:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d108      	bne.n	80026d8 <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR+0x9e>
		rgb->r = 0;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2200      	movs	r2, #0
 80026d6:	709a      	strb	r2, [r3, #2]
	}
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>:

void WS2813BController::set_led_from_rgb(int LEDnum, struct RGB* rgb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af02      	add	r7, sp, #8
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
	this->set_led(LEDnum, rgb->r, rgb->g, rgb->b);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	4619      	mov	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	789b      	ldrb	r3, [r3, #2]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	460b      	mov	r3, r1
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff fe81 	bl	800240c <_ZN17WS2813BController7set_ledEiiii>
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_ZN17WS2813BController23set_led_from_color_nameEi5COLOR>:

void WS2813BController::set_led_from_color_name(int LEDnum, enum COLOR color)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	71fb      	strb	r3, [r7, #7]
	struct RGB rgb;
	this->color_to_rgb(&rgb, color);
 8002720:	79fa      	ldrb	r2, [r7, #7]
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff ff86 	bl	800263a <_ZN17WS2813BController12color_to_rgbEP3RGB5COLOR>
	this->set_led_from_rgb(LEDnum, &rgb);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	461a      	mov	r2, r3
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7ff ffd3 	bl	80026e2 <_ZN17WS2813BController16set_led_from_rgbEiP3RGB>
}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	0000      	movs	r0, r0
	...

08002748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b0a3      	sub	sp, #140	; 0x8c
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	STM_USB::init(&huart1);
 800274e:	486e      	ldr	r0, [pc, #440]	; (8002908 <main+0x1c0>)
 8002750:	f7ff fdda 	bl	8002308 <_ZN7STM_USB4initEP20__UART_HandleTypeDef>
	char message[] = "AltimeX Boot...";
 8002754:	4b6d      	ldr	r3, [pc, #436]	; (800290c <main+0x1c4>)
 8002756:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800275a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800275c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	STM_USB::println(message, strlen(message));
 8002760:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fcf3 	bl	8000150 <strlen>
 800276a:	4602      	mov	r2, r0
 800276c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fe12 	bl	800239c <_ZN7STM_USB7printlnEPcj>
	LPS22HB* barometer = new LPS22HB(&hi2c1, LPS_DEFAULT_ADDRESS);
 8002778:	200c      	movs	r0, #12
 800277a:	f004 fe9d 	bl	80074b8 <_Znwj>
 800277e:	4603      	mov	r3, r0
 8002780:	461c      	mov	r4, r3
 8002782:	225c      	movs	r2, #92	; 0x5c
 8002784:	4962      	ldr	r1, [pc, #392]	; (8002910 <main+0x1c8>)
 8002786:	4620      	mov	r0, r4
 8002788:	f7fe fd08 	bl	800119c <_ZN7LPS22HBC1EP17I2C_HandleTypeDeft>
 800278c:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
	uint8_t baro_init_status = barometer->init();
 8002790:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002794:	f7fe fd1b 	bl	80011ce <_ZN7LPS22HB4initEv>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	barometer->calibrate(10, 100);
 800279e:	2264      	movs	r2, #100	; 0x64
 80027a0:	210a      	movs	r1, #10
 80027a2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80027a6:	f7fe fec5 	bl	8001534 <_ZN7LPS22HB9calibrateEhh>
	double tempF = barometer->get_tempf();
 80027aa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80027ae:	f7fe fe2b 	bl	8001408 <_ZN7LPS22HB9get_tempfEv>
 80027b2:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
	double alt = 0.0;
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	struct AltimexConfig config;
	config.ascentThreshold = 500;              //The altitude you must pass for it to transition into the ascent state
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b53      	ldr	r3, [pc, #332]	; (8002914 <main+0x1cc>)
 80027c8:	e9c7 2300 	strd	r2, r3, [r7]
	config.ascentThresholdTime = 1000;         //ms that altitude must be above the ascentThreshold before transitioning between states
 80027cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d0:	813b      	strh	r3, [r7, #8]
	config.deployTestThresholdTime = 2000;     //ms, threshold time that vertical speed has to be under 50mph
 80027d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027d6:	817b      	strh	r3, [r7, #10]
	config.gearCheckNotificationLength = 5000; //ms, the length of the gearcheck notification
 80027d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80027dc:	60fb      	str	r3, [r7, #12]
	config.freefallThresholdTime = 2000;       //ms, the amount of time that the vertical speed must be above the freefall threshold speed to transition into freefall state
 80027de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027e2:	613b      	str	r3, [r7, #16]
	config.exit = 12500.0;                     //Exit altitude
 80027e4:	a340      	add	r3, pc, #256	; (adr r3, 80028e8 <main+0x1a0>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
	config.breakoff = 5500.0;                  //Breakoff altitude
 80027ee:	a340      	add	r3, pc, #256	; (adr r3, 80028f0 <main+0x1a8>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	config.deploy = 4500.0;                    //Deployment altitude
 80027f8:	a33f      	add	r3, pc, #252	; (adr r3, 80028f8 <main+0x1b0>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	config.standbyFlashOnLength = 100;         //How long the light is on for when in standby mode
 8002802:	2364      	movs	r3, #100	; 0x64
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
	config.standbyFlashOffLength = 10000;      //Period between each flash in standby mode
 8002806:	f242 7310 	movw	r3, #10000	; 0x2710
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
	config.numLeds = 10;                       //The number of leds being used
 800280c:	230a      	movs	r3, #10
 800280e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	config.gearCheckAlt = 10000.0;             //The altitude that the gear check notification is given
 8002812:	a33b      	add	r3, pc, #236	; (adr r3, 8002900 <main+0x1b8>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	config.brightness = 20;                    //LED brightness
 800281c:	2314      	movs	r3, #20
 800281e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	config.standbyBrightness = 5;              //Brightness of LEDS while in standby mode
 8002822:	2305      	movs	r3, #5
 8002824:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	AltimexLedController* ledController = new AltimexLedController(&config, &htim2);
 8002828:	2008      	movs	r0, #8
 800282a:	f004 fe45 	bl	80074b8 <_Znwj>
 800282e:	4603      	mov	r3, r0
 8002830:	461c      	mov	r4, r3
 8002832:	463b      	mov	r3, r7
 8002834:	4a38      	ldr	r2, [pc, #224]	; (8002918 <main+0x1d0>)
 8002836:	4619      	mov	r1, r3
 8002838:	4620      	mov	r0, r4
 800283a:	f7fe ffaf 	bl	800179c <_ZN20AltimexLedControllerC1EP13AltimexConfigP17TIM_HandleTypeDef>
 800283e:	667c      	str	r4, [r7, #100]	; 0x64
	AltimexStateController* stateController = new AltimexStateController(&config);
 8002840:	2050      	movs	r0, #80	; 0x50
 8002842:	f004 fe39 	bl	80074b8 <_Znwj>
 8002846:	4603      	mov	r3, r0
 8002848:	461c      	mov	r4, r3
 800284a:	463b      	mov	r3, r7
 800284c:	4619      	mov	r1, r3
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff fa92 	bl	8001d78 <_ZN22AltimexStateControllerC1EP13AltimexConfig>
 8002854:	663c      	str	r4, [r7, #96]	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002856:	f000 fcdf 	bl	8003218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800285a:	f000 f85f 	bl	800291c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800285e:	f000 fa27 	bl	8002cb0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002862:	f000 fa07 	bl	8002c74 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002866:	f000 f8a5 	bl	80029b4 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 800286a:	f000 f937 	bl	8002adc <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 800286e:	f000 f8d5 	bl	8002a1c <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8002872:	f000 f9d1 	bl	8002c18 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t step = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		//STORAGE_write(&hi2c1, 0, 8, &data);
		//uint8_t data_read[8] = {'\0'};
		//STORAGE_read(&hi2c1, 0, 8, &data_read);
		//println(data_read, strlen(data_read), &huart1);

		tempF = barometer->get_tempf();
 800287c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002880:	f7fe fdc2 	bl	8001408 <_ZN7LPS22HB9get_tempfEv>
 8002884:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
		STM_USB::printd(tempF);
 8002888:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800288c:	f7ff fd4a 	bl	8002324 <_ZN7STM_USB6printdEd>
			if(alt < 2500) alt -= 5;
			else alt -= 29;
		  }
		*/

		  alt = barometer->get_relalt_ft();
 8002890:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002894:	f7fe fde0 	bl	8001458 <_ZN7LPS22HB13get_relalt_ftEv>
 8002898:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
		  stateController->update_state(alt);
 800289c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80028a0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80028a2:	f7ff fac1 	bl	8001e28 <_ZN22AltimexStateController12update_stateEd>
		  ledController->display_leds(stateController->get_state(), step, alt);
 80028a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80028a8:	f7ff fab0 	bl	8001e0c <_ZN22AltimexStateController9get_stateEv>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461c      	mov	r4, r3
 80028b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028b4:	f7fe f8e8 	bl	8000a88 <__aeabi_d2uiz>
 80028b8:	4603      	mov	r3, r0
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80028c0:	4621      	mov	r1, r4
 80028c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80028c4:	f7fe ff88 	bl	80017d8 <_ZN20AltimexLedController12display_ledsE12AltimexStatett>
		  step++;
 80028c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028cc:	3301      	adds	r3, #1
 80028ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		  if(step > 100) step = 0;
 80028d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d902      	bls.n	80028e0 <main+0x198>
 80028da:	2300      	movs	r3, #0
 80028dc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

		  //Data is received one byte at a time
		  //uint8_t Rx_data[1];
		  //HAL_UART_Receive(&huart1, Rx_data, 100, 100);

		  HAL_Delay(100); //10hz
 80028e0:	2064      	movs	r0, #100	; 0x64
 80028e2:	f000 fcfb 	bl	80032dc <HAL_Delay>
		tempF = barometer->get_tempf();
 80028e6:	e7c9      	b.n	800287c <main+0x134>
 80028e8:	00000000 	.word	0x00000000
 80028ec:	40c86a00 	.word	0x40c86a00
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40b57c00 	.word	0x40b57c00
 80028f8:	00000000 	.word	0x00000000
 80028fc:	40b19400 	.word	0x40b19400
 8002900:	00000000 	.word	0x00000000
 8002904:	40c38800 	.word	0x40c38800
 8002908:	20000328 	.word	0x20000328
 800290c:	0800bd54 	.word	0x0800bd54
 8002910:	20000200 	.word	0x20000200
 8002914:	407f4000 	.word	0x407f4000
 8002918:	2000029c 	.word	0x2000029c

0800291c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b090      	sub	sp, #64	; 0x40
 8002920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	2228      	movs	r2, #40	; 0x28
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f006 faf2 	bl	8008f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800293e:	2302      	movs	r3, #2
 8002940:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002942:	2301      	movs	r3, #1
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002946:	2310      	movs	r3, #16
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800294a:	2302      	movs	r3, #2
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800294e:	2300      	movs	r3, #0
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002952:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002958:	f107 0318 	add.w	r3, r7, #24
 800295c:	4618      	mov	r0, r3
 800295e:	f002 fbb5 	bl	80050cc <HAL_RCC_OscConfig>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8002972:	f000 f9dd 	bl	8002d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002976:	230f      	movs	r3, #15
 8002978:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800297a:	2302      	movs	r3, #2
 800297c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f002 fe1d 	bl	80055d0 <HAL_RCC_ClockConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80029a6:	f000 f9c3 	bl	8002d30 <Error_Handler>
  }
}
 80029aa:	bf00      	nop
 80029ac:	3740      	adds	r7, #64	; 0x40
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <_ZL12MX_I2C1_Initv+0x60>)
 80029bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <_ZL12MX_I2C1_Initv+0x64>)
 80029c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029f2:	f001 f9e3 	bl	8003dbc <HAL_I2C_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002a06:	f000 f993 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000200 	.word	0x20000200
 8002a14:	40005400 	.word	0x40005400
 8002a18:	000186a0 	.word	0x000186a0

08002a1c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	463b      	mov	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a3a:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <_ZL12MX_TIM1_Initv+0xbc>)
 8002a3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a40:	2203      	movs	r2, #3
 8002a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a64:	481b      	ldr	r0, [pc, #108]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a66:	f002 ff41 	bl	80058ec <HAL_TIM_Base_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002a7a:	f000 f959 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a8c:	f003 fa3a 	bl	8005f04 <HAL_TIM_ConfigClockSource>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002aa0:	f000 f946 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4808      	ldr	r0, [pc, #32]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002ab2:	f003 fe7f 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002ac6:	f000 f933 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000254 	.word	0x20000254
 8002ad8:	40012c00 	.word	0x40012c00

08002adc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af0:	f107 0320 	add.w	r3, r7, #32
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	615a      	str	r2, [r3, #20]
 8002b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b14:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8002b20:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b22:	223f      	movs	r2, #63	; 0x3f
 8002b24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2c:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b32:	4838      	ldr	r0, [pc, #224]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b34:	f002 feda 	bl	80058ec <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8002b48:	f000 f8f2 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b56:	4619      	mov	r1, r3
 8002b58:	482e      	ldr	r0, [pc, #184]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b5a:	f003 f9d3 	bl	8005f04 <HAL_TIM_ConfigClockSource>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 8002b6e:	f000 f8df 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b72:	4828      	ldr	r0, [pc, #160]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b74:	f002 ff09 	bl	800598a <HAL_TIM_PWM_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8002b88:	f000 f8d2 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b94:	f107 0320 	add.w	r3, r7, #32
 8002b98:	4619      	mov	r1, r3
 8002b9a:	481e      	ldr	r0, [pc, #120]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002b9c:	f003 fe0a 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 8002bb0:	f000 f8be 	bl	8002d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb4:	2360      	movs	r3, #96	; 0x60
 8002bb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4812      	ldr	r0, [pc, #72]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002bcc:	f003 f8d8 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 8002be0:	f000 f8a6 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2204      	movs	r2, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	480a      	ldr	r0, [pc, #40]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002bec:	f003 f8c8 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <_ZL12MX_TIM2_Initv+0x128>
  {
    Error_Handler();
 8002c00:	f000 f896 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <_ZL12MX_TIM2_Initv+0x138>)
 8002c06:	f000 f95b 	bl	8002ec0 <HAL_TIM_MspPostInit>

}
 8002c0a:	bf00      	nop
 8002c0c:	3738      	adds	r7, #56	; 0x38
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000029c 	.word	0x2000029c

08002c18 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c4e:	4807      	ldr	r0, [pc, #28]	; (8002c6c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c50:	f003 fe0e 	bl	8006870 <HAL_UART_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf14      	ite	ne
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002c64:	f000 f864 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000328 	.word	0x20000328
 8002c70:	40013800 	.word	0x40013800

08002c74 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <_ZL11MX_DMA_Initv+0x38>)
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <_ZL11MX_DMA_Initv+0x38>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6153      	str	r3, [r2, #20]
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <_ZL11MX_DMA_Initv+0x38>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	2011      	movs	r0, #17
 8002c98:	f000 fc1b 	bl	80034d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002c9c:	2011      	movs	r0, #17
 8002c9e:	f000 fc34 	bl	800350a <HAL_NVIC_EnableIRQ>

}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000

08002cb0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <_ZL12MX_GPIO_Initv+0x78>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <_ZL12MX_GPIO_Initv+0x78>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <_ZL12MX_GPIO_Initv+0x78>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <_ZL12MX_GPIO_Initv+0x78>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <_ZL12MX_GPIO_Initv+0x78>)
 8002ce2:	f043 0308 	orr.w	r3, r3, #8
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <_ZL12MX_GPIO_Initv+0x78>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 8002cfa:	480c      	ldr	r0, [pc, #48]	; (8002d2c <_ZL12MX_GPIO_Initv+0x7c>)
 8002cfc:	f001 f846 	bl	8003d8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002d00:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8002d04:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	4619      	mov	r1, r3
 8002d18:	4804      	ldr	r0, [pc, #16]	; (8002d2c <_ZL12MX_GPIO_Initv+0x7c>)
 8002d1a:	f000 feb3 	bl	8003a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40010c00 	.word	0x40010c00

08002d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <Error_Handler+0x8>
	...

08002d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_MspInit+0x40>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <HAL_MspInit+0x40>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6193      	str	r3, [r2, #24]
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_MspInit+0x40>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_MspInit+0x40>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <HAL_MspInit+0x40>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	61d3      	str	r3, [r2, #28]
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_MspInit+0x40>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40021000 	.word	0x40021000

08002d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <HAL_I2C_MspInit+0x70>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d123      	bne.n	8002de8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_I2C_MspInit+0x74>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <HAL_I2C_MspInit+0x74>)
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_I2C_MspInit+0x74>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002db8:	23c0      	movs	r3, #192	; 0xc0
 8002dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dbc:	2312      	movs	r3, #18
 8002dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4619      	mov	r1, r3
 8002dca:	480b      	ldr	r0, [pc, #44]	; (8002df8 <HAL_I2C_MspInit+0x78>)
 8002dcc:	f000 fe5a 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_I2C_MspInit+0x74>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_I2C_MspInit+0x74>)
 8002dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dda:	61d3      	str	r3, [r2, #28]
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_I2C_MspInit+0x74>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002de8:	bf00      	nop
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40005400 	.word	0x40005400
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40010c00 	.word	0x40010c00

08002dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_TIM_Base_MspInit+0xb4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10c      	bne.n	8002e28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e18:	6193      	str	r3, [r2, #24]
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e26:	e03e      	b.n	8002ea6 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d139      	bne.n	8002ea6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	61d3      	str	r3, [r2, #28]
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_TIM_Base_MspInit+0xc0>)
 8002e4e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e52:	2210      	movs	r2, #16
 8002e54:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e68:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e70:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002e7e:	480e      	ldr	r0, [pc, #56]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e80:	f000 fb5e 	bl	8003540 <HAL_DMA_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8002e8a:	f7ff ff51 	bl	8002d30 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
 8002e94:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea0:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	200002e4 	.word	0x200002e4
 8002ebc:	40020080 	.word	0x40020080

08002ec0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d117      	bne.n	8002f10 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_TIM_MspPostInit+0x58>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <HAL_TIM_MspPostInit+0x58>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6193      	str	r3, [r2, #24]
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_TIM_MspPostInit+0x58>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2302      	movs	r3, #2
 8002f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4804      	ldr	r0, [pc, #16]	; (8002f1c <HAL_TIM_MspPostInit+0x5c>)
 8002f0c:	f000 fdba 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40010800 	.word	0x40010800

08002f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <HAL_UART_MspInit+0x9c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d139      	bne.n	8002fb4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f40:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6193      	str	r3, [r2, #24]
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4619      	mov	r1, r3
 8002f84:	480f      	ldr	r0, [pc, #60]	; (8002fc4 <HAL_UART_MspInit+0xa4>)
 8002f86:	f000 fd7d 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4809      	ldr	r0, [pc, #36]	; (8002fc4 <HAL_UART_MspInit+0xa4>)
 8002fa0:	f000 fd70 	bl	8003a84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2025      	movs	r0, #37	; 0x25
 8002faa:	f000 fa92 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fae:	2025      	movs	r0, #37	; 0x25
 8002fb0:	f000 faab 	bl	800350a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40010800 	.word	0x40010800

08002fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <NMI_Handler+0x4>

08002fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800300e:	f000 f949 	bl	80032a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <DMA1_Channel7_IRQHandler+0x10>)
 800301e:	f000 fbfd 	bl	800381c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200002e4 	.word	0x200002e4

0800302c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <USART1_IRQHandler+0x10>)
 8003032:	f003 fcf1 	bl	8006a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000328 	.word	0x20000328

08003040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return 1;
 8003044:	2301      	movs	r3, #1
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <_kill>:

int _kill(int pid, int sig)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003058:	f005 ff2a 	bl	8008eb0 <__errno>
 800305c:	4603      	mov	r3, r0
 800305e:	2216      	movs	r2, #22
 8003060:	601a      	str	r2, [r3, #0]
  return -1;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <_exit>:

void _exit (int status)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003076:	f04f 31ff 	mov.w	r1, #4294967295
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffe7 	bl	800304e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003080:	e7fe      	b.n	8003080 <_exit+0x12>

08003082 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e00a      	b.n	80030aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003094:	f3af 8000 	nop.w
 8003098:	4601      	mov	r1, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	60ba      	str	r2, [r7, #8]
 80030a0:	b2ca      	uxtb	r2, r1
 80030a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	dbf0      	blt.n	8003094 <_read+0x12>
  }

  return len;
 80030b2:	687b      	ldr	r3, [r7, #4]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e009      	b.n	80030e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	60ba      	str	r2, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3301      	adds	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	dbf1      	blt.n	80030ce <_write+0x12>
  }
  return len;
 80030ea:	687b      	ldr	r3, [r7, #4]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_close>:

int _close(int file)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800311a:	605a      	str	r2, [r3, #4]
  return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <_isatty>:

int _isatty(int file)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003130:	2301      	movs	r3, #1
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <_sbrk+0x5c>)
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <_sbrk+0x60>)
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <_sbrk+0x64>)
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <_sbrk+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003184:	f005 fe94 	bl	8008eb0 <__errno>
 8003188:	4603      	mov	r3, r0
 800318a:	220c      	movs	r2, #12
 800318c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	e009      	b.n	80031a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <_sbrk+0x64>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <_sbrk+0x64>)
 80031a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20005000 	.word	0x20005000
 80031b4:	00000400 	.word	0x00000400
 80031b8:	20000370 	.word	0x20000370
 80031bc:	20000390 	.word	0x20000390

080031c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031cc:	f7ff fff8 	bl	80031c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d0:	480b      	ldr	r0, [pc, #44]	; (8003200 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031d2:	490c      	ldr	r1, [pc, #48]	; (8003204 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031d4:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <LoopFillZerobss+0x16>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031e8:	4c09      	ldr	r4, [pc, #36]	; (8003210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031f6:	f005 fe61 	bl	8008ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031fa:	f7ff faa5 	bl	8002748 <main>
  bx lr
 80031fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003204:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003208:	0800c574 	.word	0x0800c574
  ldr r2, =_sbss
 800320c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003210:	2000038c 	.word	0x2000038c

08003214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003214:	e7fe      	b.n	8003214 <ADC1_2_IRQHandler>
	...

08003218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_Init+0x28>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_Init+0x28>)
 8003222:	f043 0310 	orr.w	r3, r3, #16
 8003226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003228:	2003      	movs	r0, #3
 800322a:	f000 f947 	bl	80034bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322e:	200f      	movs	r0, #15
 8003230:	f000 f808 	bl	8003244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003234:	f7ff fd82 	bl	8002d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40022000 	.word	0x40022000

08003244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_InitTick+0x54>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_InitTick+0x58>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325a:	fbb3 f3f1 	udiv	r3, r3, r1
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f95f 	bl	8003526 <HAL_SYSTICK_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e00e      	b.n	8003290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d80a      	bhi.n	800328e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003278:	2200      	movs	r2, #0
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	f000 f927 	bl	80034d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <HAL_InitTick+0x5c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000000 	.word	0x20000000
 800329c:	20000008 	.word	0x20000008
 80032a0:	20000004 	.word	0x20000004

080032a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_IncTick+0x1c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_IncTick+0x20>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <HAL_IncTick+0x20>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	20000008 	.word	0x20000008
 80032c4:	20000374 	.word	0x20000374

080032c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return uwTick;
 80032cc:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <HAL_GetTick+0x10>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	20000374 	.word	0x20000374

080032dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff fff0 	bl	80032c8 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d005      	beq.n	8003302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_Delay+0x44>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003302:	bf00      	nop
 8003304:	f7ff ffe0 	bl	80032c8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	429a      	cmp	r2, r3
 8003312:	d8f7      	bhi.n	8003304 <HAL_Delay+0x28>
  {
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000008 	.word	0x20000008

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4906      	ldr	r1, [pc, #24]	; (80033bc <__NVIC_EnableIRQ+0x34>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003488:	d301      	bcc.n	800348e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348a:	2301      	movs	r3, #1
 800348c:	e00f      	b.n	80034ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <SysTick_Config+0x40>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003496:	210f      	movs	r1, #15
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	f7ff ff90 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <SysTick_Config+0x40>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <SysTick_Config+0x40>)
 80034a8:	2207      	movs	r2, #7
 80034aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	e000e010 	.word	0xe000e010

080034bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff2d 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e4:	f7ff ff42 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f7ff ff90 	bl	8003414 <NVIC_EncodePriority>
 80034f4:	4602      	mov	r2, r0
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff5f 	bl	80033c0 <__NVIC_SetPriority>
}
 8003502:	bf00      	nop
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	4603      	mov	r3, r0
 8003512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff35 	bl	8003388 <__NVIC_EnableIRQ>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffa2 	bl	8003478 <SysTick_Config>
 8003534:	4603      	mov	r3, r0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e043      	b.n	80035de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_DMA_Init+0xa8>)
 800355e:	4413      	add	r3, r2
 8003560:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_DMA_Init+0xac>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	009a      	lsls	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <HAL_DMA_Init+0xb0>)
 8003572:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800358a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800358e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	bffdfff8 	.word	0xbffdfff8
 80035ec:	cccccccd 	.word	0xcccccccd
 80035f0:	40020000 	.word	0x40020000

080035f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_DMA_Start_IT+0x20>
 8003610:	2302      	movs	r3, #2
 8003612:	e04b      	b.n	80036ac <HAL_DMA_Start_IT+0xb8>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d13a      	bne.n	800369e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f9eb 	bl	8003a28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 020e 	orr.w	r2, r2, #14
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e00f      	b.n	800368c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 020a 	orr.w	r2, r2, #10
 800368a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e005      	b.n	80036aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d008      	beq.n	80036de <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2204      	movs	r2, #4
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e020      	b.n	8003720 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 020e 	bic.w	r2, r2, #14
 80036ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	2101      	movs	r1, #1
 8003708:	fa01 f202 	lsl.w	r2, r1, r2
 800370c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr
	...

0800372c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d005      	beq.n	8003750 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2204      	movs	r2, #4
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e051      	b.n	80037f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 020e 	bic.w	r2, r2, #14
 800375e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a22      	ldr	r2, [pc, #136]	; (8003800 <HAL_DMA_Abort_IT+0xd4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d029      	beq.n	80037ce <HAL_DMA_Abort_IT+0xa2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_DMA_Abort_IT+0xd8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d022      	beq.n	80037ca <HAL_DMA_Abort_IT+0x9e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_DMA_Abort_IT+0xdc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01a      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x98>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_DMA_Abort_IT+0xe0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d012      	beq.n	80037be <HAL_DMA_Abort_IT+0x92>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_DMA_Abort_IT+0xe4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00a      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x8c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_DMA_Abort_IT+0xe8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d102      	bne.n	80037b2 <HAL_DMA_Abort_IT+0x86>
 80037ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037b0:	e00e      	b.n	80037d0 <HAL_DMA_Abort_IT+0xa4>
 80037b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b6:	e00b      	b.n	80037d0 <HAL_DMA_Abort_IT+0xa4>
 80037b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037bc:	e008      	b.n	80037d0 <HAL_DMA_Abort_IT+0xa4>
 80037be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c2:	e005      	b.n	80037d0 <HAL_DMA_Abort_IT+0xa4>
 80037c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c8:	e002      	b.n	80037d0 <HAL_DMA_Abort_IT+0xa4>
 80037ca:	2310      	movs	r3, #16
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_Abort_IT+0xa4>
 80037ce:	2301      	movs	r3, #1
 80037d0:	4a11      	ldr	r2, [pc, #68]	; (8003818 <HAL_DMA_Abort_IT+0xec>)
 80037d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
    } 
  }
  return status;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40020008 	.word	0x40020008
 8003804:	4002001c 	.word	0x4002001c
 8003808:	40020030 	.word	0x40020030
 800380c:	40020044 	.word	0x40020044
 8003810:	40020058 	.word	0x40020058
 8003814:	4002006c 	.word	0x4002006c
 8003818:	40020000 	.word	0x40020000

0800381c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	2204      	movs	r2, #4
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d04f      	beq.n	80038e4 <HAL_DMA_IRQHandler+0xc8>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d04a      	beq.n	80038e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a66      	ldr	r2, [pc, #408]	; (8003a0c <HAL_DMA_IRQHandler+0x1f0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d029      	beq.n	80038ca <HAL_DMA_IRQHandler+0xae>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <HAL_DMA_IRQHandler+0x1f4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d022      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xaa>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a63      	ldr	r2, [pc, #396]	; (8003a14 <HAL_DMA_IRQHandler+0x1f8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01a      	beq.n	80038c0 <HAL_DMA_IRQHandler+0xa4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a62      	ldr	r2, [pc, #392]	; (8003a18 <HAL_DMA_IRQHandler+0x1fc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d012      	beq.n	80038ba <HAL_DMA_IRQHandler+0x9e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a60      	ldr	r2, [pc, #384]	; (8003a1c <HAL_DMA_IRQHandler+0x200>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00a      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x98>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a5f      	ldr	r2, [pc, #380]	; (8003a20 <HAL_DMA_IRQHandler+0x204>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d102      	bne.n	80038ae <HAL_DMA_IRQHandler+0x92>
 80038a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ac:	e00e      	b.n	80038cc <HAL_DMA_IRQHandler+0xb0>
 80038ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038b2:	e00b      	b.n	80038cc <HAL_DMA_IRQHandler+0xb0>
 80038b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038b8:	e008      	b.n	80038cc <HAL_DMA_IRQHandler+0xb0>
 80038ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038be:	e005      	b.n	80038cc <HAL_DMA_IRQHandler+0xb0>
 80038c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038c4:	e002      	b.n	80038cc <HAL_DMA_IRQHandler+0xb0>
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	e000      	b.n	80038cc <HAL_DMA_IRQHandler+0xb0>
 80038ca:	2304      	movs	r3, #4
 80038cc:	4a55      	ldr	r2, [pc, #340]	; (8003a24 <HAL_DMA_IRQHandler+0x208>)
 80038ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8094 	beq.w	8003a02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038e2:	e08e      	b.n	8003a02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	2202      	movs	r2, #2
 80038ea:	409a      	lsls	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d056      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x186>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d051      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 020a 	bic.w	r2, r2, #10
 800391a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <HAL_DMA_IRQHandler+0x1f0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d029      	beq.n	8003982 <HAL_DMA_IRQHandler+0x166>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <HAL_DMA_IRQHandler+0x1f4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d022      	beq.n	800397e <HAL_DMA_IRQHandler+0x162>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <HAL_DMA_IRQHandler+0x1f8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01a      	beq.n	8003978 <HAL_DMA_IRQHandler+0x15c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a34      	ldr	r2, [pc, #208]	; (8003a18 <HAL_DMA_IRQHandler+0x1fc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d012      	beq.n	8003972 <HAL_DMA_IRQHandler+0x156>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a32      	ldr	r2, [pc, #200]	; (8003a1c <HAL_DMA_IRQHandler+0x200>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00a      	beq.n	800396c <HAL_DMA_IRQHandler+0x150>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a31      	ldr	r2, [pc, #196]	; (8003a20 <HAL_DMA_IRQHandler+0x204>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d102      	bne.n	8003966 <HAL_DMA_IRQHandler+0x14a>
 8003960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003964:	e00e      	b.n	8003984 <HAL_DMA_IRQHandler+0x168>
 8003966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396a:	e00b      	b.n	8003984 <HAL_DMA_IRQHandler+0x168>
 800396c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003970:	e008      	b.n	8003984 <HAL_DMA_IRQHandler+0x168>
 8003972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003976:	e005      	b.n	8003984 <HAL_DMA_IRQHandler+0x168>
 8003978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800397c:	e002      	b.n	8003984 <HAL_DMA_IRQHandler+0x168>
 800397e:	2320      	movs	r3, #32
 8003980:	e000      	b.n	8003984 <HAL_DMA_IRQHandler+0x168>
 8003982:	2302      	movs	r3, #2
 8003984:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <HAL_DMA_IRQHandler+0x208>)
 8003986:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d034      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039a0:	e02f      	b.n	8003a02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2208      	movs	r2, #8
 80039a8:	409a      	lsls	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x1e8>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d023      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 020e 	bic.w	r2, r2, #14
 80039ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f202 	lsl.w	r2, r1, r2
 80039da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
    }
  }
  return;
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
}
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40020008 	.word	0x40020008
 8003a10:	4002001c 	.word	0x4002001c
 8003a14:	40020030 	.word	0x40020030
 8003a18:	40020044 	.word	0x40020044
 8003a1c:	40020058 	.word	0x40020058
 8003a20:	4002006c 	.word	0x4002006c
 8003a24:	40020000 	.word	0x40020000

08003a28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f202 	lsl.w	r2, r1, r2
 8003a44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d108      	bne.n	8003a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a66:	e007      	b.n	8003a78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b08b      	sub	sp, #44	; 0x2c
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a92:	2300      	movs	r3, #0
 8003a94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a96:	e169      	b.n	8003d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a98:	2201      	movs	r2, #1
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	f040 8158 	bne.w	8003d66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a9a      	ldr	r2, [pc, #616]	; (8003d24 <HAL_GPIO_Init+0x2a0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d05e      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003ac0:	4a98      	ldr	r2, [pc, #608]	; (8003d24 <HAL_GPIO_Init+0x2a0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d875      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003ac6:	4a98      	ldr	r2, [pc, #608]	; (8003d28 <HAL_GPIO_Init+0x2a4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d058      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003acc:	4a96      	ldr	r2, [pc, #600]	; (8003d28 <HAL_GPIO_Init+0x2a4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d86f      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003ad2:	4a96      	ldr	r2, [pc, #600]	; (8003d2c <HAL_GPIO_Init+0x2a8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d052      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003ad8:	4a94      	ldr	r2, [pc, #592]	; (8003d2c <HAL_GPIO_Init+0x2a8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d869      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003ade:	4a94      	ldr	r2, [pc, #592]	; (8003d30 <HAL_GPIO_Init+0x2ac>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d04c      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003ae4:	4a92      	ldr	r2, [pc, #584]	; (8003d30 <HAL_GPIO_Init+0x2ac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d863      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003aea:	4a92      	ldr	r2, [pc, #584]	; (8003d34 <HAL_GPIO_Init+0x2b0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d046      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003af0:	4a90      	ldr	r2, [pc, #576]	; (8003d34 <HAL_GPIO_Init+0x2b0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d85d      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003af6:	2b12      	cmp	r3, #18
 8003af8:	d82a      	bhi.n	8003b50 <HAL_GPIO_Init+0xcc>
 8003afa:	2b12      	cmp	r3, #18
 8003afc:	d859      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_GPIO_Init+0x80>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b7f 	.word	0x08003b7f
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b6b 	.word	0x08003b6b
 8003b10:	08003bad 	.word	0x08003bad
 8003b14:	08003bb3 	.word	0x08003bb3
 8003b18:	08003bb3 	.word	0x08003bb3
 8003b1c:	08003bb3 	.word	0x08003bb3
 8003b20:	08003bb3 	.word	0x08003bb3
 8003b24:	08003bb3 	.word	0x08003bb3
 8003b28:	08003bb3 	.word	0x08003bb3
 8003b2c:	08003bb3 	.word	0x08003bb3
 8003b30:	08003bb3 	.word	0x08003bb3
 8003b34:	08003bb3 	.word	0x08003bb3
 8003b38:	08003bb3 	.word	0x08003bb3
 8003b3c:	08003bb3 	.word	0x08003bb3
 8003b40:	08003bb3 	.word	0x08003bb3
 8003b44:	08003bb3 	.word	0x08003bb3
 8003b48:	08003b61 	.word	0x08003b61
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	4a79      	ldr	r2, [pc, #484]	; (8003d38 <HAL_GPIO_Init+0x2b4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b56:	e02c      	b.n	8003bb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	623b      	str	r3, [r7, #32]
          break;
 8003b5e:	e029      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	3304      	adds	r3, #4
 8003b66:	623b      	str	r3, [r7, #32]
          break;
 8003b68:	e024      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	623b      	str	r3, [r7, #32]
          break;
 8003b72:	e01f      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	623b      	str	r3, [r7, #32]
          break;
 8003b7c:	e01a      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b86:	2304      	movs	r3, #4
 8003b88:	623b      	str	r3, [r7, #32]
          break;
 8003b8a:	e013      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b94:	2308      	movs	r3, #8
 8003b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	611a      	str	r2, [r3, #16]
          break;
 8003b9e:	e009      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	615a      	str	r2, [r3, #20]
          break;
 8003baa:	e003      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bac:	2300      	movs	r3, #0
 8003bae:	623b      	str	r3, [r7, #32]
          break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          break;
 8003bb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	d801      	bhi.n	8003bbe <HAL_GPIO_Init+0x13a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	e001      	b.n	8003bc2 <HAL_GPIO_Init+0x13e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2bff      	cmp	r3, #255	; 0xff
 8003bc8:	d802      	bhi.n	8003bd0 <HAL_GPIO_Init+0x14c>
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	e002      	b.n	8003bd6 <HAL_GPIO_Init+0x152>
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	3b08      	subs	r3, #8
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	210f      	movs	r1, #15
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	6a39      	ldr	r1, [r7, #32]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80b1 	beq.w	8003d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c04:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <HAL_GPIO_Init+0x2b8>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4a4c      	ldr	r2, [pc, #304]	; (8003d3c <HAL_GPIO_Init+0x2b8>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6193      	str	r3, [r2, #24]
 8003c10:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <HAL_GPIO_Init+0x2b8>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c1c:	4a48      	ldr	r2, [pc, #288]	; (8003d40 <HAL_GPIO_Init+0x2bc>)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	3302      	adds	r3, #2
 8003c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	220f      	movs	r2, #15
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a40      	ldr	r2, [pc, #256]	; (8003d44 <HAL_GPIO_Init+0x2c0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_GPIO_Init+0x1ec>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3f      	ldr	r2, [pc, #252]	; (8003d48 <HAL_GPIO_Init+0x2c4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00d      	beq.n	8003c6c <HAL_GPIO_Init+0x1e8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3e      	ldr	r2, [pc, #248]	; (8003d4c <HAL_GPIO_Init+0x2c8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <HAL_GPIO_Init+0x1e4>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <HAL_GPIO_Init+0x2cc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_GPIO_Init+0x1e0>
 8003c60:	2303      	movs	r3, #3
 8003c62:	e006      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c64:	2304      	movs	r3, #4
 8003c66:	e004      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e002      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c70:	2300      	movs	r3, #0
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	f002 0203 	and.w	r2, r2, #3
 8003c78:	0092      	lsls	r2, r2, #2
 8003c7a:	4093      	lsls	r3, r2
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c82:	492f      	ldr	r1, [pc, #188]	; (8003d40 <HAL_GPIO_Init+0x2bc>)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	3302      	adds	r3, #2
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	492c      	ldr	r1, [pc, #176]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
 8003ca8:	e006      	b.n	8003cb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	4928      	ldr	r1, [pc, #160]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4922      	ldr	r1, [pc, #136]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
 8003cd0:	e006      	b.n	8003ce0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	491e      	ldr	r1, [pc, #120]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	4918      	ldr	r1, [pc, #96]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
 8003cf8:	e006      	b.n	8003d08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	4914      	ldr	r1, [pc, #80]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d021      	beq.n	8003d58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e021      	b.n	8003d66 <HAL_GPIO_Init+0x2e2>
 8003d22:	bf00      	nop
 8003d24:	10320000 	.word	0x10320000
 8003d28:	10310000 	.word	0x10310000
 8003d2c:	10220000 	.word	0x10220000
 8003d30:	10210000 	.word	0x10210000
 8003d34:	10120000 	.word	0x10120000
 8003d38:	10110000 	.word	0x10110000
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40010800 	.word	0x40010800
 8003d48:	40010c00 	.word	0x40010c00
 8003d4c:	40011000 	.word	0x40011000
 8003d50:	40011400 	.word	0x40011400
 8003d54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_GPIO_Init+0x304>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	4909      	ldr	r1, [pc, #36]	; (8003d88 <HAL_GPIO_Init+0x304>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	3301      	adds	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f47f ae8e 	bne.w	8003a98 <HAL_GPIO_Init+0x14>
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	372c      	adds	r7, #44	; 0x2c
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003da8:	e003      	b.n	8003db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e12b      	b.n	8004026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe ffcc 	bl	8002d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e20:	f001 fd1e 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8003e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4a81      	ldr	r2, [pc, #516]	; (8004030 <HAL_I2C_Init+0x274>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d807      	bhi.n	8003e40 <HAL_I2C_Init+0x84>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a80      	ldr	r2, [pc, #512]	; (8004034 <HAL_I2C_Init+0x278>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	bf94      	ite	ls
 8003e38:	2301      	movls	r3, #1
 8003e3a:	2300      	movhi	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e006      	b.n	8003e4e <HAL_I2C_Init+0x92>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a7d      	ldr	r2, [pc, #500]	; (8004038 <HAL_I2C_Init+0x27c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bf94      	ite	ls
 8003e48:	2301      	movls	r3, #1
 8003e4a:	2300      	movhi	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0e7      	b.n	8004026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a78      	ldr	r2, [pc, #480]	; (800403c <HAL_I2C_Init+0x280>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	0c9b      	lsrs	r3, r3, #18
 8003e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a6a      	ldr	r2, [pc, #424]	; (8004030 <HAL_I2C_Init+0x274>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d802      	bhi.n	8003e90 <HAL_I2C_Init+0xd4>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	e009      	b.n	8003ea4 <HAL_I2C_Init+0xe8>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	4a69      	ldr	r2, [pc, #420]	; (8004040 <HAL_I2C_Init+0x284>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	495c      	ldr	r1, [pc, #368]	; (8004030 <HAL_I2C_Init+0x274>)
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	d819      	bhi.n	8003ef8 <HAL_I2C_Init+0x13c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1e59      	subs	r1, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ed8:	400b      	ands	r3, r1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_I2C_Init+0x138>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e59      	subs	r1, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef2:	e051      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	e04f      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d111      	bne.n	8003f24 <HAL_I2C_Init+0x168>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e58      	subs	r0, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e012      	b.n	8003f4a <HAL_I2C_Init+0x18e>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1e58      	subs	r0, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	0099      	lsls	r1, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Init+0x196>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e022      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10e      	bne.n	8003f78 <HAL_I2C_Init+0x1bc>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1e58      	subs	r0, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	440b      	add	r3, r1
 8003f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f76:	e00f      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1e58      	subs	r0, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	0099      	lsls	r1, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	6809      	ldr	r1, [r1, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6911      	ldr	r1, [r2, #16]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	4311      	orrs	r1, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	000186a0 	.word	0x000186a0
 8004034:	001e847f 	.word	0x001e847f
 8004038:	003d08ff 	.word	0x003d08ff
 800403c:	431bde83 	.word	0x431bde83
 8004040:	10624dd3 	.word	0x10624dd3

08004044 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800405e:	f7ff f933 	bl	80032c8 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b20      	cmp	r3, #32
 800406e:	f040 80d9 	bne.w	8004224 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2319      	movs	r3, #25
 8004078:	2201      	movs	r2, #1
 800407a:	496d      	ldr	r1, [pc, #436]	; (8004230 <HAL_I2C_Mem_Write+0x1ec>)
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fdef 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
 800408a:	e0cc      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_I2C_Mem_Write+0x56>
 8004096:	2302      	movs	r3, #2
 8004098:	e0c5      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d007      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2221      	movs	r2, #33	; 0x21
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a4d      	ldr	r2, [pc, #308]	; (8004234 <HAL_I2C_Mem_Write+0x1f0>)
 8004100:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004102:	88f8      	ldrh	r0, [r7, #6]
 8004104:	893a      	ldrh	r2, [r7, #8]
 8004106:	8979      	ldrh	r1, [r7, #10]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4603      	mov	r3, r0
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fc26 	bl	8004964 <I2C_RequestMemoryWrite>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d052      	beq.n	80041c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e081      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 feb4 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b04      	cmp	r3, #4
 8004138:	d107      	bne.n	800414a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06b      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b04      	cmp	r3, #4
 800418a:	d11b      	bne.n	80041c4 <HAL_I2C_Mem_Write+0x180>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d017      	beq.n	80041c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1aa      	bne.n	8004122 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fea7 	bl	8004f24 <I2C_WaitOnBTFFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d107      	bne.n	80041f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e016      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e000      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004224:	2302      	movs	r3, #2
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	00100002 	.word	0x00100002
 8004234:	ffff0000 	.word	0xffff0000

08004238 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	; 0x30
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	4608      	mov	r0, r1
 8004242:	4611      	mov	r1, r2
 8004244:	461a      	mov	r2, r3
 8004246:	4603      	mov	r3, r0
 8004248:	817b      	strh	r3, [r7, #10]
 800424a:	460b      	mov	r3, r1
 800424c:	813b      	strh	r3, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004256:	f7ff f837 	bl	80032c8 <HAL_GetTick>
 800425a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	f040 8244 	bne.w	80046f2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2319      	movs	r3, #25
 8004270:	2201      	movs	r2, #1
 8004272:	4982      	ldr	r1, [pc, #520]	; (800447c <HAL_I2C_Mem_Read+0x244>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fcf3 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
 8004282:	e237      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_I2C_Mem_Read+0x5a>
 800428e:	2302      	movs	r3, #2
 8004290:	e230      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d007      	beq.n	80042b8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2222      	movs	r2, #34	; 0x22
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a62      	ldr	r2, [pc, #392]	; (8004480 <HAL_I2C_Mem_Read+0x248>)
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042fa:	88f8      	ldrh	r0, [r7, #6]
 80042fc:	893a      	ldrh	r2, [r7, #8]
 80042fe:	8979      	ldrh	r1, [r7, #10]
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	4603      	mov	r3, r0
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fbc0 	bl	8004a90 <I2C_RequestMemoryRead>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e1ec      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d113      	bne.n	800434a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e1c0      	b.n	80046cc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	2b01      	cmp	r3, #1
 8004350:	d11e      	bne.n	8004390 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004362:	b672      	cpsid	i
}
 8004364:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800438c:	b662      	cpsie	i
}
 800438e:	e035      	b.n	80043fc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b02      	cmp	r3, #2
 8004396:	d11e      	bne.n	80043d6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043a8:	b672      	cpsid	i
}
 80043aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043d2:	b662      	cpsie	i
}
 80043d4:	e012      	b.n	80043fc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80043fc:	e166      	b.n	80046cc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	2b03      	cmp	r3, #3
 8004404:	f200 811f 	bhi.w	8004646 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	2b01      	cmp	r3, #1
 800440e:	d123      	bne.n	8004458 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fdcd 	bl	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e167      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004456:	e139      	b.n	80046cc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	2b02      	cmp	r3, #2
 800445e:	d152      	bne.n	8004506 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	2200      	movs	r2, #0
 8004468:	4906      	ldr	r1, [pc, #24]	; (8004484 <HAL_I2C_Mem_Read+0x24c>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fbf8 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e13c      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
 800447a:	bf00      	nop
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000
 8004484:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004488:	b672      	cpsid	i
}
 800448a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044ce:	b662      	cpsie	i
}
 80044d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004504:	e0e2      	b.n	80046cc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2200      	movs	r2, #0
 800450e:	497b      	ldr	r1, [pc, #492]	; (80046fc <HAL_I2C_Mem_Read+0x4c4>)
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fba5 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0e9      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004530:	b672      	cpsid	i
}
 8004532:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004566:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_I2C_Mem_Read+0x4c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	08db      	lsrs	r3, r3, #3
 800456c:	4a65      	ldr	r2, [pc, #404]	; (8004704 <HAL_I2C_Mem_Read+0x4cc>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0a1a      	lsrs	r2, r3, #8
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	00da      	lsls	r2, r3, #3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	3b01      	subs	r3, #1
 8004584:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d118      	bne.n	80045be <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80045ae:	b662      	cpsie	i
}
 80045b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e09a      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d1d9      	bne.n	8004580 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800460e:	b662      	cpsie	i
}
 8004610:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004644:	e042      	b.n	80046cc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fcb2 	bl	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e04c      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d118      	bne.n	80046cc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f ae94 	bne.w	80043fe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00010004 	.word	0x00010004
 8004700:	20000000 	.word	0x20000000
 8004704:	14f8b589 	.word	0x14f8b589

08004708 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	460b      	mov	r3, r1
 8004716:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004718:	f7fe fdd6 	bl	80032c8 <HAL_GetTick>
 800471c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	f040 8111 	bne.w	8004952 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	2319      	movs	r3, #25
 8004736:	2201      	movs	r2, #1
 8004738:	4988      	ldr	r1, [pc, #544]	; (800495c <HAL_I2C_IsDeviceReady+0x254>)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fa90 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
 8004748:	e104      	b.n	8004954 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_I2C_IsDeviceReady+0x50>
 8004754:	2302      	movs	r3, #2
 8004756:	e0fd      	b.n	8004954 <HAL_I2C_IsDeviceReady+0x24c>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d007      	beq.n	800477e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2224      	movs	r2, #36	; 0x24
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a70      	ldr	r2, [pc, #448]	; (8004960 <HAL_I2C_IsDeviceReady+0x258>)
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa4e 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d8:	d103      	bne.n	80047e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0b6      	b.n	8004954 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fe fd67 	bl	80032c8 <HAL_GetTick>
 80047fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	bf0c      	ite	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	2300      	movne	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800482a:	e025      	b.n	8004878 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800482c:	f7fe fd4c 	bl	80032c8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <HAL_I2C_IsDeviceReady+0x13a>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22a0      	movs	r2, #160	; 0xa0
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b02      	cmp	r3, #2
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2ba0      	cmp	r3, #160	; 0xa0
 8004882:	d005      	beq.n	8004890 <HAL_I2C_IsDeviceReady+0x188>
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_I2C_IsDeviceReady+0x188>
 800488a:	7dbb      	ldrb	r3, [r7, #22]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0cd      	beq.n	800482c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d129      	bne.n	80048fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2319      	movs	r3, #25
 80048d2:	2201      	movs	r2, #1
 80048d4:	4921      	ldr	r1, [pc, #132]	; (800495c <HAL_I2C_IsDeviceReady+0x254>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f9c2 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e036      	b.n	8004954 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e02c      	b.n	8004954 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004908:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004912:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2319      	movs	r3, #25
 800491a:	2201      	movs	r2, #1
 800491c:	490f      	ldr	r1, [pc, #60]	; (800495c <HAL_I2C_IsDeviceReady+0x254>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f99e 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e012      	b.n	8004954 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	3301      	adds	r3, #1
 8004932:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	f4ff af32 	bcc.w	80047a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	00100002 	.word	0x00100002
 8004960:	ffff0000 	.word	0xffff0000

08004964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	4603      	mov	r3, r0
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	460b      	mov	r3, r1
 8004978:	813b      	strh	r3, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	2200      	movs	r2, #0
 8004996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f960 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b4:	d103      	bne.n	80049be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e05f      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049c2:	897b      	ldrh	r3, [r7, #10]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	492d      	ldr	r1, [pc, #180]	; (8004a8c <I2C_RequestMemoryWrite+0x128>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f9bb 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e04c      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	6a39      	ldr	r1, [r7, #32]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fa46 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d107      	bne.n	8004a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e02b      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]
 8004a3a:	e021      	b.n	8004a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a3c:	893b      	ldrh	r3, [r7, #8]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	6a39      	ldr	r1, [r7, #32]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fa20 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d107      	bne.n	8004a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e005      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a76:	893b      	ldrh	r3, [r7, #8]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	00010002 	.word	0x00010002

08004a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	817b      	strh	r3, [r7, #10]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	813b      	strh	r3, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f8c2 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af0:	d103      	bne.n	8004afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0aa      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004afe:	897b      	ldrh	r3, [r7, #10]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	4952      	ldr	r1, [pc, #328]	; (8004c5c <I2C_RequestMemoryRead+0x1cc>)
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f91d 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e097      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	6a39      	ldr	r1, [r7, #32]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f9a8 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d107      	bne.n	8004b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e076      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	611a      	str	r2, [r3, #16]
 8004b76:	e021      	b.n	8004bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b78:	893b      	ldrh	r3, [r7, #8]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b88:	6a39      	ldr	r1, [r7, #32]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f982 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00d      	beq.n	8004bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d107      	bne.n	8004bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e050      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bb2:	893b      	ldrh	r3, [r7, #8]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	6a39      	ldr	r1, [r7, #32]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f967 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d107      	bne.n	8004be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e035      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f82b 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d103      	bne.n	8004c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e013      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c2c:	897b      	ldrh	r3, [r7, #10]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	6a3a      	ldr	r2, [r7, #32]
 8004c40:	4906      	ldr	r1, [pc, #24]	; (8004c5c <I2C_RequestMemoryRead+0x1cc>)
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f886 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	00010002 	.word	0x00010002

08004c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c70:	e048      	b.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d044      	beq.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7a:	f7fe fb25 	bl	80032c8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d139      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10d      	bne.n	8004cb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	e00c      	b.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	43da      	mvns	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d116      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e023      	b.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10d      	bne.n	8004d2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	43da      	mvns	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	e00c      	b.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d093      	beq.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d62:	e071      	b.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d72:	d123      	bne.n	8004dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f043 0204 	orr.w	r2, r3, #4
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e067      	b.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d041      	beq.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc4:	f7fe fa80 	bl	80032c8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d136      	bne.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10c      	bne.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	43da      	mvns	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4013      	ands	r3, r2
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf14      	ite	ne
 8004df6:	2301      	movne	r3, #1
 8004df8:	2300      	moveq	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	e00b      	b.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e021      	b.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10c      	bne.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e00b      	b.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	43da      	mvns	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4013      	ands	r3, r2
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f47f af6d 	bne.w	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea0:	e034      	b.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f8e3 	bl	800506e <I2C_IsAcknowledgeFailed>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e034      	b.n	8004f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d028      	beq.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fe fa05 	bl	80032c8 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11d      	bne.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b80      	cmp	r3, #128	; 0x80
 8004edc:	d016      	beq.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e007      	b.n	8004f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	d1c3      	bne.n	8004ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f30:	e034      	b.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f89b 	bl	800506e <I2C_IsAcknowledgeFailed>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e034      	b.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d028      	beq.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fe f9bd 	bl	80032c8 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11d      	bne.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d016      	beq.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e007      	b.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d1c3      	bne.n	8004f32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc0:	e049      	b.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d119      	bne.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0210 	mvn.w	r2, #16
 8004fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e030      	b.n	8005066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fe f960 	bl	80032c8 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11d      	bne.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d016      	beq.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e007      	b.n	8005066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d1ae      	bne.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005084:	d11b      	bne.n	80050be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800508e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0204 	orr.w	r2, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e272      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8087 	beq.w	80051fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ec:	4b92      	ldr	r3, [pc, #584]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 030c 	and.w	r3, r3, #12
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d00c      	beq.n	8005112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050f8:	4b8f      	ldr	r3, [pc, #572]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b08      	cmp	r3, #8
 8005102:	d112      	bne.n	800512a <HAL_RCC_OscConfig+0x5e>
 8005104:	4b8c      	ldr	r3, [pc, #560]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005110:	d10b      	bne.n	800512a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005112:	4b89      	ldr	r3, [pc, #548]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d06c      	beq.n	80051f8 <HAL_RCC_OscConfig+0x12c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d168      	bne.n	80051f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e24c      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005132:	d106      	bne.n	8005142 <HAL_RCC_OscConfig+0x76>
 8005134:	4b80      	ldr	r3, [pc, #512]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a7f      	ldr	r2, [pc, #508]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e02e      	b.n	80051a0 <HAL_RCC_OscConfig+0xd4>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x98>
 800514a:	4b7b      	ldr	r3, [pc, #492]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a7a      	ldr	r2, [pc, #488]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b78      	ldr	r3, [pc, #480]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a77      	ldr	r2, [pc, #476]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800515c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e01d      	b.n	80051a0 <HAL_RCC_OscConfig+0xd4>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800516c:	d10c      	bne.n	8005188 <HAL_RCC_OscConfig+0xbc>
 800516e:	4b72      	ldr	r3, [pc, #456]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a71      	ldr	r2, [pc, #452]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b6f      	ldr	r3, [pc, #444]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a6e      	ldr	r2, [pc, #440]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e00b      	b.n	80051a0 <HAL_RCC_OscConfig+0xd4>
 8005188:	4b6b      	ldr	r3, [pc, #428]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a6a      	ldr	r2, [pc, #424]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800518e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	4b68      	ldr	r3, [pc, #416]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a67      	ldr	r2, [pc, #412]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800519a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800519e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d013      	beq.n	80051d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fe f88e 	bl	80032c8 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b0:	f7fe f88a 	bl	80032c8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e200      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c2:	4b5d      	ldr	r3, [pc, #372]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0xe4>
 80051ce:	e014      	b.n	80051fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d0:	f7fe f87a 	bl	80032c8 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d8:	f7fe f876 	bl	80032c8 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e1ec      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ea:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x10c>
 80051f6:	e000      	b.n	80051fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d063      	beq.n	80052ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005206:	4b4c      	ldr	r3, [pc, #304]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005212:	4b49      	ldr	r3, [pc, #292]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b08      	cmp	r3, #8
 800521c:	d11c      	bne.n	8005258 <HAL_RCC_OscConfig+0x18c>
 800521e:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d116      	bne.n	8005258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522a:	4b43      	ldr	r3, [pc, #268]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_RCC_OscConfig+0x176>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d001      	beq.n	8005242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e1c0      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005242:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4939      	ldr	r1, [pc, #228]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005256:	e03a      	b.n	80052ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005260:	4b36      	ldr	r3, [pc, #216]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fe f82f 	bl	80032c8 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526e:	f7fe f82b 	bl	80032c8 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e1a1      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4927      	ldr	r1, [pc, #156]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]
 80052a0:	e015      	b.n	80052ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a2:	4b26      	ldr	r3, [pc, #152]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fe f80e 	bl	80032c8 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b0:	f7fe f80a 	bl	80032c8 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e180      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03a      	beq.n	8005350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d019      	beq.n	8005316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <HAL_RCC_OscConfig+0x274>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e8:	f7fd ffee 	bl	80032c8 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f0:	f7fd ffea 	bl	80032c8 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e160      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800530e:	2001      	movs	r0, #1
 8005310:	f000 face 	bl	80058b0 <RCC_Delay>
 8005314:	e01c      	b.n	8005350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_RCC_OscConfig+0x274>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531c:	f7fd ffd4 	bl	80032c8 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005322:	e00f      	b.n	8005344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005324:	f7fd ffd0 	bl	80032c8 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d908      	bls.n	8005344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e146      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	42420000 	.word	0x42420000
 8005340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005344:	4b92      	ldr	r3, [pc, #584]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e9      	bne.n	8005324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80a6 	beq.w	80054aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	4b8b      	ldr	r3, [pc, #556]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10d      	bne.n	800538a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	4b88      	ldr	r3, [pc, #544]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4a87      	ldr	r2, [pc, #540]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	61d3      	str	r3, [r2, #28]
 800537a:	4b85      	ldr	r3, [pc, #532]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538a:	4b82      	ldr	r3, [pc, #520]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d118      	bne.n	80053c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005396:	4b7f      	ldr	r3, [pc, #508]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7e      	ldr	r2, [pc, #504]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 800539c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a2:	f7fd ff91 	bl	80032c8 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053aa:	f7fd ff8d 	bl	80032c8 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b64      	cmp	r3, #100	; 0x64
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e103      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053bc:	4b75      	ldr	r3, [pc, #468]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <HAL_RCC_OscConfig+0x312>
 80053d0:	4b6f      	ldr	r3, [pc, #444]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4a6e      	ldr	r2, [pc, #440]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6213      	str	r3, [r2, #32]
 80053dc:	e02d      	b.n	800543a <HAL_RCC_OscConfig+0x36e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x334>
 80053e6:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	4a69      	ldr	r2, [pc, #420]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	6213      	str	r3, [r2, #32]
 80053f2:	4b67      	ldr	r3, [pc, #412]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4a66      	ldr	r2, [pc, #408]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	6213      	str	r3, [r2, #32]
 80053fe:	e01c      	b.n	800543a <HAL_RCC_OscConfig+0x36e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b05      	cmp	r3, #5
 8005406:	d10c      	bne.n	8005422 <HAL_RCC_OscConfig+0x356>
 8005408:	4b61      	ldr	r3, [pc, #388]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	4a60      	ldr	r2, [pc, #384]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800540e:	f043 0304 	orr.w	r3, r3, #4
 8005412:	6213      	str	r3, [r2, #32]
 8005414:	4b5e      	ldr	r3, [pc, #376]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4a5d      	ldr	r2, [pc, #372]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6213      	str	r3, [r2, #32]
 8005420:	e00b      	b.n	800543a <HAL_RCC_OscConfig+0x36e>
 8005422:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4a5a      	ldr	r2, [pc, #360]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	6213      	str	r3, [r2, #32]
 800542e:	4b58      	ldr	r3, [pc, #352]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	4a57      	ldr	r2, [pc, #348]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005434:	f023 0304 	bic.w	r3, r3, #4
 8005438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d015      	beq.n	800546e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005442:	f7fd ff41 	bl	80032c8 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fd ff3d 	bl	80032c8 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0b1      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005460:	4b4b      	ldr	r3, [pc, #300]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ee      	beq.n	800544a <HAL_RCC_OscConfig+0x37e>
 800546c:	e014      	b.n	8005498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546e:	f7fd ff2b 	bl	80032c8 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005476:	f7fd ff27 	bl	80032c8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e09b      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548c:	4b40      	ldr	r3, [pc, #256]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1ee      	bne.n	8005476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549e:	4b3c      	ldr	r3, [pc, #240]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4a3b      	ldr	r2, [pc, #236]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 8087 	beq.w	80055c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054b4:	4b36      	ldr	r3, [pc, #216]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 030c 	and.w	r3, r3, #12
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d061      	beq.n	8005584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d146      	bne.n	8005556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c8:	4b33      	ldr	r3, [pc, #204]	; (8005598 <HAL_RCC_OscConfig+0x4cc>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ce:	f7fd fefb 	bl	80032c8 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fd fef7 	bl	80032c8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e06d      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e8:	4b29      	ldr	r3, [pc, #164]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d108      	bne.n	8005510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	4921      	ldr	r1, [pc, #132]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a19      	ldr	r1, [r3, #32]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	430b      	orrs	r3, r1
 8005522:	491b      	ldr	r1, [pc, #108]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_RCC_OscConfig+0x4cc>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552e:	f7fd fecb 	bl	80032c8 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005536:	f7fd fec7 	bl	80032c8 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e03d      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x46a>
 8005554:	e035      	b.n	80055c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <HAL_RCC_OscConfig+0x4cc>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fd feb4 	bl	80032c8 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005564:	f7fd feb0 	bl	80032c8 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e026      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x498>
 8005582:	e01e      	b.n	80055c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d107      	bne.n	800559c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e019      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
 8005590:	40021000 	.word	0x40021000
 8005594:	40007000 	.word	0x40007000
 8005598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_OscConfig+0x500>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d106      	bne.n	80055be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d001      	beq.n	80055c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000

080055d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0d0      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d910      	bls.n	8005614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b67      	ldr	r3, [pc, #412]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 0207 	bic.w	r2, r3, #7
 80055fa:	4965      	ldr	r1, [pc, #404]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b63      	ldr	r3, [pc, #396]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0b8      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800562c:	4b59      	ldr	r3, [pc, #356]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a58      	ldr	r2, [pc, #352]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005644:	4b53      	ldr	r3, [pc, #332]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800564a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800564e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b50      	ldr	r3, [pc, #320]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	494d      	ldr	r1, [pc, #308]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d040      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	4b47      	ldr	r3, [pc, #284]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d115      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e073      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e06b      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ae:	4b39      	ldr	r3, [pc, #228]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f023 0203 	bic.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4936      	ldr	r1, [pc, #216]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c0:	f7fd fe02 	bl	80032c8 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fd fdfe 	bl	80032c8 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e053      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f003 020c 	and.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1eb      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d210      	bcs.n	8005720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 0207 	bic.w	r2, r3, #7
 8005706:	4922      	ldr	r1, [pc, #136]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e032      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4916      	ldr	r1, [pc, #88]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	490e      	ldr	r1, [pc, #56]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800575e:	f000 f821 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005762:	4602      	mov	r2, r0
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	490a      	ldr	r1, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x1c8>)
 8005770:	5ccb      	ldrb	r3, [r1, r3]
 8005772:	fa22 f303 	lsr.w	r3, r2, r3
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x1cc>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1d0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd fd60 	bl	8003244 <HAL_InitTick>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40022000 	.word	0x40022000
 8005794:	40021000 	.word	0x40021000
 8005798:	0800bd64 	.word	0x0800bd64
 800579c:	20000000 	.word	0x20000000
 80057a0:	20000004 	.word	0x20000004

080057a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	2300      	movs	r3, #0
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_GetSysClockFreq+0x94>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d002      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x30>
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d003      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x36>
 80057d2:	e027      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <HAL_RCC_GetSysClockFreq+0x98>)
 80057d6:	613b      	str	r3, [r7, #16]
      break;
 80057d8:	e027      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	0c9b      	lsrs	r3, r3, #18
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057e4:	5cd3      	ldrb	r3, [r2, r3]
 80057e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <HAL_RCC_GetSysClockFreq+0x94>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	0c5b      	lsrs	r3, r3, #17
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	4a11      	ldr	r2, [pc, #68]	; (8005844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80057fe:	5cd3      	ldrb	r3, [r2, r3]
 8005800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a0d      	ldr	r2, [pc, #52]	; (800583c <HAL_RCC_GetSysClockFreq+0x98>)
 8005806:	fb03 f202 	mul.w	r2, r3, r2
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e004      	b.n	800581e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0c      	ldr	r2, [pc, #48]	; (8005848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	613b      	str	r3, [r7, #16]
      break;
 8005822:	e002      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RCC_GetSysClockFreq+0x98>)
 8005826:	613b      	str	r3, [r7, #16]
      break;
 8005828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800582a:	693b      	ldr	r3, [r7, #16]
}
 800582c:	4618      	mov	r0, r3
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	007a1200 	.word	0x007a1200
 8005840:	0800bd7c 	.word	0x0800bd7c
 8005844:	0800bd8c 	.word	0x0800bd8c
 8005848:	003d0900 	.word	0x003d0900

0800584c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005850:	4b02      	ldr	r3, [pc, #8]	; (800585c <HAL_RCC_GetHCLKFreq+0x10>)
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	20000000 	.word	0x20000000

08005860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005864:	f7ff fff2 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4903      	ldr	r1, [pc, #12]	; (8005884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	0800bd74 	.word	0x0800bd74

08005888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800588c:	f7ff ffde 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	0adb      	lsrs	r3, r3, #11
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4903      	ldr	r1, [pc, #12]	; (80058ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	0800bd74 	.word	0x0800bd74

080058b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <RCC_Delay+0x34>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <RCC_Delay+0x38>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	0a5b      	lsrs	r3, r3, #9
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058cc:	bf00      	nop
  }
  while (Delay --);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1e5a      	subs	r2, r3, #1
 80058d2:	60fa      	str	r2, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f9      	bne.n	80058cc <RCC_Delay+0x1c>
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr
 80058e4:	20000000 	.word	0x20000000
 80058e8:	10624dd3 	.word	0x10624dd3

080058ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e041      	b.n	8005982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fd fa72 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f000 fc9e 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e041      	b.n	8005a20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f839 	bl	8005a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f000 fc4f 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d109      	bne.n	8005a68 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	e022      	b.n	8005aae <HAL_TIM_PWM_Start_DMA+0x72>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d109      	bne.n	8005a82 <HAL_TIM_PWM_Start_DMA+0x46>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	e015      	b.n	8005aae <HAL_TIM_PWM_Start_DMA+0x72>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d109      	bne.n	8005a9c <HAL_TIM_PWM_Start_DMA+0x60>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e008      	b.n	8005aae <HAL_TIM_PWM_Start_DMA+0x72>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e153      	b.n	8005d5e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d109      	bne.n	8005ad0 <HAL_TIM_PWM_Start_DMA+0x94>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e022      	b.n	8005b16 <HAL_TIM_PWM_Start_DMA+0xda>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d109      	bne.n	8005aea <HAL_TIM_PWM_Start_DMA+0xae>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e015      	b.n	8005b16 <HAL_TIM_PWM_Start_DMA+0xda>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d109      	bne.n	8005b04 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e008      	b.n	8005b16 <HAL_TIM_PWM_Start_DMA+0xda>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d024      	beq.n	8005b64 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_TIM_PWM_Start_DMA+0xea>
 8005b20:	887b      	ldrh	r3, [r7, #2]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e119      	b.n	8005d5e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b38:	e016      	b.n	8005b68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b48:	e00e      	b.n	8005b68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b58:	e006      	b.n	8005b68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b62:	e001      	b.n	8005b68 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0fa      	b.n	8005d5e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	f200 80ae 	bhi.w	8005ccc <HAL_TIM_PWM_Start_DMA+0x290>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005bad 	.word	0x08005bad
 8005b7c:	08005ccd 	.word	0x08005ccd
 8005b80:	08005ccd 	.word	0x08005ccd
 8005b84:	08005ccd 	.word	0x08005ccd
 8005b88:	08005bf5 	.word	0x08005bf5
 8005b8c:	08005ccd 	.word	0x08005ccd
 8005b90:	08005ccd 	.word	0x08005ccd
 8005b94:	08005ccd 	.word	0x08005ccd
 8005b98:	08005c3d 	.word	0x08005c3d
 8005b9c:	08005ccd 	.word	0x08005ccd
 8005ba0:	08005ccd 	.word	0x08005ccd
 8005ba4:	08005ccd 	.word	0x08005ccd
 8005ba8:	08005c85 	.word	0x08005c85
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	4a6d      	ldr	r2, [pc, #436]	; (8005d68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	4a6c      	ldr	r2, [pc, #432]	; (8005d6c <HAL_TIM_PWM_Start_DMA+0x330>)
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	4a6b      	ldr	r2, [pc, #428]	; (8005d70 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3334      	adds	r3, #52	; 0x34
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	f7fd fd0e 	bl	80035f4 <HAL_DMA_Start_IT>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e0bd      	b.n	8005d5e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf0:	60da      	str	r2, [r3, #12]
      break;
 8005bf2:	e06e      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	4a5b      	ldr	r2, [pc, #364]	; (8005d68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	4a5a      	ldr	r2, [pc, #360]	; (8005d6c <HAL_TIM_PWM_Start_DMA+0x330>)
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	4a59      	ldr	r2, [pc, #356]	; (8005d70 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3338      	adds	r3, #56	; 0x38
 8005c18:	461a      	mov	r2, r3
 8005c1a:	887b      	ldrh	r3, [r7, #2]
 8005c1c:	f7fd fcea 	bl	80035f4 <HAL_DMA_Start_IT>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e099      	b.n	8005d5e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c38:	60da      	str	r2, [r3, #12]
      break;
 8005c3a:	e04a      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4a49      	ldr	r2, [pc, #292]	; (8005d68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a48      	ldr	r2, [pc, #288]	; (8005d6c <HAL_TIM_PWM_Start_DMA+0x330>)
 8005c4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	4a47      	ldr	r2, [pc, #284]	; (8005d70 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	333c      	adds	r3, #60	; 0x3c
 8005c60:	461a      	mov	r2, r3
 8005c62:	887b      	ldrh	r3, [r7, #2]
 8005c64:	f7fd fcc6 	bl	80035f4 <HAL_DMA_Start_IT>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e075      	b.n	8005d5e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c80:	60da      	str	r2, [r3, #12]
      break;
 8005c82:	e026      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	4a37      	ldr	r2, [pc, #220]	; (8005d68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	4a36      	ldr	r2, [pc, #216]	; (8005d6c <HAL_TIM_PWM_Start_DMA+0x330>)
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	4a35      	ldr	r2, [pc, #212]	; (8005d70 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3340      	adds	r3, #64	; 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	887b      	ldrh	r3, [r7, #2]
 8005cac:	f7fd fca2 	bl	80035f4 <HAL_DMA_Start_IT>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e051      	b.n	8005d5e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cc8:	60da      	str	r2, [r3, #12]
      break;
 8005cca:	e002      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d141      	bne.n	8005d5c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fd43 	bl	800676c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d107      	bne.n	8005d00 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00e      	beq.n	8005d28 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d12:	d009      	beq.n	8005d28 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <HAL_TIM_PWM_Start_DMA+0x340>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d111      	bne.n	8005d4c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b06      	cmp	r3, #6
 8005d38:	d010      	beq.n	8005d5c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0201 	orr.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4a:	e007      	b.n	8005d5c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	0800615b 	.word	0x0800615b
 8005d6c:	08006203 	.word	0x08006203
 8005d70:	080060c9 	.word	0x080060c9
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800

08005d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e0ae      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	f200 809f 	bhi.w	8005eec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	08005eed 	.word	0x08005eed
 8005dbc:	08005eed 	.word	0x08005eed
 8005dc0:	08005eed 	.word	0x08005eed
 8005dc4:	08005e29 	.word	0x08005e29
 8005dc8:	08005eed 	.word	0x08005eed
 8005dcc:	08005eed 	.word	0x08005eed
 8005dd0:	08005eed 	.word	0x08005eed
 8005dd4:	08005e6b 	.word	0x08005e6b
 8005dd8:	08005eed 	.word	0x08005eed
 8005ddc:	08005eed 	.word	0x08005eed
 8005de0:	08005eed 	.word	0x08005eed
 8005de4:	08005eab 	.word	0x08005eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fa9e 	bl	8006330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0208 	orr.w	r2, r2, #8
 8005e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0204 	bic.w	r2, r2, #4
 8005e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6999      	ldr	r1, [r3, #24]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	619a      	str	r2, [r3, #24]
      break;
 8005e26:	e064      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fae4 	bl	80063fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6999      	ldr	r1, [r3, #24]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	021a      	lsls	r2, r3, #8
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	619a      	str	r2, [r3, #24]
      break;
 8005e68:	e043      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fb2d 	bl	80064d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0208 	orr.w	r2, r2, #8
 8005e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0204 	bic.w	r2, r2, #4
 8005e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69d9      	ldr	r1, [r3, #28]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	61da      	str	r2, [r3, #28]
      break;
 8005ea8:	e023      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fb77 	bl	80065a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69d9      	ldr	r1, [r3, #28]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	021a      	lsls	r2, r3, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	61da      	str	r2, [r3, #28]
      break;
 8005eea:	e002      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIM_ConfigClockSource+0x1c>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e0b4      	b.n	800608a <HAL_TIM_ConfigClockSource+0x186>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	d03e      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5e:	f200 8087 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	f000 8086 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x172>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d87f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b70      	cmp	r3, #112	; 0x70
 8005f72:	d01a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0xa6>
 8005f74:	2b70      	cmp	r3, #112	; 0x70
 8005f76:	d87b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b60      	cmp	r3, #96	; 0x60
 8005f7a:	d050      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x11a>
 8005f7c:	2b60      	cmp	r3, #96	; 0x60
 8005f7e:	d877      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d03c      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0xfa>
 8005f84:	2b50      	cmp	r3, #80	; 0x50
 8005f86:	d873      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d058      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x13a>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d86f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d064      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d86b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d060      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d867      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d05c      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d05a      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005fa8:	e062      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f000 fbb8 	bl	800672e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	609a      	str	r2, [r3, #8]
      break;
 8005fd6:	e04f      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6899      	ldr	r1, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f000 fba1 	bl	800672e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ffa:	609a      	str	r2, [r3, #8]
      break;
 8005ffc:	e03c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	461a      	mov	r2, r3
 800600c:	f000 fb18 	bl	8006640 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2150      	movs	r1, #80	; 0x50
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fb6f 	bl	80066fa <TIM_ITRx_SetConfig>
      break;
 800601c:	e02c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fb36 	bl	800669c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2160      	movs	r1, #96	; 0x60
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fb5f 	bl	80066fa <TIM_ITRx_SetConfig>
      break;
 800603c:	e01c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	461a      	mov	r2, r3
 800604c:	f000 faf8 	bl	8006640 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fb4f 	bl	80066fa <TIM_ITRx_SetConfig>
      break;
 800605c:	e00c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 fb46 	bl	80066fa <TIM_ITRx_SetConfig>
      break;
 800606e:	e003      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e000      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d107      	bne.n	80060f0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060ee:	e02a      	b.n	8006146 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d107      	bne.n	800610a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2202      	movs	r2, #2
 80060fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006108:	e01d      	b.n	8006146 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d107      	bne.n	8006124 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2204      	movs	r2, #4
 8006118:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006122:	e010      	b.n	8006146 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d107      	bne.n	800613e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2208      	movs	r2, #8
 8006132:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800613c:	e003      	b.n	8006146 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff ffb5 	bl	80060b6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	771a      	strb	r2, [r3, #28]
}
 8006152:	bf00      	nop
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d10b      	bne.n	800618a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d136      	bne.n	80061ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	e031      	b.n	80061ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d10b      	bne.n	80061ac <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2202      	movs	r2, #2
 8006198:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d125      	bne.n	80061ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061aa:	e020      	b.n	80061ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d10b      	bne.n	80061ce <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2204      	movs	r2, #4
 80061ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d114      	bne.n	80061ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061cc:	e00f      	b.n	80061ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d10a      	bne.n	80061ee <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2208      	movs	r2, #8
 80061dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff ff4f 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	771a      	strb	r2, [r3, #28]
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d103      	bne.n	8006222 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	771a      	strb	r2, [r3, #28]
 8006220:	e019      	b.n	8006256 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d103      	bne.n	8006234 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2202      	movs	r2, #2
 8006230:	771a      	strb	r2, [r3, #28]
 8006232:	e010      	b.n	8006256 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d103      	bne.n	8006246 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2204      	movs	r2, #4
 8006242:	771a      	strb	r2, [r3, #28]
 8006244:	e007      	b.n	8006256 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d102      	bne.n	8006256 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2208      	movs	r2, #8
 8006254:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff ff24 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	771a      	strb	r2, [r3, #28]
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a29      	ldr	r2, [pc, #164]	; (8006324 <TIM_Base_SetConfig+0xb8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x30>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x30>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a26      	ldr	r2, [pc, #152]	; (8006328 <TIM_Base_SetConfig+0xbc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x30>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a25      	ldr	r2, [pc, #148]	; (800632c <TIM_Base_SetConfig+0xc0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <TIM_Base_SetConfig+0xb8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0x62>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0x62>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <TIM_Base_SetConfig+0xbc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0x62>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a18      	ldr	r2, [pc, #96]	; (800632c <TIM_Base_SetConfig+0xc0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a07      	ldr	r2, [pc, #28]	; (8006324 <TIM_Base_SetConfig+0xb8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d103      	bne.n	8006314 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	615a      	str	r2, [r3, #20]
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800

08006330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f023 0201 	bic.w	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f023 0302 	bic.w	r3, r3, #2
 8006378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <TIM_OC1_SetConfig+0xc8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d10c      	bne.n	80063a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0308 	bic.w	r3, r3, #8
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f023 0304 	bic.w	r3, r3, #4
 80063a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <TIM_OC1_SetConfig+0xc8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d111      	bne.n	80063d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40012c00 	.word	0x40012c00

080063fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f023 0210 	bic.w	r2, r3, #16
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 0320 	bic.w	r3, r3, #32
 8006446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <TIM_OC2_SetConfig+0xd0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d10d      	bne.n	8006478 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a14      	ldr	r2, [pc, #80]	; (80064cc <TIM_OC2_SetConfig+0xd0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d113      	bne.n	80064a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr
 80064cc:	40012c00 	.word	0x40012c00

080064d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <TIM_OC3_SetConfig+0xd0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d10d      	bne.n	800654a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a14      	ldr	r2, [pc, #80]	; (80065a0 <TIM_OC3_SetConfig+0xd0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d113      	bne.n	800657a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	621a      	str	r2, [r3, #32]
}
 8006594:	bf00      	nop
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40012c00 	.word	0x40012c00

080065a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	031b      	lsls	r3, r3, #12
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a0f      	ldr	r2, [pc, #60]	; (800663c <TIM_OC4_SetConfig+0x98>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d109      	bne.n	8006618 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	019b      	lsls	r3, r3, #6
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00

08006640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f023 0201 	bic.w	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800666a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 030a 	bic.w	r3, r3, #10
 800667c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	031b      	lsls	r3, r3, #12
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	f043 0307 	orr.w	r3, r3, #7
 800671c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	609a      	str	r2, [r3, #8]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800672e:	b480      	push	{r7}
 8006730:	b087      	sub	sp, #28
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006748:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	021a      	lsls	r2, r3, #8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	431a      	orrs	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4313      	orrs	r3, r2
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	609a      	str	r2, [r3, #8]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2201      	movs	r2, #1
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1a      	ldr	r2, [r3, #32]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	43db      	mvns	r3, r3
 800678e:	401a      	ands	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	fa01 f303 	lsl.w	r3, r1, r3
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e046      	b.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a16      	ldr	r2, [pc, #88]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d009      	beq.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a10      	ldr	r2, [pc, #64]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d10c      	bne.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4313      	orrs	r3, r2
 800683e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40000400 	.word	0x40000400
 800686c:	40000800 	.word	0x40000800

08006870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e042      	b.n	8006908 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fc fb42 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	; 0x24
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fd71 	bl	800739c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b20      	cmp	r3, #32
 800692e:	d16d      	bne.n	8006a0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_UART_Transmit+0x2c>
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e066      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2221      	movs	r2, #33	; 0x21
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800694e:	f7fc fcbb 	bl	80032c8 <HAL_GetTick>
 8006952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006968:	d108      	bne.n	800697c <HAL_UART_Transmit+0x6c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	e003      	b.n	8006984 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006984:	e02a      	b.n	80069dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2200      	movs	r2, #0
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 faf9 	bl	8006f88 <UART_WaitOnFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e036      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	3302      	adds	r3, #2
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e007      	b.n	80069ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	3301      	adds	r3, #1
 80069cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1cf      	bne.n	8006986 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2140      	movs	r1, #64	; 0x40
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fac9 	bl	8006f88 <UART_WaitOnFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e006      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b0ba      	sub	sp, #232	; 0xe8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10f      	bne.n	8006a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <HAL_UART_IRQHandler+0x66>
 8006a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fbd1 	bl	800721e <UART_Receive_IT>
      return;
 8006a7c:	e25b      	b.n	8006f36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80de 	beq.w	8006c44 <HAL_UART_IRQHandler+0x22c>
 8006a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80d1 	beq.w	8006c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <HAL_UART_IRQHandler+0xae>
 8006aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	f043 0201 	orr.w	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <HAL_UART_IRQHandler+0xd2>
 8006ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	f043 0202 	orr.w	r2, r3, #2
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <HAL_UART_IRQHandler+0xf6>
 8006af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f043 0204 	orr.w	r2, r3, #4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d011      	beq.n	8006b3e <HAL_UART_IRQHandler+0x126>
 8006b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d105      	bne.n	8006b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	f043 0208 	orr.w	r2, r3, #8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 81f2 	beq.w	8006f2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <HAL_UART_IRQHandler+0x14e>
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fb5c 	bl	800721e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bf14      	ite	ne
 8006b74:	2301      	movne	r3, #1
 8006b76:	2300      	moveq	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <HAL_UART_IRQHandler+0x17a>
 8006b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d04f      	beq.n	8006c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa66 	bl	8007064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d041      	beq.n	8006c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3314      	adds	r3, #20
 8006bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3314      	adds	r3, #20
 8006bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1d9      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d013      	beq.n	8006c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	4a7e      	ldr	r2, [pc, #504]	; (8006df8 <HAL_UART_IRQHandler+0x3e0>)
 8006c00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fc fd90 	bl	800372c <HAL_DMA_Abort_IT>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d016      	beq.n	8006c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c20:	e00e      	b.n	8006c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f99c 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c28:	e00a      	b.n	8006c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f998 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	e006      	b.n	8006c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f994 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006c3e:	e175      	b.n	8006f2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c40:	bf00      	nop
    return;
 8006c42:	e173      	b.n	8006f2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	f040 814f 	bne.w	8006eec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8148 	beq.w	8006eec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8141 	beq.w	8006eec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80b6 	beq.w	8006dfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8145 	beq.w	8006f30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	f080 813e 	bcs.w	8006f30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	f000 8088 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006cf4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1d9      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e1      	bne.n	8006d14 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3314      	adds	r3, #20
 8006d56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d74:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e3      	bne.n	8006d50 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006dba:	65ba      	str	r2, [r7, #88]	; 0x58
 8006dbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e3      	bne.n	8006d96 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fc fc6e 	bl	80036b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f8bf 	bl	8006f72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006df4:	e09c      	b.n	8006f30 <HAL_UART_IRQHandler+0x518>
 8006df6:	bf00      	nop
 8006df8:	08007129 	.word	0x08007129
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 808e 	beq.w	8006f34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8089 	beq.w	8006f34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e46:	647a      	str	r2, [r7, #68]	; 0x44
 8006e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e3      	bne.n	8006e22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	623b      	str	r3, [r7, #32]
   return(result);
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3314      	adds	r3, #20
 8006e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e3      	bne.n	8006e5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0310 	bic.w	r3, r3, #16
 8006eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ec4:	61fa      	str	r2, [r7, #28]
 8006ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	69b9      	ldr	r1, [r7, #24]
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e3      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f844 	bl	8006f72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eea:	e023      	b.n	8006f34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <HAL_UART_IRQHandler+0x4f4>
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f923 	bl	8007150 <UART_Transmit_IT>
    return;
 8006f0a:	e014      	b.n	8006f36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00e      	beq.n	8006f36 <HAL_UART_IRQHandler+0x51e>
 8006f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f962 	bl	80071ee <UART_EndTransmit_IT>
    return;
 8006f2a:	e004      	b.n	8006f36 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f2c:	bf00      	nop
 8006f2e:	e002      	b.n	8006f36 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f30:	bf00      	nop
 8006f32:	e000      	b.n	8006f36 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f34:	bf00      	nop
  }
}
 8006f36:	37e8      	adds	r7, #232	; 0xe8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr

08006f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b090      	sub	sp, #64	; 0x40
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f98:	e050      	b.n	800703c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d04c      	beq.n	800703c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa8:	f7fc f98e 	bl	80032c8 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d241      	bcs.n	800703c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fd8:	637a      	str	r2, [r7, #52]	; 0x34
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e5      	bne.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	63bb      	str	r3, [r7, #56]	; 0x38
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700c:	623a      	str	r2, [r7, #32]
 800700e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	69f9      	ldr	r1, [r7, #28]
 8007012:	6a3a      	ldr	r2, [r7, #32]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	61bb      	str	r3, [r7, #24]
   return(result);
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e00f      	b.n	800705c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4013      	ands	r3, r2
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	429a      	cmp	r2, r3
 800704a:	bf0c      	ite	eq
 800704c:	2301      	moveq	r3, #1
 800704e:	2300      	movne	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	429a      	cmp	r2, r3
 8007058:	d09f      	beq.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3740      	adds	r7, #64	; 0x40
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b095      	sub	sp, #84	; 0x54
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800708c:	643a      	str	r2, [r7, #64]	; 0x40
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3314      	adds	r3, #20
 80070be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d119      	bne.n	8007110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	330c      	adds	r3, #12
 80070e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f023 0310 	bic.w	r3, r3, #16
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	330c      	adds	r3, #12
 80070fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070fc:	61ba      	str	r2, [r7, #24]
 80070fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6979      	ldr	r1, [r7, #20]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e5      	bne.n	80070dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800711e:	bf00      	nop
 8007120:	3754      	adds	r7, #84	; 0x54
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff ff0c 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b21      	cmp	r3, #33	; 0x21
 8007162:	d13e      	bne.n	80071e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716c:	d114      	bne.n	8007198 <UART_Transmit_IT+0x48>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d110      	bne.n	8007198 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800718a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	1c9a      	adds	r2, r3, #2
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	621a      	str	r2, [r3, #32]
 8007196:	e008      	b.n	80071aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	1c59      	adds	r1, r3, #1
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6211      	str	r1, [r2, #32]
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	4619      	mov	r1, r3
 80071b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10f      	bne.n	80071de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e000      	b.n	80071e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
  }
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fe94 	bl	8006f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b08c      	sub	sp, #48	; 0x30
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b22      	cmp	r3, #34	; 0x22
 8007230:	f040 80ae 	bne.w	8007390 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723c:	d117      	bne.n	800726e <UART_Receive_IT+0x50>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d113      	bne.n	800726e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	b29b      	uxth	r3, r3
 8007258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725c:	b29a      	uxth	r2, r3
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	1c9a      	adds	r2, r3, #2
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	629a      	str	r2, [r3, #40]	; 0x28
 800726c:	e026      	b.n	80072bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007274:	2300      	movs	r3, #0
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007280:	d007      	beq.n	8007292 <UART_Receive_IT+0x74>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <UART_Receive_IT+0x82>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	b2da      	uxtb	r2, r3
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	e008      	b.n	80072b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4619      	mov	r1, r3
 80072ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d15d      	bne.n	800738c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0220 	bic.w	r2, r2, #32
 80072de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695a      	ldr	r2, [r3, #20]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	2b01      	cmp	r3, #1
 8007314:	d135      	bne.n	8007382 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	613b      	str	r3, [r7, #16]
   return(result);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f023 0310 	bic.w	r3, r3, #16
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733c:	623a      	str	r2, [r7, #32]
 800733e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	69f9      	ldr	r1, [r7, #28]
 8007342:	6a3a      	ldr	r2, [r7, #32]
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	61bb      	str	r3, [r7, #24]
   return(result);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b10      	cmp	r3, #16
 800735c:	d10a      	bne.n	8007374 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fdf9 	bl	8006f72 <HAL_UARTEx_RxEventCallback>
 8007380:	e002      	b.n	8007388 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff fde3 	bl	8006f4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e002      	b.n	8007392 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	e000      	b.n	8007392 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007390:	2302      	movs	r3, #2
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3730      	adds	r7, #48	; 0x30
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073d6:	f023 030c 	bic.w	r3, r3, #12
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	430b      	orrs	r3, r1
 80073e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2c      	ldr	r2, [pc, #176]	; (80074b0 <UART_SetConfig+0x114>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d103      	bne.n	800740c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007404:	f7fe fa40 	bl	8005888 <HAL_RCC_GetPCLK2Freq>
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	e002      	b.n	8007412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800740c:	f7fe fa28 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8007410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009a      	lsls	r2, r3, #2
 800741c:	441a      	add	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	fbb2 f3f3 	udiv	r3, r2, r3
 8007428:	4a22      	ldr	r2, [pc, #136]	; (80074b4 <UART_SetConfig+0x118>)
 800742a:	fba2 2303 	umull	r2, r3, r2, r3
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	0119      	lsls	r1, r3, #4
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009a      	lsls	r2, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	fbb2 f2f3 	udiv	r2, r2, r3
 8007448:	4b1a      	ldr	r3, [pc, #104]	; (80074b4 <UART_SetConfig+0x118>)
 800744a:	fba3 0302 	umull	r0, r3, r3, r2
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	2064      	movs	r0, #100	; 0x64
 8007452:	fb00 f303 	mul.w	r3, r0, r3
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	3332      	adds	r3, #50	; 0x32
 800745c:	4a15      	ldr	r2, [pc, #84]	; (80074b4 <UART_SetConfig+0x118>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007468:	4419      	add	r1, r3
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009a      	lsls	r2, r3, #2
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <UART_SetConfig+0x118>)
 8007482:	fba3 0302 	umull	r0, r3, r3, r2
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	2064      	movs	r0, #100	; 0x64
 800748a:	fb00 f303 	mul.w	r3, r0, r3
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	3332      	adds	r3, #50	; 0x32
 8007494:	4a07      	ldr	r2, [pc, #28]	; (80074b4 <UART_SetConfig+0x118>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	440a      	add	r2, r1
 80074a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40013800 	.word	0x40013800
 80074b4:	51eb851f 	.word	0x51eb851f

080074b8 <_Znwj>:
 80074b8:	2801      	cmp	r0, #1
 80074ba:	bf38      	it	cc
 80074bc:	2001      	movcc	r0, #1
 80074be:	b510      	push	{r4, lr}
 80074c0:	4604      	mov	r4, r0
 80074c2:	4620      	mov	r0, r4
 80074c4:	f001 fd1e 	bl	8008f04 <malloc>
 80074c8:	b930      	cbnz	r0, 80074d8 <_Znwj+0x20>
 80074ca:	f000 f807 	bl	80074dc <_ZSt15get_new_handlerv>
 80074ce:	b908      	cbnz	r0, 80074d4 <_Znwj+0x1c>
 80074d0:	f001 fce6 	bl	8008ea0 <abort>
 80074d4:	4780      	blx	r0
 80074d6:	e7f4      	b.n	80074c2 <_Znwj+0xa>
 80074d8:	bd10      	pop	{r4, pc}
	...

080074dc <_ZSt15get_new_handlerv>:
 80074dc:	4b02      	ldr	r3, [pc, #8]	; (80074e8 <_ZSt15get_new_handlerv+0xc>)
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	f3bf 8f5b 	dmb	ish
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20000378 	.word	0x20000378

080074ec <tanf>:
 80074ec:	b507      	push	{r0, r1, r2, lr}
 80074ee:	4a11      	ldr	r2, [pc, #68]	; (8007534 <tanf+0x48>)
 80074f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80074f4:	4293      	cmp	r3, r2
 80074f6:	4601      	mov	r1, r0
 80074f8:	dc06      	bgt.n	8007508 <tanf+0x1c>
 80074fa:	2201      	movs	r2, #1
 80074fc:	2100      	movs	r1, #0
 80074fe:	b003      	add	sp, #12
 8007500:	f85d eb04 	ldr.w	lr, [sp], #4
 8007504:	f001 ba56 	b.w	80089b4 <__kernel_tanf>
 8007508:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800750c:	db04      	blt.n	8007518 <tanf+0x2c>
 800750e:	f7f9 fb2f 	bl	8000b70 <__aeabi_fsub>
 8007512:	b003      	add	sp, #12
 8007514:	f85d fb04 	ldr.w	pc, [sp], #4
 8007518:	4669      	mov	r1, sp
 800751a:	f000 fe3b 	bl	8008194 <__ieee754_rem_pio2f>
 800751e:	0042      	lsls	r2, r0, #1
 8007520:	f002 0202 	and.w	r2, r2, #2
 8007524:	9901      	ldr	r1, [sp, #4]
 8007526:	9800      	ldr	r0, [sp, #0]
 8007528:	f1c2 0201 	rsb	r2, r2, #1
 800752c:	f001 fa42 	bl	80089b4 <__kernel_tanf>
 8007530:	e7ef      	b.n	8007512 <tanf+0x26>
 8007532:	bf00      	nop
 8007534:	3f490fda 	.word	0x3f490fda

08007538 <pow>:
 8007538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800753c:	4614      	mov	r4, r2
 800753e:	461d      	mov	r5, r3
 8007540:	4680      	mov	r8, r0
 8007542:	4689      	mov	r9, r1
 8007544:	f000 f860 	bl	8007608 <__ieee754_pow>
 8007548:	4622      	mov	r2, r4
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	462b      	mov	r3, r5
 8007550:	4620      	mov	r0, r4
 8007552:	4629      	mov	r1, r5
 8007554:	f7f9 fa5a 	bl	8000a0c <__aeabi_dcmpun>
 8007558:	bbc8      	cbnz	r0, 80075ce <pow+0x96>
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	4640      	mov	r0, r8
 8007560:	4649      	mov	r1, r9
 8007562:	f7f9 fa21 	bl	80009a8 <__aeabi_dcmpeq>
 8007566:	b1b8      	cbz	r0, 8007598 <pow+0x60>
 8007568:	2200      	movs	r2, #0
 800756a:	2300      	movs	r3, #0
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f7f9 fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007574:	2800      	cmp	r0, #0
 8007576:	d141      	bne.n	80075fc <pow+0xc4>
 8007578:	4620      	mov	r0, r4
 800757a:	4629      	mov	r1, r5
 800757c:	f001 fb77 	bl	8008c6e <finite>
 8007580:	b328      	cbz	r0, 80075ce <pow+0x96>
 8007582:	2200      	movs	r2, #0
 8007584:	2300      	movs	r3, #0
 8007586:	4620      	mov	r0, r4
 8007588:	4629      	mov	r1, r5
 800758a:	f7f9 fa17 	bl	80009bc <__aeabi_dcmplt>
 800758e:	b1f0      	cbz	r0, 80075ce <pow+0x96>
 8007590:	f001 fc8e 	bl	8008eb0 <__errno>
 8007594:	2322      	movs	r3, #34	; 0x22
 8007596:	e019      	b.n	80075cc <pow+0x94>
 8007598:	4630      	mov	r0, r6
 800759a:	4639      	mov	r1, r7
 800759c:	f001 fb67 	bl	8008c6e <finite>
 80075a0:	b9c8      	cbnz	r0, 80075d6 <pow+0x9e>
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f001 fb62 	bl	8008c6e <finite>
 80075aa:	b1a0      	cbz	r0, 80075d6 <pow+0x9e>
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f001 fb5d 	bl	8008c6e <finite>
 80075b4:	b178      	cbz	r0, 80075d6 <pow+0x9e>
 80075b6:	4632      	mov	r2, r6
 80075b8:	463b      	mov	r3, r7
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 fa25 	bl	8000a0c <__aeabi_dcmpun>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0e4      	beq.n	8007590 <pow+0x58>
 80075c6:	f001 fc73 	bl	8008eb0 <__errno>
 80075ca:	2321      	movs	r3, #33	; 0x21
 80075cc:	6003      	str	r3, [r0, #0]
 80075ce:	4630      	mov	r0, r6
 80075d0:	4639      	mov	r1, r7
 80075d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d6:	2200      	movs	r2, #0
 80075d8:	2300      	movs	r3, #0
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f9 f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d0f3      	beq.n	80075ce <pow+0x96>
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f001 fb40 	bl	8008c6e <finite>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d0ed      	beq.n	80075ce <pow+0x96>
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	f001 fb3a 	bl	8008c6e <finite>
 80075fa:	e7c8      	b.n	800758e <pow+0x56>
 80075fc:	2600      	movs	r6, #0
 80075fe:	4f01      	ldr	r7, [pc, #4]	; (8007604 <pow+0xcc>)
 8007600:	e7e5      	b.n	80075ce <pow+0x96>
 8007602:	bf00      	nop
 8007604:	3ff00000 	.word	0x3ff00000

08007608 <__ieee754_pow>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	b093      	sub	sp, #76	; 0x4c
 800760e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007612:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007616:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800761a:	4689      	mov	r9, r1
 800761c:	ea56 0102 	orrs.w	r1, r6, r2
 8007620:	4680      	mov	r8, r0
 8007622:	d111      	bne.n	8007648 <__ieee754_pow+0x40>
 8007624:	1803      	adds	r3, r0, r0
 8007626:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800762a:	4152      	adcs	r2, r2
 800762c:	4299      	cmp	r1, r3
 800762e:	4b82      	ldr	r3, [pc, #520]	; (8007838 <__ieee754_pow+0x230>)
 8007630:	4193      	sbcs	r3, r2
 8007632:	f080 84b9 	bcs.w	8007fa8 <__ieee754_pow+0x9a0>
 8007636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fd95 	bl	800016c <__adddf3>
 8007642:	4683      	mov	fp, r0
 8007644:	468c      	mov	ip, r1
 8007646:	e06f      	b.n	8007728 <__ieee754_pow+0x120>
 8007648:	4b7c      	ldr	r3, [pc, #496]	; (800783c <__ieee754_pow+0x234>)
 800764a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800764e:	429c      	cmp	r4, r3
 8007650:	464d      	mov	r5, r9
 8007652:	4682      	mov	sl, r0
 8007654:	dc06      	bgt.n	8007664 <__ieee754_pow+0x5c>
 8007656:	d101      	bne.n	800765c <__ieee754_pow+0x54>
 8007658:	2800      	cmp	r0, #0
 800765a:	d1ec      	bne.n	8007636 <__ieee754_pow+0x2e>
 800765c:	429e      	cmp	r6, r3
 800765e:	dc01      	bgt.n	8007664 <__ieee754_pow+0x5c>
 8007660:	d10f      	bne.n	8007682 <__ieee754_pow+0x7a>
 8007662:	b172      	cbz	r2, 8007682 <__ieee754_pow+0x7a>
 8007664:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007668:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800766c:	ea55 050a 	orrs.w	r5, r5, sl
 8007670:	d1e1      	bne.n	8007636 <__ieee754_pow+0x2e>
 8007672:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007676:	18db      	adds	r3, r3, r3
 8007678:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800767c:	4152      	adcs	r2, r2
 800767e:	429d      	cmp	r5, r3
 8007680:	e7d5      	b.n	800762e <__ieee754_pow+0x26>
 8007682:	2d00      	cmp	r5, #0
 8007684:	da39      	bge.n	80076fa <__ieee754_pow+0xf2>
 8007686:	4b6e      	ldr	r3, [pc, #440]	; (8007840 <__ieee754_pow+0x238>)
 8007688:	429e      	cmp	r6, r3
 800768a:	dc52      	bgt.n	8007732 <__ieee754_pow+0x12a>
 800768c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007690:	429e      	cmp	r6, r3
 8007692:	f340 849c 	ble.w	8007fce <__ieee754_pow+0x9c6>
 8007696:	1533      	asrs	r3, r6, #20
 8007698:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800769c:	2b14      	cmp	r3, #20
 800769e:	dd0f      	ble.n	80076c0 <__ieee754_pow+0xb8>
 80076a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80076a4:	fa22 f103 	lsr.w	r1, r2, r3
 80076a8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ac:	4293      	cmp	r3, r2
 80076ae:	f040 848e 	bne.w	8007fce <__ieee754_pow+0x9c6>
 80076b2:	f001 0101 	and.w	r1, r1, #1
 80076b6:	f1c1 0302 	rsb	r3, r1, #2
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	b182      	cbz	r2, 80076e0 <__ieee754_pow+0xd8>
 80076be:	e05d      	b.n	800777c <__ieee754_pow+0x174>
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d159      	bne.n	8007778 <__ieee754_pow+0x170>
 80076c4:	f1c3 0314 	rsb	r3, r3, #20
 80076c8:	fa46 f103 	asr.w	r1, r6, r3
 80076cc:	fa01 f303 	lsl.w	r3, r1, r3
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	f040 8479 	bne.w	8007fc8 <__ieee754_pow+0x9c0>
 80076d6:	f001 0101 	and.w	r1, r1, #1
 80076da:	f1c1 0302 	rsb	r3, r1, #2
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4b58      	ldr	r3, [pc, #352]	; (8007844 <__ieee754_pow+0x23c>)
 80076e2:	429e      	cmp	r6, r3
 80076e4:	d132      	bne.n	800774c <__ieee754_pow+0x144>
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	f280 846a 	bge.w	8007fc0 <__ieee754_pow+0x9b8>
 80076ec:	4642      	mov	r2, r8
 80076ee:	464b      	mov	r3, r9
 80076f0:	2000      	movs	r0, #0
 80076f2:	4954      	ldr	r1, [pc, #336]	; (8007844 <__ieee754_pow+0x23c>)
 80076f4:	f7f9 f81a 	bl	800072c <__aeabi_ddiv>
 80076f8:	e7a3      	b.n	8007642 <__ieee754_pow+0x3a>
 80076fa:	2300      	movs	r3, #0
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d13c      	bne.n	800777c <__ieee754_pow+0x174>
 8007702:	4b4e      	ldr	r3, [pc, #312]	; (800783c <__ieee754_pow+0x234>)
 8007704:	429e      	cmp	r6, r3
 8007706:	d1eb      	bne.n	80076e0 <__ieee754_pow+0xd8>
 8007708:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800770c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007710:	ea53 030a 	orrs.w	r3, r3, sl
 8007714:	f000 8448 	beq.w	8007fa8 <__ieee754_pow+0x9a0>
 8007718:	4b4b      	ldr	r3, [pc, #300]	; (8007848 <__ieee754_pow+0x240>)
 800771a:	429c      	cmp	r4, r3
 800771c:	dd0b      	ble.n	8007736 <__ieee754_pow+0x12e>
 800771e:	2f00      	cmp	r7, #0
 8007720:	f2c0 8448 	blt.w	8007fb4 <__ieee754_pow+0x9ac>
 8007724:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007728:	4658      	mov	r0, fp
 800772a:	4661      	mov	r1, ip
 800772c:	b013      	add	sp, #76	; 0x4c
 800772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007732:	2302      	movs	r3, #2
 8007734:	e7e2      	b.n	80076fc <__ieee754_pow+0xf4>
 8007736:	2f00      	cmp	r7, #0
 8007738:	f04f 0b00 	mov.w	fp, #0
 800773c:	f04f 0c00 	mov.w	ip, #0
 8007740:	daf2      	bge.n	8007728 <__ieee754_pow+0x120>
 8007742:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007746:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800774a:	e7ed      	b.n	8007728 <__ieee754_pow+0x120>
 800774c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007750:	d106      	bne.n	8007760 <__ieee754_pow+0x158>
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 febd 	bl	80004d8 <__aeabi_dmul>
 800775e:	e770      	b.n	8007642 <__ieee754_pow+0x3a>
 8007760:	4b3a      	ldr	r3, [pc, #232]	; (800784c <__ieee754_pow+0x244>)
 8007762:	429f      	cmp	r7, r3
 8007764:	d10a      	bne.n	800777c <__ieee754_pow+0x174>
 8007766:	2d00      	cmp	r5, #0
 8007768:	db08      	blt.n	800777c <__ieee754_pow+0x174>
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	b013      	add	sp, #76	; 0x4c
 8007770:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	f000 bc5e 	b.w	8008034 <__ieee754_sqrt>
 8007778:	2300      	movs	r3, #0
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f001 fa72 	bl	8008c68 <fabs>
 8007784:	4683      	mov	fp, r0
 8007786:	468c      	mov	ip, r1
 8007788:	f1ba 0f00 	cmp.w	sl, #0
 800778c:	d128      	bne.n	80077e0 <__ieee754_pow+0x1d8>
 800778e:	b124      	cbz	r4, 800779a <__ieee754_pow+0x192>
 8007790:	4b2c      	ldr	r3, [pc, #176]	; (8007844 <__ieee754_pow+0x23c>)
 8007792:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007796:	429a      	cmp	r2, r3
 8007798:	d122      	bne.n	80077e0 <__ieee754_pow+0x1d8>
 800779a:	2f00      	cmp	r7, #0
 800779c:	da07      	bge.n	80077ae <__ieee754_pow+0x1a6>
 800779e:	465a      	mov	r2, fp
 80077a0:	4663      	mov	r3, ip
 80077a2:	2000      	movs	r0, #0
 80077a4:	4927      	ldr	r1, [pc, #156]	; (8007844 <__ieee754_pow+0x23c>)
 80077a6:	f7f8 ffc1 	bl	800072c <__aeabi_ddiv>
 80077aa:	4683      	mov	fp, r0
 80077ac:	468c      	mov	ip, r1
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	daba      	bge.n	8007728 <__ieee754_pow+0x120>
 80077b2:	9b00      	ldr	r3, [sp, #0]
 80077b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80077b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80077bc:	4323      	orrs	r3, r4
 80077be:	d108      	bne.n	80077d2 <__ieee754_pow+0x1ca>
 80077c0:	465a      	mov	r2, fp
 80077c2:	4663      	mov	r3, ip
 80077c4:	4658      	mov	r0, fp
 80077c6:	4661      	mov	r1, ip
 80077c8:	f7f8 fcce 	bl	8000168 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e790      	b.n	80076f4 <__ieee754_pow+0xec>
 80077d2:	9b00      	ldr	r3, [sp, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d1a7      	bne.n	8007728 <__ieee754_pow+0x120>
 80077d8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80077dc:	469c      	mov	ip, r3
 80077de:	e7a3      	b.n	8007728 <__ieee754_pow+0x120>
 80077e0:	0feb      	lsrs	r3, r5, #31
 80077e2:	3b01      	subs	r3, #1
 80077e4:	930c      	str	r3, [sp, #48]	; 0x30
 80077e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	d104      	bne.n	80077f8 <__ieee754_pow+0x1f0>
 80077ee:	4642      	mov	r2, r8
 80077f0:	464b      	mov	r3, r9
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	e7e7      	b.n	80077c8 <__ieee754_pow+0x1c0>
 80077f8:	4b15      	ldr	r3, [pc, #84]	; (8007850 <__ieee754_pow+0x248>)
 80077fa:	429e      	cmp	r6, r3
 80077fc:	f340 80f6 	ble.w	80079ec <__ieee754_pow+0x3e4>
 8007800:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007804:	429e      	cmp	r6, r3
 8007806:	4b10      	ldr	r3, [pc, #64]	; (8007848 <__ieee754_pow+0x240>)
 8007808:	dd09      	ble.n	800781e <__ieee754_pow+0x216>
 800780a:	429c      	cmp	r4, r3
 800780c:	dc0c      	bgt.n	8007828 <__ieee754_pow+0x220>
 800780e:	2f00      	cmp	r7, #0
 8007810:	da0c      	bge.n	800782c <__ieee754_pow+0x224>
 8007812:	2000      	movs	r0, #0
 8007814:	b013      	add	sp, #76	; 0x4c
 8007816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	f001 ba20 	b.w	8008c5e <__math_oflow>
 800781e:	429c      	cmp	r4, r3
 8007820:	dbf5      	blt.n	800780e <__ieee754_pow+0x206>
 8007822:	4b08      	ldr	r3, [pc, #32]	; (8007844 <__ieee754_pow+0x23c>)
 8007824:	429c      	cmp	r4, r3
 8007826:	dd15      	ble.n	8007854 <__ieee754_pow+0x24c>
 8007828:	2f00      	cmp	r7, #0
 800782a:	dcf2      	bgt.n	8007812 <__ieee754_pow+0x20a>
 800782c:	2000      	movs	r0, #0
 800782e:	b013      	add	sp, #76	; 0x4c
 8007830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	f001 ba0e 	b.w	8008c54 <__math_uflow>
 8007838:	fff00000 	.word	0xfff00000
 800783c:	7ff00000 	.word	0x7ff00000
 8007840:	433fffff 	.word	0x433fffff
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	3fefffff 	.word	0x3fefffff
 800784c:	3fe00000 	.word	0x3fe00000
 8007850:	41e00000 	.word	0x41e00000
 8007854:	4661      	mov	r1, ip
 8007856:	2200      	movs	r2, #0
 8007858:	4658      	mov	r0, fp
 800785a:	4b5f      	ldr	r3, [pc, #380]	; (80079d8 <__ieee754_pow+0x3d0>)
 800785c:	f7f8 fc84 	bl	8000168 <__aeabi_dsub>
 8007860:	a355      	add	r3, pc, #340	; (adr r3, 80079b8 <__ieee754_pow+0x3b0>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	f7f8 fe35 	bl	80004d8 <__aeabi_dmul>
 800786e:	a354      	add	r3, pc, #336	; (adr r3, 80079c0 <__ieee754_pow+0x3b8>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	f7f8 fe2c 	bl	80004d8 <__aeabi_dmul>
 8007880:	2200      	movs	r2, #0
 8007882:	4682      	mov	sl, r0
 8007884:	468b      	mov	fp, r1
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	4b54      	ldr	r3, [pc, #336]	; (80079dc <__ieee754_pow+0x3d4>)
 800788c:	f7f8 fe24 	bl	80004d8 <__aeabi_dmul>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	a14c      	add	r1, pc, #304	; (adr r1, 80079c8 <__ieee754_pow+0x3c0>)
 8007896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800789a:	f7f8 fc65 	bl	8000168 <__aeabi_dsub>
 800789e:	4622      	mov	r2, r4
 80078a0:	462b      	mov	r3, r5
 80078a2:	f7f8 fe19 	bl	80004d8 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	2000      	movs	r0, #0
 80078ac:	494c      	ldr	r1, [pc, #304]	; (80079e0 <__ieee754_pow+0x3d8>)
 80078ae:	f7f8 fc5b 	bl	8000168 <__aeabi_dsub>
 80078b2:	4622      	mov	r2, r4
 80078b4:	462b      	mov	r3, r5
 80078b6:	4680      	mov	r8, r0
 80078b8:	4689      	mov	r9, r1
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f8 fe0b 	bl	80004d8 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	f7f8 fe05 	bl	80004d8 <__aeabi_dmul>
 80078ce:	a340      	add	r3, pc, #256	; (adr r3, 80079d0 <__ieee754_pow+0x3c8>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f8 fe00 	bl	80004d8 <__aeabi_dmul>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4650      	mov	r0, sl
 80078de:	4659      	mov	r1, fp
 80078e0:	f7f8 fc42 	bl	8000168 <__aeabi_dsub>
 80078e4:	f04f 0a00 	mov.w	sl, #0
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4604      	mov	r4, r0
 80078ee:	460d      	mov	r5, r1
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	f7f8 fc3a 	bl	800016c <__adddf3>
 80078f8:	4632      	mov	r2, r6
 80078fa:	463b      	mov	r3, r7
 80078fc:	4650      	mov	r0, sl
 80078fe:	468b      	mov	fp, r1
 8007900:	f7f8 fc32 	bl	8000168 <__aeabi_dsub>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	f7f8 fc2c 	bl	8000168 <__aeabi_dsub>
 8007910:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007914:	9b00      	ldr	r3, [sp, #0]
 8007916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007918:	3b01      	subs	r3, #1
 800791a:	4313      	orrs	r3, r2
 800791c:	f04f 0600 	mov.w	r6, #0
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	bf0c      	ite	eq
 8007926:	4b2f      	ldreq	r3, [pc, #188]	; (80079e4 <__ieee754_pow+0x3dc>)
 8007928:	4b2b      	ldrne	r3, [pc, #172]	; (80079d8 <__ieee754_pow+0x3d0>)
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007932:	e9cd 2300 	strd	r2, r3, [sp]
 8007936:	4632      	mov	r2, r6
 8007938:	463b      	mov	r3, r7
 800793a:	f7f8 fc15 	bl	8000168 <__aeabi_dsub>
 800793e:	4652      	mov	r2, sl
 8007940:	465b      	mov	r3, fp
 8007942:	f7f8 fdc9 	bl	80004d8 <__aeabi_dmul>
 8007946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800794a:	4680      	mov	r8, r0
 800794c:	4689      	mov	r9, r1
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f8 fdc1 	bl	80004d8 <__aeabi_dmul>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	f7f8 fc05 	bl	800016c <__adddf3>
 8007962:	4632      	mov	r2, r6
 8007964:	463b      	mov	r3, r7
 8007966:	4680      	mov	r8, r0
 8007968:	4689      	mov	r9, r1
 800796a:	4650      	mov	r0, sl
 800796c:	4659      	mov	r1, fp
 800796e:	f7f8 fdb3 	bl	80004d8 <__aeabi_dmul>
 8007972:	4604      	mov	r4, r0
 8007974:	460d      	mov	r5, r1
 8007976:	460b      	mov	r3, r1
 8007978:	4602      	mov	r2, r0
 800797a:	4649      	mov	r1, r9
 800797c:	4640      	mov	r0, r8
 800797e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007982:	f7f8 fbf3 	bl	800016c <__adddf3>
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <__ieee754_pow+0x3e0>)
 8007988:	4682      	mov	sl, r0
 800798a:	4299      	cmp	r1, r3
 800798c:	460f      	mov	r7, r1
 800798e:	460e      	mov	r6, r1
 8007990:	f340 82e5 	ble.w	8007f5e <__ieee754_pow+0x956>
 8007994:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007998:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800799c:	4303      	orrs	r3, r0
 800799e:	f000 81df 	beq.w	8007d60 <__ieee754_pow+0x758>
 80079a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079a6:	2200      	movs	r2, #0
 80079a8:	2300      	movs	r3, #0
 80079aa:	f7f9 f807 	bl	80009bc <__aeabi_dcmplt>
 80079ae:	3800      	subs	r0, #0
 80079b0:	bf18      	it	ne
 80079b2:	2001      	movne	r0, #1
 80079b4:	e72e      	b.n	8007814 <__ieee754_pow+0x20c>
 80079b6:	bf00      	nop
 80079b8:	60000000 	.word	0x60000000
 80079bc:	3ff71547 	.word	0x3ff71547
 80079c0:	f85ddf44 	.word	0xf85ddf44
 80079c4:	3e54ae0b 	.word	0x3e54ae0b
 80079c8:	55555555 	.word	0x55555555
 80079cc:	3fd55555 	.word	0x3fd55555
 80079d0:	652b82fe 	.word	0x652b82fe
 80079d4:	3ff71547 	.word	0x3ff71547
 80079d8:	3ff00000 	.word	0x3ff00000
 80079dc:	3fd00000 	.word	0x3fd00000
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	bff00000 	.word	0xbff00000
 80079e8:	408fffff 	.word	0x408fffff
 80079ec:	4bd2      	ldr	r3, [pc, #840]	; (8007d38 <__ieee754_pow+0x730>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	402b      	ands	r3, r5
 80079f2:	b943      	cbnz	r3, 8007a06 <__ieee754_pow+0x3fe>
 80079f4:	4658      	mov	r0, fp
 80079f6:	4661      	mov	r1, ip
 80079f8:	4bd0      	ldr	r3, [pc, #832]	; (8007d3c <__ieee754_pow+0x734>)
 80079fa:	f7f8 fd6d 	bl	80004d8 <__aeabi_dmul>
 80079fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007a02:	4683      	mov	fp, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	1523      	asrs	r3, r4, #20
 8007a08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a0c:	4413      	add	r3, r2
 8007a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a10:	4bcb      	ldr	r3, [pc, #812]	; (8007d40 <__ieee754_pow+0x738>)
 8007a12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007a16:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007a20:	dd08      	ble.n	8007a34 <__ieee754_pow+0x42c>
 8007a22:	4bc8      	ldr	r3, [pc, #800]	; (8007d44 <__ieee754_pow+0x73c>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	f340 8199 	ble.w	8007d5c <__ieee754_pow+0x754>
 8007a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a2c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007a30:	3301      	adds	r3, #1
 8007a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a34:	2600      	movs	r6, #0
 8007a36:	00f3      	lsls	r3, r6, #3
 8007a38:	930d      	str	r3, [sp, #52]	; 0x34
 8007a3a:	4bc3      	ldr	r3, [pc, #780]	; (8007d48 <__ieee754_pow+0x740>)
 8007a3c:	4658      	mov	r0, fp
 8007a3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a46:	4629      	mov	r1, r5
 8007a48:	461a      	mov	r2, r3
 8007a4a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007a4e:	4623      	mov	r3, r4
 8007a50:	f7f8 fb8a 	bl	8000168 <__aeabi_dsub>
 8007a54:	46da      	mov	sl, fp
 8007a56:	462b      	mov	r3, r5
 8007a58:	4652      	mov	r2, sl
 8007a5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007a5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a62:	f7f8 fb83 	bl	800016c <__adddf3>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	49b7      	ldr	r1, [pc, #732]	; (8007d4c <__ieee754_pow+0x744>)
 8007a6e:	f7f8 fe5d 	bl	800072c <__aeabi_ddiv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a7a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007a7e:	f7f8 fd2b 	bl	80004d8 <__aeabi_dmul>
 8007a82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a86:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007a8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2200      	movs	r2, #0
 8007a92:	46ab      	mov	fp, r5
 8007a94:	106d      	asrs	r5, r5, #1
 8007a96:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007aa0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007aa4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4614      	mov	r4, r2
 8007aae:	461d      	mov	r5, r3
 8007ab0:	f7f8 fd12 	bl	80004d8 <__aeabi_dmul>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007abc:	f7f8 fb54 	bl	8000168 <__aeabi_dsub>
 8007ac0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	f7f8 fb4c 	bl	8000168 <__aeabi_dsub>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4650      	mov	r0, sl
 8007ad6:	4659      	mov	r1, fp
 8007ad8:	f7f8 fb46 	bl	8000168 <__aeabi_dsub>
 8007adc:	4642      	mov	r2, r8
 8007ade:	464b      	mov	r3, r9
 8007ae0:	f7f8 fcfa 	bl	80004d8 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fb3c 	bl	8000168 <__aeabi_dsub>
 8007af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007af4:	f7f8 fcf0 	bl	80004d8 <__aeabi_dmul>
 8007af8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007afc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b00:	4610      	mov	r0, r2
 8007b02:	4619      	mov	r1, r3
 8007b04:	f7f8 fce8 	bl	80004d8 <__aeabi_dmul>
 8007b08:	a379      	add	r3, pc, #484	; (adr r3, 8007cf0 <__ieee754_pow+0x6e8>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460d      	mov	r5, r1
 8007b12:	f7f8 fce1 	bl	80004d8 <__aeabi_dmul>
 8007b16:	a378      	add	r3, pc, #480	; (adr r3, 8007cf8 <__ieee754_pow+0x6f0>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f8 fb26 	bl	800016c <__adddf3>
 8007b20:	4622      	mov	r2, r4
 8007b22:	462b      	mov	r3, r5
 8007b24:	f7f8 fcd8 	bl	80004d8 <__aeabi_dmul>
 8007b28:	a375      	add	r3, pc, #468	; (adr r3, 8007d00 <__ieee754_pow+0x6f8>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fb1d 	bl	800016c <__adddf3>
 8007b32:	4622      	mov	r2, r4
 8007b34:	462b      	mov	r3, r5
 8007b36:	f7f8 fccf 	bl	80004d8 <__aeabi_dmul>
 8007b3a:	a373      	add	r3, pc, #460	; (adr r3, 8007d08 <__ieee754_pow+0x700>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fb14 	bl	800016c <__adddf3>
 8007b44:	4622      	mov	r2, r4
 8007b46:	462b      	mov	r3, r5
 8007b48:	f7f8 fcc6 	bl	80004d8 <__aeabi_dmul>
 8007b4c:	a370      	add	r3, pc, #448	; (adr r3, 8007d10 <__ieee754_pow+0x708>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fb0b 	bl	800016c <__adddf3>
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	f7f8 fcbd 	bl	80004d8 <__aeabi_dmul>
 8007b5e:	a36e      	add	r3, pc, #440	; (adr r3, 8007d18 <__ieee754_pow+0x710>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fb02 	bl	800016c <__adddf3>
 8007b68:	4622      	mov	r2, r4
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460f      	mov	r7, r1
 8007b6e:	462b      	mov	r3, r5
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fcb0 	bl	80004d8 <__aeabi_dmul>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	4639      	mov	r1, r7
 8007b80:	f7f8 fcaa 	bl	80004d8 <__aeabi_dmul>
 8007b84:	4604      	mov	r4, r0
 8007b86:	460d      	mov	r5, r1
 8007b88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	f7f8 faec 	bl	800016c <__adddf3>
 8007b94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b98:	f7f8 fc9e 	bl	80004d8 <__aeabi_dmul>
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	f7f8 fae4 	bl	800016c <__adddf3>
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	464b      	mov	r3, r9
 8007bac:	4640      	mov	r0, r8
 8007bae:	4649      	mov	r1, r9
 8007bb0:	f7f8 fc92 	bl	80004d8 <__aeabi_dmul>
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4b66      	ldr	r3, [pc, #408]	; (8007d50 <__ieee754_pow+0x748>)
 8007bb8:	4682      	mov	sl, r0
 8007bba:	468b      	mov	fp, r1
 8007bbc:	f7f8 fad6 	bl	800016c <__adddf3>
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	f7f8 fad2 	bl	800016c <__adddf3>
 8007bc8:	2400      	movs	r4, #0
 8007bca:	460d      	mov	r5, r1
 8007bcc:	4622      	mov	r2, r4
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	f7f8 fc80 	bl	80004d8 <__aeabi_dmul>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4680      	mov	r8, r0
 8007bdc:	4689      	mov	r9, r1
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	4b5b      	ldr	r3, [pc, #364]	; (8007d50 <__ieee754_pow+0x748>)
 8007be4:	f7f8 fac0 	bl	8000168 <__aeabi_dsub>
 8007be8:	4652      	mov	r2, sl
 8007bea:	465b      	mov	r3, fp
 8007bec:	f7f8 fabc 	bl	8000168 <__aeabi_dsub>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f8 fab6 	bl	8000168 <__aeabi_dsub>
 8007bfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c00:	f7f8 fc6a 	bl	80004d8 <__aeabi_dmul>
 8007c04:	4622      	mov	r2, r4
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c0e:	462b      	mov	r3, r5
 8007c10:	f7f8 fc62 	bl	80004d8 <__aeabi_dmul>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f7f8 faa6 	bl	800016c <__adddf3>
 8007c20:	2400      	movs	r4, #0
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	f7f8 fa9d 	bl	800016c <__adddf3>
 8007c32:	a33b      	add	r3, pc, #236	; (adr r3, 8007d20 <__ieee754_pow+0x718>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	4620      	mov	r0, r4
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	f7f8 fc4c 	bl	80004d8 <__aeabi_dmul>
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fa8c 	bl	8000168 <__aeabi_dsub>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f7f8 fa86 	bl	8000168 <__aeabi_dsub>
 8007c5c:	a332      	add	r3, pc, #200	; (adr r3, 8007d28 <__ieee754_pow+0x720>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fc39 	bl	80004d8 <__aeabi_dmul>
 8007c66:	a332      	add	r3, pc, #200	; (adr r3, 8007d30 <__ieee754_pow+0x728>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	4620      	mov	r0, r4
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7f8 fc30 	bl	80004d8 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 fa74 	bl	800016c <__adddf3>
 8007c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c86:	4b33      	ldr	r3, [pc, #204]	; (8007d54 <__ieee754_pow+0x74c>)
 8007c88:	f04f 0a00 	mov.w	sl, #0
 8007c8c:	4413      	add	r3, r2
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f7f8 fa6b 	bl	800016c <__adddf3>
 8007c96:	4680      	mov	r8, r0
 8007c98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007c9a:	4689      	mov	r9, r1
 8007c9c:	f7f8 fbb2 	bl	8000404 <__aeabi_i2d>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ca6:	4b2c      	ldr	r3, [pc, #176]	; (8007d58 <__ieee754_pow+0x750>)
 8007ca8:	4413      	add	r3, r2
 8007caa:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007cae:	4642      	mov	r2, r8
 8007cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	f7f8 fa59 	bl	800016c <__adddf3>
 8007cba:	4632      	mov	r2, r6
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	f7f8 fa55 	bl	800016c <__adddf3>
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	f7f8 fa51 	bl	800016c <__adddf3>
 8007cca:	4622      	mov	r2, r4
 8007ccc:	462b      	mov	r3, r5
 8007cce:	4650      	mov	r0, sl
 8007cd0:	468b      	mov	fp, r1
 8007cd2:	f7f8 fa49 	bl	8000168 <__aeabi_dsub>
 8007cd6:	4632      	mov	r2, r6
 8007cd8:	463b      	mov	r3, r7
 8007cda:	f7f8 fa45 	bl	8000168 <__aeabi_dsub>
 8007cde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ce2:	f7f8 fa41 	bl	8000168 <__aeabi_dsub>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	e60d      	b.n	800790c <__ieee754_pow+0x304>
 8007cf0:	4a454eef 	.word	0x4a454eef
 8007cf4:	3fca7e28 	.word	0x3fca7e28
 8007cf8:	93c9db65 	.word	0x93c9db65
 8007cfc:	3fcd864a 	.word	0x3fcd864a
 8007d00:	a91d4101 	.word	0xa91d4101
 8007d04:	3fd17460 	.word	0x3fd17460
 8007d08:	518f264d 	.word	0x518f264d
 8007d0c:	3fd55555 	.word	0x3fd55555
 8007d10:	db6fabff 	.word	0xdb6fabff
 8007d14:	3fdb6db6 	.word	0x3fdb6db6
 8007d18:	33333303 	.word	0x33333303
 8007d1c:	3fe33333 	.word	0x3fe33333
 8007d20:	e0000000 	.word	0xe0000000
 8007d24:	3feec709 	.word	0x3feec709
 8007d28:	dc3a03fd 	.word	0xdc3a03fd
 8007d2c:	3feec709 	.word	0x3feec709
 8007d30:	145b01f5 	.word	0x145b01f5
 8007d34:	be3e2fe0 	.word	0xbe3e2fe0
 8007d38:	7ff00000 	.word	0x7ff00000
 8007d3c:	43400000 	.word	0x43400000
 8007d40:	0003988e 	.word	0x0003988e
 8007d44:	000bb679 	.word	0x000bb679
 8007d48:	0800bd90 	.word	0x0800bd90
 8007d4c:	3ff00000 	.word	0x3ff00000
 8007d50:	40080000 	.word	0x40080000
 8007d54:	0800bdb0 	.word	0x0800bdb0
 8007d58:	0800bda0 	.word	0x0800bda0
 8007d5c:	2601      	movs	r6, #1
 8007d5e:	e66a      	b.n	8007a36 <__ieee754_pow+0x42e>
 8007d60:	a39d      	add	r3, pc, #628	; (adr r3, 8007fd8 <__ieee754_pow+0x9d0>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 f9ff 	bl	800016c <__adddf3>
 8007d6e:	4622      	mov	r2, r4
 8007d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d74:	462b      	mov	r3, r5
 8007d76:	4650      	mov	r0, sl
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 f9f5 	bl	8000168 <__aeabi_dsub>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d86:	f7f8 fe37 	bl	80009f8 <__aeabi_dcmpgt>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	f47f ae09 	bne.w	80079a2 <__ieee754_pow+0x39a>
 8007d90:	4aa3      	ldr	r2, [pc, #652]	; (8008020 <__ieee754_pow+0xa18>)
 8007d92:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007d96:	4293      	cmp	r3, r2
 8007d98:	f340 8101 	ble.w	8007f9e <__ieee754_pow+0x996>
 8007d9c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007da0:	2000      	movs	r0, #0
 8007da2:	151b      	asrs	r3, r3, #20
 8007da4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007da8:	fa4a f303 	asr.w	r3, sl, r3
 8007dac:	4433      	add	r3, r6
 8007dae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007db2:	4f9c      	ldr	r7, [pc, #624]	; (8008024 <__ieee754_pow+0xa1c>)
 8007db4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007db8:	4117      	asrs	r7, r2
 8007dba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007dbe:	ea23 0107 	bic.w	r1, r3, r7
 8007dc2:	f1c2 0214 	rsb	r2, r2, #20
 8007dc6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007dca:	460b      	mov	r3, r1
 8007dcc:	fa4a fa02 	asr.w	sl, sl, r2
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	bfb8      	it	lt
 8007dda:	f1ca 0a00 	rsblt	sl, sl, #0
 8007dde:	f7f8 f9c3 	bl	8000168 <__aeabi_dsub>
 8007de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dea:	2400      	movs	r4, #0
 8007dec:	4642      	mov	r2, r8
 8007dee:	464b      	mov	r3, r9
 8007df0:	f7f8 f9bc 	bl	800016c <__adddf3>
 8007df4:	a37a      	add	r3, pc, #488	; (adr r3, 8007fe0 <__ieee754_pow+0x9d8>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	f7f8 fb6b 	bl	80004d8 <__aeabi_dmul>
 8007e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	f7f8 f9ab 	bl	8000168 <__aeabi_dsub>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4640      	mov	r0, r8
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7f8 f9a5 	bl	8000168 <__aeabi_dsub>
 8007e1e:	a372      	add	r3, pc, #456	; (adr r3, 8007fe8 <__ieee754_pow+0x9e0>)
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 fb58 	bl	80004d8 <__aeabi_dmul>
 8007e28:	a371      	add	r3, pc, #452	; (adr r3, 8007ff0 <__ieee754_pow+0x9e8>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	4680      	mov	r8, r0
 8007e30:	4689      	mov	r9, r1
 8007e32:	4620      	mov	r0, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	f7f8 fb4f 	bl	80004d8 <__aeabi_dmul>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7f8 f993 	bl	800016c <__adddf3>
 8007e46:	4604      	mov	r4, r0
 8007e48:	460d      	mov	r5, r1
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4630      	mov	r0, r6
 8007e50:	4639      	mov	r1, r7
 8007e52:	f7f8 f98b 	bl	800016c <__adddf3>
 8007e56:	4632      	mov	r2, r6
 8007e58:	463b      	mov	r3, r7
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	4689      	mov	r9, r1
 8007e5e:	f7f8 f983 	bl	8000168 <__aeabi_dsub>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4620      	mov	r0, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7f8 f97d 	bl	8000168 <__aeabi_dsub>
 8007e6e:	4642      	mov	r2, r8
 8007e70:	4606      	mov	r6, r0
 8007e72:	460f      	mov	r7, r1
 8007e74:	464b      	mov	r3, r9
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 fb2d 	bl	80004d8 <__aeabi_dmul>
 8007e7e:	a35e      	add	r3, pc, #376	; (adr r3, 8007ff8 <__ieee754_pow+0x9f0>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	4604      	mov	r4, r0
 8007e86:	460d      	mov	r5, r1
 8007e88:	f7f8 fb26 	bl	80004d8 <__aeabi_dmul>
 8007e8c:	a35c      	add	r3, pc, #368	; (adr r3, 8008000 <__ieee754_pow+0x9f8>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 f969 	bl	8000168 <__aeabi_dsub>
 8007e96:	4622      	mov	r2, r4
 8007e98:	462b      	mov	r3, r5
 8007e9a:	f7f8 fb1d 	bl	80004d8 <__aeabi_dmul>
 8007e9e:	a35a      	add	r3, pc, #360	; (adr r3, 8008008 <__ieee754_pow+0xa00>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 f962 	bl	800016c <__adddf3>
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	462b      	mov	r3, r5
 8007eac:	f7f8 fb14 	bl	80004d8 <__aeabi_dmul>
 8007eb0:	a357      	add	r3, pc, #348	; (adr r3, 8008010 <__ieee754_pow+0xa08>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 f957 	bl	8000168 <__aeabi_dsub>
 8007eba:	4622      	mov	r2, r4
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	f7f8 fb0b 	bl	80004d8 <__aeabi_dmul>
 8007ec2:	a355      	add	r3, pc, #340	; (adr r3, 8008018 <__ieee754_pow+0xa10>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 f950 	bl	800016c <__adddf3>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	462b      	mov	r3, r5
 8007ed0:	f7f8 fb02 	bl	80004d8 <__aeabi_dmul>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4649      	mov	r1, r9
 8007edc:	f7f8 f944 	bl	8000168 <__aeabi_dsub>
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	460d      	mov	r5, r1
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4649      	mov	r1, r9
 8007eec:	f7f8 faf4 	bl	80004d8 <__aeabi_dmul>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 f933 	bl	8000168 <__aeabi_dsub>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f0a:	f7f8 fc0f 	bl	800072c <__aeabi_ddiv>
 8007f0e:	4632      	mov	r2, r6
 8007f10:	4604      	mov	r4, r0
 8007f12:	460d      	mov	r5, r1
 8007f14:	463b      	mov	r3, r7
 8007f16:	4640      	mov	r0, r8
 8007f18:	4649      	mov	r1, r9
 8007f1a:	f7f8 fadd 	bl	80004d8 <__aeabi_dmul>
 8007f1e:	4632      	mov	r2, r6
 8007f20:	463b      	mov	r3, r7
 8007f22:	f7f8 f923 	bl	800016c <__adddf3>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	f7f8 f91b 	bl	8000168 <__aeabi_dsub>
 8007f32:	4642      	mov	r2, r8
 8007f34:	464b      	mov	r3, r9
 8007f36:	f7f8 f917 	bl	8000168 <__aeabi_dsub>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	2000      	movs	r0, #0
 8007f40:	4939      	ldr	r1, [pc, #228]	; (8008028 <__ieee754_pow+0xa20>)
 8007f42:	f7f8 f911 	bl	8000168 <__aeabi_dsub>
 8007f46:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007f4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007f4e:	da29      	bge.n	8007fa4 <__ieee754_pow+0x99c>
 8007f50:	4652      	mov	r2, sl
 8007f52:	f000 fe95 	bl	8008c80 <scalbn>
 8007f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f5a:	f7ff bbfe 	b.w	800775a <__ieee754_pow+0x152>
 8007f5e:	4b33      	ldr	r3, [pc, #204]	; (800802c <__ieee754_pow+0xa24>)
 8007f60:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007f64:	429f      	cmp	r7, r3
 8007f66:	f77f af13 	ble.w	8007d90 <__ieee754_pow+0x788>
 8007f6a:	4b31      	ldr	r3, [pc, #196]	; (8008030 <__ieee754_pow+0xa28>)
 8007f6c:	440b      	add	r3, r1
 8007f6e:	4303      	orrs	r3, r0
 8007f70:	d009      	beq.n	8007f86 <__ieee754_pow+0x97e>
 8007f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f7f8 fd1f 	bl	80009bc <__aeabi_dcmplt>
 8007f7e:	3800      	subs	r0, #0
 8007f80:	bf18      	it	ne
 8007f82:	2001      	movne	r0, #1
 8007f84:	e453      	b.n	800782e <__ieee754_pow+0x226>
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	f7f8 f8ed 	bl	8000168 <__aeabi_dsub>
 8007f8e:	4642      	mov	r2, r8
 8007f90:	464b      	mov	r3, r9
 8007f92:	f7f8 fd27 	bl	80009e4 <__aeabi_dcmpge>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f43f aefa 	beq.w	8007d90 <__ieee754_pow+0x788>
 8007f9c:	e7e9      	b.n	8007f72 <__ieee754_pow+0x96a>
 8007f9e:	f04f 0a00 	mov.w	sl, #0
 8007fa2:	e720      	b.n	8007de6 <__ieee754_pow+0x7de>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	e7d6      	b.n	8007f56 <__ieee754_pow+0x94e>
 8007fa8:	f04f 0b00 	mov.w	fp, #0
 8007fac:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008028 <__ieee754_pow+0xa20>
 8007fb0:	f7ff bbba 	b.w	8007728 <__ieee754_pow+0x120>
 8007fb4:	f04f 0b00 	mov.w	fp, #0
 8007fb8:	f04f 0c00 	mov.w	ip, #0
 8007fbc:	f7ff bbb4 	b.w	8007728 <__ieee754_pow+0x120>
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f7ff bb3d 	b.w	8007642 <__ieee754_pow+0x3a>
 8007fc8:	9200      	str	r2, [sp, #0]
 8007fca:	f7ff bb89 	b.w	80076e0 <__ieee754_pow+0xd8>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f7ff bb73 	b.w	80076ba <__ieee754_pow+0xb2>
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	652b82fe 	.word	0x652b82fe
 8007fdc:	3c971547 	.word	0x3c971547
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	3fe62e43 	.word	0x3fe62e43
 8007fe8:	fefa39ef 	.word	0xfefa39ef
 8007fec:	3fe62e42 	.word	0x3fe62e42
 8007ff0:	0ca86c39 	.word	0x0ca86c39
 8007ff4:	be205c61 	.word	0xbe205c61
 8007ff8:	72bea4d0 	.word	0x72bea4d0
 8007ffc:	3e663769 	.word	0x3e663769
 8008000:	c5d26bf1 	.word	0xc5d26bf1
 8008004:	3ebbbd41 	.word	0x3ebbbd41
 8008008:	af25de2c 	.word	0xaf25de2c
 800800c:	3f11566a 	.word	0x3f11566a
 8008010:	16bebd93 	.word	0x16bebd93
 8008014:	3f66c16c 	.word	0x3f66c16c
 8008018:	5555553e 	.word	0x5555553e
 800801c:	3fc55555 	.word	0x3fc55555
 8008020:	3fe00000 	.word	0x3fe00000
 8008024:	000fffff 	.word	0x000fffff
 8008028:	3ff00000 	.word	0x3ff00000
 800802c:	4090cbff 	.word	0x4090cbff
 8008030:	3f6f3400 	.word	0x3f6f3400

08008034 <__ieee754_sqrt>:
 8008034:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008190 <__ieee754_sqrt+0x15c>
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008040:	4606      	mov	r6, r0
 8008042:	460d      	mov	r5, r1
 8008044:	460c      	mov	r4, r1
 8008046:	460a      	mov	r2, r1
 8008048:	4607      	mov	r7, r0
 800804a:	4603      	mov	r3, r0
 800804c:	d10f      	bne.n	800806e <__ieee754_sqrt+0x3a>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	f7f8 fa41 	bl	80004d8 <__aeabi_dmul>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4630      	mov	r0, r6
 800805c:	4629      	mov	r1, r5
 800805e:	f7f8 f885 	bl	800016c <__adddf3>
 8008062:	4606      	mov	r6, r0
 8008064:	460d      	mov	r5, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4629      	mov	r1, r5
 800806a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800806e:	2900      	cmp	r1, #0
 8008070:	dc0e      	bgt.n	8008090 <__ieee754_sqrt+0x5c>
 8008072:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008076:	ea5c 0707 	orrs.w	r7, ip, r7
 800807a:	d0f4      	beq.n	8008066 <__ieee754_sqrt+0x32>
 800807c:	b141      	cbz	r1, 8008090 <__ieee754_sqrt+0x5c>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	f7f8 f871 	bl	8000168 <__aeabi_dsub>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	f7f8 fb4f 	bl	800072c <__aeabi_ddiv>
 800808e:	e7e8      	b.n	8008062 <__ieee754_sqrt+0x2e>
 8008090:	1521      	asrs	r1, r4, #20
 8008092:	d075      	beq.n	8008180 <__ieee754_sqrt+0x14c>
 8008094:	07cc      	lsls	r4, r1, #31
 8008096:	f04f 0400 	mov.w	r4, #0
 800809a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800809e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80080a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80080a6:	bf5e      	ittt	pl
 80080a8:	0fd9      	lsrpl	r1, r3, #31
 80080aa:	005b      	lslpl	r3, r3, #1
 80080ac:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80080b0:	0fd9      	lsrs	r1, r3, #31
 80080b2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80080b6:	2516      	movs	r5, #22
 80080b8:	4620      	mov	r0, r4
 80080ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080be:	107f      	asrs	r7, r7, #1
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	1846      	adds	r6, r0, r1
 80080c4:	4296      	cmp	r6, r2
 80080c6:	bfde      	ittt	le
 80080c8:	1b92      	suble	r2, r2, r6
 80080ca:	1870      	addle	r0, r6, r1
 80080cc:	1864      	addle	r4, r4, r1
 80080ce:	0052      	lsls	r2, r2, #1
 80080d0:	3d01      	subs	r5, #1
 80080d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80080d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80080da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080de:	d1f0      	bne.n	80080c2 <__ieee754_sqrt+0x8e>
 80080e0:	4629      	mov	r1, r5
 80080e2:	f04f 0e20 	mov.w	lr, #32
 80080e6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80080ea:	4282      	cmp	r2, r0
 80080ec:	eb06 0c05 	add.w	ip, r6, r5
 80080f0:	dc02      	bgt.n	80080f8 <__ieee754_sqrt+0xc4>
 80080f2:	d113      	bne.n	800811c <__ieee754_sqrt+0xe8>
 80080f4:	459c      	cmp	ip, r3
 80080f6:	d811      	bhi.n	800811c <__ieee754_sqrt+0xe8>
 80080f8:	f1bc 0f00 	cmp.w	ip, #0
 80080fc:	eb0c 0506 	add.w	r5, ip, r6
 8008100:	da43      	bge.n	800818a <__ieee754_sqrt+0x156>
 8008102:	2d00      	cmp	r5, #0
 8008104:	db41      	blt.n	800818a <__ieee754_sqrt+0x156>
 8008106:	f100 0801 	add.w	r8, r0, #1
 800810a:	1a12      	subs	r2, r2, r0
 800810c:	4640      	mov	r0, r8
 800810e:	459c      	cmp	ip, r3
 8008110:	bf88      	it	hi
 8008112:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008116:	eba3 030c 	sub.w	r3, r3, ip
 800811a:	4431      	add	r1, r6
 800811c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008120:	f1be 0e01 	subs.w	lr, lr, #1
 8008124:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008128:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800812c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008130:	d1db      	bne.n	80080ea <__ieee754_sqrt+0xb6>
 8008132:	4313      	orrs	r3, r2
 8008134:	d006      	beq.n	8008144 <__ieee754_sqrt+0x110>
 8008136:	1c48      	adds	r0, r1, #1
 8008138:	bf0b      	itete	eq
 800813a:	4671      	moveq	r1, lr
 800813c:	3101      	addne	r1, #1
 800813e:	3401      	addeq	r4, #1
 8008140:	f021 0101 	bicne.w	r1, r1, #1
 8008144:	1063      	asrs	r3, r4, #1
 8008146:	0849      	lsrs	r1, r1, #1
 8008148:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800814c:	07e2      	lsls	r2, r4, #31
 800814e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008152:	bf48      	it	mi
 8008154:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008158:	460e      	mov	r6, r1
 800815a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800815e:	e782      	b.n	8008066 <__ieee754_sqrt+0x32>
 8008160:	0ada      	lsrs	r2, r3, #11
 8008162:	3815      	subs	r0, #21
 8008164:	055b      	lsls	r3, r3, #21
 8008166:	2a00      	cmp	r2, #0
 8008168:	d0fa      	beq.n	8008160 <__ieee754_sqrt+0x12c>
 800816a:	02d5      	lsls	r5, r2, #11
 800816c:	d50a      	bpl.n	8008184 <__ieee754_sqrt+0x150>
 800816e:	f1c1 0420 	rsb	r4, r1, #32
 8008172:	fa23 f404 	lsr.w	r4, r3, r4
 8008176:	1e4d      	subs	r5, r1, #1
 8008178:	408b      	lsls	r3, r1
 800817a:	4322      	orrs	r2, r4
 800817c:	1b41      	subs	r1, r0, r5
 800817e:	e789      	b.n	8008094 <__ieee754_sqrt+0x60>
 8008180:	4608      	mov	r0, r1
 8008182:	e7f0      	b.n	8008166 <__ieee754_sqrt+0x132>
 8008184:	0052      	lsls	r2, r2, #1
 8008186:	3101      	adds	r1, #1
 8008188:	e7ef      	b.n	800816a <__ieee754_sqrt+0x136>
 800818a:	4680      	mov	r8, r0
 800818c:	e7bd      	b.n	800810a <__ieee754_sqrt+0xd6>
 800818e:	bf00      	nop
 8008190:	7ff00000 	.word	0x7ff00000

08008194 <__ieee754_rem_pio2f>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	4aa0      	ldr	r2, [pc, #640]	; (800841c <__ieee754_rem_pio2f+0x288>)
 800819a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800819e:	4296      	cmp	r6, r2
 80081a0:	460c      	mov	r4, r1
 80081a2:	4682      	mov	sl, r0
 80081a4:	b087      	sub	sp, #28
 80081a6:	dc04      	bgt.n	80081b2 <__ieee754_rem_pio2f+0x1e>
 80081a8:	2300      	movs	r3, #0
 80081aa:	6008      	str	r0, [r1, #0]
 80081ac:	604b      	str	r3, [r1, #4]
 80081ae:	2500      	movs	r5, #0
 80081b0:	e01a      	b.n	80081e8 <__ieee754_rem_pio2f+0x54>
 80081b2:	4a9b      	ldr	r2, [pc, #620]	; (8008420 <__ieee754_rem_pio2f+0x28c>)
 80081b4:	4296      	cmp	r6, r2
 80081b6:	dc4b      	bgt.n	8008250 <__ieee754_rem_pio2f+0xbc>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	499a      	ldr	r1, [pc, #616]	; (8008424 <__ieee754_rem_pio2f+0x290>)
 80081bc:	4f9a      	ldr	r7, [pc, #616]	; (8008428 <__ieee754_rem_pio2f+0x294>)
 80081be:	f026 060f 	bic.w	r6, r6, #15
 80081c2:	dd23      	ble.n	800820c <__ieee754_rem_pio2f+0x78>
 80081c4:	f7f8 fcd4 	bl	8000b70 <__aeabi_fsub>
 80081c8:	42be      	cmp	r6, r7
 80081ca:	4605      	mov	r5, r0
 80081cc:	d010      	beq.n	80081f0 <__ieee754_rem_pio2f+0x5c>
 80081ce:	4997      	ldr	r1, [pc, #604]	; (800842c <__ieee754_rem_pio2f+0x298>)
 80081d0:	f7f8 fcce 	bl	8000b70 <__aeabi_fsub>
 80081d4:	4601      	mov	r1, r0
 80081d6:	6020      	str	r0, [r4, #0]
 80081d8:	4628      	mov	r0, r5
 80081da:	f7f8 fcc9 	bl	8000b70 <__aeabi_fsub>
 80081de:	4993      	ldr	r1, [pc, #588]	; (800842c <__ieee754_rem_pio2f+0x298>)
 80081e0:	f7f8 fcc6 	bl	8000b70 <__aeabi_fsub>
 80081e4:	2501      	movs	r5, #1
 80081e6:	6060      	str	r0, [r4, #4]
 80081e8:	4628      	mov	r0, r5
 80081ea:	b007      	add	sp, #28
 80081ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f0:	498f      	ldr	r1, [pc, #572]	; (8008430 <__ieee754_rem_pio2f+0x29c>)
 80081f2:	f7f8 fcbd 	bl	8000b70 <__aeabi_fsub>
 80081f6:	498f      	ldr	r1, [pc, #572]	; (8008434 <__ieee754_rem_pio2f+0x2a0>)
 80081f8:	4605      	mov	r5, r0
 80081fa:	f7f8 fcb9 	bl	8000b70 <__aeabi_fsub>
 80081fe:	4601      	mov	r1, r0
 8008200:	6020      	str	r0, [r4, #0]
 8008202:	4628      	mov	r0, r5
 8008204:	f7f8 fcb4 	bl	8000b70 <__aeabi_fsub>
 8008208:	498a      	ldr	r1, [pc, #552]	; (8008434 <__ieee754_rem_pio2f+0x2a0>)
 800820a:	e7e9      	b.n	80081e0 <__ieee754_rem_pio2f+0x4c>
 800820c:	f7f8 fcb2 	bl	8000b74 <__addsf3>
 8008210:	42be      	cmp	r6, r7
 8008212:	4605      	mov	r5, r0
 8008214:	d00e      	beq.n	8008234 <__ieee754_rem_pio2f+0xa0>
 8008216:	4985      	ldr	r1, [pc, #532]	; (800842c <__ieee754_rem_pio2f+0x298>)
 8008218:	f7f8 fcac 	bl	8000b74 <__addsf3>
 800821c:	4601      	mov	r1, r0
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	4628      	mov	r0, r5
 8008222:	f7f8 fca5 	bl	8000b70 <__aeabi_fsub>
 8008226:	4981      	ldr	r1, [pc, #516]	; (800842c <__ieee754_rem_pio2f+0x298>)
 8008228:	f7f8 fca4 	bl	8000b74 <__addsf3>
 800822c:	f04f 35ff 	mov.w	r5, #4294967295
 8008230:	6060      	str	r0, [r4, #4]
 8008232:	e7d9      	b.n	80081e8 <__ieee754_rem_pio2f+0x54>
 8008234:	497e      	ldr	r1, [pc, #504]	; (8008430 <__ieee754_rem_pio2f+0x29c>)
 8008236:	f7f8 fc9d 	bl	8000b74 <__addsf3>
 800823a:	497e      	ldr	r1, [pc, #504]	; (8008434 <__ieee754_rem_pio2f+0x2a0>)
 800823c:	4605      	mov	r5, r0
 800823e:	f7f8 fc99 	bl	8000b74 <__addsf3>
 8008242:	4601      	mov	r1, r0
 8008244:	6020      	str	r0, [r4, #0]
 8008246:	4628      	mov	r0, r5
 8008248:	f7f8 fc92 	bl	8000b70 <__aeabi_fsub>
 800824c:	4979      	ldr	r1, [pc, #484]	; (8008434 <__ieee754_rem_pio2f+0x2a0>)
 800824e:	e7eb      	b.n	8008228 <__ieee754_rem_pio2f+0x94>
 8008250:	4a79      	ldr	r2, [pc, #484]	; (8008438 <__ieee754_rem_pio2f+0x2a4>)
 8008252:	4296      	cmp	r6, r2
 8008254:	f300 8091 	bgt.w	800837a <__ieee754_rem_pio2f+0x1e6>
 8008258:	f000 fd90 	bl	8008d7c <fabsf>
 800825c:	4977      	ldr	r1, [pc, #476]	; (800843c <__ieee754_rem_pio2f+0x2a8>)
 800825e:	4607      	mov	r7, r0
 8008260:	f7f8 fd90 	bl	8000d84 <__aeabi_fmul>
 8008264:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008268:	f7f8 fc84 	bl	8000b74 <__addsf3>
 800826c:	f7f8 ff50 	bl	8001110 <__aeabi_f2iz>
 8008270:	4605      	mov	r5, r0
 8008272:	f7f8 fd33 	bl	8000cdc <__aeabi_i2f>
 8008276:	496b      	ldr	r1, [pc, #428]	; (8008424 <__ieee754_rem_pio2f+0x290>)
 8008278:	4681      	mov	r9, r0
 800827a:	f7f8 fd83 	bl	8000d84 <__aeabi_fmul>
 800827e:	4601      	mov	r1, r0
 8008280:	4638      	mov	r0, r7
 8008282:	f7f8 fc75 	bl	8000b70 <__aeabi_fsub>
 8008286:	4969      	ldr	r1, [pc, #420]	; (800842c <__ieee754_rem_pio2f+0x298>)
 8008288:	4680      	mov	r8, r0
 800828a:	4648      	mov	r0, r9
 800828c:	f7f8 fd7a 	bl	8000d84 <__aeabi_fmul>
 8008290:	2d1f      	cmp	r5, #31
 8008292:	4607      	mov	r7, r0
 8008294:	dc0c      	bgt.n	80082b0 <__ieee754_rem_pio2f+0x11c>
 8008296:	4a6a      	ldr	r2, [pc, #424]	; (8008440 <__ieee754_rem_pio2f+0x2ac>)
 8008298:	1e69      	subs	r1, r5, #1
 800829a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800829e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <__ieee754_rem_pio2f+0x11c>
 80082a6:	4639      	mov	r1, r7
 80082a8:	4640      	mov	r0, r8
 80082aa:	f7f8 fc61 	bl	8000b70 <__aeabi_fsub>
 80082ae:	e00b      	b.n	80082c8 <__ieee754_rem_pio2f+0x134>
 80082b0:	4639      	mov	r1, r7
 80082b2:	4640      	mov	r0, r8
 80082b4:	f7f8 fc5c 	bl	8000b70 <__aeabi_fsub>
 80082b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80082bc:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80082c0:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80082c4:	2e08      	cmp	r6, #8
 80082c6:	dc01      	bgt.n	80082cc <__ieee754_rem_pio2f+0x138>
 80082c8:	6020      	str	r0, [r4, #0]
 80082ca:	e026      	b.n	800831a <__ieee754_rem_pio2f+0x186>
 80082cc:	4958      	ldr	r1, [pc, #352]	; (8008430 <__ieee754_rem_pio2f+0x29c>)
 80082ce:	4648      	mov	r0, r9
 80082d0:	f7f8 fd58 	bl	8000d84 <__aeabi_fmul>
 80082d4:	4607      	mov	r7, r0
 80082d6:	4601      	mov	r1, r0
 80082d8:	4640      	mov	r0, r8
 80082da:	f7f8 fc49 	bl	8000b70 <__aeabi_fsub>
 80082de:	4601      	mov	r1, r0
 80082e0:	4606      	mov	r6, r0
 80082e2:	4640      	mov	r0, r8
 80082e4:	f7f8 fc44 	bl	8000b70 <__aeabi_fsub>
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 fc41 	bl	8000b70 <__aeabi_fsub>
 80082ee:	4607      	mov	r7, r0
 80082f0:	4950      	ldr	r1, [pc, #320]	; (8008434 <__ieee754_rem_pio2f+0x2a0>)
 80082f2:	4648      	mov	r0, r9
 80082f4:	f7f8 fd46 	bl	8000d84 <__aeabi_fmul>
 80082f8:	4639      	mov	r1, r7
 80082fa:	f7f8 fc39 	bl	8000b70 <__aeabi_fsub>
 80082fe:	4601      	mov	r1, r0
 8008300:	4607      	mov	r7, r0
 8008302:	4630      	mov	r0, r6
 8008304:	f7f8 fc34 	bl	8000b70 <__aeabi_fsub>
 8008308:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800830c:	ebab 0b03 	sub.w	fp, fp, r3
 8008310:	f1bb 0f19 	cmp.w	fp, #25
 8008314:	dc16      	bgt.n	8008344 <__ieee754_rem_pio2f+0x1b0>
 8008316:	46b0      	mov	r8, r6
 8008318:	6020      	str	r0, [r4, #0]
 800831a:	6826      	ldr	r6, [r4, #0]
 800831c:	4640      	mov	r0, r8
 800831e:	4631      	mov	r1, r6
 8008320:	f7f8 fc26 	bl	8000b70 <__aeabi_fsub>
 8008324:	4639      	mov	r1, r7
 8008326:	f7f8 fc23 	bl	8000b70 <__aeabi_fsub>
 800832a:	f1ba 0f00 	cmp.w	sl, #0
 800832e:	6060      	str	r0, [r4, #4]
 8008330:	f6bf af5a 	bge.w	80081e8 <__ieee754_rem_pio2f+0x54>
 8008334:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008338:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800833c:	6026      	str	r6, [r4, #0]
 800833e:	6060      	str	r0, [r4, #4]
 8008340:	426d      	negs	r5, r5
 8008342:	e751      	b.n	80081e8 <__ieee754_rem_pio2f+0x54>
 8008344:	493f      	ldr	r1, [pc, #252]	; (8008444 <__ieee754_rem_pio2f+0x2b0>)
 8008346:	4648      	mov	r0, r9
 8008348:	f7f8 fd1c 	bl	8000d84 <__aeabi_fmul>
 800834c:	4607      	mov	r7, r0
 800834e:	4601      	mov	r1, r0
 8008350:	4630      	mov	r0, r6
 8008352:	f7f8 fc0d 	bl	8000b70 <__aeabi_fsub>
 8008356:	4601      	mov	r1, r0
 8008358:	4680      	mov	r8, r0
 800835a:	4630      	mov	r0, r6
 800835c:	f7f8 fc08 	bl	8000b70 <__aeabi_fsub>
 8008360:	4639      	mov	r1, r7
 8008362:	f7f8 fc05 	bl	8000b70 <__aeabi_fsub>
 8008366:	4606      	mov	r6, r0
 8008368:	4937      	ldr	r1, [pc, #220]	; (8008448 <__ieee754_rem_pio2f+0x2b4>)
 800836a:	4648      	mov	r0, r9
 800836c:	f7f8 fd0a 	bl	8000d84 <__aeabi_fmul>
 8008370:	4631      	mov	r1, r6
 8008372:	f7f8 fbfd 	bl	8000b70 <__aeabi_fsub>
 8008376:	4607      	mov	r7, r0
 8008378:	e795      	b.n	80082a6 <__ieee754_rem_pio2f+0x112>
 800837a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800837e:	db05      	blt.n	800838c <__ieee754_rem_pio2f+0x1f8>
 8008380:	4601      	mov	r1, r0
 8008382:	f7f8 fbf5 	bl	8000b70 <__aeabi_fsub>
 8008386:	6060      	str	r0, [r4, #4]
 8008388:	6020      	str	r0, [r4, #0]
 800838a:	e710      	b.n	80081ae <__ieee754_rem_pio2f+0x1a>
 800838c:	15f7      	asrs	r7, r6, #23
 800838e:	3f86      	subs	r7, #134	; 0x86
 8008390:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8008394:	4630      	mov	r0, r6
 8008396:	f7f8 febb 	bl	8001110 <__aeabi_f2iz>
 800839a:	f7f8 fc9f 	bl	8000cdc <__aeabi_i2f>
 800839e:	4601      	mov	r1, r0
 80083a0:	9003      	str	r0, [sp, #12]
 80083a2:	4630      	mov	r0, r6
 80083a4:	f7f8 fbe4 	bl	8000b70 <__aeabi_fsub>
 80083a8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80083ac:	f7f8 fcea 	bl	8000d84 <__aeabi_fmul>
 80083b0:	4606      	mov	r6, r0
 80083b2:	f7f8 fead 	bl	8001110 <__aeabi_f2iz>
 80083b6:	f7f8 fc91 	bl	8000cdc <__aeabi_i2f>
 80083ba:	4601      	mov	r1, r0
 80083bc:	9004      	str	r0, [sp, #16]
 80083be:	4605      	mov	r5, r0
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7f8 fbd5 	bl	8000b70 <__aeabi_fsub>
 80083c6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80083ca:	f7f8 fcdb 	bl	8000d84 <__aeabi_fmul>
 80083ce:	2100      	movs	r1, #0
 80083d0:	9005      	str	r0, [sp, #20]
 80083d2:	f7f8 fe6b 	bl	80010ac <__aeabi_fcmpeq>
 80083d6:	b1f0      	cbz	r0, 8008416 <__ieee754_rem_pio2f+0x282>
 80083d8:	2100      	movs	r1, #0
 80083da:	4628      	mov	r0, r5
 80083dc:	f7f8 fe66 	bl	80010ac <__aeabi_fcmpeq>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	bf14      	ite	ne
 80083e4:	2301      	movne	r3, #1
 80083e6:	2302      	moveq	r3, #2
 80083e8:	4a18      	ldr	r2, [pc, #96]	; (800844c <__ieee754_rem_pio2f+0x2b8>)
 80083ea:	4621      	mov	r1, r4
 80083ec:	9201      	str	r2, [sp, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	a803      	add	r0, sp, #12
 80083f2:	9200      	str	r2, [sp, #0]
 80083f4:	463a      	mov	r2, r7
 80083f6:	f000 f82b 	bl	8008450 <__kernel_rem_pio2f>
 80083fa:	f1ba 0f00 	cmp.w	sl, #0
 80083fe:	4605      	mov	r5, r0
 8008400:	f6bf aef2 	bge.w	80081e8 <__ieee754_rem_pio2f+0x54>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008412:	6063      	str	r3, [r4, #4]
 8008414:	e794      	b.n	8008340 <__ieee754_rem_pio2f+0x1ac>
 8008416:	2303      	movs	r3, #3
 8008418:	e7e6      	b.n	80083e8 <__ieee754_rem_pio2f+0x254>
 800841a:	bf00      	nop
 800841c:	3f490fd8 	.word	0x3f490fd8
 8008420:	4016cbe3 	.word	0x4016cbe3
 8008424:	3fc90f80 	.word	0x3fc90f80
 8008428:	3fc90fd0 	.word	0x3fc90fd0
 800842c:	37354443 	.word	0x37354443
 8008430:	37354400 	.word	0x37354400
 8008434:	2e85a308 	.word	0x2e85a308
 8008438:	43490f80 	.word	0x43490f80
 800843c:	3f22f984 	.word	0x3f22f984
 8008440:	0800bdc0 	.word	0x0800bdc0
 8008444:	2e85a300 	.word	0x2e85a300
 8008448:	248d3132 	.word	0x248d3132
 800844c:	0800be40 	.word	0x0800be40

08008450 <__kernel_rem_pio2f>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	b0db      	sub	sp, #364	; 0x16c
 8008456:	9202      	str	r2, [sp, #8]
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800845c:	4bb2      	ldr	r3, [pc, #712]	; (8008728 <__kernel_rem_pio2f+0x2d8>)
 800845e:	9005      	str	r0, [sp, #20]
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	9100      	str	r1, [sp, #0]
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	9b04      	ldr	r3, [sp, #16]
 800846a:	3b01      	subs	r3, #1
 800846c:	9303      	str	r3, [sp, #12]
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	1d1a      	adds	r2, r3, #4
 8008472:	f2c0 809b 	blt.w	80085ac <__kernel_rem_pio2f+0x15c>
 8008476:	1edc      	subs	r4, r3, #3
 8008478:	bf48      	it	mi
 800847a:	1d1c      	addmi	r4, r3, #4
 800847c:	10e4      	asrs	r4, r4, #3
 800847e:	2500      	movs	r5, #0
 8008480:	f04f 0b00 	mov.w	fp, #0
 8008484:	1c67      	adds	r7, r4, #1
 8008486:	00fb      	lsls	r3, r7, #3
 8008488:	9306      	str	r3, [sp, #24]
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	9a03      	ldr	r2, [sp, #12]
 800848e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	eba4 0802 	sub.w	r8, r4, r2
 8008498:	eb03 0902 	add.w	r9, r3, r2
 800849c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800849e:	ae1e      	add	r6, sp, #120	; 0x78
 80084a0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80084a4:	454d      	cmp	r5, r9
 80084a6:	f340 8083 	ble.w	80085b0 <__kernel_rem_pio2f+0x160>
 80084aa:	9a04      	ldr	r2, [sp, #16]
 80084ac:	ab1e      	add	r3, sp, #120	; 0x78
 80084ae:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80084b2:	f04f 0900 	mov.w	r9, #0
 80084b6:	2300      	movs	r3, #0
 80084b8:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 80084bc:	9a01      	ldr	r2, [sp, #4]
 80084be:	4591      	cmp	r9, r2
 80084c0:	f340 809e 	ble.w	8008600 <__kernel_rem_pio2f+0x1b0>
 80084c4:	4613      	mov	r3, r2
 80084c6:	aa0a      	add	r2, sp, #40	; 0x28
 80084c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084cc:	9308      	str	r3, [sp, #32]
 80084ce:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80084d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	ac0a      	add	r4, sp, #40	; 0x28
 80084dc:	4626      	mov	r6, r4
 80084de:	46c3      	mov	fp, r8
 80084e0:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80084e4:	ab5a      	add	r3, sp, #360	; 0x168
 80084e6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80084ea:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80084ee:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80084f2:	f1bb 0f00 	cmp.w	fp, #0
 80084f6:	f300 8088 	bgt.w	800860a <__kernel_rem_pio2f+0x1ba>
 80084fa:	4639      	mov	r1, r7
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 fc83 	bl	8008e08 <scalbnf>
 8008502:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8008506:	4605      	mov	r5, r0
 8008508:	f7f8 fc3c 	bl	8000d84 <__aeabi_fmul>
 800850c:	f000 fc3a 	bl	8008d84 <floorf>
 8008510:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008514:	f7f8 fc36 	bl	8000d84 <__aeabi_fmul>
 8008518:	4601      	mov	r1, r0
 800851a:	4628      	mov	r0, r5
 800851c:	f7f8 fb28 	bl	8000b70 <__aeabi_fsub>
 8008520:	4605      	mov	r5, r0
 8008522:	f7f8 fdf5 	bl	8001110 <__aeabi_f2iz>
 8008526:	4606      	mov	r6, r0
 8008528:	f7f8 fbd8 	bl	8000cdc <__aeabi_i2f>
 800852c:	4601      	mov	r1, r0
 800852e:	4628      	mov	r0, r5
 8008530:	f7f8 fb1e 	bl	8000b70 <__aeabi_fsub>
 8008534:	2f00      	cmp	r7, #0
 8008536:	4681      	mov	r9, r0
 8008538:	f340 8086 	ble.w	8008648 <__kernel_rem_pio2f+0x1f8>
 800853c:	f108 32ff 	add.w	r2, r8, #4294967295
 8008540:	ab0a      	add	r3, sp, #40	; 0x28
 8008542:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008546:	f1c7 0108 	rsb	r1, r7, #8
 800854a:	fa45 f301 	asr.w	r3, r5, r1
 800854e:	441e      	add	r6, r3
 8008550:	408b      	lsls	r3, r1
 8008552:	1aed      	subs	r5, r5, r3
 8008554:	f1c7 0007 	rsb	r0, r7, #7
 8008558:	ab0a      	add	r3, sp, #40	; 0x28
 800855a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800855e:	4105      	asrs	r5, r0
 8008560:	2d00      	cmp	r5, #0
 8008562:	dd7f      	ble.n	8008664 <__kernel_rem_pio2f+0x214>
 8008564:	2200      	movs	r2, #0
 8008566:	4692      	mov	sl, r2
 8008568:	3601      	adds	r6, #1
 800856a:	4590      	cmp	r8, r2
 800856c:	f300 80b0 	bgt.w	80086d0 <__kernel_rem_pio2f+0x280>
 8008570:	2f00      	cmp	r7, #0
 8008572:	dd05      	ble.n	8008580 <__kernel_rem_pio2f+0x130>
 8008574:	2f01      	cmp	r7, #1
 8008576:	f000 80bd 	beq.w	80086f4 <__kernel_rem_pio2f+0x2a4>
 800857a:	2f02      	cmp	r7, #2
 800857c:	f000 80c5 	beq.w	800870a <__kernel_rem_pio2f+0x2ba>
 8008580:	2d02      	cmp	r5, #2
 8008582:	d16f      	bne.n	8008664 <__kernel_rem_pio2f+0x214>
 8008584:	4649      	mov	r1, r9
 8008586:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800858a:	f7f8 faf1 	bl	8000b70 <__aeabi_fsub>
 800858e:	4681      	mov	r9, r0
 8008590:	f1ba 0f00 	cmp.w	sl, #0
 8008594:	d066      	beq.n	8008664 <__kernel_rem_pio2f+0x214>
 8008596:	4639      	mov	r1, r7
 8008598:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800859c:	f000 fc34 	bl	8008e08 <scalbnf>
 80085a0:	4601      	mov	r1, r0
 80085a2:	4648      	mov	r0, r9
 80085a4:	f7f8 fae4 	bl	8000b70 <__aeabi_fsub>
 80085a8:	4681      	mov	r9, r0
 80085aa:	e05b      	b.n	8008664 <__kernel_rem_pio2f+0x214>
 80085ac:	2400      	movs	r4, #0
 80085ae:	e766      	b.n	800847e <__kernel_rem_pio2f+0x2e>
 80085b0:	eb18 0f05 	cmn.w	r8, r5
 80085b4:	d407      	bmi.n	80085c6 <__kernel_rem_pio2f+0x176>
 80085b6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80085ba:	f7f8 fb8f 	bl	8000cdc <__aeabi_i2f>
 80085be:	f846 0b04 	str.w	r0, [r6], #4
 80085c2:	3501      	adds	r5, #1
 80085c4:	e76e      	b.n	80084a4 <__kernel_rem_pio2f+0x54>
 80085c6:	4658      	mov	r0, fp
 80085c8:	e7f9      	b.n	80085be <__kernel_rem_pio2f+0x16e>
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	f8da 1000 	ldr.w	r1, [sl]
 80085d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80085d6:	f7f8 fbd5 	bl	8000d84 <__aeabi_fmul>
 80085da:	4601      	mov	r1, r0
 80085dc:	4630      	mov	r0, r6
 80085de:	f7f8 fac9 	bl	8000b74 <__addsf3>
 80085e2:	4606      	mov	r6, r0
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	f108 0801 	add.w	r8, r8, #1
 80085ea:	9a03      	ldr	r2, [sp, #12]
 80085ec:	f1aa 0a04 	sub.w	sl, sl, #4
 80085f0:	4590      	cmp	r8, r2
 80085f2:	ddea      	ble.n	80085ca <__kernel_rem_pio2f+0x17a>
 80085f4:	f84b 6b04 	str.w	r6, [fp], #4
 80085f8:	f109 0901 	add.w	r9, r9, #1
 80085fc:	3504      	adds	r5, #4
 80085fe:	e75d      	b.n	80084bc <__kernel_rem_pio2f+0x6c>
 8008600:	46aa      	mov	sl, r5
 8008602:	461e      	mov	r6, r3
 8008604:	f04f 0800 	mov.w	r8, #0
 8008608:	e7ef      	b.n	80085ea <__kernel_rem_pio2f+0x19a>
 800860a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800860e:	4628      	mov	r0, r5
 8008610:	f7f8 fbb8 	bl	8000d84 <__aeabi_fmul>
 8008614:	f7f8 fd7c 	bl	8001110 <__aeabi_f2iz>
 8008618:	f7f8 fb60 	bl	8000cdc <__aeabi_i2f>
 800861c:	4649      	mov	r1, r9
 800861e:	9009      	str	r0, [sp, #36]	; 0x24
 8008620:	f7f8 fbb0 	bl	8000d84 <__aeabi_fmul>
 8008624:	4601      	mov	r1, r0
 8008626:	4628      	mov	r0, r5
 8008628:	f7f8 faa2 	bl	8000b70 <__aeabi_fsub>
 800862c:	f7f8 fd70 	bl	8001110 <__aeabi_f2iz>
 8008630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008636:	f846 0b04 	str.w	r0, [r6], #4
 800863a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800863e:	4618      	mov	r0, r3
 8008640:	f7f8 fa98 	bl	8000b74 <__addsf3>
 8008644:	4605      	mov	r5, r0
 8008646:	e754      	b.n	80084f2 <__kernel_rem_pio2f+0xa2>
 8008648:	d106      	bne.n	8008658 <__kernel_rem_pio2f+0x208>
 800864a:	f108 33ff 	add.w	r3, r8, #4294967295
 800864e:	aa0a      	add	r2, sp, #40	; 0x28
 8008650:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8008654:	11ed      	asrs	r5, r5, #7
 8008656:	e783      	b.n	8008560 <__kernel_rem_pio2f+0x110>
 8008658:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800865c:	f7f8 fd44 	bl	80010e8 <__aeabi_fcmpge>
 8008660:	4605      	mov	r5, r0
 8008662:	bb98      	cbnz	r0, 80086cc <__kernel_rem_pio2f+0x27c>
 8008664:	2100      	movs	r1, #0
 8008666:	4648      	mov	r0, r9
 8008668:	f7f8 fd20 	bl	80010ac <__aeabi_fcmpeq>
 800866c:	2800      	cmp	r0, #0
 800866e:	f000 8098 	beq.w	80087a2 <__kernel_rem_pio2f+0x352>
 8008672:	f108 34ff 	add.w	r4, r8, #4294967295
 8008676:	4623      	mov	r3, r4
 8008678:	2200      	movs	r2, #0
 800867a:	9901      	ldr	r1, [sp, #4]
 800867c:	428b      	cmp	r3, r1
 800867e:	da4c      	bge.n	800871a <__kernel_rem_pio2f+0x2ca>
 8008680:	2a00      	cmp	r2, #0
 8008682:	d07a      	beq.n	800877a <__kernel_rem_pio2f+0x32a>
 8008684:	ab0a      	add	r3, sp, #40	; 0x28
 8008686:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800868a:	3f08      	subs	r7, #8
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8086 	beq.w	800879e <__kernel_rem_pio2f+0x34e>
 8008692:	4639      	mov	r1, r7
 8008694:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008698:	f000 fbb6 	bl	8008e08 <scalbnf>
 800869c:	46a2      	mov	sl, r4
 800869e:	4681      	mov	r9, r0
 80086a0:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 80086a4:	af46      	add	r7, sp, #280	; 0x118
 80086a6:	f1ba 0f00 	cmp.w	sl, #0
 80086aa:	f280 80af 	bge.w	800880c <__kernel_rem_pio2f+0x3bc>
 80086ae:	4627      	mov	r7, r4
 80086b0:	2200      	movs	r2, #0
 80086b2:	2f00      	cmp	r7, #0
 80086b4:	f2c0 80d9 	blt.w	800886a <__kernel_rem_pio2f+0x41a>
 80086b8:	a946      	add	r1, sp, #280	; 0x118
 80086ba:	4690      	mov	r8, r2
 80086bc:	f04f 0a00 	mov.w	sl, #0
 80086c0:	4b1a      	ldr	r3, [pc, #104]	; (800872c <__kernel_rem_pio2f+0x2dc>)
 80086c2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80086c6:	eba4 0907 	sub.w	r9, r4, r7
 80086ca:	e0c2      	b.n	8008852 <__kernel_rem_pio2f+0x402>
 80086cc:	2502      	movs	r5, #2
 80086ce:	e749      	b.n	8008564 <__kernel_rem_pio2f+0x114>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	f1ba 0f00 	cmp.w	sl, #0
 80086d6:	d108      	bne.n	80086ea <__kernel_rem_pio2f+0x29a>
 80086d8:	b11b      	cbz	r3, 80086e2 <__kernel_rem_pio2f+0x292>
 80086da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	2301      	movs	r3, #1
 80086e2:	469a      	mov	sl, r3
 80086e4:	3201      	adds	r2, #1
 80086e6:	3404      	adds	r4, #4
 80086e8:	e73f      	b.n	800856a <__kernel_rem_pio2f+0x11a>
 80086ea:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	4653      	mov	r3, sl
 80086f2:	e7f6      	b.n	80086e2 <__kernel_rem_pio2f+0x292>
 80086f4:	f108 32ff 	add.w	r2, r8, #4294967295
 80086f8:	ab0a      	add	r3, sp, #40	; 0x28
 80086fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008702:	a90a      	add	r1, sp, #40	; 0x28
 8008704:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008708:	e73a      	b.n	8008580 <__kernel_rem_pio2f+0x130>
 800870a:	f108 32ff 	add.w	r2, r8, #4294967295
 800870e:	ab0a      	add	r3, sp, #40	; 0x28
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008718:	e7f3      	b.n	8008702 <__kernel_rem_pio2f+0x2b2>
 800871a:	a90a      	add	r1, sp, #40	; 0x28
 800871c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008720:	3b01      	subs	r3, #1
 8008722:	430a      	orrs	r2, r1
 8008724:	e7a9      	b.n	800867a <__kernel_rem_pio2f+0x22a>
 8008726:	bf00      	nop
 8008728:	0800c184 	.word	0x0800c184
 800872c:	0800c158 	.word	0x0800c158
 8008730:	3301      	adds	r3, #1
 8008732:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008736:	2900      	cmp	r1, #0
 8008738:	d0fa      	beq.n	8008730 <__kernel_rem_pio2f+0x2e0>
 800873a:	9a04      	ldr	r2, [sp, #16]
 800873c:	f108 0501 	add.w	r5, r8, #1
 8008740:	eb08 0402 	add.w	r4, r8, r2
 8008744:	aa1e      	add	r2, sp, #120	; 0x78
 8008746:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800874a:	4498      	add	r8, r3
 800874c:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8008750:	45a8      	cmp	r8, r5
 8008752:	f6ff aec2 	blt.w	80084da <__kernel_rem_pio2f+0x8a>
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	46a3      	mov	fp, r4
 800875a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800875e:	f7f8 fabd 	bl	8000cdc <__aeabi_i2f>
 8008762:	f04f 0a00 	mov.w	sl, #0
 8008766:	2600      	movs	r6, #0
 8008768:	6020      	str	r0, [r4, #0]
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	459a      	cmp	sl, r3
 800876e:	dd07      	ble.n	8008780 <__kernel_rem_pio2f+0x330>
 8008770:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8008774:	3404      	adds	r4, #4
 8008776:	3501      	adds	r5, #1
 8008778:	e7ea      	b.n	8008750 <__kernel_rem_pio2f+0x300>
 800877a:	2301      	movs	r3, #1
 800877c:	9a08      	ldr	r2, [sp, #32]
 800877e:	e7d8      	b.n	8008732 <__kernel_rem_pio2f+0x2e2>
 8008780:	9b05      	ldr	r3, [sp, #20]
 8008782:	f85b 0904 	ldr.w	r0, [fp], #-4
 8008786:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800878a:	f7f8 fafb 	bl	8000d84 <__aeabi_fmul>
 800878e:	4601      	mov	r1, r0
 8008790:	4630      	mov	r0, r6
 8008792:	f7f8 f9ef 	bl	8000b74 <__addsf3>
 8008796:	f10a 0a01 	add.w	sl, sl, #1
 800879a:	4606      	mov	r6, r0
 800879c:	e7e5      	b.n	800876a <__kernel_rem_pio2f+0x31a>
 800879e:	3c01      	subs	r4, #1
 80087a0:	e770      	b.n	8008684 <__kernel_rem_pio2f+0x234>
 80087a2:	9b06      	ldr	r3, [sp, #24]
 80087a4:	9a02      	ldr	r2, [sp, #8]
 80087a6:	4648      	mov	r0, r9
 80087a8:	1a99      	subs	r1, r3, r2
 80087aa:	f000 fb2d 	bl	8008e08 <scalbnf>
 80087ae:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80087b2:	4604      	mov	r4, r0
 80087b4:	f7f8 fc98 	bl	80010e8 <__aeabi_fcmpge>
 80087b8:	b300      	cbz	r0, 80087fc <__kernel_rem_pio2f+0x3ac>
 80087ba:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80087be:	4620      	mov	r0, r4
 80087c0:	f7f8 fae0 	bl	8000d84 <__aeabi_fmul>
 80087c4:	f7f8 fca4 	bl	8001110 <__aeabi_f2iz>
 80087c8:	f7f8 fa88 	bl	8000cdc <__aeabi_i2f>
 80087cc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80087d0:	4681      	mov	r9, r0
 80087d2:	f7f8 fad7 	bl	8000d84 <__aeabi_fmul>
 80087d6:	4601      	mov	r1, r0
 80087d8:	4620      	mov	r0, r4
 80087da:	f7f8 f9c9 	bl	8000b70 <__aeabi_fsub>
 80087de:	f7f8 fc97 	bl	8001110 <__aeabi_f2iz>
 80087e2:	ab0a      	add	r3, sp, #40	; 0x28
 80087e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80087e8:	4648      	mov	r0, r9
 80087ea:	f7f8 fc91 	bl	8001110 <__aeabi_f2iz>
 80087ee:	f108 0401 	add.w	r4, r8, #1
 80087f2:	ab0a      	add	r3, sp, #40	; 0x28
 80087f4:	3708      	adds	r7, #8
 80087f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80087fa:	e74a      	b.n	8008692 <__kernel_rem_pio2f+0x242>
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7f8 fc87 	bl	8001110 <__aeabi_f2iz>
 8008802:	ab0a      	add	r3, sp, #40	; 0x28
 8008804:	4644      	mov	r4, r8
 8008806:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800880a:	e742      	b.n	8008692 <__kernel_rem_pio2f+0x242>
 800880c:	ab0a      	add	r3, sp, #40	; 0x28
 800880e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008812:	f7f8 fa63 	bl	8000cdc <__aeabi_i2f>
 8008816:	4649      	mov	r1, r9
 8008818:	f7f8 fab4 	bl	8000d84 <__aeabi_fmul>
 800881c:	4641      	mov	r1, r8
 800881e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8008822:	4648      	mov	r0, r9
 8008824:	f7f8 faae 	bl	8000d84 <__aeabi_fmul>
 8008828:	f10a 3aff 	add.w	sl, sl, #4294967295
 800882c:	4681      	mov	r9, r0
 800882e:	e73a      	b.n	80086a6 <__kernel_rem_pio2f+0x256>
 8008830:	f853 0b04 	ldr.w	r0, [r3], #4
 8008834:	f85b 1b04 	ldr.w	r1, [fp], #4
 8008838:	9203      	str	r2, [sp, #12]
 800883a:	9302      	str	r3, [sp, #8]
 800883c:	f7f8 faa2 	bl	8000d84 <__aeabi_fmul>
 8008840:	4601      	mov	r1, r0
 8008842:	4640      	mov	r0, r8
 8008844:	f7f8 f996 	bl	8000b74 <__addsf3>
 8008848:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800884c:	4680      	mov	r8, r0
 800884e:	f10a 0a01 	add.w	sl, sl, #1
 8008852:	9901      	ldr	r1, [sp, #4]
 8008854:	458a      	cmp	sl, r1
 8008856:	dc01      	bgt.n	800885c <__kernel_rem_pio2f+0x40c>
 8008858:	45ca      	cmp	sl, r9
 800885a:	dde9      	ble.n	8008830 <__kernel_rem_pio2f+0x3e0>
 800885c:	ab5a      	add	r3, sp, #360	; 0x168
 800885e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8008862:	f849 8ca0 	str.w	r8, [r9, #-160]
 8008866:	3f01      	subs	r7, #1
 8008868:	e723      	b.n	80086b2 <__kernel_rem_pio2f+0x262>
 800886a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800886c:	2b02      	cmp	r3, #2
 800886e:	dc07      	bgt.n	8008880 <__kernel_rem_pio2f+0x430>
 8008870:	2b00      	cmp	r3, #0
 8008872:	dc4d      	bgt.n	8008910 <__kernel_rem_pio2f+0x4c0>
 8008874:	d02e      	beq.n	80088d4 <__kernel_rem_pio2f+0x484>
 8008876:	f006 0007 	and.w	r0, r6, #7
 800887a:	b05b      	add	sp, #364	; 0x16c
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008882:	2b03      	cmp	r3, #3
 8008884:	d1f7      	bne.n	8008876 <__kernel_rem_pio2f+0x426>
 8008886:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800888a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800888e:	46b8      	mov	r8, r7
 8008890:	46a2      	mov	sl, r4
 8008892:	f1ba 0f00 	cmp.w	sl, #0
 8008896:	dc48      	bgt.n	800892a <__kernel_rem_pio2f+0x4da>
 8008898:	46a1      	mov	r9, r4
 800889a:	f1b9 0f01 	cmp.w	r9, #1
 800889e:	dc5f      	bgt.n	8008960 <__kernel_rem_pio2f+0x510>
 80088a0:	2000      	movs	r0, #0
 80088a2:	2c01      	cmp	r4, #1
 80088a4:	dc75      	bgt.n	8008992 <__kernel_rem_pio2f+0x542>
 80088a6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80088a8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	d177      	bne.n	800899e <__kernel_rem_pio2f+0x54e>
 80088ae:	9900      	ldr	r1, [sp, #0]
 80088b0:	600a      	str	r2, [r1, #0]
 80088b2:	460a      	mov	r2, r1
 80088b4:	604b      	str	r3, [r1, #4]
 80088b6:	6090      	str	r0, [r2, #8]
 80088b8:	e7dd      	b.n	8008876 <__kernel_rem_pio2f+0x426>
 80088ba:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80088be:	f7f8 f959 	bl	8000b74 <__addsf3>
 80088c2:	3c01      	subs	r4, #1
 80088c4:	2c00      	cmp	r4, #0
 80088c6:	daf8      	bge.n	80088ba <__kernel_rem_pio2f+0x46a>
 80088c8:	b10d      	cbz	r5, 80088ce <__kernel_rem_pio2f+0x47e>
 80088ca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80088ce:	9b00      	ldr	r3, [sp, #0]
 80088d0:	6018      	str	r0, [r3, #0]
 80088d2:	e7d0      	b.n	8008876 <__kernel_rem_pio2f+0x426>
 80088d4:	2000      	movs	r0, #0
 80088d6:	af32      	add	r7, sp, #200	; 0xc8
 80088d8:	e7f4      	b.n	80088c4 <__kernel_rem_pio2f+0x474>
 80088da:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80088de:	f7f8 f949 	bl	8000b74 <__addsf3>
 80088e2:	3f01      	subs	r7, #1
 80088e4:	2f00      	cmp	r7, #0
 80088e6:	daf8      	bge.n	80088da <__kernel_rem_pio2f+0x48a>
 80088e8:	b1bd      	cbz	r5, 800891a <__kernel_rem_pio2f+0x4ca>
 80088ea:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80088ee:	9a00      	ldr	r2, [sp, #0]
 80088f0:	4601      	mov	r1, r0
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80088f6:	f7f8 f93b 	bl	8000b70 <__aeabi_fsub>
 80088fa:	2701      	movs	r7, #1
 80088fc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8008900:	42bc      	cmp	r4, r7
 8008902:	da0c      	bge.n	800891e <__kernel_rem_pio2f+0x4ce>
 8008904:	b10d      	cbz	r5, 800890a <__kernel_rem_pio2f+0x4ba>
 8008906:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	6058      	str	r0, [r3, #4]
 800890e:	e7b2      	b.n	8008876 <__kernel_rem_pio2f+0x426>
 8008910:	4627      	mov	r7, r4
 8008912:	2000      	movs	r0, #0
 8008914:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8008918:	e7e4      	b.n	80088e4 <__kernel_rem_pio2f+0x494>
 800891a:	4603      	mov	r3, r0
 800891c:	e7e7      	b.n	80088ee <__kernel_rem_pio2f+0x49e>
 800891e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8008922:	f7f8 f927 	bl	8000b74 <__addsf3>
 8008926:	3701      	adds	r7, #1
 8008928:	e7ea      	b.n	8008900 <__kernel_rem_pio2f+0x4b0>
 800892a:	f8d8 3000 	ldr.w	r3, [r8]
 800892e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008932:	4619      	mov	r1, r3
 8008934:	4610      	mov	r0, r2
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	f7f8 f91b 	bl	8000b74 <__addsf3>
 800893e:	9a01      	ldr	r2, [sp, #4]
 8008940:	4601      	mov	r1, r0
 8008942:	4681      	mov	r9, r0
 8008944:	4610      	mov	r0, r2
 8008946:	f7f8 f913 	bl	8000b70 <__aeabi_fsub>
 800894a:	9b02      	ldr	r3, [sp, #8]
 800894c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008950:	4619      	mov	r1, r3
 8008952:	f7f8 f90f 	bl	8000b74 <__addsf3>
 8008956:	f848 0904 	str.w	r0, [r8], #-4
 800895a:	f8c8 9000 	str.w	r9, [r8]
 800895e:	e798      	b.n	8008892 <__kernel_rem_pio2f+0x442>
 8008960:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8008964:	f8d7 a000 	ldr.w	sl, [r7]
 8008968:	4618      	mov	r0, r3
 800896a:	4651      	mov	r1, sl
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	f7f8 f901 	bl	8000b74 <__addsf3>
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	4601      	mov	r1, r0
 8008976:	4680      	mov	r8, r0
 8008978:	4618      	mov	r0, r3
 800897a:	f7f8 f8f9 	bl	8000b70 <__aeabi_fsub>
 800897e:	4651      	mov	r1, sl
 8008980:	f7f8 f8f8 	bl	8000b74 <__addsf3>
 8008984:	f847 0904 	str.w	r0, [r7], #-4
 8008988:	f109 39ff 	add.w	r9, r9, #4294967295
 800898c:	f8c7 8000 	str.w	r8, [r7]
 8008990:	e783      	b.n	800889a <__kernel_rem_pio2f+0x44a>
 8008992:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8008996:	f7f8 f8ed 	bl	8000b74 <__addsf3>
 800899a:	3c01      	subs	r4, #1
 800899c:	e781      	b.n	80088a2 <__kernel_rem_pio2f+0x452>
 800899e:	9900      	ldr	r1, [sp, #0]
 80089a0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80089a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089a8:	600a      	str	r2, [r1, #0]
 80089aa:	604b      	str	r3, [r1, #4]
 80089ac:	460a      	mov	r2, r1
 80089ae:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80089b2:	e780      	b.n	80088b6 <__kernel_rem_pio2f+0x466>

080089b4 <__kernel_tanf>:
 80089b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 80089bc:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 80089c0:	4604      	mov	r4, r0
 80089c2:	460e      	mov	r6, r1
 80089c4:	4690      	mov	r8, r2
 80089c6:	4607      	mov	r7, r0
 80089c8:	da1b      	bge.n	8008a02 <__kernel_tanf+0x4e>
 80089ca:	f7f8 fba1 	bl	8001110 <__aeabi_f2iz>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d12f      	bne.n	8008a32 <__kernel_tanf+0x7e>
 80089d2:	f108 0301 	add.w	r3, r8, #1
 80089d6:	ea53 030a 	orrs.w	r3, r3, sl
 80089da:	d10c      	bne.n	80089f6 <__kernel_tanf+0x42>
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 f9cd 	bl	8008d7c <fabsf>
 80089e2:	4601      	mov	r1, r0
 80089e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80089e8:	f7f8 fa80 	bl	8000eec <__aeabi_fdiv>
 80089ec:	4604      	mov	r4, r0
 80089ee:	4620      	mov	r0, r4
 80089f0:	b003      	add	sp, #12
 80089f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f6:	f1b8 0f01 	cmp.w	r8, #1
 80089fa:	d0f8      	beq.n	80089ee <__kernel_tanf+0x3a>
 80089fc:	4621      	mov	r1, r4
 80089fe:	4872      	ldr	r0, [pc, #456]	; (8008bc8 <__kernel_tanf+0x214>)
 8008a00:	e7f2      	b.n	80089e8 <__kernel_tanf+0x34>
 8008a02:	4b72      	ldr	r3, [pc, #456]	; (8008bcc <__kernel_tanf+0x218>)
 8008a04:	459a      	cmp	sl, r3
 8008a06:	db14      	blt.n	8008a32 <__kernel_tanf+0x7e>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	bfbe      	ittt	lt
 8008a0c:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 8008a10:	4604      	movlt	r4, r0
 8008a12:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 8008a16:	486e      	ldr	r0, [pc, #440]	; (8008bd0 <__kernel_tanf+0x21c>)
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7f8 f8a9 	bl	8000b70 <__aeabi_fsub>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4631      	mov	r1, r6
 8008a22:	486c      	ldr	r0, [pc, #432]	; (8008bd4 <__kernel_tanf+0x220>)
 8008a24:	f7f8 f8a4 	bl	8000b70 <__aeabi_fsub>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	f7f8 f8a3 	bl	8000b74 <__addsf3>
 8008a2e:	2600      	movs	r6, #0
 8008a30:	4604      	mov	r4, r0
 8008a32:	4621      	mov	r1, r4
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7f8 f9a5 	bl	8000d84 <__aeabi_fmul>
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4681      	mov	r9, r0
 8008a3e:	f7f8 f9a1 	bl	8000d84 <__aeabi_fmul>
 8008a42:	4649      	mov	r1, r9
 8008a44:	4605      	mov	r5, r0
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7f8 f99c 	bl	8000d84 <__aeabi_fmul>
 8008a4c:	4962      	ldr	r1, [pc, #392]	; (8008bd8 <__kernel_tanf+0x224>)
 8008a4e:	4683      	mov	fp, r0
 8008a50:	4628      	mov	r0, r5
 8008a52:	f7f8 f997 	bl	8000d84 <__aeabi_fmul>
 8008a56:	4961      	ldr	r1, [pc, #388]	; (8008bdc <__kernel_tanf+0x228>)
 8008a58:	f7f8 f88c 	bl	8000b74 <__addsf3>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f8 f991 	bl	8000d84 <__aeabi_fmul>
 8008a62:	495f      	ldr	r1, [pc, #380]	; (8008be0 <__kernel_tanf+0x22c>)
 8008a64:	f7f8 f886 	bl	8000b74 <__addsf3>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7f8 f98b 	bl	8000d84 <__aeabi_fmul>
 8008a6e:	495d      	ldr	r1, [pc, #372]	; (8008be4 <__kernel_tanf+0x230>)
 8008a70:	f7f8 f880 	bl	8000b74 <__addsf3>
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f8 f985 	bl	8000d84 <__aeabi_fmul>
 8008a7a:	495b      	ldr	r1, [pc, #364]	; (8008be8 <__kernel_tanf+0x234>)
 8008a7c:	f7f8 f87a 	bl	8000b74 <__addsf3>
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7f8 f97f 	bl	8000d84 <__aeabi_fmul>
 8008a86:	4959      	ldr	r1, [pc, #356]	; (8008bec <__kernel_tanf+0x238>)
 8008a88:	f7f8 f874 	bl	8000b74 <__addsf3>
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f8 f979 	bl	8000d84 <__aeabi_fmul>
 8008a92:	4957      	ldr	r1, [pc, #348]	; (8008bf0 <__kernel_tanf+0x23c>)
 8008a94:	9001      	str	r0, [sp, #4]
 8008a96:	4628      	mov	r0, r5
 8008a98:	f7f8 f974 	bl	8000d84 <__aeabi_fmul>
 8008a9c:	4955      	ldr	r1, [pc, #340]	; (8008bf4 <__kernel_tanf+0x240>)
 8008a9e:	f7f8 f869 	bl	8000b74 <__addsf3>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f8 f96e 	bl	8000d84 <__aeabi_fmul>
 8008aa8:	4953      	ldr	r1, [pc, #332]	; (8008bf8 <__kernel_tanf+0x244>)
 8008aaa:	f7f8 f863 	bl	8000b74 <__addsf3>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f8 f968 	bl	8000d84 <__aeabi_fmul>
 8008ab4:	4951      	ldr	r1, [pc, #324]	; (8008bfc <__kernel_tanf+0x248>)
 8008ab6:	f7f8 f85d 	bl	8000b74 <__addsf3>
 8008aba:	4629      	mov	r1, r5
 8008abc:	f7f8 f962 	bl	8000d84 <__aeabi_fmul>
 8008ac0:	494f      	ldr	r1, [pc, #316]	; (8008c00 <__kernel_tanf+0x24c>)
 8008ac2:	f7f8 f857 	bl	8000b74 <__addsf3>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f8 f95c 	bl	8000d84 <__aeabi_fmul>
 8008acc:	494d      	ldr	r1, [pc, #308]	; (8008c04 <__kernel_tanf+0x250>)
 8008ace:	f7f8 f851 	bl	8000b74 <__addsf3>
 8008ad2:	9b01      	ldr	r3, [sp, #4]
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7f8 f84c 	bl	8000b74 <__addsf3>
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f8 f951 	bl	8000d84 <__aeabi_fmul>
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	f7f8 f846 	bl	8000b74 <__addsf3>
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f8 f94b 	bl	8000d84 <__aeabi_fmul>
 8008aee:	4631      	mov	r1, r6
 8008af0:	f7f8 f840 	bl	8000b74 <__addsf3>
 8008af4:	4605      	mov	r5, r0
 8008af6:	4944      	ldr	r1, [pc, #272]	; (8008c08 <__kernel_tanf+0x254>)
 8008af8:	4658      	mov	r0, fp
 8008afa:	f7f8 f943 	bl	8000d84 <__aeabi_fmul>
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f8 f838 	bl	8000b74 <__addsf3>
 8008b04:	4601      	mov	r1, r0
 8008b06:	4681      	mov	r9, r0
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7f8 f833 	bl	8000b74 <__addsf3>
 8008b0e:	4b2f      	ldr	r3, [pc, #188]	; (8008bcc <__kernel_tanf+0x218>)
 8008b10:	4605      	mov	r5, r0
 8008b12:	459a      	cmp	sl, r3
 8008b14:	db2b      	blt.n	8008b6e <__kernel_tanf+0x1ba>
 8008b16:	4640      	mov	r0, r8
 8008b18:	f7f8 f8e0 	bl	8000cdc <__aeabi_i2f>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4606      	mov	r6, r0
 8008b20:	4628      	mov	r0, r5
 8008b22:	f7f8 f92f 	bl	8000d84 <__aeabi_fmul>
 8008b26:	4631      	mov	r1, r6
 8008b28:	4680      	mov	r8, r0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f7f8 f822 	bl	8000b74 <__addsf3>
 8008b30:	4601      	mov	r1, r0
 8008b32:	4640      	mov	r0, r8
 8008b34:	f7f8 f9da 	bl	8000eec <__aeabi_fdiv>
 8008b38:	4649      	mov	r1, r9
 8008b3a:	f7f8 f819 	bl	8000b70 <__aeabi_fsub>
 8008b3e:	4601      	mov	r1, r0
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7f8 f815 	bl	8000b70 <__aeabi_fsub>
 8008b46:	4601      	mov	r1, r0
 8008b48:	f7f8 f814 	bl	8000b74 <__addsf3>
 8008b4c:	4601      	mov	r1, r0
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7f8 f80e 	bl	8000b70 <__aeabi_fsub>
 8008b54:	17bf      	asrs	r7, r7, #30
 8008b56:	f007 0702 	and.w	r7, r7, #2
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	f1c7 0001 	rsb	r0, r7, #1
 8008b60:	f7f8 f8bc 	bl	8000cdc <__aeabi_i2f>
 8008b64:	4601      	mov	r1, r0
 8008b66:	4620      	mov	r0, r4
 8008b68:	f7f8 f90c 	bl	8000d84 <__aeabi_fmul>
 8008b6c:	e73e      	b.n	80089ec <__kernel_tanf+0x38>
 8008b6e:	f1b8 0f01 	cmp.w	r8, #1
 8008b72:	d027      	beq.n	8008bc4 <__kernel_tanf+0x210>
 8008b74:	4e25      	ldr	r6, [pc, #148]	; (8008c0c <__kernel_tanf+0x258>)
 8008b76:	4601      	mov	r1, r0
 8008b78:	ea06 0800 	and.w	r8, r6, r0
 8008b7c:	4812      	ldr	r0, [pc, #72]	; (8008bc8 <__kernel_tanf+0x214>)
 8008b7e:	f7f8 f9b5 	bl	8000eec <__aeabi_fdiv>
 8008b82:	4621      	mov	r1, r4
 8008b84:	4006      	ands	r6, r0
 8008b86:	4607      	mov	r7, r0
 8008b88:	4640      	mov	r0, r8
 8008b8a:	f7f7 fff1 	bl	8000b70 <__aeabi_fsub>
 8008b8e:	4601      	mov	r1, r0
 8008b90:	4648      	mov	r0, r9
 8008b92:	f7f7 ffed 	bl	8000b70 <__aeabi_fsub>
 8008b96:	4631      	mov	r1, r6
 8008b98:	f7f8 f8f4 	bl	8000d84 <__aeabi_fmul>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	f7f8 f8ef 	bl	8000d84 <__aeabi_fmul>
 8008ba6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008baa:	f7f7 ffe3 	bl	8000b74 <__addsf3>
 8008bae:	4601      	mov	r1, r0
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7f7 ffdf 	bl	8000b74 <__addsf3>
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f8 f8e4 	bl	8000d84 <__aeabi_fmul>
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	f7f7 ffd9 	bl	8000b74 <__addsf3>
 8008bc2:	e713      	b.n	80089ec <__kernel_tanf+0x38>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	e712      	b.n	80089ee <__kernel_tanf+0x3a>
 8008bc8:	bf800000 	.word	0xbf800000
 8008bcc:	3f2ca140 	.word	0x3f2ca140
 8008bd0:	3f490fda 	.word	0x3f490fda
 8008bd4:	33222168 	.word	0x33222168
 8008bd8:	37d95384 	.word	0x37d95384
 8008bdc:	3895c07a 	.word	0x3895c07a
 8008be0:	398137b9 	.word	0x398137b9
 8008be4:	3abede48 	.word	0x3abede48
 8008be8:	3c11371f 	.word	0x3c11371f
 8008bec:	3d5d0dd1 	.word	0x3d5d0dd1
 8008bf0:	b79bae5f 	.word	0xb79bae5f
 8008bf4:	38a3f445 	.word	0x38a3f445
 8008bf8:	3a1a26c8 	.word	0x3a1a26c8
 8008bfc:	3b6b6916 	.word	0x3b6b6916
 8008c00:	3cb327a4 	.word	0x3cb327a4
 8008c04:	3e088889 	.word	0x3e088889
 8008c08:	3eaaaaab 	.word	0x3eaaaaab
 8008c0c:	fffff000 	.word	0xfffff000

08008c10 <with_errno>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4604      	mov	r4, r0
 8008c14:	460d      	mov	r5, r1
 8008c16:	4616      	mov	r6, r2
 8008c18:	f000 f94a 	bl	8008eb0 <__errno>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	6006      	str	r6, [r0, #0]
 8008c20:	4620      	mov	r0, r4
 8008c22:	bd70      	pop	{r4, r5, r6, pc}

08008c24 <xflow>:
 8008c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c26:	4615      	mov	r5, r2
 8008c28:	461c      	mov	r4, r3
 8008c2a:	b180      	cbz	r0, 8008c4e <xflow+0x2a>
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c32:	e9cd 0100 	strd	r0, r1, [sp]
 8008c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	f7f7 fc4b 	bl	80004d8 <__aeabi_dmul>
 8008c42:	2222      	movs	r2, #34	; 0x22
 8008c44:	b003      	add	sp, #12
 8008c46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c4a:	f7ff bfe1 	b.w	8008c10 <with_errno>
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4619      	mov	r1, r3
 8008c52:	e7ee      	b.n	8008c32 <xflow+0xe>

08008c54 <__math_uflow>:
 8008c54:	2200      	movs	r2, #0
 8008c56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c5a:	f7ff bfe3 	b.w	8008c24 <xflow>

08008c5e <__math_oflow>:
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008c64:	f7ff bfde 	b.w	8008c24 <xflow>

08008c68 <fabs>:
 8008c68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008c6c:	4770      	bx	lr

08008c6e <finite>:
 8008c6e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008c72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008c76:	0fc0      	lsrs	r0, r0, #31
 8008c78:	4770      	bx	lr
 8008c7a:	0000      	movs	r0, r0
 8008c7c:	0000      	movs	r0, r0
	...

08008c80 <scalbn>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008c86:	4604      	mov	r4, r0
 8008c88:	460d      	mov	r5, r1
 8008c8a:	4617      	mov	r7, r2
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	b996      	cbnz	r6, 8008cb6 <scalbn+0x36>
 8008c90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c94:	4303      	orrs	r3, r0
 8008c96:	d039      	beq.n	8008d0c <scalbn+0x8c>
 8008c98:	4b33      	ldr	r3, [pc, #204]	; (8008d68 <scalbn+0xe8>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f7f7 fc1c 	bl	80004d8 <__aeabi_dmul>
 8008ca0:	4b32      	ldr	r3, [pc, #200]	; (8008d6c <scalbn+0xec>)
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	429f      	cmp	r7, r3
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	da0f      	bge.n	8008cca <scalbn+0x4a>
 8008caa:	a32b      	add	r3, pc, #172	; (adr r3, 8008d58 <scalbn+0xd8>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f7f7 fc12 	bl	80004d8 <__aeabi_dmul>
 8008cb4:	e006      	b.n	8008cc4 <scalbn+0x44>
 8008cb6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008cba:	4296      	cmp	r6, r2
 8008cbc:	d10a      	bne.n	8008cd4 <scalbn+0x54>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	f7f7 fa54 	bl	800016c <__adddf3>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	460d      	mov	r5, r1
 8008cc8:	e020      	b.n	8008d0c <scalbn+0x8c>
 8008cca:	460b      	mov	r3, r1
 8008ccc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008cd0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008cd4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008cd8:	19b9      	adds	r1, r7, r6
 8008cda:	4291      	cmp	r1, r2
 8008cdc:	dd0e      	ble.n	8008cfc <scalbn+0x7c>
 8008cde:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008ce2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008ce6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008cea:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008cee:	4820      	ldr	r0, [pc, #128]	; (8008d70 <scalbn+0xf0>)
 8008cf0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008cf4:	a31a      	add	r3, pc, #104	; (adr r3, 8008d60 <scalbn+0xe0>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	e7d9      	b.n	8008cb0 <scalbn+0x30>
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	dd08      	ble.n	8008d12 <scalbn+0x92>
 8008d00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d12:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008d16:	da12      	bge.n	8008d3e <scalbn+0xbe>
 8008d18:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d1c:	429f      	cmp	r7, r3
 8008d1e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008d22:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008d26:	dcdc      	bgt.n	8008ce2 <scalbn+0x62>
 8008d28:	a30b      	add	r3, pc, #44	; (adr r3, 8008d58 <scalbn+0xd8>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008d32:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008d36:	480f      	ldr	r0, [pc, #60]	; (8008d74 <scalbn+0xf4>)
 8008d38:	f041 011f 	orr.w	r1, r1, #31
 8008d3c:	e7b8      	b.n	8008cb0 <scalbn+0x30>
 8008d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d42:	3136      	adds	r1, #54	; 0x36
 8008d44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	2200      	movs	r2, #0
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <scalbn+0xf8>)
 8008d54:	e7ac      	b.n	8008cb0 <scalbn+0x30>
 8008d56:	bf00      	nop
 8008d58:	c2f8f359 	.word	0xc2f8f359
 8008d5c:	01a56e1f 	.word	0x01a56e1f
 8008d60:	8800759c 	.word	0x8800759c
 8008d64:	7e37e43c 	.word	0x7e37e43c
 8008d68:	43500000 	.word	0x43500000
 8008d6c:	ffff3cb0 	.word	0xffff3cb0
 8008d70:	8800759c 	.word	0x8800759c
 8008d74:	c2f8f359 	.word	0xc2f8f359
 8008d78:	3c900000 	.word	0x3c900000

08008d7c <fabsf>:
 8008d7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008d80:	4770      	bx	lr
	...

08008d84 <floorf>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8008d8a:	3d7f      	subs	r5, #127	; 0x7f
 8008d8c:	2d16      	cmp	r5, #22
 8008d8e:	4601      	mov	r1, r0
 8008d90:	4604      	mov	r4, r0
 8008d92:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008d96:	dc26      	bgt.n	8008de6 <floorf+0x62>
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	da0e      	bge.n	8008dba <floorf+0x36>
 8008d9c:	4917      	ldr	r1, [pc, #92]	; (8008dfc <floorf+0x78>)
 8008d9e:	f7f7 fee9 	bl	8000b74 <__addsf3>
 8008da2:	2100      	movs	r1, #0
 8008da4:	f7f8 f9aa 	bl	80010fc <__aeabi_fcmpgt>
 8008da8:	b128      	cbz	r0, 8008db6 <floorf+0x32>
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	da23      	bge.n	8008df6 <floorf+0x72>
 8008dae:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <floorf+0x7c>)
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	bf18      	it	ne
 8008db4:	461c      	movne	r4, r3
 8008db6:	4621      	mov	r1, r4
 8008db8:	e01b      	b.n	8008df2 <floorf+0x6e>
 8008dba:	4e12      	ldr	r6, [pc, #72]	; (8008e04 <floorf+0x80>)
 8008dbc:	412e      	asrs	r6, r5
 8008dbe:	4230      	tst	r0, r6
 8008dc0:	d017      	beq.n	8008df2 <floorf+0x6e>
 8008dc2:	490e      	ldr	r1, [pc, #56]	; (8008dfc <floorf+0x78>)
 8008dc4:	f7f7 fed6 	bl	8000b74 <__addsf3>
 8008dc8:	2100      	movs	r1, #0
 8008dca:	f7f8 f997 	bl	80010fc <__aeabi_fcmpgt>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0f1      	beq.n	8008db6 <floorf+0x32>
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	bfbe      	ittt	lt
 8008dd6:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8008dda:	fa43 f505 	asrlt.w	r5, r3, r5
 8008dde:	1964      	addlt	r4, r4, r5
 8008de0:	ea24 0406 	bic.w	r4, r4, r6
 8008de4:	e7e7      	b.n	8008db6 <floorf+0x32>
 8008de6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008dea:	d302      	bcc.n	8008df2 <floorf+0x6e>
 8008dec:	f7f7 fec2 	bl	8000b74 <__addsf3>
 8008df0:	4601      	mov	r1, r0
 8008df2:	4608      	mov	r0, r1
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	2400      	movs	r4, #0
 8008df8:	e7dd      	b.n	8008db6 <floorf+0x32>
 8008dfa:	bf00      	nop
 8008dfc:	7149f2ca 	.word	0x7149f2ca
 8008e00:	bf800000 	.word	0xbf800000
 8008e04:	007fffff 	.word	0x007fffff

08008e08 <scalbnf>:
 8008e08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4603      	mov	r3, r0
 8008e10:	460d      	mov	r5, r1
 8008e12:	4604      	mov	r4, r0
 8008e14:	d02a      	beq.n	8008e6c <scalbnf+0x64>
 8008e16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008e1a:	d304      	bcc.n	8008e26 <scalbnf+0x1e>
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	f7f7 fea9 	bl	8000b74 <__addsf3>
 8008e22:	4603      	mov	r3, r0
 8008e24:	e022      	b.n	8008e6c <scalbnf+0x64>
 8008e26:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8008e2a:	d117      	bne.n	8008e5c <scalbnf+0x54>
 8008e2c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008e30:	f7f7 ffa8 	bl	8000d84 <__aeabi_fmul>
 8008e34:	4a17      	ldr	r2, [pc, #92]	; (8008e94 <scalbnf+0x8c>)
 8008e36:	4603      	mov	r3, r0
 8008e38:	4295      	cmp	r5, r2
 8008e3a:	db0b      	blt.n	8008e54 <scalbnf+0x4c>
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008e42:	3a19      	subs	r2, #25
 8008e44:	442a      	add	r2, r5
 8008e46:	2afe      	cmp	r2, #254	; 0xfe
 8008e48:	dd0a      	ble.n	8008e60 <scalbnf+0x58>
 8008e4a:	4913      	ldr	r1, [pc, #76]	; (8008e98 <scalbnf+0x90>)
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f361 001e 	bfi	r0, r1, #0, #31
 8008e52:	e000      	b.n	8008e56 <scalbnf+0x4e>
 8008e54:	4911      	ldr	r1, [pc, #68]	; (8008e9c <scalbnf+0x94>)
 8008e56:	f7f7 ff95 	bl	8000d84 <__aeabi_fmul>
 8008e5a:	e7e2      	b.n	8008e22 <scalbnf+0x1a>
 8008e5c:	0dd2      	lsrs	r2, r2, #23
 8008e5e:	e7f1      	b.n	8008e44 <scalbnf+0x3c>
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	dd05      	ble.n	8008e70 <scalbnf+0x68>
 8008e64:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8008e68:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	f112 0f16 	cmn.w	r2, #22
 8008e74:	da05      	bge.n	8008e82 <scalbnf+0x7a>
 8008e76:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008e7a:	4295      	cmp	r5, r2
 8008e7c:	dce5      	bgt.n	8008e4a <scalbnf+0x42>
 8008e7e:	4907      	ldr	r1, [pc, #28]	; (8008e9c <scalbnf+0x94>)
 8008e80:	e7e4      	b.n	8008e4c <scalbnf+0x44>
 8008e82:	3219      	adds	r2, #25
 8008e84:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008e88:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8008e8c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8008e90:	e7e1      	b.n	8008e56 <scalbnf+0x4e>
 8008e92:	bf00      	nop
 8008e94:	ffff3cb0 	.word	0xffff3cb0
 8008e98:	7149f2ca 	.word	0x7149f2ca
 8008e9c:	0da24260 	.word	0x0da24260

08008ea0 <abort>:
 8008ea0:	2006      	movs	r0, #6
 8008ea2:	b508      	push	{r3, lr}
 8008ea4:	f000 fdb2 	bl	8009a0c <raise>
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	f7fa f8e0 	bl	800306e <_exit>
	...

08008eb0 <__errno>:
 8008eb0:	4b01      	ldr	r3, [pc, #4]	; (8008eb8 <__errno+0x8>)
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	2000000c 	.word	0x2000000c

08008ebc <__libc_init_array>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	4d0c      	ldr	r5, [pc, #48]	; (8008ef4 <__libc_init_array+0x38>)
 8008ec2:	4c0d      	ldr	r4, [pc, #52]	; (8008ef8 <__libc_init_array+0x3c>)
 8008ec4:	1b64      	subs	r4, r4, r5
 8008ec6:	10a4      	asrs	r4, r4, #2
 8008ec8:	42a6      	cmp	r6, r4
 8008eca:	d109      	bne.n	8008ee0 <__libc_init_array+0x24>
 8008ecc:	f002 fef4 	bl	800bcb8 <_init>
 8008ed0:	2600      	movs	r6, #0
 8008ed2:	4d0a      	ldr	r5, [pc, #40]	; (8008efc <__libc_init_array+0x40>)
 8008ed4:	4c0a      	ldr	r4, [pc, #40]	; (8008f00 <__libc_init_array+0x44>)
 8008ed6:	1b64      	subs	r4, r4, r5
 8008ed8:	10a4      	asrs	r4, r4, #2
 8008eda:	42a6      	cmp	r6, r4
 8008edc:	d105      	bne.n	8008eea <__libc_init_array+0x2e>
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee4:	4798      	blx	r3
 8008ee6:	3601      	adds	r6, #1
 8008ee8:	e7ee      	b.n	8008ec8 <__libc_init_array+0xc>
 8008eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eee:	4798      	blx	r3
 8008ef0:	3601      	adds	r6, #1
 8008ef2:	e7f2      	b.n	8008eda <__libc_init_array+0x1e>
 8008ef4:	0800c56c 	.word	0x0800c56c
 8008ef8:	0800c56c 	.word	0x0800c56c
 8008efc:	0800c56c 	.word	0x0800c56c
 8008f00:	0800c570 	.word	0x0800c570

08008f04 <malloc>:
 8008f04:	4b02      	ldr	r3, [pc, #8]	; (8008f10 <malloc+0xc>)
 8008f06:	4601      	mov	r1, r0
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	f000 b873 	b.w	8008ff4 <_malloc_r>
 8008f0e:	bf00      	nop
 8008f10:	2000000c 	.word	0x2000000c

08008f14 <memset>:
 8008f14:	4603      	mov	r3, r0
 8008f16:	4402      	add	r2, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <_free_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4605      	mov	r5, r0
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	d040      	beq.n	8008fae <_free_r+0x8a>
 8008f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f30:	1f0c      	subs	r4, r1, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfb8      	it	lt
 8008f36:	18e4      	addlt	r4, r4, r3
 8008f38:	f001 fc40 	bl	800a7bc <__malloc_lock>
 8008f3c:	4a1c      	ldr	r2, [pc, #112]	; (8008fb0 <_free_r+0x8c>)
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	b933      	cbnz	r3, 8008f50 <_free_r+0x2c>
 8008f42:	6063      	str	r3, [r4, #4]
 8008f44:	6014      	str	r4, [r2, #0]
 8008f46:	4628      	mov	r0, r5
 8008f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4c:	f001 bc3c 	b.w	800a7c8 <__malloc_unlock>
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d908      	bls.n	8008f66 <_free_r+0x42>
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	1821      	adds	r1, r4, r0
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	bf01      	itttt	eq
 8008f5c:	6819      	ldreq	r1, [r3, #0]
 8008f5e:	685b      	ldreq	r3, [r3, #4]
 8008f60:	1809      	addeq	r1, r1, r0
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	e7ed      	b.n	8008f42 <_free_r+0x1e>
 8008f66:	461a      	mov	r2, r3
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	b10b      	cbz	r3, 8008f70 <_free_r+0x4c>
 8008f6c:	42a3      	cmp	r3, r4
 8008f6e:	d9fa      	bls.n	8008f66 <_free_r+0x42>
 8008f70:	6811      	ldr	r1, [r2, #0]
 8008f72:	1850      	adds	r0, r2, r1
 8008f74:	42a0      	cmp	r0, r4
 8008f76:	d10b      	bne.n	8008f90 <_free_r+0x6c>
 8008f78:	6820      	ldr	r0, [r4, #0]
 8008f7a:	4401      	add	r1, r0
 8008f7c:	1850      	adds	r0, r2, r1
 8008f7e:	4283      	cmp	r3, r0
 8008f80:	6011      	str	r1, [r2, #0]
 8008f82:	d1e0      	bne.n	8008f46 <_free_r+0x22>
 8008f84:	6818      	ldr	r0, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	4401      	add	r1, r0
 8008f8a:	6011      	str	r1, [r2, #0]
 8008f8c:	6053      	str	r3, [r2, #4]
 8008f8e:	e7da      	b.n	8008f46 <_free_r+0x22>
 8008f90:	d902      	bls.n	8008f98 <_free_r+0x74>
 8008f92:	230c      	movs	r3, #12
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	e7d6      	b.n	8008f46 <_free_r+0x22>
 8008f98:	6820      	ldr	r0, [r4, #0]
 8008f9a:	1821      	adds	r1, r4, r0
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1809      	addeq	r1, r1, r0
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	6063      	str	r3, [r4, #4]
 8008faa:	6054      	str	r4, [r2, #4]
 8008fac:	e7cb      	b.n	8008f46 <_free_r+0x22>
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	2000037c 	.word	0x2000037c

08008fb4 <sbrk_aligned>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4e0e      	ldr	r6, [pc, #56]	; (8008ff0 <sbrk_aligned+0x3c>)
 8008fb8:	460c      	mov	r4, r1
 8008fba:	6831      	ldr	r1, [r6, #0]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	b911      	cbnz	r1, 8008fc6 <sbrk_aligned+0x12>
 8008fc0:	f000 fcec 	bl	800999c <_sbrk_r>
 8008fc4:	6030      	str	r0, [r6, #0]
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 fce7 	bl	800999c <_sbrk_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d00a      	beq.n	8008fe8 <sbrk_aligned+0x34>
 8008fd2:	1cc4      	adds	r4, r0, #3
 8008fd4:	f024 0403 	bic.w	r4, r4, #3
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d007      	beq.n	8008fec <sbrk_aligned+0x38>
 8008fdc:	1a21      	subs	r1, r4, r0
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 fcdc 	bl	800999c <_sbrk_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d101      	bne.n	8008fec <sbrk_aligned+0x38>
 8008fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fec:	4620      	mov	r0, r4
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	20000380 	.word	0x20000380

08008ff4 <_malloc_r>:
 8008ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff8:	1ccd      	adds	r5, r1, #3
 8008ffa:	f025 0503 	bic.w	r5, r5, #3
 8008ffe:	3508      	adds	r5, #8
 8009000:	2d0c      	cmp	r5, #12
 8009002:	bf38      	it	cc
 8009004:	250c      	movcc	r5, #12
 8009006:	2d00      	cmp	r5, #0
 8009008:	4607      	mov	r7, r0
 800900a:	db01      	blt.n	8009010 <_malloc_r+0x1c>
 800900c:	42a9      	cmp	r1, r5
 800900e:	d905      	bls.n	800901c <_malloc_r+0x28>
 8009010:	230c      	movs	r3, #12
 8009012:	2600      	movs	r6, #0
 8009014:	603b      	str	r3, [r7, #0]
 8009016:	4630      	mov	r0, r6
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	4e2e      	ldr	r6, [pc, #184]	; (80090d8 <_malloc_r+0xe4>)
 800901e:	f001 fbcd 	bl	800a7bc <__malloc_lock>
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	461c      	mov	r4, r3
 8009026:	bb34      	cbnz	r4, 8009076 <_malloc_r+0x82>
 8009028:	4629      	mov	r1, r5
 800902a:	4638      	mov	r0, r7
 800902c:	f7ff ffc2 	bl	8008fb4 <sbrk_aligned>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	4604      	mov	r4, r0
 8009034:	d14d      	bne.n	80090d2 <_malloc_r+0xde>
 8009036:	6834      	ldr	r4, [r6, #0]
 8009038:	4626      	mov	r6, r4
 800903a:	2e00      	cmp	r6, #0
 800903c:	d140      	bne.n	80090c0 <_malloc_r+0xcc>
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	4631      	mov	r1, r6
 8009042:	4638      	mov	r0, r7
 8009044:	eb04 0803 	add.w	r8, r4, r3
 8009048:	f000 fca8 	bl	800999c <_sbrk_r>
 800904c:	4580      	cmp	r8, r0
 800904e:	d13a      	bne.n	80090c6 <_malloc_r+0xd2>
 8009050:	6821      	ldr	r1, [r4, #0]
 8009052:	3503      	adds	r5, #3
 8009054:	1a6d      	subs	r5, r5, r1
 8009056:	f025 0503 	bic.w	r5, r5, #3
 800905a:	3508      	adds	r5, #8
 800905c:	2d0c      	cmp	r5, #12
 800905e:	bf38      	it	cc
 8009060:	250c      	movcc	r5, #12
 8009062:	4638      	mov	r0, r7
 8009064:	4629      	mov	r1, r5
 8009066:	f7ff ffa5 	bl	8008fb4 <sbrk_aligned>
 800906a:	3001      	adds	r0, #1
 800906c:	d02b      	beq.n	80090c6 <_malloc_r+0xd2>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	442b      	add	r3, r5
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	e00e      	b.n	8009094 <_malloc_r+0xa0>
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	1b52      	subs	r2, r2, r5
 800907a:	d41e      	bmi.n	80090ba <_malloc_r+0xc6>
 800907c:	2a0b      	cmp	r2, #11
 800907e:	d916      	bls.n	80090ae <_malloc_r+0xba>
 8009080:	1961      	adds	r1, r4, r5
 8009082:	42a3      	cmp	r3, r4
 8009084:	6025      	str	r5, [r4, #0]
 8009086:	bf18      	it	ne
 8009088:	6059      	strne	r1, [r3, #4]
 800908a:	6863      	ldr	r3, [r4, #4]
 800908c:	bf08      	it	eq
 800908e:	6031      	streq	r1, [r6, #0]
 8009090:	5162      	str	r2, [r4, r5]
 8009092:	604b      	str	r3, [r1, #4]
 8009094:	4638      	mov	r0, r7
 8009096:	f104 060b 	add.w	r6, r4, #11
 800909a:	f001 fb95 	bl	800a7c8 <__malloc_unlock>
 800909e:	f026 0607 	bic.w	r6, r6, #7
 80090a2:	1d23      	adds	r3, r4, #4
 80090a4:	1af2      	subs	r2, r6, r3
 80090a6:	d0b6      	beq.n	8009016 <_malloc_r+0x22>
 80090a8:	1b9b      	subs	r3, r3, r6
 80090aa:	50a3      	str	r3, [r4, r2]
 80090ac:	e7b3      	b.n	8009016 <_malloc_r+0x22>
 80090ae:	6862      	ldr	r2, [r4, #4]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	bf0c      	ite	eq
 80090b4:	6032      	streq	r2, [r6, #0]
 80090b6:	605a      	strne	r2, [r3, #4]
 80090b8:	e7ec      	b.n	8009094 <_malloc_r+0xa0>
 80090ba:	4623      	mov	r3, r4
 80090bc:	6864      	ldr	r4, [r4, #4]
 80090be:	e7b2      	b.n	8009026 <_malloc_r+0x32>
 80090c0:	4634      	mov	r4, r6
 80090c2:	6876      	ldr	r6, [r6, #4]
 80090c4:	e7b9      	b.n	800903a <_malloc_r+0x46>
 80090c6:	230c      	movs	r3, #12
 80090c8:	4638      	mov	r0, r7
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	f001 fb7c 	bl	800a7c8 <__malloc_unlock>
 80090d0:	e7a1      	b.n	8009016 <_malloc_r+0x22>
 80090d2:	6025      	str	r5, [r4, #0]
 80090d4:	e7de      	b.n	8009094 <_malloc_r+0xa0>
 80090d6:	bf00      	nop
 80090d8:	2000037c 	.word	0x2000037c

080090dc <__cvt>:
 80090dc:	2b00      	cmp	r3, #0
 80090de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e2:	461f      	mov	r7, r3
 80090e4:	bfbb      	ittet	lt
 80090e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80090ea:	461f      	movlt	r7, r3
 80090ec:	2300      	movge	r3, #0
 80090ee:	232d      	movlt	r3, #45	; 0x2d
 80090f0:	b088      	sub	sp, #32
 80090f2:	4614      	mov	r4, r2
 80090f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80090f8:	7013      	strb	r3, [r2, #0]
 80090fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009100:	f023 0820 	bic.w	r8, r3, #32
 8009104:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009108:	d005      	beq.n	8009116 <__cvt+0x3a>
 800910a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800910e:	d100      	bne.n	8009112 <__cvt+0x36>
 8009110:	3501      	adds	r5, #1
 8009112:	2302      	movs	r3, #2
 8009114:	e000      	b.n	8009118 <__cvt+0x3c>
 8009116:	2303      	movs	r3, #3
 8009118:	aa07      	add	r2, sp, #28
 800911a:	9204      	str	r2, [sp, #16]
 800911c:	aa06      	add	r2, sp, #24
 800911e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009122:	e9cd 3500 	strd	r3, r5, [sp]
 8009126:	4622      	mov	r2, r4
 8009128:	463b      	mov	r3, r7
 800912a:	f000 fd39 	bl	8009ba0 <_dtoa_r>
 800912e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009132:	4606      	mov	r6, r0
 8009134:	d102      	bne.n	800913c <__cvt+0x60>
 8009136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009138:	07db      	lsls	r3, r3, #31
 800913a:	d522      	bpl.n	8009182 <__cvt+0xa6>
 800913c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009140:	eb06 0905 	add.w	r9, r6, r5
 8009144:	d110      	bne.n	8009168 <__cvt+0x8c>
 8009146:	7833      	ldrb	r3, [r6, #0]
 8009148:	2b30      	cmp	r3, #48	; 0x30
 800914a:	d10a      	bne.n	8009162 <__cvt+0x86>
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	4620      	mov	r0, r4
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8009158:	b918      	cbnz	r0, 8009162 <__cvt+0x86>
 800915a:	f1c5 0501 	rsb	r5, r5, #1
 800915e:	f8ca 5000 	str.w	r5, [sl]
 8009162:	f8da 3000 	ldr.w	r3, [sl]
 8009166:	4499      	add	r9, r3
 8009168:	2200      	movs	r2, #0
 800916a:	2300      	movs	r3, #0
 800916c:	4620      	mov	r0, r4
 800916e:	4639      	mov	r1, r7
 8009170:	f7f7 fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8009174:	b108      	cbz	r0, 800917a <__cvt+0x9e>
 8009176:	f8cd 901c 	str.w	r9, [sp, #28]
 800917a:	2230      	movs	r2, #48	; 0x30
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	454b      	cmp	r3, r9
 8009180:	d307      	bcc.n	8009192 <__cvt+0xb6>
 8009182:	4630      	mov	r0, r6
 8009184:	9b07      	ldr	r3, [sp, #28]
 8009186:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009188:	1b9b      	subs	r3, r3, r6
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	b008      	add	sp, #32
 800918e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009192:	1c59      	adds	r1, r3, #1
 8009194:	9107      	str	r1, [sp, #28]
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	e7f0      	b.n	800917c <__cvt+0xa0>

0800919a <__exponent>:
 800919a:	4603      	mov	r3, r0
 800919c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800919e:	2900      	cmp	r1, #0
 80091a0:	f803 2b02 	strb.w	r2, [r3], #2
 80091a4:	bfb6      	itet	lt
 80091a6:	222d      	movlt	r2, #45	; 0x2d
 80091a8:	222b      	movge	r2, #43	; 0x2b
 80091aa:	4249      	neglt	r1, r1
 80091ac:	2909      	cmp	r1, #9
 80091ae:	7042      	strb	r2, [r0, #1]
 80091b0:	dd2b      	ble.n	800920a <__exponent+0x70>
 80091b2:	f10d 0407 	add.w	r4, sp, #7
 80091b6:	46a4      	mov	ip, r4
 80091b8:	270a      	movs	r7, #10
 80091ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80091be:	460a      	mov	r2, r1
 80091c0:	46a6      	mov	lr, r4
 80091c2:	fb07 1516 	mls	r5, r7, r6, r1
 80091c6:	2a63      	cmp	r2, #99	; 0x63
 80091c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80091cc:	4631      	mov	r1, r6
 80091ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80091d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091d6:	dcf0      	bgt.n	80091ba <__exponent+0x20>
 80091d8:	3130      	adds	r1, #48	; 0x30
 80091da:	f1ae 0502 	sub.w	r5, lr, #2
 80091de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091e2:	4629      	mov	r1, r5
 80091e4:	1c44      	adds	r4, r0, #1
 80091e6:	4561      	cmp	r1, ip
 80091e8:	d30a      	bcc.n	8009200 <__exponent+0x66>
 80091ea:	f10d 0209 	add.w	r2, sp, #9
 80091ee:	eba2 020e 	sub.w	r2, r2, lr
 80091f2:	4565      	cmp	r5, ip
 80091f4:	bf88      	it	hi
 80091f6:	2200      	movhi	r2, #0
 80091f8:	4413      	add	r3, r2
 80091fa:	1a18      	subs	r0, r3, r0
 80091fc:	b003      	add	sp, #12
 80091fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009200:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009204:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009208:	e7ed      	b.n	80091e6 <__exponent+0x4c>
 800920a:	2330      	movs	r3, #48	; 0x30
 800920c:	3130      	adds	r1, #48	; 0x30
 800920e:	7083      	strb	r3, [r0, #2]
 8009210:	70c1      	strb	r1, [r0, #3]
 8009212:	1d03      	adds	r3, r0, #4
 8009214:	e7f1      	b.n	80091fa <__exponent+0x60>
	...

08009218 <_printf_float>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	b091      	sub	sp, #68	; 0x44
 800921e:	460c      	mov	r4, r1
 8009220:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009224:	4616      	mov	r6, r2
 8009226:	461f      	mov	r7, r3
 8009228:	4605      	mov	r5, r0
 800922a:	f001 faa7 	bl	800a77c <_localeconv_r>
 800922e:	6803      	ldr	r3, [r0, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	9309      	str	r3, [sp, #36]	; 0x24
 8009234:	f7f6 ff8c 	bl	8000150 <strlen>
 8009238:	2300      	movs	r3, #0
 800923a:	930e      	str	r3, [sp, #56]	; 0x38
 800923c:	f8d8 3000 	ldr.w	r3, [r8]
 8009240:	900a      	str	r0, [sp, #40]	; 0x28
 8009242:	3307      	adds	r3, #7
 8009244:	f023 0307 	bic.w	r3, r3, #7
 8009248:	f103 0208 	add.w	r2, r3, #8
 800924c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009250:	f8d4 b000 	ldr.w	fp, [r4]
 8009254:	f8c8 2000 	str.w	r2, [r8]
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009260:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009264:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009268:	930b      	str	r3, [sp, #44]	; 0x2c
 800926a:	f04f 32ff 	mov.w	r2, #4294967295
 800926e:	4640      	mov	r0, r8
 8009270:	4b9c      	ldr	r3, [pc, #624]	; (80094e4 <_printf_float+0x2cc>)
 8009272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009274:	f7f7 fbca 	bl	8000a0c <__aeabi_dcmpun>
 8009278:	bb70      	cbnz	r0, 80092d8 <_printf_float+0xc0>
 800927a:	f04f 32ff 	mov.w	r2, #4294967295
 800927e:	4640      	mov	r0, r8
 8009280:	4b98      	ldr	r3, [pc, #608]	; (80094e4 <_printf_float+0x2cc>)
 8009282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009284:	f7f7 fba4 	bl	80009d0 <__aeabi_dcmple>
 8009288:	bb30      	cbnz	r0, 80092d8 <_printf_float+0xc0>
 800928a:	2200      	movs	r2, #0
 800928c:	2300      	movs	r3, #0
 800928e:	4640      	mov	r0, r8
 8009290:	4651      	mov	r1, sl
 8009292:	f7f7 fb93 	bl	80009bc <__aeabi_dcmplt>
 8009296:	b110      	cbz	r0, 800929e <_printf_float+0x86>
 8009298:	232d      	movs	r3, #45	; 0x2d
 800929a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929e:	4b92      	ldr	r3, [pc, #584]	; (80094e8 <_printf_float+0x2d0>)
 80092a0:	4892      	ldr	r0, [pc, #584]	; (80094ec <_printf_float+0x2d4>)
 80092a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092a6:	bf94      	ite	ls
 80092a8:	4698      	movls	r8, r3
 80092aa:	4680      	movhi	r8, r0
 80092ac:	2303      	movs	r3, #3
 80092ae:	f04f 0a00 	mov.w	sl, #0
 80092b2:	6123      	str	r3, [r4, #16]
 80092b4:	f02b 0304 	bic.w	r3, fp, #4
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	4633      	mov	r3, r6
 80092bc:	4621      	mov	r1, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	9700      	str	r7, [sp, #0]
 80092c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80092c4:	f000 f9d4 	bl	8009670 <_printf_common>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f040 8090 	bne.w	80093ee <_printf_float+0x1d6>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	b011      	add	sp, #68	; 0x44
 80092d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d8:	4642      	mov	r2, r8
 80092da:	4653      	mov	r3, sl
 80092dc:	4640      	mov	r0, r8
 80092de:	4651      	mov	r1, sl
 80092e0:	f7f7 fb94 	bl	8000a0c <__aeabi_dcmpun>
 80092e4:	b148      	cbz	r0, 80092fa <_printf_float+0xe2>
 80092e6:	f1ba 0f00 	cmp.w	sl, #0
 80092ea:	bfb8      	it	lt
 80092ec:	232d      	movlt	r3, #45	; 0x2d
 80092ee:	4880      	ldr	r0, [pc, #512]	; (80094f0 <_printf_float+0x2d8>)
 80092f0:	bfb8      	it	lt
 80092f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092f6:	4b7f      	ldr	r3, [pc, #508]	; (80094f4 <_printf_float+0x2dc>)
 80092f8:	e7d3      	b.n	80092a2 <_printf_float+0x8a>
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	d142      	bne.n	800938a <_printf_float+0x172>
 8009304:	2306      	movs	r3, #6
 8009306:	6063      	str	r3, [r4, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	9206      	str	r2, [sp, #24]
 800930c:	aa0e      	add	r2, sp, #56	; 0x38
 800930e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009312:	aa0d      	add	r2, sp, #52	; 0x34
 8009314:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009318:	9203      	str	r2, [sp, #12]
 800931a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800931e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	4642      	mov	r2, r8
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	4628      	mov	r0, r5
 800932c:	4653      	mov	r3, sl
 800932e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009330:	f7ff fed4 	bl	80090dc <__cvt>
 8009334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009336:	4680      	mov	r8, r0
 8009338:	2947      	cmp	r1, #71	; 0x47
 800933a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800933c:	d108      	bne.n	8009350 <_printf_float+0x138>
 800933e:	1cc8      	adds	r0, r1, #3
 8009340:	db02      	blt.n	8009348 <_printf_float+0x130>
 8009342:	6863      	ldr	r3, [r4, #4]
 8009344:	4299      	cmp	r1, r3
 8009346:	dd40      	ble.n	80093ca <_printf_float+0x1b2>
 8009348:	f1a9 0902 	sub.w	r9, r9, #2
 800934c:	fa5f f989 	uxtb.w	r9, r9
 8009350:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009354:	d81f      	bhi.n	8009396 <_printf_float+0x17e>
 8009356:	464a      	mov	r2, r9
 8009358:	3901      	subs	r1, #1
 800935a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800935e:	910d      	str	r1, [sp, #52]	; 0x34
 8009360:	f7ff ff1b 	bl	800919a <__exponent>
 8009364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009366:	4682      	mov	sl, r0
 8009368:	1813      	adds	r3, r2, r0
 800936a:	2a01      	cmp	r2, #1
 800936c:	6123      	str	r3, [r4, #16]
 800936e:	dc02      	bgt.n	8009376 <_printf_float+0x15e>
 8009370:	6822      	ldr	r2, [r4, #0]
 8009372:	07d2      	lsls	r2, r2, #31
 8009374:	d501      	bpl.n	800937a <_printf_float+0x162>
 8009376:	3301      	adds	r3, #1
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800937e:	2b00      	cmp	r3, #0
 8009380:	d09b      	beq.n	80092ba <_printf_float+0xa2>
 8009382:	232d      	movs	r3, #45	; 0x2d
 8009384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009388:	e797      	b.n	80092ba <_printf_float+0xa2>
 800938a:	2947      	cmp	r1, #71	; 0x47
 800938c:	d1bc      	bne.n	8009308 <_printf_float+0xf0>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1ba      	bne.n	8009308 <_printf_float+0xf0>
 8009392:	2301      	movs	r3, #1
 8009394:	e7b7      	b.n	8009306 <_printf_float+0xee>
 8009396:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800939a:	d118      	bne.n	80093ce <_printf_float+0x1b6>
 800939c:	2900      	cmp	r1, #0
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	dd0b      	ble.n	80093ba <_printf_float+0x1a2>
 80093a2:	6121      	str	r1, [r4, #16]
 80093a4:	b913      	cbnz	r3, 80093ac <_printf_float+0x194>
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	07d0      	lsls	r0, r2, #31
 80093aa:	d502      	bpl.n	80093b2 <_printf_float+0x19a>
 80093ac:	3301      	adds	r3, #1
 80093ae:	440b      	add	r3, r1
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	f04f 0a00 	mov.w	sl, #0
 80093b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80093b8:	e7df      	b.n	800937a <_printf_float+0x162>
 80093ba:	b913      	cbnz	r3, 80093c2 <_printf_float+0x1aa>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	07d2      	lsls	r2, r2, #31
 80093c0:	d501      	bpl.n	80093c6 <_printf_float+0x1ae>
 80093c2:	3302      	adds	r3, #2
 80093c4:	e7f4      	b.n	80093b0 <_printf_float+0x198>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7f2      	b.n	80093b0 <_printf_float+0x198>
 80093ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80093ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093d0:	4299      	cmp	r1, r3
 80093d2:	db05      	blt.n	80093e0 <_printf_float+0x1c8>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	6121      	str	r1, [r4, #16]
 80093d8:	07d8      	lsls	r0, r3, #31
 80093da:	d5ea      	bpl.n	80093b2 <_printf_float+0x19a>
 80093dc:	1c4b      	adds	r3, r1, #1
 80093de:	e7e7      	b.n	80093b0 <_printf_float+0x198>
 80093e0:	2900      	cmp	r1, #0
 80093e2:	bfcc      	ite	gt
 80093e4:	2201      	movgt	r2, #1
 80093e6:	f1c1 0202 	rsble	r2, r1, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	e7e0      	b.n	80093b0 <_printf_float+0x198>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	055a      	lsls	r2, r3, #21
 80093f2:	d407      	bmi.n	8009404 <_printf_float+0x1ec>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	4642      	mov	r2, r8
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	d12b      	bne.n	800945a <_printf_float+0x242>
 8009402:	e764      	b.n	80092ce <_printf_float+0xb6>
 8009404:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009408:	f240 80dd 	bls.w	80095c6 <_printf_float+0x3ae>
 800940c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009410:	2200      	movs	r2, #0
 8009412:	2300      	movs	r3, #0
 8009414:	f7f7 fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8009418:	2800      	cmp	r0, #0
 800941a:	d033      	beq.n	8009484 <_printf_float+0x26c>
 800941c:	2301      	movs	r3, #1
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	4a35      	ldr	r2, [pc, #212]	; (80094f8 <_printf_float+0x2e0>)
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f af51 	beq.w	80092ce <_printf_float+0xb6>
 800942c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009430:	429a      	cmp	r2, r3
 8009432:	db02      	blt.n	800943a <_printf_float+0x222>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	07d8      	lsls	r0, r3, #31
 8009438:	d50f      	bpl.n	800945a <_printf_float+0x242>
 800943a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	f43f af42 	beq.w	80092ce <_printf_float+0xb6>
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	f104 091a 	add.w	r9, r4, #26
 8009452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009454:	3b01      	subs	r3, #1
 8009456:	4543      	cmp	r3, r8
 8009458:	dc09      	bgt.n	800946e <_printf_float+0x256>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	079b      	lsls	r3, r3, #30
 800945e:	f100 8102 	bmi.w	8009666 <_printf_float+0x44e>
 8009462:	68e0      	ldr	r0, [r4, #12]
 8009464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009466:	4298      	cmp	r0, r3
 8009468:	bfb8      	it	lt
 800946a:	4618      	movlt	r0, r3
 800946c:	e731      	b.n	80092d2 <_printf_float+0xba>
 800946e:	2301      	movs	r3, #1
 8009470:	464a      	mov	r2, r9
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	f43f af28 	beq.w	80092ce <_printf_float+0xb6>
 800947e:	f108 0801 	add.w	r8, r8, #1
 8009482:	e7e6      	b.n	8009452 <_printf_float+0x23a>
 8009484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009486:	2b00      	cmp	r3, #0
 8009488:	dc38      	bgt.n	80094fc <_printf_float+0x2e4>
 800948a:	2301      	movs	r3, #1
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	4a19      	ldr	r2, [pc, #100]	; (80094f8 <_printf_float+0x2e0>)
 8009492:	47b8      	blx	r7
 8009494:	3001      	adds	r0, #1
 8009496:	f43f af1a 	beq.w	80092ce <_printf_float+0xb6>
 800949a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800949e:	4313      	orrs	r3, r2
 80094a0:	d102      	bne.n	80094a8 <_printf_float+0x290>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	07d9      	lsls	r1, r3, #31
 80094a6:	d5d8      	bpl.n	800945a <_printf_float+0x242>
 80094a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094ac:	4631      	mov	r1, r6
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	f43f af0b 	beq.w	80092ce <_printf_float+0xb6>
 80094b8:	f04f 0900 	mov.w	r9, #0
 80094bc:	f104 0a1a 	add.w	sl, r4, #26
 80094c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094c2:	425b      	negs	r3, r3
 80094c4:	454b      	cmp	r3, r9
 80094c6:	dc01      	bgt.n	80094cc <_printf_float+0x2b4>
 80094c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ca:	e794      	b.n	80093f6 <_printf_float+0x1de>
 80094cc:	2301      	movs	r3, #1
 80094ce:	4652      	mov	r2, sl
 80094d0:	4631      	mov	r1, r6
 80094d2:	4628      	mov	r0, r5
 80094d4:	47b8      	blx	r7
 80094d6:	3001      	adds	r0, #1
 80094d8:	f43f aef9 	beq.w	80092ce <_printf_float+0xb6>
 80094dc:	f109 0901 	add.w	r9, r9, #1
 80094e0:	e7ee      	b.n	80094c0 <_printf_float+0x2a8>
 80094e2:	bf00      	nop
 80094e4:	7fefffff 	.word	0x7fefffff
 80094e8:	0800c194 	.word	0x0800c194
 80094ec:	0800c198 	.word	0x0800c198
 80094f0:	0800c1a0 	.word	0x0800c1a0
 80094f4:	0800c19c 	.word	0x0800c19c
 80094f8:	0800c1a4 	.word	0x0800c1a4
 80094fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009500:	429a      	cmp	r2, r3
 8009502:	bfa8      	it	ge
 8009504:	461a      	movge	r2, r3
 8009506:	2a00      	cmp	r2, #0
 8009508:	4691      	mov	r9, r2
 800950a:	dc37      	bgt.n	800957c <_printf_float+0x364>
 800950c:	f04f 0b00 	mov.w	fp, #0
 8009510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009514:	f104 021a 	add.w	r2, r4, #26
 8009518:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800951c:	ebaa 0309 	sub.w	r3, sl, r9
 8009520:	455b      	cmp	r3, fp
 8009522:	dc33      	bgt.n	800958c <_printf_float+0x374>
 8009524:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009528:	429a      	cmp	r2, r3
 800952a:	db3b      	blt.n	80095a4 <_printf_float+0x38c>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	07da      	lsls	r2, r3, #31
 8009530:	d438      	bmi.n	80095a4 <_printf_float+0x38c>
 8009532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009534:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009536:	eba3 020a 	sub.w	r2, r3, sl
 800953a:	eba3 0901 	sub.w	r9, r3, r1
 800953e:	4591      	cmp	r9, r2
 8009540:	bfa8      	it	ge
 8009542:	4691      	movge	r9, r2
 8009544:	f1b9 0f00 	cmp.w	r9, #0
 8009548:	dc34      	bgt.n	80095b4 <_printf_float+0x39c>
 800954a:	f04f 0800 	mov.w	r8, #0
 800954e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009552:	f104 0a1a 	add.w	sl, r4, #26
 8009556:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800955a:	1a9b      	subs	r3, r3, r2
 800955c:	eba3 0309 	sub.w	r3, r3, r9
 8009560:	4543      	cmp	r3, r8
 8009562:	f77f af7a 	ble.w	800945a <_printf_float+0x242>
 8009566:	2301      	movs	r3, #1
 8009568:	4652      	mov	r2, sl
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	f43f aeac 	beq.w	80092ce <_printf_float+0xb6>
 8009576:	f108 0801 	add.w	r8, r8, #1
 800957a:	e7ec      	b.n	8009556 <_printf_float+0x33e>
 800957c:	4613      	mov	r3, r2
 800957e:	4631      	mov	r1, r6
 8009580:	4642      	mov	r2, r8
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	d1c0      	bne.n	800950c <_printf_float+0x2f4>
 800958a:	e6a0      	b.n	80092ce <_printf_float+0xb6>
 800958c:	2301      	movs	r3, #1
 800958e:	4631      	mov	r1, r6
 8009590:	4628      	mov	r0, r5
 8009592:	920b      	str	r2, [sp, #44]	; 0x2c
 8009594:	47b8      	blx	r7
 8009596:	3001      	adds	r0, #1
 8009598:	f43f ae99 	beq.w	80092ce <_printf_float+0xb6>
 800959c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800959e:	f10b 0b01 	add.w	fp, fp, #1
 80095a2:	e7b9      	b.n	8009518 <_printf_float+0x300>
 80095a4:	4631      	mov	r1, r6
 80095a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b8      	blx	r7
 80095ae:	3001      	adds	r0, #1
 80095b0:	d1bf      	bne.n	8009532 <_printf_float+0x31a>
 80095b2:	e68c      	b.n	80092ce <_printf_float+0xb6>
 80095b4:	464b      	mov	r3, r9
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	eb08 020a 	add.w	r2, r8, sl
 80095be:	47b8      	blx	r7
 80095c0:	3001      	adds	r0, #1
 80095c2:	d1c2      	bne.n	800954a <_printf_float+0x332>
 80095c4:	e683      	b.n	80092ce <_printf_float+0xb6>
 80095c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095c8:	2a01      	cmp	r2, #1
 80095ca:	dc01      	bgt.n	80095d0 <_printf_float+0x3b8>
 80095cc:	07db      	lsls	r3, r3, #31
 80095ce:	d537      	bpl.n	8009640 <_printf_float+0x428>
 80095d0:	2301      	movs	r3, #1
 80095d2:	4642      	mov	r2, r8
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b8      	blx	r7
 80095da:	3001      	adds	r0, #1
 80095dc:	f43f ae77 	beq.w	80092ce <_printf_float+0xb6>
 80095e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095e4:	4631      	mov	r1, r6
 80095e6:	4628      	mov	r0, r5
 80095e8:	47b8      	blx	r7
 80095ea:	3001      	adds	r0, #1
 80095ec:	f43f ae6f 	beq.w	80092ce <_printf_float+0xb6>
 80095f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095f4:	2200      	movs	r2, #0
 80095f6:	2300      	movs	r3, #0
 80095f8:	f7f7 f9d6 	bl	80009a8 <__aeabi_dcmpeq>
 80095fc:	b9d8      	cbnz	r0, 8009636 <_printf_float+0x41e>
 80095fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009600:	f108 0201 	add.w	r2, r8, #1
 8009604:	3b01      	subs	r3, #1
 8009606:	4631      	mov	r1, r6
 8009608:	4628      	mov	r0, r5
 800960a:	47b8      	blx	r7
 800960c:	3001      	adds	r0, #1
 800960e:	d10e      	bne.n	800962e <_printf_float+0x416>
 8009610:	e65d      	b.n	80092ce <_printf_float+0xb6>
 8009612:	2301      	movs	r3, #1
 8009614:	464a      	mov	r2, r9
 8009616:	4631      	mov	r1, r6
 8009618:	4628      	mov	r0, r5
 800961a:	47b8      	blx	r7
 800961c:	3001      	adds	r0, #1
 800961e:	f43f ae56 	beq.w	80092ce <_printf_float+0xb6>
 8009622:	f108 0801 	add.w	r8, r8, #1
 8009626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009628:	3b01      	subs	r3, #1
 800962a:	4543      	cmp	r3, r8
 800962c:	dcf1      	bgt.n	8009612 <_printf_float+0x3fa>
 800962e:	4653      	mov	r3, sl
 8009630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009634:	e6e0      	b.n	80093f8 <_printf_float+0x1e0>
 8009636:	f04f 0800 	mov.w	r8, #0
 800963a:	f104 091a 	add.w	r9, r4, #26
 800963e:	e7f2      	b.n	8009626 <_printf_float+0x40e>
 8009640:	2301      	movs	r3, #1
 8009642:	4642      	mov	r2, r8
 8009644:	e7df      	b.n	8009606 <_printf_float+0x3ee>
 8009646:	2301      	movs	r3, #1
 8009648:	464a      	mov	r2, r9
 800964a:	4631      	mov	r1, r6
 800964c:	4628      	mov	r0, r5
 800964e:	47b8      	blx	r7
 8009650:	3001      	adds	r0, #1
 8009652:	f43f ae3c 	beq.w	80092ce <_printf_float+0xb6>
 8009656:	f108 0801 	add.w	r8, r8, #1
 800965a:	68e3      	ldr	r3, [r4, #12]
 800965c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800965e:	1a5b      	subs	r3, r3, r1
 8009660:	4543      	cmp	r3, r8
 8009662:	dcf0      	bgt.n	8009646 <_printf_float+0x42e>
 8009664:	e6fd      	b.n	8009462 <_printf_float+0x24a>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	f104 0919 	add.w	r9, r4, #25
 800966e:	e7f4      	b.n	800965a <_printf_float+0x442>

08009670 <_printf_common>:
 8009670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	4616      	mov	r6, r2
 8009676:	4699      	mov	r9, r3
 8009678:	688a      	ldr	r2, [r1, #8]
 800967a:	690b      	ldr	r3, [r1, #16]
 800967c:	4607      	mov	r7, r0
 800967e:	4293      	cmp	r3, r2
 8009680:	bfb8      	it	lt
 8009682:	4613      	movlt	r3, r2
 8009684:	6033      	str	r3, [r6, #0]
 8009686:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800968a:	460c      	mov	r4, r1
 800968c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009690:	b10a      	cbz	r2, 8009696 <_printf_common+0x26>
 8009692:	3301      	adds	r3, #1
 8009694:	6033      	str	r3, [r6, #0]
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	0699      	lsls	r1, r3, #26
 800969a:	bf42      	ittt	mi
 800969c:	6833      	ldrmi	r3, [r6, #0]
 800969e:	3302      	addmi	r3, #2
 80096a0:	6033      	strmi	r3, [r6, #0]
 80096a2:	6825      	ldr	r5, [r4, #0]
 80096a4:	f015 0506 	ands.w	r5, r5, #6
 80096a8:	d106      	bne.n	80096b8 <_printf_common+0x48>
 80096aa:	f104 0a19 	add.w	sl, r4, #25
 80096ae:	68e3      	ldr	r3, [r4, #12]
 80096b0:	6832      	ldr	r2, [r6, #0]
 80096b2:	1a9b      	subs	r3, r3, r2
 80096b4:	42ab      	cmp	r3, r5
 80096b6:	dc28      	bgt.n	800970a <_printf_common+0x9a>
 80096b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096bc:	1e13      	subs	r3, r2, #0
 80096be:	6822      	ldr	r2, [r4, #0]
 80096c0:	bf18      	it	ne
 80096c2:	2301      	movne	r3, #1
 80096c4:	0692      	lsls	r2, r2, #26
 80096c6:	d42d      	bmi.n	8009724 <_printf_common+0xb4>
 80096c8:	4649      	mov	r1, r9
 80096ca:	4638      	mov	r0, r7
 80096cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d0:	47c0      	blx	r8
 80096d2:	3001      	adds	r0, #1
 80096d4:	d020      	beq.n	8009718 <_printf_common+0xa8>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	68e5      	ldr	r5, [r4, #12]
 80096da:	f003 0306 	and.w	r3, r3, #6
 80096de:	2b04      	cmp	r3, #4
 80096e0:	bf18      	it	ne
 80096e2:	2500      	movne	r5, #0
 80096e4:	6832      	ldr	r2, [r6, #0]
 80096e6:	f04f 0600 	mov.w	r6, #0
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	bf08      	it	eq
 80096ee:	1aad      	subeq	r5, r5, r2
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	bf08      	it	eq
 80096f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f8:	4293      	cmp	r3, r2
 80096fa:	bfc4      	itt	gt
 80096fc:	1a9b      	subgt	r3, r3, r2
 80096fe:	18ed      	addgt	r5, r5, r3
 8009700:	341a      	adds	r4, #26
 8009702:	42b5      	cmp	r5, r6
 8009704:	d11a      	bne.n	800973c <_printf_common+0xcc>
 8009706:	2000      	movs	r0, #0
 8009708:	e008      	b.n	800971c <_printf_common+0xac>
 800970a:	2301      	movs	r3, #1
 800970c:	4652      	mov	r2, sl
 800970e:	4649      	mov	r1, r9
 8009710:	4638      	mov	r0, r7
 8009712:	47c0      	blx	r8
 8009714:	3001      	adds	r0, #1
 8009716:	d103      	bne.n	8009720 <_printf_common+0xb0>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	3501      	adds	r5, #1
 8009722:	e7c4      	b.n	80096ae <_printf_common+0x3e>
 8009724:	2030      	movs	r0, #48	; 0x30
 8009726:	18e1      	adds	r1, r4, r3
 8009728:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009732:	4422      	add	r2, r4
 8009734:	3302      	adds	r3, #2
 8009736:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800973a:	e7c5      	b.n	80096c8 <_printf_common+0x58>
 800973c:	2301      	movs	r3, #1
 800973e:	4622      	mov	r2, r4
 8009740:	4649      	mov	r1, r9
 8009742:	4638      	mov	r0, r7
 8009744:	47c0      	blx	r8
 8009746:	3001      	adds	r0, #1
 8009748:	d0e6      	beq.n	8009718 <_printf_common+0xa8>
 800974a:	3601      	adds	r6, #1
 800974c:	e7d9      	b.n	8009702 <_printf_common+0x92>
	...

08009750 <_printf_i>:
 8009750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009754:	7e0f      	ldrb	r7, [r1, #24]
 8009756:	4691      	mov	r9, r2
 8009758:	2f78      	cmp	r7, #120	; 0x78
 800975a:	4680      	mov	r8, r0
 800975c:	460c      	mov	r4, r1
 800975e:	469a      	mov	sl, r3
 8009760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009766:	d807      	bhi.n	8009778 <_printf_i+0x28>
 8009768:	2f62      	cmp	r7, #98	; 0x62
 800976a:	d80a      	bhi.n	8009782 <_printf_i+0x32>
 800976c:	2f00      	cmp	r7, #0
 800976e:	f000 80d9 	beq.w	8009924 <_printf_i+0x1d4>
 8009772:	2f58      	cmp	r7, #88	; 0x58
 8009774:	f000 80a4 	beq.w	80098c0 <_printf_i+0x170>
 8009778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800977c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009780:	e03a      	b.n	80097f8 <_printf_i+0xa8>
 8009782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009786:	2b15      	cmp	r3, #21
 8009788:	d8f6      	bhi.n	8009778 <_printf_i+0x28>
 800978a:	a101      	add	r1, pc, #4	; (adr r1, 8009790 <_printf_i+0x40>)
 800978c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009790:	080097e9 	.word	0x080097e9
 8009794:	080097fd 	.word	0x080097fd
 8009798:	08009779 	.word	0x08009779
 800979c:	08009779 	.word	0x08009779
 80097a0:	08009779 	.word	0x08009779
 80097a4:	08009779 	.word	0x08009779
 80097a8:	080097fd 	.word	0x080097fd
 80097ac:	08009779 	.word	0x08009779
 80097b0:	08009779 	.word	0x08009779
 80097b4:	08009779 	.word	0x08009779
 80097b8:	08009779 	.word	0x08009779
 80097bc:	0800990b 	.word	0x0800990b
 80097c0:	0800982d 	.word	0x0800982d
 80097c4:	080098ed 	.word	0x080098ed
 80097c8:	08009779 	.word	0x08009779
 80097cc:	08009779 	.word	0x08009779
 80097d0:	0800992d 	.word	0x0800992d
 80097d4:	08009779 	.word	0x08009779
 80097d8:	0800982d 	.word	0x0800982d
 80097dc:	08009779 	.word	0x08009779
 80097e0:	08009779 	.word	0x08009779
 80097e4:	080098f5 	.word	0x080098f5
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0a4      	b.n	8009946 <_printf_i+0x1f6>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	6829      	ldr	r1, [r5, #0]
 8009800:	0606      	lsls	r6, r0, #24
 8009802:	f101 0304 	add.w	r3, r1, #4
 8009806:	d50a      	bpl.n	800981e <_printf_i+0xce>
 8009808:	680e      	ldr	r6, [r1, #0]
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	2e00      	cmp	r6, #0
 800980e:	da03      	bge.n	8009818 <_printf_i+0xc8>
 8009810:	232d      	movs	r3, #45	; 0x2d
 8009812:	4276      	negs	r6, r6
 8009814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009818:	230a      	movs	r3, #10
 800981a:	485e      	ldr	r0, [pc, #376]	; (8009994 <_printf_i+0x244>)
 800981c:	e019      	b.n	8009852 <_printf_i+0x102>
 800981e:	680e      	ldr	r6, [r1, #0]
 8009820:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	bf18      	it	ne
 8009828:	b236      	sxthne	r6, r6
 800982a:	e7ef      	b.n	800980c <_printf_i+0xbc>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	1d19      	adds	r1, r3, #4
 8009832:	6029      	str	r1, [r5, #0]
 8009834:	0601      	lsls	r1, r0, #24
 8009836:	d501      	bpl.n	800983c <_printf_i+0xec>
 8009838:	681e      	ldr	r6, [r3, #0]
 800983a:	e002      	b.n	8009842 <_printf_i+0xf2>
 800983c:	0646      	lsls	r6, r0, #25
 800983e:	d5fb      	bpl.n	8009838 <_printf_i+0xe8>
 8009840:	881e      	ldrh	r6, [r3, #0]
 8009842:	2f6f      	cmp	r7, #111	; 0x6f
 8009844:	bf0c      	ite	eq
 8009846:	2308      	moveq	r3, #8
 8009848:	230a      	movne	r3, #10
 800984a:	4852      	ldr	r0, [pc, #328]	; (8009994 <_printf_i+0x244>)
 800984c:	2100      	movs	r1, #0
 800984e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009852:	6865      	ldr	r5, [r4, #4]
 8009854:	2d00      	cmp	r5, #0
 8009856:	bfa8      	it	ge
 8009858:	6821      	ldrge	r1, [r4, #0]
 800985a:	60a5      	str	r5, [r4, #8]
 800985c:	bfa4      	itt	ge
 800985e:	f021 0104 	bicge.w	r1, r1, #4
 8009862:	6021      	strge	r1, [r4, #0]
 8009864:	b90e      	cbnz	r6, 800986a <_printf_i+0x11a>
 8009866:	2d00      	cmp	r5, #0
 8009868:	d04d      	beq.n	8009906 <_printf_i+0x1b6>
 800986a:	4615      	mov	r5, r2
 800986c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009870:	fb03 6711 	mls	r7, r3, r1, r6
 8009874:	5dc7      	ldrb	r7, [r0, r7]
 8009876:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800987a:	4637      	mov	r7, r6
 800987c:	42bb      	cmp	r3, r7
 800987e:	460e      	mov	r6, r1
 8009880:	d9f4      	bls.n	800986c <_printf_i+0x11c>
 8009882:	2b08      	cmp	r3, #8
 8009884:	d10b      	bne.n	800989e <_printf_i+0x14e>
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	07de      	lsls	r6, r3, #31
 800988a:	d508      	bpl.n	800989e <_printf_i+0x14e>
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	6861      	ldr	r1, [r4, #4]
 8009890:	4299      	cmp	r1, r3
 8009892:	bfde      	ittt	le
 8009894:	2330      	movle	r3, #48	; 0x30
 8009896:	f805 3c01 	strble.w	r3, [r5, #-1]
 800989a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800989e:	1b52      	subs	r2, r2, r5
 80098a0:	6122      	str	r2, [r4, #16]
 80098a2:	464b      	mov	r3, r9
 80098a4:	4621      	mov	r1, r4
 80098a6:	4640      	mov	r0, r8
 80098a8:	f8cd a000 	str.w	sl, [sp]
 80098ac:	aa03      	add	r2, sp, #12
 80098ae:	f7ff fedf 	bl	8009670 <_printf_common>
 80098b2:	3001      	adds	r0, #1
 80098b4:	d14c      	bne.n	8009950 <_printf_i+0x200>
 80098b6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ba:	b004      	add	sp, #16
 80098bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c0:	4834      	ldr	r0, [pc, #208]	; (8009994 <_printf_i+0x244>)
 80098c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098c6:	6829      	ldr	r1, [r5, #0]
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80098ce:	6029      	str	r1, [r5, #0]
 80098d0:	061d      	lsls	r5, r3, #24
 80098d2:	d514      	bpl.n	80098fe <_printf_i+0x1ae>
 80098d4:	07df      	lsls	r7, r3, #31
 80098d6:	bf44      	itt	mi
 80098d8:	f043 0320 	orrmi.w	r3, r3, #32
 80098dc:	6023      	strmi	r3, [r4, #0]
 80098de:	b91e      	cbnz	r6, 80098e8 <_printf_i+0x198>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	f023 0320 	bic.w	r3, r3, #32
 80098e6:	6023      	str	r3, [r4, #0]
 80098e8:	2310      	movs	r3, #16
 80098ea:	e7af      	b.n	800984c <_printf_i+0xfc>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	f043 0320 	orr.w	r3, r3, #32
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	2378      	movs	r3, #120	; 0x78
 80098f6:	4828      	ldr	r0, [pc, #160]	; (8009998 <_printf_i+0x248>)
 80098f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098fc:	e7e3      	b.n	80098c6 <_printf_i+0x176>
 80098fe:	0659      	lsls	r1, r3, #25
 8009900:	bf48      	it	mi
 8009902:	b2b6      	uxthmi	r6, r6
 8009904:	e7e6      	b.n	80098d4 <_printf_i+0x184>
 8009906:	4615      	mov	r5, r2
 8009908:	e7bb      	b.n	8009882 <_printf_i+0x132>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	6826      	ldr	r6, [r4, #0]
 800990e:	1d18      	adds	r0, r3, #4
 8009910:	6961      	ldr	r1, [r4, #20]
 8009912:	6028      	str	r0, [r5, #0]
 8009914:	0635      	lsls	r5, r6, #24
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	d501      	bpl.n	800991e <_printf_i+0x1ce>
 800991a:	6019      	str	r1, [r3, #0]
 800991c:	e002      	b.n	8009924 <_printf_i+0x1d4>
 800991e:	0670      	lsls	r0, r6, #25
 8009920:	d5fb      	bpl.n	800991a <_printf_i+0x1ca>
 8009922:	8019      	strh	r1, [r3, #0]
 8009924:	2300      	movs	r3, #0
 8009926:	4615      	mov	r5, r2
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	e7ba      	b.n	80098a2 <_printf_i+0x152>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	2100      	movs	r1, #0
 8009930:	1d1a      	adds	r2, r3, #4
 8009932:	602a      	str	r2, [r5, #0]
 8009934:	681d      	ldr	r5, [r3, #0]
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	4628      	mov	r0, r5
 800993a:	f000 ff23 	bl	800a784 <memchr>
 800993e:	b108      	cbz	r0, 8009944 <_printf_i+0x1f4>
 8009940:	1b40      	subs	r0, r0, r5
 8009942:	6060      	str	r0, [r4, #4]
 8009944:	6863      	ldr	r3, [r4, #4]
 8009946:	6123      	str	r3, [r4, #16]
 8009948:	2300      	movs	r3, #0
 800994a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994e:	e7a8      	b.n	80098a2 <_printf_i+0x152>
 8009950:	462a      	mov	r2, r5
 8009952:	4649      	mov	r1, r9
 8009954:	4640      	mov	r0, r8
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	47d0      	blx	sl
 800995a:	3001      	adds	r0, #1
 800995c:	d0ab      	beq.n	80098b6 <_printf_i+0x166>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	079b      	lsls	r3, r3, #30
 8009962:	d413      	bmi.n	800998c <_printf_i+0x23c>
 8009964:	68e0      	ldr	r0, [r4, #12]
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	4298      	cmp	r0, r3
 800996a:	bfb8      	it	lt
 800996c:	4618      	movlt	r0, r3
 800996e:	e7a4      	b.n	80098ba <_printf_i+0x16a>
 8009970:	2301      	movs	r3, #1
 8009972:	4632      	mov	r2, r6
 8009974:	4649      	mov	r1, r9
 8009976:	4640      	mov	r0, r8
 8009978:	47d0      	blx	sl
 800997a:	3001      	adds	r0, #1
 800997c:	d09b      	beq.n	80098b6 <_printf_i+0x166>
 800997e:	3501      	adds	r5, #1
 8009980:	68e3      	ldr	r3, [r4, #12]
 8009982:	9903      	ldr	r1, [sp, #12]
 8009984:	1a5b      	subs	r3, r3, r1
 8009986:	42ab      	cmp	r3, r5
 8009988:	dcf2      	bgt.n	8009970 <_printf_i+0x220>
 800998a:	e7eb      	b.n	8009964 <_printf_i+0x214>
 800998c:	2500      	movs	r5, #0
 800998e:	f104 0619 	add.w	r6, r4, #25
 8009992:	e7f5      	b.n	8009980 <_printf_i+0x230>
 8009994:	0800c1a6 	.word	0x0800c1a6
 8009998:	0800c1b7 	.word	0x0800c1b7

0800999c <_sbrk_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	2300      	movs	r3, #0
 80099a0:	4d05      	ldr	r5, [pc, #20]	; (80099b8 <_sbrk_r+0x1c>)
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	f7f9 fbd4 	bl	8003154 <_sbrk>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_sbrk_r+0x1a>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_sbrk_r+0x1a>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	20000384 	.word	0x20000384

080099bc <_raise_r>:
 80099bc:	291f      	cmp	r1, #31
 80099be:	b538      	push	{r3, r4, r5, lr}
 80099c0:	4604      	mov	r4, r0
 80099c2:	460d      	mov	r5, r1
 80099c4:	d904      	bls.n	80099d0 <_raise_r+0x14>
 80099c6:	2316      	movs	r3, #22
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099d2:	b112      	cbz	r2, 80099da <_raise_r+0x1e>
 80099d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099d8:	b94b      	cbnz	r3, 80099ee <_raise_r+0x32>
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 f830 	bl	8009a40 <_getpid_r>
 80099e0:	462a      	mov	r2, r5
 80099e2:	4601      	mov	r1, r0
 80099e4:	4620      	mov	r0, r4
 80099e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ea:	f000 b817 	b.w	8009a1c <_kill_r>
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d00a      	beq.n	8009a08 <_raise_r+0x4c>
 80099f2:	1c59      	adds	r1, r3, #1
 80099f4:	d103      	bne.n	80099fe <_raise_r+0x42>
 80099f6:	2316      	movs	r3, #22
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	2001      	movs	r0, #1
 80099fc:	e7e7      	b.n	80099ce <_raise_r+0x12>
 80099fe:	2400      	movs	r4, #0
 8009a00:	4628      	mov	r0, r5
 8009a02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a06:	4798      	blx	r3
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e7e0      	b.n	80099ce <_raise_r+0x12>

08009a0c <raise>:
 8009a0c:	4b02      	ldr	r3, [pc, #8]	; (8009a18 <raise+0xc>)
 8009a0e:	4601      	mov	r1, r0
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	f7ff bfd3 	b.w	80099bc <_raise_r>
 8009a16:	bf00      	nop
 8009a18:	2000000c 	.word	0x2000000c

08009a1c <_kill_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4d06      	ldr	r5, [pc, #24]	; (8009a3c <_kill_r+0x20>)
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	f7f9 fb10 	bl	800304e <_kill>
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	d102      	bne.n	8009a38 <_kill_r+0x1c>
 8009a32:	682b      	ldr	r3, [r5, #0]
 8009a34:	b103      	cbz	r3, 8009a38 <_kill_r+0x1c>
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	bd38      	pop	{r3, r4, r5, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000384 	.word	0x20000384

08009a40 <_getpid_r>:
 8009a40:	f7f9 bafe 	b.w	8003040 <_getpid>

08009a44 <siprintf>:
 8009a44:	b40e      	push	{r1, r2, r3}
 8009a46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a4a:	b500      	push	{lr}
 8009a4c:	b09c      	sub	sp, #112	; 0x70
 8009a4e:	ab1d      	add	r3, sp, #116	; 0x74
 8009a50:	9002      	str	r0, [sp, #8]
 8009a52:	9006      	str	r0, [sp, #24]
 8009a54:	9107      	str	r1, [sp, #28]
 8009a56:	9104      	str	r1, [sp, #16]
 8009a58:	4808      	ldr	r0, [pc, #32]	; (8009a7c <siprintf+0x38>)
 8009a5a:	4909      	ldr	r1, [pc, #36]	; (8009a80 <siprintf+0x3c>)
 8009a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a60:	9105      	str	r1, [sp, #20]
 8009a62:	6800      	ldr	r0, [r0, #0]
 8009a64:	a902      	add	r1, sp, #8
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	f001 faa6 	bl	800afb8 <_svfiprintf_r>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	9b02      	ldr	r3, [sp, #8]
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	b01c      	add	sp, #112	; 0x70
 8009a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a78:	b003      	add	sp, #12
 8009a7a:	4770      	bx	lr
 8009a7c:	2000000c 	.word	0x2000000c
 8009a80:	ffff0208 	.word	0xffff0208

08009a84 <quorem>:
 8009a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a88:	6903      	ldr	r3, [r0, #16]
 8009a8a:	690c      	ldr	r4, [r1, #16]
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	42a3      	cmp	r3, r4
 8009a90:	f2c0 8082 	blt.w	8009b98 <quorem+0x114>
 8009a94:	3c01      	subs	r4, #1
 8009a96:	f100 0514 	add.w	r5, r0, #20
 8009a9a:	f101 0814 	add.w	r8, r1, #20
 8009a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aac:	3301      	adds	r3, #1
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ab4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ab8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009abc:	d331      	bcc.n	8009b22 <quorem+0x9e>
 8009abe:	f04f 0e00 	mov.w	lr, #0
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	46ac      	mov	ip, r5
 8009ac6:	46f2      	mov	sl, lr
 8009ac8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009acc:	b293      	uxth	r3, r2
 8009ace:	fb06 e303 	mla	r3, r6, r3, lr
 8009ad2:	0c12      	lsrs	r2, r2, #16
 8009ad4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	fb06 e202 	mla	r2, r6, r2, lr
 8009ade:	ebaa 0303 	sub.w	r3, sl, r3
 8009ae2:	f8dc a000 	ldr.w	sl, [ip]
 8009ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009aea:	fa1f fa8a 	uxth.w	sl, sl
 8009aee:	4453      	add	r3, sl
 8009af0:	f8dc a000 	ldr.w	sl, [ip]
 8009af4:	b292      	uxth	r2, r2
 8009af6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009afa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b04:	4581      	cmp	r9, r0
 8009b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b0a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b0e:	d2db      	bcs.n	8009ac8 <quorem+0x44>
 8009b10:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b14:	b92b      	cbnz	r3, 8009b22 <quorem+0x9e>
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	3b04      	subs	r3, #4
 8009b1a:	429d      	cmp	r5, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	d32f      	bcc.n	8009b80 <quorem+0xfc>
 8009b20:	613c      	str	r4, [r7, #16]
 8009b22:	4638      	mov	r0, r7
 8009b24:	f001 f8d4 	bl	800acd0 <__mcmp>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	db25      	blt.n	8009b78 <quorem+0xf4>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f04f 0c00 	mov.w	ip, #0
 8009b32:	3601      	adds	r6, #1
 8009b34:	f858 1b04 	ldr.w	r1, [r8], #4
 8009b38:	f8d0 e000 	ldr.w	lr, [r0]
 8009b3c:	b28b      	uxth	r3, r1
 8009b3e:	ebac 0303 	sub.w	r3, ip, r3
 8009b42:	fa1f f28e 	uxth.w	r2, lr
 8009b46:	4413      	add	r3, r2
 8009b48:	0c0a      	lsrs	r2, r1, #16
 8009b4a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b58:	45c1      	cmp	r9, r8
 8009b5a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b5e:	f840 3b04 	str.w	r3, [r0], #4
 8009b62:	d2e7      	bcs.n	8009b34 <quorem+0xb0>
 8009b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b6c:	b922      	cbnz	r2, 8009b78 <quorem+0xf4>
 8009b6e:	3b04      	subs	r3, #4
 8009b70:	429d      	cmp	r5, r3
 8009b72:	461a      	mov	r2, r3
 8009b74:	d30a      	bcc.n	8009b8c <quorem+0x108>
 8009b76:	613c      	str	r4, [r7, #16]
 8009b78:	4630      	mov	r0, r6
 8009b7a:	b003      	add	sp, #12
 8009b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b80:	6812      	ldr	r2, [r2, #0]
 8009b82:	3b04      	subs	r3, #4
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	d1cb      	bne.n	8009b20 <quorem+0x9c>
 8009b88:	3c01      	subs	r4, #1
 8009b8a:	e7c6      	b.n	8009b1a <quorem+0x96>
 8009b8c:	6812      	ldr	r2, [r2, #0]
 8009b8e:	3b04      	subs	r3, #4
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	d1f0      	bne.n	8009b76 <quorem+0xf2>
 8009b94:	3c01      	subs	r4, #1
 8009b96:	e7eb      	b.n	8009b70 <quorem+0xec>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e7ee      	b.n	8009b7a <quorem+0xf6>
 8009b9c:	0000      	movs	r0, r0
	...

08009ba0 <_dtoa_r>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	4616      	mov	r6, r2
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009baa:	b099      	sub	sp, #100	; 0x64
 8009bac:	4605      	mov	r5, r0
 8009bae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009bb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009bb6:	b974      	cbnz	r4, 8009bd6 <_dtoa_r+0x36>
 8009bb8:	2010      	movs	r0, #16
 8009bba:	f7ff f9a3 	bl	8008f04 <malloc>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	6268      	str	r0, [r5, #36]	; 0x24
 8009bc2:	b920      	cbnz	r0, 8009bce <_dtoa_r+0x2e>
 8009bc4:	21ea      	movs	r1, #234	; 0xea
 8009bc6:	4ba8      	ldr	r3, [pc, #672]	; (8009e68 <_dtoa_r+0x2c8>)
 8009bc8:	48a8      	ldr	r0, [pc, #672]	; (8009e6c <_dtoa_r+0x2cc>)
 8009bca:	f001 faf5 	bl	800b1b8 <__assert_func>
 8009bce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bd2:	6004      	str	r4, [r0, #0]
 8009bd4:	60c4      	str	r4, [r0, #12]
 8009bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bd8:	6819      	ldr	r1, [r3, #0]
 8009bda:	b151      	cbz	r1, 8009bf2 <_dtoa_r+0x52>
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	2301      	movs	r3, #1
 8009be0:	4093      	lsls	r3, r2
 8009be2:	604a      	str	r2, [r1, #4]
 8009be4:	608b      	str	r3, [r1, #8]
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 fe34 	bl	800a854 <_Bfree>
 8009bec:	2200      	movs	r2, #0
 8009bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	1e3b      	subs	r3, r7, #0
 8009bf4:	bfaf      	iteee	ge
 8009bf6:	2300      	movge	r3, #0
 8009bf8:	2201      	movlt	r2, #1
 8009bfa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bfe:	9305      	strlt	r3, [sp, #20]
 8009c00:	bfa8      	it	ge
 8009c02:	f8c8 3000 	strge.w	r3, [r8]
 8009c06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009c0a:	4b99      	ldr	r3, [pc, #612]	; (8009e70 <_dtoa_r+0x2d0>)
 8009c0c:	bfb8      	it	lt
 8009c0e:	f8c8 2000 	strlt.w	r2, [r8]
 8009c12:	ea33 0309 	bics.w	r3, r3, r9
 8009c16:	d119      	bne.n	8009c4c <_dtoa_r+0xac>
 8009c18:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c24:	4333      	orrs	r3, r6
 8009c26:	f000 857f 	beq.w	800a728 <_dtoa_r+0xb88>
 8009c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c2c:	b953      	cbnz	r3, 8009c44 <_dtoa_r+0xa4>
 8009c2e:	4b91      	ldr	r3, [pc, #580]	; (8009e74 <_dtoa_r+0x2d4>)
 8009c30:	e022      	b.n	8009c78 <_dtoa_r+0xd8>
 8009c32:	4b91      	ldr	r3, [pc, #580]	; (8009e78 <_dtoa_r+0x2d8>)
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	3308      	adds	r3, #8
 8009c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	9803      	ldr	r0, [sp, #12]
 8009c3e:	b019      	add	sp, #100	; 0x64
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	4b8b      	ldr	r3, [pc, #556]	; (8009e74 <_dtoa_r+0x2d4>)
 8009c46:	9303      	str	r3, [sp, #12]
 8009c48:	3303      	adds	r3, #3
 8009c4a:	e7f5      	b.n	8009c38 <_dtoa_r+0x98>
 8009c4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f7f6 fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8009c60:	4680      	mov	r8, r0
 8009c62:	b158      	cbz	r0, 8009c7c <_dtoa_r+0xdc>
 8009c64:	2301      	movs	r3, #1
 8009c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 8558 	beq.w	800a722 <_dtoa_r+0xb82>
 8009c72:	4882      	ldr	r0, [pc, #520]	; (8009e7c <_dtoa_r+0x2dc>)
 8009c74:	6018      	str	r0, [r3, #0]
 8009c76:	1e43      	subs	r3, r0, #1
 8009c78:	9303      	str	r3, [sp, #12]
 8009c7a:	e7df      	b.n	8009c3c <_dtoa_r+0x9c>
 8009c7c:	ab16      	add	r3, sp, #88	; 0x58
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	ab17      	add	r3, sp, #92	; 0x5c
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	4628      	mov	r0, r5
 8009c86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009c8a:	f001 f8c9 	bl	800ae20 <__d2b>
 8009c8e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009c92:	4683      	mov	fp, r0
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d07f      	beq.n	8009d98 <_dtoa_r+0x1f8>
 8009c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ca6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009caa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009cae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4b72      	ldr	r3, [pc, #456]	; (8009e80 <_dtoa_r+0x2e0>)
 8009cb6:	f7f6 fa57 	bl	8000168 <__aeabi_dsub>
 8009cba:	a365      	add	r3, pc, #404	; (adr r3, 8009e50 <_dtoa_r+0x2b0>)
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f7f6 fc0a 	bl	80004d8 <__aeabi_dmul>
 8009cc4:	a364      	add	r3, pc, #400	; (adr r3, 8009e58 <_dtoa_r+0x2b8>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fa4f 	bl	800016c <__adddf3>
 8009cce:	4606      	mov	r6, r0
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	460f      	mov	r7, r1
 8009cd4:	f7f6 fb96 	bl	8000404 <__aeabi_i2d>
 8009cd8:	a361      	add	r3, pc, #388	; (adr r3, 8009e60 <_dtoa_r+0x2c0>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	f7f6 fbfb 	bl	80004d8 <__aeabi_dmul>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	4639      	mov	r1, r7
 8009cea:	f7f6 fa3f 	bl	800016c <__adddf3>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	f7f6 fea1 	bl	8000a38 <__aeabi_d2iz>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	4639      	mov	r1, r7
 8009d00:	f7f6 fe5c 	bl	80009bc <__aeabi_dcmplt>
 8009d04:	b148      	cbz	r0, 8009d1a <_dtoa_r+0x17a>
 8009d06:	4650      	mov	r0, sl
 8009d08:	f7f6 fb7c 	bl	8000404 <__aeabi_i2d>
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	f7f6 fe4a 	bl	80009a8 <__aeabi_dcmpeq>
 8009d14:	b908      	cbnz	r0, 8009d1a <_dtoa_r+0x17a>
 8009d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d1a:	f1ba 0f16 	cmp.w	sl, #22
 8009d1e:	d858      	bhi.n	8009dd2 <_dtoa_r+0x232>
 8009d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d24:	4b57      	ldr	r3, [pc, #348]	; (8009e84 <_dtoa_r+0x2e4>)
 8009d26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f7f6 fe45 	bl	80009bc <__aeabi_dcmplt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d04f      	beq.n	8009dd6 <_dtoa_r+0x236>
 8009d36:	2300      	movs	r3, #0
 8009d38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d40:	1b1c      	subs	r4, r3, r4
 8009d42:	1e63      	subs	r3, r4, #1
 8009d44:	9309      	str	r3, [sp, #36]	; 0x24
 8009d46:	bf49      	itett	mi
 8009d48:	f1c4 0301 	rsbmi	r3, r4, #1
 8009d4c:	2300      	movpl	r3, #0
 8009d4e:	9306      	strmi	r3, [sp, #24]
 8009d50:	2300      	movmi	r3, #0
 8009d52:	bf54      	ite	pl
 8009d54:	9306      	strpl	r3, [sp, #24]
 8009d56:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	db3d      	blt.n	8009dda <_dtoa_r+0x23a>
 8009d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d60:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009d64:	4453      	add	r3, sl
 8009d66:	9309      	str	r3, [sp, #36]	; 0x24
 8009d68:	2300      	movs	r3, #0
 8009d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d6e:	2b09      	cmp	r3, #9
 8009d70:	f200 808c 	bhi.w	8009e8c <_dtoa_r+0x2ec>
 8009d74:	2b05      	cmp	r3, #5
 8009d76:	bfc4      	itt	gt
 8009d78:	3b04      	subgt	r3, #4
 8009d7a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d7e:	bfc8      	it	gt
 8009d80:	2400      	movgt	r4, #0
 8009d82:	f1a3 0302 	sub.w	r3, r3, #2
 8009d86:	bfd8      	it	le
 8009d88:	2401      	movle	r4, #1
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	f200 808a 	bhi.w	8009ea4 <_dtoa_r+0x304>
 8009d90:	e8df f003 	tbb	[pc, r3]
 8009d94:	5b4d4f2d 	.word	0x5b4d4f2d
 8009d98:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009d9c:	441c      	add	r4, r3
 8009d9e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009da2:	2b20      	cmp	r3, #32
 8009da4:	bfc3      	ittte	gt
 8009da6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009daa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009dae:	fa09 f303 	lslgt.w	r3, r9, r3
 8009db2:	f1c3 0320 	rsble	r3, r3, #32
 8009db6:	bfc6      	itte	gt
 8009db8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009dbc:	4318      	orrgt	r0, r3
 8009dbe:	fa06 f003 	lslle.w	r0, r6, r3
 8009dc2:	f7f6 fb0f 	bl	80003e4 <__aeabi_ui2d>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009dcc:	3c01      	subs	r4, #1
 8009dce:	9313      	str	r3, [sp, #76]	; 0x4c
 8009dd0:	e76f      	b.n	8009cb2 <_dtoa_r+0x112>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e7b2      	b.n	8009d3c <_dtoa_r+0x19c>
 8009dd6:	900f      	str	r0, [sp, #60]	; 0x3c
 8009dd8:	e7b1      	b.n	8009d3e <_dtoa_r+0x19e>
 8009dda:	9b06      	ldr	r3, [sp, #24]
 8009ddc:	eba3 030a 	sub.w	r3, r3, sl
 8009de0:	9306      	str	r3, [sp, #24]
 8009de2:	f1ca 0300 	rsb	r3, sl, #0
 8009de6:	930a      	str	r3, [sp, #40]	; 0x28
 8009de8:	2300      	movs	r3, #0
 8009dea:	930e      	str	r3, [sp, #56]	; 0x38
 8009dec:	e7be      	b.n	8009d6c <_dtoa_r+0x1cc>
 8009dee:	2300      	movs	r3, #0
 8009df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009df2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dc58      	bgt.n	8009eaa <_dtoa_r+0x30a>
 8009df8:	f04f 0901 	mov.w	r9, #1
 8009dfc:	464b      	mov	r3, r9
 8009dfe:	f8cd 9020 	str.w	r9, [sp, #32]
 8009e02:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009e06:	2200      	movs	r2, #0
 8009e08:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009e0a:	6042      	str	r2, [r0, #4]
 8009e0c:	2204      	movs	r2, #4
 8009e0e:	f102 0614 	add.w	r6, r2, #20
 8009e12:	429e      	cmp	r6, r3
 8009e14:	6841      	ldr	r1, [r0, #4]
 8009e16:	d94e      	bls.n	8009eb6 <_dtoa_r+0x316>
 8009e18:	4628      	mov	r0, r5
 8009e1a:	f000 fcdb 	bl	800a7d4 <_Balloc>
 8009e1e:	9003      	str	r0, [sp, #12]
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d14c      	bne.n	8009ebe <_dtoa_r+0x31e>
 8009e24:	4602      	mov	r2, r0
 8009e26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009e2a:	4b17      	ldr	r3, [pc, #92]	; (8009e88 <_dtoa_r+0x2e8>)
 8009e2c:	e6cc      	b.n	8009bc8 <_dtoa_r+0x28>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e7de      	b.n	8009df0 <_dtoa_r+0x250>
 8009e32:	2300      	movs	r3, #0
 8009e34:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e38:	eb0a 0903 	add.w	r9, sl, r3
 8009e3c:	f109 0301 	add.w	r3, r9, #1
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	9308      	str	r3, [sp, #32]
 8009e44:	bfb8      	it	lt
 8009e46:	2301      	movlt	r3, #1
 8009e48:	e7dd      	b.n	8009e06 <_dtoa_r+0x266>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e7f2      	b.n	8009e34 <_dtoa_r+0x294>
 8009e4e:	bf00      	nop
 8009e50:	636f4361 	.word	0x636f4361
 8009e54:	3fd287a7 	.word	0x3fd287a7
 8009e58:	8b60c8b3 	.word	0x8b60c8b3
 8009e5c:	3fc68a28 	.word	0x3fc68a28
 8009e60:	509f79fb 	.word	0x509f79fb
 8009e64:	3fd34413 	.word	0x3fd34413
 8009e68:	0800c1d5 	.word	0x0800c1d5
 8009e6c:	0800c1ec 	.word	0x0800c1ec
 8009e70:	7ff00000 	.word	0x7ff00000
 8009e74:	0800c1d1 	.word	0x0800c1d1
 8009e78:	0800c1c8 	.word	0x0800c1c8
 8009e7c:	0800c1a5 	.word	0x0800c1a5
 8009e80:	3ff80000 	.word	0x3ff80000
 8009e84:	0800c2e0 	.word	0x0800c2e0
 8009e88:	0800c247 	.word	0x0800c247
 8009e8c:	2401      	movs	r4, #1
 8009e8e:	2300      	movs	r3, #0
 8009e90:	940b      	str	r4, [sp, #44]	; 0x2c
 8009e92:	9322      	str	r3, [sp, #136]	; 0x88
 8009e94:	f04f 39ff 	mov.w	r9, #4294967295
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2312      	movs	r3, #18
 8009e9c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009ea0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009ea2:	e7b0      	b.n	8009e06 <_dtoa_r+0x266>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ea8:	e7f4      	b.n	8009e94 <_dtoa_r+0x2f4>
 8009eaa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009eae:	464b      	mov	r3, r9
 8009eb0:	f8cd 9020 	str.w	r9, [sp, #32]
 8009eb4:	e7a7      	b.n	8009e06 <_dtoa_r+0x266>
 8009eb6:	3101      	adds	r1, #1
 8009eb8:	6041      	str	r1, [r0, #4]
 8009eba:	0052      	lsls	r2, r2, #1
 8009ebc:	e7a7      	b.n	8009e0e <_dtoa_r+0x26e>
 8009ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ec0:	9a03      	ldr	r2, [sp, #12]
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	9b08      	ldr	r3, [sp, #32]
 8009ec6:	2b0e      	cmp	r3, #14
 8009ec8:	f200 80a8 	bhi.w	800a01c <_dtoa_r+0x47c>
 8009ecc:	2c00      	cmp	r4, #0
 8009ece:	f000 80a5 	beq.w	800a01c <_dtoa_r+0x47c>
 8009ed2:	f1ba 0f00 	cmp.w	sl, #0
 8009ed6:	dd34      	ble.n	8009f42 <_dtoa_r+0x3a2>
 8009ed8:	4a9a      	ldr	r2, [pc, #616]	; (800a144 <_dtoa_r+0x5a4>)
 8009eda:	f00a 030f 	and.w	r3, sl, #15
 8009ede:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ee2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009ee6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009eea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009eee:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009ef2:	d016      	beq.n	8009f22 <_dtoa_r+0x382>
 8009ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ef8:	4b93      	ldr	r3, [pc, #588]	; (800a148 <_dtoa_r+0x5a8>)
 8009efa:	2703      	movs	r7, #3
 8009efc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f00:	f7f6 fc14 	bl	800072c <__aeabi_ddiv>
 8009f04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f08:	f004 040f 	and.w	r4, r4, #15
 8009f0c:	4e8e      	ldr	r6, [pc, #568]	; (800a148 <_dtoa_r+0x5a8>)
 8009f0e:	b954      	cbnz	r4, 8009f26 <_dtoa_r+0x386>
 8009f10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f18:	f7f6 fc08 	bl	800072c <__aeabi_ddiv>
 8009f1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f20:	e029      	b.n	8009f76 <_dtoa_r+0x3d6>
 8009f22:	2702      	movs	r7, #2
 8009f24:	e7f2      	b.n	8009f0c <_dtoa_r+0x36c>
 8009f26:	07e1      	lsls	r1, r4, #31
 8009f28:	d508      	bpl.n	8009f3c <_dtoa_r+0x39c>
 8009f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f32:	f7f6 fad1 	bl	80004d8 <__aeabi_dmul>
 8009f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f3a:	3701      	adds	r7, #1
 8009f3c:	1064      	asrs	r4, r4, #1
 8009f3e:	3608      	adds	r6, #8
 8009f40:	e7e5      	b.n	8009f0e <_dtoa_r+0x36e>
 8009f42:	f000 80a5 	beq.w	800a090 <_dtoa_r+0x4f0>
 8009f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f4a:	f1ca 0400 	rsb	r4, sl, #0
 8009f4e:	4b7d      	ldr	r3, [pc, #500]	; (800a144 <_dtoa_r+0x5a4>)
 8009f50:	f004 020f 	and.w	r2, r4, #15
 8009f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 fabc 	bl	80004d8 <__aeabi_dmul>
 8009f60:	2702      	movs	r7, #2
 8009f62:	2300      	movs	r3, #0
 8009f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f68:	4e77      	ldr	r6, [pc, #476]	; (800a148 <_dtoa_r+0x5a8>)
 8009f6a:	1124      	asrs	r4, r4, #4
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	f040 8084 	bne.w	800a07a <_dtoa_r+0x4da>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1d2      	bne.n	8009f1c <_dtoa_r+0x37c>
 8009f76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 808b 	beq.w	800a094 <_dtoa_r+0x4f4>
 8009f7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009f82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009f86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	4b6f      	ldr	r3, [pc, #444]	; (800a14c <_dtoa_r+0x5ac>)
 8009f8e:	f7f6 fd15 	bl	80009bc <__aeabi_dcmplt>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d07e      	beq.n	800a094 <_dtoa_r+0x4f4>
 8009f96:	9b08      	ldr	r3, [sp, #32]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d07b      	beq.n	800a094 <_dtoa_r+0x4f4>
 8009f9c:	f1b9 0f00 	cmp.w	r9, #0
 8009fa0:	dd38      	ble.n	800a014 <_dtoa_r+0x474>
 8009fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4b69      	ldr	r3, [pc, #420]	; (800a150 <_dtoa_r+0x5b0>)
 8009faa:	f7f6 fa95 	bl	80004d8 <__aeabi_dmul>
 8009fae:	464c      	mov	r4, r9
 8009fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fb4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009fb8:	3701      	adds	r7, #1
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f7f6 fa22 	bl	8000404 <__aeabi_i2d>
 8009fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fc4:	f7f6 fa88 	bl	80004d8 <__aeabi_dmul>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4b62      	ldr	r3, [pc, #392]	; (800a154 <_dtoa_r+0x5b4>)
 8009fcc:	f7f6 f8ce 	bl	800016c <__adddf3>
 8009fd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009fd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fd8:	9611      	str	r6, [sp, #68]	; 0x44
 8009fda:	2c00      	cmp	r4, #0
 8009fdc:	d15d      	bne.n	800a09a <_dtoa_r+0x4fa>
 8009fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4b5c      	ldr	r3, [pc, #368]	; (800a158 <_dtoa_r+0x5b8>)
 8009fe6:	f7f6 f8bf 	bl	8000168 <__aeabi_dsub>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ff2:	4633      	mov	r3, r6
 8009ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ff6:	f7f6 fcff 	bl	80009f8 <__aeabi_dcmpgt>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	f040 829c 	bne.w	800a538 <_dtoa_r+0x998>
 800a000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a006:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a00a:	f7f6 fcd7 	bl	80009bc <__aeabi_dcmplt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f040 8290 	bne.w	800a534 <_dtoa_r+0x994>
 800a014:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a018:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a01c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f2c0 8152 	blt.w	800a2c8 <_dtoa_r+0x728>
 800a024:	f1ba 0f0e 	cmp.w	sl, #14
 800a028:	f300 814e 	bgt.w	800a2c8 <_dtoa_r+0x728>
 800a02c:	4b45      	ldr	r3, [pc, #276]	; (800a144 <_dtoa_r+0x5a4>)
 800a02e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a032:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a036:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a03a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f280 80db 	bge.w	800a1f8 <_dtoa_r+0x658>
 800a042:	9b08      	ldr	r3, [sp, #32]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f300 80d7 	bgt.w	800a1f8 <_dtoa_r+0x658>
 800a04a:	f040 8272 	bne.w	800a532 <_dtoa_r+0x992>
 800a04e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a052:	2200      	movs	r2, #0
 800a054:	4b40      	ldr	r3, [pc, #256]	; (800a158 <_dtoa_r+0x5b8>)
 800a056:	f7f6 fa3f 	bl	80004d8 <__aeabi_dmul>
 800a05a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05e:	f7f6 fcc1 	bl	80009e4 <__aeabi_dcmpge>
 800a062:	9c08      	ldr	r4, [sp, #32]
 800a064:	4626      	mov	r6, r4
 800a066:	2800      	cmp	r0, #0
 800a068:	f040 8248 	bne.w	800a4fc <_dtoa_r+0x95c>
 800a06c:	2331      	movs	r3, #49	; 0x31
 800a06e:	9f03      	ldr	r7, [sp, #12]
 800a070:	f10a 0a01 	add.w	sl, sl, #1
 800a074:	f807 3b01 	strb.w	r3, [r7], #1
 800a078:	e244      	b.n	800a504 <_dtoa_r+0x964>
 800a07a:	07e2      	lsls	r2, r4, #31
 800a07c:	d505      	bpl.n	800a08a <_dtoa_r+0x4ea>
 800a07e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a082:	f7f6 fa29 	bl	80004d8 <__aeabi_dmul>
 800a086:	2301      	movs	r3, #1
 800a088:	3701      	adds	r7, #1
 800a08a:	1064      	asrs	r4, r4, #1
 800a08c:	3608      	adds	r6, #8
 800a08e:	e76d      	b.n	8009f6c <_dtoa_r+0x3cc>
 800a090:	2702      	movs	r7, #2
 800a092:	e770      	b.n	8009f76 <_dtoa_r+0x3d6>
 800a094:	46d0      	mov	r8, sl
 800a096:	9c08      	ldr	r4, [sp, #32]
 800a098:	e78f      	b.n	8009fba <_dtoa_r+0x41a>
 800a09a:	9903      	ldr	r1, [sp, #12]
 800a09c:	4b29      	ldr	r3, [pc, #164]	; (800a144 <_dtoa_r+0x5a4>)
 800a09e:	4421      	add	r1, r4
 800a0a0:	9112      	str	r1, [sp, #72]	; 0x48
 800a0a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a0ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	d055      	beq.n	800a160 <_dtoa_r+0x5c0>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	4929      	ldr	r1, [pc, #164]	; (800a15c <_dtoa_r+0x5bc>)
 800a0b8:	f7f6 fb38 	bl	800072c <__aeabi_ddiv>
 800a0bc:	463b      	mov	r3, r7
 800a0be:	4632      	mov	r2, r6
 800a0c0:	f7f6 f852 	bl	8000168 <__aeabi_dsub>
 800a0c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0c8:	9f03      	ldr	r7, [sp, #12]
 800a0ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0ce:	f7f6 fcb3 	bl	8000a38 <__aeabi_d2iz>
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	f7f6 f996 	bl	8000404 <__aeabi_i2d>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0e0:	f7f6 f842 	bl	8000168 <__aeabi_dsub>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	3430      	adds	r4, #48	; 0x30
 800a0ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0f2:	f807 4b01 	strb.w	r4, [r7], #1
 800a0f6:	f7f6 fc61 	bl	80009bc <__aeabi_dcmplt>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d174      	bne.n	800a1e8 <_dtoa_r+0x648>
 800a0fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a102:	2000      	movs	r0, #0
 800a104:	4911      	ldr	r1, [pc, #68]	; (800a14c <_dtoa_r+0x5ac>)
 800a106:	f7f6 f82f 	bl	8000168 <__aeabi_dsub>
 800a10a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a10e:	f7f6 fc55 	bl	80009bc <__aeabi_dcmplt>
 800a112:	2800      	cmp	r0, #0
 800a114:	f040 80b7 	bne.w	800a286 <_dtoa_r+0x6e6>
 800a118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a11a:	429f      	cmp	r7, r3
 800a11c:	f43f af7a 	beq.w	800a014 <_dtoa_r+0x474>
 800a120:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a124:	2200      	movs	r2, #0
 800a126:	4b0a      	ldr	r3, [pc, #40]	; (800a150 <_dtoa_r+0x5b0>)
 800a128:	f7f6 f9d6 	bl	80004d8 <__aeabi_dmul>
 800a12c:	2200      	movs	r2, #0
 800a12e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a136:	4b06      	ldr	r3, [pc, #24]	; (800a150 <_dtoa_r+0x5b0>)
 800a138:	f7f6 f9ce 	bl	80004d8 <__aeabi_dmul>
 800a13c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a140:	e7c3      	b.n	800a0ca <_dtoa_r+0x52a>
 800a142:	bf00      	nop
 800a144:	0800c2e0 	.word	0x0800c2e0
 800a148:	0800c2b8 	.word	0x0800c2b8
 800a14c:	3ff00000 	.word	0x3ff00000
 800a150:	40240000 	.word	0x40240000
 800a154:	401c0000 	.word	0x401c0000
 800a158:	40140000 	.word	0x40140000
 800a15c:	3fe00000 	.word	0x3fe00000
 800a160:	4630      	mov	r0, r6
 800a162:	4639      	mov	r1, r7
 800a164:	f7f6 f9b8 	bl	80004d8 <__aeabi_dmul>
 800a168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a16a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a16e:	9c03      	ldr	r4, [sp, #12]
 800a170:	9314      	str	r3, [sp, #80]	; 0x50
 800a172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a176:	f7f6 fc5f 	bl	8000a38 <__aeabi_d2iz>
 800a17a:	9015      	str	r0, [sp, #84]	; 0x54
 800a17c:	f7f6 f942 	bl	8000404 <__aeabi_i2d>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a188:	f7f5 ffee 	bl	8000168 <__aeabi_dsub>
 800a18c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a18e:	4606      	mov	r6, r0
 800a190:	3330      	adds	r3, #48	; 0x30
 800a192:	f804 3b01 	strb.w	r3, [r4], #1
 800a196:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a198:	460f      	mov	r7, r1
 800a19a:	429c      	cmp	r4, r3
 800a19c:	f04f 0200 	mov.w	r2, #0
 800a1a0:	d124      	bne.n	800a1ec <_dtoa_r+0x64c>
 800a1a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1a6:	4bb0      	ldr	r3, [pc, #704]	; (800a468 <_dtoa_r+0x8c8>)
 800a1a8:	f7f5 ffe0 	bl	800016c <__adddf3>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 fc20 	bl	80009f8 <__aeabi_dcmpgt>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d163      	bne.n	800a284 <_dtoa_r+0x6e4>
 800a1bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	49a9      	ldr	r1, [pc, #676]	; (800a468 <_dtoa_r+0x8c8>)
 800a1c4:	f7f5 ffd0 	bl	8000168 <__aeabi_dsub>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 fbf4 	bl	80009bc <__aeabi_dcmplt>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f43f af1d 	beq.w	800a014 <_dtoa_r+0x474>
 800a1da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a1dc:	1e7b      	subs	r3, r7, #1
 800a1de:	9314      	str	r3, [sp, #80]	; 0x50
 800a1e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a1e4:	2b30      	cmp	r3, #48	; 0x30
 800a1e6:	d0f8      	beq.n	800a1da <_dtoa_r+0x63a>
 800a1e8:	46c2      	mov	sl, r8
 800a1ea:	e03b      	b.n	800a264 <_dtoa_r+0x6c4>
 800a1ec:	4b9f      	ldr	r3, [pc, #636]	; (800a46c <_dtoa_r+0x8cc>)
 800a1ee:	f7f6 f973 	bl	80004d8 <__aeabi_dmul>
 800a1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1f6:	e7bc      	b.n	800a172 <_dtoa_r+0x5d2>
 800a1f8:	9f03      	ldr	r7, [sp, #12]
 800a1fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a1fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a202:	4640      	mov	r0, r8
 800a204:	4649      	mov	r1, r9
 800a206:	f7f6 fa91 	bl	800072c <__aeabi_ddiv>
 800a20a:	f7f6 fc15 	bl	8000a38 <__aeabi_d2iz>
 800a20e:	4604      	mov	r4, r0
 800a210:	f7f6 f8f8 	bl	8000404 <__aeabi_i2d>
 800a214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a218:	f7f6 f95e 	bl	80004d8 <__aeabi_dmul>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	4640      	mov	r0, r8
 800a222:	4649      	mov	r1, r9
 800a224:	f7f5 ffa0 	bl	8000168 <__aeabi_dsub>
 800a228:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a22c:	f807 6b01 	strb.w	r6, [r7], #1
 800a230:	9e03      	ldr	r6, [sp, #12]
 800a232:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a236:	1bbe      	subs	r6, r7, r6
 800a238:	45b4      	cmp	ip, r6
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	d136      	bne.n	800a2ae <_dtoa_r+0x70e>
 800a240:	f7f5 ff94 	bl	800016c <__adddf3>
 800a244:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a248:	4680      	mov	r8, r0
 800a24a:	4689      	mov	r9, r1
 800a24c:	f7f6 fbd4 	bl	80009f8 <__aeabi_dcmpgt>
 800a250:	bb58      	cbnz	r0, 800a2aa <_dtoa_r+0x70a>
 800a252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a256:	4640      	mov	r0, r8
 800a258:	4649      	mov	r1, r9
 800a25a:	f7f6 fba5 	bl	80009a8 <__aeabi_dcmpeq>
 800a25e:	b108      	cbz	r0, 800a264 <_dtoa_r+0x6c4>
 800a260:	07e1      	lsls	r1, r4, #31
 800a262:	d422      	bmi.n	800a2aa <_dtoa_r+0x70a>
 800a264:	4628      	mov	r0, r5
 800a266:	4659      	mov	r1, fp
 800a268:	f000 faf4 	bl	800a854 <_Bfree>
 800a26c:	2300      	movs	r3, #0
 800a26e:	703b      	strb	r3, [r7, #0]
 800a270:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a272:	f10a 0001 	add.w	r0, sl, #1
 800a276:	6018      	str	r0, [r3, #0]
 800a278:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f43f acde 	beq.w	8009c3c <_dtoa_r+0x9c>
 800a280:	601f      	str	r7, [r3, #0]
 800a282:	e4db      	b.n	8009c3c <_dtoa_r+0x9c>
 800a284:	4627      	mov	r7, r4
 800a286:	463b      	mov	r3, r7
 800a288:	461f      	mov	r7, r3
 800a28a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a28e:	2a39      	cmp	r2, #57	; 0x39
 800a290:	d107      	bne.n	800a2a2 <_dtoa_r+0x702>
 800a292:	9a03      	ldr	r2, [sp, #12]
 800a294:	429a      	cmp	r2, r3
 800a296:	d1f7      	bne.n	800a288 <_dtoa_r+0x6e8>
 800a298:	2230      	movs	r2, #48	; 0x30
 800a29a:	9903      	ldr	r1, [sp, #12]
 800a29c:	f108 0801 	add.w	r8, r8, #1
 800a2a0:	700a      	strb	r2, [r1, #0]
 800a2a2:	781a      	ldrb	r2, [r3, #0]
 800a2a4:	3201      	adds	r2, #1
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e79e      	b.n	800a1e8 <_dtoa_r+0x648>
 800a2aa:	46d0      	mov	r8, sl
 800a2ac:	e7eb      	b.n	800a286 <_dtoa_r+0x6e6>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	4b6e      	ldr	r3, [pc, #440]	; (800a46c <_dtoa_r+0x8cc>)
 800a2b2:	f7f6 f911 	bl	80004d8 <__aeabi_dmul>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	4689      	mov	r9, r1
 800a2be:	f7f6 fb73 	bl	80009a8 <__aeabi_dcmpeq>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d09b      	beq.n	800a1fe <_dtoa_r+0x65e>
 800a2c6:	e7cd      	b.n	800a264 <_dtoa_r+0x6c4>
 800a2c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2ca:	2a00      	cmp	r2, #0
 800a2cc:	f000 80d0 	beq.w	800a470 <_dtoa_r+0x8d0>
 800a2d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a2d2:	2a01      	cmp	r2, #1
 800a2d4:	f300 80ae 	bgt.w	800a434 <_dtoa_r+0x894>
 800a2d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	f000 80a6 	beq.w	800a42c <_dtoa_r+0x88c>
 800a2e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2e6:	9f06      	ldr	r7, [sp, #24]
 800a2e8:	9a06      	ldr	r2, [sp, #24]
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	441a      	add	r2, r3
 800a2ee:	9206      	str	r2, [sp, #24]
 800a2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	441a      	add	r2, r3
 800a2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2f8:	f000 fb62 	bl	800a9c0 <__i2b>
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	2f00      	cmp	r7, #0
 800a300:	dd0c      	ble.n	800a31c <_dtoa_r+0x77c>
 800a302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a304:	2b00      	cmp	r3, #0
 800a306:	dd09      	ble.n	800a31c <_dtoa_r+0x77c>
 800a308:	42bb      	cmp	r3, r7
 800a30a:	bfa8      	it	ge
 800a30c:	463b      	movge	r3, r7
 800a30e:	9a06      	ldr	r2, [sp, #24]
 800a310:	1aff      	subs	r7, r7, r3
 800a312:	1ad2      	subs	r2, r2, r3
 800a314:	9206      	str	r2, [sp, #24]
 800a316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	9309      	str	r3, [sp, #36]	; 0x24
 800a31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31e:	b1f3      	cbz	r3, 800a35e <_dtoa_r+0x7be>
 800a320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 80a8 	beq.w	800a478 <_dtoa_r+0x8d8>
 800a328:	2c00      	cmp	r4, #0
 800a32a:	dd10      	ble.n	800a34e <_dtoa_r+0x7ae>
 800a32c:	4631      	mov	r1, r6
 800a32e:	4622      	mov	r2, r4
 800a330:	4628      	mov	r0, r5
 800a332:	f000 fc03 	bl	800ab3c <__pow5mult>
 800a336:	465a      	mov	r2, fp
 800a338:	4601      	mov	r1, r0
 800a33a:	4606      	mov	r6, r0
 800a33c:	4628      	mov	r0, r5
 800a33e:	f000 fb55 	bl	800a9ec <__multiply>
 800a342:	4680      	mov	r8, r0
 800a344:	4659      	mov	r1, fp
 800a346:	4628      	mov	r0, r5
 800a348:	f000 fa84 	bl	800a854 <_Bfree>
 800a34c:	46c3      	mov	fp, r8
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	1b1a      	subs	r2, r3, r4
 800a352:	d004      	beq.n	800a35e <_dtoa_r+0x7be>
 800a354:	4659      	mov	r1, fp
 800a356:	4628      	mov	r0, r5
 800a358:	f000 fbf0 	bl	800ab3c <__pow5mult>
 800a35c:	4683      	mov	fp, r0
 800a35e:	2101      	movs	r1, #1
 800a360:	4628      	mov	r0, r5
 800a362:	f000 fb2d 	bl	800a9c0 <__i2b>
 800a366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a368:	4604      	mov	r4, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f340 8086 	ble.w	800a47c <_dtoa_r+0x8dc>
 800a370:	461a      	mov	r2, r3
 800a372:	4601      	mov	r1, r0
 800a374:	4628      	mov	r0, r5
 800a376:	f000 fbe1 	bl	800ab3c <__pow5mult>
 800a37a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a37c:	4604      	mov	r4, r0
 800a37e:	2b01      	cmp	r3, #1
 800a380:	dd7f      	ble.n	800a482 <_dtoa_r+0x8e2>
 800a382:	f04f 0800 	mov.w	r8, #0
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a38c:	6918      	ldr	r0, [r3, #16]
 800a38e:	f000 fac9 	bl	800a924 <__hi0bits>
 800a392:	f1c0 0020 	rsb	r0, r0, #32
 800a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a398:	4418      	add	r0, r3
 800a39a:	f010 001f 	ands.w	r0, r0, #31
 800a39e:	f000 8092 	beq.w	800a4c6 <_dtoa_r+0x926>
 800a3a2:	f1c0 0320 	rsb	r3, r0, #32
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	f340 808a 	ble.w	800a4c0 <_dtoa_r+0x920>
 800a3ac:	f1c0 001c 	rsb	r0, r0, #28
 800a3b0:	9b06      	ldr	r3, [sp, #24]
 800a3b2:	4407      	add	r7, r0
 800a3b4:	4403      	add	r3, r0
 800a3b6:	9306      	str	r3, [sp, #24]
 800a3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ba:	4403      	add	r3, r0
 800a3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3be:	9b06      	ldr	r3, [sp, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dd05      	ble.n	800a3d0 <_dtoa_r+0x830>
 800a3c4:	4659      	mov	r1, fp
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f000 fc11 	bl	800abf0 <__lshift>
 800a3ce:	4683      	mov	fp, r0
 800a3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dd05      	ble.n	800a3e2 <_dtoa_r+0x842>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 fc08 	bl	800abf0 <__lshift>
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d070      	beq.n	800a4ca <_dtoa_r+0x92a>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4658      	mov	r0, fp
 800a3ec:	f000 fc70 	bl	800acd0 <__mcmp>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	da6a      	bge.n	800a4ca <_dtoa_r+0x92a>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4659      	mov	r1, fp
 800a3f8:	220a      	movs	r2, #10
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f000 fa4c 	bl	800a898 <__multadd>
 800a400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a402:	4683      	mov	fp, r0
 800a404:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8194 	beq.w	800a736 <_dtoa_r+0xb96>
 800a40e:	4631      	mov	r1, r6
 800a410:	2300      	movs	r3, #0
 800a412:	220a      	movs	r2, #10
 800a414:	4628      	mov	r0, r5
 800a416:	f000 fa3f 	bl	800a898 <__multadd>
 800a41a:	f1b9 0f00 	cmp.w	r9, #0
 800a41e:	4606      	mov	r6, r0
 800a420:	f300 8093 	bgt.w	800a54a <_dtoa_r+0x9aa>
 800a424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a426:	2b02      	cmp	r3, #2
 800a428:	dc57      	bgt.n	800a4da <_dtoa_r+0x93a>
 800a42a:	e08e      	b.n	800a54a <_dtoa_r+0x9aa>
 800a42c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a432:	e757      	b.n	800a2e4 <_dtoa_r+0x744>
 800a434:	9b08      	ldr	r3, [sp, #32]
 800a436:	1e5c      	subs	r4, r3, #1
 800a438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43a:	42a3      	cmp	r3, r4
 800a43c:	bfb7      	itett	lt
 800a43e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a440:	1b1c      	subge	r4, r3, r4
 800a442:	1ae2      	sublt	r2, r4, r3
 800a444:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a446:	bfbe      	ittt	lt
 800a448:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a44a:	189b      	addlt	r3, r3, r2
 800a44c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a44e:	9b08      	ldr	r3, [sp, #32]
 800a450:	bfb8      	it	lt
 800a452:	2400      	movlt	r4, #0
 800a454:	2b00      	cmp	r3, #0
 800a456:	bfbb      	ittet	lt
 800a458:	9b06      	ldrlt	r3, [sp, #24]
 800a45a:	9a08      	ldrlt	r2, [sp, #32]
 800a45c:	9f06      	ldrge	r7, [sp, #24]
 800a45e:	1a9f      	sublt	r7, r3, r2
 800a460:	bfac      	ite	ge
 800a462:	9b08      	ldrge	r3, [sp, #32]
 800a464:	2300      	movlt	r3, #0
 800a466:	e73f      	b.n	800a2e8 <_dtoa_r+0x748>
 800a468:	3fe00000 	.word	0x3fe00000
 800a46c:	40240000 	.word	0x40240000
 800a470:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a472:	9f06      	ldr	r7, [sp, #24]
 800a474:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a476:	e742      	b.n	800a2fe <_dtoa_r+0x75e>
 800a478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a47a:	e76b      	b.n	800a354 <_dtoa_r+0x7b4>
 800a47c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a47e:	2b01      	cmp	r3, #1
 800a480:	dc19      	bgt.n	800a4b6 <_dtoa_r+0x916>
 800a482:	9b04      	ldr	r3, [sp, #16]
 800a484:	b9bb      	cbnz	r3, 800a4b6 <_dtoa_r+0x916>
 800a486:	9b05      	ldr	r3, [sp, #20]
 800a488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a48c:	b99b      	cbnz	r3, 800a4b6 <_dtoa_r+0x916>
 800a48e:	9b05      	ldr	r3, [sp, #20]
 800a490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a494:	0d1b      	lsrs	r3, r3, #20
 800a496:	051b      	lsls	r3, r3, #20
 800a498:	b183      	cbz	r3, 800a4bc <_dtoa_r+0x91c>
 800a49a:	f04f 0801 	mov.w	r8, #1
 800a49e:	9b06      	ldr	r3, [sp, #24]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	9306      	str	r3, [sp, #24]
 800a4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f47f af6a 	bne.w	800a386 <_dtoa_r+0x7e6>
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	e76f      	b.n	800a396 <_dtoa_r+0x7f6>
 800a4b6:	f04f 0800 	mov.w	r8, #0
 800a4ba:	e7f6      	b.n	800a4aa <_dtoa_r+0x90a>
 800a4bc:	4698      	mov	r8, r3
 800a4be:	e7f4      	b.n	800a4aa <_dtoa_r+0x90a>
 800a4c0:	f43f af7d 	beq.w	800a3be <_dtoa_r+0x81e>
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	301c      	adds	r0, #28
 800a4c8:	e772      	b.n	800a3b0 <_dtoa_r+0x810>
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dc36      	bgt.n	800a53e <_dtoa_r+0x99e>
 800a4d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	dd33      	ble.n	800a53e <_dtoa_r+0x99e>
 800a4d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4da:	f1b9 0f00 	cmp.w	r9, #0
 800a4de:	d10d      	bne.n	800a4fc <_dtoa_r+0x95c>
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	464b      	mov	r3, r9
 800a4e4:	2205      	movs	r2, #5
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 f9d6 	bl	800a898 <__multadd>
 800a4ec:	4601      	mov	r1, r0
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	4658      	mov	r0, fp
 800a4f2:	f000 fbed 	bl	800acd0 <__mcmp>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f73f adb8 	bgt.w	800a06c <_dtoa_r+0x4cc>
 800a4fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4fe:	9f03      	ldr	r7, [sp, #12]
 800a500:	ea6f 0a03 	mvn.w	sl, r3
 800a504:	f04f 0800 	mov.w	r8, #0
 800a508:	4621      	mov	r1, r4
 800a50a:	4628      	mov	r0, r5
 800a50c:	f000 f9a2 	bl	800a854 <_Bfree>
 800a510:	2e00      	cmp	r6, #0
 800a512:	f43f aea7 	beq.w	800a264 <_dtoa_r+0x6c4>
 800a516:	f1b8 0f00 	cmp.w	r8, #0
 800a51a:	d005      	beq.n	800a528 <_dtoa_r+0x988>
 800a51c:	45b0      	cmp	r8, r6
 800a51e:	d003      	beq.n	800a528 <_dtoa_r+0x988>
 800a520:	4641      	mov	r1, r8
 800a522:	4628      	mov	r0, r5
 800a524:	f000 f996 	bl	800a854 <_Bfree>
 800a528:	4631      	mov	r1, r6
 800a52a:	4628      	mov	r0, r5
 800a52c:	f000 f992 	bl	800a854 <_Bfree>
 800a530:	e698      	b.n	800a264 <_dtoa_r+0x6c4>
 800a532:	2400      	movs	r4, #0
 800a534:	4626      	mov	r6, r4
 800a536:	e7e1      	b.n	800a4fc <_dtoa_r+0x95c>
 800a538:	46c2      	mov	sl, r8
 800a53a:	4626      	mov	r6, r4
 800a53c:	e596      	b.n	800a06c <_dtoa_r+0x4cc>
 800a53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 80fd 	beq.w	800a744 <_dtoa_r+0xba4>
 800a54a:	2f00      	cmp	r7, #0
 800a54c:	dd05      	ble.n	800a55a <_dtoa_r+0x9ba>
 800a54e:	4631      	mov	r1, r6
 800a550:	463a      	mov	r2, r7
 800a552:	4628      	mov	r0, r5
 800a554:	f000 fb4c 	bl	800abf0 <__lshift>
 800a558:	4606      	mov	r6, r0
 800a55a:	f1b8 0f00 	cmp.w	r8, #0
 800a55e:	d05c      	beq.n	800a61a <_dtoa_r+0xa7a>
 800a560:	4628      	mov	r0, r5
 800a562:	6871      	ldr	r1, [r6, #4]
 800a564:	f000 f936 	bl	800a7d4 <_Balloc>
 800a568:	4607      	mov	r7, r0
 800a56a:	b928      	cbnz	r0, 800a578 <_dtoa_r+0x9d8>
 800a56c:	4602      	mov	r2, r0
 800a56e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a572:	4b7f      	ldr	r3, [pc, #508]	; (800a770 <_dtoa_r+0xbd0>)
 800a574:	f7ff bb28 	b.w	8009bc8 <_dtoa_r+0x28>
 800a578:	6932      	ldr	r2, [r6, #16]
 800a57a:	f106 010c 	add.w	r1, r6, #12
 800a57e:	3202      	adds	r2, #2
 800a580:	0092      	lsls	r2, r2, #2
 800a582:	300c      	adds	r0, #12
 800a584:	f000 f90c 	bl	800a7a0 <memcpy>
 800a588:	2201      	movs	r2, #1
 800a58a:	4639      	mov	r1, r7
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 fb2f 	bl	800abf0 <__lshift>
 800a592:	46b0      	mov	r8, r6
 800a594:	4606      	mov	r6, r0
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	3301      	adds	r3, #1
 800a59a:	9308      	str	r3, [sp, #32]
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	444b      	add	r3, r9
 800a5a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5aa:	9b08      	ldr	r3, [sp, #32]
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	4658      	mov	r0, fp
 800a5b2:	9304      	str	r3, [sp, #16]
 800a5b4:	f7ff fa66 	bl	8009a84 <quorem>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	3330      	adds	r3, #48	; 0x30
 800a5be:	9006      	str	r0, [sp, #24]
 800a5c0:	4658      	mov	r0, fp
 800a5c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5c4:	f000 fb84 	bl	800acd0 <__mcmp>
 800a5c8:	4632      	mov	r2, r6
 800a5ca:	4681      	mov	r9, r0
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 fb9a 	bl	800ad08 <__mdiff>
 800a5d4:	68c2      	ldr	r2, [r0, #12]
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5da:	bb02      	cbnz	r2, 800a61e <_dtoa_r+0xa7e>
 800a5dc:	4601      	mov	r1, r0
 800a5de:	4658      	mov	r0, fp
 800a5e0:	f000 fb76 	bl	800acd0 <__mcmp>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a5f0:	f000 f930 	bl	800a854 <_Bfree>
 800a5f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5f8:	9f08      	ldr	r7, [sp, #32]
 800a5fa:	ea43 0102 	orr.w	r1, r3, r2
 800a5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a600:	430b      	orrs	r3, r1
 800a602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a604:	d10d      	bne.n	800a622 <_dtoa_r+0xa82>
 800a606:	2b39      	cmp	r3, #57	; 0x39
 800a608:	d029      	beq.n	800a65e <_dtoa_r+0xabe>
 800a60a:	f1b9 0f00 	cmp.w	r9, #0
 800a60e:	dd01      	ble.n	800a614 <_dtoa_r+0xa74>
 800a610:	9b06      	ldr	r3, [sp, #24]
 800a612:	3331      	adds	r3, #49	; 0x31
 800a614:	9a04      	ldr	r2, [sp, #16]
 800a616:	7013      	strb	r3, [r2, #0]
 800a618:	e776      	b.n	800a508 <_dtoa_r+0x968>
 800a61a:	4630      	mov	r0, r6
 800a61c:	e7b9      	b.n	800a592 <_dtoa_r+0x9f2>
 800a61e:	2201      	movs	r2, #1
 800a620:	e7e2      	b.n	800a5e8 <_dtoa_r+0xa48>
 800a622:	f1b9 0f00 	cmp.w	r9, #0
 800a626:	db06      	blt.n	800a636 <_dtoa_r+0xa96>
 800a628:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a62a:	ea41 0909 	orr.w	r9, r1, r9
 800a62e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a630:	ea59 0101 	orrs.w	r1, r9, r1
 800a634:	d120      	bne.n	800a678 <_dtoa_r+0xad8>
 800a636:	2a00      	cmp	r2, #0
 800a638:	ddec      	ble.n	800a614 <_dtoa_r+0xa74>
 800a63a:	4659      	mov	r1, fp
 800a63c:	2201      	movs	r2, #1
 800a63e:	4628      	mov	r0, r5
 800a640:	9308      	str	r3, [sp, #32]
 800a642:	f000 fad5 	bl	800abf0 <__lshift>
 800a646:	4621      	mov	r1, r4
 800a648:	4683      	mov	fp, r0
 800a64a:	f000 fb41 	bl	800acd0 <__mcmp>
 800a64e:	2800      	cmp	r0, #0
 800a650:	9b08      	ldr	r3, [sp, #32]
 800a652:	dc02      	bgt.n	800a65a <_dtoa_r+0xaba>
 800a654:	d1de      	bne.n	800a614 <_dtoa_r+0xa74>
 800a656:	07da      	lsls	r2, r3, #31
 800a658:	d5dc      	bpl.n	800a614 <_dtoa_r+0xa74>
 800a65a:	2b39      	cmp	r3, #57	; 0x39
 800a65c:	d1d8      	bne.n	800a610 <_dtoa_r+0xa70>
 800a65e:	2339      	movs	r3, #57	; 0x39
 800a660:	9a04      	ldr	r2, [sp, #16]
 800a662:	7013      	strb	r3, [r2, #0]
 800a664:	463b      	mov	r3, r7
 800a666:	461f      	mov	r7, r3
 800a668:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a66c:	3b01      	subs	r3, #1
 800a66e:	2a39      	cmp	r2, #57	; 0x39
 800a670:	d050      	beq.n	800a714 <_dtoa_r+0xb74>
 800a672:	3201      	adds	r2, #1
 800a674:	701a      	strb	r2, [r3, #0]
 800a676:	e747      	b.n	800a508 <_dtoa_r+0x968>
 800a678:	2a00      	cmp	r2, #0
 800a67a:	dd03      	ble.n	800a684 <_dtoa_r+0xae4>
 800a67c:	2b39      	cmp	r3, #57	; 0x39
 800a67e:	d0ee      	beq.n	800a65e <_dtoa_r+0xabe>
 800a680:	3301      	adds	r3, #1
 800a682:	e7c7      	b.n	800a614 <_dtoa_r+0xa74>
 800a684:	9a08      	ldr	r2, [sp, #32]
 800a686:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a688:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a68c:	428a      	cmp	r2, r1
 800a68e:	d02a      	beq.n	800a6e6 <_dtoa_r+0xb46>
 800a690:	4659      	mov	r1, fp
 800a692:	2300      	movs	r3, #0
 800a694:	220a      	movs	r2, #10
 800a696:	4628      	mov	r0, r5
 800a698:	f000 f8fe 	bl	800a898 <__multadd>
 800a69c:	45b0      	cmp	r8, r6
 800a69e:	4683      	mov	fp, r0
 800a6a0:	f04f 0300 	mov.w	r3, #0
 800a6a4:	f04f 020a 	mov.w	r2, #10
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	d107      	bne.n	800a6be <_dtoa_r+0xb1e>
 800a6ae:	f000 f8f3 	bl	800a898 <__multadd>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	9308      	str	r3, [sp, #32]
 800a6bc:	e775      	b.n	800a5aa <_dtoa_r+0xa0a>
 800a6be:	f000 f8eb 	bl	800a898 <__multadd>
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	220a      	movs	r2, #10
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f000 f8e4 	bl	800a898 <__multadd>
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	e7f0      	b.n	800a6b6 <_dtoa_r+0xb16>
 800a6d4:	f1b9 0f00 	cmp.w	r9, #0
 800a6d8:	bfcc      	ite	gt
 800a6da:	464f      	movgt	r7, r9
 800a6dc:	2701      	movle	r7, #1
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	9a03      	ldr	r2, [sp, #12]
 800a6e4:	4417      	add	r7, r2
 800a6e6:	4659      	mov	r1, fp
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	9308      	str	r3, [sp, #32]
 800a6ee:	f000 fa7f 	bl	800abf0 <__lshift>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4683      	mov	fp, r0
 800a6f6:	f000 faeb 	bl	800acd0 <__mcmp>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	dcb2      	bgt.n	800a664 <_dtoa_r+0xac4>
 800a6fe:	d102      	bne.n	800a706 <_dtoa_r+0xb66>
 800a700:	9b08      	ldr	r3, [sp, #32]
 800a702:	07db      	lsls	r3, r3, #31
 800a704:	d4ae      	bmi.n	800a664 <_dtoa_r+0xac4>
 800a706:	463b      	mov	r3, r7
 800a708:	461f      	mov	r7, r3
 800a70a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a70e:	2a30      	cmp	r2, #48	; 0x30
 800a710:	d0fa      	beq.n	800a708 <_dtoa_r+0xb68>
 800a712:	e6f9      	b.n	800a508 <_dtoa_r+0x968>
 800a714:	9a03      	ldr	r2, [sp, #12]
 800a716:	429a      	cmp	r2, r3
 800a718:	d1a5      	bne.n	800a666 <_dtoa_r+0xac6>
 800a71a:	2331      	movs	r3, #49	; 0x31
 800a71c:	f10a 0a01 	add.w	sl, sl, #1
 800a720:	e779      	b.n	800a616 <_dtoa_r+0xa76>
 800a722:	4b14      	ldr	r3, [pc, #80]	; (800a774 <_dtoa_r+0xbd4>)
 800a724:	f7ff baa8 	b.w	8009c78 <_dtoa_r+0xd8>
 800a728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f47f aa81 	bne.w	8009c32 <_dtoa_r+0x92>
 800a730:	4b11      	ldr	r3, [pc, #68]	; (800a778 <_dtoa_r+0xbd8>)
 800a732:	f7ff baa1 	b.w	8009c78 <_dtoa_r+0xd8>
 800a736:	f1b9 0f00 	cmp.w	r9, #0
 800a73a:	dc03      	bgt.n	800a744 <_dtoa_r+0xba4>
 800a73c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a73e:	2b02      	cmp	r3, #2
 800a740:	f73f aecb 	bgt.w	800a4da <_dtoa_r+0x93a>
 800a744:	9f03      	ldr	r7, [sp, #12]
 800a746:	4621      	mov	r1, r4
 800a748:	4658      	mov	r0, fp
 800a74a:	f7ff f99b 	bl	8009a84 <quorem>
 800a74e:	9a03      	ldr	r2, [sp, #12]
 800a750:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a754:	f807 3b01 	strb.w	r3, [r7], #1
 800a758:	1aba      	subs	r2, r7, r2
 800a75a:	4591      	cmp	r9, r2
 800a75c:	ddba      	ble.n	800a6d4 <_dtoa_r+0xb34>
 800a75e:	4659      	mov	r1, fp
 800a760:	2300      	movs	r3, #0
 800a762:	220a      	movs	r2, #10
 800a764:	4628      	mov	r0, r5
 800a766:	f000 f897 	bl	800a898 <__multadd>
 800a76a:	4683      	mov	fp, r0
 800a76c:	e7eb      	b.n	800a746 <_dtoa_r+0xba6>
 800a76e:	bf00      	nop
 800a770:	0800c247 	.word	0x0800c247
 800a774:	0800c1a4 	.word	0x0800c1a4
 800a778:	0800c1c8 	.word	0x0800c1c8

0800a77c <_localeconv_r>:
 800a77c:	4800      	ldr	r0, [pc, #0]	; (800a780 <_localeconv_r+0x4>)
 800a77e:	4770      	bx	lr
 800a780:	20000160 	.word	0x20000160

0800a784 <memchr>:
 800a784:	4603      	mov	r3, r0
 800a786:	b510      	push	{r4, lr}
 800a788:	b2c9      	uxtb	r1, r1
 800a78a:	4402      	add	r2, r0
 800a78c:	4293      	cmp	r3, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	d101      	bne.n	800a796 <memchr+0x12>
 800a792:	2000      	movs	r0, #0
 800a794:	e003      	b.n	800a79e <memchr+0x1a>
 800a796:	7804      	ldrb	r4, [r0, #0]
 800a798:	3301      	adds	r3, #1
 800a79a:	428c      	cmp	r4, r1
 800a79c:	d1f6      	bne.n	800a78c <memchr+0x8>
 800a79e:	bd10      	pop	{r4, pc}

0800a7a0 <memcpy>:
 800a7a0:	440a      	add	r2, r1
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7a8:	d100      	bne.n	800a7ac <memcpy+0xc>
 800a7aa:	4770      	bx	lr
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b2:	4291      	cmp	r1, r2
 800a7b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b8:	d1f9      	bne.n	800a7ae <memcpy+0xe>
 800a7ba:	bd10      	pop	{r4, pc}

0800a7bc <__malloc_lock>:
 800a7bc:	4801      	ldr	r0, [pc, #4]	; (800a7c4 <__malloc_lock+0x8>)
 800a7be:	f000 bd2c 	b.w	800b21a <__retarget_lock_acquire_recursive>
 800a7c2:	bf00      	nop
 800a7c4:	20000388 	.word	0x20000388

0800a7c8 <__malloc_unlock>:
 800a7c8:	4801      	ldr	r0, [pc, #4]	; (800a7d0 <__malloc_unlock+0x8>)
 800a7ca:	f000 bd27 	b.w	800b21c <__retarget_lock_release_recursive>
 800a7ce:	bf00      	nop
 800a7d0:	20000388 	.word	0x20000388

0800a7d4 <_Balloc>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7d8:	4604      	mov	r4, r0
 800a7da:	460d      	mov	r5, r1
 800a7dc:	b976      	cbnz	r6, 800a7fc <_Balloc+0x28>
 800a7de:	2010      	movs	r0, #16
 800a7e0:	f7fe fb90 	bl	8008f04 <malloc>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	6260      	str	r0, [r4, #36]	; 0x24
 800a7e8:	b920      	cbnz	r0, 800a7f4 <_Balloc+0x20>
 800a7ea:	2166      	movs	r1, #102	; 0x66
 800a7ec:	4b17      	ldr	r3, [pc, #92]	; (800a84c <_Balloc+0x78>)
 800a7ee:	4818      	ldr	r0, [pc, #96]	; (800a850 <_Balloc+0x7c>)
 800a7f0:	f000 fce2 	bl	800b1b8 <__assert_func>
 800a7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7f8:	6006      	str	r6, [r0, #0]
 800a7fa:	60c6      	str	r6, [r0, #12]
 800a7fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7fe:	68f3      	ldr	r3, [r6, #12]
 800a800:	b183      	cbz	r3, 800a824 <_Balloc+0x50>
 800a802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a80a:	b9b8      	cbnz	r0, 800a83c <_Balloc+0x68>
 800a80c:	2101      	movs	r1, #1
 800a80e:	fa01 f605 	lsl.w	r6, r1, r5
 800a812:	1d72      	adds	r2, r6, #5
 800a814:	4620      	mov	r0, r4
 800a816:	0092      	lsls	r2, r2, #2
 800a818:	f000 fb5e 	bl	800aed8 <_calloc_r>
 800a81c:	b160      	cbz	r0, 800a838 <_Balloc+0x64>
 800a81e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a822:	e00e      	b.n	800a842 <_Balloc+0x6e>
 800a824:	2221      	movs	r2, #33	; 0x21
 800a826:	2104      	movs	r1, #4
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 fb55 	bl	800aed8 <_calloc_r>
 800a82e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a830:	60f0      	str	r0, [r6, #12]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e4      	bne.n	800a802 <_Balloc+0x2e>
 800a838:	2000      	movs	r0, #0
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	6802      	ldr	r2, [r0, #0]
 800a83e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a842:	2300      	movs	r3, #0
 800a844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a848:	e7f7      	b.n	800a83a <_Balloc+0x66>
 800a84a:	bf00      	nop
 800a84c:	0800c1d5 	.word	0x0800c1d5
 800a850:	0800c258 	.word	0x0800c258

0800a854 <_Bfree>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	b976      	cbnz	r6, 800a87c <_Bfree+0x28>
 800a85e:	2010      	movs	r0, #16
 800a860:	f7fe fb50 	bl	8008f04 <malloc>
 800a864:	4602      	mov	r2, r0
 800a866:	6268      	str	r0, [r5, #36]	; 0x24
 800a868:	b920      	cbnz	r0, 800a874 <_Bfree+0x20>
 800a86a:	218a      	movs	r1, #138	; 0x8a
 800a86c:	4b08      	ldr	r3, [pc, #32]	; (800a890 <_Bfree+0x3c>)
 800a86e:	4809      	ldr	r0, [pc, #36]	; (800a894 <_Bfree+0x40>)
 800a870:	f000 fca2 	bl	800b1b8 <__assert_func>
 800a874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a878:	6006      	str	r6, [r0, #0]
 800a87a:	60c6      	str	r6, [r0, #12]
 800a87c:	b13c      	cbz	r4, 800a88e <_Bfree+0x3a>
 800a87e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a880:	6862      	ldr	r2, [r4, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a888:	6021      	str	r1, [r4, #0]
 800a88a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a88e:	bd70      	pop	{r4, r5, r6, pc}
 800a890:	0800c1d5 	.word	0x0800c1d5
 800a894:	0800c258 	.word	0x0800c258

0800a898 <__multadd>:
 800a898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89c:	4607      	mov	r7, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	461e      	mov	r6, r3
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	690d      	ldr	r5, [r1, #16]
 800a8a6:	f101 0c14 	add.w	ip, r1, #20
 800a8aa:	f8dc 3000 	ldr.w	r3, [ip]
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	b299      	uxth	r1, r3
 800a8b2:	fb02 6101 	mla	r1, r2, r1, r6
 800a8b6:	0c1e      	lsrs	r6, r3, #16
 800a8b8:	0c0b      	lsrs	r3, r1, #16
 800a8ba:	fb02 3306 	mla	r3, r2, r6, r3
 800a8be:	b289      	uxth	r1, r1
 800a8c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8c4:	4285      	cmp	r5, r0
 800a8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a8ce:	dcec      	bgt.n	800a8aa <__multadd+0x12>
 800a8d0:	b30e      	cbz	r6, 800a916 <__multadd+0x7e>
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	42ab      	cmp	r3, r5
 800a8d6:	dc19      	bgt.n	800a90c <__multadd+0x74>
 800a8d8:	6861      	ldr	r1, [r4, #4]
 800a8da:	4638      	mov	r0, r7
 800a8dc:	3101      	adds	r1, #1
 800a8de:	f7ff ff79 	bl	800a7d4 <_Balloc>
 800a8e2:	4680      	mov	r8, r0
 800a8e4:	b928      	cbnz	r0, 800a8f2 <__multadd+0x5a>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	21b5      	movs	r1, #181	; 0xb5
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <__multadd+0x84>)
 800a8ec:	480c      	ldr	r0, [pc, #48]	; (800a920 <__multadd+0x88>)
 800a8ee:	f000 fc63 	bl	800b1b8 <__assert_func>
 800a8f2:	6922      	ldr	r2, [r4, #16]
 800a8f4:	f104 010c 	add.w	r1, r4, #12
 800a8f8:	3202      	adds	r2, #2
 800a8fa:	0092      	lsls	r2, r2, #2
 800a8fc:	300c      	adds	r0, #12
 800a8fe:	f7ff ff4f 	bl	800a7a0 <memcpy>
 800a902:	4621      	mov	r1, r4
 800a904:	4638      	mov	r0, r7
 800a906:	f7ff ffa5 	bl	800a854 <_Bfree>
 800a90a:	4644      	mov	r4, r8
 800a90c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a910:	3501      	adds	r5, #1
 800a912:	615e      	str	r6, [r3, #20]
 800a914:	6125      	str	r5, [r4, #16]
 800a916:	4620      	mov	r0, r4
 800a918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a91c:	0800c247 	.word	0x0800c247
 800a920:	0800c258 	.word	0x0800c258

0800a924 <__hi0bits>:
 800a924:	0c02      	lsrs	r2, r0, #16
 800a926:	0412      	lsls	r2, r2, #16
 800a928:	4603      	mov	r3, r0
 800a92a:	b9ca      	cbnz	r2, 800a960 <__hi0bits+0x3c>
 800a92c:	0403      	lsls	r3, r0, #16
 800a92e:	2010      	movs	r0, #16
 800a930:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a934:	bf04      	itt	eq
 800a936:	021b      	lsleq	r3, r3, #8
 800a938:	3008      	addeq	r0, #8
 800a93a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a93e:	bf04      	itt	eq
 800a940:	011b      	lsleq	r3, r3, #4
 800a942:	3004      	addeq	r0, #4
 800a944:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a948:	bf04      	itt	eq
 800a94a:	009b      	lsleq	r3, r3, #2
 800a94c:	3002      	addeq	r0, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	db05      	blt.n	800a95e <__hi0bits+0x3a>
 800a952:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a956:	f100 0001 	add.w	r0, r0, #1
 800a95a:	bf08      	it	eq
 800a95c:	2020      	moveq	r0, #32
 800a95e:	4770      	bx	lr
 800a960:	2000      	movs	r0, #0
 800a962:	e7e5      	b.n	800a930 <__hi0bits+0xc>

0800a964 <__lo0bits>:
 800a964:	6803      	ldr	r3, [r0, #0]
 800a966:	4602      	mov	r2, r0
 800a968:	f013 0007 	ands.w	r0, r3, #7
 800a96c:	d00b      	beq.n	800a986 <__lo0bits+0x22>
 800a96e:	07d9      	lsls	r1, r3, #31
 800a970:	d421      	bmi.n	800a9b6 <__lo0bits+0x52>
 800a972:	0798      	lsls	r0, r3, #30
 800a974:	bf49      	itett	mi
 800a976:	085b      	lsrmi	r3, r3, #1
 800a978:	089b      	lsrpl	r3, r3, #2
 800a97a:	2001      	movmi	r0, #1
 800a97c:	6013      	strmi	r3, [r2, #0]
 800a97e:	bf5c      	itt	pl
 800a980:	2002      	movpl	r0, #2
 800a982:	6013      	strpl	r3, [r2, #0]
 800a984:	4770      	bx	lr
 800a986:	b299      	uxth	r1, r3
 800a988:	b909      	cbnz	r1, 800a98e <__lo0bits+0x2a>
 800a98a:	2010      	movs	r0, #16
 800a98c:	0c1b      	lsrs	r3, r3, #16
 800a98e:	b2d9      	uxtb	r1, r3
 800a990:	b909      	cbnz	r1, 800a996 <__lo0bits+0x32>
 800a992:	3008      	adds	r0, #8
 800a994:	0a1b      	lsrs	r3, r3, #8
 800a996:	0719      	lsls	r1, r3, #28
 800a998:	bf04      	itt	eq
 800a99a:	091b      	lsreq	r3, r3, #4
 800a99c:	3004      	addeq	r0, #4
 800a99e:	0799      	lsls	r1, r3, #30
 800a9a0:	bf04      	itt	eq
 800a9a2:	089b      	lsreq	r3, r3, #2
 800a9a4:	3002      	addeq	r0, #2
 800a9a6:	07d9      	lsls	r1, r3, #31
 800a9a8:	d403      	bmi.n	800a9b2 <__lo0bits+0x4e>
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	f100 0001 	add.w	r0, r0, #1
 800a9b0:	d003      	beq.n	800a9ba <__lo0bits+0x56>
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	4770      	bx	lr
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	4770      	bx	lr
 800a9ba:	2020      	movs	r0, #32
 800a9bc:	4770      	bx	lr
	...

0800a9c0 <__i2b>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	f7ff ff05 	bl	800a7d4 <_Balloc>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	b928      	cbnz	r0, 800a9da <__i2b+0x1a>
 800a9ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a9d2:	4b04      	ldr	r3, [pc, #16]	; (800a9e4 <__i2b+0x24>)
 800a9d4:	4804      	ldr	r0, [pc, #16]	; (800a9e8 <__i2b+0x28>)
 800a9d6:	f000 fbef 	bl	800b1b8 <__assert_func>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	6144      	str	r4, [r0, #20]
 800a9de:	6103      	str	r3, [r0, #16]
 800a9e0:	bd10      	pop	{r4, pc}
 800a9e2:	bf00      	nop
 800a9e4:	0800c247 	.word	0x0800c247
 800a9e8:	0800c258 	.word	0x0800c258

0800a9ec <__multiply>:
 800a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	4691      	mov	r9, r2
 800a9f2:	690a      	ldr	r2, [r1, #16]
 800a9f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	bfbe      	ittt	lt
 800a9fe:	460b      	movlt	r3, r1
 800aa00:	464c      	movlt	r4, r9
 800aa02:	4699      	movlt	r9, r3
 800aa04:	6927      	ldr	r7, [r4, #16]
 800aa06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	6861      	ldr	r1, [r4, #4]
 800aa0e:	eb07 060a 	add.w	r6, r7, sl
 800aa12:	42b3      	cmp	r3, r6
 800aa14:	b085      	sub	sp, #20
 800aa16:	bfb8      	it	lt
 800aa18:	3101      	addlt	r1, #1
 800aa1a:	f7ff fedb 	bl	800a7d4 <_Balloc>
 800aa1e:	b930      	cbnz	r0, 800aa2e <__multiply+0x42>
 800aa20:	4602      	mov	r2, r0
 800aa22:	f240 115d 	movw	r1, #349	; 0x15d
 800aa26:	4b43      	ldr	r3, [pc, #268]	; (800ab34 <__multiply+0x148>)
 800aa28:	4843      	ldr	r0, [pc, #268]	; (800ab38 <__multiply+0x14c>)
 800aa2a:	f000 fbc5 	bl	800b1b8 <__assert_func>
 800aa2e:	f100 0514 	add.w	r5, r0, #20
 800aa32:	462b      	mov	r3, r5
 800aa34:	2200      	movs	r2, #0
 800aa36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa3a:	4543      	cmp	r3, r8
 800aa3c:	d321      	bcc.n	800aa82 <__multiply+0x96>
 800aa3e:	f104 0314 	add.w	r3, r4, #20
 800aa42:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa46:	f109 0314 	add.w	r3, r9, #20
 800aa4a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa4e:	9202      	str	r2, [sp, #8]
 800aa50:	1b3a      	subs	r2, r7, r4
 800aa52:	3a15      	subs	r2, #21
 800aa54:	f022 0203 	bic.w	r2, r2, #3
 800aa58:	3204      	adds	r2, #4
 800aa5a:	f104 0115 	add.w	r1, r4, #21
 800aa5e:	428f      	cmp	r7, r1
 800aa60:	bf38      	it	cc
 800aa62:	2204      	movcc	r2, #4
 800aa64:	9201      	str	r2, [sp, #4]
 800aa66:	9a02      	ldr	r2, [sp, #8]
 800aa68:	9303      	str	r3, [sp, #12]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d80c      	bhi.n	800aa88 <__multiply+0x9c>
 800aa6e:	2e00      	cmp	r6, #0
 800aa70:	dd03      	ble.n	800aa7a <__multiply+0x8e>
 800aa72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d059      	beq.n	800ab2e <__multiply+0x142>
 800aa7a:	6106      	str	r6, [r0, #16]
 800aa7c:	b005      	add	sp, #20
 800aa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa82:	f843 2b04 	str.w	r2, [r3], #4
 800aa86:	e7d8      	b.n	800aa3a <__multiply+0x4e>
 800aa88:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa8c:	f1ba 0f00 	cmp.w	sl, #0
 800aa90:	d023      	beq.n	800aada <__multiply+0xee>
 800aa92:	46a9      	mov	r9, r5
 800aa94:	f04f 0c00 	mov.w	ip, #0
 800aa98:	f104 0e14 	add.w	lr, r4, #20
 800aa9c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aaa0:	f8d9 1000 	ldr.w	r1, [r9]
 800aaa4:	fa1f fb82 	uxth.w	fp, r2
 800aaa8:	b289      	uxth	r1, r1
 800aaaa:	fb0a 110b 	mla	r1, sl, fp, r1
 800aaae:	4461      	add	r1, ip
 800aab0:	f8d9 c000 	ldr.w	ip, [r9]
 800aab4:	0c12      	lsrs	r2, r2, #16
 800aab6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aaba:	fb0a c202 	mla	r2, sl, r2, ip
 800aabe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aac2:	b289      	uxth	r1, r1
 800aac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aac8:	4577      	cmp	r7, lr
 800aaca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aace:	f849 1b04 	str.w	r1, [r9], #4
 800aad2:	d8e3      	bhi.n	800aa9c <__multiply+0xb0>
 800aad4:	9a01      	ldr	r2, [sp, #4]
 800aad6:	f845 c002 	str.w	ip, [r5, r2]
 800aada:	9a03      	ldr	r2, [sp, #12]
 800aadc:	3304      	adds	r3, #4
 800aade:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aae2:	f1b9 0f00 	cmp.w	r9, #0
 800aae6:	d020      	beq.n	800ab2a <__multiply+0x13e>
 800aae8:	46ae      	mov	lr, r5
 800aaea:	f04f 0a00 	mov.w	sl, #0
 800aaee:	6829      	ldr	r1, [r5, #0]
 800aaf0:	f104 0c14 	add.w	ip, r4, #20
 800aaf4:	f8bc b000 	ldrh.w	fp, [ip]
 800aaf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aafc:	b289      	uxth	r1, r1
 800aafe:	fb09 220b 	mla	r2, r9, fp, r2
 800ab02:	4492      	add	sl, r2
 800ab04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab08:	f84e 1b04 	str.w	r1, [lr], #4
 800ab0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab10:	f8be 1000 	ldrh.w	r1, [lr]
 800ab14:	0c12      	lsrs	r2, r2, #16
 800ab16:	fb09 1102 	mla	r1, r9, r2, r1
 800ab1a:	4567      	cmp	r7, ip
 800ab1c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab24:	d8e6      	bhi.n	800aaf4 <__multiply+0x108>
 800ab26:	9a01      	ldr	r2, [sp, #4]
 800ab28:	50a9      	str	r1, [r5, r2]
 800ab2a:	3504      	adds	r5, #4
 800ab2c:	e79b      	b.n	800aa66 <__multiply+0x7a>
 800ab2e:	3e01      	subs	r6, #1
 800ab30:	e79d      	b.n	800aa6e <__multiply+0x82>
 800ab32:	bf00      	nop
 800ab34:	0800c247 	.word	0x0800c247
 800ab38:	0800c258 	.word	0x0800c258

0800ab3c <__pow5mult>:
 800ab3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab40:	4615      	mov	r5, r2
 800ab42:	f012 0203 	ands.w	r2, r2, #3
 800ab46:	4606      	mov	r6, r0
 800ab48:	460f      	mov	r7, r1
 800ab4a:	d007      	beq.n	800ab5c <__pow5mult+0x20>
 800ab4c:	4c25      	ldr	r4, [pc, #148]	; (800abe4 <__pow5mult+0xa8>)
 800ab4e:	3a01      	subs	r2, #1
 800ab50:	2300      	movs	r3, #0
 800ab52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab56:	f7ff fe9f 	bl	800a898 <__multadd>
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	10ad      	asrs	r5, r5, #2
 800ab5e:	d03d      	beq.n	800abdc <__pow5mult+0xa0>
 800ab60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab62:	b97c      	cbnz	r4, 800ab84 <__pow5mult+0x48>
 800ab64:	2010      	movs	r0, #16
 800ab66:	f7fe f9cd 	bl	8008f04 <malloc>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	6270      	str	r0, [r6, #36]	; 0x24
 800ab6e:	b928      	cbnz	r0, 800ab7c <__pow5mult+0x40>
 800ab70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab74:	4b1c      	ldr	r3, [pc, #112]	; (800abe8 <__pow5mult+0xac>)
 800ab76:	481d      	ldr	r0, [pc, #116]	; (800abec <__pow5mult+0xb0>)
 800ab78:	f000 fb1e 	bl	800b1b8 <__assert_func>
 800ab7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab80:	6004      	str	r4, [r0, #0]
 800ab82:	60c4      	str	r4, [r0, #12]
 800ab84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab8c:	b94c      	cbnz	r4, 800aba2 <__pow5mult+0x66>
 800ab8e:	f240 2171 	movw	r1, #625	; 0x271
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7ff ff14 	bl	800a9c0 <__i2b>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	f8c8 0008 	str.w	r0, [r8, #8]
 800aba0:	6003      	str	r3, [r0, #0]
 800aba2:	f04f 0900 	mov.w	r9, #0
 800aba6:	07eb      	lsls	r3, r5, #31
 800aba8:	d50a      	bpl.n	800abc0 <__pow5mult+0x84>
 800abaa:	4639      	mov	r1, r7
 800abac:	4622      	mov	r2, r4
 800abae:	4630      	mov	r0, r6
 800abb0:	f7ff ff1c 	bl	800a9ec <__multiply>
 800abb4:	4680      	mov	r8, r0
 800abb6:	4639      	mov	r1, r7
 800abb8:	4630      	mov	r0, r6
 800abba:	f7ff fe4b 	bl	800a854 <_Bfree>
 800abbe:	4647      	mov	r7, r8
 800abc0:	106d      	asrs	r5, r5, #1
 800abc2:	d00b      	beq.n	800abdc <__pow5mult+0xa0>
 800abc4:	6820      	ldr	r0, [r4, #0]
 800abc6:	b938      	cbnz	r0, 800abd8 <__pow5mult+0x9c>
 800abc8:	4622      	mov	r2, r4
 800abca:	4621      	mov	r1, r4
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff ff0d 	bl	800a9ec <__multiply>
 800abd2:	6020      	str	r0, [r4, #0]
 800abd4:	f8c0 9000 	str.w	r9, [r0]
 800abd8:	4604      	mov	r4, r0
 800abda:	e7e4      	b.n	800aba6 <__pow5mult+0x6a>
 800abdc:	4638      	mov	r0, r7
 800abde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe2:	bf00      	nop
 800abe4:	0800c3a8 	.word	0x0800c3a8
 800abe8:	0800c1d5 	.word	0x0800c1d5
 800abec:	0800c258 	.word	0x0800c258

0800abf0 <__lshift>:
 800abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	460c      	mov	r4, r1
 800abf6:	4607      	mov	r7, r0
 800abf8:	4691      	mov	r9, r2
 800abfa:	6923      	ldr	r3, [r4, #16]
 800abfc:	6849      	ldr	r1, [r1, #4]
 800abfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac08:	f108 0601 	add.w	r6, r8, #1
 800ac0c:	42b3      	cmp	r3, r6
 800ac0e:	db0b      	blt.n	800ac28 <__lshift+0x38>
 800ac10:	4638      	mov	r0, r7
 800ac12:	f7ff fddf 	bl	800a7d4 <_Balloc>
 800ac16:	4605      	mov	r5, r0
 800ac18:	b948      	cbnz	r0, 800ac2e <__lshift+0x3e>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac20:	4b29      	ldr	r3, [pc, #164]	; (800acc8 <__lshift+0xd8>)
 800ac22:	482a      	ldr	r0, [pc, #168]	; (800accc <__lshift+0xdc>)
 800ac24:	f000 fac8 	bl	800b1b8 <__assert_func>
 800ac28:	3101      	adds	r1, #1
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	e7ee      	b.n	800ac0c <__lshift+0x1c>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f100 0114 	add.w	r1, r0, #20
 800ac34:	f100 0210 	add.w	r2, r0, #16
 800ac38:	4618      	mov	r0, r3
 800ac3a:	4553      	cmp	r3, sl
 800ac3c:	db37      	blt.n	800acae <__lshift+0xbe>
 800ac3e:	6920      	ldr	r0, [r4, #16]
 800ac40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac44:	f104 0314 	add.w	r3, r4, #20
 800ac48:	f019 091f 	ands.w	r9, r9, #31
 800ac4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac54:	d02f      	beq.n	800acb6 <__lshift+0xc6>
 800ac56:	468a      	mov	sl, r1
 800ac58:	f04f 0c00 	mov.w	ip, #0
 800ac5c:	f1c9 0e20 	rsb	lr, r9, #32
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	fa02 f209 	lsl.w	r2, r2, r9
 800ac66:	ea42 020c 	orr.w	r2, r2, ip
 800ac6a:	f84a 2b04 	str.w	r2, [sl], #4
 800ac6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac72:	4298      	cmp	r0, r3
 800ac74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac78:	d8f2      	bhi.n	800ac60 <__lshift+0x70>
 800ac7a:	1b03      	subs	r3, r0, r4
 800ac7c:	3b15      	subs	r3, #21
 800ac7e:	f023 0303 	bic.w	r3, r3, #3
 800ac82:	3304      	adds	r3, #4
 800ac84:	f104 0215 	add.w	r2, r4, #21
 800ac88:	4290      	cmp	r0, r2
 800ac8a:	bf38      	it	cc
 800ac8c:	2304      	movcc	r3, #4
 800ac8e:	f841 c003 	str.w	ip, [r1, r3]
 800ac92:	f1bc 0f00 	cmp.w	ip, #0
 800ac96:	d001      	beq.n	800ac9c <__lshift+0xac>
 800ac98:	f108 0602 	add.w	r6, r8, #2
 800ac9c:	3e01      	subs	r6, #1
 800ac9e:	4638      	mov	r0, r7
 800aca0:	4621      	mov	r1, r4
 800aca2:	612e      	str	r6, [r5, #16]
 800aca4:	f7ff fdd6 	bl	800a854 <_Bfree>
 800aca8:	4628      	mov	r0, r5
 800acaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acae:	f842 0f04 	str.w	r0, [r2, #4]!
 800acb2:	3301      	adds	r3, #1
 800acb4:	e7c1      	b.n	800ac3a <__lshift+0x4a>
 800acb6:	3904      	subs	r1, #4
 800acb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acbc:	4298      	cmp	r0, r3
 800acbe:	f841 2f04 	str.w	r2, [r1, #4]!
 800acc2:	d8f9      	bhi.n	800acb8 <__lshift+0xc8>
 800acc4:	e7ea      	b.n	800ac9c <__lshift+0xac>
 800acc6:	bf00      	nop
 800acc8:	0800c247 	.word	0x0800c247
 800accc:	0800c258 	.word	0x0800c258

0800acd0 <__mcmp>:
 800acd0:	4603      	mov	r3, r0
 800acd2:	690a      	ldr	r2, [r1, #16]
 800acd4:	6900      	ldr	r0, [r0, #16]
 800acd6:	b530      	push	{r4, r5, lr}
 800acd8:	1a80      	subs	r0, r0, r2
 800acda:	d10d      	bne.n	800acf8 <__mcmp+0x28>
 800acdc:	3314      	adds	r3, #20
 800acde:	3114      	adds	r1, #20
 800ace0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ace4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ace8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acf0:	4295      	cmp	r5, r2
 800acf2:	d002      	beq.n	800acfa <__mcmp+0x2a>
 800acf4:	d304      	bcc.n	800ad00 <__mcmp+0x30>
 800acf6:	2001      	movs	r0, #1
 800acf8:	bd30      	pop	{r4, r5, pc}
 800acfa:	42a3      	cmp	r3, r4
 800acfc:	d3f4      	bcc.n	800ace8 <__mcmp+0x18>
 800acfe:	e7fb      	b.n	800acf8 <__mcmp+0x28>
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295
 800ad04:	e7f8      	b.n	800acf8 <__mcmp+0x28>
	...

0800ad08 <__mdiff>:
 800ad08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	4607      	mov	r7, r0
 800ad10:	4611      	mov	r1, r2
 800ad12:	4628      	mov	r0, r5
 800ad14:	4614      	mov	r4, r2
 800ad16:	f7ff ffdb 	bl	800acd0 <__mcmp>
 800ad1a:	1e06      	subs	r6, r0, #0
 800ad1c:	d111      	bne.n	800ad42 <__mdiff+0x3a>
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4638      	mov	r0, r7
 800ad22:	f7ff fd57 	bl	800a7d4 <_Balloc>
 800ad26:	4602      	mov	r2, r0
 800ad28:	b928      	cbnz	r0, 800ad36 <__mdiff+0x2e>
 800ad2a:	f240 2132 	movw	r1, #562	; 0x232
 800ad2e:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <__mdiff+0x110>)
 800ad30:	483a      	ldr	r0, [pc, #232]	; (800ae1c <__mdiff+0x114>)
 800ad32:	f000 fa41 	bl	800b1b8 <__assert_func>
 800ad36:	2301      	movs	r3, #1
 800ad38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad42:	bfa4      	itt	ge
 800ad44:	4623      	movge	r3, r4
 800ad46:	462c      	movge	r4, r5
 800ad48:	4638      	mov	r0, r7
 800ad4a:	6861      	ldr	r1, [r4, #4]
 800ad4c:	bfa6      	itte	ge
 800ad4e:	461d      	movge	r5, r3
 800ad50:	2600      	movge	r6, #0
 800ad52:	2601      	movlt	r6, #1
 800ad54:	f7ff fd3e 	bl	800a7d4 <_Balloc>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	b918      	cbnz	r0, 800ad64 <__mdiff+0x5c>
 800ad5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <__mdiff+0x110>)
 800ad62:	e7e5      	b.n	800ad30 <__mdiff+0x28>
 800ad64:	f102 0814 	add.w	r8, r2, #20
 800ad68:	46c2      	mov	sl, r8
 800ad6a:	f04f 0c00 	mov.w	ip, #0
 800ad6e:	6927      	ldr	r7, [r4, #16]
 800ad70:	60c6      	str	r6, [r0, #12]
 800ad72:	692e      	ldr	r6, [r5, #16]
 800ad74:	f104 0014 	add.w	r0, r4, #20
 800ad78:	f105 0914 	add.w	r9, r5, #20
 800ad7c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ad80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad84:	3410      	adds	r4, #16
 800ad86:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ad8a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad8e:	fa1f f18b 	uxth.w	r1, fp
 800ad92:	448c      	add	ip, r1
 800ad94:	b299      	uxth	r1, r3
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	ebac 0101 	sub.w	r1, ip, r1
 800ad9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ada0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ada4:	b289      	uxth	r1, r1
 800ada6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800adaa:	454e      	cmp	r6, r9
 800adac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800adb0:	f84a 3b04 	str.w	r3, [sl], #4
 800adb4:	d8e7      	bhi.n	800ad86 <__mdiff+0x7e>
 800adb6:	1b73      	subs	r3, r6, r5
 800adb8:	3b15      	subs	r3, #21
 800adba:	f023 0303 	bic.w	r3, r3, #3
 800adbe:	3515      	adds	r5, #21
 800adc0:	3304      	adds	r3, #4
 800adc2:	42ae      	cmp	r6, r5
 800adc4:	bf38      	it	cc
 800adc6:	2304      	movcc	r3, #4
 800adc8:	4418      	add	r0, r3
 800adca:	4443      	add	r3, r8
 800adcc:	461e      	mov	r6, r3
 800adce:	4605      	mov	r5, r0
 800add0:	4575      	cmp	r5, lr
 800add2:	d30e      	bcc.n	800adf2 <__mdiff+0xea>
 800add4:	f10e 0103 	add.w	r1, lr, #3
 800add8:	1a09      	subs	r1, r1, r0
 800adda:	f021 0103 	bic.w	r1, r1, #3
 800adde:	3803      	subs	r0, #3
 800ade0:	4586      	cmp	lr, r0
 800ade2:	bf38      	it	cc
 800ade4:	2100      	movcc	r1, #0
 800ade6:	4419      	add	r1, r3
 800ade8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800adec:	b18b      	cbz	r3, 800ae12 <__mdiff+0x10a>
 800adee:	6117      	str	r7, [r2, #16]
 800adf0:	e7a4      	b.n	800ad3c <__mdiff+0x34>
 800adf2:	f855 8b04 	ldr.w	r8, [r5], #4
 800adf6:	fa1f f188 	uxth.w	r1, r8
 800adfa:	4461      	add	r1, ip
 800adfc:	140c      	asrs	r4, r1, #16
 800adfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae02:	b289      	uxth	r1, r1
 800ae04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae08:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ae0c:	f846 1b04 	str.w	r1, [r6], #4
 800ae10:	e7de      	b.n	800add0 <__mdiff+0xc8>
 800ae12:	3f01      	subs	r7, #1
 800ae14:	e7e8      	b.n	800ade8 <__mdiff+0xe0>
 800ae16:	bf00      	nop
 800ae18:	0800c247 	.word	0x0800c247
 800ae1c:	0800c258 	.word	0x0800c258

0800ae20 <__d2b>:
 800ae20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ae24:	2101      	movs	r1, #1
 800ae26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ae2a:	4690      	mov	r8, r2
 800ae2c:	461d      	mov	r5, r3
 800ae2e:	f7ff fcd1 	bl	800a7d4 <_Balloc>
 800ae32:	4604      	mov	r4, r0
 800ae34:	b930      	cbnz	r0, 800ae44 <__d2b+0x24>
 800ae36:	4602      	mov	r2, r0
 800ae38:	f240 310a 	movw	r1, #778	; 0x30a
 800ae3c:	4b24      	ldr	r3, [pc, #144]	; (800aed0 <__d2b+0xb0>)
 800ae3e:	4825      	ldr	r0, [pc, #148]	; (800aed4 <__d2b+0xb4>)
 800ae40:	f000 f9ba 	bl	800b1b8 <__assert_func>
 800ae44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ae48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ae4c:	bb2d      	cbnz	r5, 800ae9a <__d2b+0x7a>
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	f1b8 0300 	subs.w	r3, r8, #0
 800ae54:	d026      	beq.n	800aea4 <__d2b+0x84>
 800ae56:	4668      	mov	r0, sp
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	f7ff fd83 	bl	800a964 <__lo0bits>
 800ae5e:	9900      	ldr	r1, [sp, #0]
 800ae60:	b1f0      	cbz	r0, 800aea0 <__d2b+0x80>
 800ae62:	9a01      	ldr	r2, [sp, #4]
 800ae64:	f1c0 0320 	rsb	r3, r0, #32
 800ae68:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	40c2      	lsrs	r2, r0
 800ae70:	6163      	str	r3, [r4, #20]
 800ae72:	9201      	str	r2, [sp, #4]
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf14      	ite	ne
 800ae7a:	2102      	movne	r1, #2
 800ae7c:	2101      	moveq	r1, #1
 800ae7e:	61a3      	str	r3, [r4, #24]
 800ae80:	6121      	str	r1, [r4, #16]
 800ae82:	b1c5      	cbz	r5, 800aeb6 <__d2b+0x96>
 800ae84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae88:	4405      	add	r5, r0
 800ae8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae8e:	603d      	str	r5, [r7, #0]
 800ae90:	6030      	str	r0, [r6, #0]
 800ae92:	4620      	mov	r0, r4
 800ae94:	b002      	add	sp, #8
 800ae96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae9e:	e7d6      	b.n	800ae4e <__d2b+0x2e>
 800aea0:	6161      	str	r1, [r4, #20]
 800aea2:	e7e7      	b.n	800ae74 <__d2b+0x54>
 800aea4:	a801      	add	r0, sp, #4
 800aea6:	f7ff fd5d 	bl	800a964 <__lo0bits>
 800aeaa:	2101      	movs	r1, #1
 800aeac:	9b01      	ldr	r3, [sp, #4]
 800aeae:	6121      	str	r1, [r4, #16]
 800aeb0:	6163      	str	r3, [r4, #20]
 800aeb2:	3020      	adds	r0, #32
 800aeb4:	e7e5      	b.n	800ae82 <__d2b+0x62>
 800aeb6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800aeba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aebe:	6038      	str	r0, [r7, #0]
 800aec0:	6918      	ldr	r0, [r3, #16]
 800aec2:	f7ff fd2f 	bl	800a924 <__hi0bits>
 800aec6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800aeca:	6031      	str	r1, [r6, #0]
 800aecc:	e7e1      	b.n	800ae92 <__d2b+0x72>
 800aece:	bf00      	nop
 800aed0:	0800c247 	.word	0x0800c247
 800aed4:	0800c258 	.word	0x0800c258

0800aed8 <_calloc_r>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	fba1 5402 	umull	r5, r4, r1, r2
 800aede:	b934      	cbnz	r4, 800aeee <_calloc_r+0x16>
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7fe f887 	bl	8008ff4 <_malloc_r>
 800aee6:	4606      	mov	r6, r0
 800aee8:	b928      	cbnz	r0, 800aef6 <_calloc_r+0x1e>
 800aeea:	4630      	mov	r0, r6
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	220c      	movs	r2, #12
 800aef0:	2600      	movs	r6, #0
 800aef2:	6002      	str	r2, [r0, #0]
 800aef4:	e7f9      	b.n	800aeea <_calloc_r+0x12>
 800aef6:	462a      	mov	r2, r5
 800aef8:	4621      	mov	r1, r4
 800aefa:	f7fe f80b 	bl	8008f14 <memset>
 800aefe:	e7f4      	b.n	800aeea <_calloc_r+0x12>

0800af00 <__ssputs_r>:
 800af00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af04:	688e      	ldr	r6, [r1, #8]
 800af06:	4682      	mov	sl, r0
 800af08:	429e      	cmp	r6, r3
 800af0a:	460c      	mov	r4, r1
 800af0c:	4690      	mov	r8, r2
 800af0e:	461f      	mov	r7, r3
 800af10:	d838      	bhi.n	800af84 <__ssputs_r+0x84>
 800af12:	898a      	ldrh	r2, [r1, #12]
 800af14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af18:	d032      	beq.n	800af80 <__ssputs_r+0x80>
 800af1a:	6825      	ldr	r5, [r4, #0]
 800af1c:	6909      	ldr	r1, [r1, #16]
 800af1e:	3301      	adds	r3, #1
 800af20:	eba5 0901 	sub.w	r9, r5, r1
 800af24:	6965      	ldr	r5, [r4, #20]
 800af26:	444b      	add	r3, r9
 800af28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af30:	106d      	asrs	r5, r5, #1
 800af32:	429d      	cmp	r5, r3
 800af34:	bf38      	it	cc
 800af36:	461d      	movcc	r5, r3
 800af38:	0553      	lsls	r3, r2, #21
 800af3a:	d531      	bpl.n	800afa0 <__ssputs_r+0xa0>
 800af3c:	4629      	mov	r1, r5
 800af3e:	f7fe f859 	bl	8008ff4 <_malloc_r>
 800af42:	4606      	mov	r6, r0
 800af44:	b950      	cbnz	r0, 800af5c <__ssputs_r+0x5c>
 800af46:	230c      	movs	r3, #12
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	f8ca 3000 	str.w	r3, [sl]
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af56:	81a3      	strh	r3, [r4, #12]
 800af58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5c:	464a      	mov	r2, r9
 800af5e:	6921      	ldr	r1, [r4, #16]
 800af60:	f7ff fc1e 	bl	800a7a0 <memcpy>
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af6e:	81a3      	strh	r3, [r4, #12]
 800af70:	6126      	str	r6, [r4, #16]
 800af72:	444e      	add	r6, r9
 800af74:	6026      	str	r6, [r4, #0]
 800af76:	463e      	mov	r6, r7
 800af78:	6165      	str	r5, [r4, #20]
 800af7a:	eba5 0509 	sub.w	r5, r5, r9
 800af7e:	60a5      	str	r5, [r4, #8]
 800af80:	42be      	cmp	r6, r7
 800af82:	d900      	bls.n	800af86 <__ssputs_r+0x86>
 800af84:	463e      	mov	r6, r7
 800af86:	4632      	mov	r2, r6
 800af88:	4641      	mov	r1, r8
 800af8a:	6820      	ldr	r0, [r4, #0]
 800af8c:	f000 f959 	bl	800b242 <memmove>
 800af90:	68a3      	ldr	r3, [r4, #8]
 800af92:	2000      	movs	r0, #0
 800af94:	1b9b      	subs	r3, r3, r6
 800af96:	60a3      	str	r3, [r4, #8]
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	4433      	add	r3, r6
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	e7db      	b.n	800af58 <__ssputs_r+0x58>
 800afa0:	462a      	mov	r2, r5
 800afa2:	f000 f968 	bl	800b276 <_realloc_r>
 800afa6:	4606      	mov	r6, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d1e1      	bne.n	800af70 <__ssputs_r+0x70>
 800afac:	4650      	mov	r0, sl
 800afae:	6921      	ldr	r1, [r4, #16]
 800afb0:	f7fd ffb8 	bl	8008f24 <_free_r>
 800afb4:	e7c7      	b.n	800af46 <__ssputs_r+0x46>
	...

0800afb8 <_svfiprintf_r>:
 800afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	4698      	mov	r8, r3
 800afbe:	898b      	ldrh	r3, [r1, #12]
 800afc0:	4607      	mov	r7, r0
 800afc2:	061b      	lsls	r3, r3, #24
 800afc4:	460d      	mov	r5, r1
 800afc6:	4614      	mov	r4, r2
 800afc8:	b09d      	sub	sp, #116	; 0x74
 800afca:	d50e      	bpl.n	800afea <_svfiprintf_r+0x32>
 800afcc:	690b      	ldr	r3, [r1, #16]
 800afce:	b963      	cbnz	r3, 800afea <_svfiprintf_r+0x32>
 800afd0:	2140      	movs	r1, #64	; 0x40
 800afd2:	f7fe f80f 	bl	8008ff4 <_malloc_r>
 800afd6:	6028      	str	r0, [r5, #0]
 800afd8:	6128      	str	r0, [r5, #16]
 800afda:	b920      	cbnz	r0, 800afe6 <_svfiprintf_r+0x2e>
 800afdc:	230c      	movs	r3, #12
 800afde:	603b      	str	r3, [r7, #0]
 800afe0:	f04f 30ff 	mov.w	r0, #4294967295
 800afe4:	e0d1      	b.n	800b18a <_svfiprintf_r+0x1d2>
 800afe6:	2340      	movs	r3, #64	; 0x40
 800afe8:	616b      	str	r3, [r5, #20]
 800afea:	2300      	movs	r3, #0
 800afec:	9309      	str	r3, [sp, #36]	; 0x24
 800afee:	2320      	movs	r3, #32
 800aff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aff4:	2330      	movs	r3, #48	; 0x30
 800aff6:	f04f 0901 	mov.w	r9, #1
 800affa:	f8cd 800c 	str.w	r8, [sp, #12]
 800affe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b1a4 <_svfiprintf_r+0x1ec>
 800b002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b006:	4623      	mov	r3, r4
 800b008:	469a      	mov	sl, r3
 800b00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b00e:	b10a      	cbz	r2, 800b014 <_svfiprintf_r+0x5c>
 800b010:	2a25      	cmp	r2, #37	; 0x25
 800b012:	d1f9      	bne.n	800b008 <_svfiprintf_r+0x50>
 800b014:	ebba 0b04 	subs.w	fp, sl, r4
 800b018:	d00b      	beq.n	800b032 <_svfiprintf_r+0x7a>
 800b01a:	465b      	mov	r3, fp
 800b01c:	4622      	mov	r2, r4
 800b01e:	4629      	mov	r1, r5
 800b020:	4638      	mov	r0, r7
 800b022:	f7ff ff6d 	bl	800af00 <__ssputs_r>
 800b026:	3001      	adds	r0, #1
 800b028:	f000 80aa 	beq.w	800b180 <_svfiprintf_r+0x1c8>
 800b02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b02e:	445a      	add	r2, fp
 800b030:	9209      	str	r2, [sp, #36]	; 0x24
 800b032:	f89a 3000 	ldrb.w	r3, [sl]
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 80a2 	beq.w	800b180 <_svfiprintf_r+0x1c8>
 800b03c:	2300      	movs	r3, #0
 800b03e:	f04f 32ff 	mov.w	r2, #4294967295
 800b042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b046:	f10a 0a01 	add.w	sl, sl, #1
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	9307      	str	r3, [sp, #28]
 800b04e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b052:	931a      	str	r3, [sp, #104]	; 0x68
 800b054:	4654      	mov	r4, sl
 800b056:	2205      	movs	r2, #5
 800b058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b05c:	4851      	ldr	r0, [pc, #324]	; (800b1a4 <_svfiprintf_r+0x1ec>)
 800b05e:	f7ff fb91 	bl	800a784 <memchr>
 800b062:	9a04      	ldr	r2, [sp, #16]
 800b064:	b9d8      	cbnz	r0, 800b09e <_svfiprintf_r+0xe6>
 800b066:	06d0      	lsls	r0, r2, #27
 800b068:	bf44      	itt	mi
 800b06a:	2320      	movmi	r3, #32
 800b06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b070:	0711      	lsls	r1, r2, #28
 800b072:	bf44      	itt	mi
 800b074:	232b      	movmi	r3, #43	; 0x2b
 800b076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b07a:	f89a 3000 	ldrb.w	r3, [sl]
 800b07e:	2b2a      	cmp	r3, #42	; 0x2a
 800b080:	d015      	beq.n	800b0ae <_svfiprintf_r+0xf6>
 800b082:	4654      	mov	r4, sl
 800b084:	2000      	movs	r0, #0
 800b086:	f04f 0c0a 	mov.w	ip, #10
 800b08a:	9a07      	ldr	r2, [sp, #28]
 800b08c:	4621      	mov	r1, r4
 800b08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b092:	3b30      	subs	r3, #48	; 0x30
 800b094:	2b09      	cmp	r3, #9
 800b096:	d94e      	bls.n	800b136 <_svfiprintf_r+0x17e>
 800b098:	b1b0      	cbz	r0, 800b0c8 <_svfiprintf_r+0x110>
 800b09a:	9207      	str	r2, [sp, #28]
 800b09c:	e014      	b.n	800b0c8 <_svfiprintf_r+0x110>
 800b09e:	eba0 0308 	sub.w	r3, r0, r8
 800b0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	46a2      	mov	sl, r4
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	e7d2      	b.n	800b054 <_svfiprintf_r+0x9c>
 800b0ae:	9b03      	ldr	r3, [sp, #12]
 800b0b0:	1d19      	adds	r1, r3, #4
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	9103      	str	r1, [sp, #12]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	bfbb      	ittet	lt
 800b0ba:	425b      	neglt	r3, r3
 800b0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b0c0:	9307      	strge	r3, [sp, #28]
 800b0c2:	9307      	strlt	r3, [sp, #28]
 800b0c4:	bfb8      	it	lt
 800b0c6:	9204      	strlt	r2, [sp, #16]
 800b0c8:	7823      	ldrb	r3, [r4, #0]
 800b0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b0cc:	d10c      	bne.n	800b0e8 <_svfiprintf_r+0x130>
 800b0ce:	7863      	ldrb	r3, [r4, #1]
 800b0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d2:	d135      	bne.n	800b140 <_svfiprintf_r+0x188>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	3402      	adds	r4, #2
 800b0d8:	1d1a      	adds	r2, r3, #4
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	9203      	str	r2, [sp, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	bfb8      	it	lt
 800b0e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b1a8 <_svfiprintf_r+0x1f0>
 800b0ec:	2203      	movs	r2, #3
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	7821      	ldrb	r1, [r4, #0]
 800b0f2:	f7ff fb47 	bl	800a784 <memchr>
 800b0f6:	b140      	cbz	r0, 800b10a <_svfiprintf_r+0x152>
 800b0f8:	2340      	movs	r3, #64	; 0x40
 800b0fa:	eba0 000a 	sub.w	r0, r0, sl
 800b0fe:	fa03 f000 	lsl.w	r0, r3, r0
 800b102:	9b04      	ldr	r3, [sp, #16]
 800b104:	3401      	adds	r4, #1
 800b106:	4303      	orrs	r3, r0
 800b108:	9304      	str	r3, [sp, #16]
 800b10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10e:	2206      	movs	r2, #6
 800b110:	4826      	ldr	r0, [pc, #152]	; (800b1ac <_svfiprintf_r+0x1f4>)
 800b112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b116:	f7ff fb35 	bl	800a784 <memchr>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d038      	beq.n	800b190 <_svfiprintf_r+0x1d8>
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <_svfiprintf_r+0x1f8>)
 800b120:	bb1b      	cbnz	r3, 800b16a <_svfiprintf_r+0x1b2>
 800b122:	9b03      	ldr	r3, [sp, #12]
 800b124:	3307      	adds	r3, #7
 800b126:	f023 0307 	bic.w	r3, r3, #7
 800b12a:	3308      	adds	r3, #8
 800b12c:	9303      	str	r3, [sp, #12]
 800b12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b130:	4433      	add	r3, r6
 800b132:	9309      	str	r3, [sp, #36]	; 0x24
 800b134:	e767      	b.n	800b006 <_svfiprintf_r+0x4e>
 800b136:	460c      	mov	r4, r1
 800b138:	2001      	movs	r0, #1
 800b13a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b13e:	e7a5      	b.n	800b08c <_svfiprintf_r+0xd4>
 800b140:	2300      	movs	r3, #0
 800b142:	f04f 0c0a 	mov.w	ip, #10
 800b146:	4619      	mov	r1, r3
 800b148:	3401      	adds	r4, #1
 800b14a:	9305      	str	r3, [sp, #20]
 800b14c:	4620      	mov	r0, r4
 800b14e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b152:	3a30      	subs	r2, #48	; 0x30
 800b154:	2a09      	cmp	r2, #9
 800b156:	d903      	bls.n	800b160 <_svfiprintf_r+0x1a8>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0c5      	beq.n	800b0e8 <_svfiprintf_r+0x130>
 800b15c:	9105      	str	r1, [sp, #20]
 800b15e:	e7c3      	b.n	800b0e8 <_svfiprintf_r+0x130>
 800b160:	4604      	mov	r4, r0
 800b162:	2301      	movs	r3, #1
 800b164:	fb0c 2101 	mla	r1, ip, r1, r2
 800b168:	e7f0      	b.n	800b14c <_svfiprintf_r+0x194>
 800b16a:	ab03      	add	r3, sp, #12
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	462a      	mov	r2, r5
 800b170:	4638      	mov	r0, r7
 800b172:	4b10      	ldr	r3, [pc, #64]	; (800b1b4 <_svfiprintf_r+0x1fc>)
 800b174:	a904      	add	r1, sp, #16
 800b176:	f7fe f84f 	bl	8009218 <_printf_float>
 800b17a:	1c42      	adds	r2, r0, #1
 800b17c:	4606      	mov	r6, r0
 800b17e:	d1d6      	bne.n	800b12e <_svfiprintf_r+0x176>
 800b180:	89ab      	ldrh	r3, [r5, #12]
 800b182:	065b      	lsls	r3, r3, #25
 800b184:	f53f af2c 	bmi.w	800afe0 <_svfiprintf_r+0x28>
 800b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18a:	b01d      	add	sp, #116	; 0x74
 800b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b190:	ab03      	add	r3, sp, #12
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	462a      	mov	r2, r5
 800b196:	4638      	mov	r0, r7
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <_svfiprintf_r+0x1fc>)
 800b19a:	a904      	add	r1, sp, #16
 800b19c:	f7fe fad8 	bl	8009750 <_printf_i>
 800b1a0:	e7eb      	b.n	800b17a <_svfiprintf_r+0x1c2>
 800b1a2:	bf00      	nop
 800b1a4:	0800c3b4 	.word	0x0800c3b4
 800b1a8:	0800c3ba 	.word	0x0800c3ba
 800b1ac:	0800c3be 	.word	0x0800c3be
 800b1b0:	08009219 	.word	0x08009219
 800b1b4:	0800af01 	.word	0x0800af01

0800b1b8 <__assert_func>:
 800b1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ba:	4614      	mov	r4, r2
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <__assert_func+0x2c>)
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68d8      	ldr	r0, [r3, #12]
 800b1c6:	b14c      	cbz	r4, 800b1dc <__assert_func+0x24>
 800b1c8:	4b07      	ldr	r3, [pc, #28]	; (800b1e8 <__assert_func+0x30>)
 800b1ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1ce:	9100      	str	r1, [sp, #0]
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	4906      	ldr	r1, [pc, #24]	; (800b1ec <__assert_func+0x34>)
 800b1d4:	f000 f80e 	bl	800b1f4 <fiprintf>
 800b1d8:	f7fd fe62 	bl	8008ea0 <abort>
 800b1dc:	4b04      	ldr	r3, [pc, #16]	; (800b1f0 <__assert_func+0x38>)
 800b1de:	461c      	mov	r4, r3
 800b1e0:	e7f3      	b.n	800b1ca <__assert_func+0x12>
 800b1e2:	bf00      	nop
 800b1e4:	2000000c 	.word	0x2000000c
 800b1e8:	0800c3c5 	.word	0x0800c3c5
 800b1ec:	0800c3d2 	.word	0x0800c3d2
 800b1f0:	0800c400 	.word	0x0800c400

0800b1f4 <fiprintf>:
 800b1f4:	b40e      	push	{r1, r2, r3}
 800b1f6:	b503      	push	{r0, r1, lr}
 800b1f8:	4601      	mov	r1, r0
 800b1fa:	ab03      	add	r3, sp, #12
 800b1fc:	4805      	ldr	r0, [pc, #20]	; (800b214 <fiprintf+0x20>)
 800b1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b202:	6800      	ldr	r0, [r0, #0]
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	f000 f88d 	bl	800b324 <_vfiprintf_r>
 800b20a:	b002      	add	sp, #8
 800b20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b210:	b003      	add	sp, #12
 800b212:	4770      	bx	lr
 800b214:	2000000c 	.word	0x2000000c

0800b218 <__retarget_lock_init_recursive>:
 800b218:	4770      	bx	lr

0800b21a <__retarget_lock_acquire_recursive>:
 800b21a:	4770      	bx	lr

0800b21c <__retarget_lock_release_recursive>:
 800b21c:	4770      	bx	lr

0800b21e <__ascii_mbtowc>:
 800b21e:	b082      	sub	sp, #8
 800b220:	b901      	cbnz	r1, 800b224 <__ascii_mbtowc+0x6>
 800b222:	a901      	add	r1, sp, #4
 800b224:	b142      	cbz	r2, 800b238 <__ascii_mbtowc+0x1a>
 800b226:	b14b      	cbz	r3, 800b23c <__ascii_mbtowc+0x1e>
 800b228:	7813      	ldrb	r3, [r2, #0]
 800b22a:	600b      	str	r3, [r1, #0]
 800b22c:	7812      	ldrb	r2, [r2, #0]
 800b22e:	1e10      	subs	r0, r2, #0
 800b230:	bf18      	it	ne
 800b232:	2001      	movne	r0, #1
 800b234:	b002      	add	sp, #8
 800b236:	4770      	bx	lr
 800b238:	4610      	mov	r0, r2
 800b23a:	e7fb      	b.n	800b234 <__ascii_mbtowc+0x16>
 800b23c:	f06f 0001 	mvn.w	r0, #1
 800b240:	e7f8      	b.n	800b234 <__ascii_mbtowc+0x16>

0800b242 <memmove>:
 800b242:	4288      	cmp	r0, r1
 800b244:	b510      	push	{r4, lr}
 800b246:	eb01 0402 	add.w	r4, r1, r2
 800b24a:	d902      	bls.n	800b252 <memmove+0x10>
 800b24c:	4284      	cmp	r4, r0
 800b24e:	4623      	mov	r3, r4
 800b250:	d807      	bhi.n	800b262 <memmove+0x20>
 800b252:	1e43      	subs	r3, r0, #1
 800b254:	42a1      	cmp	r1, r4
 800b256:	d008      	beq.n	800b26a <memmove+0x28>
 800b258:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b25c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b260:	e7f8      	b.n	800b254 <memmove+0x12>
 800b262:	4601      	mov	r1, r0
 800b264:	4402      	add	r2, r0
 800b266:	428a      	cmp	r2, r1
 800b268:	d100      	bne.n	800b26c <memmove+0x2a>
 800b26a:	bd10      	pop	{r4, pc}
 800b26c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b270:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b274:	e7f7      	b.n	800b266 <memmove+0x24>

0800b276 <_realloc_r>:
 800b276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27a:	4680      	mov	r8, r0
 800b27c:	4614      	mov	r4, r2
 800b27e:	460e      	mov	r6, r1
 800b280:	b921      	cbnz	r1, 800b28c <_realloc_r+0x16>
 800b282:	4611      	mov	r1, r2
 800b284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b288:	f7fd beb4 	b.w	8008ff4 <_malloc_r>
 800b28c:	b92a      	cbnz	r2, 800b29a <_realloc_r+0x24>
 800b28e:	f7fd fe49 	bl	8008f24 <_free_r>
 800b292:	4625      	mov	r5, r4
 800b294:	4628      	mov	r0, r5
 800b296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29a:	f000 fc59 	bl	800bb50 <_malloc_usable_size_r>
 800b29e:	4284      	cmp	r4, r0
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	d802      	bhi.n	800b2aa <_realloc_r+0x34>
 800b2a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2a8:	d812      	bhi.n	800b2d0 <_realloc_r+0x5a>
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	f7fd fea1 	bl	8008ff4 <_malloc_r>
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d0ed      	beq.n	800b294 <_realloc_r+0x1e>
 800b2b8:	42bc      	cmp	r4, r7
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	4631      	mov	r1, r6
 800b2be:	bf28      	it	cs
 800b2c0:	463a      	movcs	r2, r7
 800b2c2:	f7ff fa6d 	bl	800a7a0 <memcpy>
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	f7fd fe2b 	bl	8008f24 <_free_r>
 800b2ce:	e7e1      	b.n	800b294 <_realloc_r+0x1e>
 800b2d0:	4635      	mov	r5, r6
 800b2d2:	e7df      	b.n	800b294 <_realloc_r+0x1e>

0800b2d4 <__sfputc_r>:
 800b2d4:	6893      	ldr	r3, [r2, #8]
 800b2d6:	b410      	push	{r4}
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	6093      	str	r3, [r2, #8]
 800b2de:	da07      	bge.n	800b2f0 <__sfputc_r+0x1c>
 800b2e0:	6994      	ldr	r4, [r2, #24]
 800b2e2:	42a3      	cmp	r3, r4
 800b2e4:	db01      	blt.n	800b2ea <__sfputc_r+0x16>
 800b2e6:	290a      	cmp	r1, #10
 800b2e8:	d102      	bne.n	800b2f0 <__sfputc_r+0x1c>
 800b2ea:	bc10      	pop	{r4}
 800b2ec:	f000 b94a 	b.w	800b584 <__swbuf_r>
 800b2f0:	6813      	ldr	r3, [r2, #0]
 800b2f2:	1c58      	adds	r0, r3, #1
 800b2f4:	6010      	str	r0, [r2, #0]
 800b2f6:	7019      	strb	r1, [r3, #0]
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	bc10      	pop	{r4}
 800b2fc:	4770      	bx	lr

0800b2fe <__sfputs_r>:
 800b2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b300:	4606      	mov	r6, r0
 800b302:	460f      	mov	r7, r1
 800b304:	4614      	mov	r4, r2
 800b306:	18d5      	adds	r5, r2, r3
 800b308:	42ac      	cmp	r4, r5
 800b30a:	d101      	bne.n	800b310 <__sfputs_r+0x12>
 800b30c:	2000      	movs	r0, #0
 800b30e:	e007      	b.n	800b320 <__sfputs_r+0x22>
 800b310:	463a      	mov	r2, r7
 800b312:	4630      	mov	r0, r6
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	f7ff ffdc 	bl	800b2d4 <__sfputc_r>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d1f3      	bne.n	800b308 <__sfputs_r+0xa>
 800b320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b324 <_vfiprintf_r>:
 800b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b328:	460d      	mov	r5, r1
 800b32a:	4614      	mov	r4, r2
 800b32c:	4698      	mov	r8, r3
 800b32e:	4606      	mov	r6, r0
 800b330:	b09d      	sub	sp, #116	; 0x74
 800b332:	b118      	cbz	r0, 800b33c <_vfiprintf_r+0x18>
 800b334:	6983      	ldr	r3, [r0, #24]
 800b336:	b90b      	cbnz	r3, 800b33c <_vfiprintf_r+0x18>
 800b338:	f000 fb08 	bl	800b94c <__sinit>
 800b33c:	4b89      	ldr	r3, [pc, #548]	; (800b564 <_vfiprintf_r+0x240>)
 800b33e:	429d      	cmp	r5, r3
 800b340:	d11b      	bne.n	800b37a <_vfiprintf_r+0x56>
 800b342:	6875      	ldr	r5, [r6, #4]
 800b344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b346:	07d9      	lsls	r1, r3, #31
 800b348:	d405      	bmi.n	800b356 <_vfiprintf_r+0x32>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	059a      	lsls	r2, r3, #22
 800b34e:	d402      	bmi.n	800b356 <_vfiprintf_r+0x32>
 800b350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b352:	f7ff ff62 	bl	800b21a <__retarget_lock_acquire_recursive>
 800b356:	89ab      	ldrh	r3, [r5, #12]
 800b358:	071b      	lsls	r3, r3, #28
 800b35a:	d501      	bpl.n	800b360 <_vfiprintf_r+0x3c>
 800b35c:	692b      	ldr	r3, [r5, #16]
 800b35e:	b9eb      	cbnz	r3, 800b39c <_vfiprintf_r+0x78>
 800b360:	4629      	mov	r1, r5
 800b362:	4630      	mov	r0, r6
 800b364:	f000 f96e 	bl	800b644 <__swsetup_r>
 800b368:	b1c0      	cbz	r0, 800b39c <_vfiprintf_r+0x78>
 800b36a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b36c:	07dc      	lsls	r4, r3, #31
 800b36e:	d50e      	bpl.n	800b38e <_vfiprintf_r+0x6a>
 800b370:	f04f 30ff 	mov.w	r0, #4294967295
 800b374:	b01d      	add	sp, #116	; 0x74
 800b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37a:	4b7b      	ldr	r3, [pc, #492]	; (800b568 <_vfiprintf_r+0x244>)
 800b37c:	429d      	cmp	r5, r3
 800b37e:	d101      	bne.n	800b384 <_vfiprintf_r+0x60>
 800b380:	68b5      	ldr	r5, [r6, #8]
 800b382:	e7df      	b.n	800b344 <_vfiprintf_r+0x20>
 800b384:	4b79      	ldr	r3, [pc, #484]	; (800b56c <_vfiprintf_r+0x248>)
 800b386:	429d      	cmp	r5, r3
 800b388:	bf08      	it	eq
 800b38a:	68f5      	ldreq	r5, [r6, #12]
 800b38c:	e7da      	b.n	800b344 <_vfiprintf_r+0x20>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	0598      	lsls	r0, r3, #22
 800b392:	d4ed      	bmi.n	800b370 <_vfiprintf_r+0x4c>
 800b394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b396:	f7ff ff41 	bl	800b21c <__retarget_lock_release_recursive>
 800b39a:	e7e9      	b.n	800b370 <_vfiprintf_r+0x4c>
 800b39c:	2300      	movs	r3, #0
 800b39e:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a0:	2320      	movs	r3, #32
 800b3a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3a6:	2330      	movs	r3, #48	; 0x30
 800b3a8:	f04f 0901 	mov.w	r9, #1
 800b3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b570 <_vfiprintf_r+0x24c>
 800b3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3b8:	4623      	mov	r3, r4
 800b3ba:	469a      	mov	sl, r3
 800b3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c0:	b10a      	cbz	r2, 800b3c6 <_vfiprintf_r+0xa2>
 800b3c2:	2a25      	cmp	r2, #37	; 0x25
 800b3c4:	d1f9      	bne.n	800b3ba <_vfiprintf_r+0x96>
 800b3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ca:	d00b      	beq.n	800b3e4 <_vfiprintf_r+0xc0>
 800b3cc:	465b      	mov	r3, fp
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7ff ff93 	bl	800b2fe <__sfputs_r>
 800b3d8:	3001      	adds	r0, #1
 800b3da:	f000 80aa 	beq.w	800b532 <_vfiprintf_r+0x20e>
 800b3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e0:	445a      	add	r2, fp
 800b3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 80a2 	beq.w	800b532 <_vfiprintf_r+0x20e>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3f8:	f10a 0a01 	add.w	sl, sl, #1
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	9307      	str	r3, [sp, #28]
 800b400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b404:	931a      	str	r3, [sp, #104]	; 0x68
 800b406:	4654      	mov	r4, sl
 800b408:	2205      	movs	r2, #5
 800b40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b40e:	4858      	ldr	r0, [pc, #352]	; (800b570 <_vfiprintf_r+0x24c>)
 800b410:	f7ff f9b8 	bl	800a784 <memchr>
 800b414:	9a04      	ldr	r2, [sp, #16]
 800b416:	b9d8      	cbnz	r0, 800b450 <_vfiprintf_r+0x12c>
 800b418:	06d1      	lsls	r1, r2, #27
 800b41a:	bf44      	itt	mi
 800b41c:	2320      	movmi	r3, #32
 800b41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b422:	0713      	lsls	r3, r2, #28
 800b424:	bf44      	itt	mi
 800b426:	232b      	movmi	r3, #43	; 0x2b
 800b428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b42c:	f89a 3000 	ldrb.w	r3, [sl]
 800b430:	2b2a      	cmp	r3, #42	; 0x2a
 800b432:	d015      	beq.n	800b460 <_vfiprintf_r+0x13c>
 800b434:	4654      	mov	r4, sl
 800b436:	2000      	movs	r0, #0
 800b438:	f04f 0c0a 	mov.w	ip, #10
 800b43c:	9a07      	ldr	r2, [sp, #28]
 800b43e:	4621      	mov	r1, r4
 800b440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b444:	3b30      	subs	r3, #48	; 0x30
 800b446:	2b09      	cmp	r3, #9
 800b448:	d94e      	bls.n	800b4e8 <_vfiprintf_r+0x1c4>
 800b44a:	b1b0      	cbz	r0, 800b47a <_vfiprintf_r+0x156>
 800b44c:	9207      	str	r2, [sp, #28]
 800b44e:	e014      	b.n	800b47a <_vfiprintf_r+0x156>
 800b450:	eba0 0308 	sub.w	r3, r0, r8
 800b454:	fa09 f303 	lsl.w	r3, r9, r3
 800b458:	4313      	orrs	r3, r2
 800b45a:	46a2      	mov	sl, r4
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	e7d2      	b.n	800b406 <_vfiprintf_r+0xe2>
 800b460:	9b03      	ldr	r3, [sp, #12]
 800b462:	1d19      	adds	r1, r3, #4
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	9103      	str	r1, [sp, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	bfbb      	ittet	lt
 800b46c:	425b      	neglt	r3, r3
 800b46e:	f042 0202 	orrlt.w	r2, r2, #2
 800b472:	9307      	strge	r3, [sp, #28]
 800b474:	9307      	strlt	r3, [sp, #28]
 800b476:	bfb8      	it	lt
 800b478:	9204      	strlt	r2, [sp, #16]
 800b47a:	7823      	ldrb	r3, [r4, #0]
 800b47c:	2b2e      	cmp	r3, #46	; 0x2e
 800b47e:	d10c      	bne.n	800b49a <_vfiprintf_r+0x176>
 800b480:	7863      	ldrb	r3, [r4, #1]
 800b482:	2b2a      	cmp	r3, #42	; 0x2a
 800b484:	d135      	bne.n	800b4f2 <_vfiprintf_r+0x1ce>
 800b486:	9b03      	ldr	r3, [sp, #12]
 800b488:	3402      	adds	r4, #2
 800b48a:	1d1a      	adds	r2, r3, #4
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	9203      	str	r2, [sp, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	bfb8      	it	lt
 800b494:	f04f 33ff 	movlt.w	r3, #4294967295
 800b498:	9305      	str	r3, [sp, #20]
 800b49a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b574 <_vfiprintf_r+0x250>
 800b49e:	2203      	movs	r2, #3
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	7821      	ldrb	r1, [r4, #0]
 800b4a4:	f7ff f96e 	bl	800a784 <memchr>
 800b4a8:	b140      	cbz	r0, 800b4bc <_vfiprintf_r+0x198>
 800b4aa:	2340      	movs	r3, #64	; 0x40
 800b4ac:	eba0 000a 	sub.w	r0, r0, sl
 800b4b0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4b4:	9b04      	ldr	r3, [sp, #16]
 800b4b6:	3401      	adds	r4, #1
 800b4b8:	4303      	orrs	r3, r0
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c0:	2206      	movs	r2, #6
 800b4c2:	482d      	ldr	r0, [pc, #180]	; (800b578 <_vfiprintf_r+0x254>)
 800b4c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4c8:	f7ff f95c 	bl	800a784 <memchr>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d03f      	beq.n	800b550 <_vfiprintf_r+0x22c>
 800b4d0:	4b2a      	ldr	r3, [pc, #168]	; (800b57c <_vfiprintf_r+0x258>)
 800b4d2:	bb1b      	cbnz	r3, 800b51c <_vfiprintf_r+0x1f8>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	3307      	adds	r3, #7
 800b4d8:	f023 0307 	bic.w	r3, r3, #7
 800b4dc:	3308      	adds	r3, #8
 800b4de:	9303      	str	r3, [sp, #12]
 800b4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e2:	443b      	add	r3, r7
 800b4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e6:	e767      	b.n	800b3b8 <_vfiprintf_r+0x94>
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f0:	e7a5      	b.n	800b43e <_vfiprintf_r+0x11a>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f04f 0c0a 	mov.w	ip, #10
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	3401      	adds	r4, #1
 800b4fc:	9305      	str	r3, [sp, #20]
 800b4fe:	4620      	mov	r0, r4
 800b500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b504:	3a30      	subs	r2, #48	; 0x30
 800b506:	2a09      	cmp	r2, #9
 800b508:	d903      	bls.n	800b512 <_vfiprintf_r+0x1ee>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0c5      	beq.n	800b49a <_vfiprintf_r+0x176>
 800b50e:	9105      	str	r1, [sp, #20]
 800b510:	e7c3      	b.n	800b49a <_vfiprintf_r+0x176>
 800b512:	4604      	mov	r4, r0
 800b514:	2301      	movs	r3, #1
 800b516:	fb0c 2101 	mla	r1, ip, r1, r2
 800b51a:	e7f0      	b.n	800b4fe <_vfiprintf_r+0x1da>
 800b51c:	ab03      	add	r3, sp, #12
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	462a      	mov	r2, r5
 800b522:	4630      	mov	r0, r6
 800b524:	4b16      	ldr	r3, [pc, #88]	; (800b580 <_vfiprintf_r+0x25c>)
 800b526:	a904      	add	r1, sp, #16
 800b528:	f7fd fe76 	bl	8009218 <_printf_float>
 800b52c:	4607      	mov	r7, r0
 800b52e:	1c78      	adds	r0, r7, #1
 800b530:	d1d6      	bne.n	800b4e0 <_vfiprintf_r+0x1bc>
 800b532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b534:	07d9      	lsls	r1, r3, #31
 800b536:	d405      	bmi.n	800b544 <_vfiprintf_r+0x220>
 800b538:	89ab      	ldrh	r3, [r5, #12]
 800b53a:	059a      	lsls	r2, r3, #22
 800b53c:	d402      	bmi.n	800b544 <_vfiprintf_r+0x220>
 800b53e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b540:	f7ff fe6c 	bl	800b21c <__retarget_lock_release_recursive>
 800b544:	89ab      	ldrh	r3, [r5, #12]
 800b546:	065b      	lsls	r3, r3, #25
 800b548:	f53f af12 	bmi.w	800b370 <_vfiprintf_r+0x4c>
 800b54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b54e:	e711      	b.n	800b374 <_vfiprintf_r+0x50>
 800b550:	ab03      	add	r3, sp, #12
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	462a      	mov	r2, r5
 800b556:	4630      	mov	r0, r6
 800b558:	4b09      	ldr	r3, [pc, #36]	; (800b580 <_vfiprintf_r+0x25c>)
 800b55a:	a904      	add	r1, sp, #16
 800b55c:	f7fe f8f8 	bl	8009750 <_printf_i>
 800b560:	e7e4      	b.n	800b52c <_vfiprintf_r+0x208>
 800b562:	bf00      	nop
 800b564:	0800c52c 	.word	0x0800c52c
 800b568:	0800c54c 	.word	0x0800c54c
 800b56c:	0800c50c 	.word	0x0800c50c
 800b570:	0800c3b4 	.word	0x0800c3b4
 800b574:	0800c3ba 	.word	0x0800c3ba
 800b578:	0800c3be 	.word	0x0800c3be
 800b57c:	08009219 	.word	0x08009219
 800b580:	0800b2ff 	.word	0x0800b2ff

0800b584 <__swbuf_r>:
 800b584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b586:	460e      	mov	r6, r1
 800b588:	4614      	mov	r4, r2
 800b58a:	4605      	mov	r5, r0
 800b58c:	b118      	cbz	r0, 800b596 <__swbuf_r+0x12>
 800b58e:	6983      	ldr	r3, [r0, #24]
 800b590:	b90b      	cbnz	r3, 800b596 <__swbuf_r+0x12>
 800b592:	f000 f9db 	bl	800b94c <__sinit>
 800b596:	4b21      	ldr	r3, [pc, #132]	; (800b61c <__swbuf_r+0x98>)
 800b598:	429c      	cmp	r4, r3
 800b59a:	d12b      	bne.n	800b5f4 <__swbuf_r+0x70>
 800b59c:	686c      	ldr	r4, [r5, #4]
 800b59e:	69a3      	ldr	r3, [r4, #24]
 800b5a0:	60a3      	str	r3, [r4, #8]
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	071a      	lsls	r2, r3, #28
 800b5a6:	d52f      	bpl.n	800b608 <__swbuf_r+0x84>
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	b36b      	cbz	r3, 800b608 <__swbuf_r+0x84>
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	6820      	ldr	r0, [r4, #0]
 800b5b0:	b2f6      	uxtb	r6, r6
 800b5b2:	1ac0      	subs	r0, r0, r3
 800b5b4:	6963      	ldr	r3, [r4, #20]
 800b5b6:	4637      	mov	r7, r6
 800b5b8:	4283      	cmp	r3, r0
 800b5ba:	dc04      	bgt.n	800b5c6 <__swbuf_r+0x42>
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f000 f930 	bl	800b824 <_fflush_r>
 800b5c4:	bb30      	cbnz	r0, 800b614 <__swbuf_r+0x90>
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	60a3      	str	r3, [r4, #8]
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	6022      	str	r2, [r4, #0]
 800b5d4:	701e      	strb	r6, [r3, #0]
 800b5d6:	6963      	ldr	r3, [r4, #20]
 800b5d8:	4283      	cmp	r3, r0
 800b5da:	d004      	beq.n	800b5e6 <__swbuf_r+0x62>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	07db      	lsls	r3, r3, #31
 800b5e0:	d506      	bpl.n	800b5f0 <__swbuf_r+0x6c>
 800b5e2:	2e0a      	cmp	r6, #10
 800b5e4:	d104      	bne.n	800b5f0 <__swbuf_r+0x6c>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f000 f91b 	bl	800b824 <_fflush_r>
 800b5ee:	b988      	cbnz	r0, 800b614 <__swbuf_r+0x90>
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <__swbuf_r+0x9c>)
 800b5f6:	429c      	cmp	r4, r3
 800b5f8:	d101      	bne.n	800b5fe <__swbuf_r+0x7a>
 800b5fa:	68ac      	ldr	r4, [r5, #8]
 800b5fc:	e7cf      	b.n	800b59e <__swbuf_r+0x1a>
 800b5fe:	4b09      	ldr	r3, [pc, #36]	; (800b624 <__swbuf_r+0xa0>)
 800b600:	429c      	cmp	r4, r3
 800b602:	bf08      	it	eq
 800b604:	68ec      	ldreq	r4, [r5, #12]
 800b606:	e7ca      	b.n	800b59e <__swbuf_r+0x1a>
 800b608:	4621      	mov	r1, r4
 800b60a:	4628      	mov	r0, r5
 800b60c:	f000 f81a 	bl	800b644 <__swsetup_r>
 800b610:	2800      	cmp	r0, #0
 800b612:	d0cb      	beq.n	800b5ac <__swbuf_r+0x28>
 800b614:	f04f 37ff 	mov.w	r7, #4294967295
 800b618:	e7ea      	b.n	800b5f0 <__swbuf_r+0x6c>
 800b61a:	bf00      	nop
 800b61c:	0800c52c 	.word	0x0800c52c
 800b620:	0800c54c 	.word	0x0800c54c
 800b624:	0800c50c 	.word	0x0800c50c

0800b628 <__ascii_wctomb>:
 800b628:	4603      	mov	r3, r0
 800b62a:	4608      	mov	r0, r1
 800b62c:	b141      	cbz	r1, 800b640 <__ascii_wctomb+0x18>
 800b62e:	2aff      	cmp	r2, #255	; 0xff
 800b630:	d904      	bls.n	800b63c <__ascii_wctomb+0x14>
 800b632:	228a      	movs	r2, #138	; 0x8a
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	4770      	bx	lr
 800b63c:	2001      	movs	r0, #1
 800b63e:	700a      	strb	r2, [r1, #0]
 800b640:	4770      	bx	lr
	...

0800b644 <__swsetup_r>:
 800b644:	4b32      	ldr	r3, [pc, #200]	; (800b710 <__swsetup_r+0xcc>)
 800b646:	b570      	push	{r4, r5, r6, lr}
 800b648:	681d      	ldr	r5, [r3, #0]
 800b64a:	4606      	mov	r6, r0
 800b64c:	460c      	mov	r4, r1
 800b64e:	b125      	cbz	r5, 800b65a <__swsetup_r+0x16>
 800b650:	69ab      	ldr	r3, [r5, #24]
 800b652:	b913      	cbnz	r3, 800b65a <__swsetup_r+0x16>
 800b654:	4628      	mov	r0, r5
 800b656:	f000 f979 	bl	800b94c <__sinit>
 800b65a:	4b2e      	ldr	r3, [pc, #184]	; (800b714 <__swsetup_r+0xd0>)
 800b65c:	429c      	cmp	r4, r3
 800b65e:	d10f      	bne.n	800b680 <__swsetup_r+0x3c>
 800b660:	686c      	ldr	r4, [r5, #4]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b668:	0719      	lsls	r1, r3, #28
 800b66a:	d42c      	bmi.n	800b6c6 <__swsetup_r+0x82>
 800b66c:	06dd      	lsls	r5, r3, #27
 800b66e:	d411      	bmi.n	800b694 <__swsetup_r+0x50>
 800b670:	2309      	movs	r3, #9
 800b672:	6033      	str	r3, [r6, #0]
 800b674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b678:	f04f 30ff 	mov.w	r0, #4294967295
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	e03e      	b.n	800b6fe <__swsetup_r+0xba>
 800b680:	4b25      	ldr	r3, [pc, #148]	; (800b718 <__swsetup_r+0xd4>)
 800b682:	429c      	cmp	r4, r3
 800b684:	d101      	bne.n	800b68a <__swsetup_r+0x46>
 800b686:	68ac      	ldr	r4, [r5, #8]
 800b688:	e7eb      	b.n	800b662 <__swsetup_r+0x1e>
 800b68a:	4b24      	ldr	r3, [pc, #144]	; (800b71c <__swsetup_r+0xd8>)
 800b68c:	429c      	cmp	r4, r3
 800b68e:	bf08      	it	eq
 800b690:	68ec      	ldreq	r4, [r5, #12]
 800b692:	e7e6      	b.n	800b662 <__swsetup_r+0x1e>
 800b694:	0758      	lsls	r0, r3, #29
 800b696:	d512      	bpl.n	800b6be <__swsetup_r+0x7a>
 800b698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b69a:	b141      	cbz	r1, 800b6ae <__swsetup_r+0x6a>
 800b69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6a0:	4299      	cmp	r1, r3
 800b6a2:	d002      	beq.n	800b6aa <__swsetup_r+0x66>
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f7fd fc3d 	bl	8008f24 <_free_r>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6363      	str	r3, [r4, #52]	; 0x34
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6063      	str	r3, [r4, #4]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f043 0308 	orr.w	r3, r3, #8
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	b94b      	cbnz	r3, 800b6de <__swsetup_r+0x9a>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d4:	d003      	beq.n	800b6de <__swsetup_r+0x9a>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f000 f9f9 	bl	800bad0 <__smakebuf_r>
 800b6de:	89a0      	ldrh	r0, [r4, #12]
 800b6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6e4:	f010 0301 	ands.w	r3, r0, #1
 800b6e8:	d00a      	beq.n	800b700 <__swsetup_r+0xbc>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60a3      	str	r3, [r4, #8]
 800b6ee:	6963      	ldr	r3, [r4, #20]
 800b6f0:	425b      	negs	r3, r3
 800b6f2:	61a3      	str	r3, [r4, #24]
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	b943      	cbnz	r3, 800b70a <__swsetup_r+0xc6>
 800b6f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6fc:	d1ba      	bne.n	800b674 <__swsetup_r+0x30>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	0781      	lsls	r1, r0, #30
 800b702:	bf58      	it	pl
 800b704:	6963      	ldrpl	r3, [r4, #20]
 800b706:	60a3      	str	r3, [r4, #8]
 800b708:	e7f4      	b.n	800b6f4 <__swsetup_r+0xb0>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e7f7      	b.n	800b6fe <__swsetup_r+0xba>
 800b70e:	bf00      	nop
 800b710:	2000000c 	.word	0x2000000c
 800b714:	0800c52c 	.word	0x0800c52c
 800b718:	0800c54c 	.word	0x0800c54c
 800b71c:	0800c50c 	.word	0x0800c50c

0800b720 <__sflush_r>:
 800b720:	898a      	ldrh	r2, [r1, #12]
 800b722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b724:	4605      	mov	r5, r0
 800b726:	0710      	lsls	r0, r2, #28
 800b728:	460c      	mov	r4, r1
 800b72a:	d457      	bmi.n	800b7dc <__sflush_r+0xbc>
 800b72c:	684b      	ldr	r3, [r1, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dc04      	bgt.n	800b73c <__sflush_r+0x1c>
 800b732:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b734:	2b00      	cmp	r3, #0
 800b736:	dc01      	bgt.n	800b73c <__sflush_r+0x1c>
 800b738:	2000      	movs	r0, #0
 800b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73e:	2e00      	cmp	r6, #0
 800b740:	d0fa      	beq.n	800b738 <__sflush_r+0x18>
 800b742:	2300      	movs	r3, #0
 800b744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b748:	682f      	ldr	r7, [r5, #0]
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	d032      	beq.n	800b7b4 <__sflush_r+0x94>
 800b74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	075a      	lsls	r2, r3, #29
 800b754:	d505      	bpl.n	800b762 <__sflush_r+0x42>
 800b756:	6863      	ldr	r3, [r4, #4]
 800b758:	1ac0      	subs	r0, r0, r3
 800b75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b75c:	b10b      	cbz	r3, 800b762 <__sflush_r+0x42>
 800b75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b760:	1ac0      	subs	r0, r0, r3
 800b762:	2300      	movs	r3, #0
 800b764:	4602      	mov	r2, r0
 800b766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b768:	4628      	mov	r0, r5
 800b76a:	6a21      	ldr	r1, [r4, #32]
 800b76c:	47b0      	blx	r6
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	d106      	bne.n	800b782 <__sflush_r+0x62>
 800b774:	6829      	ldr	r1, [r5, #0]
 800b776:	291d      	cmp	r1, #29
 800b778:	d82c      	bhi.n	800b7d4 <__sflush_r+0xb4>
 800b77a:	4a29      	ldr	r2, [pc, #164]	; (800b820 <__sflush_r+0x100>)
 800b77c:	40ca      	lsrs	r2, r1
 800b77e:	07d6      	lsls	r6, r2, #31
 800b780:	d528      	bpl.n	800b7d4 <__sflush_r+0xb4>
 800b782:	2200      	movs	r2, #0
 800b784:	6062      	str	r2, [r4, #4]
 800b786:	6922      	ldr	r2, [r4, #16]
 800b788:	04d9      	lsls	r1, r3, #19
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	d504      	bpl.n	800b798 <__sflush_r+0x78>
 800b78e:	1c42      	adds	r2, r0, #1
 800b790:	d101      	bne.n	800b796 <__sflush_r+0x76>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	b903      	cbnz	r3, 800b798 <__sflush_r+0x78>
 800b796:	6560      	str	r0, [r4, #84]	; 0x54
 800b798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b79a:	602f      	str	r7, [r5, #0]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	d0cb      	beq.n	800b738 <__sflush_r+0x18>
 800b7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a4:	4299      	cmp	r1, r3
 800b7a6:	d002      	beq.n	800b7ae <__sflush_r+0x8e>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f7fd fbbb 	bl	8008f24 <_free_r>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b2:	e7c2      	b.n	800b73a <__sflush_r+0x1a>
 800b7b4:	6a21      	ldr	r1, [r4, #32]
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b0      	blx	r6
 800b7bc:	1c41      	adds	r1, r0, #1
 800b7be:	d1c7      	bne.n	800b750 <__sflush_r+0x30>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0c4      	beq.n	800b750 <__sflush_r+0x30>
 800b7c6:	2b1d      	cmp	r3, #29
 800b7c8:	d001      	beq.n	800b7ce <__sflush_r+0xae>
 800b7ca:	2b16      	cmp	r3, #22
 800b7cc:	d101      	bne.n	800b7d2 <__sflush_r+0xb2>
 800b7ce:	602f      	str	r7, [r5, #0]
 800b7d0:	e7b2      	b.n	800b738 <__sflush_r+0x18>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	e7ae      	b.n	800b73a <__sflush_r+0x1a>
 800b7dc:	690f      	ldr	r7, [r1, #16]
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	d0aa      	beq.n	800b738 <__sflush_r+0x18>
 800b7e2:	0793      	lsls	r3, r2, #30
 800b7e4:	bf18      	it	ne
 800b7e6:	2300      	movne	r3, #0
 800b7e8:	680e      	ldr	r6, [r1, #0]
 800b7ea:	bf08      	it	eq
 800b7ec:	694b      	ldreq	r3, [r1, #20]
 800b7ee:	1bf6      	subs	r6, r6, r7
 800b7f0:	600f      	str	r7, [r1, #0]
 800b7f2:	608b      	str	r3, [r1, #8]
 800b7f4:	2e00      	cmp	r6, #0
 800b7f6:	dd9f      	ble.n	800b738 <__sflush_r+0x18>
 800b7f8:	4633      	mov	r3, r6
 800b7fa:	463a      	mov	r2, r7
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	6a21      	ldr	r1, [r4, #32]
 800b800:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b804:	47e0      	blx	ip
 800b806:	2800      	cmp	r0, #0
 800b808:	dc06      	bgt.n	800b818 <__sflush_r+0xf8>
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	e790      	b.n	800b73a <__sflush_r+0x1a>
 800b818:	4407      	add	r7, r0
 800b81a:	1a36      	subs	r6, r6, r0
 800b81c:	e7ea      	b.n	800b7f4 <__sflush_r+0xd4>
 800b81e:	bf00      	nop
 800b820:	20400001 	.word	0x20400001

0800b824 <_fflush_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	690b      	ldr	r3, [r1, #16]
 800b828:	4605      	mov	r5, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	b913      	cbnz	r3, 800b834 <_fflush_r+0x10>
 800b82e:	2500      	movs	r5, #0
 800b830:	4628      	mov	r0, r5
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	b118      	cbz	r0, 800b83e <_fflush_r+0x1a>
 800b836:	6983      	ldr	r3, [r0, #24]
 800b838:	b90b      	cbnz	r3, 800b83e <_fflush_r+0x1a>
 800b83a:	f000 f887 	bl	800b94c <__sinit>
 800b83e:	4b14      	ldr	r3, [pc, #80]	; (800b890 <_fflush_r+0x6c>)
 800b840:	429c      	cmp	r4, r3
 800b842:	d11b      	bne.n	800b87c <_fflush_r+0x58>
 800b844:	686c      	ldr	r4, [r5, #4]
 800b846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d0ef      	beq.n	800b82e <_fflush_r+0xa>
 800b84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b850:	07d0      	lsls	r0, r2, #31
 800b852:	d404      	bmi.n	800b85e <_fflush_r+0x3a>
 800b854:	0599      	lsls	r1, r3, #22
 800b856:	d402      	bmi.n	800b85e <_fflush_r+0x3a>
 800b858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b85a:	f7ff fcde 	bl	800b21a <__retarget_lock_acquire_recursive>
 800b85e:	4628      	mov	r0, r5
 800b860:	4621      	mov	r1, r4
 800b862:	f7ff ff5d 	bl	800b720 <__sflush_r>
 800b866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b868:	4605      	mov	r5, r0
 800b86a:	07da      	lsls	r2, r3, #31
 800b86c:	d4e0      	bmi.n	800b830 <_fflush_r+0xc>
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	059b      	lsls	r3, r3, #22
 800b872:	d4dd      	bmi.n	800b830 <_fflush_r+0xc>
 800b874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b876:	f7ff fcd1 	bl	800b21c <__retarget_lock_release_recursive>
 800b87a:	e7d9      	b.n	800b830 <_fflush_r+0xc>
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <_fflush_r+0x70>)
 800b87e:	429c      	cmp	r4, r3
 800b880:	d101      	bne.n	800b886 <_fflush_r+0x62>
 800b882:	68ac      	ldr	r4, [r5, #8]
 800b884:	e7df      	b.n	800b846 <_fflush_r+0x22>
 800b886:	4b04      	ldr	r3, [pc, #16]	; (800b898 <_fflush_r+0x74>)
 800b888:	429c      	cmp	r4, r3
 800b88a:	bf08      	it	eq
 800b88c:	68ec      	ldreq	r4, [r5, #12]
 800b88e:	e7da      	b.n	800b846 <_fflush_r+0x22>
 800b890:	0800c52c 	.word	0x0800c52c
 800b894:	0800c54c 	.word	0x0800c54c
 800b898:	0800c50c 	.word	0x0800c50c

0800b89c <std>:
 800b89c:	2300      	movs	r3, #0
 800b89e:	b510      	push	{r4, lr}
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8aa:	6083      	str	r3, [r0, #8]
 800b8ac:	8181      	strh	r1, [r0, #12]
 800b8ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b8b0:	81c2      	strh	r2, [r0, #14]
 800b8b2:	6183      	str	r3, [r0, #24]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	2208      	movs	r2, #8
 800b8b8:	305c      	adds	r0, #92	; 0x5c
 800b8ba:	f7fd fb2b 	bl	8008f14 <memset>
 800b8be:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <std+0x38>)
 800b8c0:	6224      	str	r4, [r4, #32]
 800b8c2:	6263      	str	r3, [r4, #36]	; 0x24
 800b8c4:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <std+0x3c>)
 800b8c6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8c8:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <std+0x40>)
 800b8ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8cc:	4b04      	ldr	r3, [pc, #16]	; (800b8e0 <std+0x44>)
 800b8ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b8d0:	bd10      	pop	{r4, pc}
 800b8d2:	bf00      	nop
 800b8d4:	0800bb61 	.word	0x0800bb61
 800b8d8:	0800bb83 	.word	0x0800bb83
 800b8dc:	0800bbbb 	.word	0x0800bbbb
 800b8e0:	0800bbdf 	.word	0x0800bbdf

0800b8e4 <_cleanup_r>:
 800b8e4:	4901      	ldr	r1, [pc, #4]	; (800b8ec <_cleanup_r+0x8>)
 800b8e6:	f000 b8af 	b.w	800ba48 <_fwalk_reent>
 800b8ea:	bf00      	nop
 800b8ec:	0800b825 	.word	0x0800b825

0800b8f0 <__sfmoreglue>:
 800b8f0:	2268      	movs	r2, #104	; 0x68
 800b8f2:	b570      	push	{r4, r5, r6, lr}
 800b8f4:	1e4d      	subs	r5, r1, #1
 800b8f6:	4355      	muls	r5, r2
 800b8f8:	460e      	mov	r6, r1
 800b8fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8fe:	f7fd fb79 	bl	8008ff4 <_malloc_r>
 800b902:	4604      	mov	r4, r0
 800b904:	b140      	cbz	r0, 800b918 <__sfmoreglue+0x28>
 800b906:	2100      	movs	r1, #0
 800b908:	e9c0 1600 	strd	r1, r6, [r0]
 800b90c:	300c      	adds	r0, #12
 800b90e:	60a0      	str	r0, [r4, #8]
 800b910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b914:	f7fd fafe 	bl	8008f14 <memset>
 800b918:	4620      	mov	r0, r4
 800b91a:	bd70      	pop	{r4, r5, r6, pc}

0800b91c <__sfp_lock_acquire>:
 800b91c:	4801      	ldr	r0, [pc, #4]	; (800b924 <__sfp_lock_acquire+0x8>)
 800b91e:	f7ff bc7c 	b.w	800b21a <__retarget_lock_acquire_recursive>
 800b922:	bf00      	nop
 800b924:	20000389 	.word	0x20000389

0800b928 <__sfp_lock_release>:
 800b928:	4801      	ldr	r0, [pc, #4]	; (800b930 <__sfp_lock_release+0x8>)
 800b92a:	f7ff bc77 	b.w	800b21c <__retarget_lock_release_recursive>
 800b92e:	bf00      	nop
 800b930:	20000389 	.word	0x20000389

0800b934 <__sinit_lock_acquire>:
 800b934:	4801      	ldr	r0, [pc, #4]	; (800b93c <__sinit_lock_acquire+0x8>)
 800b936:	f7ff bc70 	b.w	800b21a <__retarget_lock_acquire_recursive>
 800b93a:	bf00      	nop
 800b93c:	2000038a 	.word	0x2000038a

0800b940 <__sinit_lock_release>:
 800b940:	4801      	ldr	r0, [pc, #4]	; (800b948 <__sinit_lock_release+0x8>)
 800b942:	f7ff bc6b 	b.w	800b21c <__retarget_lock_release_recursive>
 800b946:	bf00      	nop
 800b948:	2000038a 	.word	0x2000038a

0800b94c <__sinit>:
 800b94c:	b510      	push	{r4, lr}
 800b94e:	4604      	mov	r4, r0
 800b950:	f7ff fff0 	bl	800b934 <__sinit_lock_acquire>
 800b954:	69a3      	ldr	r3, [r4, #24]
 800b956:	b11b      	cbz	r3, 800b960 <__sinit+0x14>
 800b958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b95c:	f7ff bff0 	b.w	800b940 <__sinit_lock_release>
 800b960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b964:	6523      	str	r3, [r4, #80]	; 0x50
 800b966:	4b13      	ldr	r3, [pc, #76]	; (800b9b4 <__sinit+0x68>)
 800b968:	4a13      	ldr	r2, [pc, #76]	; (800b9b8 <__sinit+0x6c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b96e:	42a3      	cmp	r3, r4
 800b970:	bf08      	it	eq
 800b972:	2301      	moveq	r3, #1
 800b974:	4620      	mov	r0, r4
 800b976:	bf08      	it	eq
 800b978:	61a3      	streq	r3, [r4, #24]
 800b97a:	f000 f81f 	bl	800b9bc <__sfp>
 800b97e:	6060      	str	r0, [r4, #4]
 800b980:	4620      	mov	r0, r4
 800b982:	f000 f81b 	bl	800b9bc <__sfp>
 800b986:	60a0      	str	r0, [r4, #8]
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 f817 	bl	800b9bc <__sfp>
 800b98e:	2200      	movs	r2, #0
 800b990:	2104      	movs	r1, #4
 800b992:	60e0      	str	r0, [r4, #12]
 800b994:	6860      	ldr	r0, [r4, #4]
 800b996:	f7ff ff81 	bl	800b89c <std>
 800b99a:	2201      	movs	r2, #1
 800b99c:	2109      	movs	r1, #9
 800b99e:	68a0      	ldr	r0, [r4, #8]
 800b9a0:	f7ff ff7c 	bl	800b89c <std>
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	2112      	movs	r1, #18
 800b9a8:	68e0      	ldr	r0, [r4, #12]
 800b9aa:	f7ff ff77 	bl	800b89c <std>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	61a3      	str	r3, [r4, #24]
 800b9b2:	e7d1      	b.n	800b958 <__sinit+0xc>
 800b9b4:	0800c190 	.word	0x0800c190
 800b9b8:	0800b8e5 	.word	0x0800b8e5

0800b9bc <__sfp>:
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9be:	4607      	mov	r7, r0
 800b9c0:	f7ff ffac 	bl	800b91c <__sfp_lock_acquire>
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <__sfp+0x84>)
 800b9c6:	681e      	ldr	r6, [r3, #0]
 800b9c8:	69b3      	ldr	r3, [r6, #24]
 800b9ca:	b913      	cbnz	r3, 800b9d2 <__sfp+0x16>
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7ff ffbd 	bl	800b94c <__sinit>
 800b9d2:	3648      	adds	r6, #72	; 0x48
 800b9d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	d503      	bpl.n	800b9e4 <__sfp+0x28>
 800b9dc:	6833      	ldr	r3, [r6, #0]
 800b9de:	b30b      	cbz	r3, 800ba24 <__sfp+0x68>
 800b9e0:	6836      	ldr	r6, [r6, #0]
 800b9e2:	e7f7      	b.n	800b9d4 <__sfp+0x18>
 800b9e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9e8:	b9d5      	cbnz	r5, 800ba20 <__sfp+0x64>
 800b9ea:	4b16      	ldr	r3, [pc, #88]	; (800ba44 <__sfp+0x88>)
 800b9ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9f0:	60e3      	str	r3, [r4, #12]
 800b9f2:	6665      	str	r5, [r4, #100]	; 0x64
 800b9f4:	f7ff fc10 	bl	800b218 <__retarget_lock_init_recursive>
 800b9f8:	f7ff ff96 	bl	800b928 <__sfp_lock_release>
 800b9fc:	2208      	movs	r2, #8
 800b9fe:	4629      	mov	r1, r5
 800ba00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba08:	6025      	str	r5, [r4, #0]
 800ba0a:	61a5      	str	r5, [r4, #24]
 800ba0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba10:	f7fd fa80 	bl	8008f14 <memset>
 800ba14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba20:	3468      	adds	r4, #104	; 0x68
 800ba22:	e7d9      	b.n	800b9d8 <__sfp+0x1c>
 800ba24:	2104      	movs	r1, #4
 800ba26:	4638      	mov	r0, r7
 800ba28:	f7ff ff62 	bl	800b8f0 <__sfmoreglue>
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	6030      	str	r0, [r6, #0]
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d1d5      	bne.n	800b9e0 <__sfp+0x24>
 800ba34:	f7ff ff78 	bl	800b928 <__sfp_lock_release>
 800ba38:	230c      	movs	r3, #12
 800ba3a:	603b      	str	r3, [r7, #0]
 800ba3c:	e7ee      	b.n	800ba1c <__sfp+0x60>
 800ba3e:	bf00      	nop
 800ba40:	0800c190 	.word	0x0800c190
 800ba44:	ffff0001 	.word	0xffff0001

0800ba48 <_fwalk_reent>:
 800ba48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	4688      	mov	r8, r1
 800ba50:	2700      	movs	r7, #0
 800ba52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba5a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba5e:	d505      	bpl.n	800ba6c <_fwalk_reent+0x24>
 800ba60:	6824      	ldr	r4, [r4, #0]
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	d1f7      	bne.n	800ba56 <_fwalk_reent+0xe>
 800ba66:	4638      	mov	r0, r7
 800ba68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba6c:	89ab      	ldrh	r3, [r5, #12]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d907      	bls.n	800ba82 <_fwalk_reent+0x3a>
 800ba72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba76:	3301      	adds	r3, #1
 800ba78:	d003      	beq.n	800ba82 <_fwalk_reent+0x3a>
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	47c0      	blx	r8
 800ba80:	4307      	orrs	r7, r0
 800ba82:	3568      	adds	r5, #104	; 0x68
 800ba84:	e7e9      	b.n	800ba5a <_fwalk_reent+0x12>

0800ba86 <__swhatbuf_r>:
 800ba86:	b570      	push	{r4, r5, r6, lr}
 800ba88:	460e      	mov	r6, r1
 800ba8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8e:	4614      	mov	r4, r2
 800ba90:	2900      	cmp	r1, #0
 800ba92:	461d      	mov	r5, r3
 800ba94:	b096      	sub	sp, #88	; 0x58
 800ba96:	da08      	bge.n	800baaa <__swhatbuf_r+0x24>
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba9e:	602a      	str	r2, [r5, #0]
 800baa0:	061a      	lsls	r2, r3, #24
 800baa2:	d410      	bmi.n	800bac6 <__swhatbuf_r+0x40>
 800baa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baa8:	e00e      	b.n	800bac8 <__swhatbuf_r+0x42>
 800baaa:	466a      	mov	r2, sp
 800baac:	f000 f8be 	bl	800bc2c <_fstat_r>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	dbf1      	blt.n	800ba98 <__swhatbuf_r+0x12>
 800bab4:	9a01      	ldr	r2, [sp, #4]
 800bab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800babe:	425a      	negs	r2, r3
 800bac0:	415a      	adcs	r2, r3
 800bac2:	602a      	str	r2, [r5, #0]
 800bac4:	e7ee      	b.n	800baa4 <__swhatbuf_r+0x1e>
 800bac6:	2340      	movs	r3, #64	; 0x40
 800bac8:	2000      	movs	r0, #0
 800baca:	6023      	str	r3, [r4, #0]
 800bacc:	b016      	add	sp, #88	; 0x58
 800bace:	bd70      	pop	{r4, r5, r6, pc}

0800bad0 <__smakebuf_r>:
 800bad0:	898b      	ldrh	r3, [r1, #12]
 800bad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bad4:	079d      	lsls	r5, r3, #30
 800bad6:	4606      	mov	r6, r0
 800bad8:	460c      	mov	r4, r1
 800bada:	d507      	bpl.n	800baec <__smakebuf_r+0x1c>
 800badc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	6123      	str	r3, [r4, #16]
 800bae4:	2301      	movs	r3, #1
 800bae6:	6163      	str	r3, [r4, #20]
 800bae8:	b002      	add	sp, #8
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	466a      	mov	r2, sp
 800baee:	ab01      	add	r3, sp, #4
 800baf0:	f7ff ffc9 	bl	800ba86 <__swhatbuf_r>
 800baf4:	9900      	ldr	r1, [sp, #0]
 800baf6:	4605      	mov	r5, r0
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7fd fa7b 	bl	8008ff4 <_malloc_r>
 800bafe:	b948      	cbnz	r0, 800bb14 <__smakebuf_r+0x44>
 800bb00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb04:	059a      	lsls	r2, r3, #22
 800bb06:	d4ef      	bmi.n	800bae8 <__smakebuf_r+0x18>
 800bb08:	f023 0303 	bic.w	r3, r3, #3
 800bb0c:	f043 0302 	orr.w	r3, r3, #2
 800bb10:	81a3      	strh	r3, [r4, #12]
 800bb12:	e7e3      	b.n	800badc <__smakebuf_r+0xc>
 800bb14:	4b0d      	ldr	r3, [pc, #52]	; (800bb4c <__smakebuf_r+0x7c>)
 800bb16:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	6020      	str	r0, [r4, #0]
 800bb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	9b00      	ldr	r3, [sp, #0]
 800bb24:	6120      	str	r0, [r4, #16]
 800bb26:	6163      	str	r3, [r4, #20]
 800bb28:	9b01      	ldr	r3, [sp, #4]
 800bb2a:	b15b      	cbz	r3, 800bb44 <__smakebuf_r+0x74>
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb32:	f000 f88d 	bl	800bc50 <_isatty_r>
 800bb36:	b128      	cbz	r0, 800bb44 <__smakebuf_r+0x74>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f023 0303 	bic.w	r3, r3, #3
 800bb3e:	f043 0301 	orr.w	r3, r3, #1
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	89a0      	ldrh	r0, [r4, #12]
 800bb46:	4305      	orrs	r5, r0
 800bb48:	81a5      	strh	r5, [r4, #12]
 800bb4a:	e7cd      	b.n	800bae8 <__smakebuf_r+0x18>
 800bb4c:	0800b8e5 	.word	0x0800b8e5

0800bb50 <_malloc_usable_size_r>:
 800bb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb54:	1f18      	subs	r0, r3, #4
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bfbc      	itt	lt
 800bb5a:	580b      	ldrlt	r3, [r1, r0]
 800bb5c:	18c0      	addlt	r0, r0, r3
 800bb5e:	4770      	bx	lr

0800bb60 <__sread>:
 800bb60:	b510      	push	{r4, lr}
 800bb62:	460c      	mov	r4, r1
 800bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb68:	f000 f894 	bl	800bc94 <_read_r>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	bfab      	itete	ge
 800bb70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb72:	89a3      	ldrhlt	r3, [r4, #12]
 800bb74:	181b      	addge	r3, r3, r0
 800bb76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb7a:	bfac      	ite	ge
 800bb7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb7e:	81a3      	strhlt	r3, [r4, #12]
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <__swrite>:
 800bb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb86:	461f      	mov	r7, r3
 800bb88:	898b      	ldrh	r3, [r1, #12]
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	05db      	lsls	r3, r3, #23
 800bb8e:	460c      	mov	r4, r1
 800bb90:	4616      	mov	r6, r2
 800bb92:	d505      	bpl.n	800bba0 <__swrite+0x1e>
 800bb94:	2302      	movs	r3, #2
 800bb96:	2200      	movs	r2, #0
 800bb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb9c:	f000 f868 	bl	800bc70 <_lseek_r>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	4632      	mov	r2, r6
 800bba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bba8:	81a3      	strh	r3, [r4, #12]
 800bbaa:	4628      	mov	r0, r5
 800bbac:	463b      	mov	r3, r7
 800bbae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb6:	f000 b817 	b.w	800bbe8 <_write_r>

0800bbba <__sseek>:
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc2:	f000 f855 	bl	800bc70 <_lseek_r>
 800bbc6:	1c43      	adds	r3, r0, #1
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	bf15      	itete	ne
 800bbcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbd6:	81a3      	strheq	r3, [r4, #12]
 800bbd8:	bf18      	it	ne
 800bbda:	81a3      	strhne	r3, [r4, #12]
 800bbdc:	bd10      	pop	{r4, pc}

0800bbde <__sclose>:
 800bbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe2:	f000 b813 	b.w	800bc0c <_close_r>
	...

0800bbe8 <_write_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4604      	mov	r4, r0
 800bbec:	4608      	mov	r0, r1
 800bbee:	4611      	mov	r1, r2
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4d05      	ldr	r5, [pc, #20]	; (800bc08 <_write_r+0x20>)
 800bbf4:	602a      	str	r2, [r5, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f7f7 fa60 	bl	80030bc <_write>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d102      	bne.n	800bc06 <_write_r+0x1e>
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	b103      	cbz	r3, 800bc06 <_write_r+0x1e>
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	bd38      	pop	{r3, r4, r5, pc}
 800bc08:	20000384 	.word	0x20000384

0800bc0c <_close_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	2300      	movs	r3, #0
 800bc10:	4d05      	ldr	r5, [pc, #20]	; (800bc28 <_close_r+0x1c>)
 800bc12:	4604      	mov	r4, r0
 800bc14:	4608      	mov	r0, r1
 800bc16:	602b      	str	r3, [r5, #0]
 800bc18:	f7f7 fa6c 	bl	80030f4 <_close>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_close_r+0x1a>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_close_r+0x1a>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	20000384 	.word	0x20000384

0800bc2c <_fstat_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	2300      	movs	r3, #0
 800bc30:	4d06      	ldr	r5, [pc, #24]	; (800bc4c <_fstat_r+0x20>)
 800bc32:	4604      	mov	r4, r0
 800bc34:	4608      	mov	r0, r1
 800bc36:	4611      	mov	r1, r2
 800bc38:	602b      	str	r3, [r5, #0]
 800bc3a:	f7f7 fa66 	bl	800310a <_fstat>
 800bc3e:	1c43      	adds	r3, r0, #1
 800bc40:	d102      	bne.n	800bc48 <_fstat_r+0x1c>
 800bc42:	682b      	ldr	r3, [r5, #0]
 800bc44:	b103      	cbz	r3, 800bc48 <_fstat_r+0x1c>
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20000384 	.word	0x20000384

0800bc50 <_isatty_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	2300      	movs	r3, #0
 800bc54:	4d05      	ldr	r5, [pc, #20]	; (800bc6c <_isatty_r+0x1c>)
 800bc56:	4604      	mov	r4, r0
 800bc58:	4608      	mov	r0, r1
 800bc5a:	602b      	str	r3, [r5, #0]
 800bc5c:	f7f7 fa64 	bl	8003128 <_isatty>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d102      	bne.n	800bc6a <_isatty_r+0x1a>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	b103      	cbz	r3, 800bc6a <_isatty_r+0x1a>
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	20000384 	.word	0x20000384

0800bc70 <_lseek_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	4611      	mov	r1, r2
 800bc78:	2200      	movs	r2, #0
 800bc7a:	4d05      	ldr	r5, [pc, #20]	; (800bc90 <_lseek_r+0x20>)
 800bc7c:	602a      	str	r2, [r5, #0]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f7f7 fa5c 	bl	800313c <_lseek>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	d102      	bne.n	800bc8e <_lseek_r+0x1e>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	b103      	cbz	r3, 800bc8e <_lseek_r+0x1e>
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	20000384 	.word	0x20000384

0800bc94 <_read_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4d05      	ldr	r5, [pc, #20]	; (800bcb4 <_read_r+0x20>)
 800bca0:	602a      	str	r2, [r5, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	f7f7 f9ed 	bl	8003082 <_read>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d102      	bne.n	800bcb2 <_read_r+0x1e>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	b103      	cbz	r3, 800bcb2 <_read_r+0x1e>
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	20000384 	.word	0x20000384

0800bcb8 <_init>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	bf00      	nop
 800bcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcbe:	bc08      	pop	{r3}
 800bcc0:	469e      	mov	lr, r3
 800bcc2:	4770      	bx	lr

0800bcc4 <_fini>:
 800bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc6:	bf00      	nop
 800bcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcca:	bc08      	pop	{r3}
 800bccc:	469e      	mov	lr, r3
 800bcce:	4770      	bx	lr
