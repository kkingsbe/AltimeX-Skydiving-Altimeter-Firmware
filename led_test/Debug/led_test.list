
led_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004fd0  08004fd0  00014fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d0  080051d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080051d0  080051d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051d0  080051d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  080051e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080051e4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c445  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e77  00000000  00000000  0002c47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0002e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  0002f000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179d1  00000000  00000000  0002fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef83  00000000  00000000  00047619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089dfb  00000000  00000000  0005659c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa4  00000000  00000000  000e03e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fb4 	.word	0x08004fb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004fb4 	.word	0x08004fb4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f835 	bl	8000dc0 <Set_LED_Timer>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	460a      	mov	r2, r1
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 8000d6e:	f000 f9e9 	bl	8001144 <Clear_All_LED>
	if(num_filled > 5) num_filled = 5;
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d901      	bls.n	8000d7c <Strip_Progress_Bar_Single_Color+0x1e>
 8000d78:	2305      	movs	r3, #5
 8000d7a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e008      	b.n	8000d94 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	79ba      	ldrb	r2, [r7, #6]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f9b0 	bl	80010ee <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	3301      	adds	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3f2      	bcc.n	8000d82 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <Strip_Clear>:

void Strip_Clear()
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
	Clear_All_LED();
 8000daa:	f000 f9cb 	bl	8001144 <Clear_All_LED>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <Strip_Send>:

void Strip_Send()
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
	WS2813_Send();
 8000db6:	f000 f8bf 	bl	8000f38 <WS2813_Send>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <Set_LED_Timer+0x18>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000028 	.word	0x20000028

08000ddc <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <Set_LED+0x58>)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	460a      	mov	r2, r1
 8000df8:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	b2d9      	uxtb	r1, r3
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <Set_LED+0x58>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	460a      	mov	r2, r1
 8000e08:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	b2d9      	uxtb	r1, r3
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <Set_LED+0x58>)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	460a      	mov	r2, r1
 8000e18:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2d9      	uxtb	r1, r3
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <Set_LED+0x58>)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	460a      	mov	r2, r1
 8000e28:	71da      	strb	r2, [r3, #7]
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000028 	.word	0x20000028

08000e38 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b2d      	cmp	r3, #45	; 0x2d
 8000e44:	dd01      	ble.n	8000e4a <Set_Brightness+0x12>
 8000e46:	232d      	movs	r3, #45	; 0x2d
 8000e48:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e063      	b.n	8000f18 <Set_Brightness+0xe0>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 8000e50:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <Set_Brightness+0xf8>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	7919      	ldrb	r1, [r3, #4]
 8000e5a:	4a35      	ldr	r2, [pc, #212]	; (8000f30 <Set_Brightness+0xf8>)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3306      	adds	r3, #6
 8000e60:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000e64:	2301      	movs	r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	e050      	b.n	8000f0c <Set_Brightness+0xd4>
		{
			float angle = 90-brightness;  // in degrees
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff15 	bl	8000ca0 <__aeabi_i2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f7ff facc 	bl	8000418 <__aeabi_f2d>
 8000e80:	a329      	add	r3, pc, #164	; (adr r3, 8000f28 <Set_Brightness+0xf0>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff fb1f 	bl	80004c8 <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <Set_Brightness+0xfc>)
 8000e98:	f7ff fc40 	bl	800071c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fdf2 	bl	8000a8c <__aeabi_d2f>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <Set_Brightness+0xf8>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	441a      	add	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3304      	adds	r3, #4
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fa99 	bl	80003f4 <__aeabi_i2d>
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	460d      	mov	r5, r1
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff faa6 	bl	8000418 <__aeabi_f2d>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f003 f80a 	bl	8003eec <tan>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4620      	mov	r0, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f7ff fc1c 	bl	800071c <__aeabi_ddiv>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f7ff fdae 	bl	8000a4c <__aeabi_d2uiz>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b2d9      	uxtb	r1, r3
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <Set_Brightness+0xf8>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	441a      	add	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4413      	add	r3, r2
 8000f00:	3318      	adds	r3, #24
 8000f02:	460a      	mov	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	ddab      	ble.n	8000e6a <Set_Brightness+0x32>
	for (int i=0; i<MAX_LED; i++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	dd98      	ble.n	8000e50 <Set_Brightness+0x18>
		}
	}

#endif

}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bdb0      	pop	{r4, r5, r7, pc}
 8000f28:	53c8d4f1 	.word	0x53c8d4f1
 8000f2c:	400921fb 	.word	0x400921fb
 8000f30:	20000028 	.word	0x20000028
 8000f34:	40668000 	.word	0x40668000

08000f38 <WS2813_Send>:

void WS2813_Send ()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e03a      	b.n	8000fbe <WS2813_Send+0x86>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8000f48:	4a33      	ldr	r2, [pc, #204]	; (8001018 <WS2813_Send+0xe0>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	7e5b      	ldrb	r3, [r3, #25]
 8000f52:	041a      	lsls	r2, r3, #16
 8000f54:	4930      	ldr	r1, [pc, #192]	; (8001018 <WS2813_Send+0xe0>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	7e9b      	ldrb	r3, [r3, #26]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	431a      	orrs	r2, r3
 8000f62:	492d      	ldr	r1, [pc, #180]	; (8001018 <WS2813_Send+0xe0>)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	7edb      	ldrb	r3, [r3, #27]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8000f70:	2317      	movs	r3, #23
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	e01d      	b.n	8000fb2 <WS2813_Send+0x7a>
		{
			if (color&(1<<i))
 8000f76:	2201      	movs	r2, #1
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <WS2813_Send+0x60>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 8000f88:	4a23      	ldr	r2, [pc, #140]	; (8001018 <WS2813_Send+0xe0>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3314      	adds	r3, #20
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	2230      	movs	r2, #48	; 0x30
 8000f94:	809a      	strh	r2, [r3, #4]
 8000f96:	e006      	b.n	8000fa6 <WS2813_Send+0x6e>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 8000f98:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <WS2813_Send+0xe0>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3314      	adds	r3, #20
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2214      	movs	r2, #20
 8000fa4:	809a      	strh	r2, [r3, #4]

			indx++;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dade      	bge.n	8000f76 <WS2813_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	ddc1      	ble.n	8000f48 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	e00c      	b.n	8000fe4 <WS2813_Send+0xac>
	{
		ws_config.pwmData[indx] = 0;
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <WS2813_Send+0xe0>)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3314      	adds	r3, #20
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	809a      	strh	r2, [r3, #4]
		indx++;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b31      	cmp	r3, #49	; 0x31
 8000fe8:	ddef      	ble.n	8000fca <WS2813_Send+0x92>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <WS2813_Send+0xe0>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <WS2813_Send+0xe4>)
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	f001 ff8d 	bl	8002f14 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 8000ffa:	bf00      	nop
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <WS2813_Send+0xe0>)
 8000ffe:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0fa      	beq.n	8000ffc <WS2813_Send+0xc4>
	ws_config.datasentflag = 0;
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <WS2813_Send+0xe0>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000028 	.word	0x20000028
 800101c:	20000054 	.word	0x20000054

08001020 <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d108      	bne.n	8001044 <Color_To_RGB+0x24>
		rgb->r = 0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	22ff      	movs	r2, #255	; 0xff
 800103c:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2214      	movs	r2, #20
 8001042:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d108      	bne.n	800105c <Color_To_RGB+0x3c>
		rgb->r = 255;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d108      	bne.n	8001074 <Color_To_RGB+0x54>
		rgb->r = 255;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	22ff      	movs	r2, #255	; 0xff
 8001066:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	2b03      	cmp	r3, #3
 8001078:	d108      	bne.n	800108c <Color_To_RGB+0x6c>
		rgb->r = 255;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	22ff      	movs	r2, #255	; 0xff
 800107e:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d108      	bne.n	80010a4 <Color_To_RGB+0x84>
		rgb->r = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	22c8      	movs	r2, #200	; 0xc8
 80010a2:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d108      	bne.n	80010bc <Color_To_RGB+0x9c>
		rgb->r = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	709a      	strb	r2, [r3, #2]
	}
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	461a      	mov	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	789b      	ldrb	r3, [r3, #2]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fe7b 	bl	8000ddc <Set_LED>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff8c 	bl	8001020 <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffd9 	bl	80010c6 <Set_LED_From_RGB>
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2104      	movs	r1, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f002 f88c 	bl	8003248 <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000028 	.word	0x20000028

08001144 <Clear_All_LED>:

void Clear_All_LED()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	e007      	b.n	8001160 <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2105      	movs	r1, #5
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffca 	bl	80010ee <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	3301      	adds	r3, #1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b04      	cmp	r3, #4
 8001164:	d9f4      	bls.n	8001150 <Clear_All_LED+0xc>
	}
}
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fb47 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f8b7 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f000 f9c3 	bl	8001508 <MX_GPIO_Init>
  MX_DMA_Init();
 8001182:	f000 f9a3 	bl	80014cc <MX_DMA_Init>
  MX_I2C1_Init();
 8001186:	f000 f8f3 	bl	8001370 <MX_I2C1_Init>
  MX_TIM2_Init();
 800118a:	f000 f91f 	bl	80013cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Strip_Set_Timer(&htim2);
 800118e:	4853      	ldr	r0, [pc, #332]	; (80012dc <main+0x16c>)
 8001190:	f7ff fdda 	bl	8000d48 <Strip_Set_Timer>
  //Set_LED_Timer(&htim2);
  Strip_Clear();
 8001194:	f7ff fe07 	bl	8000da6 <Strip_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t j = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	80fb      	strh	r3, [r7, #6]
  uint16_t k = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	80bb      	strh	r3, [r7, #4]
  while (1)
  {
	  Set_Brightness(90);
 80011a0:	205a      	movs	r0, #90	; 0x5a
 80011a2:	f7ff fe49 	bl	8000e38 <Set_Brightness>
	  if(k == 0) {
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d115      	bne.n	80011d8 <main+0x68>
		  Strip_Progress_Bar_Single_Color((j/20)%6, RED);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <main+0x170>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <main+0x174>)
 80011ba:	fba3 1302 	umull	r1, r3, r3, r2
 80011be:	0899      	lsrs	r1, r3, #2
 80011c0:	460b      	mov	r3, r1
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	440b      	add	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2102      	movs	r1, #2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fdc4 	bl	8000d5e <Strip_Progress_Bar_Single_Color>
 80011d6:	e062      	b.n	800129e <main+0x12e>
	  } else if(k == 1) {
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d115      	bne.n	800120a <main+0x9a>
		  Strip_Progress_Bar_Single_Color((j/20)%6, YELLOW);
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	4a3f      	ldr	r2, [pc, #252]	; (80012e0 <main+0x170>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <main+0x174>)
 80011ec:	fba3 1302 	umull	r1, r3, r3, r2
 80011f0:	0899      	lsrs	r1, r3, #2
 80011f2:	460b      	mov	r3, r1
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	440b      	add	r3, r1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fdab 	bl	8000d5e <Strip_Progress_Bar_Single_Color>
 8001208:	e049      	b.n	800129e <main+0x12e>
	  } else if(k == 2) {
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d115      	bne.n	800123c <main+0xcc>
		  Strip_Progress_Bar_Single_Color((j/20)%6, GREEN);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <main+0x170>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <main+0x174>)
 800121e:	fba3 1302 	umull	r1, r3, r3, r2
 8001222:	0899      	lsrs	r1, r3, #2
 8001224:	460b      	mov	r3, r1
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	440b      	add	r3, r1
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29b      	uxth	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fd92 	bl	8000d5e <Strip_Progress_Bar_Single_Color>
 800123a:	e030      	b.n	800129e <main+0x12e>
	  } else if(k == 3) {
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d115      	bne.n	800126e <main+0xfe>
		  Strip_Progress_Bar_Single_Color((j/20)%6, SKYBLUE);
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <main+0x170>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <main+0x174>)
 8001250:	fba3 1302 	umull	r1, r3, r3, r2
 8001254:	0899      	lsrs	r1, r3, #2
 8001256:	460b      	mov	r3, r1
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	440b      	add	r3, r1
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fd79 	bl	8000d5e <Strip_Progress_Bar_Single_Color>
 800126c:	e017      	b.n	800129e <main+0x12e>
	  } else if(k == 4) {
 800126e:	88bb      	ldrh	r3, [r7, #4]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d114      	bne.n	800129e <main+0x12e>
		  Strip_Progress_Bar_Single_Color((j/20)%6, PURPLE);
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <main+0x170>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <main+0x174>)
 8001282:	fba3 1302 	umull	r1, r3, r3, r2
 8001286:	0899      	lsrs	r1, r3, #2
 8001288:	460b      	mov	r3, r1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	440b      	add	r3, r1
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2103      	movs	r1, #3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd60 	bl	8000d5e <Strip_Progress_Bar_Single_Color>
	  }


	  if(j%120 == 0) {
 800129e:	88fa      	ldrh	r2, [r7, #6]
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <main+0x178>)
 80012a2:	fba3 1302 	umull	r1, r3, r3, r2
 80012a6:	0999      	lsrs	r1, r3, #6
 80012a8:	460b      	mov	r3, r1
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	1a5b      	subs	r3, r3, r1
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <main+0x158>
		  k++;
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	3301      	adds	r3, #1
 80012bc:	80bb      	strh	r3, [r7, #4]
		  if(k > 4) k = 0;
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d901      	bls.n	80012c8 <main+0x158>
 80012c4:	2300      	movs	r3, #0
 80012c6:	80bb      	strh	r3, [r7, #4]
	  }
	  Strip_Send();
 80012c8:	f7ff fd73 	bl	8000db2 <Strip_Send>
	  HAL_Delay (10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f000 fafd 	bl	80018cc <HAL_Delay>
	  j++;
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	3301      	adds	r3, #1
 80012d6:	80fb      	strh	r3, [r7, #6]
	  Set_Brightness(90);
 80012d8:	e762      	b.n	80011a0 <main+0x30>
 80012da:	bf00      	nop
 80012dc:	20000200 	.word	0x20000200
 80012e0:	cccccccd 	.word	0xcccccccd
 80012e4:	aaaaaaab 	.word	0xaaaaaaab
 80012e8:	88888889 	.word	0x88888889

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b090      	sub	sp, #64	; 0x40
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2228      	movs	r2, #40	; 0x28
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fdee 	bl	8003edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	2302      	movs	r3, #2
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800131e:	2300      	movs	r3, #0
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001322:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f943 	bl	80025b8 <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001338:	f000 f924 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	230f      	movs	r3, #15
 800133e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2302      	movs	r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2102      	movs	r1, #2
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fbb0 	bl	8002abc <HAL_RCC_ClockConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001362:	f000 f90f 	bl	8001584 <Error_Handler>
  }
}
 8001366:	bf00      	nop
 8001368:	3740      	adds	r7, #64	; 0x40
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C1_Init+0x50>)
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_I2C1_Init+0x58>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_I2C1_Init+0x50>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013ae:	f000 ffbf 	bl	8002330 <HAL_I2C_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b8:	f000 f8e4 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001ac 	.word	0x200001ac
 80013c4:	40005400 	.word	0x40005400
 80013c8:	000186a0 	.word	0x000186a0

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	; 0x38
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013fc:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <MX_TIM2_Init+0xfc>)
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <MX_TIM2_Init+0xfc>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <MX_TIM2_Init+0xfc>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <MX_TIM2_Init+0xfc>)
 8001412:	223f      	movs	r2, #63	; 0x3f
 8001414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <MX_TIM2_Init+0xfc>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <MX_TIM2_Init+0xfc>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001422:	4829      	ldr	r0, [pc, #164]	; (80014c8 <MX_TIM2_Init+0xfc>)
 8001424:	f001 fcce 	bl	8002dc4 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800142e:	f000 f8a9 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143c:	4619      	mov	r1, r3
 800143e:	4822      	ldr	r0, [pc, #136]	; (80014c8 <MX_TIM2_Init+0xfc>)
 8001440:	f002 f87e 	bl	8003540 <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800144a:	f000 f89b 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800144e:	481e      	ldr	r0, [pc, #120]	; (80014c8 <MX_TIM2_Init+0xfc>)
 8001450:	f001 fd07 	bl	8002e62 <HAL_TIM_PWM_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800145a:	f000 f893 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4619      	mov	r1, r3
 800146c:	4816      	ldr	r0, [pc, #88]	; (80014c8 <MX_TIM2_Init+0xfc>)
 800146e:	f002 fcb3 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001478:	f000 f884 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM2_Init+0xfc>)
 8001494:	f001 ff96 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800149e:	f000 f871 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2204      	movs	r2, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_TIM2_Init+0xfc>)
 80014aa:	f001 ff8b 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80014b4:	f000 f866 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <MX_TIM2_Init+0xfc>)
 80014ba:	f000 f917 	bl	80016ec <HAL_TIM_MspPostInit>

}
 80014be:	bf00      	nop
 80014c0:	3738      	adds	r7, #56	; 0x38
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000200 	.word	0x20000200

080014cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_DMA_Init+0x38>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <MX_DMA_Init+0x38>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6153      	str	r3, [r2, #20]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_DMA_Init+0x38>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2011      	movs	r0, #17
 80014f0:	f000 fae7 	bl	8001ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014f4:	2011      	movs	r0, #17
 80014f6:	f000 fb00 	bl	8001afa <HAL_NVIC_EnableIRQ>

}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_GPIO_Init+0x74>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <MX_GPIO_Init+0x74>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_GPIO_Init+0x74>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_GPIO_Init+0x74>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a10      	ldr	r2, [pc, #64]	; (800157c <MX_GPIO_Init+0x74>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_GPIO_Init+0x74>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	213c      	movs	r1, #60	; 0x3c
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0x78>)
 8001552:	f000 fed5 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001556:	233c      	movs	r3, #60	; 0x3c
 8001558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2302      	movs	r3, #2
 8001564:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	4619      	mov	r1, r3
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_GPIO_Init+0x78>)
 800156e:	f000 fd43 	bl	8001ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	40010800 	.word	0x40010800

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_MspInit+0x40>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_MspInit+0x40>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6193      	str	r3, [r2, #24]
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_MspInit+0x40>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_MspInit+0x40>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_MspInit+0x40>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_MspInit+0x40>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_I2C_MspInit+0x70>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d123      	bne.n	800163c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_I2C_MspInit+0x74>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_I2C_MspInit+0x74>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_I2C_MspInit+0x74>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160c:	23c0      	movs	r3, #192	; 0xc0
 800160e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4619      	mov	r1, r3
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <HAL_I2C_MspInit+0x78>)
 8001620:	f000 fcea 	bl	8001ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_I2C_MspInit+0x74>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_I2C_MspInit+0x74>)
 800162a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162e:	61d3      	str	r3, [r2, #28]
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_I2C_MspInit+0x74>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005400 	.word	0x40005400
 8001648:	40021000 	.word	0x40021000
 800164c:	40010c00 	.word	0x40010c00

08001650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	d139      	bne.n	80016d6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_TIM_Base_MspInit+0x90>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_TIM_Base_MspInit+0x90>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_TIM_Base_MspInit+0x90>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_TIM_Base_MspInit+0x98>)
 800167e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 8001682:	2210      	movs	r2, #16
 8001684:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 8001694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001698:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 800169c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 80016b0:	f000 fa3e 	bl	8001b30 <HAL_DMA_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80016ba:	f7ff ff63 	bl	8001584 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_TIM_Base_MspInit+0x94>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	20000248 	.word	0x20000248
 80016e8:	40020080 	.word	0x40020080

080016ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170a:	d117      	bne.n	800173c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_TIM_MspPostInit+0x58>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_TIM_MspPostInit+0x58>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_TIM_MspPostInit+0x58>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001724:	2303      	movs	r3, #3
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2302      	movs	r3, #2
 800172e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <HAL_TIM_MspPostInit+0x5c>)
 8001738:	f000 fc5e 	bl	8001ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	40010800 	.word	0x40010800

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 f87f 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Channel7_IRQHandler+0x10>)
 80017a2:	f000 faf5 	bl	8001d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000248 	.word	0x20000248

080017b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	; (80017f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	; (8001800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e2:	f7ff ffe5 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f002 fb55 	bl	8003e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff fcc1 	bl	8001170 <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017f8:	080051d8 	.word	0x080051d8
  ldr r2, =_sbss
 80017fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001800:	20000290 	.word	0x20000290

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x28>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f947 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff feb4 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f95f 	bl	8001b16 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f927 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000000 	.word	0x20000000
 800188c:	20000008 	.word	0x20000008
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x20>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000008 	.word	0x20000008
 80018b4:	2000028c 	.word	0x2000028c

080018b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	2000028c 	.word	0x2000028c

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffe0 	bl	80018b8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4906      	ldr	r1, [pc, #24]	; (80019ac <__NVIC_EnableIRQ+0x34>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff90 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff2d 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff42 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff90 	bl	8001a04 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5f 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff35 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa2 	bl	8001a68 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e043      	b.n	8001bce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_DMA_Init+0xa8>)
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <HAL_DMA_Init+0xac>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	009a      	lsls	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_DMA_Init+0xb0>)
 8001b62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	bffdfff8 	.word	0xbffdfff8
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	40020000 	.word	0x40020000

08001be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_DMA_Start_IT+0x20>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e04a      	b.n	8001c9a <HAL_DMA_Start_IT+0xb6>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d13a      	bne.n	8001c8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f9ae 	bl	8001f9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 020e 	orr.w	r2, r2, #14
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e00f      	b.n	8001c7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0204 	bic.w	r2, r2, #4
 8001c68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 020a 	orr.w	r2, r2, #10
 8001c78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e005      	b.n	8001c98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
 8001c96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d005      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e051      	b.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 020e 	bic.w	r2, r2, #14
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_DMA_Abort_IT+0xd0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d029      	beq.n	8001d44 <HAL_DMA_Abort_IT+0xa0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_DMA_Abort_IT+0xd4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x9c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_DMA_Abort_IT+0xd8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d01a      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x96>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_DMA_Abort_IT+0xdc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d012      	beq.n	8001d34 <HAL_DMA_Abort_IT+0x90>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_DMA_Abort_IT+0xe0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00a      	beq.n	8001d2e <HAL_DMA_Abort_IT+0x8a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_DMA_Abort_IT+0xe4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d102      	bne.n	8001d28 <HAL_DMA_Abort_IT+0x84>
 8001d22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d26:	e00e      	b.n	8001d46 <HAL_DMA_Abort_IT+0xa2>
 8001d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d2c:	e00b      	b.n	8001d46 <HAL_DMA_Abort_IT+0xa2>
 8001d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d32:	e008      	b.n	8001d46 <HAL_DMA_Abort_IT+0xa2>
 8001d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d38:	e005      	b.n	8001d46 <HAL_DMA_Abort_IT+0xa2>
 8001d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3e:	e002      	b.n	8001d46 <HAL_DMA_Abort_IT+0xa2>
 8001d40:	2310      	movs	r3, #16
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Abort_IT+0xa2>
 8001d44:	2301      	movs	r3, #1
 8001d46:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_DMA_Abort_IT+0xe8>)
 8001d48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
    } 
  }
  return status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020008 	.word	0x40020008
 8001d78:	4002001c 	.word	0x4002001c
 8001d7c:	40020030 	.word	0x40020030
 8001d80:	40020044 	.word	0x40020044
 8001d84:	40020058 	.word	0x40020058
 8001d88:	4002006c 	.word	0x4002006c
 8001d8c:	40020000 	.word	0x40020000

08001d90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2204      	movs	r2, #4
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d04f      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xc8>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d04a      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a66      	ldr	r2, [pc, #408]	; (8001f80 <HAL_DMA_IRQHandler+0x1f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d029      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xae>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a65      	ldr	r2, [pc, #404]	; (8001f84 <HAL_DMA_IRQHandler+0x1f4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d022      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xaa>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_DMA_IRQHandler+0x1f8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d01a      	beq.n	8001e34 <HAL_DMA_IRQHandler+0xa4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a62      	ldr	r2, [pc, #392]	; (8001f8c <HAL_DMA_IRQHandler+0x1fc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d012      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x9e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a60      	ldr	r2, [pc, #384]	; (8001f90 <HAL_DMA_IRQHandler+0x200>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x98>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a5f      	ldr	r2, [pc, #380]	; (8001f94 <HAL_DMA_IRQHandler+0x204>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d102      	bne.n	8001e22 <HAL_DMA_IRQHandler+0x92>
 8001e1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e20:	e00e      	b.n	8001e40 <HAL_DMA_IRQHandler+0xb0>
 8001e22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e26:	e00b      	b.n	8001e40 <HAL_DMA_IRQHandler+0xb0>
 8001e28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e2c:	e008      	b.n	8001e40 <HAL_DMA_IRQHandler+0xb0>
 8001e2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e32:	e005      	b.n	8001e40 <HAL_DMA_IRQHandler+0xb0>
 8001e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e38:	e002      	b.n	8001e40 <HAL_DMA_IRQHandler+0xb0>
 8001e3a:	2340      	movs	r3, #64	; 0x40
 8001e3c:	e000      	b.n	8001e40 <HAL_DMA_IRQHandler+0xb0>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4a55      	ldr	r2, [pc, #340]	; (8001f98 <HAL_DMA_IRQHandler+0x208>)
 8001e42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8094 	beq.w	8001f76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e56:	e08e      	b.n	8001f76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d056      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x186>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d051      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10b      	bne.n	8001e98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 020a 	bic.w	r2, r2, #10
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a38      	ldr	r2, [pc, #224]	; (8001f80 <HAL_DMA_IRQHandler+0x1f0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d029      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x166>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <HAL_DMA_IRQHandler+0x1f4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x162>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a35      	ldr	r2, [pc, #212]	; (8001f88 <HAL_DMA_IRQHandler+0x1f8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01a      	beq.n	8001eec <HAL_DMA_IRQHandler+0x15c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_DMA_IRQHandler+0x1fc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d012      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x156>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <HAL_DMA_IRQHandler+0x200>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x150>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <HAL_DMA_IRQHandler+0x204>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d102      	bne.n	8001eda <HAL_DMA_IRQHandler+0x14a>
 8001ed4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ed8:	e00e      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x168>
 8001eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ede:	e00b      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x168>
 8001ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee4:	e008      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x168>
 8001ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eea:	e005      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x168>
 8001eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef0:	e002      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x168>
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e000      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x168>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <HAL_DMA_IRQHandler+0x208>)
 8001efa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d034      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f14:	e02f      	b.n	8001f76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d028      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x1e8>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 020e 	bic.w	r2, r2, #14
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
    }
  }
  return;
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
}
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40020008 	.word	0x40020008
 8001f84:	4002001c 	.word	0x4002001c
 8001f88:	40020030 	.word	0x40020030
 8001f8c:	40020044 	.word	0x40020044
 8001f90:	40020058 	.word	0x40020058
 8001f94:	4002006c 	.word	0x4002006c
 8001f98:	40020000 	.word	0x40020000

08001f9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d108      	bne.n	8001fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fda:	e007      	b.n	8001fec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e169      	b.n	80022e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800200c:	2201      	movs	r2, #1
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8158 	bne.w	80022da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a9a      	ldr	r2, [pc, #616]	; (8002298 <HAL_GPIO_Init+0x2a0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d05e      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002034:	4a98      	ldr	r2, [pc, #608]	; (8002298 <HAL_GPIO_Init+0x2a0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d875      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800203a:	4a98      	ldr	r2, [pc, #608]	; (800229c <HAL_GPIO_Init+0x2a4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d058      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002040:	4a96      	ldr	r2, [pc, #600]	; (800229c <HAL_GPIO_Init+0x2a4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d86f      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002046:	4a96      	ldr	r2, [pc, #600]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d052      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 800204c:	4a94      	ldr	r2, [pc, #592]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d869      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002052:	4a94      	ldr	r2, [pc, #592]	; (80022a4 <HAL_GPIO_Init+0x2ac>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04c      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002058:	4a92      	ldr	r2, [pc, #584]	; (80022a4 <HAL_GPIO_Init+0x2ac>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d863      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800205e:	4a92      	ldr	r2, [pc, #584]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d046      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002064:	4a90      	ldr	r2, [pc, #576]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d85d      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800206a:	2b12      	cmp	r3, #18
 800206c:	d82a      	bhi.n	80020c4 <HAL_GPIO_Init+0xcc>
 800206e:	2b12      	cmp	r3, #18
 8002070:	d859      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HAL_GPIO_Init+0x80>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020f3 	.word	0x080020f3
 800207c:	080020cd 	.word	0x080020cd
 8002080:	080020df 	.word	0x080020df
 8002084:	08002121 	.word	0x08002121
 8002088:	08002127 	.word	0x08002127
 800208c:	08002127 	.word	0x08002127
 8002090:	08002127 	.word	0x08002127
 8002094:	08002127 	.word	0x08002127
 8002098:	08002127 	.word	0x08002127
 800209c:	08002127 	.word	0x08002127
 80020a0:	08002127 	.word	0x08002127
 80020a4:	08002127 	.word	0x08002127
 80020a8:	08002127 	.word	0x08002127
 80020ac:	08002127 	.word	0x08002127
 80020b0:	08002127 	.word	0x08002127
 80020b4:	08002127 	.word	0x08002127
 80020b8:	08002127 	.word	0x08002127
 80020bc:	080020d5 	.word	0x080020d5
 80020c0:	080020e9 	.word	0x080020e9
 80020c4:	4a79      	ldr	r2, [pc, #484]	; (80022ac <HAL_GPIO_Init+0x2b4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ca:	e02c      	b.n	8002126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e029      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	3304      	adds	r3, #4
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e024      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	3308      	adds	r3, #8
 80020e4:	623b      	str	r3, [r7, #32]
          break;
 80020e6:	e01f      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	330c      	adds	r3, #12
 80020ee:	623b      	str	r3, [r7, #32]
          break;
 80020f0:	e01a      	b.n	8002128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020fa:	2304      	movs	r3, #4
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e013      	b.n	8002128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002108:	2308      	movs	r3, #8
 800210a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	611a      	str	r2, [r3, #16]
          break;
 8002112:	e009      	b.n	8002128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002114:	2308      	movs	r3, #8
 8002116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	615a      	str	r2, [r3, #20]
          break;
 800211e:	e003      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
          break;
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x130>
          break;
 8002126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2bff      	cmp	r3, #255	; 0xff
 800212c:	d801      	bhi.n	8002132 <HAL_GPIO_Init+0x13a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	e001      	b.n	8002136 <HAL_GPIO_Init+0x13e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2bff      	cmp	r3, #255	; 0xff
 800213c:	d802      	bhi.n	8002144 <HAL_GPIO_Init+0x14c>
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	e002      	b.n	800214a <HAL_GPIO_Init+0x152>
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3b08      	subs	r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	210f      	movs	r1, #15
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80b1 	beq.w	80022da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002178:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a4c      	ldr	r2, [pc, #304]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a40      	ldr	r2, [pc, #256]	; (80022b8 <HAL_GPIO_Init+0x2c0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_GPIO_Init+0x1ec>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_GPIO_Init+0x2c4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1e8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3e      	ldr	r2, [pc, #248]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1e4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3d      	ldr	r2, [pc, #244]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021d4:	2303      	movs	r3, #3
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021d8:	2304      	movs	r3, #4
 80021da:	e004      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021dc:	2302      	movs	r3, #2
 80021de:	e002      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e4:	2300      	movs	r3, #0
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	4093      	lsls	r3, r2
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021f6:	492f      	ldr	r1, [pc, #188]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d006      	beq.n	800221e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	492c      	ldr	r1, [pc, #176]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	43db      	mvns	r3, r3
 8002226:	4928      	ldr	r1, [pc, #160]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002228:	4013      	ands	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	43db      	mvns	r3, r3
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002250:	4013      	ands	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4918      	ldr	r1, [pc, #96]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	43db      	mvns	r3, r3
 8002276:	4914      	ldr	r1, [pc, #80]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002278:	4013      	ands	r3, r2
 800227a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d021      	beq.n	80022cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	60cb      	str	r3, [r1, #12]
 8002294:	e021      	b.n	80022da <HAL_GPIO_Init+0x2e2>
 8002296:	bf00      	nop
 8002298:	10320000 	.word	0x10320000
 800229c:	10310000 	.word	0x10310000
 80022a0:	10220000 	.word	0x10220000
 80022a4:	10210000 	.word	0x10210000
 80022a8:	10120000 	.word	0x10120000
 80022ac:	10110000 	.word	0x10110000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40010800 	.word	0x40010800
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	40011000 	.word	0x40011000
 80022c4:	40011400 	.word	0x40011400
 80022c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_GPIO_Init+0x304>)
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	4909      	ldr	r1, [pc, #36]	; (80022fc <HAL_GPIO_Init+0x304>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f ae8e 	bne.w	800200c <HAL_GPIO_Init+0x14>
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	372c      	adds	r7, #44	; 0x2c
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40010400 	.word	0x40010400

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e12b      	b.n	800259a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff f93c 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002394:	f000 fce4 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a81      	ldr	r2, [pc, #516]	; (80025a4 <HAL_I2C_Init+0x274>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d807      	bhi.n	80023b4 <HAL_I2C_Init+0x84>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a80      	ldr	r2, [pc, #512]	; (80025a8 <HAL_I2C_Init+0x278>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bf94      	ite	ls
 80023ac:	2301      	movls	r3, #1
 80023ae:	2300      	movhi	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e006      	b.n	80023c2 <HAL_I2C_Init+0x92>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a7d      	ldr	r2, [pc, #500]	; (80025ac <HAL_I2C_Init+0x27c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	bf94      	ite	ls
 80023bc:	2301      	movls	r3, #1
 80023be:	2300      	movhi	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e7      	b.n	800259a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a78      	ldr	r2, [pc, #480]	; (80025b0 <HAL_I2C_Init+0x280>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9b      	lsrs	r3, r3, #18
 80023d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a6a      	ldr	r2, [pc, #424]	; (80025a4 <HAL_I2C_Init+0x274>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d802      	bhi.n	8002404 <HAL_I2C_Init+0xd4>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3301      	adds	r3, #1
 8002402:	e009      	b.n	8002418 <HAL_I2C_Init+0xe8>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_I2C_Init+0x284>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	3301      	adds	r3, #1
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800242a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	495c      	ldr	r1, [pc, #368]	; (80025a4 <HAL_I2C_Init+0x274>)
 8002434:	428b      	cmp	r3, r1
 8002436:	d819      	bhi.n	800246c <HAL_I2C_Init+0x13c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e59      	subs	r1, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fbb1 f3f3 	udiv	r3, r1, r3
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800244c:	400b      	ands	r3, r1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_I2C_Init+0x138>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e59      	subs	r1, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002466:	e051      	b.n	800250c <HAL_I2C_Init+0x1dc>
 8002468:	2304      	movs	r3, #4
 800246a:	e04f      	b.n	800250c <HAL_I2C_Init+0x1dc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d111      	bne.n	8002498 <HAL_I2C_Init+0x168>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e012      	b.n	80024be <HAL_I2C_Init+0x18e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	0099      	lsls	r1, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x196>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e022      	b.n	800250c <HAL_I2C_Init+0x1dc>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10e      	bne.n	80024ec <HAL_I2C_Init+0x1bc>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e58      	subs	r0, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	440b      	add	r3, r1
 80024dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ea:	e00f      	b.n	800250c <HAL_I2C_Init+0x1dc>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	6809      	ldr	r1, [r1, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800253a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6911      	ldr	r1, [r2, #16]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	430b      	orrs	r3, r1
 800254e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	000186a0 	.word	0x000186a0
 80025a8:	001e847f 	.word	0x001e847f
 80025ac:	003d08ff 	.word	0x003d08ff
 80025b0:	431bde83 	.word	0x431bde83
 80025b4:	10624dd3 	.word	0x10624dd3

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e272      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8087 	beq.w	80026e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d8:	4b92      	ldr	r3, [pc, #584]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d00c      	beq.n	80025fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025e4:	4b8f      	ldr	r3, [pc, #572]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d112      	bne.n	8002616 <HAL_RCC_OscConfig+0x5e>
 80025f0:	4b8c      	ldr	r3, [pc, #560]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d10b      	bne.n	8002616 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fe:	4b89      	ldr	r3, [pc, #548]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d06c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x12c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d168      	bne.n	80026e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e24c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x76>
 8002620:	4b80      	ldr	r3, [pc, #512]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a7f      	ldr	r2, [pc, #508]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e02e      	b.n	800268c <HAL_RCC_OscConfig+0xd4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x98>
 8002636:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7a      	ldr	r2, [pc, #488]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b78      	ldr	r3, [pc, #480]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a77      	ldr	r2, [pc, #476]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xd4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0xbc>
 800265a:	4b72      	ldr	r3, [pc, #456]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a71      	ldr	r2, [pc, #452]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xd4>
 8002674:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6a      	ldr	r2, [pc, #424]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a67      	ldr	r2, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f910 	bl	80018b8 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff f90c 	bl	80018b8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e200      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xe4>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f8fc 	bl	80018b8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff f8f8 	bl	80018b8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1ec      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x10c>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026fe:	4b49      	ldr	r3, [pc, #292]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x18c>
 800270a:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x176>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c0      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4939      	ldr	r1, [pc, #228]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_RCC_OscConfig+0x270>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff f8b1 	bl	80018b8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275a:	f7ff f8ad 	bl	80018b8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4927      	ldr	r1, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <HAL_RCC_OscConfig+0x270>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f890 	bl	80018b8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279c:	f7ff f88c 	bl	80018b8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e180      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d03a      	beq.n	800283c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d019      	beq.n	8002802 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_RCC_OscConfig+0x274>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7ff f870 	bl	80018b8 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff f86c 	bl	80018b8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e160      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f000 fac4 	bl	8002d88 <RCC_Delay>
 8002800:	e01c      	b.n	800283c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_RCC_OscConfig+0x274>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002808:	f7ff f856 	bl	80018b8 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280e:	e00f      	b.n	8002830 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002810:	f7ff f852 	bl	80018b8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d908      	bls.n	8002830 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e146      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	42420000 	.word	0x42420000
 800282c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002830:	4b92      	ldr	r3, [pc, #584]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e9      	bne.n	8002810 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a6 	beq.w	8002996 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284e:	4b8b      	ldr	r3, [pc, #556]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a87      	ldr	r2, [pc, #540]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b7f      	ldr	r3, [pc, #508]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7e      	ldr	r2, [pc, #504]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7ff f813 	bl	80018b8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7ff f80f 	bl	80018b8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b64      	cmp	r3, #100	; 0x64
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e103      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b75      	ldr	r3, [pc, #468]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x312>
 80028bc:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	e02d      	b.n	8002926 <HAL_RCC_OscConfig+0x36e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x334>
 80028d2:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a69      	ldr	r2, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a66      	ldr	r2, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	6213      	str	r3, [r2, #32]
 80028ea:	e01c      	b.n	8002926 <HAL_RCC_OscConfig+0x36e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x356>
 80028f4:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a60      	ldr	r2, [pc, #384]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	4b5e      	ldr	r3, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	e00b      	b.n	8002926 <HAL_RCC_OscConfig+0x36e>
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a5a      	ldr	r2, [pc, #360]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe ffc3 	bl	80018b8 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe ffbf 	bl	80018b8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0b1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCC_OscConfig+0x37e>
 8002958:	e014      	b.n	8002984 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe ffad 	bl	80018b8 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe ffa9 	bl	80018b8 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e09b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002994:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8087 	beq.w	8002aae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d061      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d146      	bne.n	8002a42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe ff7d 	bl	80018b8 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe ff79 	bl	80018b8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e06d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4921      	ldr	r1, [pc, #132]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a19      	ldr	r1, [r3, #32]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	491b      	ldr	r1, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe ff4d 	bl	80018b8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe ff49 	bl	80018b8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e03d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x46a>
 8002a40:	e035      	b.n	8002aae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe ff36 	bl	80018b8 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe ff32 	bl	80018b8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e026      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x498>
 8002a6e:	e01e      	b.n	8002aae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e019      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x500>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000

08002abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0d0      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4965      	ldr	r1, [pc, #404]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	494d      	ldr	r1, [pc, #308]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d040      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d115      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e073      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06b      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4936      	ldr	r1, [pc, #216]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe fe84 	bl	80018b8 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fe80 	bl	80018b8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e053      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d210      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 0207 	bic.w	r2, r3, #7
 8002bf2:	4922      	ldr	r1, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e032      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4916      	ldr	r1, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	490e      	ldr	r1, [pc, #56]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4a:	f000 f821 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	490a      	ldr	r1, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	5ccb      	ldrb	r3, [r1, r3]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1cc>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1d0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fde2 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08004fe0 	.word	0x08004fe0
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b490      	push	{r4, r7}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xac>)
 8002c98:	1d3c      	adds	r4, r7, #4
 8002c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ca0:	f240 2301 	movw	r3, #513	; 0x201
 8002ca4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x46>
 8002cce:	e02b      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cd2:	623b      	str	r3, [r7, #32]
      break;
 8002cd4:	e02b      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	0c9b      	lsrs	r3, r3, #18
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3328      	adds	r3, #40	; 0x28
 8002ce0:	443b      	add	r3, r7
 8002ce2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ce6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0c5b      	lsrs	r3, r3, #17
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	3328      	adds	r3, #40	; 0x28
 8002cfe:	443b      	add	r3, r7
 8002d00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d0a:	fb03 f202 	mul.w	r2, r3, r2
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	e004      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	623b      	str	r3, [r7, #32]
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d2a:	623b      	str	r3, [r7, #32]
      break;
 8002d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc90      	pop	{r4, r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	08004fd0 	.word	0x08004fd0
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	003d0900 	.word	0x003d0900

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b02      	ldr	r3, [pc, #8]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff2 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004ff0 	.word	0x08004ff0

08002d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d90:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <RCC_Delay+0x34>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <RCC_Delay+0x38>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0a5b      	lsrs	r3, r3, #9
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da4:	bf00      	nop
  }
  while (Delay --);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	60fa      	str	r2, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f9      	bne.n	8002da4 <RCC_Delay+0x1c>
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	10624dd3 	.word	0x10624dd3

08002dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe fc30 	bl	8001650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f000 fd44 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e041      	b.n	8002ef8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f839 	bl	8002f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f000 fcf5 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_TIM_PWM_Start_DMA+0x28>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e022      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d109      	bne.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x42>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e015      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d109      	bne.n	8002f70 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e008      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e14e      	b.n	8003228 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_TIM_PWM_Start_DMA+0x90>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e022      	b.n	8002fea <HAL_TIM_PWM_Start_DMA+0xd6>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d109      	bne.n	8002fbe <HAL_TIM_PWM_Start_DMA+0xaa>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e015      	b.n	8002fea <HAL_TIM_PWM_Start_DMA+0xd6>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d109      	bne.n	8002fd8 <HAL_TIM_PWM_Start_DMA+0xc4>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e008      	b.n	8002fea <HAL_TIM_PWM_Start_DMA+0xd6>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d024      	beq.n	8003038 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start_DMA+0xea>
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e114      	b.n	8003228 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start_DMA+0xfa>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800300c:	e016      	b.n	800303c <HAL_TIM_PWM_Start_DMA+0x128>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d104      	bne.n	800301e <HAL_TIM_PWM_Start_DMA+0x10a>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800301c:	e00e      	b.n	800303c <HAL_TIM_PWM_Start_DMA+0x128>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d104      	bne.n	800302e <HAL_TIM_PWM_Start_DMA+0x11a>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302c:	e006      	b.n	800303c <HAL_TIM_PWM_Start_DMA+0x128>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003036:	e001      	b.n	800303c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0f5      	b.n	8003228 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	f200 80ae 	bhi.w	80031a0 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_TIM_PWM_Start_DMA+0x138>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	08003081 	.word	0x08003081
 8003050:	080031a1 	.word	0x080031a1
 8003054:	080031a1 	.word	0x080031a1
 8003058:	080031a1 	.word	0x080031a1
 800305c:	080030c9 	.word	0x080030c9
 8003060:	080031a1 	.word	0x080031a1
 8003064:	080031a1 	.word	0x080031a1
 8003068:	080031a1 	.word	0x080031a1
 800306c:	08003111 	.word	0x08003111
 8003070:	080031a1 	.word	0x080031a1
 8003074:	080031a1 	.word	0x080031a1
 8003078:	080031a1 	.word	0x080031a1
 800307c:	08003159 	.word	0x08003159
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	4a6a      	ldr	r2, [pc, #424]	; (8003230 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	4a69      	ldr	r2, [pc, #420]	; (8003234 <HAL_TIM_PWM_Start_DMA+0x320>)
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	4a68      	ldr	r2, [pc, #416]	; (8003238 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003096:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3334      	adds	r3, #52	; 0x34
 80030a4:	461a      	mov	r2, r3
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	f7fe fd9c 	bl	8001be4 <HAL_DMA_Start_IT>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0b8      	b.n	8003228 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c4:	60da      	str	r2, [r3, #12]
      break;
 80030c6:	e06c      	b.n	80031a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	4a57      	ldr	r2, [pc, #348]	; (8003234 <HAL_TIM_PWM_Start_DMA+0x320>)
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_TIM_PWM_Start_DMA+0x324>)
 80030de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3338      	adds	r3, #56	; 0x38
 80030ec:	461a      	mov	r2, r3
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	f7fe fd78 	bl	8001be4 <HAL_DMA_Start_IT>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e094      	b.n	8003228 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800310c:	60da      	str	r2, [r3, #12]
      break;
 800310e:	e048      	b.n	80031a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	4a46      	ldr	r2, [pc, #280]	; (8003230 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	4a45      	ldr	r2, [pc, #276]	; (8003234 <HAL_TIM_PWM_Start_DMA+0x320>)
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4a44      	ldr	r2, [pc, #272]	; (8003238 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003126:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	333c      	adds	r3, #60	; 0x3c
 8003134:	461a      	mov	r2, r3
 8003136:	887b      	ldrh	r3, [r7, #2]
 8003138:	f7fe fd54 	bl	8001be4 <HAL_DMA_Start_IT>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e070      	b.n	8003228 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003154:	60da      	str	r2, [r3, #12]
      break;
 8003156:	e024      	b.n	80031a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a34      	ldr	r2, [pc, #208]	; (8003230 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a32      	ldr	r2, [pc, #200]	; (8003238 <HAL_TIM_PWM_Start_DMA+0x324>)
 800316e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3340      	adds	r3, #64	; 0x40
 800317c:	461a      	mov	r2, r3
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	f7fe fd30 	bl	8001be4 <HAL_DMA_Start_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e04c      	b.n	8003228 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800319c:	60da      	str	r2, [r3, #12]
      break;
 800319e:	e000      	b.n	80031a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80031a0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fdf0 	bl	8003d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a21      	ldr	r2, [pc, #132]	; (800323c <HAL_TIM_PWM_Start_DMA+0x328>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d107      	bne.n	80031ca <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_TIM_PWM_Start_DMA+0x328>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d009      	beq.n	80031f2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_TIM_PWM_Start_DMA+0x330>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d111      	bne.n	8003216 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d010      	beq.n	8003226 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	e007      	b.n	8003226 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	0800377f 	.word	0x0800377f
 8003234:	08003827 	.word	0x08003827
 8003238:	080036ed 	.word	0x080036ed
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800

08003248 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b0c      	cmp	r3, #12
 8003256:	d855      	bhi.n	8003304 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003295 	.word	0x08003295
 8003264:	08003305 	.word	0x08003305
 8003268:	08003305 	.word	0x08003305
 800326c:	08003305 	.word	0x08003305
 8003270:	080032b1 	.word	0x080032b1
 8003274:	08003305 	.word	0x08003305
 8003278:	08003305 	.word	0x08003305
 800327c:	08003305 	.word	0x08003305
 8003280:	080032cd 	.word	0x080032cd
 8003284:	08003305 	.word	0x08003305
 8003288:	08003305 	.word	0x08003305
 800328c:	08003305 	.word	0x08003305
 8003290:	080032e9 	.word	0x080032e9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fcfb 	bl	8001ca4 <HAL_DMA_Abort_IT>
      break;
 80032ae:	e02a      	b.n	8003306 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe fced 	bl	8001ca4 <HAL_DMA_Abort_IT>
      break;
 80032ca:	e01c      	b.n	8003306 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fcdf 	bl	8001ca4 <HAL_DMA_Abort_IT>
      break;
 80032e6:	e00e      	b.n	8003306 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe fcd1 	bl	8001ca4 <HAL_DMA_Abort_IT>
      break;
 8003302:	e000      	b.n	8003306 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003304:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fd3e 	bl	8003d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d117      	bne.n	800334e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	f241 1311 	movw	r3, #4369	; 0x1111
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <HAL_TIM_PWM_Stop_DMA+0x106>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	f240 4344 	movw	r3, #1092	; 0x444
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d107      	bne.n	800334e <HAL_TIM_PWM_Stop_DMA+0x106>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	f241 1311 	movw	r3, #4369	; 0x1111
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_TIM_PWM_Stop_DMA+0x136>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a1a      	ldr	r2, [r3, #32]
 8003364:	f240 4344 	movw	r3, #1092	; 0x444
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_TIM_PWM_Stop_DMA+0x136>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Stop_DMA+0x146>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800338c:	e013      	b.n	80033b6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d104      	bne.n	800339e <HAL_TIM_PWM_Stop_DMA+0x156>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800339c:	e00b      	b.n	80033b6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_PWM_Stop_DMA+0x166>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ac:	e003      	b.n	80033b6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40012c00 	.word	0x40012c00

080033c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0ac      	b.n	8003538 <HAL_TIM_PWM_ConfigChannel+0x174>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	f200 809f 	bhi.w	800352c <HAL_TIM_PWM_ConfigChannel+0x168>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003429 	.word	0x08003429
 80033f8:	0800352d 	.word	0x0800352d
 80033fc:	0800352d 	.word	0x0800352d
 8003400:	0800352d 	.word	0x0800352d
 8003404:	08003469 	.word	0x08003469
 8003408:	0800352d 	.word	0x0800352d
 800340c:	0800352d 	.word	0x0800352d
 8003410:	0800352d 	.word	0x0800352d
 8003414:	080034ab 	.word	0x080034ab
 8003418:	0800352d 	.word	0x0800352d
 800341c:	0800352d 	.word	0x0800352d
 8003420:	0800352d 	.word	0x0800352d
 8003424:	080034eb 	.word	0x080034eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa90 	bl	8003954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]
      break;
 8003466:	e062      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fad6 	bl	8003a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
      break;
 80034a8:	e041      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fb1f 	bl	8003af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
      break;
 80034e8:	e021      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb69 	bl	8003bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	61da      	str	r2, [r3, #28]
      break;
 800352a:	e000      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800352c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIM_ConfigClockSource+0x18>
 8003554:	2302      	movs	r3, #2
 8003556:	e0b3      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x180>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800357e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003590:	d03e      	beq.n	8003610 <HAL_TIM_ConfigClockSource+0xd0>
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003596:	f200 8087 	bhi.w	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359e:	f000 8085 	beq.w	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a6:	d87f      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 80035a8:	2b70      	cmp	r3, #112	; 0x70
 80035aa:	d01a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0xa2>
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d87b      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 80035b0:	2b60      	cmp	r3, #96	; 0x60
 80035b2:	d050      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x116>
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d877      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 80035b8:	2b50      	cmp	r3, #80	; 0x50
 80035ba:	d03c      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xf6>
 80035bc:	2b50      	cmp	r3, #80	; 0x50
 80035be:	d873      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d058      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x136>
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d86f      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 80035c8:	2b30      	cmp	r3, #48	; 0x30
 80035ca:	d064      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x156>
 80035cc:	2b30      	cmp	r3, #48	; 0x30
 80035ce:	d86b      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d060      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x156>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d867      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05c      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x156>
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d05a      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035e0:	e062      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6899      	ldr	r1, [r3, #8]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f000 fbae 	bl	8003d52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003604:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	609a      	str	r2, [r3, #8]
      break;
 800360e:	e04e      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6899      	ldr	r1, [r3, #8]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f000 fb97 	bl	8003d52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003632:	609a      	str	r2, [r3, #8]
      break;
 8003634:	e03b      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	461a      	mov	r2, r3
 8003644:	f000 fb0e 	bl	8003c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2150      	movs	r1, #80	; 0x50
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fb65 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003654:	e02b      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fb2c 	bl	8003cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2160      	movs	r1, #96	; 0x60
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fb55 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003674:	e01b      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f000 faee 	bl	8003c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2140      	movs	r1, #64	; 0x40
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fb45 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003694:	e00b      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 fb3c 	bl	8003d1e <TIM_ITRx_SetConfig>
        break;
 80036a6:	e002      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036a8:	bf00      	nop
 80036aa:	e000      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d107      	bne.n	8003714 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003712:	e02a      	b.n	800376a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d107      	bne.n	800372e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372c:	e01d      	b.n	800376a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2204      	movs	r2, #4
 800373c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003746:	e010      	b.n	800376a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d107      	bne.n	8003762 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2208      	movs	r2, #8
 8003756:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003760:	e003      	b.n	800376a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ffb5 	bl	80036da <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	771a      	strb	r2, [r3, #28]
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d10b      	bne.n	80037ae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d136      	bne.n	8003812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ac:	e031      	b.n	8003812 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d10b      	bne.n	80037d0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2202      	movs	r2, #2
 80037bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d125      	bne.n	8003812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ce:	e020      	b.n	8003812 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10b      	bne.n	80037f2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2204      	movs	r2, #4
 80037de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d114      	bne.n	8003812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	e00f      	b.n	8003812 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10a      	bne.n	8003812 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2208      	movs	r2, #8
 8003800:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7fd fc82 	bl	800111c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	771a      	strb	r2, [r3, #28]
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d103      	bne.n	8003846 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	771a      	strb	r2, [r3, #28]
 8003844:	e019      	b.n	800387a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d103      	bne.n	8003858 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	771a      	strb	r2, [r3, #28]
 8003856:	e010      	b.n	800387a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d103      	bne.n	800386a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2204      	movs	r2, #4
 8003866:	771a      	strb	r2, [r3, #28]
 8003868:	e007      	b.n	800387a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d102      	bne.n	800387a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2208      	movs	r2, #8
 8003878:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ff24 	bl	80036c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	771a      	strb	r2, [r3, #28]
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a07      	ldr	r2, [pc, #28]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800

08003954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0302 	bic.w	r3, r3, #2
 800399c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <TIM_OC1_SetConfig+0xc8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10c      	bne.n	80039ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0308 	bic.w	r3, r3, #8
 80039b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <TIM_OC1_SetConfig+0xc8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d111      	bne.n	80039f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40012c00 	.word	0x40012c00

08003a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f023 0210 	bic.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0320 	bic.w	r3, r3, #32
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <TIM_OC2_SetConfig+0xd0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10d      	bne.n	8003a9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <TIM_OC2_SetConfig+0xd0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d113      	bne.n	8003acc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00

08003af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC3_SetConfig+0xd0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10d      	bne.n	8003b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <TIM_OC3_SetConfig+0xd0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d113      	bne.n	8003b9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	621a      	str	r2, [r3, #32]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00

08003bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <TIM_OC4_SetConfig+0x98>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d109      	bne.n	8003c3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00

08003c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f023 0201 	bic.w	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f023 030a 	bic.w	r3, r3, #10
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f023 0210 	bic.w	r2, r3, #16
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	031b      	lsls	r3, r3, #12
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f043 0307 	orr.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b087      	sub	sp, #28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	021a      	lsls	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2201      	movs	r2, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e046      	b.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d009      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10c      	bne.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800

08003e94 <__libc_init_array>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	2600      	movs	r6, #0
 8003e98:	4d0c      	ldr	r5, [pc, #48]	; (8003ecc <__libc_init_array+0x38>)
 8003e9a:	4c0d      	ldr	r4, [pc, #52]	; (8003ed0 <__libc_init_array+0x3c>)
 8003e9c:	1b64      	subs	r4, r4, r5
 8003e9e:	10a4      	asrs	r4, r4, #2
 8003ea0:	42a6      	cmp	r6, r4
 8003ea2:	d109      	bne.n	8003eb8 <__libc_init_array+0x24>
 8003ea4:	f001 f886 	bl	8004fb4 <_init>
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	4d0a      	ldr	r5, [pc, #40]	; (8003ed4 <__libc_init_array+0x40>)
 8003eac:	4c0a      	ldr	r4, [pc, #40]	; (8003ed8 <__libc_init_array+0x44>)
 8003eae:	1b64      	subs	r4, r4, r5
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	42a6      	cmp	r6, r4
 8003eb4:	d105      	bne.n	8003ec2 <__libc_init_array+0x2e>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebc:	4798      	blx	r3
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	e7ee      	b.n	8003ea0 <__libc_init_array+0xc>
 8003ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec6:	4798      	blx	r3
 8003ec8:	3601      	adds	r6, #1
 8003eca:	e7f2      	b.n	8003eb2 <__libc_init_array+0x1e>
 8003ecc:	080051d0 	.word	0x080051d0
 8003ed0:	080051d0 	.word	0x080051d0
 8003ed4:	080051d0 	.word	0x080051d0
 8003ed8:	080051d4 	.word	0x080051d4

08003edc <memset>:
 8003edc:	4603      	mov	r3, r0
 8003ede:	4402      	add	r2, r0
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d100      	bne.n	8003ee6 <memset+0xa>
 8003ee4:	4770      	bx	lr
 8003ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eea:	e7f9      	b.n	8003ee0 <memset+0x4>

08003eec <tan>:
 8003eec:	b530      	push	{r4, r5, lr}
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <tan+0x4c>)
 8003ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	dc06      	bgt.n	8003f08 <tan+0x1c>
 8003efa:	2301      	movs	r3, #1
 8003efc:	2200      	movs	r2, #0
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2300      	movs	r3, #0
 8003f02:	f000 fd59 	bl	80049b8 <__kernel_tan>
 8003f06:	e006      	b.n	8003f16 <tan+0x2a>
 8003f08:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <tan+0x50>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	dd05      	ble.n	8003f1a <tan+0x2e>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	f7fc f921 	bl	8000158 <__aeabi_dsub>
 8003f16:	b007      	add	sp, #28
 8003f18:	bd30      	pop	{r4, r5, pc}
 8003f1a:	aa02      	add	r2, sp, #8
 8003f1c:	f000 f810 	bl	8003f40 <__ieee754_rem_pio2>
 8003f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f24:	0040      	lsls	r0, r0, #1
 8003f26:	f000 0002 	and.w	r0, r0, #2
 8003f2a:	f1c0 0001 	rsb	r0, r0, #1
 8003f2e:	9000      	str	r0, [sp, #0]
 8003f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f34:	e7e5      	b.n	8003f02 <tan+0x16>
 8003f36:	bf00      	nop
 8003f38:	3fe921fb 	.word	0x3fe921fb
 8003f3c:	7fefffff 	.word	0x7fefffff

08003f40 <__ieee754_rem_pio2>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	4614      	mov	r4, r2
 8003f46:	4ac4      	ldr	r2, [pc, #784]	; (8004258 <__ieee754_rem_pio2+0x318>)
 8003f48:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003f4c:	b08d      	sub	sp, #52	; 0x34
 8003f4e:	4592      	cmp	sl, r2
 8003f50:	9104      	str	r1, [sp, #16]
 8003f52:	dc07      	bgt.n	8003f64 <__ieee754_rem_pio2+0x24>
 8003f54:	2200      	movs	r2, #0
 8003f56:	2300      	movs	r3, #0
 8003f58:	e9c4 0100 	strd	r0, r1, [r4]
 8003f5c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003f60:	2500      	movs	r5, #0
 8003f62:	e024      	b.n	8003fae <__ieee754_rem_pio2+0x6e>
 8003f64:	4abd      	ldr	r2, [pc, #756]	; (800425c <__ieee754_rem_pio2+0x31c>)
 8003f66:	4592      	cmp	sl, r2
 8003f68:	dc72      	bgt.n	8004050 <__ieee754_rem_pio2+0x110>
 8003f6a:	9b04      	ldr	r3, [sp, #16]
 8003f6c:	4dbc      	ldr	r5, [pc, #752]	; (8004260 <__ieee754_rem_pio2+0x320>)
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	a3ab      	add	r3, pc, #684	; (adr r3, 8004220 <__ieee754_rem_pio2+0x2e0>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	dd36      	ble.n	8003fe6 <__ieee754_rem_pio2+0xa6>
 8003f78:	f7fc f8ee 	bl	8000158 <__aeabi_dsub>
 8003f7c:	45aa      	cmp	sl, r5
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460f      	mov	r7, r1
 8003f82:	d018      	beq.n	8003fb6 <__ieee754_rem_pio2+0x76>
 8003f84:	a3a8      	add	r3, pc, #672	; (adr r3, 8004228 <__ieee754_rem_pio2+0x2e8>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f7fc f8e5 	bl	8000158 <__aeabi_dsub>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4630      	mov	r0, r6
 8003f94:	e9c4 2300 	strd	r2, r3, [r4]
 8003f98:	4639      	mov	r1, r7
 8003f9a:	f7fc f8dd 	bl	8000158 <__aeabi_dsub>
 8003f9e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004228 <__ieee754_rem_pio2+0x2e8>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc f8d8 	bl	8000158 <__aeabi_dsub>
 8003fa8:	2501      	movs	r5, #1
 8003faa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003fae:	4628      	mov	r0, r5
 8003fb0:	b00d      	add	sp, #52	; 0x34
 8003fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb6:	a39e      	add	r3, pc, #632	; (adr r3, 8004230 <__ieee754_rem_pio2+0x2f0>)
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f7fc f8cc 	bl	8000158 <__aeabi_dsub>
 8003fc0:	a39d      	add	r3, pc, #628	; (adr r3, 8004238 <__ieee754_rem_pio2+0x2f8>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	460f      	mov	r7, r1
 8003fca:	f7fc f8c5 	bl	8000158 <__aeabi_dsub>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	e9c4 2300 	strd	r2, r3, [r4]
 8003fd8:	4639      	mov	r1, r7
 8003fda:	f7fc f8bd 	bl	8000158 <__aeabi_dsub>
 8003fde:	a396      	add	r3, pc, #600	; (adr r3, 8004238 <__ieee754_rem_pio2+0x2f8>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	e7de      	b.n	8003fa4 <__ieee754_rem_pio2+0x64>
 8003fe6:	f7fc f8b9 	bl	800015c <__adddf3>
 8003fea:	45aa      	cmp	sl, r5
 8003fec:	4606      	mov	r6, r0
 8003fee:	460f      	mov	r7, r1
 8003ff0:	d016      	beq.n	8004020 <__ieee754_rem_pio2+0xe0>
 8003ff2:	a38d      	add	r3, pc, #564	; (adr r3, 8004228 <__ieee754_rem_pio2+0x2e8>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc f8b0 	bl	800015c <__adddf3>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4630      	mov	r0, r6
 8004002:	e9c4 2300 	strd	r2, r3, [r4]
 8004006:	4639      	mov	r1, r7
 8004008:	f7fc f8a6 	bl	8000158 <__aeabi_dsub>
 800400c:	a386      	add	r3, pc, #536	; (adr r3, 8004228 <__ieee754_rem_pio2+0x2e8>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc f8a3 	bl	800015c <__adddf3>
 8004016:	f04f 35ff 	mov.w	r5, #4294967295
 800401a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800401e:	e7c6      	b.n	8003fae <__ieee754_rem_pio2+0x6e>
 8004020:	a383      	add	r3, pc, #524	; (adr r3, 8004230 <__ieee754_rem_pio2+0x2f0>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f7fc f899 	bl	800015c <__adddf3>
 800402a:	a383      	add	r3, pc, #524	; (adr r3, 8004238 <__ieee754_rem_pio2+0x2f8>)
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	4606      	mov	r6, r0
 8004032:	460f      	mov	r7, r1
 8004034:	f7fc f892 	bl	800015c <__adddf3>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4630      	mov	r0, r6
 800403e:	e9c4 2300 	strd	r2, r3, [r4]
 8004042:	4639      	mov	r1, r7
 8004044:	f7fc f888 	bl	8000158 <__aeabi_dsub>
 8004048:	a37b      	add	r3, pc, #492	; (adr r3, 8004238 <__ieee754_rem_pio2+0x2f8>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	e7e0      	b.n	8004012 <__ieee754_rem_pio2+0xd2>
 8004050:	4a84      	ldr	r2, [pc, #528]	; (8004264 <__ieee754_rem_pio2+0x324>)
 8004052:	4592      	cmp	sl, r2
 8004054:	f300 80d5 	bgt.w	8004202 <__ieee754_rem_pio2+0x2c2>
 8004058:	f000 feaa 	bl	8004db0 <fabs>
 800405c:	a378      	add	r3, pc, #480	; (adr r3, 8004240 <__ieee754_rem_pio2+0x300>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	4606      	mov	r6, r0
 8004064:	460f      	mov	r7, r1
 8004066:	f7fc fa2f 	bl	80004c8 <__aeabi_dmul>
 800406a:	2200      	movs	r2, #0
 800406c:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <__ieee754_rem_pio2+0x328>)
 800406e:	f7fc f875 	bl	800015c <__adddf3>
 8004072:	f7fc fcc3 	bl	80009fc <__aeabi_d2iz>
 8004076:	4605      	mov	r5, r0
 8004078:	f7fc f9bc 	bl	80003f4 <__aeabi_i2d>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004084:	a366      	add	r3, pc, #408	; (adr r3, 8004220 <__ieee754_rem_pio2+0x2e0>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f7fc fa1d 	bl	80004c8 <__aeabi_dmul>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4630      	mov	r0, r6
 8004094:	4639      	mov	r1, r7
 8004096:	f7fc f85f 	bl	8000158 <__aeabi_dsub>
 800409a:	a363      	add	r3, pc, #396	; (adr r3, 8004228 <__ieee754_rem_pio2+0x2e8>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	4680      	mov	r8, r0
 80040a2:	4689      	mov	r9, r1
 80040a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a8:	f7fc fa0e 	bl	80004c8 <__aeabi_dmul>
 80040ac:	2d1f      	cmp	r5, #31
 80040ae:	4606      	mov	r6, r0
 80040b0:	460f      	mov	r7, r1
 80040b2:	dc0e      	bgt.n	80040d2 <__ieee754_rem_pio2+0x192>
 80040b4:	4b6d      	ldr	r3, [pc, #436]	; (800426c <__ieee754_rem_pio2+0x32c>)
 80040b6:	1e6a      	subs	r2, r5, #1
 80040b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040bc:	4553      	cmp	r3, sl
 80040be:	d008      	beq.n	80040d2 <__ieee754_rem_pio2+0x192>
 80040c0:	4632      	mov	r2, r6
 80040c2:	463b      	mov	r3, r7
 80040c4:	4640      	mov	r0, r8
 80040c6:	4649      	mov	r1, r9
 80040c8:	f7fc f846 	bl	8000158 <__aeabi_dsub>
 80040cc:	e9c4 0100 	strd	r0, r1, [r4]
 80040d0:	e013      	b.n	80040fa <__ieee754_rem_pio2+0x1ba>
 80040d2:	463b      	mov	r3, r7
 80040d4:	4632      	mov	r2, r6
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc f83d 	bl	8000158 <__aeabi_dsub>
 80040de:	ea4f 532a 	mov.w	r3, sl, asr #20
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80040e8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80040ec:	f1ba 0f10 	cmp.w	sl, #16
 80040f0:	dc1f      	bgt.n	8004132 <__ieee754_rem_pio2+0x1f2>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	e9c4 2300 	strd	r2, r3, [r4]
 80040fa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80040fe:	4640      	mov	r0, r8
 8004100:	4653      	mov	r3, sl
 8004102:	4649      	mov	r1, r9
 8004104:	f7fc f828 	bl	8000158 <__aeabi_dsub>
 8004108:	4632      	mov	r2, r6
 800410a:	463b      	mov	r3, r7
 800410c:	f7fc f824 	bl	8000158 <__aeabi_dsub>
 8004110:	460b      	mov	r3, r1
 8004112:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004116:	9904      	ldr	r1, [sp, #16]
 8004118:	4602      	mov	r2, r0
 800411a:	2900      	cmp	r1, #0
 800411c:	f6bf af47 	bge.w	8003fae <__ieee754_rem_pio2+0x6e>
 8004120:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004124:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800412c:	60e3      	str	r3, [r4, #12]
 800412e:	426d      	negs	r5, r5
 8004130:	e73d      	b.n	8003fae <__ieee754_rem_pio2+0x6e>
 8004132:	a33f      	add	r3, pc, #252	; (adr r3, 8004230 <__ieee754_rem_pio2+0x2f0>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800413c:	f7fc f9c4 	bl	80004c8 <__aeabi_dmul>
 8004140:	4606      	mov	r6, r0
 8004142:	460f      	mov	r7, r1
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4640      	mov	r0, r8
 800414a:	4649      	mov	r1, r9
 800414c:	f7fc f804 	bl	8000158 <__aeabi_dsub>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4682      	mov	sl, r0
 8004156:	468b      	mov	fp, r1
 8004158:	4640      	mov	r0, r8
 800415a:	4649      	mov	r1, r9
 800415c:	f7fb fffc 	bl	8000158 <__aeabi_dsub>
 8004160:	4632      	mov	r2, r6
 8004162:	463b      	mov	r3, r7
 8004164:	f7fb fff8 	bl	8000158 <__aeabi_dsub>
 8004168:	a333      	add	r3, pc, #204	; (adr r3, 8004238 <__ieee754_rem_pio2+0x2f8>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	4606      	mov	r6, r0
 8004170:	460f      	mov	r7, r1
 8004172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004176:	f7fc f9a7 	bl	80004c8 <__aeabi_dmul>
 800417a:	4632      	mov	r2, r6
 800417c:	463b      	mov	r3, r7
 800417e:	f7fb ffeb 	bl	8000158 <__aeabi_dsub>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4606      	mov	r6, r0
 8004188:	460f      	mov	r7, r1
 800418a:	4650      	mov	r0, sl
 800418c:	4659      	mov	r1, fp
 800418e:	f7fb ffe3 	bl	8000158 <__aeabi_dsub>
 8004192:	9a05      	ldr	r2, [sp, #20]
 8004194:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b31      	cmp	r3, #49	; 0x31
 800419c:	dc06      	bgt.n	80041ac <__ieee754_rem_pio2+0x26c>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	46d0      	mov	r8, sl
 80041a4:	46d9      	mov	r9, fp
 80041a6:	e9c4 2300 	strd	r2, r3, [r4]
 80041aa:	e7a6      	b.n	80040fa <__ieee754_rem_pio2+0x1ba>
 80041ac:	a326      	add	r3, pc, #152	; (adr r3, 8004248 <__ieee754_rem_pio2+0x308>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041b6:	f7fc f987 	bl	80004c8 <__aeabi_dmul>
 80041ba:	4606      	mov	r6, r0
 80041bc:	460f      	mov	r7, r1
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4650      	mov	r0, sl
 80041c4:	4659      	mov	r1, fp
 80041c6:	f7fb ffc7 	bl	8000158 <__aeabi_dsub>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4680      	mov	r8, r0
 80041d0:	4689      	mov	r9, r1
 80041d2:	4650      	mov	r0, sl
 80041d4:	4659      	mov	r1, fp
 80041d6:	f7fb ffbf 	bl	8000158 <__aeabi_dsub>
 80041da:	4632      	mov	r2, r6
 80041dc:	463b      	mov	r3, r7
 80041de:	f7fb ffbb 	bl	8000158 <__aeabi_dsub>
 80041e2:	a31b      	add	r3, pc, #108	; (adr r3, 8004250 <__ieee754_rem_pio2+0x310>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	4606      	mov	r6, r0
 80041ea:	460f      	mov	r7, r1
 80041ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f0:	f7fc f96a 	bl	80004c8 <__aeabi_dmul>
 80041f4:	4632      	mov	r2, r6
 80041f6:	463b      	mov	r3, r7
 80041f8:	f7fb ffae 	bl	8000158 <__aeabi_dsub>
 80041fc:	4606      	mov	r6, r0
 80041fe:	460f      	mov	r7, r1
 8004200:	e75e      	b.n	80040c0 <__ieee754_rem_pio2+0x180>
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <__ieee754_rem_pio2+0x330>)
 8004204:	4592      	cmp	sl, r2
 8004206:	dd35      	ble.n	8004274 <__ieee754_rem_pio2+0x334>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	f7fb ffa4 	bl	8000158 <__aeabi_dsub>
 8004210:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004214:	e9c4 0100 	strd	r0, r1, [r4]
 8004218:	e6a2      	b.n	8003f60 <__ieee754_rem_pio2+0x20>
 800421a:	bf00      	nop
 800421c:	f3af 8000 	nop.w
 8004220:	54400000 	.word	0x54400000
 8004224:	3ff921fb 	.word	0x3ff921fb
 8004228:	1a626331 	.word	0x1a626331
 800422c:	3dd0b461 	.word	0x3dd0b461
 8004230:	1a600000 	.word	0x1a600000
 8004234:	3dd0b461 	.word	0x3dd0b461
 8004238:	2e037073 	.word	0x2e037073
 800423c:	3ba3198a 	.word	0x3ba3198a
 8004240:	6dc9c883 	.word	0x6dc9c883
 8004244:	3fe45f30 	.word	0x3fe45f30
 8004248:	2e000000 	.word	0x2e000000
 800424c:	3ba3198a 	.word	0x3ba3198a
 8004250:	252049c1 	.word	0x252049c1
 8004254:	397b839a 	.word	0x397b839a
 8004258:	3fe921fb 	.word	0x3fe921fb
 800425c:	4002d97b 	.word	0x4002d97b
 8004260:	3ff921fb 	.word	0x3ff921fb
 8004264:	413921fb 	.word	0x413921fb
 8004268:	3fe00000 	.word	0x3fe00000
 800426c:	08004ff8 	.word	0x08004ff8
 8004270:	7fefffff 	.word	0x7fefffff
 8004274:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004278:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800427c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004280:	460f      	mov	r7, r1
 8004282:	4606      	mov	r6, r0
 8004284:	f7fc fbba 	bl	80009fc <__aeabi_d2iz>
 8004288:	f7fc f8b4 	bl	80003f4 <__aeabi_i2d>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4630      	mov	r0, r6
 8004292:	4639      	mov	r1, r7
 8004294:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004298:	f7fb ff5e 	bl	8000158 <__aeabi_dsub>
 800429c:	2200      	movs	r2, #0
 800429e:	4b22      	ldr	r3, [pc, #136]	; (8004328 <__ieee754_rem_pio2+0x3e8>)
 80042a0:	f7fc f912 	bl	80004c8 <__aeabi_dmul>
 80042a4:	460f      	mov	r7, r1
 80042a6:	4606      	mov	r6, r0
 80042a8:	f7fc fba8 	bl	80009fc <__aeabi_d2iz>
 80042ac:	f7fc f8a2 	bl	80003f4 <__aeabi_i2d>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4630      	mov	r0, r6
 80042b6:	4639      	mov	r1, r7
 80042b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042bc:	f7fb ff4c 	bl	8000158 <__aeabi_dsub>
 80042c0:	2200      	movs	r2, #0
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <__ieee754_rem_pio2+0x3e8>)
 80042c4:	f7fc f900 	bl	80004c8 <__aeabi_dmul>
 80042c8:	f04f 0803 	mov.w	r8, #3
 80042cc:	2600      	movs	r6, #0
 80042ce:	2700      	movs	r7, #0
 80042d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042d4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80042d8:	4632      	mov	r2, r6
 80042da:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80042de:	463b      	mov	r3, r7
 80042e0:	46c2      	mov	sl, r8
 80042e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80042e6:	f7fc fb57 	bl	8000998 <__aeabi_dcmpeq>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1f4      	bne.n	80042d8 <__ieee754_rem_pio2+0x398>
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <__ieee754_rem_pio2+0x3ec>)
 80042f0:	462a      	mov	r2, r5
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	2302      	movs	r3, #2
 80042f6:	4621      	mov	r1, r4
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	a806      	add	r0, sp, #24
 80042fc:	4653      	mov	r3, sl
 80042fe:	f000 f817 	bl	8004330 <__kernel_rem_pio2>
 8004302:	9b04      	ldr	r3, [sp, #16]
 8004304:	4605      	mov	r5, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f6bf ae51 	bge.w	8003fae <__ieee754_rem_pio2+0x6e>
 800430c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004314:	e9c4 2300 	strd	r2, r3, [r4]
 8004318:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800431c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004320:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004324:	e703      	b.n	800412e <__ieee754_rem_pio2+0x1ee>
 8004326:	bf00      	nop
 8004328:	41700000 	.word	0x41700000
 800432c:	08005078 	.word	0x08005078

08004330 <__kernel_rem_pio2>:
 8004330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004334:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004338:	9308      	str	r3, [sp, #32]
 800433a:	9106      	str	r1, [sp, #24]
 800433c:	4bb6      	ldr	r3, [pc, #728]	; (8004618 <__kernel_rem_pio2+0x2e8>)
 800433e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004340:	f112 0f14 	cmn.w	r2, #20
 8004344:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004348:	bfa8      	it	ge
 800434a:	1ed4      	subge	r4, r2, #3
 800434c:	9302      	str	r3, [sp, #8]
 800434e:	9b08      	ldr	r3, [sp, #32]
 8004350:	bfb8      	it	lt
 8004352:	2400      	movlt	r4, #0
 8004354:	f103 33ff 	add.w	r3, r3, #4294967295
 8004358:	9307      	str	r3, [sp, #28]
 800435a:	bfa4      	itt	ge
 800435c:	2318      	movge	r3, #24
 800435e:	fb94 f4f3 	sdivge	r4, r4, r3
 8004362:	f06f 0317 	mvn.w	r3, #23
 8004366:	fb04 3303 	mla	r3, r4, r3, r3
 800436a:	eb03 0b02 	add.w	fp, r3, r2
 800436e:	9a07      	ldr	r2, [sp, #28]
 8004370:	9b02      	ldr	r3, [sp, #8]
 8004372:	1aa7      	subs	r7, r4, r2
 8004374:	eb03 0802 	add.w	r8, r3, r2
 8004378:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800437a:	2500      	movs	r5, #0
 800437c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004380:	2200      	movs	r2, #0
 8004382:	2300      	movs	r3, #0
 8004384:	9009      	str	r0, [sp, #36]	; 0x24
 8004386:	ae20      	add	r6, sp, #128	; 0x80
 8004388:	4545      	cmp	r5, r8
 800438a:	dd14      	ble.n	80043b6 <__kernel_rem_pio2+0x86>
 800438c:	f04f 0800 	mov.w	r8, #0
 8004390:	9a08      	ldr	r2, [sp, #32]
 8004392:	ab20      	add	r3, sp, #128	; 0x80
 8004394:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004398:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800439c:	9b02      	ldr	r3, [sp, #8]
 800439e:	4598      	cmp	r8, r3
 80043a0:	dc35      	bgt.n	800440e <__kernel_rem_pio2+0xde>
 80043a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a4:	2200      	movs	r2, #0
 80043a6:	f1a3 0908 	sub.w	r9, r3, #8
 80043aa:	2300      	movs	r3, #0
 80043ac:	462f      	mov	r7, r5
 80043ae:	2600      	movs	r6, #0
 80043b0:	e9cd 2300 	strd	r2, r3, [sp]
 80043b4:	e01f      	b.n	80043f6 <__kernel_rem_pio2+0xc6>
 80043b6:	42ef      	cmn	r7, r5
 80043b8:	d40b      	bmi.n	80043d2 <__kernel_rem_pio2+0xa2>
 80043ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80043be:	e9cd 2300 	strd	r2, r3, [sp]
 80043c2:	f7fc f817 	bl	80003f4 <__aeabi_i2d>
 80043c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80043ce:	3501      	adds	r5, #1
 80043d0:	e7da      	b.n	8004388 <__kernel_rem_pio2+0x58>
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	e7f8      	b.n	80043ca <__kernel_rem_pio2+0x9a>
 80043d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043dc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80043e0:	f7fc f872 	bl	80004c8 <__aeabi_dmul>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043ec:	f7fb feb6 	bl	800015c <__adddf3>
 80043f0:	e9cd 0100 	strd	r0, r1, [sp]
 80043f4:	3601      	adds	r6, #1
 80043f6:	9b07      	ldr	r3, [sp, #28]
 80043f8:	3f08      	subs	r7, #8
 80043fa:	429e      	cmp	r6, r3
 80043fc:	ddec      	ble.n	80043d8 <__kernel_rem_pio2+0xa8>
 80043fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004402:	f108 0801 	add.w	r8, r8, #1
 8004406:	e8ea 2302 	strd	r2, r3, [sl], #8
 800440a:	3508      	adds	r5, #8
 800440c:	e7c6      	b.n	800439c <__kernel_rem_pio2+0x6c>
 800440e:	9b02      	ldr	r3, [sp, #8]
 8004410:	aa0c      	add	r2, sp, #48	; 0x30
 8004412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004416:	930b      	str	r3, [sp, #44]	; 0x2c
 8004418:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800441a:	9e02      	ldr	r6, [sp, #8]
 800441c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004420:	930a      	str	r3, [sp, #40]	; 0x28
 8004422:	ab98      	add	r3, sp, #608	; 0x260
 8004424:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004428:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800442c:	ab70      	add	r3, sp, #448	; 0x1c0
 800442e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004432:	46d0      	mov	r8, sl
 8004434:	46b1      	mov	r9, r6
 8004436:	af0c      	add	r7, sp, #48	; 0x30
 8004438:	9700      	str	r7, [sp, #0]
 800443a:	f1b9 0f00 	cmp.w	r9, #0
 800443e:	f1a8 0808 	sub.w	r8, r8, #8
 8004442:	dc71      	bgt.n	8004528 <__kernel_rem_pio2+0x1f8>
 8004444:	465a      	mov	r2, fp
 8004446:	4620      	mov	r0, r4
 8004448:	4629      	mov	r1, r5
 800444a:	f000 fd35 	bl	8004eb8 <scalbn>
 800444e:	2200      	movs	r2, #0
 8004450:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004454:	4604      	mov	r4, r0
 8004456:	460d      	mov	r5, r1
 8004458:	f7fc f836 	bl	80004c8 <__aeabi_dmul>
 800445c:	f000 fcac 	bl	8004db8 <floor>
 8004460:	2200      	movs	r2, #0
 8004462:	4b6e      	ldr	r3, [pc, #440]	; (800461c <__kernel_rem_pio2+0x2ec>)
 8004464:	f7fc f830 	bl	80004c8 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4620      	mov	r0, r4
 800446e:	4629      	mov	r1, r5
 8004470:	f7fb fe72 	bl	8000158 <__aeabi_dsub>
 8004474:	460d      	mov	r5, r1
 8004476:	4604      	mov	r4, r0
 8004478:	f7fc fac0 	bl	80009fc <__aeabi_d2iz>
 800447c:	9004      	str	r0, [sp, #16]
 800447e:	f7fb ffb9 	bl	80003f4 <__aeabi_i2d>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4620      	mov	r0, r4
 8004488:	4629      	mov	r1, r5
 800448a:	f7fb fe65 	bl	8000158 <__aeabi_dsub>
 800448e:	f1bb 0f00 	cmp.w	fp, #0
 8004492:	4680      	mov	r8, r0
 8004494:	4689      	mov	r9, r1
 8004496:	dd70      	ble.n	800457a <__kernel_rem_pio2+0x24a>
 8004498:	1e72      	subs	r2, r6, #1
 800449a:	ab0c      	add	r3, sp, #48	; 0x30
 800449c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80044a0:	9c04      	ldr	r4, [sp, #16]
 80044a2:	f1cb 0118 	rsb	r1, fp, #24
 80044a6:	fa40 f301 	asr.w	r3, r0, r1
 80044aa:	441c      	add	r4, r3
 80044ac:	408b      	lsls	r3, r1
 80044ae:	1ac0      	subs	r0, r0, r3
 80044b0:	ab0c      	add	r3, sp, #48	; 0x30
 80044b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80044b6:	f1cb 0317 	rsb	r3, fp, #23
 80044ba:	9404      	str	r4, [sp, #16]
 80044bc:	fa40 f303 	asr.w	r3, r0, r3
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	9b00      	ldr	r3, [sp, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd66      	ble.n	8004596 <__kernel_rem_pio2+0x266>
 80044c8:	2200      	movs	r2, #0
 80044ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80044ce:	4614      	mov	r4, r2
 80044d0:	9b04      	ldr	r3, [sp, #16]
 80044d2:	3301      	adds	r3, #1
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	4296      	cmp	r6, r2
 80044d8:	f300 80ac 	bgt.w	8004634 <__kernel_rem_pio2+0x304>
 80044dc:	f1bb 0f00 	cmp.w	fp, #0
 80044e0:	dd07      	ble.n	80044f2 <__kernel_rem_pio2+0x1c2>
 80044e2:	f1bb 0f01 	cmp.w	fp, #1
 80044e6:	f000 80b4 	beq.w	8004652 <__kernel_rem_pio2+0x322>
 80044ea:	f1bb 0f02 	cmp.w	fp, #2
 80044ee:	f000 80ba 	beq.w	8004666 <__kernel_rem_pio2+0x336>
 80044f2:	9b00      	ldr	r3, [sp, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d14e      	bne.n	8004596 <__kernel_rem_pio2+0x266>
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	2000      	movs	r0, #0
 80044fe:	4948      	ldr	r1, [pc, #288]	; (8004620 <__kernel_rem_pio2+0x2f0>)
 8004500:	f7fb fe2a 	bl	8000158 <__aeabi_dsub>
 8004504:	4680      	mov	r8, r0
 8004506:	4689      	mov	r9, r1
 8004508:	2c00      	cmp	r4, #0
 800450a:	d044      	beq.n	8004596 <__kernel_rem_pio2+0x266>
 800450c:	465a      	mov	r2, fp
 800450e:	2000      	movs	r0, #0
 8004510:	4943      	ldr	r1, [pc, #268]	; (8004620 <__kernel_rem_pio2+0x2f0>)
 8004512:	f000 fcd1 	bl	8004eb8 <scalbn>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4640      	mov	r0, r8
 800451c:	4649      	mov	r1, r9
 800451e:	f7fb fe1b 	bl	8000158 <__aeabi_dsub>
 8004522:	4680      	mov	r8, r0
 8004524:	4689      	mov	r9, r1
 8004526:	e036      	b.n	8004596 <__kernel_rem_pio2+0x266>
 8004528:	2200      	movs	r2, #0
 800452a:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <__kernel_rem_pio2+0x2f4>)
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	f7fb ffca 	bl	80004c8 <__aeabi_dmul>
 8004534:	f7fc fa62 	bl	80009fc <__aeabi_d2iz>
 8004538:	f7fb ff5c 	bl	80003f4 <__aeabi_i2d>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004544:	2200      	movs	r2, #0
 8004546:	4b38      	ldr	r3, [pc, #224]	; (8004628 <__kernel_rem_pio2+0x2f8>)
 8004548:	f7fb ffbe 	bl	80004c8 <__aeabi_dmul>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fb fe00 	bl	8000158 <__aeabi_dsub>
 8004558:	f7fc fa50 	bl	80009fc <__aeabi_d2iz>
 800455c:	9b00      	ldr	r3, [sp, #0]
 800455e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004562:	f843 0b04 	str.w	r0, [r3], #4
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800456c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004570:	f7fb fdf4 	bl	800015c <__adddf3>
 8004574:	4604      	mov	r4, r0
 8004576:	460d      	mov	r5, r1
 8004578:	e75f      	b.n	800443a <__kernel_rem_pio2+0x10a>
 800457a:	d105      	bne.n	8004588 <__kernel_rem_pio2+0x258>
 800457c:	1e73      	subs	r3, r6, #1
 800457e:	aa0c      	add	r2, sp, #48	; 0x30
 8004580:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004584:	15c3      	asrs	r3, r0, #23
 8004586:	e79b      	b.n	80044c0 <__kernel_rem_pio2+0x190>
 8004588:	2200      	movs	r2, #0
 800458a:	4b28      	ldr	r3, [pc, #160]	; (800462c <__kernel_rem_pio2+0x2fc>)
 800458c:	f7fc fa22 	bl	80009d4 <__aeabi_dcmpge>
 8004590:	2800      	cmp	r0, #0
 8004592:	d13e      	bne.n	8004612 <__kernel_rem_pio2+0x2e2>
 8004594:	9000      	str	r0, [sp, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	2300      	movs	r3, #0
 800459a:	4640      	mov	r0, r8
 800459c:	4649      	mov	r1, r9
 800459e:	f7fc f9fb 	bl	8000998 <__aeabi_dcmpeq>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	f000 80b1 	beq.w	800470a <__kernel_rem_pio2+0x3da>
 80045a8:	1e74      	subs	r4, r6, #1
 80045aa:	4623      	mov	r3, r4
 80045ac:	2200      	movs	r2, #0
 80045ae:	9902      	ldr	r1, [sp, #8]
 80045b0:	428b      	cmp	r3, r1
 80045b2:	da5f      	bge.n	8004674 <__kernel_rem_pio2+0x344>
 80045b4:	2a00      	cmp	r2, #0
 80045b6:	d074      	beq.n	80046a2 <__kernel_rem_pio2+0x372>
 80045b8:	ab0c      	add	r3, sp, #48	; 0x30
 80045ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80045be:	f1ab 0b18 	sub.w	fp, fp, #24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 809f 	beq.w	8004706 <__kernel_rem_pio2+0x3d6>
 80045c8:	465a      	mov	r2, fp
 80045ca:	2000      	movs	r0, #0
 80045cc:	4914      	ldr	r1, [pc, #80]	; (8004620 <__kernel_rem_pio2+0x2f0>)
 80045ce:	f000 fc73 	bl	8004eb8 <scalbn>
 80045d2:	46a2      	mov	sl, r4
 80045d4:	4606      	mov	r6, r0
 80045d6:	460f      	mov	r7, r1
 80045d8:	f04f 0800 	mov.w	r8, #0
 80045dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80045de:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004624 <__kernel_rem_pio2+0x2f4>
 80045e2:	00e5      	lsls	r5, r4, #3
 80045e4:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80045e8:	f1ba 0f00 	cmp.w	sl, #0
 80045ec:	f280 80c3 	bge.w	8004776 <__kernel_rem_pio2+0x446>
 80045f0:	4626      	mov	r6, r4
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	f2c0 80f5 	blt.w	80047e2 <__kernel_rem_pio2+0x4b2>
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <__kernel_rem_pio2+0x300>)
 80045fa:	f04f 0a00 	mov.w	sl, #0
 80045fe:	9307      	str	r3, [sp, #28]
 8004600:	ab70      	add	r3, sp, #448	; 0x1c0
 8004602:	f04f 0b00 	mov.w	fp, #0
 8004606:	f04f 0800 	mov.w	r8, #0
 800460a:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800460e:	1ba7      	subs	r7, r4, r6
 8004610:	e0db      	b.n	80047ca <__kernel_rem_pio2+0x49a>
 8004612:	2302      	movs	r3, #2
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	e757      	b.n	80044c8 <__kernel_rem_pio2+0x198>
 8004618:	080051c0 	.word	0x080051c0
 800461c:	40200000 	.word	0x40200000
 8004620:	3ff00000 	.word	0x3ff00000
 8004624:	3e700000 	.word	0x3e700000
 8004628:	41700000 	.word	0x41700000
 800462c:	3fe00000 	.word	0x3fe00000
 8004630:	08005180 	.word	0x08005180
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	b944      	cbnz	r4, 800464a <__kernel_rem_pio2+0x31a>
 8004638:	b11b      	cbz	r3, 8004642 <__kernel_rem_pio2+0x312>
 800463a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	2301      	movs	r3, #1
 8004642:	461c      	mov	r4, r3
 8004644:	3201      	adds	r2, #1
 8004646:	3704      	adds	r7, #4
 8004648:	e745      	b.n	80044d6 <__kernel_rem_pio2+0x1a6>
 800464a:	1acb      	subs	r3, r1, r3
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4623      	mov	r3, r4
 8004650:	e7f7      	b.n	8004642 <__kernel_rem_pio2+0x312>
 8004652:	1e72      	subs	r2, r6, #1
 8004654:	ab0c      	add	r3, sp, #48	; 0x30
 8004656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800465e:	a90c      	add	r1, sp, #48	; 0x30
 8004660:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004664:	e745      	b.n	80044f2 <__kernel_rem_pio2+0x1c2>
 8004666:	1e72      	subs	r2, r6, #1
 8004668:	ab0c      	add	r3, sp, #48	; 0x30
 800466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004672:	e7f4      	b.n	800465e <__kernel_rem_pio2+0x32e>
 8004674:	a90c      	add	r1, sp, #48	; 0x30
 8004676:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800467a:	3b01      	subs	r3, #1
 800467c:	430a      	orrs	r2, r1
 800467e:	e796      	b.n	80045ae <__kernel_rem_pio2+0x27e>
 8004680:	3401      	adds	r4, #1
 8004682:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004686:	2a00      	cmp	r2, #0
 8004688:	d0fa      	beq.n	8004680 <__kernel_rem_pio2+0x350>
 800468a:	9b08      	ldr	r3, [sp, #32]
 800468c:	f106 0801 	add.w	r8, r6, #1
 8004690:	18f5      	adds	r5, r6, r3
 8004692:	ab20      	add	r3, sp, #128	; 0x80
 8004694:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004698:	4434      	add	r4, r6
 800469a:	4544      	cmp	r4, r8
 800469c:	da04      	bge.n	80046a8 <__kernel_rem_pio2+0x378>
 800469e:	4626      	mov	r6, r4
 80046a0:	e6bf      	b.n	8004422 <__kernel_rem_pio2+0xf2>
 80046a2:	2401      	movs	r4, #1
 80046a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046a6:	e7ec      	b.n	8004682 <__kernel_rem_pio2+0x352>
 80046a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046aa:	f04f 0900 	mov.w	r9, #0
 80046ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80046b2:	f7fb fe9f 	bl	80003f4 <__aeabi_i2d>
 80046b6:	2600      	movs	r6, #0
 80046b8:	2700      	movs	r7, #0
 80046ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046bc:	e9c5 0100 	strd	r0, r1, [r5]
 80046c0:	3b08      	subs	r3, #8
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	9504      	str	r5, [sp, #16]
 80046c6:	9b07      	ldr	r3, [sp, #28]
 80046c8:	4599      	cmp	r9, r3
 80046ca:	dd05      	ble.n	80046d8 <__kernel_rem_pio2+0x3a8>
 80046cc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80046d0:	f108 0801 	add.w	r8, r8, #1
 80046d4:	3508      	adds	r5, #8
 80046d6:	e7e0      	b.n	800469a <__kernel_rem_pio2+0x36a>
 80046d8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80046dc:	9900      	ldr	r1, [sp, #0]
 80046de:	f109 0901 	add.w	r9, r9, #1
 80046e2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80046e6:	9100      	str	r1, [sp, #0]
 80046e8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80046ec:	f8cd c010 	str.w	ip, [sp, #16]
 80046f0:	f7fb feea 	bl	80004c8 <__aeabi_dmul>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4630      	mov	r0, r6
 80046fa:	4639      	mov	r1, r7
 80046fc:	f7fb fd2e 	bl	800015c <__adddf3>
 8004700:	4606      	mov	r6, r0
 8004702:	460f      	mov	r7, r1
 8004704:	e7df      	b.n	80046c6 <__kernel_rem_pio2+0x396>
 8004706:	3c01      	subs	r4, #1
 8004708:	e756      	b.n	80045b8 <__kernel_rem_pio2+0x288>
 800470a:	f1cb 0200 	rsb	r2, fp, #0
 800470e:	4640      	mov	r0, r8
 8004710:	4649      	mov	r1, r9
 8004712:	f000 fbd1 	bl	8004eb8 <scalbn>
 8004716:	2200      	movs	r2, #0
 8004718:	4ba4      	ldr	r3, [pc, #656]	; (80049ac <__kernel_rem_pio2+0x67c>)
 800471a:	4604      	mov	r4, r0
 800471c:	460d      	mov	r5, r1
 800471e:	f7fc f959 	bl	80009d4 <__aeabi_dcmpge>
 8004722:	b1f8      	cbz	r0, 8004764 <__kernel_rem_pio2+0x434>
 8004724:	2200      	movs	r2, #0
 8004726:	4ba2      	ldr	r3, [pc, #648]	; (80049b0 <__kernel_rem_pio2+0x680>)
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb fecc 	bl	80004c8 <__aeabi_dmul>
 8004730:	f7fc f964 	bl	80009fc <__aeabi_d2iz>
 8004734:	4607      	mov	r7, r0
 8004736:	f7fb fe5d 	bl	80003f4 <__aeabi_i2d>
 800473a:	2200      	movs	r2, #0
 800473c:	4b9b      	ldr	r3, [pc, #620]	; (80049ac <__kernel_rem_pio2+0x67c>)
 800473e:	f7fb fec3 	bl	80004c8 <__aeabi_dmul>
 8004742:	460b      	mov	r3, r1
 8004744:	4602      	mov	r2, r0
 8004746:	4629      	mov	r1, r5
 8004748:	4620      	mov	r0, r4
 800474a:	f7fb fd05 	bl	8000158 <__aeabi_dsub>
 800474e:	f7fc f955 	bl	80009fc <__aeabi_d2iz>
 8004752:	1c74      	adds	r4, r6, #1
 8004754:	ab0c      	add	r3, sp, #48	; 0x30
 8004756:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800475a:	f10b 0b18 	add.w	fp, fp, #24
 800475e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8004762:	e731      	b.n	80045c8 <__kernel_rem_pio2+0x298>
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fc f948 	bl	80009fc <__aeabi_d2iz>
 800476c:	ab0c      	add	r3, sp, #48	; 0x30
 800476e:	4634      	mov	r4, r6
 8004770:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004774:	e728      	b.n	80045c8 <__kernel_rem_pio2+0x298>
 8004776:	ab0c      	add	r3, sp, #48	; 0x30
 8004778:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800477c:	f7fb fe3a 	bl	80003f4 <__aeabi_i2d>
 8004780:	4632      	mov	r2, r6
 8004782:	463b      	mov	r3, r7
 8004784:	f7fb fea0 	bl	80004c8 <__aeabi_dmul>
 8004788:	4642      	mov	r2, r8
 800478a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800478e:	464b      	mov	r3, r9
 8004790:	4630      	mov	r0, r6
 8004792:	4639      	mov	r1, r7
 8004794:	f7fb fe98 	bl	80004c8 <__aeabi_dmul>
 8004798:	f10a 3aff 	add.w	sl, sl, #4294967295
 800479c:	4606      	mov	r6, r0
 800479e:	460f      	mov	r7, r1
 80047a0:	e722      	b.n	80045e8 <__kernel_rem_pio2+0x2b8>
 80047a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80047a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80047aa:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80047ae:	f8cd c01c 	str.w	ip, [sp, #28]
 80047b2:	f7fb fe89 	bl	80004c8 <__aeabi_dmul>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4650      	mov	r0, sl
 80047bc:	4659      	mov	r1, fp
 80047be:	f7fb fccd 	bl	800015c <__adddf3>
 80047c2:	4682      	mov	sl, r0
 80047c4:	468b      	mov	fp, r1
 80047c6:	f108 0801 	add.w	r8, r8, #1
 80047ca:	9b02      	ldr	r3, [sp, #8]
 80047cc:	4598      	cmp	r8, r3
 80047ce:	dc01      	bgt.n	80047d4 <__kernel_rem_pio2+0x4a4>
 80047d0:	45b8      	cmp	r8, r7
 80047d2:	dde6      	ble.n	80047a2 <__kernel_rem_pio2+0x472>
 80047d4:	ab48      	add	r3, sp, #288	; 0x120
 80047d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80047da:	e9c7 ab00 	strd	sl, fp, [r7]
 80047de:	3e01      	subs	r6, #1
 80047e0:	e707      	b.n	80045f2 <__kernel_rem_pio2+0x2c2>
 80047e2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	dc09      	bgt.n	80047fc <__kernel_rem_pio2+0x4cc>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dc32      	bgt.n	8004852 <__kernel_rem_pio2+0x522>
 80047ec:	d05a      	beq.n	80048a4 <__kernel_rem_pio2+0x574>
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	f003 0007 	and.w	r0, r3, #7
 80047f4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80047f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d1f5      	bne.n	80047ee <__kernel_rem_pio2+0x4be>
 8004802:	ab48      	add	r3, sp, #288	; 0x120
 8004804:	441d      	add	r5, r3
 8004806:	46aa      	mov	sl, r5
 8004808:	46a3      	mov	fp, r4
 800480a:	f1bb 0f00 	cmp.w	fp, #0
 800480e:	dc76      	bgt.n	80048fe <__kernel_rem_pio2+0x5ce>
 8004810:	46aa      	mov	sl, r5
 8004812:	46a3      	mov	fp, r4
 8004814:	f1bb 0f01 	cmp.w	fp, #1
 8004818:	f300 8090 	bgt.w	800493c <__kernel_rem_pio2+0x60c>
 800481c:	2700      	movs	r7, #0
 800481e:	463e      	mov	r6, r7
 8004820:	2c01      	cmp	r4, #1
 8004822:	f300 80aa 	bgt.w	800497a <__kernel_rem_pio2+0x64a>
 8004826:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800482a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800482e:	9b00      	ldr	r3, [sp, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 80ac 	bne.w	800498e <__kernel_rem_pio2+0x65e>
 8004836:	4603      	mov	r3, r0
 8004838:	462a      	mov	r2, r5
 800483a:	9806      	ldr	r0, [sp, #24]
 800483c:	e9c0 2300 	strd	r2, r3, [r0]
 8004840:	4622      	mov	r2, r4
 8004842:	460b      	mov	r3, r1
 8004844:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004848:	463a      	mov	r2, r7
 800484a:	4633      	mov	r3, r6
 800484c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004850:	e7cd      	b.n	80047ee <__kernel_rem_pio2+0x4be>
 8004852:	2000      	movs	r0, #0
 8004854:	46a0      	mov	r8, r4
 8004856:	4601      	mov	r1, r0
 8004858:	ab48      	add	r3, sp, #288	; 0x120
 800485a:	441d      	add	r5, r3
 800485c:	f1b8 0f00 	cmp.w	r8, #0
 8004860:	da3a      	bge.n	80048d8 <__kernel_rem_pio2+0x5a8>
 8004862:	9b00      	ldr	r3, [sp, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d03e      	beq.n	80048e6 <__kernel_rem_pio2+0x5b6>
 8004868:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800486c:	4602      	mov	r2, r0
 800486e:	462b      	mov	r3, r5
 8004870:	9d06      	ldr	r5, [sp, #24]
 8004872:	2601      	movs	r6, #1
 8004874:	e9c5 2300 	strd	r2, r3, [r5]
 8004878:	460b      	mov	r3, r1
 800487a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800487e:	f7fb fc6b 	bl	8000158 <__aeabi_dsub>
 8004882:	4684      	mov	ip, r0
 8004884:	460f      	mov	r7, r1
 8004886:	ad48      	add	r5, sp, #288	; 0x120
 8004888:	42b4      	cmp	r4, r6
 800488a:	f105 0508 	add.w	r5, r5, #8
 800488e:	da2c      	bge.n	80048ea <__kernel_rem_pio2+0x5ba>
 8004890:	9b00      	ldr	r3, [sp, #0]
 8004892:	b10b      	cbz	r3, 8004898 <__kernel_rem_pio2+0x568>
 8004894:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004898:	4662      	mov	r2, ip
 800489a:	463b      	mov	r3, r7
 800489c:	9906      	ldr	r1, [sp, #24]
 800489e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80048a2:	e7a4      	b.n	80047ee <__kernel_rem_pio2+0x4be>
 80048a4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80048a6:	ab48      	add	r3, sp, #288	; 0x120
 80048a8:	4637      	mov	r7, r6
 80048aa:	441d      	add	r5, r3
 80048ac:	2c00      	cmp	r4, #0
 80048ae:	da09      	bge.n	80048c4 <__kernel_rem_pio2+0x594>
 80048b0:	9b00      	ldr	r3, [sp, #0]
 80048b2:	b10b      	cbz	r3, 80048b8 <__kernel_rem_pio2+0x588>
 80048b4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80048b8:	4632      	mov	r2, r6
 80048ba:	463b      	mov	r3, r7
 80048bc:	9906      	ldr	r1, [sp, #24]
 80048be:	e9c1 2300 	strd	r2, r3, [r1]
 80048c2:	e794      	b.n	80047ee <__kernel_rem_pio2+0x4be>
 80048c4:	4630      	mov	r0, r6
 80048c6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fb fc46 	bl	800015c <__adddf3>
 80048d0:	3c01      	subs	r4, #1
 80048d2:	4606      	mov	r6, r0
 80048d4:	460f      	mov	r7, r1
 80048d6:	e7e9      	b.n	80048ac <__kernel_rem_pio2+0x57c>
 80048d8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80048dc:	f7fb fc3e 	bl	800015c <__adddf3>
 80048e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80048e4:	e7ba      	b.n	800485c <__kernel_rem_pio2+0x52c>
 80048e6:	460d      	mov	r5, r1
 80048e8:	e7c0      	b.n	800486c <__kernel_rem_pio2+0x53c>
 80048ea:	4660      	mov	r0, ip
 80048ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048f0:	4639      	mov	r1, r7
 80048f2:	f7fb fc33 	bl	800015c <__adddf3>
 80048f6:	3601      	adds	r6, #1
 80048f8:	4684      	mov	ip, r0
 80048fa:	460f      	mov	r7, r1
 80048fc:	e7c4      	b.n	8004888 <__kernel_rem_pio2+0x558>
 80048fe:	e9da 6700 	ldrd	r6, r7, [sl]
 8004902:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004906:	4632      	mov	r2, r6
 8004908:	463b      	mov	r3, r7
 800490a:	4640      	mov	r0, r8
 800490c:	4649      	mov	r1, r9
 800490e:	f7fb fc25 	bl	800015c <__adddf3>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800491a:	4640      	mov	r0, r8
 800491c:	4649      	mov	r1, r9
 800491e:	f7fb fc1b 	bl	8000158 <__aeabi_dsub>
 8004922:	4632      	mov	r2, r6
 8004924:	463b      	mov	r3, r7
 8004926:	f7fb fc19 	bl	800015c <__adddf3>
 800492a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800492e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004932:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004936:	e9ca 2300 	strd	r2, r3, [sl]
 800493a:	e766      	b.n	800480a <__kernel_rem_pio2+0x4da>
 800493c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004940:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	4630      	mov	r0, r6
 800494a:	4639      	mov	r1, r7
 800494c:	f7fb fc06 	bl	800015c <__adddf3>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	f7fb fbfc 	bl	8000158 <__aeabi_dsub>
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	f7fb fbfa 	bl	800015c <__adddf3>
 8004968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800496c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004970:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004974:	e9ca 2300 	strd	r2, r3, [sl]
 8004978:	e74c      	b.n	8004814 <__kernel_rem_pio2+0x4e4>
 800497a:	4638      	mov	r0, r7
 800497c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004980:	4631      	mov	r1, r6
 8004982:	f7fb fbeb 	bl	800015c <__adddf3>
 8004986:	3c01      	subs	r4, #1
 8004988:	4607      	mov	r7, r0
 800498a:	460e      	mov	r6, r1
 800498c:	e748      	b.n	8004820 <__kernel_rem_pio2+0x4f0>
 800498e:	9b06      	ldr	r3, [sp, #24]
 8004990:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004994:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004998:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800499c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80049a0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80049a4:	601d      	str	r5, [r3, #0]
 80049a6:	615e      	str	r6, [r3, #20]
 80049a8:	e721      	b.n	80047ee <__kernel_rem_pio2+0x4be>
 80049aa:	bf00      	nop
 80049ac:	41700000 	.word	0x41700000
 80049b0:	3e700000 	.word	0x3e700000
 80049b4:	00000000 	.word	0x00000000

080049b8 <__kernel_tan>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	b08b      	sub	sp, #44	; 0x2c
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	4bd9      	ldr	r3, [pc, #868]	; (8004d28 <__kernel_tan+0x370>)
 80049c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80049c6:	429e      	cmp	r6, r3
 80049c8:	4604      	mov	r4, r0
 80049ca:	460d      	mov	r5, r1
 80049cc:	4682      	mov	sl, r0
 80049ce:	468b      	mov	fp, r1
 80049d0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80049d2:	9202      	str	r2, [sp, #8]
 80049d4:	9107      	str	r1, [sp, #28]
 80049d6:	dc58      	bgt.n	8004a8a <__kernel_tan+0xd2>
 80049d8:	f7fc f810 	bl	80009fc <__aeabi_d2iz>
 80049dc:	4605      	mov	r5, r0
 80049de:	2800      	cmp	r0, #0
 80049e0:	d178      	bne.n	8004ad4 <__kernel_tan+0x11c>
 80049e2:	1c7b      	adds	r3, r7, #1
 80049e4:	4323      	orrs	r3, r4
 80049e6:	4333      	orrs	r3, r6
 80049e8:	d110      	bne.n	8004a0c <__kernel_tan+0x54>
 80049ea:	4620      	mov	r0, r4
 80049ec:	4659      	mov	r1, fp
 80049ee:	f000 f9df 	bl	8004db0 <fabs>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	2000      	movs	r0, #0
 80049f8:	49cc      	ldr	r1, [pc, #816]	; (8004d2c <__kernel_tan+0x374>)
 80049fa:	f7fb fe8f 	bl	800071c <__aeabi_ddiv>
 80049fe:	4682      	mov	sl, r0
 8004a00:	468b      	mov	fp, r1
 8004a02:	4650      	mov	r0, sl
 8004a04:	4659      	mov	r1, fp
 8004a06:	b00b      	add	sp, #44	; 0x2c
 8004a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0c:	2f01      	cmp	r7, #1
 8004a0e:	d0f8      	beq.n	8004a02 <__kernel_tan+0x4a>
 8004a10:	4620      	mov	r0, r4
 8004a12:	4659      	mov	r1, fp
 8004a14:	9a02      	ldr	r2, [sp, #8]
 8004a16:	9b00      	ldr	r3, [sp, #0]
 8004a18:	f7fb fba0 	bl	800015c <__adddf3>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	460f      	mov	r7, r1
 8004a22:	2000      	movs	r0, #0
 8004a24:	49c2      	ldr	r1, [pc, #776]	; (8004d30 <__kernel_tan+0x378>)
 8004a26:	f7fb fe79 	bl	800071c <__aeabi_ddiv>
 8004a2a:	462e      	mov	r6, r5
 8004a2c:	4689      	mov	r9, r1
 8004a2e:	4652      	mov	r2, sl
 8004a30:	465b      	mov	r3, fp
 8004a32:	4680      	mov	r8, r0
 8004a34:	462c      	mov	r4, r5
 8004a36:	4630      	mov	r0, r6
 8004a38:	460d      	mov	r5, r1
 8004a3a:	4639      	mov	r1, r7
 8004a3c:	f7fb fb8c 	bl	8000158 <__aeabi_dsub>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	9802      	ldr	r0, [sp, #8]
 8004a46:	9900      	ldr	r1, [sp, #0]
 8004a48:	f7fb fb86 	bl	8000158 <__aeabi_dsub>
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	464b      	mov	r3, r9
 8004a50:	f7fb fd3a 	bl	80004c8 <__aeabi_dmul>
 8004a54:	4632      	mov	r2, r6
 8004a56:	4682      	mov	sl, r0
 8004a58:	468b      	mov	fp, r1
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	4639      	mov	r1, r7
 8004a60:	f7fb fd32 	bl	80004c8 <__aeabi_dmul>
 8004a64:	2200      	movs	r2, #0
 8004a66:	4bb1      	ldr	r3, [pc, #708]	; (8004d2c <__kernel_tan+0x374>)
 8004a68:	f7fb fb78 	bl	800015c <__adddf3>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4650      	mov	r0, sl
 8004a72:	4659      	mov	r1, fp
 8004a74:	f7fb fb72 	bl	800015c <__adddf3>
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	f7fb fd24 	bl	80004c8 <__aeabi_dmul>
 8004a80:	4622      	mov	r2, r4
 8004a82:	462b      	mov	r3, r5
 8004a84:	f7fb fb6a 	bl	800015c <__adddf3>
 8004a88:	e7b9      	b.n	80049fe <__kernel_tan+0x46>
 8004a8a:	4baa      	ldr	r3, [pc, #680]	; (8004d34 <__kernel_tan+0x37c>)
 8004a8c:	429e      	cmp	r6, r3
 8004a8e:	dd21      	ble.n	8004ad4 <__kernel_tan+0x11c>
 8004a90:	2900      	cmp	r1, #0
 8004a92:	da06      	bge.n	8004aa2 <__kernel_tan+0xea>
 8004a94:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004a98:	469b      	mov	fp, r3
 8004a9a:	9b00      	ldr	r3, [sp, #0]
 8004a9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4652      	mov	r2, sl
 8004aa4:	a182      	add	r1, pc, #520	; (adr r1, 8004cb0 <__kernel_tan+0x2f8>)
 8004aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aaa:	465b      	mov	r3, fp
 8004aac:	f7fb fb54 	bl	8000158 <__aeabi_dsub>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	460d      	mov	r5, r1
 8004ab4:	a180      	add	r1, pc, #512	; (adr r1, 8004cb8 <__kernel_tan+0x300>)
 8004ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aba:	9a02      	ldr	r2, [sp, #8]
 8004abc:	9b00      	ldr	r3, [sp, #0]
 8004abe:	f7fb fb4b 	bl	8000158 <__aeabi_dsub>
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	f7fb fb49 	bl	800015c <__adddf3>
 8004aca:	2300      	movs	r3, #0
 8004acc:	4682      	mov	sl, r0
 8004ace:	468b      	mov	fp, r1
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4652      	mov	r2, sl
 8004ad6:	465b      	mov	r3, fp
 8004ad8:	4650      	mov	r0, sl
 8004ada:	4659      	mov	r1, fp
 8004adc:	f7fb fcf4 	bl	80004c8 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4680      	mov	r8, r0
 8004ae6:	4689      	mov	r9, r1
 8004ae8:	f7fb fcee 	bl	80004c8 <__aeabi_dmul>
 8004aec:	4642      	mov	r2, r8
 8004aee:	4604      	mov	r4, r0
 8004af0:	460d      	mov	r5, r1
 8004af2:	464b      	mov	r3, r9
 8004af4:	4650      	mov	r0, sl
 8004af6:	4659      	mov	r1, fp
 8004af8:	f7fb fce6 	bl	80004c8 <__aeabi_dmul>
 8004afc:	a370      	add	r3, pc, #448	; (adr r3, 8004cc0 <__kernel_tan+0x308>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b06:	4620      	mov	r0, r4
 8004b08:	4629      	mov	r1, r5
 8004b0a:	f7fb fcdd 	bl	80004c8 <__aeabi_dmul>
 8004b0e:	a36e      	add	r3, pc, #440	; (adr r3, 8004cc8 <__kernel_tan+0x310>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fb fb22 	bl	800015c <__adddf3>
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	f7fb fcd4 	bl	80004c8 <__aeabi_dmul>
 8004b20:	a36b      	add	r3, pc, #428	; (adr r3, 8004cd0 <__kernel_tan+0x318>)
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f7fb fb19 	bl	800015c <__adddf3>
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	f7fb fccb 	bl	80004c8 <__aeabi_dmul>
 8004b32:	a369      	add	r3, pc, #420	; (adr r3, 8004cd8 <__kernel_tan+0x320>)
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f7fb fb10 	bl	800015c <__adddf3>
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	462b      	mov	r3, r5
 8004b40:	f7fb fcc2 	bl	80004c8 <__aeabi_dmul>
 8004b44:	a366      	add	r3, pc, #408	; (adr r3, 8004ce0 <__kernel_tan+0x328>)
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	f7fb fb07 	bl	800015c <__adddf3>
 8004b4e:	4622      	mov	r2, r4
 8004b50:	462b      	mov	r3, r5
 8004b52:	f7fb fcb9 	bl	80004c8 <__aeabi_dmul>
 8004b56:	a364      	add	r3, pc, #400	; (adr r3, 8004ce8 <__kernel_tan+0x330>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f7fb fafe 	bl	800015c <__adddf3>
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	f7fb fcb0 	bl	80004c8 <__aeabi_dmul>
 8004b68:	a361      	add	r3, pc, #388	; (adr r3, 8004cf0 <__kernel_tan+0x338>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb fca7 	bl	80004c8 <__aeabi_dmul>
 8004b7a:	a35f      	add	r3, pc, #380	; (adr r3, 8004cf8 <__kernel_tan+0x340>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb faec 	bl	800015c <__adddf3>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	f7fb fc9e 	bl	80004c8 <__aeabi_dmul>
 8004b8c:	a35c      	add	r3, pc, #368	; (adr r3, 8004d00 <__kernel_tan+0x348>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fae3 	bl	800015c <__adddf3>
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f7fb fc95 	bl	80004c8 <__aeabi_dmul>
 8004b9e:	a35a      	add	r3, pc, #360	; (adr r3, 8004d08 <__kernel_tan+0x350>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fada 	bl	800015c <__adddf3>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	f7fb fc8c 	bl	80004c8 <__aeabi_dmul>
 8004bb0:	a357      	add	r3, pc, #348	; (adr r3, 8004d10 <__kernel_tan+0x358>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fad1 	bl	800015c <__adddf3>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fc83 	bl	80004c8 <__aeabi_dmul>
 8004bc2:	a355      	add	r3, pc, #340	; (adr r3, 8004d18 <__kernel_tan+0x360>)
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f7fb fac8 	bl	800015c <__adddf3>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004bd4:	f7fb fac2 	bl	800015c <__adddf3>
 8004bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bdc:	f7fb fc74 	bl	80004c8 <__aeabi_dmul>
 8004be0:	9a02      	ldr	r2, [sp, #8]
 8004be2:	9b00      	ldr	r3, [sp, #0]
 8004be4:	f7fb faba 	bl	800015c <__adddf3>
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	f7fb fc6c 	bl	80004c8 <__aeabi_dmul>
 8004bf0:	9a02      	ldr	r2, [sp, #8]
 8004bf2:	9b00      	ldr	r3, [sp, #0]
 8004bf4:	f7fb fab2 	bl	800015c <__adddf3>
 8004bf8:	a349      	add	r3, pc, #292	; (adr r3, 8004d20 <__kernel_tan+0x368>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	4604      	mov	r4, r0
 8004c00:	460d      	mov	r5, r1
 8004c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c06:	f7fb fc5f 	bl	80004c8 <__aeabi_dmul>
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	f7fb faa5 	bl	800015c <__adddf3>
 8004c12:	460b      	mov	r3, r1
 8004c14:	e9cd 0100 	strd	r0, r1, [sp]
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4659      	mov	r1, fp
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	f7fb fa9d 	bl	800015c <__adddf3>
 8004c22:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <__kernel_tan+0x37c>)
 8004c24:	4604      	mov	r4, r0
 8004c26:	429e      	cmp	r6, r3
 8004c28:	460d      	mov	r5, r1
 8004c2a:	f340 8085 	ble.w	8004d38 <__kernel_tan+0x380>
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f7fb fbe0 	bl	80003f4 <__aeabi_i2d>
 8004c34:	4622      	mov	r2, r4
 8004c36:	4680      	mov	r8, r0
 8004c38:	4689      	mov	r9, r1
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	4629      	mov	r1, r5
 8004c40:	f7fb fc42 	bl	80004c8 <__aeabi_dmul>
 8004c44:	4642      	mov	r2, r8
 8004c46:	4606      	mov	r6, r0
 8004c48:	460f      	mov	r7, r1
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f7fb fa84 	bl	800015c <__adddf3>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4630      	mov	r0, r6
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	f7fb fd5e 	bl	800071c <__aeabi_ddiv>
 8004c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c64:	f7fb fa78 	bl	8000158 <__aeabi_dsub>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4650      	mov	r0, sl
 8004c6e:	4659      	mov	r1, fp
 8004c70:	f7fb fa72 	bl	8000158 <__aeabi_dsub>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	f7fb fa70 	bl	800015c <__adddf3>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4640      	mov	r0, r8
 8004c82:	4649      	mov	r1, r9
 8004c84:	f7fb fa68 	bl	8000158 <__aeabi_dsub>
 8004c88:	9b07      	ldr	r3, [sp, #28]
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	179b      	asrs	r3, r3, #30
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	f1c3 0001 	rsb	r0, r3, #1
 8004c96:	460d      	mov	r5, r1
 8004c98:	f7fb fbac 	bl	80003f4 <__aeabi_i2d>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7fb fc10 	bl	80004c8 <__aeabi_dmul>
 8004ca8:	e6a9      	b.n	80049fe <__kernel_tan+0x46>
 8004caa:	bf00      	nop
 8004cac:	f3af 8000 	nop.w
 8004cb0:	54442d18 	.word	0x54442d18
 8004cb4:	3fe921fb 	.word	0x3fe921fb
 8004cb8:	33145c07 	.word	0x33145c07
 8004cbc:	3c81a626 	.word	0x3c81a626
 8004cc0:	74bf7ad4 	.word	0x74bf7ad4
 8004cc4:	3efb2a70 	.word	0x3efb2a70
 8004cc8:	32f0a7e9 	.word	0x32f0a7e9
 8004ccc:	3f12b80f 	.word	0x3f12b80f
 8004cd0:	1a8d1068 	.word	0x1a8d1068
 8004cd4:	3f3026f7 	.word	0x3f3026f7
 8004cd8:	fee08315 	.word	0xfee08315
 8004cdc:	3f57dbc8 	.word	0x3f57dbc8
 8004ce0:	e96e8493 	.word	0xe96e8493
 8004ce4:	3f8226e3 	.word	0x3f8226e3
 8004ce8:	1bb341fe 	.word	0x1bb341fe
 8004cec:	3faba1ba 	.word	0x3faba1ba
 8004cf0:	db605373 	.word	0xdb605373
 8004cf4:	bef375cb 	.word	0xbef375cb
 8004cf8:	a03792a6 	.word	0xa03792a6
 8004cfc:	3f147e88 	.word	0x3f147e88
 8004d00:	f2f26501 	.word	0xf2f26501
 8004d04:	3f4344d8 	.word	0x3f4344d8
 8004d08:	c9560328 	.word	0xc9560328
 8004d0c:	3f6d6d22 	.word	0x3f6d6d22
 8004d10:	8406d637 	.word	0x8406d637
 8004d14:	3f9664f4 	.word	0x3f9664f4
 8004d18:	1110fe7a 	.word	0x1110fe7a
 8004d1c:	3fc11111 	.word	0x3fc11111
 8004d20:	55555563 	.word	0x55555563
 8004d24:	3fd55555 	.word	0x3fd55555
 8004d28:	3e2fffff 	.word	0x3e2fffff
 8004d2c:	3ff00000 	.word	0x3ff00000
 8004d30:	bff00000 	.word	0xbff00000
 8004d34:	3fe59427 	.word	0x3fe59427
 8004d38:	2f01      	cmp	r7, #1
 8004d3a:	d031      	beq.n	8004da0 <__kernel_tan+0x3e8>
 8004d3c:	460f      	mov	r7, r1
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	2000      	movs	r0, #0
 8004d44:	4918      	ldr	r1, [pc, #96]	; (8004da8 <__kernel_tan+0x3f0>)
 8004d46:	f7fb fce9 	bl	800071c <__aeabi_ddiv>
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d54:	4652      	mov	r2, sl
 8004d56:	465b      	mov	r3, fp
 8004d58:	4630      	mov	r0, r6
 8004d5a:	4639      	mov	r1, r7
 8004d5c:	f7fb f9fc 	bl	8000158 <__aeabi_dsub>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d68:	f7fb f9f6 	bl	8000158 <__aeabi_dsub>
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	462b      	mov	r3, r5
 8004d70:	f7fb fbaa 	bl	80004c8 <__aeabi_dmul>
 8004d74:	4632      	mov	r2, r6
 8004d76:	4682      	mov	sl, r0
 8004d78:	468b      	mov	fp, r1
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	4639      	mov	r1, r7
 8004d80:	f7fb fba2 	bl	80004c8 <__aeabi_dmul>
 8004d84:	2200      	movs	r2, #0
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <__kernel_tan+0x3f4>)
 8004d88:	f7fb f9e8 	bl	800015c <__adddf3>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4650      	mov	r0, sl
 8004d92:	4659      	mov	r1, fp
 8004d94:	f7fb f9e2 	bl	800015c <__adddf3>
 8004d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d9c:	4634      	mov	r4, r6
 8004d9e:	e66d      	b.n	8004a7c <__kernel_tan+0xc4>
 8004da0:	4682      	mov	sl, r0
 8004da2:	468b      	mov	fp, r1
 8004da4:	e62d      	b.n	8004a02 <__kernel_tan+0x4a>
 8004da6:	bf00      	nop
 8004da8:	bff00000 	.word	0xbff00000
 8004dac:	3ff00000 	.word	0x3ff00000

08004db0 <fabs>:
 8004db0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004db4:	4770      	bx	lr
	...

08004db8 <floor>:
 8004db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dbc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004dc0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004dc4:	2e13      	cmp	r6, #19
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4607      	mov	r7, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	4605      	mov	r5, r0
 8004dd0:	dc33      	bgt.n	8004e3a <floor+0x82>
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	da14      	bge.n	8004e00 <floor+0x48>
 8004dd6:	a334      	add	r3, pc, #208	; (adr r3, 8004ea8 <floor+0xf0>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb f9be 	bl	800015c <__adddf3>
 8004de0:	2200      	movs	r2, #0
 8004de2:	2300      	movs	r3, #0
 8004de4:	f7fb fe00 	bl	80009e8 <__aeabi_dcmpgt>
 8004de8:	b138      	cbz	r0, 8004dfa <floor+0x42>
 8004dea:	2c00      	cmp	r4, #0
 8004dec:	da58      	bge.n	8004ea0 <floor+0xe8>
 8004dee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004df2:	431d      	orrs	r5, r3
 8004df4:	d001      	beq.n	8004dfa <floor+0x42>
 8004df6:	2500      	movs	r5, #0
 8004df8:	4c2d      	ldr	r4, [pc, #180]	; (8004eb0 <floor+0xf8>)
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	462f      	mov	r7, r5
 8004dfe:	e025      	b.n	8004e4c <floor+0x94>
 8004e00:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <floor+0xfc>)
 8004e02:	fa42 f806 	asr.w	r8, r2, r6
 8004e06:	ea01 0208 	and.w	r2, r1, r8
 8004e0a:	4302      	orrs	r2, r0
 8004e0c:	d01e      	beq.n	8004e4c <floor+0x94>
 8004e0e:	a326      	add	r3, pc, #152	; (adr r3, 8004ea8 <floor+0xf0>)
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f7fb f9a2 	bl	800015c <__adddf3>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f7fb fde4 	bl	80009e8 <__aeabi_dcmpgt>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d0ea      	beq.n	8004dfa <floor+0x42>
 8004e24:	2c00      	cmp	r4, #0
 8004e26:	bfbe      	ittt	lt
 8004e28:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004e2c:	fa43 f606 	asrlt.w	r6, r3, r6
 8004e30:	19a4      	addlt	r4, r4, r6
 8004e32:	2500      	movs	r5, #0
 8004e34:	ea24 0408 	bic.w	r4, r4, r8
 8004e38:	e7df      	b.n	8004dfa <floor+0x42>
 8004e3a:	2e33      	cmp	r6, #51	; 0x33
 8004e3c:	dd0a      	ble.n	8004e54 <floor+0x9c>
 8004e3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004e42:	d103      	bne.n	8004e4c <floor+0x94>
 8004e44:	f7fb f98a 	bl	800015c <__adddf3>
 8004e48:	4607      	mov	r7, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	4619      	mov	r1, r3
 8004e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e54:	f04f 32ff 	mov.w	r2, #4294967295
 8004e58:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004e5c:	fa22 f808 	lsr.w	r8, r2, r8
 8004e60:	ea18 0f00 	tst.w	r8, r0
 8004e64:	d0f2      	beq.n	8004e4c <floor+0x94>
 8004e66:	a310      	add	r3, pc, #64	; (adr r3, 8004ea8 <floor+0xf0>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb f976 	bl	800015c <__adddf3>
 8004e70:	2200      	movs	r2, #0
 8004e72:	2300      	movs	r3, #0
 8004e74:	f7fb fdb8 	bl	80009e8 <__aeabi_dcmpgt>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0be      	beq.n	8004dfa <floor+0x42>
 8004e7c:	2c00      	cmp	r4, #0
 8004e7e:	da02      	bge.n	8004e86 <floor+0xce>
 8004e80:	2e14      	cmp	r6, #20
 8004e82:	d103      	bne.n	8004e8c <floor+0xd4>
 8004e84:	3401      	adds	r4, #1
 8004e86:	ea25 0508 	bic.w	r5, r5, r8
 8004e8a:	e7b6      	b.n	8004dfa <floor+0x42>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004e92:	fa03 f606 	lsl.w	r6, r3, r6
 8004e96:	4435      	add	r5, r6
 8004e98:	42bd      	cmp	r5, r7
 8004e9a:	bf38      	it	cc
 8004e9c:	18e4      	addcc	r4, r4, r3
 8004e9e:	e7f2      	b.n	8004e86 <floor+0xce>
 8004ea0:	2500      	movs	r5, #0
 8004ea2:	462c      	mov	r4, r5
 8004ea4:	e7a9      	b.n	8004dfa <floor+0x42>
 8004ea6:	bf00      	nop
 8004ea8:	8800759c 	.word	0x8800759c
 8004eac:	7e37e43c 	.word	0x7e37e43c
 8004eb0:	bff00000 	.word	0xbff00000
 8004eb4:	000fffff 	.word	0x000fffff

08004eb8 <scalbn>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	4617      	mov	r7, r2
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	b996      	cbnz	r6, 8004eee <scalbn+0x36>
 8004ec8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ecc:	4303      	orrs	r3, r0
 8004ece:	d039      	beq.n	8004f44 <scalbn+0x8c>
 8004ed0:	4b33      	ldr	r3, [pc, #204]	; (8004fa0 <scalbn+0xe8>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f7fb faf8 	bl	80004c8 <__aeabi_dmul>
 8004ed8:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <scalbn+0xec>)
 8004eda:	4604      	mov	r4, r0
 8004edc:	429f      	cmp	r7, r3
 8004ede:	460d      	mov	r5, r1
 8004ee0:	da0f      	bge.n	8004f02 <scalbn+0x4a>
 8004ee2:	a32b      	add	r3, pc, #172	; (adr r3, 8004f90 <scalbn+0xd8>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f7fb faee 	bl	80004c8 <__aeabi_dmul>
 8004eec:	e006      	b.n	8004efc <scalbn+0x44>
 8004eee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004ef2:	4296      	cmp	r6, r2
 8004ef4:	d10a      	bne.n	8004f0c <scalbn+0x54>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	f7fb f930 	bl	800015c <__adddf3>
 8004efc:	4604      	mov	r4, r0
 8004efe:	460d      	mov	r5, r1
 8004f00:	e020      	b.n	8004f44 <scalbn+0x8c>
 8004f02:	460b      	mov	r3, r1
 8004f04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004f08:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004f0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004f10:	19b9      	adds	r1, r7, r6
 8004f12:	4291      	cmp	r1, r2
 8004f14:	dd0e      	ble.n	8004f34 <scalbn+0x7c>
 8004f16:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004f1a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004f1e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004f22:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004f26:	4820      	ldr	r0, [pc, #128]	; (8004fa8 <scalbn+0xf0>)
 8004f28:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004f2c:	a31a      	add	r3, pc, #104	; (adr r3, 8004f98 <scalbn+0xe0>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	e7d9      	b.n	8004ee8 <scalbn+0x30>
 8004f34:	2900      	cmp	r1, #0
 8004f36:	dd08      	ble.n	8004f4a <scalbn+0x92>
 8004f38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f4a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004f4e:	da12      	bge.n	8004f76 <scalbn+0xbe>
 8004f50:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004f54:	429f      	cmp	r7, r3
 8004f56:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004f5a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8004f5e:	dcdc      	bgt.n	8004f1a <scalbn+0x62>
 8004f60:	a30b      	add	r3, pc, #44	; (adr r3, 8004f90 <scalbn+0xd8>)
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004f6a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004f6e:	480f      	ldr	r0, [pc, #60]	; (8004fac <scalbn+0xf4>)
 8004f70:	f041 011f 	orr.w	r1, r1, #31
 8004f74:	e7b8      	b.n	8004ee8 <scalbn+0x30>
 8004f76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f7a:	3136      	adds	r1, #54	; 0x36
 8004f7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004f84:	4620      	mov	r0, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <scalbn+0xf8>)
 8004f8c:	e7ac      	b.n	8004ee8 <scalbn+0x30>
 8004f8e:	bf00      	nop
 8004f90:	c2f8f359 	.word	0xc2f8f359
 8004f94:	01a56e1f 	.word	0x01a56e1f
 8004f98:	8800759c 	.word	0x8800759c
 8004f9c:	7e37e43c 	.word	0x7e37e43c
 8004fa0:	43500000 	.word	0x43500000
 8004fa4:	ffff3cb0 	.word	0xffff3cb0
 8004fa8:	8800759c 	.word	0x8800759c
 8004fac:	c2f8f359 	.word	0xc2f8f359
 8004fb0:	3c900000 	.word	0x3c900000

08004fb4 <_init>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr

08004fc0 <_fini>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	bf00      	nop
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr
